
ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011bcc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003448  08011d7c  08011d7c  00021d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080151c4  080151c4  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  080151c4  080151c4  000251c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080151cc  080151cc  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080151cc  080151cc  000251cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080151d0  080151d0  000251d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080151d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          000087c8  20000090  20000090  00030090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008858  20008858  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ea8a  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005321  00000000  00000000  0004eb4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001558  00000000  00000000  00053e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014b8  00000000  00000000  000553c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030a34  00000000  00000000  00056880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025c87  00000000  00000000  000872b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed274  00000000  00000000  000acf3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019a1af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f54  00000000  00000000  0019a200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08011d64 	.word	0x08011d64

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	08011d64 	.word	0x08011d64

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <LedCGIHandler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*CGI handler for LEDs*/
const char* LedCGIHandler(int iIndex, int iNumParams, char* pcParam[], char* pcValue[])
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
 80005d0:	603b      	str	r3, [r7, #0]
   uint32_t i = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]

   if (iIndex == 0)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d146      	bne.n	800066a <LedCGIHandler+0xa6>
   {
     LED2_OFF;
 80005dc:	4b25      	ldr	r3, [pc, #148]	; (8000674 <LedCGIHandler+0xb0>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	4a24      	ldr	r2, [pc, #144]	; (8000674 <LedCGIHandler+0xb0>)
 80005e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005e6:	6153      	str	r3, [r2, #20]
     LED3_OFF;
 80005e8:	4b22      	ldr	r3, [pc, #136]	; (8000674 <LedCGIHandler+0xb0>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <LedCGIHandler+0xb0>)
 80005ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80005f2:	6153      	str	r3, [r2, #20]

      for (i = 0; i < iNumParams; i++)
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	e033      	b.n	8000662 <LedCGIHandler+0x9e>
      {
         if (strcmp(pcParam[i], "led") == 0)
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	4413      	add	r3, r2
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	491c      	ldr	r1, [pc, #112]	; (8000678 <LedCGIHandler+0xb4>)
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff fdf2 	bl	80001f0 <strcmp>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d124      	bne.n	800065c <LedCGIHandler+0x98>
         {
            if (strcmp(pcValue[i], "1") == 0)
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	683a      	ldr	r2, [r7, #0]
 8000618:	4413      	add	r3, r2
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4917      	ldr	r1, [pc, #92]	; (800067c <LedCGIHandler+0xb8>)
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff fde6 	bl	80001f0 <strcmp>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d106      	bne.n	8000638 <LedCGIHandler+0x74>
               LED2_ON;
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <LedCGIHandler+0xb0>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	4a11      	ldr	r2, [pc, #68]	; (8000674 <LedCGIHandler+0xb0>)
 8000630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000634:	6153      	str	r3, [r2, #20]
 8000636:	e011      	b.n	800065c <LedCGIHandler+0x98>

            else if (strcmp(pcValue[i], "2") == 0)
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	4413      	add	r3, r2
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	490f      	ldr	r1, [pc, #60]	; (8000680 <LedCGIHandler+0xbc>)
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff fdd3 	bl	80001f0 <strcmp>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d105      	bne.n	800065c <LedCGIHandler+0x98>
               LED3_ON;
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <LedCGIHandler+0xb0>)
 8000652:	695b      	ldr	r3, [r3, #20]
 8000654:	4a07      	ldr	r2, [pc, #28]	; (8000674 <LedCGIHandler+0xb0>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065a:	6153      	str	r3, [r2, #20]
      for (i = 0; i < iNumParams; i++)
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	3301      	adds	r3, #1
 8000660:	617b      	str	r3, [r7, #20]
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	697a      	ldr	r2, [r7, #20]
 8000666:	429a      	cmp	r2, r3
 8000668:	d3c7      	bcc.n	80005fa <LedCGIHandler+0x36>
         }
      }
   }
   return "/index.html";
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <LedCGIHandler+0xc0>)
}
 800066c:	4618      	mov	r0, r3
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40020400 	.word	0x40020400
 8000678:	08011d88 	.word	0x08011d88
 800067c:	08011d8c 	.word	0x08011d8c
 8000680:	08011d90 	.word	0x08011d90
 8000684:	08011d94 	.word	0x08011d94

08000688 <myCGIInit>:

void myCGIInit(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
   theCGITable[0] = LedCGI;
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <myCGIInit+0x1c>)
 800068e:	4a06      	ldr	r2, [pc, #24]	; (80006a8 <myCGIInit+0x20>)
 8000690:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000694:	e883 0003 	stmia.w	r3, {r0, r1}

   http_set_cgi_handlers(theCGITable, 1);
 8000698:	2101      	movs	r1, #1
 800069a:	4802      	ldr	r0, [pc, #8]	; (80006a4 <myCGIInit+0x1c>)
 800069c:	f005 fdfc 	bl	8006298 <http_set_cgi_handlers>
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200000f0 	.word	0x200000f0
 80006a8:	08014a98 	.word	0x08014a98

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b0:	f000 fc6a 	bl	8000f88 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b4:	f000 f80e 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b8:	f000 f8a0 	bl	80007fc <MX_GPIO_Init>
  MX_LWIP_Init();
 80006bc:	f003 fd4a 	bl	8004154 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  MX_USART3_UART_Init();
 80006c0:	f000 f872 	bl	80007a8 <MX_USART3_UART_Init>
  httpd_init();
 80006c4:	f005 fdc8 	bl	8006258 <httpd_init>
  myCGIInit();
 80006c8:	f7ff ffde 	bl	8000688 <myCGIInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
     MX_LWIP_Process();
 80006cc:	f003 fe8e 	bl	80043ec <MX_LWIP_Process>
 80006d0:	e7fc      	b.n	80006cc <main+0x20>
	...

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	; 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2230      	movs	r2, #48	; 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f010 fac4 	bl	8010c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	4a27      	ldr	r2, [pc, #156]	; (80007a0 <SystemClock_Config+0xcc>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
 8000708:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <SystemClock_Config+0xcc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemClock_Config+0xd0>)
 800071e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <SystemClock_Config+0xd0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000730:	2301      	movs	r3, #1
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000734:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000744:	2304      	movs	r3, #4
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000748:	23a8      	movs	r3, #168	; 0xa8
 800074a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000750:	2307      	movs	r3, #7
 8000752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 0320 	add.w	r3, r7, #32
 8000758:	4618      	mov	r0, r3
 800075a:	f002 f90b 	bl	8002974 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000764:	f000 f8f8 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	230f      	movs	r3, #15
 800076a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	2302      	movs	r3, #2
 800076e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000774:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2105      	movs	r1, #5
 8000786:	4618      	mov	r0, r3
 8000788:	f002 fb6c 	bl	8002e64 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000792:	f000 f8e1 	bl	8000958 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3750      	adds	r7, #80	; 0x50
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_USART3_UART_Init+0x4c>)
 80007ae:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <MX_USART3_UART_Init+0x50>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_USART3_UART_Init+0x4c>)
 80007b4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80007b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_USART3_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_USART3_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_USART3_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_USART3_UART_Init+0x4c>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_USART3_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_USART3_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_USART3_UART_Init+0x4c>)
 80007e0:	f002 fd60 	bl	80032a4 <HAL_UART_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007ea:	f000 f8b5 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000ac 	.word	0x200000ac
 80007f8:	40004800 	.word	0x40004800

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	; 0x30
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
 8000816:	4b4c      	ldr	r3, [pc, #304]	; (8000948 <MX_GPIO_Init+0x14c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a4b      	ldr	r2, [pc, #300]	; (8000948 <MX_GPIO_Init+0x14c>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b49      	ldr	r3, [pc, #292]	; (8000948 <MX_GPIO_Init+0x14c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	61bb      	str	r3, [r7, #24]
 800082c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	4b45      	ldr	r3, [pc, #276]	; (8000948 <MX_GPIO_Init+0x14c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a44      	ldr	r2, [pc, #272]	; (8000948 <MX_GPIO_Init+0x14c>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b42      	ldr	r3, [pc, #264]	; (8000948 <MX_GPIO_Init+0x14c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b3e      	ldr	r3, [pc, #248]	; (8000948 <MX_GPIO_Init+0x14c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a3d      	ldr	r2, [pc, #244]	; (8000948 <MX_GPIO_Init+0x14c>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b3b      	ldr	r3, [pc, #236]	; (8000948 <MX_GPIO_Init+0x14c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b37      	ldr	r3, [pc, #220]	; (8000948 <MX_GPIO_Init+0x14c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a36      	ldr	r2, [pc, #216]	; (8000948 <MX_GPIO_Init+0x14c>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b34      	ldr	r3, [pc, #208]	; (8000948 <MX_GPIO_Init+0x14c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	4b30      	ldr	r3, [pc, #192]	; (8000948 <MX_GPIO_Init+0x14c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a2f      	ldr	r2, [pc, #188]	; (8000948 <MX_GPIO_Init+0x14c>)
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b2d      	ldr	r3, [pc, #180]	; (8000948 <MX_GPIO_Init+0x14c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0308 	and.w	r3, r3, #8
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b29      	ldr	r3, [pc, #164]	; (8000948 <MX_GPIO_Init+0x14c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a28      	ldr	r2, [pc, #160]	; (8000948 <MX_GPIO_Init+0x14c>)
 80008a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b26      	ldr	r3, [pc, #152]	; (8000948 <MX_GPIO_Init+0x14c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f244 0181 	movw	r1, #16513	; 0x4081
 80008c0:	4822      	ldr	r0, [pc, #136]	; (800094c <MX_GPIO_Init+0x150>)
 80008c2:	f002 f83d 	bl	8002940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2140      	movs	r1, #64	; 0x40
 80008ca:	4821      	ldr	r0, [pc, #132]	; (8000950 <MX_GPIO_Init+0x154>)
 80008cc:	f002 f838 	bl	8002940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	481b      	ldr	r0, [pc, #108]	; (8000954 <MX_GPIO_Init+0x158>)
 80008e8:	f001 fe7e 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008ec:	f244 0381 	movw	r3, #16513	; 0x4081
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4811      	ldr	r0, [pc, #68]	; (800094c <MX_GPIO_Init+0x150>)
 8000906:	f001 fe6f 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800090a:	2340      	movs	r3, #64	; 0x40
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	480b      	ldr	r0, [pc, #44]	; (8000950 <MX_GPIO_Init+0x154>)
 8000922:	f001 fe61 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000926:	2380      	movs	r3, #128	; 0x80
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_GPIO_Init+0x154>)
 800093a:	f001 fe55 	bl	80025e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800093e:	bf00      	nop
 8000940:	3730      	adds	r7, #48	; 0x30
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800
 800094c:	40020400 	.word	0x40020400
 8000950:	40021800 	.word	0x40021800
 8000954:	40020800 	.word	0x40020800

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <HAL_MspInit+0x4c>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000978:	6453      	str	r3, [r2, #68]	; 0x44
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <HAL_MspInit+0x4c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a1d      	ldr	r2, [pc, #116]	; (8000a48 <HAL_UART_MspInit+0x94>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d134      	bne.n	8000a40 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <HAL_UART_MspInit+0x98>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <HAL_UART_MspInit+0x98>)
 80009e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <HAL_UART_MspInit+0x98>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_UART_MspInit+0x98>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <HAL_UART_MspInit+0x98>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_UART_MspInit+0x98>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a20:	2307      	movs	r3, #7
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4809      	ldr	r0, [pc, #36]	; (8000a50 <HAL_UART_MspInit+0x9c>)
 8000a2c:	f001 fddc 	bl	80025e8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2100      	movs	r1, #0
 8000a34:	2027      	movs	r0, #39	; 0x27
 8000a36:	f000 fc18 	bl	800126a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a3a:	2027      	movs	r0, #39	; 0x27
 8000a3c:	f000 fc31 	bl	80012a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a40:	bf00      	nop
 8000a42:	3728      	adds	r7, #40	; 0x28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40004800 	.word	0x40004800
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020c00 	.word	0x40020c00

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <NMI_Handler+0x4>

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler+0x4>

08000a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa0:	f000 fac4 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <USART3_IRQHandler+0x10>)
 8000aae:	f002 fc8b 	bl	80033c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200000ac 	.word	0x200000ac

08000abc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return 1;
 8000ac0:	2301      	movs	r3, #1
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <_kill>:

int _kill(int pid, int sig)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ad6:	4b05      	ldr	r3, [pc, #20]	; (8000aec <_kill+0x20>)
 8000ad8:	2216      	movs	r2, #22
 8000ada:	601a      	str	r2, [r3, #0]
  return -1;
 8000adc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	20008848 	.word	0x20008848

08000af0 <_exit>:

void _exit (int status)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000af8:	f04f 31ff 	mov.w	r1, #4294967295
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff ffe5 	bl	8000acc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b02:	e7fe      	b.n	8000b02 <_exit+0x12>

08000b04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	e00a      	b.n	8000b2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b16:	f3af 8000 	nop.w
 8000b1a:	4601      	mov	r1, r0
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	60ba      	str	r2, [r7, #8]
 8000b22:	b2ca      	uxtb	r2, r1
 8000b24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	697a      	ldr	r2, [r7, #20]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	dbf0      	blt.n	8000b16 <_read+0x12>
  }

  return len;
 8000b34:	687b      	ldr	r3, [r7, #4]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	60f8      	str	r0, [r7, #12]
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
 8000b4e:	e009      	b.n	8000b64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	60ba      	str	r2, [r7, #8]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	3301      	adds	r3, #1
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697a      	ldr	r2, [r7, #20]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	dbf1      	blt.n	8000b50 <_write+0x12>
  }
  return len;
 8000b6c:	687b      	ldr	r3, [r7, #4]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <_close>:

int _close(int file)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b9e:	605a      	str	r2, [r3, #4]
  return 0;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_isatty>:

int _isatty(int file)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b087      	sub	sp, #28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be8:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <_sbrk+0x5c>)
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <_sbrk+0x60>)
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <_sbrk+0x64>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <_sbrk+0x68>)
 8000c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d205      	bcs.n	8000c1c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <_sbrk+0x6c>)
 8000c12:	220c      	movs	r2, #12
 8000c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	e009      	b.n	8000c30 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <_sbrk+0x64>)
 8000c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	371c      	adds	r7, #28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	20030000 	.word	0x20030000
 8000c40:	00000400 	.word	0x00000400
 8000c44:	200000f8 	.word	0x200000f8
 8000c48:	20008858 	.word	0x20008858
 8000c4c:	20008848 	.word	0x20008848

08000c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <SystemInit+0x20>)
 8000c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5a:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <SystemInit+0x20>)
 8000c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cac <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c7a:	490e      	ldr	r1, [pc, #56]	; (8000cb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c7c:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c90:	4c0b      	ldr	r4, [pc, #44]	; (8000cc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c9e:	f7ff ffd7 	bl	8000c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f00f ffa3 	bl	8010bec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca6:	f7ff fd01 	bl	80006ac <main>
  bx  lr    
 8000caa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000cb8:	080151d4 	.word	0x080151d4
  ldr r2, =_sbss
 8000cbc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000cc0:	20008858 	.word	0x20008858

08000cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC_IRQHandler>

08000cc6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00b      	beq.n	8000cee <LAN8742_RegisterBusIO+0x28>
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d007      	beq.n	8000cee <LAN8742_RegisterBusIO+0x28>
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <LAN8742_RegisterBusIO+0x28>
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	691b      	ldr	r3, [r3, #16]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d102      	bne.n	8000cf4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf2:	e014      	b.n	8000d1e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685a      	ldr	r2, [r3, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	68da      	ldr	r2, [r3, #12]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	691a      	ldr	r2, [r3, #16]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b086      	sub	sp, #24
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d17c      	bne.n	8000e44 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d002      	beq.n	8000d58 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2220      	movs	r2, #32
 8000d5c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	e01c      	b.n	8000d9e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	f107 0208 	add.w	r2, r7, #8
 8000d6c:	2112      	movs	r1, #18
 8000d6e:	6978      	ldr	r0, [r7, #20]
 8000d70:	4798      	blx	r3
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	da03      	bge.n	8000d80 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000d78:	f06f 0304 	mvn.w	r3, #4
 8000d7c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000d7e:	e00b      	b.n	8000d98 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	f003 031f 	and.w	r3, r3, #31
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d105      	bne.n	8000d98 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
         break;
 8000d96:	e005      	b.n	8000da4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	2b1f      	cmp	r3, #31
 8000da2:	d9df      	bls.n	8000d64 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b1f      	cmp	r3, #31
 8000daa:	d902      	bls.n	8000db2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000dac:	f06f 0302 	mvn.w	r3, #2
 8000db0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d145      	bne.n	8000e44 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	6810      	ldr	r0, [r2, #0]
 8000dc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4798      	blx	r3
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db37      	blt.n	8000e3e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	6810      	ldr	r0, [r2, #0]
 8000dd6:	f107 0208 	add.w	r2, r7, #8
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4798      	blx	r3
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db28      	blt.n	8000e36 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4798      	blx	r3
 8000dea:	4603      	mov	r3, r0
 8000dec:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000dee:	e01c      	b.n	8000e2a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4798      	blx	r3
 8000df6:	4603      	mov	r3, r0
 8000df8:	461a      	mov	r2, r3
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e02:	d80e      	bhi.n	8000e22 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	6810      	ldr	r0, [r2, #0]
 8000e0c:	f107 0208 	add.w	r2, r7, #8
 8000e10:	2100      	movs	r1, #0
 8000e12:	4798      	blx	r3
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	da07      	bge.n	8000e2a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000e1a:	f06f 0304 	mvn.w	r3, #4
 8000e1e:	613b      	str	r3, [r7, #16]
                 break;
 8000e20:	e010      	b.n	8000e44 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000e22:	f06f 0301 	mvn.w	r3, #1
 8000e26:	613b      	str	r3, [r7, #16]
               break;
 8000e28:	e00c      	b.n	8000e44 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1dd      	bne.n	8000df0 <LAN8742_Init+0xc6>
 8000e34:	e006      	b.n	8000e44 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000e36:	f06f 0304 	mvn.w	r3, #4
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	e002      	b.n	8000e44 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000e3e:	f06f 0303 	mvn.w	r3, #3
 8000e42:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d112      	bne.n	8000e70 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	4798      	blx	r3
 8000e50:	4603      	mov	r3, r0
 8000e52:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000e54:	bf00      	nop
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	4798      	blx	r3
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e68:	d9f5      	bls.n	8000e56 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000e70:	693b      	ldr	r3, [r7, #16]
 }
 8000e72:	4618      	mov	r0, r3
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b084      	sub	sp, #16
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	6810      	ldr	r0, [r2, #0]
 8000e8e:	f107 020c 	add.w	r2, r7, #12
 8000e92:	2101      	movs	r1, #1
 8000e94:	4798      	blx	r3
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	da02      	bge.n	8000ea2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e9c:	f06f 0304 	mvn.w	r3, #4
 8000ea0:	e06e      	b.n	8000f80 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	6810      	ldr	r0, [r2, #0]
 8000eaa:	f107 020c 	add.w	r2, r7, #12
 8000eae:	2101      	movs	r1, #1
 8000eb0:	4798      	blx	r3
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	da02      	bge.n	8000ebe <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000eb8:	f06f 0304 	mvn.w	r3, #4
 8000ebc:	e060      	b.n	8000f80 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d101      	bne.n	8000ecc <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e059      	b.n	8000f80 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	695b      	ldr	r3, [r3, #20]
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	6810      	ldr	r0, [r2, #0]
 8000ed4:	f107 020c 	add.w	r2, r7, #12
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4798      	blx	r3
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	da02      	bge.n	8000ee8 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000ee2:	f06f 0304 	mvn.w	r3, #4
 8000ee6:	e04b      	b.n	8000f80 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d11b      	bne.n	8000f2a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <LAN8742_GetLinkState+0x90>
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f06:	2302      	movs	r3, #2
 8000f08:	e03a      	b.n	8000f80 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e033      	b.n	8000f80 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f22:	2304      	movs	r3, #4
 8000f24:	e02c      	b.n	8000f80 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f26:	2305      	movs	r3, #5
 8000f28:	e02a      	b.n	8000f80 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	6810      	ldr	r0, [r2, #0]
 8000f32:	f107 020c 	add.w	r2, r7, #12
 8000f36:	211f      	movs	r1, #31
 8000f38:	4798      	blx	r3
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	da02      	bge.n	8000f46 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000f40:	f06f 0304 	mvn.w	r3, #4
 8000f44:	e01c      	b.n	8000f80 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000f50:	2306      	movs	r3, #6
 8000f52:	e015      	b.n	8000f80 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f003 031c 	and.w	r3, r3, #28
 8000f5a:	2b18      	cmp	r3, #24
 8000f5c:	d101      	bne.n	8000f62 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	e00e      	b.n	8000f80 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f003 031c 	and.w	r3, r3, #28
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d101      	bne.n	8000f70 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e007      	b.n	8000f80 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 031c 	and.w	r3, r3, #28
 8000f76:	2b14      	cmp	r3, #20
 8000f78:	d101      	bne.n	8000f7e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	e000      	b.n	8000f80 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f7e:	2305      	movs	r3, #5
    }				
  }
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <HAL_Init+0x40>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_Init+0x40>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_Init+0x40>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f000 f94f 	bl	8001254 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f808 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbc:	f7ff fcd2 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f967 	bl	80012be <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f000 f92f 	bl	800126a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000000 	.word	0x20000000
 8001024:	20000008 	.word	0x20000008
 8001028:	20000004 	.word	0x20000004

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008
 8001050:	200000fc 	.word	0x200000fc

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	200000fc 	.word	0x200000fc

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff ffee 	bl	8001054 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_Delay+0x44>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001092:	bf00      	nop
 8001094:	f7ff ffde 	bl	8001054 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008

080010b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <__NVIC_GetPriorityGrouping+0x18>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	f003 0307 	and.w	r3, r3, #7
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db0b      	blt.n	8001142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f003 021f 	and.w	r2, r3, #31
 8001130:	4907      	ldr	r1, [pc, #28]	; (8001150 <__NVIC_EnableIRQ+0x38>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	095b      	lsrs	r3, r3, #5
 8001138:	2001      	movs	r0, #1
 800113a:	fa00 f202 	lsl.w	r2, r0, r2
 800113e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000e100 	.word	0xe000e100

08001154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	db0a      	blt.n	800117e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	490c      	ldr	r1, [pc, #48]	; (80011a0 <__NVIC_SetPriority+0x4c>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	0112      	lsls	r2, r2, #4
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	440b      	add	r3, r1
 8001178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800117c:	e00a      	b.n	8001194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4908      	ldr	r1, [pc, #32]	; (80011a4 <__NVIC_SetPriority+0x50>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	3b04      	subs	r3, #4
 800118c:	0112      	lsls	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	440b      	add	r3, r1
 8001192:	761a      	strb	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	bf28      	it	cs
 80011c6:	2304      	movcs	r3, #4
 80011c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3304      	adds	r3, #4
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	d902      	bls.n	80011d8 <NVIC_EncodePriority+0x30>
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3b03      	subs	r3, #3
 80011d6:	e000      	b.n	80011da <NVIC_EncodePriority+0x32>
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	f04f 32ff 	mov.w	r2, #4294967295
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	401a      	ands	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	43d9      	mvns	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	4313      	orrs	r3, r2
         );
}
 8001202:	4618      	mov	r0, r3
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001220:	d301      	bcc.n	8001226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001222:	2301      	movs	r3, #1
 8001224:	e00f      	b.n	8001246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <SysTick_Config+0x40>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122e:	210f      	movs	r1, #15
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f7ff ff8e 	bl	8001154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <SysTick_Config+0x40>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <SysTick_Config+0x40>)
 8001240:	2207      	movs	r2, #7
 8001242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	e000e010 	.word	0xe000e010

08001254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff29 	bl	80010b4 <__NVIC_SetPriorityGrouping>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800127c:	f7ff ff3e 	bl	80010fc <__NVIC_GetPriorityGrouping>
 8001280:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	68b9      	ldr	r1, [r7, #8]
 8001286:	6978      	ldr	r0, [r7, #20]
 8001288:	f7ff ff8e 	bl	80011a8 <NVIC_EncodePriority>
 800128c:	4602      	mov	r2, r0
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff5d 	bl	8001154 <__NVIC_SetPriority>
}
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff31 	bl	8001118 <__NVIC_EnableIRQ>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffa2 	bl	8001210 <SysTick_Config>
 80012cc:	4603      	mov	r3, r0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b084      	sub	sp, #16
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012e4:	f7ff feb6 	bl	8001054 <HAL_GetTick>
 80012e8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d008      	beq.n	8001308 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2280      	movs	r2, #128	; 0x80
 80012fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e052      	b.n	80013ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0216 	bic.w	r2, r2, #22
 8001316:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	695a      	ldr	r2, [r3, #20]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001326:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	2b00      	cmp	r3, #0
 800132e:	d103      	bne.n	8001338 <HAL_DMA_Abort+0x62>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001334:	2b00      	cmp	r3, #0
 8001336:	d007      	beq.n	8001348 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 0208 	bic.w	r2, r2, #8
 8001346:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0201 	bic.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001358:	e013      	b.n	8001382 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800135a:	f7ff fe7b 	bl	8001054 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b05      	cmp	r3, #5
 8001366:	d90c      	bls.n	8001382 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2220      	movs	r2, #32
 800136c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2203      	movs	r2, #3
 8001372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e015      	b.n	80013ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1e4      	bne.n	800135a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001394:	223f      	movs	r2, #63	; 0x3f
 8001396:	409a      	lsls	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d004      	beq.n	80013d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2280      	movs	r2, #128	; 0x80
 80013ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e00c      	b.n	80013ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2205      	movs	r2, #5
 80013d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0201 	bic.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e06c      	b.n	80014e8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001414:	2b00      	cmp	r3, #0
 8001416:	d106      	bne.n	8001426 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2223      	movs	r2, #35	; 0x23
 800141c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f003 fa07 	bl	8004834 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <HAL_ETH_Init+0xf4>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	4a30      	ldr	r2, [pc, #192]	; (80014f0 <HAL_ETH_Init+0xf4>)
 8001430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001434:	6453      	str	r3, [r2, #68]	; 0x44
 8001436:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <HAL_ETH_Init+0xf4>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001442:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <HAL_ETH_Init+0xf8>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	4a2b      	ldr	r2, [pc, #172]	; (80014f4 <HAL_ETH_Init+0xf8>)
 8001448:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800144c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800144e:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <HAL_ETH_Init+0xf8>)
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	4927      	ldr	r1, [pc, #156]	; (80014f4 <HAL_ETH_Init+0xf8>)
 8001458:	4313      	orrs	r3, r2
 800145a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800145c:	4b25      	ldr	r3, [pc, #148]	; (80014f4 <HAL_ETH_Init+0xf8>)
 800145e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001476:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001478:	f7ff fdec 	bl	8001054 <HAL_GetTick>
 800147c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800147e:	e011      	b.n	80014a4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001480:	f7ff fde8 	bl	8001054 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800148e:	d909      	bls.n	80014a4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2204      	movs	r2, #4
 8001494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	22e0      	movs	r2, #224	; 0xe0
 800149c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e021      	b.n	80014e8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1e4      	bne.n	8001480 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 fdf0 	bl	800209c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 fe97 	bl	80021f0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 feed 	bl	80022a2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	461a      	mov	r2, r3
 80014ce:	2100      	movs	r1, #0
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 fe55 	bl	8002180 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2210      	movs	r2, #16
 80014e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40013800 	.word	0x40013800

080014f8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001506:	2b10      	cmp	r3, #16
 8001508:	d150      	bne.n	80015ac <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2223      	movs	r2, #35	; 0x23
 800150e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2204      	movs	r2, #4
 8001516:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 f9fd 	bl	8001918 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 0208 	orr.w	r2, r2, #8
 800152c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001536:	2001      	movs	r0, #1
 8001538:	f7ff fd98 	bl	800106c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0204 	orr.w	r2, r2, #4
 8001552:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800155c:	2001      	movs	r0, #1
 800155e:	f7ff fd85 	bl	800106c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 fc36 	bl	8001ddc <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001582:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001586:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	f043 0302 	orr.w	r3, r3, #2
 800159a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800159e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2223      	movs	r2, #35	; 0x23
 80015a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e000      	b.n	80015ae <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
  }
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b084      	sub	sp, #16
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015c4:	2b23      	cmp	r3, #35	; 0x23
 80015c6:	d14a      	bne.n	800165e <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2223      	movs	r2, #35	; 0x23
 80015cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015e6:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	f023 0302 	bic.w	r3, r3, #2
 80015fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015fe:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0204 	bic.w	r2, r2, #4
 800160e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001618:	2001      	movs	r0, #1
 800161a:	f7ff fd27 	bl	800106c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 fbd8 	bl	8001ddc <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0208 	bic.w	r2, r2, #8
 800163a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001644:	2001      	movs	r0, #1
 8001646:	f7ff fd11 	bl	800106c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2210      	movs	r2, #16
 8001656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	e000      	b.n	8001660 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
  }
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001680:	f043 0201 	orr.w	r2, r3, #1
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e07c      	b.n	8001788 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001694:	2b23      	cmp	r3, #35	; 0x23
 8001696:	d176      	bne.n	8001786 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001698:	2200      	movs	r2, #0
 800169a:	68b9      	ldr	r1, [r7, #8]
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f000 fe6d 	bl	800237c <ETH_Prepare_Tx_Descriptors>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d009      	beq.n	80016bc <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ae:	f043 0202 	orr.w	r2, r3, #2
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e065      	b.n	8001788 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016bc:	f3bf 8f4f 	dsb	sy
}
 80016c0:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	3206      	adds	r2, #6
 80016ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ce:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	1c5a      	adds	r2, r3, #1
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	629a      	str	r2, [r3, #40]	; 0x28
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d904      	bls.n	80016ec <HAL_ETH_Transmit+0x84>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e6:	1f1a      	subs	r2, r3, #4
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3106      	adds	r1, #6
 80016f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001700:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001702:	f7ff fca7 	bl	8001054 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001708:	e037      	b.n	800177a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d011      	beq.n	8001740 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001722:	f043 0208 	orr.w	r2, r3, #8
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001734:	695a      	ldr	r2, [r3, #20]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e023      	b.n	8001788 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001746:	d018      	beq.n	800177a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001748:	f7ff fc84 	bl	8001054 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	429a      	cmp	r2, r3
 8001756:	d302      	bcc.n	800175e <HAL_ETH_Transmit+0xf6>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10d      	bne.n	800177a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001764:	f043 0204 	orr.w	r2, r3, #4
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001774:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e006      	b.n	8001788 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	dbc3      	blt.n	800170a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	e000      	b.n	8001788 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
  }
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d109      	bne.n	80017bc <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ae:	f043 0201 	orr.w	r2, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0a8      	b.n	800190e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017c2:	2b23      	cmp	r3, #35	; 0x23
 80017c4:	d001      	beq.n	80017ca <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0a1      	b.n	800190e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ce:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	3212      	adds	r2, #18
 80017d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017da:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017e0:	f1c3 0304 	rsb	r3, r3, #4
 80017e4:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017e6:	e06a      	b.n	80018be <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d007      	beq.n	8001804 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	699a      	ldr	r2, [r3, #24]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	69da      	ldr	r2, [r3, #28]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800180c:	2b00      	cmp	r3, #0
 800180e:	d103      	bne.n	8001818 <HAL_ETH_ReadData+0x88>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001814:	2b00      	cmp	r3, #0
 8001816:	d040      	beq.n	800189a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00c      	beq.n	800185c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	0c1b      	lsrs	r3, r3, #16
 8001848:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800184c:	3b04      	subs	r3, #4
 800184e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001874:	461a      	mov	r2, r3
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	b29b      	uxth	r3, r3
 800187a:	f003 f9ab 	bl	8004bd4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	441a      	add	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	2200      	movs	r2, #0
 8001898:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3301      	adds	r3, #1
 800189e:	61fb      	str	r3, [r7, #28]
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d902      	bls.n	80018ac <HAL_ETH_ReadData+0x11c>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b04      	subs	r3, #4
 80018aa:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	3212      	adds	r2, #18
 80018b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	3301      	adds	r3, #1
 80018bc:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	db06      	blt.n	80018d4 <HAL_ETH_ReadData+0x144>
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d202      	bcs.n	80018d4 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d089      	beq.n	80017e8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	441a      	add	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d002      	beq.n	80018ee <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 f815 	bl	8001918 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69fa      	ldr	r2, [r7, #28]
 80018f2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d108      	bne.n	800190c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	e000      	b.n	800190e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
}
 800190e:	4618      	mov	r0, r3
 8001910:	3720      	adds	r7, #32
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001924:	2301      	movs	r3, #1
 8001926:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800192c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69fa      	ldr	r2, [r7, #28]
 8001932:	3212      	adds	r2, #18
 8001934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001938:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800193e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001940:	e040      	b.n	80019c4 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d112      	bne.n	8001970 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	4618      	mov	r0, r3
 8001950:	f003 f910 	bl	8004b74 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d102      	bne.n	8001960 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800195a:	2300      	movs	r3, #0
 800195c:	74fb      	strb	r3, [r7, #19]
 800195e:	e007      	b.n	8001970 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	461a      	mov	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	461a      	mov	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001970:	7cfb      	ldrb	r3, [r7, #19]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d026      	beq.n	80019c4 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	2b00      	cmp	r3, #0
 800197c:	d103      	bne.n	8001986 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	4a1e      	ldr	r2, [pc, #120]	; (80019fc <ETH_UpdateDescriptor+0xe4>)
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	e003      	b.n	800198e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800198c:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800198e:	f3bf 8f5f 	dmb	sy
}
 8001992:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	3301      	adds	r3, #1
 80019a4:	61fb      	str	r3, [r7, #28]
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d902      	bls.n	80019b2 <ETH_UpdateDescriptor+0x9a>
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	3b04      	subs	r3, #4
 80019b0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	3212      	adds	r2, #18
 80019b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019bc:	617b      	str	r3, [r7, #20]
      desccount--;
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d002      	beq.n	80019d0 <ETH_UpdateDescriptor+0xb8>
 80019ca:	7cfb      	ldrb	r3, [r7, #19]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1b8      	bne.n	8001942 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d00c      	beq.n	80019f4 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e2:	461a      	mov	r2, r3
 80019e4:	2300      	movs	r3, #0
 80019e6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80019f4:	bf00      	nop
 80019f6:	3720      	adds	r7, #32
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	80004600 	.word	0x80004600

08001a00 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f003 031c 	and.w	r3, r3, #28
 8001a1c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	02db      	lsls	r3, r3, #11
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	019b      	lsls	r3, r3, #6
 8001a2e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f023 0302 	bic.w	r3, r3, #2
 8001a3e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001a50:	f7ff fb00 	bl	8001054 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a56:	e00d      	b.n	8001a74 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001a58:	f7ff fafc 	bl	8001054 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a66:	d301      	bcc.n	8001a6c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e010      	b.n	8001a8e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1ec      	bne.n	8001a58 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	461a      	mov	r2, r3
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f003 031c 	and.w	r3, r3, #28
 8001ab2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	02db      	lsls	r3, r3, #11
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	019b      	lsls	r3, r3, #6
 8001ac4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001af0:	f7ff fab0 	bl	8001054 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001af6:	e00d      	b.n	8001b14 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001af8:	f7ff faac 	bl	8001054 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b06:	d301      	bcc.n	8001b0c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e009      	b.n	8001b20 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1ec      	bne.n	8001af8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0d9      	b.n	8001cf0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	bf14      	ite	ne
 8001b4a:	2301      	movne	r3, #1
 8001b4c:	2300      	moveq	r3, #0
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	461a      	mov	r2, r3
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bf0c      	ite	eq
 8001b74:	2301      	moveq	r3, #1
 8001b76:	2300      	movne	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bf14      	ite	ne
 8001b90:	2301      	movne	r3, #1
 8001b92:	2300      	moveq	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	bf0c      	ite	eq
 8001baa:	2301      	moveq	r3, #1
 8001bac:	2300      	movne	r3, #0
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	bf14      	ite	ne
 8001bc4:	2301      	movne	r3, #1
 8001bc6:	2300      	moveq	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	bf0c      	ite	eq
 8001bfa:	2301      	moveq	r3, #1
 8001bfc:	2300      	movne	r3, #0
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	461a      	mov	r2, r3
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bf0c      	ite	eq
 8001c14:	2301      	moveq	r3, #1
 8001c16:	2300      	movne	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	bf14      	ite	ne
 8001c2e:	2301      	movne	r3, #1
 8001c30:	2300      	moveq	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bf14      	ite	ne
 8001c56:	2301      	movne	r3, #1
 8001c58:	2300      	moveq	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	bf14      	ite	ne
 8001c70:	2301      	movne	r3, #1
 8001c72:	2300      	moveq	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf0c      	ite	eq
 8001c8c:	2301      	moveq	r3, #1
 8001c8e:	2300      	movne	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	0c1b      	lsrs	r3, r3, #16
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	bf14      	ite	ne
 8001cc4:	2301      	movne	r3, #1
 8001cc6:	2300      	moveq	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	bf14      	ite	ne
 8001ce0:	2301      	movne	r3, #1
 8001ce2:	2300      	moveq	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e00b      	b.n	8001d28 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d16:	2b10      	cmp	r3, #16
 8001d18:	d105      	bne.n	8001d26 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001d1a:	6839      	ldr	r1, [r7, #0]
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f883 	bl	8001e28 <ETH_SetMACConfig>

    return HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e000      	b.n	8001d28 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
  }
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f023 031c 	bic.w	r3, r3, #28
 8001d46:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001d48:	f001 fa78 	bl	800323c <HAL_RCC_GetHCLKFreq>
 8001d4c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	4a1d      	ldr	r2, [pc, #116]	; (8001dc8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d908      	bls.n	8001d68 <HAL_ETH_SetMDIOClockRange+0x38>
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d804      	bhi.n	8001d68 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f043 0308 	orr.w	r3, r3, #8
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	e027      	b.n	8001db8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	4a18      	ldr	r2, [pc, #96]	; (8001dcc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d908      	bls.n	8001d82 <HAL_ETH_SetMDIOClockRange+0x52>
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d204      	bcs.n	8001d82 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f043 030c 	orr.w	r3, r3, #12
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	e01a      	b.n	8001db8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d303      	bcc.n	8001d92 <HAL_ETH_SetMDIOClockRange+0x62>
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	4a11      	ldr	r2, [pc, #68]	; (8001dd4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d911      	bls.n	8001db6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	4a0f      	ldr	r2, [pc, #60]	; (8001dd4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d908      	bls.n	8001dac <HAL_ETH_SetMDIOClockRange+0x7c>
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	4a0e      	ldr	r2, [pc, #56]	; (8001dd8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d804      	bhi.n	8001dac <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f043 0304 	orr.w	r3, r3, #4
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	e005      	b.n	8001db8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f043 0310 	orr.w	r3, r3, #16
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	e000      	b.n	8001db8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001db6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
}
 8001dc0:	bf00      	nop
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	01312cff 	.word	0x01312cff
 8001dcc:	02160ebf 	.word	0x02160ebf
 8001dd0:	03938700 	.word	0x03938700
 8001dd4:	05f5e0ff 	.word	0x05f5e0ff
 8001dd8:	08f0d17f 	.word	0x08f0d17f

08001ddc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dfa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dfe:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	f7ff f92d 	bl	800106c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e1c:	6193      	str	r3, [r2, #24]
}
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4b51      	ldr	r3, [pc, #324]	; (8001f84 <ETH_SetMACConfig+0x15c>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	7c1b      	ldrb	r3, [r3, #16]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d102      	bne.n	8001e50 <ETH_SetMACConfig+0x28>
 8001e4a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e4e:	e000      	b.n	8001e52 <ETH_SetMACConfig+0x2a>
 8001e50:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	7c5b      	ldrb	r3, [r3, #17]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d102      	bne.n	8001e60 <ETH_SetMACConfig+0x38>
 8001e5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e5e:	e000      	b.n	8001e62 <ETH_SetMACConfig+0x3a>
 8001e60:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e62:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e68:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	7fdb      	ldrb	r3, [r3, #31]
 8001e6e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001e70:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	7f92      	ldrb	r2, [r2, #30]
 8001e7c:	2a00      	cmp	r2, #0
 8001e7e:	d102      	bne.n	8001e86 <ETH_SetMACConfig+0x5e>
 8001e80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e84:	e000      	b.n	8001e88 <ETH_SetMACConfig+0x60>
 8001e86:	2200      	movs	r2, #0
                        macconf->Speed |
 8001e88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	7f1b      	ldrb	r3, [r3, #28]
 8001e8e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e90:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e96:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	791b      	ldrb	r3, [r3, #4]
 8001e9c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001e9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ea6:	2a00      	cmp	r2, #0
 8001ea8:	d102      	bne.n	8001eb0 <ETH_SetMACConfig+0x88>
 8001eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eae:	e000      	b.n	8001eb2 <ETH_SetMACConfig+0x8a>
 8001eb0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001eb2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	7bdb      	ldrb	r3, [r3, #15]
 8001eb8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001eba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ec0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ec8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ee2:	2001      	movs	r0, #1
 8001ee4:	f7ff f8c2 	bl	800106c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001efe:	4013      	ands	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f06:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001f0e:	2a00      	cmp	r2, #0
 8001f10:	d101      	bne.n	8001f16 <ETH_SetMACConfig+0xee>
 8001f12:	2280      	movs	r2, #128	; 0x80
 8001f14:	e000      	b.n	8001f18 <ETH_SetMACConfig+0xf0>
 8001f16:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f18:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001f26:	2a01      	cmp	r2, #1
 8001f28:	d101      	bne.n	8001f2e <ETH_SetMACConfig+0x106>
 8001f2a:	2208      	movs	r2, #8
 8001f2c:	e000      	b.n	8001f30 <ETH_SetMACConfig+0x108>
 8001f2e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f30:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001f38:	2a01      	cmp	r2, #1
 8001f3a:	d101      	bne.n	8001f40 <ETH_SetMACConfig+0x118>
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	e000      	b.n	8001f42 <ETH_SetMACConfig+0x11a>
 8001f40:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001f4a:	2a01      	cmp	r2, #1
 8001f4c:	d101      	bne.n	8001f52 <ETH_SetMACConfig+0x12a>
 8001f4e:	2202      	movs	r2, #2
 8001f50:	e000      	b.n	8001f54 <ETH_SetMACConfig+0x12c>
 8001f52:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f54:	4313      	orrs	r3, r2
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	f7ff f87d 	bl	800106c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	619a      	str	r2, [r3, #24]
}
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	ff20810f 	.word	0xff20810f

08001f88 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4b3d      	ldr	r3, [pc, #244]	; (8002098 <ETH_SetDMAConfig+0x110>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	7b1b      	ldrb	r3, [r3, #12]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d102      	bne.n	8001fb4 <ETH_SetDMAConfig+0x2c>
 8001fae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fb2:	e000      	b.n	8001fb6 <ETH_SetDMAConfig+0x2e>
 8001fb4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	7b5b      	ldrb	r3, [r3, #13]
 8001fba:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fbc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	7f52      	ldrb	r2, [r2, #29]
 8001fc2:	2a00      	cmp	r2, #0
 8001fc4:	d102      	bne.n	8001fcc <ETH_SetDMAConfig+0x44>
 8001fc6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001fca:	e000      	b.n	8001fce <ETH_SetDMAConfig+0x46>
 8001fcc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001fce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	7b9b      	ldrb	r3, [r3, #14]
 8001fd4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001fd6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001fdc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	7f1b      	ldrb	r3, [r3, #28]
 8001fe2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001fe4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	7f9b      	ldrb	r3, [r3, #30]
 8001fea:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001fec:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ff2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ffa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4313      	orrs	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800200c:	461a      	mov	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800201e:	2001      	movs	r0, #1
 8002020:	f7ff f824 	bl	800106c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800202c:	461a      	mov	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	791b      	ldrb	r3, [r3, #4]
 8002036:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800203c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002042:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002048:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002050:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002052:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800205a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002060:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800206a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800206e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800207c:	2001      	movs	r0, #1
 800207e:	f7fe fff5 	bl	800106c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800208a:	461a      	mov	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6013      	str	r3, [r2, #0]
}
 8002090:	bf00      	nop
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	f8de3f23 	.word	0xf8de3f23

0800209c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b0a6      	sub	sp, #152	; 0x98
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80020a4:	2301      	movs	r3, #1
 80020a6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80020aa:	2301      	movs	r3, #1
 80020ac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80020b0:	2300      	movs	r3, #0
 80020b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80020ba:	2301      	movs	r3, #1
 80020bc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80020c6:	2301      	movs	r3, #1
 80020c8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80020d8:	2300      	movs	r3, #0
 80020da:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80020dc:	2300      	movs	r3, #0
 80020de:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80020fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002102:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002104:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002108:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002110:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002114:	4619      	mov	r1, r3
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff fe86 	bl	8001e28 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800211c:	2301      	movs	r3, #1
 800211e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002120:	2301      	movs	r3, #1
 8002122:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002124:	2301      	movs	r3, #1
 8002126:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800212a:	2301      	movs	r3, #1
 800212c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800213e:	2300      	movs	r3, #0
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002142:	2301      	movs	r3, #1
 8002144:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002148:	2301      	movs	r3, #1
 800214a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800214c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002150:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002152:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002156:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002158:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800215c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800215e:	2301      	movs	r3, #1
 8002160:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002164:	2300      	movs	r3, #0
 8002166:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002168:	2300      	movs	r3, #0
 800216a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800216c:	f107 0308 	add.w	r3, r7, #8
 8002170:	4619      	mov	r1, r3
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff ff08 	bl	8001f88 <ETH_SetDMAConfig>
}
 8002178:	bf00      	nop
 800217a:	3798      	adds	r7, #152	; 0x98
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3305      	adds	r3, #5
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	021b      	lsls	r3, r3, #8
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	3204      	adds	r2, #4
 8002198:	7812      	ldrb	r2, [r2, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <ETH_MACAddressConfig+0x68>)
 80021a2:	4413      	add	r3, r2
 80021a4:	461a      	mov	r2, r3
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3303      	adds	r3, #3
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	061a      	lsls	r2, r3, #24
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3302      	adds	r3, #2
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	041b      	lsls	r3, r3, #16
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3301      	adds	r3, #1
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	4313      	orrs	r3, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	7812      	ldrb	r2, [r2, #0]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <ETH_MACAddressConfig+0x6c>)
 80021d2:	4413      	add	r3, r2
 80021d4:	461a      	mov	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	6013      	str	r3, [r2, #0]
}
 80021da:	bf00      	nop
 80021dc:	371c      	adds	r7, #28
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40028040 	.word	0x40028040
 80021ec:	40028044 	.word	0x40028044

080021f0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	e03e      	b.n	800227c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68d9      	ldr	r1, [r3, #12]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	440b      	add	r3, r1
 800220e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2200      	movs	r2, #0
 800221a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2200      	movs	r2, #0
 8002226:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	3206      	adds	r2, #6
 8002230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d80c      	bhi.n	8002260 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68d9      	ldr	r1, [r3, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	440b      	add	r3, r1
 8002258:	461a      	mov	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	e004      	b.n	800226a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	461a      	mov	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	3301      	adds	r3, #1
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b03      	cmp	r3, #3
 8002280:	d9bd      	bls.n	80021fe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002294:	611a      	str	r2, [r3, #16]
}
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b085      	sub	sp, #20
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	e046      	b.n	800233e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6919      	ldr	r1, [r3, #16]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	440b      	add	r3, r1
 80022c0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2200      	movs	r2, #0
 80022cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2200      	movs	r2, #0
 80022d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2200      	movs	r2, #0
 80022d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2200      	movs	r2, #0
 80022de:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2200      	movs	r2, #0
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80022ec:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80022f4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002302:	68b9      	ldr	r1, [r7, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	3212      	adds	r2, #18
 800230a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d80c      	bhi.n	800232e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6919      	ldr	r1, [r3, #16]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	440b      	add	r3, r1
 8002326:	461a      	mov	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	60da      	str	r2, [r3, #12]
 800232c:	e004      	b.n	8002338 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	461a      	mov	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	3301      	adds	r3, #1
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d9b5      	bls.n	80022b0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800236e:	60da      	str	r2, [r3, #12]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800237c:	b480      	push	{r7}
 800237e:	b08d      	sub	sp, #52	; 0x34
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	3318      	adds	r3, #24
 800238c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023be:	d007      	beq.n	80023d0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c4:	3304      	adds	r3, #4
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80023d0:	2302      	movs	r3, #2
 80023d2:	e103      	b.n	80025dc <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	3301      	adds	r3, #1
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80023ec:	f023 031f 	bic.w	r3, r3, #31
 80023f0:	69fa      	ldr	r2, [r7, #28]
 80023f2:	6852      	ldr	r2, [r2, #4]
 80023f4:	431a      	orrs	r2, r3
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d008      	beq.n	8002418 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	431a      	orrs	r2, r3
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0320 	and.w	r3, r3, #32
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	431a      	orrs	r2, r3
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800245a:	f3bf 8f5f 	dmb	sy
}
 800245e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800246c:	e084      	b.n	8002578 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d006      	beq.n	800248e <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e005      	b.n	800249a <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800249a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249c:	3301      	adds	r3, #1
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d902      	bls.n	80024ac <ETH_Prepare_Tx_Descriptors+0x130>
 80024a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a8:	3b04      	subs	r3, #4
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024ce:	d007      	beq.n	80024e0 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d4:	3304      	adds	r3, #4
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d029      	beq.n	8002534 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ec:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80024ee:	2300      	movs	r3, #0
 80024f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024f2:	e019      	b.n	8002528 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80024f4:	f3bf 8f5f 	dmb	sy
}
 80024f8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002508:	3301      	adds	r3, #1
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250e:	2b03      	cmp	r3, #3
 8002510:	d902      	bls.n	8002518 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002514:	3b04      	subs	r3, #4
 8002516:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800251c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002520:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002524:	3301      	adds	r3, #1
 8002526:	62bb      	str	r3, [r7, #40]	; 0x28
 8002528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	429a      	cmp	r2, r3
 800252e:	d3e1      	bcc.n	80024f4 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002530:	2302      	movs	r3, #2
 8002532:	e053      	b.n	80025dc <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	3301      	adds	r3, #1
 8002538:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002552:	f023 031f 	bic.w	r3, r3, #31
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	6852      	ldr	r2, [r2, #4]
 800255a:	431a      	orrs	r2, r3
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	3301      	adds	r3, #1
 8002564:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002566:	f3bf 8f5f 	dmb	sy
}
 800256a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	f47f af76 	bne.w	800246e <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d006      	beq.n	8002596 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	e005      	b.n	80025a2 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025b2:	6979      	ldr	r1, [r7, #20]
 80025b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b6:	3304      	adds	r3, #4
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80025c4:	b672      	cpsid	i
}
 80025c6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	4413      	add	r3, r2
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80025d6:	b662      	cpsie	i
}
 80025d8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3734      	adds	r7, #52	; 0x34
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b089      	sub	sp, #36	; 0x24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	e177      	b.n	80028f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002604:	2201      	movs	r2, #1
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	429a      	cmp	r2, r3
 800261e:	f040 8166 	bne.w	80028ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	2b01      	cmp	r3, #1
 800262c:	d005      	beq.n	800263a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002636:	2b02      	cmp	r3, #2
 8002638:	d130      	bne.n	800269c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	2203      	movs	r2, #3
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002670:	2201      	movs	r2, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	091b      	lsrs	r3, r3, #4
 8002686:	f003 0201 	and.w	r2, r3, #1
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d017      	beq.n	80026d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	2203      	movs	r2, #3
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d123      	bne.n	800272c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	08da      	lsrs	r2, r3, #3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3208      	adds	r2, #8
 80026ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	220f      	movs	r2, #15
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	08da      	lsrs	r2, r3, #3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3208      	adds	r2, #8
 8002726:	69b9      	ldr	r1, [r7, #24]
 8002728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	2203      	movs	r2, #3
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0203 	and.w	r2, r3, #3
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80c0 	beq.w	80028ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	4b66      	ldr	r3, [pc, #408]	; (800290c <HAL_GPIO_Init+0x324>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	4a65      	ldr	r2, [pc, #404]	; (800290c <HAL_GPIO_Init+0x324>)
 8002778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800277c:	6453      	str	r3, [r2, #68]	; 0x44
 800277e:	4b63      	ldr	r3, [pc, #396]	; (800290c <HAL_GPIO_Init+0x324>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800278a:	4a61      	ldr	r2, [pc, #388]	; (8002910 <HAL_GPIO_Init+0x328>)
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	089b      	lsrs	r3, r3, #2
 8002790:	3302      	adds	r3, #2
 8002792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	220f      	movs	r2, #15
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a58      	ldr	r2, [pc, #352]	; (8002914 <HAL_GPIO_Init+0x32c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d037      	beq.n	8002826 <HAL_GPIO_Init+0x23e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a57      	ldr	r2, [pc, #348]	; (8002918 <HAL_GPIO_Init+0x330>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d031      	beq.n	8002822 <HAL_GPIO_Init+0x23a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a56      	ldr	r2, [pc, #344]	; (800291c <HAL_GPIO_Init+0x334>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d02b      	beq.n	800281e <HAL_GPIO_Init+0x236>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a55      	ldr	r2, [pc, #340]	; (8002920 <HAL_GPIO_Init+0x338>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d025      	beq.n	800281a <HAL_GPIO_Init+0x232>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a54      	ldr	r2, [pc, #336]	; (8002924 <HAL_GPIO_Init+0x33c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d01f      	beq.n	8002816 <HAL_GPIO_Init+0x22e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a53      	ldr	r2, [pc, #332]	; (8002928 <HAL_GPIO_Init+0x340>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d019      	beq.n	8002812 <HAL_GPIO_Init+0x22a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a52      	ldr	r2, [pc, #328]	; (800292c <HAL_GPIO_Init+0x344>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <HAL_GPIO_Init+0x226>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a51      	ldr	r2, [pc, #324]	; (8002930 <HAL_GPIO_Init+0x348>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00d      	beq.n	800280a <HAL_GPIO_Init+0x222>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a50      	ldr	r2, [pc, #320]	; (8002934 <HAL_GPIO_Init+0x34c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d007      	beq.n	8002806 <HAL_GPIO_Init+0x21e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a4f      	ldr	r2, [pc, #316]	; (8002938 <HAL_GPIO_Init+0x350>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d101      	bne.n	8002802 <HAL_GPIO_Init+0x21a>
 80027fe:	2309      	movs	r3, #9
 8002800:	e012      	b.n	8002828 <HAL_GPIO_Init+0x240>
 8002802:	230a      	movs	r3, #10
 8002804:	e010      	b.n	8002828 <HAL_GPIO_Init+0x240>
 8002806:	2308      	movs	r3, #8
 8002808:	e00e      	b.n	8002828 <HAL_GPIO_Init+0x240>
 800280a:	2307      	movs	r3, #7
 800280c:	e00c      	b.n	8002828 <HAL_GPIO_Init+0x240>
 800280e:	2306      	movs	r3, #6
 8002810:	e00a      	b.n	8002828 <HAL_GPIO_Init+0x240>
 8002812:	2305      	movs	r3, #5
 8002814:	e008      	b.n	8002828 <HAL_GPIO_Init+0x240>
 8002816:	2304      	movs	r3, #4
 8002818:	e006      	b.n	8002828 <HAL_GPIO_Init+0x240>
 800281a:	2303      	movs	r3, #3
 800281c:	e004      	b.n	8002828 <HAL_GPIO_Init+0x240>
 800281e:	2302      	movs	r3, #2
 8002820:	e002      	b.n	8002828 <HAL_GPIO_Init+0x240>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <HAL_GPIO_Init+0x240>
 8002826:	2300      	movs	r3, #0
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	f002 0203 	and.w	r2, r2, #3
 800282e:	0092      	lsls	r2, r2, #2
 8002830:	4093      	lsls	r3, r2
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002838:	4935      	ldr	r1, [pc, #212]	; (8002910 <HAL_GPIO_Init+0x328>)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	089b      	lsrs	r3, r3, #2
 800283e:	3302      	adds	r3, #2
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002846:	4b3d      	ldr	r3, [pc, #244]	; (800293c <HAL_GPIO_Init+0x354>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800286a:	4a34      	ldr	r2, [pc, #208]	; (800293c <HAL_GPIO_Init+0x354>)
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002870:	4b32      	ldr	r3, [pc, #200]	; (800293c <HAL_GPIO_Init+0x354>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002894:	4a29      	ldr	r2, [pc, #164]	; (800293c <HAL_GPIO_Init+0x354>)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800289a:	4b28      	ldr	r3, [pc, #160]	; (800293c <HAL_GPIO_Init+0x354>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028be:	4a1f      	ldr	r2, [pc, #124]	; (800293c <HAL_GPIO_Init+0x354>)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028c4:	4b1d      	ldr	r3, [pc, #116]	; (800293c <HAL_GPIO_Init+0x354>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028e8:	4a14      	ldr	r2, [pc, #80]	; (800293c <HAL_GPIO_Init+0x354>)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3301      	adds	r3, #1
 80028f2:	61fb      	str	r3, [r7, #28]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	2b0f      	cmp	r3, #15
 80028f8:	f67f ae84 	bls.w	8002604 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	3724      	adds	r7, #36	; 0x24
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800
 8002910:	40013800 	.word	0x40013800
 8002914:	40020000 	.word	0x40020000
 8002918:	40020400 	.word	0x40020400
 800291c:	40020800 	.word	0x40020800
 8002920:	40020c00 	.word	0x40020c00
 8002924:	40021000 	.word	0x40021000
 8002928:	40021400 	.word	0x40021400
 800292c:	40021800 	.word	0x40021800
 8002930:	40021c00 	.word	0x40021c00
 8002934:	40022000 	.word	0x40022000
 8002938:	40022400 	.word	0x40022400
 800293c:	40013c00 	.word	0x40013c00

08002940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	807b      	strh	r3, [r7, #2]
 800294c:	4613      	mov	r3, r2
 800294e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002950:	787b      	ldrb	r3, [r7, #1]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002956:	887a      	ldrh	r2, [r7, #2]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800295c:	e003      	b.n	8002966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800295e:	887b      	ldrh	r3, [r7, #2]
 8002960:	041a      	lsls	r2, r3, #16
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	619a      	str	r2, [r3, #24]
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e267      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d075      	beq.n	8002a7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002992:	4b88      	ldr	r3, [pc, #544]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	2b04      	cmp	r3, #4
 800299c:	d00c      	beq.n	80029b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800299e:	4b85      	ldr	r3, [pc, #532]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d112      	bne.n	80029d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029aa:	4b82      	ldr	r3, [pc, #520]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b6:	d10b      	bne.n	80029d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b8:	4b7e      	ldr	r3, [pc, #504]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d05b      	beq.n	8002a7c <HAL_RCC_OscConfig+0x108>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d157      	bne.n	8002a7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e242      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d8:	d106      	bne.n	80029e8 <HAL_RCC_OscConfig+0x74>
 80029da:	4b76      	ldr	r3, [pc, #472]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a75      	ldr	r2, [pc, #468]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e01d      	b.n	8002a24 <HAL_RCC_OscConfig+0xb0>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f0:	d10c      	bne.n	8002a0c <HAL_RCC_OscConfig+0x98>
 80029f2:	4b70      	ldr	r3, [pc, #448]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a6f      	ldr	r2, [pc, #444]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 80029f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	4b6d      	ldr	r3, [pc, #436]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a6c      	ldr	r2, [pc, #432]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e00b      	b.n	8002a24 <HAL_RCC_OscConfig+0xb0>
 8002a0c:	4b69      	ldr	r3, [pc, #420]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a68      	ldr	r2, [pc, #416]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	4b66      	ldr	r3, [pc, #408]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a65      	ldr	r2, [pc, #404]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d013      	beq.n	8002a54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fb12 	bl	8001054 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a34:	f7fe fb0e 	bl	8001054 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	; 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e207      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	4b5b      	ldr	r3, [pc, #364]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0xc0>
 8002a52:	e014      	b.n	8002a7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7fe fafe 	bl	8001054 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a5c:	f7fe fafa 	bl	8001054 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b64      	cmp	r3, #100	; 0x64
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e1f3      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6e:	4b51      	ldr	r3, [pc, #324]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0xe8>
 8002a7a:	e000      	b.n	8002a7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d063      	beq.n	8002b52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a8a:	4b4a      	ldr	r3, [pc, #296]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00b      	beq.n	8002aae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a96:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d11c      	bne.n	8002adc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aa2:	4b44      	ldr	r3, [pc, #272]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d116      	bne.n	8002adc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aae:	4b41      	ldr	r3, [pc, #260]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d005      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x152>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d001      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e1c7      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac6:	4b3b      	ldr	r3, [pc, #236]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4937      	ldr	r1, [pc, #220]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ada:	e03a      	b.n	8002b52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d020      	beq.n	8002b26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae4:	4b34      	ldr	r3, [pc, #208]	; (8002bb8 <HAL_RCC_OscConfig+0x244>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aea:	f7fe fab3 	bl	8001054 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af2:	f7fe faaf 	bl	8001054 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e1a8      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b04:	4b2b      	ldr	r3, [pc, #172]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b10:	4b28      	ldr	r3, [pc, #160]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4925      	ldr	r1, [pc, #148]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]
 8002b24:	e015      	b.n	8002b52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b26:	4b24      	ldr	r3, [pc, #144]	; (8002bb8 <HAL_RCC_OscConfig+0x244>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fa92 	bl	8001054 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b34:	f7fe fa8e 	bl	8001054 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e187      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b46:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d036      	beq.n	8002bcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d016      	beq.n	8002b94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b66:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <HAL_RCC_OscConfig+0x248>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6c:	f7fe fa72 	bl	8001054 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b74:	f7fe fa6e 	bl	8001054 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e167      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCC_OscConfig+0x240>)
 8002b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x200>
 8002b92:	e01b      	b.n	8002bcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b94:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <HAL_RCC_OscConfig+0x248>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9a:	f7fe fa5b 	bl	8001054 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba0:	e00e      	b.n	8002bc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba2:	f7fe fa57 	bl	8001054 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d907      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e150      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	42470000 	.word	0x42470000
 8002bbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc0:	4b88      	ldr	r3, [pc, #544]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1ea      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 8097 	beq.w	8002d08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bde:	4b81      	ldr	r3, [pc, #516]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10f      	bne.n	8002c0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	4b7d      	ldr	r3, [pc, #500]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	4a7c      	ldr	r2, [pc, #496]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfa:	4b7a      	ldr	r3, [pc, #488]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c06:	2301      	movs	r3, #1
 8002c08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0a:	4b77      	ldr	r3, [pc, #476]	; (8002de8 <HAL_RCC_OscConfig+0x474>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d118      	bne.n	8002c48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c16:	4b74      	ldr	r3, [pc, #464]	; (8002de8 <HAL_RCC_OscConfig+0x474>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a73      	ldr	r2, [pc, #460]	; (8002de8 <HAL_RCC_OscConfig+0x474>)
 8002c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c22:	f7fe fa17 	bl	8001054 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2a:	f7fe fa13 	bl	8001054 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e10c      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3c:	4b6a      	ldr	r3, [pc, #424]	; (8002de8 <HAL_RCC_OscConfig+0x474>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d106      	bne.n	8002c5e <HAL_RCC_OscConfig+0x2ea>
 8002c50:	4b64      	ldr	r3, [pc, #400]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c54:	4a63      	ldr	r2, [pc, #396]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5c:	e01c      	b.n	8002c98 <HAL_RCC_OscConfig+0x324>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b05      	cmp	r3, #5
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x30c>
 8002c66:	4b5f      	ldr	r3, [pc, #380]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	4a5e      	ldr	r2, [pc, #376]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	f043 0304 	orr.w	r3, r3, #4
 8002c70:	6713      	str	r3, [r2, #112]	; 0x70
 8002c72:	4b5c      	ldr	r3, [pc, #368]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c76:	4a5b      	ldr	r2, [pc, #364]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c7e:	e00b      	b.n	8002c98 <HAL_RCC_OscConfig+0x324>
 8002c80:	4b58      	ldr	r3, [pc, #352]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c84:	4a57      	ldr	r2, [pc, #348]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8c:	4b55      	ldr	r3, [pc, #340]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c90:	4a54      	ldr	r2, [pc, #336]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002c92:	f023 0304 	bic.w	r3, r3, #4
 8002c96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d015      	beq.n	8002ccc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca0:	f7fe f9d8 	bl	8001054 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca6:	e00a      	b.n	8002cbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca8:	f7fe f9d4 	bl	8001054 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e0cb      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbe:	4b49      	ldr	r3, [pc, #292]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0ee      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x334>
 8002cca:	e014      	b.n	8002cf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ccc:	f7fe f9c2 	bl	8001054 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd2:	e00a      	b.n	8002cea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd4:	f7fe f9be 	bl	8001054 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e0b5      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cea:	4b3e      	ldr	r3, [pc, #248]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1ee      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cf6:	7dfb      	ldrb	r3, [r7, #23]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d105      	bne.n	8002d08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfc:	4b39      	ldr	r3, [pc, #228]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	4a38      	ldr	r2, [pc, #224]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80a1 	beq.w	8002e54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d12:	4b34      	ldr	r3, [pc, #208]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d05c      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d141      	bne.n	8002daa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d26:	4b31      	ldr	r3, [pc, #196]	; (8002dec <HAL_RCC_OscConfig+0x478>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fe f992 	bl	8001054 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d34:	f7fe f98e 	bl	8001054 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e087      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d46:	4b27      	ldr	r3, [pc, #156]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69da      	ldr	r2, [r3, #28]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	019b      	lsls	r3, r3, #6
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	085b      	lsrs	r3, r3, #1
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	041b      	lsls	r3, r3, #16
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	061b      	lsls	r3, r3, #24
 8002d76:	491b      	ldr	r1, [pc, #108]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d7c:	4b1b      	ldr	r3, [pc, #108]	; (8002dec <HAL_RCC_OscConfig+0x478>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d82:	f7fe f967 	bl	8001054 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d8a:	f7fe f963 	bl	8001054 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e05c      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9c:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x416>
 8002da8:	e054      	b.n	8002e54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002daa:	4b10      	ldr	r3, [pc, #64]	; (8002dec <HAL_RCC_OscConfig+0x478>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7fe f950 	bl	8001054 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db8:	f7fe f94c 	bl	8001054 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e045      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dca:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_RCC_OscConfig+0x470>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x444>
 8002dd6:	e03d      	b.n	8002e54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d107      	bne.n	8002df0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e038      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40007000 	.word	0x40007000
 8002dec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002df0:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <HAL_RCC_OscConfig+0x4ec>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d028      	beq.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d121      	bne.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d11a      	bne.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e20:	4013      	ands	r3, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d111      	bne.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	085b      	lsrs	r3, r3, #1
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d107      	bne.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d001      	beq.n	8002e54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40023800 	.word	0x40023800

08002e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0cc      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e78:	4b68      	ldr	r3, [pc, #416]	; (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d90c      	bls.n	8002ea0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b65      	ldr	r3, [pc, #404]	; (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b63      	ldr	r3, [pc, #396]	; (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0b8      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d020      	beq.n	8002eee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eb8:	4b59      	ldr	r3, [pc, #356]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	4a58      	ldr	r2, [pc, #352]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ec2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed0:	4b53      	ldr	r3, [pc, #332]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	4a52      	ldr	r2, [pc, #328]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002edc:	4b50      	ldr	r3, [pc, #320]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	494d      	ldr	r1, [pc, #308]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d044      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d107      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f02:	4b47      	ldr	r3, [pc, #284]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d119      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e07f      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d003      	beq.n	8002f22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f22:	4b3f      	ldr	r3, [pc, #252]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e06f      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f32:	4b3b      	ldr	r3, [pc, #236]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e067      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f42:	4b37      	ldr	r3, [pc, #220]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f023 0203 	bic.w	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	4934      	ldr	r1, [pc, #208]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f54:	f7fe f87e 	bl	8001054 <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f5c:	f7fe f87a 	bl	8001054 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e04f      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	4b2b      	ldr	r3, [pc, #172]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 020c 	and.w	r2, r3, #12
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d1eb      	bne.n	8002f5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f84:	4b25      	ldr	r3, [pc, #148]	; (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d20c      	bcs.n	8002fac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b22      	ldr	r3, [pc, #136]	; (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9a:	4b20      	ldr	r3, [pc, #128]	; (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d001      	beq.n	8002fac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e032      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb8:	4b19      	ldr	r3, [pc, #100]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4916      	ldr	r1, [pc, #88]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d009      	beq.n	8002fea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fd6:	4b12      	ldr	r3, [pc, #72]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	490e      	ldr	r1, [pc, #56]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fea:	f000 f821 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	490a      	ldr	r1, [pc, #40]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002ffc:	5ccb      	ldrb	r3, [r1, r3]
 8002ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8003002:	4a09      	ldr	r2, [pc, #36]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <HAL_RCC_ClockConfig+0x1c8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd ffde 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40023c00 	.word	0x40023c00
 8003020:	40023800 	.word	0x40023800
 8003024:	08014aa0 	.word	0x08014aa0
 8003028:	20000000 	.word	0x20000000
 800302c:	20000004 	.word	0x20000004

08003030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003034:	b094      	sub	sp, #80	; 0x50
 8003036:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	647b      	str	r3, [r7, #68]	; 0x44
 800303c:	2300      	movs	r3, #0
 800303e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003040:	2300      	movs	r3, #0
 8003042:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003048:	4b79      	ldr	r3, [pc, #484]	; (8003230 <HAL_RCC_GetSysClockFreq+0x200>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	2b08      	cmp	r3, #8
 8003052:	d00d      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0x40>
 8003054:	2b08      	cmp	r3, #8
 8003056:	f200 80e1 	bhi.w	800321c <HAL_RCC_GetSysClockFreq+0x1ec>
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0x34>
 800305e:	2b04      	cmp	r3, #4
 8003060:	d003      	beq.n	800306a <HAL_RCC_GetSysClockFreq+0x3a>
 8003062:	e0db      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003064:	4b73      	ldr	r3, [pc, #460]	; (8003234 <HAL_RCC_GetSysClockFreq+0x204>)
 8003066:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003068:	e0db      	b.n	8003222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800306a:	4b73      	ldr	r3, [pc, #460]	; (8003238 <HAL_RCC_GetSysClockFreq+0x208>)
 800306c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800306e:	e0d8      	b.n	8003222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003070:	4b6f      	ldr	r3, [pc, #444]	; (8003230 <HAL_RCC_GetSysClockFreq+0x200>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003078:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800307a:	4b6d      	ldr	r3, [pc, #436]	; (8003230 <HAL_RCC_GetSysClockFreq+0x200>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d063      	beq.n	800314e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003086:	4b6a      	ldr	r3, [pc, #424]	; (8003230 <HAL_RCC_GetSysClockFreq+0x200>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	099b      	lsrs	r3, r3, #6
 800308c:	2200      	movs	r2, #0
 800308e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003090:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003098:	633b      	str	r3, [r7, #48]	; 0x30
 800309a:	2300      	movs	r3, #0
 800309c:	637b      	str	r3, [r7, #52]	; 0x34
 800309e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030a2:	4622      	mov	r2, r4
 80030a4:	462b      	mov	r3, r5
 80030a6:	f04f 0000 	mov.w	r0, #0
 80030aa:	f04f 0100 	mov.w	r1, #0
 80030ae:	0159      	lsls	r1, r3, #5
 80030b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b4:	0150      	lsls	r0, r2, #5
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	4621      	mov	r1, r4
 80030bc:	1a51      	subs	r1, r2, r1
 80030be:	6139      	str	r1, [r7, #16]
 80030c0:	4629      	mov	r1, r5
 80030c2:	eb63 0301 	sbc.w	r3, r3, r1
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030d4:	4659      	mov	r1, fp
 80030d6:	018b      	lsls	r3, r1, #6
 80030d8:	4651      	mov	r1, sl
 80030da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030de:	4651      	mov	r1, sl
 80030e0:	018a      	lsls	r2, r1, #6
 80030e2:	4651      	mov	r1, sl
 80030e4:	ebb2 0801 	subs.w	r8, r2, r1
 80030e8:	4659      	mov	r1, fp
 80030ea:	eb63 0901 	sbc.w	r9, r3, r1
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003102:	4690      	mov	r8, r2
 8003104:	4699      	mov	r9, r3
 8003106:	4623      	mov	r3, r4
 8003108:	eb18 0303 	adds.w	r3, r8, r3
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	462b      	mov	r3, r5
 8003110:	eb49 0303 	adc.w	r3, r9, r3
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003122:	4629      	mov	r1, r5
 8003124:	024b      	lsls	r3, r1, #9
 8003126:	4621      	mov	r1, r4
 8003128:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800312c:	4621      	mov	r1, r4
 800312e:	024a      	lsls	r2, r1, #9
 8003130:	4610      	mov	r0, r2
 8003132:	4619      	mov	r1, r3
 8003134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003136:	2200      	movs	r2, #0
 8003138:	62bb      	str	r3, [r7, #40]	; 0x28
 800313a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800313c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003140:	f7fd f8be 	bl	80002c0 <__aeabi_uldivmod>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4613      	mov	r3, r2
 800314a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800314c:	e058      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800314e:	4b38      	ldr	r3, [pc, #224]	; (8003230 <HAL_RCC_GetSysClockFreq+0x200>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	099b      	lsrs	r3, r3, #6
 8003154:	2200      	movs	r2, #0
 8003156:	4618      	mov	r0, r3
 8003158:	4611      	mov	r1, r2
 800315a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800315e:	623b      	str	r3, [r7, #32]
 8003160:	2300      	movs	r3, #0
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
 8003164:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003168:	4642      	mov	r2, r8
 800316a:	464b      	mov	r3, r9
 800316c:	f04f 0000 	mov.w	r0, #0
 8003170:	f04f 0100 	mov.w	r1, #0
 8003174:	0159      	lsls	r1, r3, #5
 8003176:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800317a:	0150      	lsls	r0, r2, #5
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4641      	mov	r1, r8
 8003182:	ebb2 0a01 	subs.w	sl, r2, r1
 8003186:	4649      	mov	r1, r9
 8003188:	eb63 0b01 	sbc.w	fp, r3, r1
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003198:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800319c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031a0:	ebb2 040a 	subs.w	r4, r2, sl
 80031a4:	eb63 050b 	sbc.w	r5, r3, fp
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	00eb      	lsls	r3, r5, #3
 80031b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031b6:	00e2      	lsls	r2, r4, #3
 80031b8:	4614      	mov	r4, r2
 80031ba:	461d      	mov	r5, r3
 80031bc:	4643      	mov	r3, r8
 80031be:	18e3      	adds	r3, r4, r3
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	464b      	mov	r3, r9
 80031c4:	eb45 0303 	adc.w	r3, r5, r3
 80031c8:	607b      	str	r3, [r7, #4]
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031d6:	4629      	mov	r1, r5
 80031d8:	028b      	lsls	r3, r1, #10
 80031da:	4621      	mov	r1, r4
 80031dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031e0:	4621      	mov	r1, r4
 80031e2:	028a      	lsls	r2, r1, #10
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ea:	2200      	movs	r2, #0
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	61fa      	str	r2, [r7, #28]
 80031f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031f4:	f7fd f864 	bl	80002c0 <__aeabi_uldivmod>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4613      	mov	r3, r2
 80031fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003200:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <HAL_RCC_GetSysClockFreq+0x200>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	0c1b      	lsrs	r3, r3, #16
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	3301      	adds	r3, #1
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003210:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003214:	fbb2 f3f3 	udiv	r3, r2, r3
 8003218:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800321a:	e002      	b.n	8003222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800321c:	4b05      	ldr	r3, [pc, #20]	; (8003234 <HAL_RCC_GetSysClockFreq+0x204>)
 800321e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003220:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003224:	4618      	mov	r0, r3
 8003226:	3750      	adds	r7, #80	; 0x50
 8003228:	46bd      	mov	sp, r7
 800322a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800322e:	bf00      	nop
 8003230:	40023800 	.word	0x40023800
 8003234:	00f42400 	.word	0x00f42400
 8003238:	007a1200 	.word	0x007a1200

0800323c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003240:	4b03      	ldr	r3, [pc, #12]	; (8003250 <HAL_RCC_GetHCLKFreq+0x14>)
 8003242:	681b      	ldr	r3, [r3, #0]
}
 8003244:	4618      	mov	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	20000000 	.word	0x20000000

08003254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003258:	f7ff fff0 	bl	800323c <HAL_RCC_GetHCLKFreq>
 800325c:	4602      	mov	r2, r0
 800325e:	4b05      	ldr	r3, [pc, #20]	; (8003274 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	0a9b      	lsrs	r3, r3, #10
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	4903      	ldr	r1, [pc, #12]	; (8003278 <HAL_RCC_GetPCLK1Freq+0x24>)
 800326a:	5ccb      	ldrb	r3, [r1, r3]
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003270:	4618      	mov	r0, r3
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40023800 	.word	0x40023800
 8003278:	08014ab0 	.word	0x08014ab0

0800327c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003280:	f7ff ffdc 	bl	800323c <HAL_RCC_GetHCLKFreq>
 8003284:	4602      	mov	r2, r0
 8003286:	4b05      	ldr	r3, [pc, #20]	; (800329c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	0b5b      	lsrs	r3, r3, #13
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	4903      	ldr	r1, [pc, #12]	; (80032a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003292:	5ccb      	ldrb	r3, [r1, r3]
 8003294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003298:	4618      	mov	r0, r3
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40023800 	.word	0x40023800
 80032a0:	08014ab0 	.word	0x08014ab0

080032a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e03f      	b.n	8003336 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fd fb72 	bl	80009b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2224      	movs	r2, #36	; 0x24
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 fcbf 	bl	8003c6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800330c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800331c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800333e:	b480      	push	{r7}
 8003340:	b085      	sub	sp, #20
 8003342:	af00      	add	r7, sp, #0
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	4613      	mov	r3, r2
 800334a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b20      	cmp	r3, #32
 8003356:	d130      	bne.n	80033ba <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <HAL_UART_Transmit_IT+0x26>
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e029      	b.n	80033bc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800336e:	2b01      	cmp	r3, #1
 8003370:	d101      	bne.n	8003376 <HAL_UART_Transmit_IT+0x38>
 8003372:	2302      	movs	r3, #2
 8003374:	e022      	b.n	80033bc <HAL_UART_Transmit_IT+0x7e>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	88fa      	ldrh	r2, [r7, #6]
 8003388:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	88fa      	ldrh	r2, [r7, #6]
 800338e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2221      	movs	r2, #33	; 0x21
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033b4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	e000      	b.n	80033bc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80033ba:	2302      	movs	r3, #2
  }
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b0ba      	sub	sp, #232	; 0xe8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003406:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10f      	bne.n	800342e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800340e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <HAL_UART_IRQHandler+0x66>
 800341a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fb65 	bl	8003af6 <UART_Receive_IT>
      return;
 800342c:	e256      	b.n	80038dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800342e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 80de 	beq.w	80035f4 <HAL_UART_IRQHandler+0x22c>
 8003438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d106      	bne.n	8003452 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003448:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80d1 	beq.w	80035f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00b      	beq.n	8003476 <HAL_UART_IRQHandler+0xae>
 800345e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f043 0201 	orr.w	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00b      	beq.n	800349a <HAL_UART_IRQHandler+0xd2>
 8003482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d005      	beq.n	800349a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f043 0202 	orr.w	r2, r3, #2
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800349a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00b      	beq.n	80034be <HAL_UART_IRQHandler+0xf6>
 80034a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f043 0204 	orr.w	r2, r3, #4
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80034be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d011      	beq.n	80034ee <HAL_UART_IRQHandler+0x126>
 80034ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d105      	bne.n	80034e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d005      	beq.n	80034ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f043 0208 	orr.w	r2, r3, #8
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 81ed 	beq.w	80038d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fc:	f003 0320 	and.w	r3, r3, #32
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_UART_IRQHandler+0x14e>
 8003504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 faf0 	bl	8003af6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003520:	2b40      	cmp	r3, #64	; 0x40
 8003522:	bf0c      	ite	eq
 8003524:	2301      	moveq	r3, #1
 8003526:	2300      	movne	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d103      	bne.n	8003542 <HAL_UART_IRQHandler+0x17a>
 800353a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800353e:	2b00      	cmp	r3, #0
 8003540:	d04f      	beq.n	80035e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f9f8 	bl	8003938 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	2b40      	cmp	r3, #64	; 0x40
 8003554:	d141      	bne.n	80035da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3314      	adds	r3, #20
 800355c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003560:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003564:	e853 3f00 	ldrex	r3, [r3]
 8003568:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800356c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003574:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	3314      	adds	r3, #20
 800357e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003582:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003586:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800358e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003592:	e841 2300 	strex	r3, r2, [r1]
 8003596:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800359a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1d9      	bne.n	8003556 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d013      	beq.n	80035d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ae:	4a7d      	ldr	r2, [pc, #500]	; (80037a4 <HAL_UART_IRQHandler+0x3dc>)
 80035b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fd fefd 	bl	80013b6 <HAL_DMA_Abort_IT>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d016      	beq.n	80035f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035cc:	4610      	mov	r0, r2
 80035ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d0:	e00e      	b.n	80035f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f99a 	bl	800390c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d8:	e00a      	b.n	80035f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f996 	bl	800390c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e0:	e006      	b.n	80035f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f992 	bl	800390c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80035ee:	e170      	b.n	80038d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f0:	bf00      	nop
    return;
 80035f2:	e16e      	b.n	80038d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	f040 814a 	bne.w	8003892 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80035fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003602:	f003 0310 	and.w	r3, r3, #16
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 8143 	beq.w	8003892 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800360c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 813c 	beq.w	8003892 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800361a:	2300      	movs	r3, #0
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363a:	2b40      	cmp	r3, #64	; 0x40
 800363c:	f040 80b4 	bne.w	80037a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800364c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 8140 	beq.w	80038d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800365a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800365e:	429a      	cmp	r2, r3
 8003660:	f080 8139 	bcs.w	80038d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800366a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003676:	f000 8088 	beq.w	800378a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	330c      	adds	r3, #12
 8003680:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003684:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003688:	e853 3f00 	ldrex	r3, [r3]
 800368c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003690:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003698:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	330c      	adds	r3, #12
 80036a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80036a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80036b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80036b6:	e841 2300 	strex	r3, r2, [r1]
 80036ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80036be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1d9      	bne.n	800367a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3314      	adds	r3, #20
 80036cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036d0:	e853 3f00 	ldrex	r3, [r3]
 80036d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80036d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036d8:	f023 0301 	bic.w	r3, r3, #1
 80036dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3314      	adds	r3, #20
 80036e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036f6:	e841 2300 	strex	r3, r2, [r1]
 80036fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1e1      	bne.n	80036c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	3314      	adds	r3, #20
 8003708:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800370c:	e853 3f00 	ldrex	r3, [r3]
 8003710:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003718:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3314      	adds	r3, #20
 8003722:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003726:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003728:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800372c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800372e:	e841 2300 	strex	r3, r2, [r1]
 8003732:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003734:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1e3      	bne.n	8003702 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2220      	movs	r2, #32
 800373e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	330c      	adds	r3, #12
 800374e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003752:	e853 3f00 	ldrex	r3, [r3]
 8003756:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800375a:	f023 0310 	bic.w	r3, r3, #16
 800375e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	330c      	adds	r3, #12
 8003768:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800376c:	65ba      	str	r2, [r7, #88]	; 0x58
 800376e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003770:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003772:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003774:	e841 2300 	strex	r3, r2, [r1]
 8003778:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800377a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1e3      	bne.n	8003748 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003784:	4618      	mov	r0, r3
 8003786:	f7fd fda6 	bl	80012d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003792:	b29b      	uxth	r3, r3
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	b29b      	uxth	r3, r3
 8003798:	4619      	mov	r1, r3
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f8c0 	bl	8003920 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037a0:	e099      	b.n	80038d6 <HAL_UART_IRQHandler+0x50e>
 80037a2:	bf00      	nop
 80037a4:	080039ff 	.word	0x080039ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 808b 	beq.w	80038da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80037c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 8086 	beq.w	80038da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	330c      	adds	r3, #12
 80037d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d8:	e853 3f00 	ldrex	r3, [r3]
 80037dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	330c      	adds	r3, #12
 80037ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80037f2:	647a      	str	r2, [r7, #68]	; 0x44
 80037f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037fa:	e841 2300 	strex	r3, r2, [r1]
 80037fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1e3      	bne.n	80037ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3314      	adds	r3, #20
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	e853 3f00 	ldrex	r3, [r3]
 8003814:	623b      	str	r3, [r7, #32]
   return(result);
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	f023 0301 	bic.w	r3, r3, #1
 800381c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3314      	adds	r3, #20
 8003826:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800382a:	633a      	str	r2, [r7, #48]	; 0x30
 800382c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003832:	e841 2300 	strex	r3, r2, [r1]
 8003836:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1e3      	bne.n	8003806 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2220      	movs	r2, #32
 8003842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	330c      	adds	r3, #12
 8003852:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	e853 3f00 	ldrex	r3, [r3]
 800385a:	60fb      	str	r3, [r7, #12]
   return(result);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0310 	bic.w	r3, r3, #16
 8003862:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	330c      	adds	r3, #12
 800386c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003870:	61fa      	str	r2, [r7, #28]
 8003872:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003874:	69b9      	ldr	r1, [r7, #24]
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	e841 2300 	strex	r3, r2, [r1]
 800387c:	617b      	str	r3, [r7, #20]
   return(result);
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1e3      	bne.n	800384c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003884:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003888:	4619      	mov	r1, r3
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f848 	bl	8003920 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003890:	e023      	b.n	80038da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	2b00      	cmp	r3, #0
 800389c:	d009      	beq.n	80038b2 <HAL_UART_IRQHandler+0x4ea>
 800389e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f8bb 	bl	8003a26 <UART_Transmit_IT>
    return;
 80038b0:	e014      	b.n	80038dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00e      	beq.n	80038dc <HAL_UART_IRQHandler+0x514>
 80038be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d008      	beq.n	80038dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f8fb 	bl	8003ac6 <UART_EndTransmit_IT>
    return;
 80038d0:	e004      	b.n	80038dc <HAL_UART_IRQHandler+0x514>
    return;
 80038d2:	bf00      	nop
 80038d4:	e002      	b.n	80038dc <HAL_UART_IRQHandler+0x514>
      return;
 80038d6:	bf00      	nop
 80038d8:	e000      	b.n	80038dc <HAL_UART_IRQHandler+0x514>
      return;
 80038da:	bf00      	nop
  }
}
 80038dc:	37e8      	adds	r7, #232	; 0xe8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop

080038e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003938:	b480      	push	{r7}
 800393a:	b095      	sub	sp, #84	; 0x54
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	330c      	adds	r3, #12
 8003946:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394a:	e853 3f00 	ldrex	r3, [r3]
 800394e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003952:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	330c      	adds	r3, #12
 800395e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003960:	643a      	str	r2, [r7, #64]	; 0x40
 8003962:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003964:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003966:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003968:	e841 2300 	strex	r3, r2, [r1]
 800396c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800396e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1e5      	bne.n	8003940 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3314      	adds	r3, #20
 800397a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	e853 3f00 	ldrex	r3, [r3]
 8003982:	61fb      	str	r3, [r7, #28]
   return(result);
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	64bb      	str	r3, [r7, #72]	; 0x48
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3314      	adds	r3, #20
 8003992:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003994:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003996:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003998:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800399a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800399c:	e841 2300 	strex	r3, r2, [r1]
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e5      	bne.n	8003974 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d119      	bne.n	80039e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	330c      	adds	r3, #12
 80039b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	e853 3f00 	ldrex	r3, [r3]
 80039be:	60bb      	str	r3, [r7, #8]
   return(result);
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f023 0310 	bic.w	r3, r3, #16
 80039c6:	647b      	str	r3, [r7, #68]	; 0x44
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	330c      	adds	r3, #12
 80039ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039d0:	61ba      	str	r2, [r7, #24]
 80039d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d4:	6979      	ldr	r1, [r7, #20]
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	e841 2300 	strex	r3, r2, [r1]
 80039dc:	613b      	str	r3, [r7, #16]
   return(result);
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1e5      	bne.n	80039b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80039f2:	bf00      	nop
 80039f4:	3754      	adds	r7, #84	; 0x54
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f7ff ff77 	bl	800390c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a1e:	bf00      	nop
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b085      	sub	sp, #20
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b21      	cmp	r3, #33	; 0x21
 8003a38:	d13e      	bne.n	8003ab8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a42:	d114      	bne.n	8003a6e <UART_Transmit_IT+0x48>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d110      	bne.n	8003a6e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	1c9a      	adds	r2, r3, #2
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	621a      	str	r2, [r3, #32]
 8003a6c:	e008      	b.n	8003a80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	1c59      	adds	r1, r3, #1
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6211      	str	r1, [r2, #32]
 8003a78:	781a      	ldrb	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10f      	bne.n	8003ab4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aa2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ab2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e000      	b.n	8003aba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ab8:	2302      	movs	r3, #2
  }
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b082      	sub	sp, #8
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003adc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff fefc 	bl	80038e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b08c      	sub	sp, #48	; 0x30
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b22      	cmp	r3, #34	; 0x22
 8003b08:	f040 80ab 	bne.w	8003c62 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b14:	d117      	bne.n	8003b46 <UART_Receive_IT+0x50>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d113      	bne.n	8003b46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3e:	1c9a      	adds	r2, r3, #2
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	629a      	str	r2, [r3, #40]	; 0x28
 8003b44:	e026      	b.n	8003b94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b58:	d007      	beq.n	8003b6a <UART_Receive_IT+0x74>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10a      	bne.n	8003b78 <UART_Receive_IT+0x82>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b74:	701a      	strb	r2, [r3, #0]
 8003b76:	e008      	b.n	8003b8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d15a      	bne.n	8003c5e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0220 	bic.w	r2, r2, #32
 8003bb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0201 	bic.w	r2, r2, #1
 8003bd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d135      	bne.n	8003c54 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	330c      	adds	r3, #12
 8003bf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	e853 3f00 	ldrex	r3, [r3]
 8003bfc:	613b      	str	r3, [r7, #16]
   return(result);
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f023 0310 	bic.w	r3, r3, #16
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	330c      	adds	r3, #12
 8003c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0e:	623a      	str	r2, [r7, #32]
 8003c10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c12:	69f9      	ldr	r1, [r7, #28]
 8003c14:	6a3a      	ldr	r2, [r7, #32]
 8003c16:	e841 2300 	strex	r3, r2, [r1]
 8003c1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1e5      	bne.n	8003bee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b10      	cmp	r3, #16
 8003c2e:	d10a      	bne.n	8003c46 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff fe67 	bl	8003920 <HAL_UARTEx_RxEventCallback>
 8003c52:	e002      	b.n	8003c5a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff fe4f 	bl	80038f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	e002      	b.n	8003c64 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	e000      	b.n	8003c64 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003c62:	2302      	movs	r3, #2
  }
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3730      	adds	r7, #48	; 0x30
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c70:	b0c0      	sub	sp, #256	; 0x100
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c88:	68d9      	ldr	r1, [r3, #12]
 8003c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	ea40 0301 	orr.w	r3, r0, r1
 8003c94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003cc4:	f021 010c 	bic.w	r1, r1, #12
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce6:	6999      	ldr	r1, [r3, #24]
 8003ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	ea40 0301 	orr.w	r3, r0, r1
 8003cf2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	4b8f      	ldr	r3, [pc, #572]	; (8003f38 <UART_SetConfig+0x2cc>)
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d005      	beq.n	8003d0c <UART_SetConfig+0xa0>
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	4b8d      	ldr	r3, [pc, #564]	; (8003f3c <UART_SetConfig+0x2d0>)
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d104      	bne.n	8003d16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d0c:	f7ff fab6 	bl	800327c <HAL_RCC_GetPCLK2Freq>
 8003d10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d14:	e003      	b.n	8003d1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d16:	f7ff fa9d 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 8003d1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d28:	f040 810c 	bne.w	8003f44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d30:	2200      	movs	r2, #0
 8003d32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d3e:	4622      	mov	r2, r4
 8003d40:	462b      	mov	r3, r5
 8003d42:	1891      	adds	r1, r2, r2
 8003d44:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d46:	415b      	adcs	r3, r3
 8003d48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d4e:	4621      	mov	r1, r4
 8003d50:	eb12 0801 	adds.w	r8, r2, r1
 8003d54:	4629      	mov	r1, r5
 8003d56:	eb43 0901 	adc.w	r9, r3, r1
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d6e:	4690      	mov	r8, r2
 8003d70:	4699      	mov	r9, r3
 8003d72:	4623      	mov	r3, r4
 8003d74:	eb18 0303 	adds.w	r3, r8, r3
 8003d78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d7c:	462b      	mov	r3, r5
 8003d7e:	eb49 0303 	adc.w	r3, r9, r3
 8003d82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	18db      	adds	r3, r3, r3
 8003d9e:	653b      	str	r3, [r7, #80]	; 0x50
 8003da0:	4613      	mov	r3, r2
 8003da2:	eb42 0303 	adc.w	r3, r2, r3
 8003da6:	657b      	str	r3, [r7, #84]	; 0x54
 8003da8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003dac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003db0:	f7fc fa86 	bl	80002c0 <__aeabi_uldivmod>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4b61      	ldr	r3, [pc, #388]	; (8003f40 <UART_SetConfig+0x2d4>)
 8003dba:	fba3 2302 	umull	r2, r3, r3, r2
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	011c      	lsls	r4, r3, #4
 8003dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dcc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003dd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003dd4:	4642      	mov	r2, r8
 8003dd6:	464b      	mov	r3, r9
 8003dd8:	1891      	adds	r1, r2, r2
 8003dda:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ddc:	415b      	adcs	r3, r3
 8003dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003de0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003de4:	4641      	mov	r1, r8
 8003de6:	eb12 0a01 	adds.w	sl, r2, r1
 8003dea:	4649      	mov	r1, r9
 8003dec:	eb43 0b01 	adc.w	fp, r3, r1
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003dfc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e04:	4692      	mov	sl, r2
 8003e06:	469b      	mov	fp, r3
 8003e08:	4643      	mov	r3, r8
 8003e0a:	eb1a 0303 	adds.w	r3, sl, r3
 8003e0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e12:	464b      	mov	r3, r9
 8003e14:	eb4b 0303 	adc.w	r3, fp, r3
 8003e18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e30:	460b      	mov	r3, r1
 8003e32:	18db      	adds	r3, r3, r3
 8003e34:	643b      	str	r3, [r7, #64]	; 0x40
 8003e36:	4613      	mov	r3, r2
 8003e38:	eb42 0303 	adc.w	r3, r2, r3
 8003e3c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e46:	f7fc fa3b 	bl	80002c0 <__aeabi_uldivmod>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4b3b      	ldr	r3, [pc, #236]	; (8003f40 <UART_SetConfig+0x2d4>)
 8003e52:	fba3 2301 	umull	r2, r3, r3, r1
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	2264      	movs	r2, #100	; 0x64
 8003e5a:	fb02 f303 	mul.w	r3, r2, r3
 8003e5e:	1acb      	subs	r3, r1, r3
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e66:	4b36      	ldr	r3, [pc, #216]	; (8003f40 <UART_SetConfig+0x2d4>)
 8003e68:	fba3 2302 	umull	r2, r3, r3, r2
 8003e6c:	095b      	lsrs	r3, r3, #5
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e74:	441c      	add	r4, r3
 8003e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e88:	4642      	mov	r2, r8
 8003e8a:	464b      	mov	r3, r9
 8003e8c:	1891      	adds	r1, r2, r2
 8003e8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e90:	415b      	adcs	r3, r3
 8003e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e98:	4641      	mov	r1, r8
 8003e9a:	1851      	adds	r1, r2, r1
 8003e9c:	6339      	str	r1, [r7, #48]	; 0x30
 8003e9e:	4649      	mov	r1, r9
 8003ea0:	414b      	adcs	r3, r1
 8003ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003eb0:	4659      	mov	r1, fp
 8003eb2:	00cb      	lsls	r3, r1, #3
 8003eb4:	4651      	mov	r1, sl
 8003eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eba:	4651      	mov	r1, sl
 8003ebc:	00ca      	lsls	r2, r1, #3
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	4642      	mov	r2, r8
 8003ec6:	189b      	adds	r3, r3, r2
 8003ec8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ecc:	464b      	mov	r3, r9
 8003ece:	460a      	mov	r2, r1
 8003ed0:	eb42 0303 	adc.w	r3, r2, r3
 8003ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ee4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ee8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003eec:	460b      	mov	r3, r1
 8003eee:	18db      	adds	r3, r3, r3
 8003ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	eb42 0303 	adc.w	r3, r2, r3
 8003ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003efa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003efe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f02:	f7fc f9dd 	bl	80002c0 <__aeabi_uldivmod>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <UART_SetConfig+0x2d4>)
 8003f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	2164      	movs	r1, #100	; 0x64
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	3332      	adds	r3, #50	; 0x32
 8003f1e:	4a08      	ldr	r2, [pc, #32]	; (8003f40 <UART_SetConfig+0x2d4>)
 8003f20:	fba2 2303 	umull	r2, r3, r2, r3
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	f003 0207 	and.w	r2, r3, #7
 8003f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4422      	add	r2, r4
 8003f32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f34:	e105      	b.n	8004142 <UART_SetConfig+0x4d6>
 8003f36:	bf00      	nop
 8003f38:	40011000 	.word	0x40011000
 8003f3c:	40011400 	.word	0x40011400
 8003f40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f56:	4642      	mov	r2, r8
 8003f58:	464b      	mov	r3, r9
 8003f5a:	1891      	adds	r1, r2, r2
 8003f5c:	6239      	str	r1, [r7, #32]
 8003f5e:	415b      	adcs	r3, r3
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
 8003f62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f66:	4641      	mov	r1, r8
 8003f68:	1854      	adds	r4, r2, r1
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	eb43 0501 	adc.w	r5, r3, r1
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	00eb      	lsls	r3, r5, #3
 8003f7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f7e:	00e2      	lsls	r2, r4, #3
 8003f80:	4614      	mov	r4, r2
 8003f82:	461d      	mov	r5, r3
 8003f84:	4643      	mov	r3, r8
 8003f86:	18e3      	adds	r3, r4, r3
 8003f88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f8c:	464b      	mov	r3, r9
 8003f8e:	eb45 0303 	adc.w	r3, r5, r3
 8003f92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fa2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	f04f 0300 	mov.w	r3, #0
 8003fae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003fb2:	4629      	mov	r1, r5
 8003fb4:	008b      	lsls	r3, r1, #2
 8003fb6:	4621      	mov	r1, r4
 8003fb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fbc:	4621      	mov	r1, r4
 8003fbe:	008a      	lsls	r2, r1, #2
 8003fc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003fc4:	f7fc f97c 	bl	80002c0 <__aeabi_uldivmod>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4b60      	ldr	r3, [pc, #384]	; (8004150 <UART_SetConfig+0x4e4>)
 8003fce:	fba3 2302 	umull	r2, r3, r3, r2
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	011c      	lsls	r4, r3, #4
 8003fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fe0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003fe4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003fe8:	4642      	mov	r2, r8
 8003fea:	464b      	mov	r3, r9
 8003fec:	1891      	adds	r1, r2, r2
 8003fee:	61b9      	str	r1, [r7, #24]
 8003ff0:	415b      	adcs	r3, r3
 8003ff2:	61fb      	str	r3, [r7, #28]
 8003ff4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ff8:	4641      	mov	r1, r8
 8003ffa:	1851      	adds	r1, r2, r1
 8003ffc:	6139      	str	r1, [r7, #16]
 8003ffe:	4649      	mov	r1, r9
 8004000:	414b      	adcs	r3, r1
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004010:	4659      	mov	r1, fp
 8004012:	00cb      	lsls	r3, r1, #3
 8004014:	4651      	mov	r1, sl
 8004016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800401a:	4651      	mov	r1, sl
 800401c:	00ca      	lsls	r2, r1, #3
 800401e:	4610      	mov	r0, r2
 8004020:	4619      	mov	r1, r3
 8004022:	4603      	mov	r3, r0
 8004024:	4642      	mov	r2, r8
 8004026:	189b      	adds	r3, r3, r2
 8004028:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800402c:	464b      	mov	r3, r9
 800402e:	460a      	mov	r2, r1
 8004030:	eb42 0303 	adc.w	r3, r2, r3
 8004034:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	67bb      	str	r3, [r7, #120]	; 0x78
 8004042:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004050:	4649      	mov	r1, r9
 8004052:	008b      	lsls	r3, r1, #2
 8004054:	4641      	mov	r1, r8
 8004056:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800405a:	4641      	mov	r1, r8
 800405c:	008a      	lsls	r2, r1, #2
 800405e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004062:	f7fc f92d 	bl	80002c0 <__aeabi_uldivmod>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4b39      	ldr	r3, [pc, #228]	; (8004150 <UART_SetConfig+0x4e4>)
 800406c:	fba3 1302 	umull	r1, r3, r3, r2
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	2164      	movs	r1, #100	; 0x64
 8004074:	fb01 f303 	mul.w	r3, r1, r3
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	3332      	adds	r3, #50	; 0x32
 800407e:	4a34      	ldr	r2, [pc, #208]	; (8004150 <UART_SetConfig+0x4e4>)
 8004080:	fba2 2303 	umull	r2, r3, r2, r3
 8004084:	095b      	lsrs	r3, r3, #5
 8004086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800408a:	441c      	add	r4, r3
 800408c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004090:	2200      	movs	r2, #0
 8004092:	673b      	str	r3, [r7, #112]	; 0x70
 8004094:	677a      	str	r2, [r7, #116]	; 0x74
 8004096:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800409a:	4642      	mov	r2, r8
 800409c:	464b      	mov	r3, r9
 800409e:	1891      	adds	r1, r2, r2
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	415b      	adcs	r3, r3
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040aa:	4641      	mov	r1, r8
 80040ac:	1851      	adds	r1, r2, r1
 80040ae:	6039      	str	r1, [r7, #0]
 80040b0:	4649      	mov	r1, r9
 80040b2:	414b      	adcs	r3, r1
 80040b4:	607b      	str	r3, [r7, #4]
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040c2:	4659      	mov	r1, fp
 80040c4:	00cb      	lsls	r3, r1, #3
 80040c6:	4651      	mov	r1, sl
 80040c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040cc:	4651      	mov	r1, sl
 80040ce:	00ca      	lsls	r2, r1, #3
 80040d0:	4610      	mov	r0, r2
 80040d2:	4619      	mov	r1, r3
 80040d4:	4603      	mov	r3, r0
 80040d6:	4642      	mov	r2, r8
 80040d8:	189b      	adds	r3, r3, r2
 80040da:	66bb      	str	r3, [r7, #104]	; 0x68
 80040dc:	464b      	mov	r3, r9
 80040de:	460a      	mov	r2, r1
 80040e0:	eb42 0303 	adc.w	r3, r2, r3
 80040e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	663b      	str	r3, [r7, #96]	; 0x60
 80040f0:	667a      	str	r2, [r7, #100]	; 0x64
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040fe:	4649      	mov	r1, r9
 8004100:	008b      	lsls	r3, r1, #2
 8004102:	4641      	mov	r1, r8
 8004104:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004108:	4641      	mov	r1, r8
 800410a:	008a      	lsls	r2, r1, #2
 800410c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004110:	f7fc f8d6 	bl	80002c0 <__aeabi_uldivmod>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <UART_SetConfig+0x4e4>)
 800411a:	fba3 1302 	umull	r1, r3, r3, r2
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	2164      	movs	r1, #100	; 0x64
 8004122:	fb01 f303 	mul.w	r3, r1, r3
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	3332      	adds	r3, #50	; 0x32
 800412c:	4a08      	ldr	r2, [pc, #32]	; (8004150 <UART_SetConfig+0x4e4>)
 800412e:	fba2 2303 	umull	r2, r3, r2, r3
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	f003 020f 	and.w	r2, r3, #15
 8004138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4422      	add	r2, r4
 8004140:	609a      	str	r2, [r3, #8]
}
 8004142:	bf00      	nop
 8004144:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004148:	46bd      	mov	sp, r7
 800414a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800414e:	bf00      	nop
 8004150:	51eb851f 	.word	0x51eb851f

08004154 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800415a:	4b8d      	ldr	r3, [pc, #564]	; (8004390 <MX_LWIP_Init+0x23c>)
 800415c:	220a      	movs	r2, #10
 800415e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 8004160:	4b8b      	ldr	r3, [pc, #556]	; (8004390 <MX_LWIP_Init+0x23c>)
 8004162:	2200      	movs	r2, #0
 8004164:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 8004166:	4b8a      	ldr	r3, [pc, #552]	; (8004390 <MX_LWIP_Init+0x23c>)
 8004168:	2202      	movs	r2, #2
 800416a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800416c:	4b88      	ldr	r3, [pc, #544]	; (8004390 <MX_LWIP_Init+0x23c>)
 800416e:	220a      	movs	r2, #10
 8004170:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004172:	4b88      	ldr	r3, [pc, #544]	; (8004394 <MX_LWIP_Init+0x240>)
 8004174:	22ff      	movs	r2, #255	; 0xff
 8004176:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004178:	4b86      	ldr	r3, [pc, #536]	; (8004394 <MX_LWIP_Init+0x240>)
 800417a:	22ff      	movs	r2, #255	; 0xff
 800417c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800417e:	4b85      	ldr	r3, [pc, #532]	; (8004394 <MX_LWIP_Init+0x240>)
 8004180:	22ff      	movs	r2, #255	; 0xff
 8004182:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004184:	4b83      	ldr	r3, [pc, #524]	; (8004394 <MX_LWIP_Init+0x240>)
 8004186:	2200      	movs	r2, #0
 8004188:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800418a:	4b83      	ldr	r3, [pc, #524]	; (8004398 <MX_LWIP_Init+0x244>)
 800418c:	220a      	movs	r2, #10
 800418e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8004190:	4b81      	ldr	r3, [pc, #516]	; (8004398 <MX_LWIP_Init+0x244>)
 8004192:	2200      	movs	r2, #0
 8004194:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 2;
 8004196:	4b80      	ldr	r3, [pc, #512]	; (8004398 <MX_LWIP_Init+0x244>)
 8004198:	2202      	movs	r2, #2
 800419a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800419c:	4b7e      	ldr	r3, [pc, #504]	; (8004398 <MX_LWIP_Init+0x244>)
 800419e:	2201      	movs	r2, #1
 80041a0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80041a2:	f002 f941 	bl	8006428 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80041a6:	4b7a      	ldr	r3, [pc, #488]	; (8004390 <MX_LWIP_Init+0x23c>)
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	061a      	lsls	r2, r3, #24
 80041ac:	4b78      	ldr	r3, [pc, #480]	; (8004390 <MX_LWIP_Init+0x23c>)
 80041ae:	785b      	ldrb	r3, [r3, #1]
 80041b0:	041b      	lsls	r3, r3, #16
 80041b2:	431a      	orrs	r2, r3
 80041b4:	4b76      	ldr	r3, [pc, #472]	; (8004390 <MX_LWIP_Init+0x23c>)
 80041b6:	789b      	ldrb	r3, [r3, #2]
 80041b8:	021b      	lsls	r3, r3, #8
 80041ba:	4313      	orrs	r3, r2
 80041bc:	4a74      	ldr	r2, [pc, #464]	; (8004390 <MX_LWIP_Init+0x23c>)
 80041be:	78d2      	ldrb	r2, [r2, #3]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	061a      	lsls	r2, r3, #24
 80041c4:	4b72      	ldr	r3, [pc, #456]	; (8004390 <MX_LWIP_Init+0x23c>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	0619      	lsls	r1, r3, #24
 80041ca:	4b71      	ldr	r3, [pc, #452]	; (8004390 <MX_LWIP_Init+0x23c>)
 80041cc:	785b      	ldrb	r3, [r3, #1]
 80041ce:	041b      	lsls	r3, r3, #16
 80041d0:	4319      	orrs	r1, r3
 80041d2:	4b6f      	ldr	r3, [pc, #444]	; (8004390 <MX_LWIP_Init+0x23c>)
 80041d4:	789b      	ldrb	r3, [r3, #2]
 80041d6:	021b      	lsls	r3, r3, #8
 80041d8:	430b      	orrs	r3, r1
 80041da:	496d      	ldr	r1, [pc, #436]	; (8004390 <MX_LWIP_Init+0x23c>)
 80041dc:	78c9      	ldrb	r1, [r1, #3]
 80041de:	430b      	orrs	r3, r1
 80041e0:	021b      	lsls	r3, r3, #8
 80041e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80041e6:	431a      	orrs	r2, r3
 80041e8:	4b69      	ldr	r3, [pc, #420]	; (8004390 <MX_LWIP_Init+0x23c>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	0619      	lsls	r1, r3, #24
 80041ee:	4b68      	ldr	r3, [pc, #416]	; (8004390 <MX_LWIP_Init+0x23c>)
 80041f0:	785b      	ldrb	r3, [r3, #1]
 80041f2:	041b      	lsls	r3, r3, #16
 80041f4:	4319      	orrs	r1, r3
 80041f6:	4b66      	ldr	r3, [pc, #408]	; (8004390 <MX_LWIP_Init+0x23c>)
 80041f8:	789b      	ldrb	r3, [r3, #2]
 80041fa:	021b      	lsls	r3, r3, #8
 80041fc:	430b      	orrs	r3, r1
 80041fe:	4964      	ldr	r1, [pc, #400]	; (8004390 <MX_LWIP_Init+0x23c>)
 8004200:	78c9      	ldrb	r1, [r1, #3]
 8004202:	430b      	orrs	r3, r1
 8004204:	0a1b      	lsrs	r3, r3, #8
 8004206:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800420a:	431a      	orrs	r2, r3
 800420c:	4b60      	ldr	r3, [pc, #384]	; (8004390 <MX_LWIP_Init+0x23c>)
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	0619      	lsls	r1, r3, #24
 8004212:	4b5f      	ldr	r3, [pc, #380]	; (8004390 <MX_LWIP_Init+0x23c>)
 8004214:	785b      	ldrb	r3, [r3, #1]
 8004216:	041b      	lsls	r3, r3, #16
 8004218:	4319      	orrs	r1, r3
 800421a:	4b5d      	ldr	r3, [pc, #372]	; (8004390 <MX_LWIP_Init+0x23c>)
 800421c:	789b      	ldrb	r3, [r3, #2]
 800421e:	021b      	lsls	r3, r3, #8
 8004220:	430b      	orrs	r3, r1
 8004222:	495b      	ldr	r1, [pc, #364]	; (8004390 <MX_LWIP_Init+0x23c>)
 8004224:	78c9      	ldrb	r1, [r1, #3]
 8004226:	430b      	orrs	r3, r1
 8004228:	0e1b      	lsrs	r3, r3, #24
 800422a:	4313      	orrs	r3, r2
 800422c:	4a5b      	ldr	r2, [pc, #364]	; (800439c <MX_LWIP_Init+0x248>)
 800422e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004230:	4b58      	ldr	r3, [pc, #352]	; (8004394 <MX_LWIP_Init+0x240>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	061a      	lsls	r2, r3, #24
 8004236:	4b57      	ldr	r3, [pc, #348]	; (8004394 <MX_LWIP_Init+0x240>)
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	041b      	lsls	r3, r3, #16
 800423c:	431a      	orrs	r2, r3
 800423e:	4b55      	ldr	r3, [pc, #340]	; (8004394 <MX_LWIP_Init+0x240>)
 8004240:	789b      	ldrb	r3, [r3, #2]
 8004242:	021b      	lsls	r3, r3, #8
 8004244:	4313      	orrs	r3, r2
 8004246:	4a53      	ldr	r2, [pc, #332]	; (8004394 <MX_LWIP_Init+0x240>)
 8004248:	78d2      	ldrb	r2, [r2, #3]
 800424a:	4313      	orrs	r3, r2
 800424c:	061a      	lsls	r2, r3, #24
 800424e:	4b51      	ldr	r3, [pc, #324]	; (8004394 <MX_LWIP_Init+0x240>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	0619      	lsls	r1, r3, #24
 8004254:	4b4f      	ldr	r3, [pc, #316]	; (8004394 <MX_LWIP_Init+0x240>)
 8004256:	785b      	ldrb	r3, [r3, #1]
 8004258:	041b      	lsls	r3, r3, #16
 800425a:	4319      	orrs	r1, r3
 800425c:	4b4d      	ldr	r3, [pc, #308]	; (8004394 <MX_LWIP_Init+0x240>)
 800425e:	789b      	ldrb	r3, [r3, #2]
 8004260:	021b      	lsls	r3, r3, #8
 8004262:	430b      	orrs	r3, r1
 8004264:	494b      	ldr	r1, [pc, #300]	; (8004394 <MX_LWIP_Init+0x240>)
 8004266:	78c9      	ldrb	r1, [r1, #3]
 8004268:	430b      	orrs	r3, r1
 800426a:	021b      	lsls	r3, r3, #8
 800426c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004270:	431a      	orrs	r2, r3
 8004272:	4b48      	ldr	r3, [pc, #288]	; (8004394 <MX_LWIP_Init+0x240>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	0619      	lsls	r1, r3, #24
 8004278:	4b46      	ldr	r3, [pc, #280]	; (8004394 <MX_LWIP_Init+0x240>)
 800427a:	785b      	ldrb	r3, [r3, #1]
 800427c:	041b      	lsls	r3, r3, #16
 800427e:	4319      	orrs	r1, r3
 8004280:	4b44      	ldr	r3, [pc, #272]	; (8004394 <MX_LWIP_Init+0x240>)
 8004282:	789b      	ldrb	r3, [r3, #2]
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	430b      	orrs	r3, r1
 8004288:	4942      	ldr	r1, [pc, #264]	; (8004394 <MX_LWIP_Init+0x240>)
 800428a:	78c9      	ldrb	r1, [r1, #3]
 800428c:	430b      	orrs	r3, r1
 800428e:	0a1b      	lsrs	r3, r3, #8
 8004290:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004294:	431a      	orrs	r2, r3
 8004296:	4b3f      	ldr	r3, [pc, #252]	; (8004394 <MX_LWIP_Init+0x240>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	0619      	lsls	r1, r3, #24
 800429c:	4b3d      	ldr	r3, [pc, #244]	; (8004394 <MX_LWIP_Init+0x240>)
 800429e:	785b      	ldrb	r3, [r3, #1]
 80042a0:	041b      	lsls	r3, r3, #16
 80042a2:	4319      	orrs	r1, r3
 80042a4:	4b3b      	ldr	r3, [pc, #236]	; (8004394 <MX_LWIP_Init+0x240>)
 80042a6:	789b      	ldrb	r3, [r3, #2]
 80042a8:	021b      	lsls	r3, r3, #8
 80042aa:	430b      	orrs	r3, r1
 80042ac:	4939      	ldr	r1, [pc, #228]	; (8004394 <MX_LWIP_Init+0x240>)
 80042ae:	78c9      	ldrb	r1, [r1, #3]
 80042b0:	430b      	orrs	r3, r1
 80042b2:	0e1b      	lsrs	r3, r3, #24
 80042b4:	4313      	orrs	r3, r2
 80042b6:	4a3a      	ldr	r2, [pc, #232]	; (80043a0 <MX_LWIP_Init+0x24c>)
 80042b8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80042ba:	4b37      	ldr	r3, [pc, #220]	; (8004398 <MX_LWIP_Init+0x244>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	061a      	lsls	r2, r3, #24
 80042c0:	4b35      	ldr	r3, [pc, #212]	; (8004398 <MX_LWIP_Init+0x244>)
 80042c2:	785b      	ldrb	r3, [r3, #1]
 80042c4:	041b      	lsls	r3, r3, #16
 80042c6:	431a      	orrs	r2, r3
 80042c8:	4b33      	ldr	r3, [pc, #204]	; (8004398 <MX_LWIP_Init+0x244>)
 80042ca:	789b      	ldrb	r3, [r3, #2]
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	4313      	orrs	r3, r2
 80042d0:	4a31      	ldr	r2, [pc, #196]	; (8004398 <MX_LWIP_Init+0x244>)
 80042d2:	78d2      	ldrb	r2, [r2, #3]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	061a      	lsls	r2, r3, #24
 80042d8:	4b2f      	ldr	r3, [pc, #188]	; (8004398 <MX_LWIP_Init+0x244>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	0619      	lsls	r1, r3, #24
 80042de:	4b2e      	ldr	r3, [pc, #184]	; (8004398 <MX_LWIP_Init+0x244>)
 80042e0:	785b      	ldrb	r3, [r3, #1]
 80042e2:	041b      	lsls	r3, r3, #16
 80042e4:	4319      	orrs	r1, r3
 80042e6:	4b2c      	ldr	r3, [pc, #176]	; (8004398 <MX_LWIP_Init+0x244>)
 80042e8:	789b      	ldrb	r3, [r3, #2]
 80042ea:	021b      	lsls	r3, r3, #8
 80042ec:	430b      	orrs	r3, r1
 80042ee:	492a      	ldr	r1, [pc, #168]	; (8004398 <MX_LWIP_Init+0x244>)
 80042f0:	78c9      	ldrb	r1, [r1, #3]
 80042f2:	430b      	orrs	r3, r1
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80042fa:	431a      	orrs	r2, r3
 80042fc:	4b26      	ldr	r3, [pc, #152]	; (8004398 <MX_LWIP_Init+0x244>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	0619      	lsls	r1, r3, #24
 8004302:	4b25      	ldr	r3, [pc, #148]	; (8004398 <MX_LWIP_Init+0x244>)
 8004304:	785b      	ldrb	r3, [r3, #1]
 8004306:	041b      	lsls	r3, r3, #16
 8004308:	4319      	orrs	r1, r3
 800430a:	4b23      	ldr	r3, [pc, #140]	; (8004398 <MX_LWIP_Init+0x244>)
 800430c:	789b      	ldrb	r3, [r3, #2]
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	430b      	orrs	r3, r1
 8004312:	4921      	ldr	r1, [pc, #132]	; (8004398 <MX_LWIP_Init+0x244>)
 8004314:	78c9      	ldrb	r1, [r1, #3]
 8004316:	430b      	orrs	r3, r1
 8004318:	0a1b      	lsrs	r3, r3, #8
 800431a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800431e:	431a      	orrs	r2, r3
 8004320:	4b1d      	ldr	r3, [pc, #116]	; (8004398 <MX_LWIP_Init+0x244>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	0619      	lsls	r1, r3, #24
 8004326:	4b1c      	ldr	r3, [pc, #112]	; (8004398 <MX_LWIP_Init+0x244>)
 8004328:	785b      	ldrb	r3, [r3, #1]
 800432a:	041b      	lsls	r3, r3, #16
 800432c:	4319      	orrs	r1, r3
 800432e:	4b1a      	ldr	r3, [pc, #104]	; (8004398 <MX_LWIP_Init+0x244>)
 8004330:	789b      	ldrb	r3, [r3, #2]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	430b      	orrs	r3, r1
 8004336:	4918      	ldr	r1, [pc, #96]	; (8004398 <MX_LWIP_Init+0x244>)
 8004338:	78c9      	ldrb	r1, [r1, #3]
 800433a:	430b      	orrs	r3, r1
 800433c:	0e1b      	lsrs	r3, r3, #24
 800433e:	4313      	orrs	r3, r2
 8004340:	4a18      	ldr	r2, [pc, #96]	; (80043a4 <MX_LWIP_Init+0x250>)
 8004342:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004344:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <MX_LWIP_Init+0x254>)
 8004346:	9302      	str	r3, [sp, #8]
 8004348:	4b18      	ldr	r3, [pc, #96]	; (80043ac <MX_LWIP_Init+0x258>)
 800434a:	9301      	str	r3, [sp, #4]
 800434c:	2300      	movs	r3, #0
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	4b14      	ldr	r3, [pc, #80]	; (80043a4 <MX_LWIP_Init+0x250>)
 8004352:	4a13      	ldr	r2, [pc, #76]	; (80043a0 <MX_LWIP_Init+0x24c>)
 8004354:	4911      	ldr	r1, [pc, #68]	; (800439c <MX_LWIP_Init+0x248>)
 8004356:	4816      	ldr	r0, [pc, #88]	; (80043b0 <MX_LWIP_Init+0x25c>)
 8004358:	f002 fd52 	bl	8006e00 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800435c:	4814      	ldr	r0, [pc, #80]	; (80043b0 <MX_LWIP_Init+0x25c>)
 800435e:	f002 ff01 	bl	8007164 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004362:	4b13      	ldr	r3, [pc, #76]	; (80043b0 <MX_LWIP_Init+0x25c>)
 8004364:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004368:	089b      	lsrs	r3, r3, #2
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004374:	480e      	ldr	r0, [pc, #56]	; (80043b0 <MX_LWIP_Init+0x25c>)
 8004376:	f002 ff05 	bl	8007184 <netif_set_up>
 800437a:	e002      	b.n	8004382 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800437c:	480c      	ldr	r0, [pc, #48]	; (80043b0 <MX_LWIP_Init+0x25c>)
 800437e:	f002 ff6d 	bl	800725c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004382:	490c      	ldr	r1, [pc, #48]	; (80043b4 <MX_LWIP_Init+0x260>)
 8004384:	480a      	ldr	r0, [pc, #40]	; (80043b0 <MX_LWIP_Init+0x25c>)
 8004386:	f002 ffff 	bl	8007388 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800438a:	bf00      	nop
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20000144 	.word	0x20000144
 8004394:	20000148 	.word	0x20000148
 8004398:	2000014c 	.word	0x2000014c
 800439c:	20000138 	.word	0x20000138
 80043a0:	2000013c 	.word	0x2000013c
 80043a4:	20000140 	.word	0x20000140
 80043a8:	08010a41 	.word	0x08010a41
 80043ac:	08004795 	.word	0x08004795
 80043b0:	20000104 	.word	0x20000104
 80043b4:	08004409 	.word	0x08004409

080043b8 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80043c0:	f7fc fe48 	bl	8001054 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <Ethernet_Link_Periodic_Handle+0x30>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b63      	cmp	r3, #99	; 0x63
 80043ce:	d907      	bls.n	80043e0 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80043d0:	f7fc fe40 	bl	8001054 <HAL_GetTick>
 80043d4:	4603      	mov	r3, r0
 80043d6:	4a04      	ldr	r2, [pc, #16]	; (80043e8 <Ethernet_Link_Periodic_Handle+0x30>)
 80043d8:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fb3e 	bl	8004a5c <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80043e0:	bf00      	nop
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20000100 	.word	0x20000100

080043ec <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80043f0:	4804      	ldr	r0, [pc, #16]	; (8004404 <MX_LWIP_Process+0x18>)
 80043f2:	f000 f9af 	bl	8004754 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80043f6:	f009 ff37 	bl	800e268 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80043fa:	4802      	ldr	r0, [pc, #8]	; (8004404 <MX_LWIP_Process+0x18>)
 80043fc:	f7ff ffdc 	bl	80043b8 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004400:	bf00      	nop
 8004402:	bd80      	pop	{r7, pc}
 8004404:	20000104 	.word	0x20000104

08004408 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <FilterBySourceMACAdress>:
void pbuf_free_custom(struct pbuf *p);

/* USER CODE BEGIN 4 */

uint8_t FilterBySourceMACAdress(uint8_t *MACAddr, uint8_t *pData)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
   uint8_t equalityCntr = 0;
 8004426:	2300      	movs	r3, #0
 8004428:	75fb      	strb	r3, [r7, #23]
   uint8_t *mypdata = pData;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	613b      	str	r3, [r7, #16]

   for (uint8_t i = 0; i < 6; i++)
 800442e:	2300      	movs	r3, #0
 8004430:	73fb      	strb	r3, [r7, #15]
 8004432:	e01b      	b.n	800446c <FilterBySourceMACAdress+0x50>
   {
      if((*mypdata) == MACAddr[i%6])
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	7818      	ldrb	r0, [r3, #0]
 8004438:	7bfa      	ldrb	r2, [r7, #15]
 800443a:	4b14      	ldr	r3, [pc, #80]	; (800448c <FilterBySourceMACAdress+0x70>)
 800443c:	fba3 1302 	umull	r1, r3, r3, r2
 8004440:	0899      	lsrs	r1, r3, #2
 8004442:	460b      	mov	r3, r1
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	440b      	add	r3, r1
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	b2db      	uxtb	r3, r3
 800444e:	461a      	mov	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4413      	add	r3, r2
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	4298      	cmp	r0, r3
 8004458:	d102      	bne.n	8004460 <FilterBySourceMACAdress+0x44>
         equalityCntr++;
 800445a:	7dfb      	ldrb	r3, [r7, #23]
 800445c:	3301      	adds	r3, #1
 800445e:	75fb      	strb	r3, [r7, #23]

      mypdata++;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	3301      	adds	r3, #1
 8004464:	613b      	str	r3, [r7, #16]
   for (uint8_t i = 0; i < 6; i++)
 8004466:	7bfb      	ldrb	r3, [r7, #15]
 8004468:	3301      	adds	r3, #1
 800446a:	73fb      	strb	r3, [r7, #15]
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	2b05      	cmp	r3, #5
 8004470:	d9e0      	bls.n	8004434 <FilterBySourceMACAdress+0x18>
   }

   if (equalityCntr == 6)
 8004472:	7dfb      	ldrb	r3, [r7, #23]
 8004474:	2b06      	cmp	r3, #6
 8004476:	d101      	bne.n	800447c <FilterBySourceMACAdress+0x60>
      return 0;
 8004478:	2300      	movs	r3, #0
 800447a:	e000      	b.n	800447e <FilterBySourceMACAdress+0x62>
   else
      return 1;
 800447c:	2301      	movs	r3, #1
}
 800447e:	4618      	mov	r0, r3
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	aaaaaaab 	.word	0xaaaaaaab

08004490 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800449c:	4b40      	ldr	r3, [pc, #256]	; (80045a0 <low_level_init+0x110>)
 800449e:	4a41      	ldr	r2, [pc, #260]	; (80045a4 <low_level_init+0x114>)
 80044a0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80044a2:	2300      	movs	r3, #0
 80044a4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80044a6:	2380      	movs	r3, #128	; 0x80
 80044a8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80044aa:	23e1      	movs	r3, #225	; 0xe1
 80044ac:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80044ae:	2300      	movs	r3, #0
 80044b0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80044b2:	2300      	movs	r3, #0
 80044b4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80044b6:	2300      	movs	r3, #0
 80044b8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80044ba:	4a39      	ldr	r2, [pc, #228]	; (80045a0 <low_level_init+0x110>)
 80044bc:	f107 0308 	add.w	r3, r7, #8
 80044c0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80044c2:	4b37      	ldr	r3, [pc, #220]	; (80045a0 <low_level_init+0x110>)
 80044c4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80044c8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80044ca:	4b35      	ldr	r3, [pc, #212]	; (80045a0 <low_level_init+0x110>)
 80044cc:	4a36      	ldr	r2, [pc, #216]	; (80045a8 <low_level_init+0x118>)
 80044ce:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80044d0:	4b33      	ldr	r3, [pc, #204]	; (80045a0 <low_level_init+0x110>)
 80044d2:	4a36      	ldr	r2, [pc, #216]	; (80045ac <low_level_init+0x11c>)
 80044d4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80044d6:	4b32      	ldr	r3, [pc, #200]	; (80045a0 <low_level_init+0x110>)
 80044d8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80044dc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80044de:	4830      	ldr	r0, [pc, #192]	; (80045a0 <low_level_init+0x110>)
 80044e0:	f7fc ff8c 	bl	80013fc <HAL_ETH_Init>
 80044e4:	4603      	mov	r3, r0
 80044e6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80044e8:	2238      	movs	r2, #56	; 0x38
 80044ea:	2100      	movs	r1, #0
 80044ec:	4830      	ldr	r0, [pc, #192]	; (80045b0 <low_level_init+0x120>)
 80044ee:	f00c fbbf 	bl	8010c70 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80044f2:	4b2f      	ldr	r3, [pc, #188]	; (80045b0 <low_level_init+0x120>)
 80044f4:	2221      	movs	r2, #33	; 0x21
 80044f6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80044f8:	4b2d      	ldr	r3, [pc, #180]	; (80045b0 <low_level_init+0x120>)
 80044fa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80044fe:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004500:	4b2b      	ldr	r3, [pc, #172]	; (80045b0 <low_level_init+0x120>)
 8004502:	2200      	movs	r2, #0
 8004504:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004506:	482b      	ldr	r0, [pc, #172]	; (80045b4 <low_level_init+0x124>)
 8004508:	f002 fb42 	bl	8006b90 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2206      	movs	r2, #6
 8004510:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004514:	4b22      	ldr	r3, [pc, #136]	; (80045a0 <low_level_init+0x110>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	781a      	ldrb	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004520:	4b1f      	ldr	r3, [pc, #124]	; (80045a0 <low_level_init+0x110>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	785a      	ldrb	r2, [r3, #1]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800452c:	4b1c      	ldr	r3, [pc, #112]	; (80045a0 <low_level_init+0x110>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	789a      	ldrb	r2, [r3, #2]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004538:	4b19      	ldr	r3, [pc, #100]	; (80045a0 <low_level_init+0x110>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	78da      	ldrb	r2, [r3, #3]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004544:	4b16      	ldr	r3, [pc, #88]	; (80045a0 <low_level_init+0x110>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	791a      	ldrb	r2, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004550:	4b13      	ldr	r3, [pc, #76]	; (80045a0 <low_level_init+0x110>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	795a      	ldrb	r2, [r3, #5]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004562:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800456a:	f043 030a 	orr.w	r3, r3, #10
 800456e:	b2da      	uxtb	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004576:	4910      	ldr	r1, [pc, #64]	; (80045b8 <low_level_init+0x128>)
 8004578:	4810      	ldr	r0, [pc, #64]	; (80045bc <low_level_init+0x12c>)
 800457a:	f7fc fba4 	bl	8000cc6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800457e:	480f      	ldr	r0, [pc, #60]	; (80045bc <low_level_init+0x12c>)
 8004580:	f7fc fbd3 	bl	8000d2a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d103      	bne.n	8004592 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 fa66 	bl	8004a5c <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004590:	e001      	b.n	8004596 <low_level_init+0x106>
    Error_Handler();
 8004592:	f7fc f9e1 	bl	8000958 <Error_Handler>
}
 8004596:	bf00      	nop
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	20004c1c 	.word	0x20004c1c
 80045a4:	40028000 	.word	0x40028000
 80045a8:	20004b7c 	.word	0x20004b7c
 80045ac:	20004adc 	.word	0x20004adc
 80045b0:	20004ccc 	.word	0x20004ccc
 80045b4:	08014ab8 	.word	0x08014ab8
 80045b8:	2000000c 	.word	0x2000000c
 80045bc:	20004d04 	.word	0x20004d04

080045c0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b092      	sub	sp, #72	; 0x48
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80045d8:	f107 030c 	add.w	r3, r7, #12
 80045dc:	2230      	movs	r2, #48	; 0x30
 80045de:	2100      	movs	r1, #0
 80045e0:	4618      	mov	r0, r3
 80045e2:	f00c fb45 	bl	8010c70 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80045e6:	f107 030c 	add.w	r3, r7, #12
 80045ea:	2230      	movs	r2, #48	; 0x30
 80045ec:	2100      	movs	r1, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f00c fb3e 	bl	8010c70 <memset>

  for(q = p; q != NULL; q = q->next)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	643b      	str	r3, [r7, #64]	; 0x40
 80045f8:	e045      	b.n	8004686 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80045fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d902      	bls.n	8004606 <low_level_output+0x46>
      return ERR_IF;
 8004600:	f06f 030b 	mvn.w	r3, #11
 8004604:	e055      	b.n	80046b2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8004606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004608:	6859      	ldr	r1, [r3, #4]
 800460a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800460c:	4613      	mov	r3, r2
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	3348      	adds	r3, #72	; 0x48
 8004616:	443b      	add	r3, r7
 8004618:	3b3c      	subs	r3, #60	; 0x3c
 800461a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800461c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800461e:	895b      	ldrh	r3, [r3, #10]
 8004620:	4619      	mov	r1, r3
 8004622:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004624:	4613      	mov	r3, r2
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	4413      	add	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	3348      	adds	r3, #72	; 0x48
 800462e:	443b      	add	r3, r7
 8004630:	3b38      	subs	r3, #56	; 0x38
 8004632:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004636:	2b00      	cmp	r3, #0
 8004638:	d011      	beq.n	800465e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800463a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800463c:	1e5a      	subs	r2, r3, #1
 800463e:	f107 000c 	add.w	r0, r7, #12
 8004642:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004644:	460b      	mov	r3, r1
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	440b      	add	r3, r1
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	18c1      	adds	r1, r0, r3
 800464e:	4613      	mov	r3, r2
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	3348      	adds	r3, #72	; 0x48
 8004658:	443b      	add	r3, r7
 800465a:	3b34      	subs	r3, #52	; 0x34
 800465c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800465e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d109      	bne.n	800467a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004668:	4613      	mov	r3, r2
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	4413      	add	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	3348      	adds	r3, #72	; 0x48
 8004672:	443b      	add	r3, r7
 8004674:	3b34      	subs	r3, #52	; 0x34
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]
    }

    i++;
 800467a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800467c:	3301      	adds	r3, #1
 800467e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	643b      	str	r3, [r7, #64]	; 0x40
 8004686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1b6      	bne.n	80045fa <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	891b      	ldrh	r3, [r3, #8]
 8004690:	461a      	mov	r2, r3
 8004692:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <low_level_output+0xfc>)
 8004694:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004696:	4a09      	ldr	r2, [pc, #36]	; (80046bc <low_level_output+0xfc>)
 8004698:	f107 030c 	add.w	r3, r7, #12
 800469c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800469e:	4a07      	ldr	r2, [pc, #28]	; (80046bc <low_level_output+0xfc>)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80046a4:	2214      	movs	r2, #20
 80046a6:	4905      	ldr	r1, [pc, #20]	; (80046bc <low_level_output+0xfc>)
 80046a8:	4805      	ldr	r0, [pc, #20]	; (80046c0 <low_level_output+0x100>)
 80046aa:	f7fc ffdd 	bl	8001668 <HAL_ETH_Transmit>

  return errval;
 80046ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3748      	adds	r7, #72	; 0x48
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20004ccc 	.word	0x20004ccc
 80046c0:	20004c1c 	.word	0x20004c1c

080046c4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	613b      	str	r3, [r7, #16]
  struct pbuf *myp = NULL;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]

  uint8_t MACAddr[6];

  MACAddr[0] = 0xFF;
 80046d4:	23ff      	movs	r3, #255	; 0xff
 80046d6:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0xFF;
 80046d8:	23ff      	movs	r3, #255	; 0xff
 80046da:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xFF;
 80046dc:	23ff      	movs	r3, #255	; 0xff
 80046de:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0xFF;
 80046e0:	23ff      	movs	r3, #255	; 0xff
 80046e2:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0xFF;
 80046e4:	23ff      	movs	r3, #255	; 0xff
 80046e6:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0xFF;
 80046e8:	23ff      	movs	r3, #255	; 0xff
 80046ea:	737b      	strb	r3, [r7, #13]

  if(RxAllocStatus == RX_ALLOC_OK)
 80046ec:	4b16      	ldr	r3, [pc, #88]	; (8004748 <low_level_input+0x84>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d124      	bne.n	800473e <low_level_input+0x7a>
  {
    if (HAL_ETH_ReadData(&heth, (void **)&p) == HAL_OK)
 80046f4:	f107 0310 	add.w	r3, r7, #16
 80046f8:	4619      	mov	r1, r3
 80046fa:	4814      	ldr	r0, [pc, #80]	; (800474c <low_level_input+0x88>)
 80046fc:	f7fd f848 	bl	8001790 <HAL_ETH_ReadData>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d11b      	bne.n	800473e <low_level_input+0x7a>
    {
       myp = p;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	617b      	str	r3, [r7, #20]
       while(myp != NULL)
 800470a:	e015      	b.n	8004738 <low_level_input+0x74>
       {
          if (FilterBySourceMACAdress(&MACAddr[0], myp->payload))
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	f107 0308 	add.w	r3, r7, #8
 8004714:	4611      	mov	r1, r2
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff fe80 	bl	800441c <FilterBySourceMACAdress>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d007      	beq.n	8004732 <low_level_input+0x6e>
             HAL_UART_Transmit_IT(&huart3, myp->payload, myp->len);
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	6859      	ldr	r1, [r3, #4]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	895b      	ldrh	r3, [r3, #10]
 800472a:	461a      	mov	r2, r3
 800472c:	4808      	ldr	r0, [pc, #32]	; (8004750 <low_level_input+0x8c>)
 800472e:	f7fe fe06 	bl	800333e <HAL_UART_Transmit_IT>
          myp = myp->next;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	617b      	str	r3, [r7, #20]
       while(myp != NULL)
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e6      	bne.n	800470c <low_level_input+0x48>
       }
    }
  }

  return p;
 800473e:	693b      	ldr	r3, [r7, #16]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	20004ad8 	.word	0x20004ad8
 800474c:	20004c1c 	.word	0x20004c1c
 8004750:	200000ac 	.word	0x200000ac

08004754 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7ff ffaf 	bl	80046c4 <low_level_input>
 8004766:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	4798      	blx	r3
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f003 f982 	bl	8007a88 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1ea      	bne.n	8004760 <ethernetif_input+0xc>
}
 800478a:	bf00      	nop
 800478c:	bf00      	nop
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <ethernetif_init+0x1c>
 80047a2:	4b0e      	ldr	r3, [pc, #56]	; (80047dc <ethernetif_init+0x48>)
 80047a4:	f240 128f 	movw	r2, #399	; 0x18f
 80047a8:	490d      	ldr	r1, [pc, #52]	; (80047e0 <ethernetif_init+0x4c>)
 80047aa:	480e      	ldr	r0, [pc, #56]	; (80047e4 <ethernetif_init+0x50>)
 80047ac:	f00c fa68 	bl	8010c80 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2273      	movs	r2, #115	; 0x73
 80047b4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2274      	movs	r2, #116	; 0x74
 80047bc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a09      	ldr	r2, [pc, #36]	; (80047e8 <ethernetif_init+0x54>)
 80047c4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a08      	ldr	r2, [pc, #32]	; (80047ec <ethernetif_init+0x58>)
 80047ca:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7ff fe5f 	bl	8004490 <low_level_init>

  return ERR_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	08011da0 	.word	0x08011da0
 80047e0:	08011dbc 	.word	0x08011dbc
 80047e4:	08011dcc 	.word	0x08011dcc
 80047e8:	0800eef9 	.word	0x0800eef9
 80047ec:	080045c1 	.word	0x080045c1

080047f0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80047fc:	68f9      	ldr	r1, [r7, #12]
 80047fe:	4807      	ldr	r0, [pc, #28]	; (800481c <pbuf_free_custom+0x2c>)
 8004800:	f002 faa8 	bl	8006d54 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004804:	4b06      	ldr	r3, [pc, #24]	; (8004820 <pbuf_free_custom+0x30>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d102      	bne.n	8004812 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800480c:	4b04      	ldr	r3, [pc, #16]	; (8004820 <pbuf_free_custom+0x30>)
 800480e:	2200      	movs	r2, #0
 8004810:	701a      	strb	r2, [r3, #0]
  }
}
 8004812:	bf00      	nop
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	08014ab8 	.word	0x08014ab8
 8004820:	20004ad8 	.word	0x20004ad8

08004824 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004828:	f7fc fc14 	bl	8001054 <HAL_GetTick>
 800482c:	4603      	mov	r3, r0
}
 800482e:	4618      	mov	r0, r3
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08e      	sub	sp, #56	; 0x38
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800483c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	605a      	str	r2, [r3, #4]
 8004846:	609a      	str	r2, [r3, #8]
 8004848:	60da      	str	r2, [r3, #12]
 800484a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a55      	ldr	r2, [pc, #340]	; (80049a8 <HAL_ETH_MspInit+0x174>)
 8004852:	4293      	cmp	r3, r2
 8004854:	f040 80a4 	bne.w	80049a0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004858:	2300      	movs	r3, #0
 800485a:	623b      	str	r3, [r7, #32]
 800485c:	4b53      	ldr	r3, [pc, #332]	; (80049ac <HAL_ETH_MspInit+0x178>)
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	4a52      	ldr	r2, [pc, #328]	; (80049ac <HAL_ETH_MspInit+0x178>)
 8004862:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004866:	6313      	str	r3, [r2, #48]	; 0x30
 8004868:	4b50      	ldr	r3, [pc, #320]	; (80049ac <HAL_ETH_MspInit+0x178>)
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004870:	623b      	str	r3, [r7, #32]
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	2300      	movs	r3, #0
 8004876:	61fb      	str	r3, [r7, #28]
 8004878:	4b4c      	ldr	r3, [pc, #304]	; (80049ac <HAL_ETH_MspInit+0x178>)
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	4a4b      	ldr	r2, [pc, #300]	; (80049ac <HAL_ETH_MspInit+0x178>)
 800487e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004882:	6313      	str	r3, [r2, #48]	; 0x30
 8004884:	4b49      	ldr	r3, [pc, #292]	; (80049ac <HAL_ETH_MspInit+0x178>)
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800488c:	61fb      	str	r3, [r7, #28]
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	2300      	movs	r3, #0
 8004892:	61bb      	str	r3, [r7, #24]
 8004894:	4b45      	ldr	r3, [pc, #276]	; (80049ac <HAL_ETH_MspInit+0x178>)
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	4a44      	ldr	r2, [pc, #272]	; (80049ac <HAL_ETH_MspInit+0x178>)
 800489a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800489e:	6313      	str	r3, [r2, #48]	; 0x30
 80048a0:	4b42      	ldr	r3, [pc, #264]	; (80049ac <HAL_ETH_MspInit+0x178>)
 80048a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048ac:	2300      	movs	r3, #0
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	4b3e      	ldr	r3, [pc, #248]	; (80049ac <HAL_ETH_MspInit+0x178>)
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b4:	4a3d      	ldr	r2, [pc, #244]	; (80049ac <HAL_ETH_MspInit+0x178>)
 80048b6:	f043 0304 	orr.w	r3, r3, #4
 80048ba:	6313      	str	r3, [r2, #48]	; 0x30
 80048bc:	4b3b      	ldr	r3, [pc, #236]	; (80049ac <HAL_ETH_MspInit+0x178>)
 80048be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048c8:	2300      	movs	r3, #0
 80048ca:	613b      	str	r3, [r7, #16]
 80048cc:	4b37      	ldr	r3, [pc, #220]	; (80049ac <HAL_ETH_MspInit+0x178>)
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	4a36      	ldr	r2, [pc, #216]	; (80049ac <HAL_ETH_MspInit+0x178>)
 80048d2:	f043 0301 	orr.w	r3, r3, #1
 80048d6:	6313      	str	r3, [r2, #48]	; 0x30
 80048d8:	4b34      	ldr	r3, [pc, #208]	; (80049ac <HAL_ETH_MspInit+0x178>)
 80048da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	4b30      	ldr	r3, [pc, #192]	; (80049ac <HAL_ETH_MspInit+0x178>)
 80048ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ec:	4a2f      	ldr	r2, [pc, #188]	; (80049ac <HAL_ETH_MspInit+0x178>)
 80048ee:	f043 0302 	orr.w	r3, r3, #2
 80048f2:	6313      	str	r3, [r2, #48]	; 0x30
 80048f4:	4b2d      	ldr	r3, [pc, #180]	; (80049ac <HAL_ETH_MspInit+0x178>)
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004900:	2300      	movs	r3, #0
 8004902:	60bb      	str	r3, [r7, #8]
 8004904:	4b29      	ldr	r3, [pc, #164]	; (80049ac <HAL_ETH_MspInit+0x178>)
 8004906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004908:	4a28      	ldr	r2, [pc, #160]	; (80049ac <HAL_ETH_MspInit+0x178>)
 800490a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800490e:	6313      	str	r3, [r2, #48]	; 0x30
 8004910:	4b26      	ldr	r3, [pc, #152]	; (80049ac <HAL_ETH_MspInit+0x178>)
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800491c:	2332      	movs	r3, #50	; 0x32
 800491e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004920:	2302      	movs	r3, #2
 8004922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004924:	2300      	movs	r3, #0
 8004926:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004928:	2303      	movs	r3, #3
 800492a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800492c:	230b      	movs	r3, #11
 800492e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004934:	4619      	mov	r1, r3
 8004936:	481e      	ldr	r0, [pc, #120]	; (80049b0 <HAL_ETH_MspInit+0x17c>)
 8004938:	f7fd fe56 	bl	80025e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800493c:	2386      	movs	r3, #134	; 0x86
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004940:	2302      	movs	r3, #2
 8004942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004944:	2300      	movs	r3, #0
 8004946:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004948:	2303      	movs	r3, #3
 800494a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800494c:	230b      	movs	r3, #11
 800494e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004954:	4619      	mov	r1, r3
 8004956:	4817      	ldr	r0, [pc, #92]	; (80049b4 <HAL_ETH_MspInit+0x180>)
 8004958:	f7fd fe46 	bl	80025e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800495c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004962:	2302      	movs	r3, #2
 8004964:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004966:	2300      	movs	r3, #0
 8004968:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800496a:	2303      	movs	r3, #3
 800496c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800496e:	230b      	movs	r3, #11
 8004970:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004976:	4619      	mov	r1, r3
 8004978:	480f      	ldr	r0, [pc, #60]	; (80049b8 <HAL_ETH_MspInit+0x184>)
 800497a:	f7fd fe35 	bl	80025e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800497e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004984:	2302      	movs	r3, #2
 8004986:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004988:	2300      	movs	r3, #0
 800498a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800498c:	2303      	movs	r3, #3
 800498e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004990:	230b      	movs	r3, #11
 8004992:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004998:	4619      	mov	r1, r3
 800499a:	4808      	ldr	r0, [pc, #32]	; (80049bc <HAL_ETH_MspInit+0x188>)
 800499c:	f7fd fe24 	bl	80025e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80049a0:	bf00      	nop
 80049a2:	3738      	adds	r7, #56	; 0x38
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40028000 	.word	0x40028000
 80049ac:	40023800 	.word	0x40023800
 80049b0:	40020800 	.word	0x40020800
 80049b4:	40020000 	.word	0x40020000
 80049b8:	40020400 	.word	0x40020400
 80049bc:	40021800 	.word	0x40021800

080049c0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80049c4:	4802      	ldr	r0, [pc, #8]	; (80049d0 <ETH_PHY_IO_Init+0x10>)
 80049c6:	f7fd f9b3 	bl	8001d30 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	20004c1c 	.word	0x20004c1c

080049d4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  return 0;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	68f9      	ldr	r1, [r7, #12]
 80049f6:	4807      	ldr	r0, [pc, #28]	; (8004a14 <ETH_PHY_IO_ReadReg+0x30>)
 80049f8:	f7fd f802 	bl	8001a00 <HAL_ETH_ReadPHYRegister>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004a02:	f04f 33ff 	mov.w	r3, #4294967295
 8004a06:	e000      	b.n	8004a0a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20004c1c 	.word	0x20004c1c

08004a18 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	68f9      	ldr	r1, [r7, #12]
 8004a2a:	4807      	ldr	r0, [pc, #28]	; (8004a48 <ETH_PHY_IO_WriteReg+0x30>)
 8004a2c:	f7fd f833 	bl	8001a96 <HAL_ETH_WritePHYRegister>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004a36:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3a:	e000      	b.n	8004a3e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20004c1c 	.word	0x20004c1c

08004a4c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004a50:	f7fc fb00 	bl	8001054 <HAL_GetTick>
 8004a54:	4603      	mov	r3, r0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b0a0      	sub	sp, #128	; 0x80
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004a64:	f107 030c 	add.w	r3, r7, #12
 8004a68:	2264      	movs	r2, #100	; 0x64
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f00c f8ff 	bl	8010c70 <memset>
  int32_t PHYLinkState = 0;
 8004a72:	2300      	movs	r3, #0
 8004a74:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a7e:	2300      	movs	r3, #0
 8004a80:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004a82:	483a      	ldr	r0, [pc, #232]	; (8004b6c <ethernet_link_check_state+0x110>)
 8004a84:	f7fc f9f9 	bl	8000e7a <LAN8742_GetLinkState>
 8004a88:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004a90:	089b      	lsrs	r3, r3, #2
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00c      	beq.n	8004ab6 <ethernet_link_check_state+0x5a>
 8004a9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	dc09      	bgt.n	8004ab6 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8004aa2:	4833      	ldr	r0, [pc, #204]	; (8004b70 <ethernet_link_check_state+0x114>)
 8004aa4:	f7fc fd87 	bl	80015b6 <HAL_ETH_Stop>
    netif_set_down(netif);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f002 fbd7 	bl	800725c <netif_set_down>
    netif_set_link_down(netif);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f002 fc3a 	bl	8007328 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004ab4:	e055      	b.n	8004b62 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d14e      	bne.n	8004b62 <ethernet_link_check_state+0x106>
 8004ac4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	dd4b      	ble.n	8004b62 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004aca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004acc:	3b02      	subs	r3, #2
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d82a      	bhi.n	8004b28 <ethernet_link_check_state+0xcc>
 8004ad2:	a201      	add	r2, pc, #4	; (adr r2, 8004ad8 <ethernet_link_check_state+0x7c>)
 8004ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad8:	08004ae9 	.word	0x08004ae9
 8004adc:	08004afb 	.word	0x08004afb
 8004ae0:	08004b0b 	.word	0x08004b0b
 8004ae4:	08004b1b 	.word	0x08004b1b
      duplex = ETH_FULLDUPLEX_MODE;
 8004ae8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004aec:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004aee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004af2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004af4:	2301      	movs	r3, #1
 8004af6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004af8:	e017      	b.n	8004b2a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004afa:	2300      	movs	r3, #0
 8004afc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004afe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b02:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004b04:	2301      	movs	r3, #1
 8004b06:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004b08:	e00f      	b.n	8004b2a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004b0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b0e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004b10:	2300      	movs	r3, #0
 8004b12:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004b14:	2301      	movs	r3, #1
 8004b16:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004b18:	e007      	b.n	8004b2a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004b22:	2301      	movs	r3, #1
 8004b24:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004b26:	e000      	b.n	8004b2a <ethernet_link_check_state+0xce>
      break;
 8004b28:	bf00      	nop
    if(linkchanged)
 8004b2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d018      	beq.n	8004b62 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004b30:	f107 030c 	add.w	r3, r7, #12
 8004b34:	4619      	mov	r1, r3
 8004b36:	480e      	ldr	r0, [pc, #56]	; (8004b70 <ethernet_link_check_state+0x114>)
 8004b38:	f7fc fff6 	bl	8001b28 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8004b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b42:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004b44:	f107 030c 	add.w	r3, r7, #12
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4809      	ldr	r0, [pc, #36]	; (8004b70 <ethernet_link_check_state+0x114>)
 8004b4c:	f7fd f8d6 	bl	8001cfc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004b50:	4807      	ldr	r0, [pc, #28]	; (8004b70 <ethernet_link_check_state+0x114>)
 8004b52:	f7fc fcd1 	bl	80014f8 <HAL_ETH_Start>
      netif_set_up(netif);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f002 fb14 	bl	8007184 <netif_set_up>
      netif_set_link_up(netif);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f002 fbaf 	bl	80072c0 <netif_set_link_up>
}
 8004b62:	bf00      	nop
 8004b64:	3780      	adds	r7, #128	; 0x80
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20004d04 	.word	0x20004d04
 8004b70:	20004c1c 	.word	0x20004c1c

08004b74 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004b7c:	4812      	ldr	r0, [pc, #72]	; (8004bc8 <HAL_ETH_RxAllocateCallback+0x54>)
 8004b7e:	f002 f87b 	bl	8006c78 <memp_malloc_pool>
 8004b82:	60f8      	str	r0, [r7, #12]
  if (p)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d014      	beq.n	8004bb4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f103 0220 	add.w	r2, r3, #32
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4a0d      	ldr	r2, [pc, #52]	; (8004bcc <HAL_ETH_RxAllocateCallback+0x58>)
 8004b98:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004ba2:	9201      	str	r2, [sp, #4]
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2241      	movs	r2, #65	; 0x41
 8004baa:	2100      	movs	r1, #0
 8004bac:	2000      	movs	r0, #0
 8004bae:	f002 fdb1 	bl	8007714 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004bb2:	e005      	b.n	8004bc0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004bb4:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]
}
 8004bc0:	bf00      	nop
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	08014ab8 	.word	0x08014ab8
 8004bcc:	080047f1 	.word	0x080047f1
 8004bd0:	20004ad8 	.word	0x20004ad8

08004bd4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b089      	sub	sp, #36	; 0x24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	3b20      	subs	r3, #32
 8004bf2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	887a      	ldrh	r2, [r7, #2]
 8004c04:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d103      	bne.n	8004c16 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	69fa      	ldr	r2, [r7, #28]
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	e003      	b.n	8004c1e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	69fa      	ldr	r2, [r7, #28]
 8004c22:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	e009      	b.n	8004c40 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	891a      	ldrh	r2, [r3, #8]
 8004c30:	887b      	ldrh	r3, [r7, #2]
 8004c32:	4413      	add	r3, r2
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f2      	bne.n	8004c2c <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004c46:	bf00      	nop
 8004c48:	bf00      	nop
 8004c4a:	3724      	adds	r7, #36	; 0x24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <fs_open+0x16>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d102      	bne.n	8004c70 <fs_open+0x1c>
    return ERR_ARG;
 8004c6a:	f06f 030f 	mvn.w	r3, #15
 8004c6e:	e028      	b.n	8004cc2 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8004c70:	4b16      	ldr	r3, [pc, #88]	; (8004ccc <fs_open+0x78>)
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	e020      	b.n	8004cb8 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	6838      	ldr	r0, [r7, #0]
 8004c7e:	f7fb fab7 	bl	80001f0 <strcmp>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d114      	bne.n	8004cb2 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	7c1a      	ldrb	r2, [r3, #16]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e007      	b.n	8004cc2 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1db      	bne.n	8004c76 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8004cbe:	f06f 0305 	mvn.w	r3, #5
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	08014f38 	.word	0x08014f38

08004cd0 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	1ad3      	subs	r3, r2, r3
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b082      	sub	sp, #8
 8004d06:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8004d08:	20e8      	movs	r0, #232	; 0xe8
 8004d0a:	f001 fe47 	bl	800699c <mem_malloc>
 8004d0e:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d004      	beq.n	8004d20 <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8004d16:	22e8      	movs	r2, #232	; 0xe8
 8004d18:	2100      	movs	r1, #0
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f00b ffa8 	bl	8010c70 <memset>
  }
  return ret;
 8004d20:	687b      	ldr	r3, [r7, #4]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f001 fcc9 	bl	80066d0 <mem_free>
  }
}
 8004d3e:	bf00      	nop
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8004d4e:	22b0      	movs	r2, #176	; 0xb0
 8004d50:	2100      	movs	r1, #0
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f00b ff8c 	bl	8010c70 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8004d58:	bf00      	nop
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8004d66:	20b0      	movs	r0, #176	; 0xb0
 8004d68:	f001 fe18 	bl	800699c <mem_malloc>
 8004d6c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <http_state_alloc+0x1a>
    http_state_init(ret);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff ffe6 	bl	8004d46 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8004d7a:	687b      	ldr	r3, [r7, #4]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d007      	beq.n	8004da4 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff ff99 	bl	8004cd0 <fs_close>
    hs->handle = NULL;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d007      	beq.n	8004dbc <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff ffba 	bl	8004d2a <http_ssi_state_free>
    hs->ssi = NULL;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d007      	beq.n	8004dd4 <http_state_eof+0x50>
    pbuf_free(hs->req);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f002 fe5d 	bl	8007a88 <pbuf_free>
    hs->req = NULL;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8004dd4:	bf00      	nop
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d005      	beq.n	8004df6 <http_state_free+0x1a>
    http_state_eof(hs);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7ff ffca 	bl	8004d84 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f001 fc6d 	bl	80066d0 <mem_free>
  }
}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d106      	bne.n	8004e22 <http_write+0x22>
 8004e14:	4b2c      	ldr	r3, [pc, #176]	; (8004ec8 <http_write+0xc8>)
 8004e16:	f240 2219 	movw	r2, #537	; 0x219
 8004e1a:	492c      	ldr	r1, [pc, #176]	; (8004ecc <http_write+0xcc>)
 8004e1c:	482c      	ldr	r0, [pc, #176]	; (8004ed0 <http_write+0xd0>)
 8004e1e:	f00b ff2f 	bl	8010c80 <iprintf>
  len = *length;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8004e28:	8afb      	ldrh	r3, [r7, #22]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <http_write+0x32>
    return ERR_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	e045      	b.n	8004ebe <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004e38:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8004e3a:	8aba      	ldrh	r2, [r7, #20]
 8004e3c:	8afb      	ldrh	r3, [r7, #22]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d201      	bcs.n	8004e46 <http_write+0x46>
    len = max_len;
 8004e42:	8abb      	ldrh	r3, [r7, #20]
 8004e44:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8004e4e:	8afa      	ldrh	r2, [r7, #22]
 8004e50:	8abb      	ldrh	r3, [r7, #20]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d901      	bls.n	8004e5a <http_write+0x5a>
    len = max_len;
 8004e56:	8abb      	ldrh	r3, [r7, #20]
 8004e58:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8004e5a:	78fb      	ldrb	r3, [r7, #3]
 8004e5c:	8afa      	ldrh	r2, [r7, #22]
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f007 fb99 	bl	800c598 <tcp_write>
 8004e66:	4603      	mov	r3, r0
 8004e68:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8004e6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e72:	d10f      	bne.n	8004e94 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d004      	beq.n	8004e88 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d902      	bls.n	8004e8e <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	82fb      	strh	r3, [r7, #22]
 8004e8c:	e002      	b.n	8004e94 <http_write+0x94>
      } else {
        len /= 2;
 8004e8e:	8afb      	ldrh	r3, [r7, #22]
 8004e90:	085b      	lsrs	r3, r3, #1
 8004e92:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8004e94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d102      	bne.n	8004ea4 <http_write+0xa4>
 8004e9e:	8afb      	ldrh	r3, [r7, #22]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d8da      	bhi.n	8004e5a <http_write+0x5a>

  if (err == ERR_OK) {
 8004ea4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d103      	bne.n	8004eb4 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8afa      	ldrh	r2, [r7, #22]
 8004eb0:	801a      	strh	r2, [r3, #0]
 8004eb2:	e002      	b.n	8004eba <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8004eba:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	08011e70 	.word	0x08011e70
 8004ecc:	08011ea8 	.word	0x08011ea8
 8004ed0:	08011eb8 	.word	0x08011eb8

08004ed4 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f004 fc15 	bl	8009714 <tcp_arg>
  altcp_recv(pcb, NULL);
 8004eea:	2100      	movs	r1, #0
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f004 fc23 	bl	8009738 <tcp_recv>
  altcp_err(pcb, NULL);
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f004 fc63 	bl	80097c0 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8004efa:	2200      	movs	r2, #0
 8004efc:	2100      	movs	r1, #0
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f004 fc98 	bl	8009834 <tcp_poll>
  altcp_sent(pcb, NULL);
 8004f04:	2100      	movs	r1, #0
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f004 fc38 	bl	800977c <tcp_sent>
  if (hs != NULL) {
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8004f12:	68b8      	ldr	r0, [r7, #8]
 8004f14:	f7ff ff62 	bl	8004ddc <http_state_free>
  }

  if (abort_conn) {
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d004      	beq.n	8004f28 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f003 fb3a 	bl	8008598 <tcp_abort>
    return ERR_OK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	e00f      	b.n	8004f48 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f003 fa4b 	bl	80083c4 <tcp_close>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8004f32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d004      	beq.n	8004f44 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8004f3a:	2204      	movs	r2, #4
 8004f3c:	4904      	ldr	r1, [pc, #16]	; (8004f50 <http_close_or_abort_conn+0x7c>)
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f004 fc78 	bl	8009834 <tcp_poll>
  }
  return err;
 8004f44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	08005fcb 	.word	0x08005fcb

08004f54 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8004f5e:	2200      	movs	r2, #0
 8004f60:	6839      	ldr	r1, [r7, #0]
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff ffb6 	bl	8004ed4 <http_close_or_abort_conn>
 8004f68:	4603      	mov	r3, r0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8004f7c:	6839      	ldr	r1, [r7, #0]
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff ffe8 	bl	8004f54 <http_close_conn>
  }
}
 8004f84:	bf00      	nop
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <extract_uri_parameters+0x18>
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <extract_uri_parameters+0x1c>
    return (0);
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e04b      	b.n	8005040 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8004fac:	2300      	movs	r3, #0
 8004fae:	613b      	str	r3, [r7, #16]
 8004fb0:	e03f      	b.n	8005032 <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	320c      	adds	r2, #12
 8004fb8:	6979      	ldr	r1, [r7, #20]
 8004fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8004fc2:	2126      	movs	r1, #38	; 0x26
 8004fc4:	6978      	ldr	r0, [r7, #20]
 8004fc6:	f00b feb1 	bl	8010d2c <strchr>
 8004fca:	6178      	str	r0, [r7, #20]
    if (pair) {
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d006      	beq.n	8004fe0 <extract_uri_parameters+0x54>
      *pair = '\0';
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	701a      	strb	r2, [r3, #0]
      pair++;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	e00c      	b.n	8004ffa <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8004fe0:	2120      	movs	r1, #32
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f00b fea2 	bl	8010d2c <strchr>
 8004fe8:	6178      	str	r0, [r7, #20]
      if (pair) {
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <extract_uri_parameters+0x6a>
        *pair = '\0';
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8004ffa:	213d      	movs	r1, #61	; 0x3d
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f00b fe95 	bl	8010d2c <strchr>
 8005002:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <extract_uri_parameters+0x94>
      *equals = '\0';
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	1c59      	adds	r1, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	321c      	adds	r2, #28
 800501a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800501e:	e005      	b.n	800502c <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	321c      	adds	r2, #28
 8005026:	2100      	movs	r1, #0
 8005028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	3301      	adds	r3, #1
 8005030:	613b      	str	r3, [r7, #16]
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	2b0f      	cmp	r3, #15
 8005036:	dc02      	bgt.n	800503e <extract_uri_parameters+0xb2>
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1b9      	bne.n	8004fb2 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800503e:	693b      	ldr	r3, [r7, #16]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d106      	bne.n	8005064 <get_tag_insert+0x1c>
 8005056:	4b52      	ldr	r3, [pc, #328]	; (80051a0 <get_tag_insert+0x158>)
 8005058:	f44f 7241 	mov.w	r2, #772	; 0x304
 800505c:	4951      	ldr	r1, [pc, #324]	; (80051a4 <get_tag_insert+0x15c>)
 800505e:	4852      	ldr	r0, [pc, #328]	; (80051a8 <get_tag_insert+0x160>)
 8005060:	f00b fe0e 	bl	8010c80 <iprintf>
  ssi = hs->ssi;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d106      	bne.n	800507e <get_tag_insert+0x36>
 8005070:	4b4b      	ldr	r3, [pc, #300]	; (80051a0 <get_tag_insert+0x158>)
 8005072:	f240 3206 	movw	r2, #774	; 0x306
 8005076:	494d      	ldr	r1, [pc, #308]	; (80051ac <get_tag_insert+0x164>)
 8005078:	484b      	ldr	r0, [pc, #300]	; (80051a8 <get_tag_insert+0x160>)
 800507a:	f00b fe01 	bl	8010c80 <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 800507e:	4b4c      	ldr	r3, [pc, #304]	; (80051b0 <get_tag_insert+0x168>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d02e      	beq.n	80050e4 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 8005086:	4b4b      	ldr	r3, [pc, #300]	; (80051b4 <get_tag_insert+0x16c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d02a      	beq.n	80050e4 <get_tag_insert+0x9c>
 800508e:	4b4a      	ldr	r3, [pc, #296]	; (80051b8 <get_tag_insert+0x170>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d026      	beq.n	80050e4 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	e01e      	b.n	80050da <get_tag_insert+0x92>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f103 0012 	add.w	r0, r3, #18
 80050a2:	4b44      	ldr	r3, [pc, #272]	; (80051b4 <get_tag_insert+0x16c>)
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4619      	mov	r1, r3
 80050b0:	f7fb f89e 	bl	80001f0 <strcmp>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10c      	bne.n	80050d4 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 80050ba:	4b3d      	ldr	r3, [pc, #244]	; (80051b0 <get_tag_insert+0x168>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	f102 0123 	add.w	r1, r2, #35	; 0x23
 80050c4:	22c0      	movs	r2, #192	; 0xc0
 80050c6:	6978      	ldr	r0, [r7, #20]
 80050c8:	4798      	blx	r3
 80050ca:	4603      	mov	r3, r0
 80050cc:	461a      	mov	r2, r3
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	81da      	strh	r2, [r3, #14]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 80050d2:	e061      	b.n	8005198 <get_tag_insert+0x150>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	3301      	adds	r3, #1
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	4b37      	ldr	r3, [pc, #220]	; (80051b8 <get_tag_insert+0x170>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	dbdb      	blt.n	800509c <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	3312      	adds	r3, #18
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fb f88b 	bl	8000204 <strlen>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2ba6      	cmp	r3, #166	; 0xa6
 80050f2:	d818      	bhi.n	8005126 <get_tag_insert+0xde>
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	3312      	adds	r3, #18
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7fb f883 	bl	8000204 <strlen>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b11      	cmp	r3, #17
 8005102:	d810      	bhi.n	8005126 <get_tag_insert+0xde>
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	3312      	adds	r3, #18
 8005108:	4618      	mov	r0, r3
 800510a:	f7fb f87b 	bl	8000204 <strlen>
 800510e:	4603      	mov	r3, r0
 8005110:	2ba6      	cmp	r3, #166	; 0xa6
 8005112:	d806      	bhi.n	8005122 <get_tag_insert+0xda>
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	3312      	adds	r3, #18
 8005118:	4618      	mov	r0, r3
 800511a:	f7fb f873 	bl	8000204 <strlen>
 800511e:	4603      	mov	r3, r0
 8005120:	e002      	b.n	8005128 <get_tag_insert+0xe0>
 8005122:	23a7      	movs	r3, #167	; 0xa7
 8005124:	e000      	b.n	8005128 <get_tag_insert+0xe0>
 8005126:	2311      	movs	r3, #17
 8005128:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	3323      	adds	r3, #35	; 0x23
 800512e:	2212      	movs	r2, #18
 8005130:	4922      	ldr	r1, [pc, #136]	; (80051bc <get_tag_insert+0x174>)
 8005132:	4618      	mov	r0, r3
 8005134:	f00b fd8e 	bl	8010c54 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f103 0035 	add.w	r0, r3, #53	; 0x35
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	3312      	adds	r3, #18
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4619      	mov	r1, r3
 8005146:	f00b fd85 	bl	8010c54 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3312      	adds	r3, #18
 800514e:	3320      	adds	r3, #32
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	4413      	add	r3, r2
 8005154:	3303      	adds	r3, #3
 8005156:	2207      	movs	r2, #7
 8005158:	4919      	ldr	r1, [pc, #100]	; (80051c0 <get_tag_insert+0x178>)
 800515a:	4618      	mov	r0, r3
 800515c:	f00b fd7a 	bl	8010c54 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	3319      	adds	r3, #25
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4413      	add	r3, r2
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  len = strlen(ssi->tag_insert);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	3323      	adds	r3, #35	; 0x23
 8005172:	4618      	mov	r0, r3
 8005174:	f7fb f846 	bl	8000204 <strlen>
 8005178:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005180:	d306      	bcc.n	8005190 <get_tag_insert+0x148>
 8005182:	4b07      	ldr	r3, [pc, #28]	; (80051a0 <get_tag_insert+0x158>)
 8005184:	f240 323f 	movw	r2, #831	; 0x33f
 8005188:	490e      	ldr	r1, [pc, #56]	; (80051c4 <get_tag_insert+0x17c>)
 800518a:	4807      	ldr	r0, [pc, #28]	; (80051a8 <get_tag_insert+0x160>)
 800518c:	f00b fd78 	bl	8010c80 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	b29a      	uxth	r2, r3
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	81da      	strh	r2, [r3, #14]
}
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	08011e70 	.word	0x08011e70
 80051a4:	08011ee0 	.word	0x08011ee0
 80051a8:	08011eb8 	.word	0x08011eb8
 80051ac:	08011eec 	.word	0x08011eec
 80051b0:	20005164 	.word	0x20005164
 80051b4:	2000516c 	.word	0x2000516c
 80051b8:	20005168 	.word	0x20005168
 80051bc:	08011ef8 	.word	0x08011ef8
 80051c0:	08011f0c 	.word	0x08011f0c
 80051c4:	08011f14 	.word	0x08011f14

080051c8 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d105      	bne.n	80051e6 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 80051da:	6839      	ldr	r1, [r7, #0]
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff fec8 	bl	8004f72 <http_eof>
    return 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	e016      	b.n	8005214 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff fd7a 	bl	8004ce4 <fs_bytes_left>
 80051f0:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	dc05      	bgt.n	8005204 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80051f8:	6839      	ldr	r1, [r7, #0]
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7ff feb9 	bl	8004f72 <http_eof>
    return 0;
 8005200:	2300      	movs	r3, #0
 8005202:	e007      	b.n	8005214 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8005204:	4b05      	ldr	r3, [pc, #20]	; (800521c <http_check_eof+0x54>)
 8005206:	f240 429d 	movw	r2, #1181	; 0x49d
 800520a:	4905      	ldr	r1, [pc, #20]	; (8005220 <http_check_eof+0x58>)
 800520c:	4805      	ldr	r0, [pc, #20]	; (8005224 <http_check_eof+0x5c>)
 800520e:	f00b fd37 	bl	8010c80 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8005212:	2301      	movs	r3, #1
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	08011e70 	.word	0x08011e70
 8005220:	08011f24 	.word	0x08011f24
 8005224:	08011eb8 	.word	0x08011eb8

08005228 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8005232:	2300      	movs	r3, #0
 8005234:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800523e:	4293      	cmp	r3, r2
 8005240:	d803      	bhi.n	800524a <http_send_data_nonssi+0x22>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	b29b      	uxth	r3, r3
 8005248:	e001      	b.n	800524e <http_send_data_nonssi+0x26>
 800524a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800524e:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	6999      	ldr	r1, [r3, #24]
 8005254:	f107 020c 	add.w	r2, r7, #12
 8005258:	2300      	movs	r3, #0
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff fdd0 	bl	8004e00 <http_write>
 8005260:	4603      	mov	r3, r0
 8005262:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8005264:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10d      	bne.n	8005288 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800526c:	2301      	movs	r3, #1
 800526e:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	89ba      	ldrh	r2, [r7, #12]
 8005276:	441a      	add	r2, r3
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	89ba      	ldrh	r2, [r7, #12]
 8005282:	1a9a      	subs	r2, r3, r2
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8005288:	7bfb      	ldrb	r3, [r7, #15]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
	...

08005294 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 80052a2:	2300      	movs	r3, #0
 80052a4:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052aa:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <http_send_data_ssi+0x2c>
 80052b2:	4b87      	ldr	r3, [pc, #540]	; (80054d0 <http_send_data_ssi+0x23c>)
 80052b4:	f240 42cb 	movw	r2, #1227	; 0x4cb
 80052b8:	4986      	ldr	r1, [pc, #536]	; (80054d4 <http_send_data_ssi+0x240>)
 80052ba:	4887      	ldr	r0, [pc, #540]	; (80054d8 <http_send_data_ssi+0x244>)
 80052bc:	f00b fce0 	bl	8010c80 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80052c6:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	f240 826f 	bls.w	80057b4 <http_send_data_ssi+0x520>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80052e4:	4293      	cmp	r3, r2
 80052e6:	dc06      	bgt.n	80052f6 <http_send_data_ssi+0x62>
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	e001      	b.n	80052fa <http_send_data_ssi+0x66>
 80052f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052fa:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	6999      	ldr	r1, [r3, #24]
 8005300:	f107 020e 	add.w	r2, r7, #14
 8005304:	2300      	movs	r3, #0
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7ff fd7a 	bl	8004e00 <http_write>
 800530c:	4603      	mov	r3, r0
 800530e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8005310:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10d      	bne.n	8005334 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 8005318:	2301      	movs	r3, #1
 800531a:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	89fa      	ldrh	r2, [r7, #14]
 8005322:	441a      	add	r2, r3
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	89fa      	ldrh	r2, [r7, #14]
 800532e:	1a9a      	subs	r2, r3, r2
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800533a:	2b00      	cmp	r3, #0
 800533c:	f040 823a 	bne.w	80057b4 <http_send_data_ssi+0x520>
      return data_to_send;
 8005340:	7dbb      	ldrb	r3, [r7, #22]
 8005342:	e280      	b.n	8005846 <http_send_data_ssi+0x5b2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 8005344:	89fb      	ldrh	r3, [r7, #14]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <http_send_data_ssi+0xba>
      return data_to_send;
 800534a:	7dbb      	ldrb	r3, [r7, #22]
 800534c:	e27b      	b.n	8005846 <http_send_data_ssi+0x5b2>
    }
    switch (ssi->tag_state) {
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8005354:	2b04      	cmp	r3, #4
 8005356:	f200 822c 	bhi.w	80057b2 <http_send_data_ssi+0x51e>
 800535a:	a201      	add	r2, pc, #4	; (adr r2, 8005360 <http_send_data_ssi+0xcc>)
 800535c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005360:	08005375 	.word	0x08005375
 8005364:	080053c7 	.word	0x080053c7
 8005368:	08005439 	.word	0x08005439
 800536c:	08005581 	.word	0x08005581
 8005370:	080056c9 	.word	0x080056c9
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8005374:	2300      	movs	r3, #0
 8005376:	757b      	strb	r3, [r7, #21]
 8005378:	e017      	b.n	80053aa <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	781a      	ldrb	r2, [r3, #0]
 8005380:	7d7b      	ldrb	r3, [r7, #21]
 8005382:	4956      	ldr	r1, [pc, #344]	; (80054dc <http_send_data_ssi+0x248>)
 8005384:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d10a      	bne.n	80053a4 <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	7d7a      	ldrb	r2, [r7, #21]
 8005392:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
            ssi->tag_index = 1;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	2201      	movs	r2, #1
 80053a0:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 80053a2:	e005      	b.n	80053b0 <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 80053a4:	7d7b      	ldrb	r3, [r7, #21]
 80053a6:	3301      	adds	r3, #1
 80053a8:	757b      	strb	r3, [r7, #21]
 80053aa:	7d7b      	ldrb	r3, [r7, #21]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d9e4      	bls.n	800537a <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	1e5a      	subs	r2, r3, #1
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	601a      	str	r2, [r3, #0]
        break;
 80053c4:	e1f6      	b.n	80057b4 <http_send_data_ssi+0x520>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	7c1b      	ldrb	r3, [r3, #16]
 80053ca:	461a      	mov	r2, r3
 80053cc:	4b43      	ldr	r3, [pc, #268]	; (80054dc <http_send_data_ssi+0x248>)
 80053ce:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	8992      	ldrh	r2, [r2, #12]
 80053d6:	4413      	add	r3, r2
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d107      	bne.n	80053ee <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	2200      	movs	r2, #0
 80053e2:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 80053ec:	e1e2      	b.n	80057b4 <http_send_data_ssi+0x520>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	781a      	ldrb	r2, [r3, #0]
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	7c1b      	ldrb	r3, [r3, #16]
 80053f8:	4619      	mov	r1, r3
 80053fa:	4b38      	ldr	r3, [pc, #224]	; (80054dc <http_send_data_ssi+0x248>)
 80053fc:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 8005400:	6939      	ldr	r1, [r7, #16]
 8005402:	8989      	ldrh	r1, [r1, #12]
 8005404:	440b      	add	r3, r1
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d106      	bne.n	800541a <http_send_data_ssi+0x186>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	899b      	ldrh	r3, [r3, #12]
 8005410:	3301      	adds	r3, #1
 8005412:	b29a      	uxth	r2, r3
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	819a      	strh	r2, [r3, #12]
 8005418:	e003      	b.n	8005422 <http_send_data_ssi+0x18e>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	1e5a      	subs	r2, r3, #1
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	601a      	str	r2, [r3, #0]
        }
        break;
 8005436:	e1bd      	b.n	80057b4 <http_send_data_ssi+0x520>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	899b      	ldrh	r3, [r3, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d11e      	bne.n	800547e <http_send_data_ssi+0x1ea>
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	2b20      	cmp	r3, #32
 8005448:	d00e      	beq.n	8005468 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8005450:	2b09      	cmp	r3, #9
 8005452:	d009      	beq.n	8005468 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2b0a      	cmp	r3, #10
 800545c:	d004      	beq.n	8005468 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005464:	2b0d      	cmp	r3, #13
 8005466:	d10a      	bne.n	800547e <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	1e5a      	subs	r2, r3, #1
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	601a      	str	r2, [r3, #0]
          break;
 800547c:	e19a      	b.n	80057b4 <http_send_data_ssi+0x520>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	781a      	ldrb	r2, [r3, #0]
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	7c1b      	ldrb	r3, [r3, #16]
 8005488:	4914      	ldr	r1, [pc, #80]	; (80054dc <http_send_data_ssi+0x248>)
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	440b      	add	r3, r1
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d013      	beq.n	80054be <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800549c:	2b20      	cmp	r3, #32
 800549e:	d00e      	beq.n	80054be <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b09      	cmp	r3, #9
 80054a8:	d009      	beq.n	80054be <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80054b0:	2b0a      	cmp	r3, #10
 80054b2:	d004      	beq.n	80054be <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	2b0d      	cmp	r3, #13
 80054bc:	d13f      	bne.n	800553e <http_send_data_ssi+0x2aa>

          if (ssi->tag_index == 0) {
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	899b      	ldrh	r3, [r3, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10c      	bne.n	80054e0 <http_send_data_ssi+0x24c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
          if (ssi->tag_index == 0) {
 80054ce:	e04c      	b.n	800556a <http_send_data_ssi+0x2d6>
 80054d0:	08011e70 	.word	0x08011e70
 80054d4:	08011eec 	.word	0x08011eec
 80054d8:	08011eb8 	.word	0x08011eb8
 80054dc:	08014f88 	.word	0x08014f88
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	2203      	movs	r2, #3
 80054e4:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	899b      	ldrh	r3, [r3, #12]
 80054ec:	2bff      	cmp	r3, #255	; 0xff
 80054ee:	d906      	bls.n	80054fe <http_send_data_ssi+0x26a>
 80054f0:	4b93      	ldr	r3, [pc, #588]	; (8005740 <http_send_data_ssi+0x4ac>)
 80054f2:	f240 523a 	movw	r2, #1338	; 0x53a
 80054f6:	4993      	ldr	r1, [pc, #588]	; (8005744 <http_send_data_ssi+0x4b0>)
 80054f8:	4893      	ldr	r0, [pc, #588]	; (8005748 <http_send_data_ssi+0x4b4>)
 80054fa:	f00b fbc1 	bl	8010c80 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	899b      	ldrh	r3, [r3, #12]
 8005502:	b2da      	uxtb	r2, r3
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	899b      	ldrh	r3, [r3, #12]
 800550c:	461a      	mov	r2, r3
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	4413      	add	r3, r2
 8005512:	2200      	movs	r2, #0
 8005514:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	781a      	ldrb	r2, [r3, #0]
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	7c1b      	ldrb	r3, [r3, #16]
 8005520:	498a      	ldr	r1, [pc, #552]	; (800574c <http_send_data_ssi+0x4b8>)
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	440b      	add	r3, r1
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d103      	bne.n	8005536 <http_send_data_ssi+0x2a2>
              ssi->tag_index = 1;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	2201      	movs	r2, #1
 8005532:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 8005534:	e019      	b.n	800556a <http_send_data_ssi+0x2d6>
            } else {
              ssi->tag_index = 0;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	2200      	movs	r2, #0
 800553a:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 800553c:	e015      	b.n	800556a <http_send_data_ssi+0x2d6>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	899b      	ldrh	r3, [r3, #12]
 8005542:	2b0f      	cmp	r3, #15
 8005544:	d80d      	bhi.n	8005562 <http_send_data_ssi+0x2ce>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	899b      	ldrh	r3, [r3, #12]
 800554e:	1c59      	adds	r1, r3, #1
 8005550:	b288      	uxth	r0, r1
 8005552:	6939      	ldr	r1, [r7, #16]
 8005554:	8188      	strh	r0, [r1, #12]
 8005556:	4619      	mov	r1, r3
 8005558:	7812      	ldrb	r2, [r2, #0]
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	440b      	add	r3, r1
 800555e:	749a      	strb	r2, [r3, #18]
 8005560:	e003      	b.n	800556a <http_send_data_ssi+0x2d6>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	1e5a      	subs	r2, r3, #1
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	1c5a      	adds	r2, r3, #1
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	601a      	str	r2, [r3, #0]

        break;
 800557e:	e119      	b.n	80057b4 <http_send_data_ssi+0x520>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	899b      	ldrh	r3, [r3, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d11e      	bne.n	80055c6 <http_send_data_ssi+0x332>
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b20      	cmp	r3, #32
 8005590:	d00e      	beq.n	80055b0 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8005598:	2b09      	cmp	r3, #9
 800559a:	d009      	beq.n	80055b0 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b0a      	cmp	r3, #10
 80055a4:	d004      	beq.n	80055b0 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\r'))) {
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80055ac:	2b0d      	cmp	r3, #13
 80055ae:	d10a      	bne.n	80055c6 <http_send_data_ssi+0x332>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	1e5a      	subs	r2, r3, #1
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	1c5a      	adds	r2, r3, #1
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	601a      	str	r2, [r3, #0]
          break;
 80055c4:	e0f6      	b.n	80057b4 <http_send_data_ssi+0x520>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	781a      	ldrb	r2, [r3, #0]
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	7c1b      	ldrb	r3, [r3, #16]
 80055d0:	495e      	ldr	r1, [pc, #376]	; (800574c <http_send_data_ssi+0x4b8>)
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	440b      	add	r3, r1
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	6939      	ldr	r1, [r7, #16]
 80055da:	8989      	ldrh	r1, [r1, #12]
 80055dc:	440b      	add	r3, r1
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d162      	bne.n	80056aa <http_send_data_ssi+0x416>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	1e5a      	subs	r2, r3, #1
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	899b      	ldrh	r3, [r3, #12]
 80055fc:	3301      	adds	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	7c1b      	ldrb	r3, [r3, #16]
 8005608:	4a50      	ldr	r2, [pc, #320]	; (800574c <http_send_data_ssi+0x4b8>)
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	4413      	add	r3, r2
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	8992      	ldrh	r2, [r2, #12]
 8005614:	4413      	add	r3, r2
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	f040 80cb 	bne.w	80057b4 <http_send_data_ssi+0x520>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800561e:	6838      	ldr	r0, [r7, #0]
 8005620:	f7ff fd12 	bl	8005048 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	2200      	movs	r2, #0
 8005628:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	2204      	movs	r2, #4
 800562e:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
            ssi->tag_end = ssi->parsed;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	429a      	cmp	r2, r3
 8005644:	f240 80b6 	bls.w	80057b4 <http_send_data_ssi+0x520>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005656:	4293      	cmp	r3, r2
 8005658:	dc06      	bgt.n	8005668 <http_send_data_ssi+0x3d4>
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	b29b      	uxth	r3, r3
 8005666:	e001      	b.n	800566c <http_send_data_ssi+0x3d8>
 8005668:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800566c:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	6999      	ldr	r1, [r3, #24]
 8005672:	f107 020e 	add.w	r2, r7, #14
 8005676:	2300      	movs	r3, #0
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7ff fbc1 	bl	8004e00 <http_write>
 800567e:	4603      	mov	r3, r0
 8005680:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8005682:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005686:	2b00      	cmp	r3, #0
 8005688:	f040 8094 	bne.w	80057b4 <http_send_data_ssi+0x520>
                data_to_send = 1;
 800568c:	2301      	movs	r3, #1
 800568e:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	89fa      	ldrh	r2, [r7, #14]
 8005696:	441a      	add	r2, r3
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	89fa      	ldrh	r2, [r7, #14]
 80056a2:	1a9a      	subs	r2, r3, r2
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	625a      	str	r2, [r3, #36]	; 0x24
 80056a8:	e084      	b.n	80057b4 <http_send_data_ssi+0x520>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	1e5a      	subs	r2, r3, #1
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        }
        break;
 80056c6:	e075      	b.n	80057b4 <http_send_data_ssi+0x520>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d93d      	bls.n	8005750 <http_send_data_ssi+0x4bc>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80056e2:	4293      	cmp	r3, r2
 80056e4:	dc06      	bgt.n	80056f4 <http_send_data_ssi+0x460>
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	e001      	b.n	80056f8 <http_send_data_ssi+0x464>
 80056f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056f8:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 80056fa:	89fb      	ldrh	r3, [r7, #14]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <http_send_data_ssi+0x482>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	6999      	ldr	r1, [r3, #24]
 8005704:	f107 020e 	add.w	r2, r7, #14
 8005708:	2300      	movs	r3, #0
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff fb78 	bl	8004e00 <http_write>
 8005710:	4603      	mov	r3, r0
 8005712:	75fb      	strb	r3, [r7, #23]
 8005714:	e001      	b.n	800571a <http_send_data_ssi+0x486>
          } else {
            err = ERR_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800571a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d148      	bne.n	80057b4 <http_send_data_ssi+0x520>
            data_to_send = 1;
 8005722:	2301      	movs	r3, #1
 8005724:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	89fa      	ldrh	r2, [r7, #14]
 800572c:	441a      	add	r2, r3
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005736:	89fa      	ldrh	r2, [r7, #14]
 8005738:	1a9a      	subs	r2, r3, r2
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	625a      	str	r2, [r3, #36]	; 0x24
 800573e:	e039      	b.n	80057b4 <http_send_data_ssi+0x520>
 8005740:	08011e70 	.word	0x08011e70
 8005744:	08011f5c 	.word	0x08011f5c
 8005748:	08011eb8 	.word	0x08011eb8
 800574c:	08014f88 	.word	0x08014f88
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	899a      	ldrh	r2, [r3, #12]
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	89db      	ldrh	r3, [r3, #14]
 8005758:	429a      	cmp	r2, r3
 800575a:	d222      	bcs.n	80057a2 <http_send_data_ssi+0x50e>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	89da      	ldrh	r2, [r3, #14]
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	899b      	ldrh	r3, [r3, #12]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	b29b      	uxth	r3, r3
 8005768:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	899b      	ldrh	r3, [r3, #12]
 800576e:	3320      	adds	r3, #32
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	4413      	add	r3, r2
 8005774:	1cd9      	adds	r1, r3, #3
 8005776:	f107 020e 	add.w	r2, r7, #14
 800577a:	2301      	movs	r3, #1
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7ff fb3f 	bl	8004e00 <http_write>
 8005782:	4603      	mov	r3, r0
 8005784:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8005786:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d112      	bne.n	80057b4 <http_send_data_ssi+0x520>
              data_to_send = 1;
 800578e:	2301      	movs	r3, #1
 8005790:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	899a      	ldrh	r2, [r3, #12]
 8005796:	89fb      	ldrh	r3, [r7, #14]
 8005798:	4413      	add	r3, r2
 800579a:	b29a      	uxth	r2, r3
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	819a      	strh	r2, [r3, #12]
 80057a0:	e008      	b.n	80057b4 <http_send_data_ssi+0x520>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	2200      	movs	r2, #0
 80057a6:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 80057b0:	e000      	b.n	80057b4 <http_send_data_ssi+0x520>
        default:
          break;
 80057b2:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d003      	beq.n	80057c6 <http_send_data_ssi+0x532>
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d004      	beq.n	80057d0 <http_send_data_ssi+0x53c>
 80057c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f43f adba 	beq.w	8005344 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d034      	beq.n	8005844 <http_send_data_ssi+0x5b0>
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d92e      	bls.n	8005844 <http_send_data_ssi+0x5b0>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80057f4:	4293      	cmp	r3, r2
 80057f6:	dc06      	bgt.n	8005806 <http_send_data_ssi+0x572>
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	b29b      	uxth	r3, r3
 8005804:	e001      	b.n	800580a <http_send_data_ssi+0x576>
 8005806:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800580a:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	6999      	ldr	r1, [r3, #24]
 8005810:	f107 020e 	add.w	r2, r7, #14
 8005814:	2300      	movs	r3, #0
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7ff faf2 	bl	8004e00 <http_write>
 800581c:	4603      	mov	r3, r0
 800581e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8005820:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10d      	bne.n	8005844 <http_send_data_ssi+0x5b0>
      data_to_send = 1;
 8005828:	2301      	movs	r3, #1
 800582a:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	89fa      	ldrh	r2, [r7, #14]
 8005832:	441a      	add	r2, r3
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	89fa      	ldrh	r2, [r7, #14]
 800583e:	1a9a      	subs	r2, r3, r2
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 8005844:	7dbb      	ldrb	r3, [r7, #22]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop

08005850 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800585a:	2300      	movs	r3, #0
 800585c:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <http_send+0x18>
    return 0;
 8005864:	2300      	movs	r3, #0
 8005866:	e030      	b.n	80058ca <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	2b00      	cmp	r3, #0
 800586e:	d108      	bne.n	8005882 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8005870:	6839      	ldr	r1, [r7, #0]
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff fca8 	bl	80051c8 <http_check_eof>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <http_send+0x32>
      return 0;
 800587e:	2300      	movs	r3, #0
 8005880:	e023      	b.n	80058ca <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d006      	beq.n	8005898 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 800588a:	6839      	ldr	r1, [r7, #0]
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff fd01 	bl	8005294 <http_send_data_ssi>
 8005892:	4603      	mov	r3, r0
 8005894:	73fb      	strb	r3, [r7, #15]
 8005896:	e005      	b.n	80058a4 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8005898:	6839      	ldr	r1, [r7, #0]
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7ff fcc4 	bl	8005228 <http_send_data_nonssi>
 80058a0:	4603      	mov	r3, r0
 80058a2:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10d      	bne.n	80058c8 <http_send+0x78>
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff fa17 	bl	8004ce4 <fs_bytes_left>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	dc05      	bgt.n	80058c8 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7ff fb57 	bl	8004f72 <http_eof>
    return 0;
 80058c4:	2300      	movs	r3, #0
 80058c6:	e000      	b.n	80058ca <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
	...

080058d4 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	4a1c      	ldr	r2, [pc, #112]	; (8005954 <http_get_404_file+0x80>)
 80058e2:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4619      	mov	r1, r3
 80058ec:	4610      	mov	r0, r2
 80058ee:	f7ff f9b1 	bl	8004c54 <fs_open>
 80058f2:	4603      	mov	r3, r0
 80058f4:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80058f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d024      	beq.n	8005948 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	4a15      	ldr	r2, [pc, #84]	; (8005958 <http_get_404_file+0x84>)
 8005902:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4619      	mov	r1, r3
 800590c:	4610      	mov	r0, r2
 800590e:	f7ff f9a1 	bl	8004c54 <fs_open>
 8005912:	4603      	mov	r3, r0
 8005914:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8005916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d014      	beq.n	8005948 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	4a0e      	ldr	r2, [pc, #56]	; (800595c <http_get_404_file+0x88>)
 8005922:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4619      	mov	r1, r3
 800592c:	4610      	mov	r0, r2
 800592e:	f7ff f991 	bl	8004c54 <fs_open>
 8005932:	4603      	mov	r3, r0
 8005934:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8005936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d004      	beq.n	8005948 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2200      	movs	r2, #0
 8005942:	601a      	str	r2, [r3, #0]
        return NULL;
 8005944:	2300      	movs	r3, #0
 8005946:	e000      	b.n	800594a <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8005948:	687b      	ldr	r3, [r7, #4]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	08011f74 	.word	0x08011f74
 8005958:	08011f80 	.word	0x08011f80
 800595c:	08011f8c 	.word	0x08011f8c

08005960 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b08e      	sub	sp, #56	; 0x38
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <http_parse_request+0x24>
 8005976:	4b65      	ldr	r3, [pc, #404]	; (8005b0c <http_parse_request+0x1ac>)
 8005978:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800597c:	4964      	ldr	r1, [pc, #400]	; (8005b10 <http_parse_request+0x1b0>)
 800597e:	4865      	ldr	r0, [pc, #404]	; (8005b14 <http_parse_request+0x1b4>)
 8005980:	f00b f97e 	bl	8010c80 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d106      	bne.n	8005998 <http_parse_request+0x38>
 800598a:	4b60      	ldr	r3, [pc, #384]	; (8005b0c <http_parse_request+0x1ac>)
 800598c:	f240 72af 	movw	r2, #1967	; 0x7af
 8005990:	4961      	ldr	r1, [pc, #388]	; (8005b18 <http_parse_request+0x1b8>)
 8005992:	4860      	ldr	r0, [pc, #384]	; (8005b14 <http_parse_request+0x1b4>)
 8005994:	f00b f974 	bl	8010c80 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d103      	bne.n	80059a8 <http_parse_request+0x48>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 80059a8:	f06f 0307 	mvn.w	r3, #7
 80059ac:	e0a9      	b.n	8005b02 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d103      	bne.n	80059be <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ba:	621a      	str	r2, [r3, #32]
 80059bc:	e005      	b.n	80059ca <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059c4:	4618      	mov	r0, r3
 80059c6:	f002 f921 	bl	8007c0c <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 80059ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059cc:	f002 f8fc 	bl	8007bc8 <pbuf_ref>

  if (hs->req->next != NULL) {
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d012      	beq.n	8005a00 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	891b      	ldrh	r3, [r3, #8]
 80059e0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80059e4:	4293      	cmp	r3, r2
 80059e6:	bf28      	it	cs
 80059e8:	4613      	movcs	r3, r2
 80059ea:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	6a18      	ldr	r0, [r3, #32]
 80059f0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80059f2:	2300      	movs	r3, #0
 80059f4:	4949      	ldr	r1, [pc, #292]	; (8005b1c <http_parse_request+0x1bc>)
 80059f6:	f002 fa31 	bl	8007e5c <pbuf_copy_partial>
    data = httpd_req_buf;
 80059fa:	4b48      	ldr	r3, [pc, #288]	; (8005b1c <http_parse_request+0x1bc>)
 80059fc:	637b      	str	r3, [r7, #52]	; 0x34
 80059fe:	e005      	b.n	8005a0c <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	895b      	ldrh	r3, [r3, #10]
 8005a0a:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8005a0c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005a0e:	2b06      	cmp	r3, #6
 8005a10:	d962      	bls.n	8005ad8 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8005a12:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005a14:	461a      	mov	r2, r3
 8005a16:	4942      	ldr	r1, [pc, #264]	; (8005b20 <http_parse_request+0x1c0>)
 8005a18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a1a:	f000 fc9b 	bl	8006354 <lwip_strnstr>
 8005a1e:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d058      	beq.n	8005ad8 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8005a26:	2300      	movs	r3, #0
 8005a28:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8005a2a:	2204      	movs	r2, #4
 8005a2c:	493d      	ldr	r1, [pc, #244]	; (8005b24 <http_parse_request+0x1c4>)
 8005a2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a30:	f00b f989 	bl	8010d46 <strncmp>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d116      	bne.n	8005a68 <http_parse_request+0x108>
        sp1 = data + 3;
 8005a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3c:	3303      	adds	r3, #3
 8005a3e:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	1c5a      	adds	r2, r3, #1
 8005a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	3301      	adds	r3, #1
 8005a54:	8b7a      	ldrh	r2, [r7, #26]
 8005a56:	4934      	ldr	r1, [pc, #208]	; (8005b28 <http_parse_request+0x1c8>)
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fc7b 	bl	8006354 <lwip_strnstr>
 8005a5e:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d111      	bne.n	8005a8a <http_parse_request+0x12a>
 8005a66:	e006      	b.n	8005a76 <http_parse_request+0x116>
        data[4] = 0;
 8005a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8005a70:	f06f 030f 	mvn.w	r3, #15
 8005a74:	e045      	b.n	8005b02 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	8b7a      	ldrh	r2, [r7, #26]
 8005a7c:	4928      	ldr	r1, [pc, #160]	; (8005b20 <http_parse_request+0x1c0>)
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fc68 	bl	8006354 <lwip_strnstr>
 8005a84:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8005a86:	2301      	movs	r3, #1
 8005a88:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8005a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d01e      	beq.n	8005ad8 <http_parse_request+0x178>
 8005a9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d91a      	bls.n	8005ad8 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8005aa2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	4921      	ldr	r1, [pc, #132]	; (8005b2c <http_parse_request+0x1cc>)
 8005aa8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005aaa:	f000 fc53 	bl	8006354 <lwip_strnstr>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d011      	beq.n	8005ad8 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	2200      	movs	r2, #0
 8005abe:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8005ac0:	8b3b      	ldrh	r3, [r7, #24]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8005aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005acc:	6979      	ldr	r1, [r7, #20]
 8005ace:	68b8      	ldr	r0, [r7, #8]
 8005ad0:	f000 f880 	bl	8005bd4 <http_find_file>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	e014      	b.n	8005b02 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f002 f85b 	bl	8007b98 <pbuf_clen>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	891b      	ldrh	r3, [r3, #8]
 8005aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af0:	d205      	bcs.n	8005afe <http_parse_request+0x19e>
 8005af2:	8a7b      	ldrh	r3, [r7, #18]
 8005af4:	2b05      	cmp	r3, #5
 8005af6:	d802      	bhi.n	8005afe <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8005af8:	f06f 0304 	mvn.w	r3, #4
 8005afc:	e001      	b.n	8005b02 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8005afe:	f06f 030f 	mvn.w	r3, #15
  }
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3738      	adds	r7, #56	; 0x38
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	08011e70 	.word	0x08011e70
 8005b10:	08011f98 	.word	0x08011f98
 8005b14:	08011eb8 	.word	0x08011eb8
 8005b18:	08011ee0 	.word	0x08011ee0
 8005b1c:	20004d24 	.word	0x20004d24
 8005b20:	08011fa4 	.word	0x08011fa4
 8005b24:	08011fa8 	.word	0x08011fa8
 8005b28:	08011fb0 	.word	0x08011fb0
 8005b2c:	08011fb4 	.word	0x08011fb4

08005b30 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d040      	beq.n	8005bc6 <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 8005b44:	2300      	movs	r3, #0
 8005b46:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 8005b48:	213f      	movs	r1, #63	; 0x3f
 8005b4a:	6838      	ldr	r0, [r7, #0]
 8005b4c:	f00b f8ee 	bl	8010d2c <strchr>
 8005b50:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	613b      	str	r3, [r7, #16]
    ext = uri;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8005b66:	212e      	movs	r1, #46	; 0x2e
 8005b68:	6938      	ldr	r0, [r7, #16]
 8005b6a:	f00b f8df 	bl	8010d2c <strchr>
 8005b6e:	6138      	str	r0, [r7, #16]
 8005b70:	e009      	b.n	8005b86 <http_uri_is_ssi+0x56>
      ext = sub;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	617b      	str	r3, [r7, #20]
      sub++;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8005b7c:	212e      	movs	r1, #46	; 0x2e
 8005b7e:	6938      	ldr	r0, [r7, #16]
 8005b80:	f00b f8d4 	bl	8010d2c <strchr>
 8005b84:	6138      	str	r0, [r7, #16]
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1f2      	bne.n	8005b72 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	61fb      	str	r3, [r7, #28]
 8005b90:	e010      	b.n	8005bb4 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8005b92:	4a0f      	ldr	r2, [pc, #60]	; (8005bd0 <http_uri_is_ssi+0xa0>)
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	6978      	ldr	r0, [r7, #20]
 8005b9e:	f000 fc0f 	bl	80063c0 <lwip_stricmp>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d102      	bne.n	8005bae <http_uri_is_ssi+0x7e>
        tag_check = 1;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	76fb      	strb	r3, [r7, #27]
        break;
 8005bac:	e005      	b.n	8005bba <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	61fb      	str	r3, [r7, #28]
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d9eb      	bls.n	8005b92 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <http_uri_is_ssi+0x96>
      *param = '?';
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	223f      	movs	r2, #63	; 0x3f
 8005bc4:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 8005bc6:	7efb      	ldrb	r3, [r7, #27]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3720      	adds	r7, #32
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	08014f4c 	.word	0x08014f4c

08005bd4 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8005bd4:	b590      	push	{r4, r7, lr}
 8005bd6:	b093      	sub	sp, #76	; 0x4c
 8005bd8:	af02      	add	r7, sp, #8
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8005be0:	2300      	movs	r3, #0
 8005be2:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8005be4:	2300      	movs	r3, #0
 8005be6:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7fa fb07 	bl	8000204 <strlen>
 8005bf6:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d072      	beq.n	8005ce4 <http_find_file+0x110>
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	3b01      	subs	r3, #1
 8005c04:	4413      	add	r3, r2
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b2f      	cmp	r3, #47	; 0x2f
 8005c0a:	d16b      	bne.n	8005ce4 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8005c0c:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8005c0e:	4a80      	ldr	r2, [pc, #512]	; (8005e10 <http_find_file+0x23c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d102      	bne.n	8005c1a <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d164      	bne.n	8005ce4 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	2b3f      	cmp	r3, #63	; 0x3f
 8005c20:	bf28      	it	cs
 8005c22:	233f      	movcs	r3, #63	; 0x3f
 8005c24:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00a      	beq.n	8005c42 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	6a3a      	ldr	r2, [r7, #32]
 8005c30:	4619      	mov	r1, r3
 8005c32:	4877      	ldr	r0, [pc, #476]	; (8005e10 <http_find_file+0x23c>)
 8005c34:	f00b f80e 	bl	8010c54 <memcpy>
      http_uri_buf[copy_len] = 0;
 8005c38:	4a75      	ldr	r2, [pc, #468]	; (8005e10 <http_find_file+0x23c>)
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	2200      	movs	r2, #0
 8005c40:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8005c42:	2300      	movs	r3, #0
 8005c44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c46:	e04a      	b.n	8005cde <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d028      	beq.n	8005ca0 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8005c54:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d01e      	beq.n	8005c9a <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8005c5c:	4a6d      	ldr	r2, [pc, #436]	; (8005e14 <http_find_file+0x240>)
 8005c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fa facd 	bl	8000204 <strlen>
 8005c6a:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	4293      	cmp	r3, r2
 8005c72:	bf28      	it	cs
 8005c74:	4613      	movcs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	4a65      	ldr	r2, [pc, #404]	; (8005e10 <http_find_file+0x23c>)
 8005c7c:	1898      	adds	r0, r3, r2
 8005c7e:	4a65      	ldr	r2, [pc, #404]	; (8005e14 <http_find_file+0x240>)
 8005c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c82:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	4619      	mov	r1, r3
 8005c8a:	f00a ffe3 	bl	8010c54 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8005c8e:	6a3a      	ldr	r2, [r7, #32]
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	4413      	add	r3, r2
 8005c94:	4a5e      	ldr	r2, [pc, #376]	; (8005e10 <http_find_file+0x23c>)
 8005c96:	2100      	movs	r1, #0
 8005c98:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8005c9a:	4b5d      	ldr	r3, [pc, #372]	; (8005e10 <http_find_file+0x23c>)
 8005c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c9e:	e004      	b.n	8005caa <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8005ca0:	4a5c      	ldr	r2, [pc, #368]	; (8005e14 <http_find_file+0x240>)
 8005ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005ca8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fe ffd0 	bl	8004c54 <fs_open>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 8005cb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10b      	bne.n	8005cd8 <http_find_file+0x104>
        uri = file_name;
 8005cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc2:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 8005cc8:	4a52      	ldr	r2, [pc, #328]	; (8005e14 <http_find_file+0x240>)
 8005cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	4413      	add	r3, r2
 8005cd0:	791b      	ldrb	r3, [r3, #4]
 8005cd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 8005cd6:	e005      	b.n	8005ce4 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8005cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cda:	3301      	adds	r3, #1
 8005cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d9b1      	bls.n	8005c48 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d176      	bne.n	8005dd8 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	213f      	movs	r1, #63	; 0x3f
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f00b f81c 	bl	8010d2c <strchr>
 8005cf4:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8005cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d005      	beq.n	8005d08 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8005cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cfe:	2200      	movs	r2, #0
 8005d00:	701a      	strb	r2, [r3, #0]
      params++;
 8005d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d04:	3301      	adds	r3, #1
 8005d06:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8005d08:	4b43      	ldr	r3, [pc, #268]	; (8005e18 <http_find_file+0x244>)
 8005d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d0e:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 8005d10:	4b42      	ldr	r3, [pc, #264]	; (8005e1c <http_find_file+0x248>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d034      	beq.n	8005d82 <http_find_file+0x1ae>
 8005d18:	4b41      	ldr	r3, [pc, #260]	; (8005e20 <http_find_file+0x24c>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d030      	beq.n	8005d82 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8005d20:	2300      	movs	r3, #0
 8005d22:	633b      	str	r3, [r7, #48]	; 0x30
 8005d24:	e028      	b.n	8005d78 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8005d26:	68b8      	ldr	r0, [r7, #8]
 8005d28:	4b3d      	ldr	r3, [pc, #244]	; (8005e20 <http_find_file+0x24c>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	4413      	add	r3, r2
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4619      	mov	r1, r3
 8005d36:	f7fa fa5b 	bl	80001f0 <strcmp>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d118      	bne.n	8005d72 <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 8005d40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f7ff f922 	bl	8004f8c <extract_uri_parameters>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	4a33      	ldr	r2, [pc, #204]	; (8005e18 <http_find_file+0x244>)
 8005d4c:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8005d4e:	4b34      	ldr	r3, [pc, #208]	; (8005e20 <http_find_file+0x24c>)
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	4413      	add	r3, r2
 8005d58:	685c      	ldr	r4, [r3, #4]
 8005d5a:	4b2f      	ldr	r3, [pc, #188]	; (8005e18 <http_find_file+0x244>)
 8005d5c:	6819      	ldr	r1, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8005d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d6a:	47a0      	blx	r4
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	60bb      	str	r3, [r7, #8]
          break;
 8005d70:	e007      	b.n	8005d82 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	3301      	adds	r3, #1
 8005d76:	633b      	str	r3, [r7, #48]	; 0x30
 8005d78:	4b28      	ldr	r3, [pc, #160]	; (8005e1c <http_find_file+0x248>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	dbd1      	blt.n	8005d26 <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	4611      	mov	r1, r2
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7fe ff63 	bl	8004c54 <fs_open>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 8005d92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d102      	bne.n	8005da0 <http_find_file+0x1cc>
      file = &hs->file_handle;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d9e:	e006      	b.n	8005dae <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 8005da0:	f107 0308 	add.w	r3, r7, #8
 8005da4:	4619      	mov	r1, r3
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f7ff fd94 	bl	80058d4 <http_get_404_file>
 8005dac:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 8005dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d011      	beq.n	8005dd8 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8005db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db6:	7c1b      	ldrb	r3, [r3, #16]
 8005db8:	f003 0308 	and.w	r3, r3, #8
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <http_find_file+0x1f4>
        tag_check = 1;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005dc6:	e007      	b.n	8005dd8 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005dce:	f7ff feaf 	bl	8005b30 <http_uri_is_ssi>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d106      	bne.n	8005dec <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8005dde:	f107 0308 	add.w	r3, r7, #8
 8005de2:	4619      	mov	r1, r3
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f7ff fd75 	bl	80058d4 <http_get_404_file>
 8005dea:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df0:	9301      	str	r3, [sp, #4]
 8005df2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 f810 	bl	8005e24 <http_init_file>
 8005e04:	4603      	mov	r3, r0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3744      	adds	r7, #68	; 0x44
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd90      	pop	{r4, r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20005124 	.word	0x20005124
 8005e14:	08014f60 	.word	0x08014f60
 8005e18:	20005178 	.word	0x20005178
 8005e1c:	20005174 	.word	0x20005174
 8005e20:	20005170 	.word	0x20005170

08005e24 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b088      	sub	sp, #32
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
 8005e30:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d07d      	beq.n	8005f34 <http_init_file+0x110>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d106      	bne.n	8005e4e <http_init_file+0x2a>
 8005e40:	4b45      	ldr	r3, [pc, #276]	; (8005f58 <http_init_file+0x134>)
 8005e42:	f640 120b 	movw	r2, #2315	; 0x90b
 8005e46:	4945      	ldr	r1, [pc, #276]	; (8005f5c <http_init_file+0x138>)
 8005e48:	4845      	ldr	r0, [pc, #276]	; (8005f60 <http_init_file+0x13c>)
 8005e4a:	f00a ff19 	bl	8010c80 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 8005e4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d01c      	beq.n	8005e90 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 8005e56:	f7fe ff54 	bl	8004d02 <http_ssi_state_alloc>
 8005e5a:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d016      	beq.n	8005e90 <http_init_file+0x6c>
        ssi->tag_index = 0;
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	2200      	movs	r2, #0
 8005e66:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        ssi->parsed = file->data;
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	69fa      	ldr	r2, [r7, #28]
 8005e8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	da06      	bge.n	8005eb4 <http_init_file+0x90>
 8005ea6:	4b2c      	ldr	r3, [pc, #176]	; (8005f58 <http_init_file+0x134>)
 8005ea8:	f640 1234 	movw	r2, #2356	; 0x934
 8005eac:	492d      	ldr	r1, [pc, #180]	; (8005f64 <http_init_file+0x140>)
 8005eae:	482c      	ldr	r0, [pc, #176]	; (8005f60 <http_init_file+0x13c>)
 8005eb0:	f00a fee6 	bl	8010c80 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	7c1b      	ldrb	r3, [r3, #16]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d106      	bne.n	8005ee2 <http_init_file+0xbe>
 8005ed4:	4b20      	ldr	r3, [pc, #128]	; (8005f58 <http_init_file+0x134>)
 8005ed6:	f640 1243 	movw	r2, #2371	; 0x943
 8005eda:	4923      	ldr	r1, [pc, #140]	; (8005f68 <http_init_file+0x144>)
 8005edc:	4820      	ldr	r0, [pc, #128]	; (8005f60 <http_init_file+0x13c>)
 8005ede:	f00a fecf 	bl	8010c80 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d032      	beq.n	8005f4e <http_init_file+0x12a>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	7c1b      	ldrb	r3, [r3, #16]
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d02b      	beq.n	8005f4e <http_init_file+0x12a>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6998      	ldr	r0, [r3, #24]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efe:	461a      	mov	r2, r3
 8005f00:	491a      	ldr	r1, [pc, #104]	; (8005f6c <http_init_file+0x148>)
 8005f02:	f000 fa27 	bl	8006354 <lwip_strnstr>
 8005f06:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d01f      	beq.n	8005f4e <http_init_file+0x12a>
        int diff = file_start + 4 - hs->file;
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	1d1a      	adds	r2, r3, #4
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	699a      	ldr	r2, [r3, #24]
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	441a      	add	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	1ad2      	subs	r2, r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	625a      	str	r2, [r3, #36]	; 0x24
 8005f32:	e00c      	b.n	8005f4e <http_init_file+0x12a>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3720      	adds	r7, #32
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	08011e70 	.word	0x08011e70
 8005f5c:	08011fbc 	.word	0x08011fbc
 8005f60:	08011eb8 	.word	0x08011eb8
 8005f64:	08011fd0 	.word	0x08011fd0
 8005f68:	08011ff0 	.word	0x08011ff0
 8005f6c:	08011fb4 	.word	0x08011fb4

08005f70 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <http_err+0x1c>
    http_state_free(hs);
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f7fe ff28 	bl	8004ddc <http_state_free>
  }
}
 8005f8c:	bf00      	nop
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <http_sent+0x1c>
    return ERR_OK;
 8005fac:	2300      	movs	r3, #0
 8005fae:	e008      	b.n	8005fc2 <http_sent+0x2e>
  }

  hs->retries = 0;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8005fb8:	6979      	ldr	r1, [r7, #20]
 8005fba:	68b8      	ldr	r0, [r7, #8]
 8005fbc:	f7ff fc48 	bl	8005850 <http_send>

  return ERR_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d107      	bne.n	8005fee <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8005fde:	2100      	movs	r1, #0
 8005fe0:	6838      	ldr	r0, [r7, #0]
 8005fe2:	f7fe ffb7 	bl	8004f54 <http_close_conn>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	e021      	b.n	8006032 <http_poll+0x68>
  } else {
    hs->retries++;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006004:	2b04      	cmp	r3, #4
 8006006:	d105      	bne.n	8006014 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8006008:	68f9      	ldr	r1, [r7, #12]
 800600a:	6838      	ldr	r0, [r7, #0]
 800600c:	f7fe ffa2 	bl	8004f54 <http_close_conn>
      return ERR_OK;
 8006010:	2300      	movs	r3, #0
 8006012:	e00e      	b.n	8006032 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d009      	beq.n	8006030 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800601c:	68f9      	ldr	r1, [r7, #12]
 800601e:	6838      	ldr	r0, [r7, #0]
 8006020:	f7ff fc16 	bl	8005850 <http_send>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800602a:	6838      	ldr	r0, [r7, #0]
 800602c:	f007 f89e 	bl	800d16c <tcp_output>
      }
    }
  }

  return ERR_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800604e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d105      	bne.n	8006062 <http_recv+0x26>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <http_recv+0x26>
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d111      	bne.n	8006086 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d008      	beq.n	800607a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	891b      	ldrh	r3, [r3, #8]
 800606c:	4619      	mov	r1, r3
 800606e:	68b8      	ldr	r0, [r7, #8]
 8006070:	f002 fc6c 	bl	800894c <tcp_recved>
      pbuf_free(p);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f001 fd07 	bl	8007a88 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800607a:	6979      	ldr	r1, [r7, #20]
 800607c:	68b8      	ldr	r0, [r7, #8]
 800607e:	f7fe ff69 	bl	8004f54 <http_close_conn>
    return ERR_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	e055      	b.n	8006132 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	891b      	ldrh	r3, [r3, #8]
 800608a:	4619      	mov	r1, r3
 800608c:	68b8      	ldr	r0, [r7, #8]
 800608e:	f002 fc5d 	bl	800894c <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d147      	bne.n	800612a <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	6979      	ldr	r1, [r7, #20]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7ff fc5e 	bl	8005960 <http_parse_request>
 80060a4:	4603      	mov	r3, r0
 80060a6:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 80060a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d015      	beq.n	80060dc <http_recv+0xa0>
 80060b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80060b4:	f113 0f05 	cmn.w	r3, #5
 80060b8:	d010      	beq.n	80060dc <http_recv+0xa0>
 80060ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80060be:	f113 0f10 	cmn.w	r3, #16
 80060c2:	d00b      	beq.n	80060dc <http_recv+0xa0>
 80060c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80060c8:	f113 0f08 	cmn.w	r3, #8
 80060cc:	d006      	beq.n	80060dc <http_recv+0xa0>
 80060ce:	4b1b      	ldr	r3, [pc, #108]	; (800613c <http_recv+0x100>)
 80060d0:	f640 2204 	movw	r2, #2564	; 0xa04
 80060d4:	491a      	ldr	r1, [pc, #104]	; (8006140 <http_recv+0x104>)
 80060d6:	481b      	ldr	r0, [pc, #108]	; (8006144 <http_recv+0x108>)
 80060d8:	f00a fdd2 	bl	8010c80 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 80060dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80060e0:	f113 0f05 	cmn.w	r3, #5
 80060e4:	d00b      	beq.n	80060fe <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d007      	beq.n	80060fe <http_recv+0xc2>
          pbuf_free(hs->req);
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f001 fcc8 	bl	8007a88 <pbuf_free>
          hs->req = NULL;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2200      	movs	r2, #0
 80060fc:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f001 fcc2 	bl	8007a88 <pbuf_free>
      if (parsed == ERR_OK) {
 8006104:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d104      	bne.n	8006116 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800610c:	6979      	ldr	r1, [r7, #20]
 800610e:	68b8      	ldr	r0, [r7, #8]
 8006110:	f7ff fb9e 	bl	8005850 <http_send>
 8006114:	e00c      	b.n	8006130 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8006116:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800611a:	f113 0f10 	cmn.w	r3, #16
 800611e:	d107      	bne.n	8006130 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8006120:	6979      	ldr	r1, [r7, #20]
 8006122:	68b8      	ldr	r0, [r7, #8]
 8006124:	f7fe ff16 	bl	8004f54 <http_close_conn>
 8006128:	e002      	b.n	8006130 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f001 fcac 	bl	8007a88 <pbuf_free>
    }
  }
  return ERR_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	08011e70 	.word	0x08011e70
 8006140:	0801201c 	.word	0x0801201c
 8006144:	08011eb8 	.word	0x08011eb8

08006148 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	4613      	mov	r3, r2
 8006154:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8006156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d102      	bne.n	8006164 <http_accept+0x1c>
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d102      	bne.n	800616a <http_accept+0x22>
    return ERR_VAL;
 8006164:	f06f 0305 	mvn.w	r3, #5
 8006168:	e025      	b.n	80061b6 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800616a:	2101      	movs	r1, #1
 800616c:	68b8      	ldr	r0, [r7, #8]
 800616e:	f003 f8d1 	bl	8009314 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8006172:	f7fe fdf5 	bl	8004d60 <http_state_alloc>
 8006176:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d102      	bne.n	8006184 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800617e:	f04f 33ff 	mov.w	r3, #4294967295
 8006182:	e018      	b.n	80061b6 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800618a:	6979      	ldr	r1, [r7, #20]
 800618c:	68b8      	ldr	r0, [r7, #8]
 800618e:	f003 fac1 	bl	8009714 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8006192:	490b      	ldr	r1, [pc, #44]	; (80061c0 <http_accept+0x78>)
 8006194:	68b8      	ldr	r0, [r7, #8]
 8006196:	f003 facf 	bl	8009738 <tcp_recv>
  altcp_err(pcb, http_err);
 800619a:	490a      	ldr	r1, [pc, #40]	; (80061c4 <http_accept+0x7c>)
 800619c:	68b8      	ldr	r0, [r7, #8]
 800619e:	f003 fb0f 	bl	80097c0 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80061a2:	2204      	movs	r2, #4
 80061a4:	4908      	ldr	r1, [pc, #32]	; (80061c8 <http_accept+0x80>)
 80061a6:	68b8      	ldr	r0, [r7, #8]
 80061a8:	f003 fb44 	bl	8009834 <tcp_poll>
  altcp_sent(pcb, http_sent);
 80061ac:	4907      	ldr	r1, [pc, #28]	; (80061cc <http_accept+0x84>)
 80061ae:	68b8      	ldr	r0, [r7, #8]
 80061b0:	f003 fae4 	bl	800977c <tcp_sent>

  return ERR_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3718      	adds	r7, #24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	0800603d 	.word	0x0800603d
 80061c4:	08005f71 	.word	0x08005f71
 80061c8:	08005fcb 	.word	0x08005fcb
 80061cc:	08005f95 	.word	0x08005f95

080061d0 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d029      	beq.n	8006236 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80061e2:	2101      	movs	r1, #1
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f003 f895 	bl	8009314 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 80061ea:	887b      	ldrh	r3, [r7, #2]
 80061ec:	461a      	mov	r2, r3
 80061ee:	4914      	ldr	r1, [pc, #80]	; (8006240 <httpd_init_pcb+0x70>)
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f002 f9dd 	bl	80085b0 <tcp_bind>
 80061f6:	4603      	mov	r3, r0
 80061f8:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80061fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d006      	beq.n	8006210 <httpd_init_pcb+0x40>
 8006202:	4b10      	ldr	r3, [pc, #64]	; (8006244 <httpd_init_pcb+0x74>)
 8006204:	f640 2257 	movw	r2, #2647	; 0xa57
 8006208:	490f      	ldr	r1, [pc, #60]	; (8006248 <httpd_init_pcb+0x78>)
 800620a:	4810      	ldr	r0, [pc, #64]	; (800624c <httpd_init_pcb+0x7c>)
 800620c:	f00a fd38 	bl	8010c80 <iprintf>
    pcb = altcp_listen(pcb);
 8006210:	21ff      	movs	r1, #255	; 0xff
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f002 fa84 	bl	8008720 <tcp_listen_with_backlog>
 8006218:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d106      	bne.n	800622e <httpd_init_pcb+0x5e>
 8006220:	4b08      	ldr	r3, [pc, #32]	; (8006244 <httpd_init_pcb+0x74>)
 8006222:	f640 2259 	movw	r2, #2649	; 0xa59
 8006226:	490a      	ldr	r1, [pc, #40]	; (8006250 <httpd_init_pcb+0x80>)
 8006228:	4808      	ldr	r0, [pc, #32]	; (800624c <httpd_init_pcb+0x7c>)
 800622a:	f00a fd29 	bl	8010c80 <iprintf>
    altcp_accept(pcb, http_accept);
 800622e:	4909      	ldr	r1, [pc, #36]	; (8006254 <httpd_init_pcb+0x84>)
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f003 fae7 	bl	8009804 <tcp_accept>
  }
}
 8006236:	bf00      	nop
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	08015068 	.word	0x08015068
 8006244:	08011e70 	.word	0x08011e70
 8006248:	08012048 	.word	0x08012048
 800624c:	08011eb8 	.word	0x08011eb8
 8006250:	08012064 	.word	0x08012064
 8006254:	08006149 	.word	0x08006149

08006258 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800625e:	202e      	movs	r0, #46	; 0x2e
 8006260:	f003 fa4a 	bl	80096f8 <tcp_new_ip_type>
 8006264:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d106      	bne.n	800627a <httpd_init+0x22>
 800626c:	4b07      	ldr	r3, [pc, #28]	; (800628c <httpd_init+0x34>)
 800626e:	f640 2272 	movw	r2, #2674	; 0xa72
 8006272:	4907      	ldr	r1, [pc, #28]	; (8006290 <httpd_init+0x38>)
 8006274:	4807      	ldr	r0, [pc, #28]	; (8006294 <httpd_init+0x3c>)
 8006276:	f00a fd03 	bl	8010c80 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800627a:	2150      	movs	r1, #80	; 0x50
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7ff ffa7 	bl	80061d0 <httpd_init_pcb>
}
 8006282:	bf00      	nop
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	08011e70 	.word	0x08011e70
 8006290:	08012084 	.word	0x08012084
 8006294:	08011eb8 	.word	0x08011eb8

08006298 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d106      	bne.n	80062b6 <http_set_cgi_handlers+0x1e>
 80062a8:	4b0d      	ldr	r3, [pc, #52]	; (80062e0 <http_set_cgi_handlers+0x48>)
 80062aa:	f640 22b2 	movw	r2, #2738	; 0xab2
 80062ae:	490d      	ldr	r1, [pc, #52]	; (80062e4 <http_set_cgi_handlers+0x4c>)
 80062b0:	480d      	ldr	r0, [pc, #52]	; (80062e8 <http_set_cgi_handlers+0x50>)
 80062b2:	f00a fce5 	bl	8010c80 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	dc06      	bgt.n	80062ca <http_set_cgi_handlers+0x32>
 80062bc:	4b08      	ldr	r3, [pc, #32]	; (80062e0 <http_set_cgi_handlers+0x48>)
 80062be:	f640 22b3 	movw	r2, #2739	; 0xab3
 80062c2:	490a      	ldr	r1, [pc, #40]	; (80062ec <http_set_cgi_handlers+0x54>)
 80062c4:	4808      	ldr	r0, [pc, #32]	; (80062e8 <http_set_cgi_handlers+0x50>)
 80062c6:	f00a fcdb 	bl	8010c80 <iprintf>

  httpd_cgis = cgis;
 80062ca:	4a09      	ldr	r2, [pc, #36]	; (80062f0 <http_set_cgi_handlers+0x58>)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 80062d0:	4a08      	ldr	r2, [pc, #32]	; (80062f4 <http_set_cgi_handlers+0x5c>)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	6013      	str	r3, [r2, #0]
}
 80062d6:	bf00      	nop
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	08011e70 	.word	0x08011e70
 80062e4:	080120e0 	.word	0x080120e0
 80062e8:	08011eb8 	.word	0x08011eb8
 80062ec:	080120f0 	.word	0x080120f0
 80062f0:	20005170 	.word	0x20005170
 80062f4:	20005174 	.word	0x20005174

080062f8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	4603      	mov	r3, r0
 8006300:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006302:	88fb      	ldrh	r3, [r7, #6]
 8006304:	021b      	lsls	r3, r3, #8
 8006306:	b21a      	sxth	r2, r3
 8006308:	88fb      	ldrh	r3, [r7, #6]
 800630a:	0a1b      	lsrs	r3, r3, #8
 800630c:	b29b      	uxth	r3, r3
 800630e:	b21b      	sxth	r3, r3
 8006310:	4313      	orrs	r3, r2
 8006312:	b21b      	sxth	r3, r3
 8006314:	b29b      	uxth	r3, r3
}
 8006316:	4618      	mov	r0, r3
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	061a      	lsls	r2, r3, #24
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	021b      	lsls	r3, r3, #8
 8006332:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	0a1b      	lsrs	r3, r3, #8
 800633c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006340:	431a      	orrs	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	0e1b      	lsrs	r3, r3, #24
 8006346:	4313      	orrs	r3, r2
}
 8006348:	4618      	mov	r0, r3
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8006360:	68b8      	ldr	r0, [r7, #8]
 8006362:	f7f9 ff4f 	bl	8000204 <strlen>
 8006366:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	e022      	b.n	80063b8 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	617b      	str	r3, [r7, #20]
 8006376:	e012      	b.n	800639e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	781a      	ldrb	r2, [r3, #0]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	429a      	cmp	r2, r3
 8006382:	d109      	bne.n	8006398 <lwip_strnstr+0x44>
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	68b9      	ldr	r1, [r7, #8]
 8006388:	6978      	ldr	r0, [r7, #20]
 800638a:	f00a fcdc 	bl	8010d46 <strncmp>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	e00f      	b.n	80063b8 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	3301      	adds	r3, #1
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d007      	beq.n	80063b6 <lwip_strnstr+0x62>
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	441a      	add	r2, r3
 80063ac:	68f9      	ldr	r1, [r7, #12]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	440b      	add	r3, r1
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d9e0      	bls.n	8006378 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3718      	adds	r7, #24
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	603a      	str	r2, [r7, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 80063de:	7bfa      	ldrb	r2, [r7, #15]
 80063e0:	7bbb      	ldrb	r3, [r7, #14]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d016      	beq.n	8006414 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 80063e6:	7bfb      	ldrb	r3, [r7, #15]
 80063e8:	f043 0320 	orr.w	r3, r3, #32
 80063ec:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80063ee:	7b7b      	ldrb	r3, [r7, #13]
 80063f0:	2b60      	cmp	r3, #96	; 0x60
 80063f2:	d90c      	bls.n	800640e <lwip_stricmp+0x4e>
 80063f4:	7b7b      	ldrb	r3, [r7, #13]
 80063f6:	2b7a      	cmp	r3, #122	; 0x7a
 80063f8:	d809      	bhi.n	800640e <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 80063fa:	7bbb      	ldrb	r3, [r7, #14]
 80063fc:	f043 0320 	orr.w	r3, r3, #32
 8006400:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 8006402:	7b7a      	ldrb	r2, [r7, #13]
 8006404:	7b3b      	ldrb	r3, [r7, #12]
 8006406:	429a      	cmp	r2, r3
 8006408:	d003      	beq.n	8006412 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800640a:	2301      	movs	r3, #1
 800640c:	e006      	b.n	800641c <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800640e:	2301      	movs	r3, #1
 8006410:	e004      	b.n	800641c <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8006412:	bf00      	nop
      }
    }
  } while (c1 != 0);
 8006414:	7bfb      	ldrb	r3, [r7, #15]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1d7      	bne.n	80063ca <lwip_stricmp+0xa>
  return 0;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800642e:	2300      	movs	r3, #0
 8006430:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006432:	f000 f8d5 	bl	80065e0 <mem_init>
  memp_init();
 8006436:	f000 fbdb 	bl	8006bf0 <memp_init>
  pbuf_init();
  netif_init();
 800643a:	f000 fcd9 	bl	8006df0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800643e:	f007 ff55 	bl	800e2ec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006442:	f001 fdaf 	bl	8007fa4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006446:	f007 fec7 	bl	800e1d8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800644a:	bf00      	nop
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
	...

08006454 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	4603      	mov	r3, r0
 800645c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800645e:	4b05      	ldr	r3, [pc, #20]	; (8006474 <ptr_to_mem+0x20>)
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	88fb      	ldrh	r3, [r7, #6]
 8006464:	4413      	add	r3, r2
}
 8006466:	4618      	mov	r0, r3
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	200057e8 	.word	0x200057e8

08006478 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006480:	4b05      	ldr	r3, [pc, #20]	; (8006498 <mem_to_ptr+0x20>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	b29b      	uxth	r3, r3
}
 800648a:	4618      	mov	r0, r3
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	200057e8 	.word	0x200057e8

0800649c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800649c:	b590      	push	{r4, r7, lr}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80064a4:	4b45      	ldr	r3, [pc, #276]	; (80065bc <plug_holes+0x120>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d206      	bcs.n	80064bc <plug_holes+0x20>
 80064ae:	4b44      	ldr	r3, [pc, #272]	; (80065c0 <plug_holes+0x124>)
 80064b0:	f240 12df 	movw	r2, #479	; 0x1df
 80064b4:	4943      	ldr	r1, [pc, #268]	; (80065c4 <plug_holes+0x128>)
 80064b6:	4844      	ldr	r0, [pc, #272]	; (80065c8 <plug_holes+0x12c>)
 80064b8:	f00a fbe2 	bl	8010c80 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80064bc:	4b43      	ldr	r3, [pc, #268]	; (80065cc <plug_holes+0x130>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d306      	bcc.n	80064d4 <plug_holes+0x38>
 80064c6:	4b3e      	ldr	r3, [pc, #248]	; (80065c0 <plug_holes+0x124>)
 80064c8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80064cc:	4940      	ldr	r1, [pc, #256]	; (80065d0 <plug_holes+0x134>)
 80064ce:	483e      	ldr	r0, [pc, #248]	; (80065c8 <plug_holes+0x12c>)
 80064d0:	f00a fbd6 	bl	8010c80 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	791b      	ldrb	r3, [r3, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d006      	beq.n	80064ea <plug_holes+0x4e>
 80064dc:	4b38      	ldr	r3, [pc, #224]	; (80065c0 <plug_holes+0x124>)
 80064de:	f240 12e1 	movw	r2, #481	; 0x1e1
 80064e2:	493c      	ldr	r1, [pc, #240]	; (80065d4 <plug_holes+0x138>)
 80064e4:	4838      	ldr	r0, [pc, #224]	; (80065c8 <plug_holes+0x12c>)
 80064e6:	f00a fbcb 	bl	8010c80 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80064f2:	d906      	bls.n	8006502 <plug_holes+0x66>
 80064f4:	4b32      	ldr	r3, [pc, #200]	; (80065c0 <plug_holes+0x124>)
 80064f6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80064fa:	4937      	ldr	r1, [pc, #220]	; (80065d8 <plug_holes+0x13c>)
 80064fc:	4832      	ldr	r0, [pc, #200]	; (80065c8 <plug_holes+0x12c>)
 80064fe:	f00a fbbf 	bl	8010c80 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	4618      	mov	r0, r3
 8006508:	f7ff ffa4 	bl	8006454 <ptr_to_mem>
 800650c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	429a      	cmp	r2, r3
 8006514:	d024      	beq.n	8006560 <plug_holes+0xc4>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	791b      	ldrb	r3, [r3, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d120      	bne.n	8006560 <plug_holes+0xc4>
 800651e:	4b2b      	ldr	r3, [pc, #172]	; (80065cc <plug_holes+0x130>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	429a      	cmp	r2, r3
 8006526:	d01b      	beq.n	8006560 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006528:	4b2c      	ldr	r3, [pc, #176]	; (80065dc <plug_holes+0x140>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	429a      	cmp	r2, r3
 8006530:	d102      	bne.n	8006538 <plug_holes+0x9c>
      lfree = mem;
 8006532:	4a2a      	ldr	r2, [pc, #168]	; (80065dc <plug_holes+0x140>)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	881a      	ldrh	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006548:	d00a      	beq.n	8006560 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff ff80 	bl	8006454 <ptr_to_mem>
 8006554:	4604      	mov	r4, r0
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7ff ff8e 	bl	8006478 <mem_to_ptr>
 800655c:	4603      	mov	r3, r0
 800655e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	885b      	ldrh	r3, [r3, #2]
 8006564:	4618      	mov	r0, r3
 8006566:	f7ff ff75 	bl	8006454 <ptr_to_mem>
 800656a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	429a      	cmp	r2, r3
 8006572:	d01f      	beq.n	80065b4 <plug_holes+0x118>
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	791b      	ldrb	r3, [r3, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d11b      	bne.n	80065b4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800657c:	4b17      	ldr	r3, [pc, #92]	; (80065dc <plug_holes+0x140>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	429a      	cmp	r2, r3
 8006584:	d102      	bne.n	800658c <plug_holes+0xf0>
      lfree = pmem;
 8006586:	4a15      	ldr	r2, [pc, #84]	; (80065dc <plug_holes+0x140>)
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	881a      	ldrh	r2, [r3, #0]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800659c:	d00a      	beq.n	80065b4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7ff ff56 	bl	8006454 <ptr_to_mem>
 80065a8:	4604      	mov	r4, r0
 80065aa:	68b8      	ldr	r0, [r7, #8]
 80065ac:	f7ff ff64 	bl	8006478 <mem_to_ptr>
 80065b0:	4603      	mov	r3, r0
 80065b2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80065b4:	bf00      	nop
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd90      	pop	{r4, r7, pc}
 80065bc:	200057e8 	.word	0x200057e8
 80065c0:	0801210c 	.word	0x0801210c
 80065c4:	0801213c 	.word	0x0801213c
 80065c8:	08012154 	.word	0x08012154
 80065cc:	200057ec 	.word	0x200057ec
 80065d0:	0801217c 	.word	0x0801217c
 80065d4:	08012198 	.word	0x08012198
 80065d8:	080121b4 	.word	0x080121b4
 80065dc:	200057f0 	.word	0x200057f0

080065e0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80065e6:	4b18      	ldr	r3, [pc, #96]	; (8006648 <mem_init+0x68>)
 80065e8:	3303      	adds	r3, #3
 80065ea:	f023 0303 	bic.w	r3, r3, #3
 80065ee:	461a      	mov	r2, r3
 80065f0:	4b16      	ldr	r3, [pc, #88]	; (800664c <mem_init+0x6c>)
 80065f2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80065f4:	4b15      	ldr	r3, [pc, #84]	; (800664c <mem_init+0x6c>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006600:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800660e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8006612:	f7ff ff1f 	bl	8006454 <ptr_to_mem>
 8006616:	4603      	mov	r3, r0
 8006618:	4a0d      	ldr	r2, [pc, #52]	; (8006650 <mem_init+0x70>)
 800661a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800661c:	4b0c      	ldr	r3, [pc, #48]	; (8006650 <mem_init+0x70>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2201      	movs	r2, #1
 8006622:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006624:	4b0a      	ldr	r3, [pc, #40]	; (8006650 <mem_init+0x70>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800662c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800662e:	4b08      	ldr	r3, [pc, #32]	; (8006650 <mem_init+0x70>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006636:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006638:	4b04      	ldr	r3, [pc, #16]	; (800664c <mem_init+0x6c>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a05      	ldr	r2, [pc, #20]	; (8006654 <mem_init+0x74>)
 800663e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006640:	bf00      	nop
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	20005194 	.word	0x20005194
 800664c:	200057e8 	.word	0x200057e8
 8006650:	200057ec 	.word	0x200057ec
 8006654:	200057f0 	.word	0x200057f0

08006658 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff ff09 	bl	8006478 <mem_to_ptr>
 8006666:	4603      	mov	r3, r0
 8006668:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	4618      	mov	r0, r3
 8006670:	f7ff fef0 	bl	8006454 <ptr_to_mem>
 8006674:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	885b      	ldrh	r3, [r3, #2]
 800667a:	4618      	mov	r0, r3
 800667c:	f7ff feea 	bl	8006454 <ptr_to_mem>
 8006680:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800668a:	d818      	bhi.n	80066be <mem_link_valid+0x66>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	885b      	ldrh	r3, [r3, #2]
 8006690:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006694:	d813      	bhi.n	80066be <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800669a:	8afa      	ldrh	r2, [r7, #22]
 800669c:	429a      	cmp	r2, r3
 800669e:	d004      	beq.n	80066aa <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	8afa      	ldrh	r2, [r7, #22]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d109      	bne.n	80066be <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80066aa:	4b08      	ldr	r3, [pc, #32]	; (80066cc <mem_link_valid+0x74>)
 80066ac:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d006      	beq.n	80066c2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	885b      	ldrh	r3, [r3, #2]
 80066b8:	8afa      	ldrh	r2, [r7, #22]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d001      	beq.n	80066c2 <mem_link_valid+0x6a>
    return 0;
 80066be:	2300      	movs	r3, #0
 80066c0:	e000      	b.n	80066c4 <mem_link_valid+0x6c>
  }
  return 1;
 80066c2:	2301      	movs	r3, #1
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	200057ec 	.word	0x200057ec

080066d0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d04c      	beq.n	8006778 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f003 0303 	and.w	r3, r3, #3
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d007      	beq.n	80066f8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80066e8:	4b25      	ldr	r3, [pc, #148]	; (8006780 <mem_free+0xb0>)
 80066ea:	f240 2273 	movw	r2, #627	; 0x273
 80066ee:	4925      	ldr	r1, [pc, #148]	; (8006784 <mem_free+0xb4>)
 80066f0:	4825      	ldr	r0, [pc, #148]	; (8006788 <mem_free+0xb8>)
 80066f2:	f00a fac5 	bl	8010c80 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80066f6:	e040      	b.n	800677a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3b08      	subs	r3, #8
 80066fc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80066fe:	4b23      	ldr	r3, [pc, #140]	; (800678c <mem_free+0xbc>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	429a      	cmp	r2, r3
 8006706:	d306      	bcc.n	8006716 <mem_free+0x46>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f103 020c 	add.w	r2, r3, #12
 800670e:	4b20      	ldr	r3, [pc, #128]	; (8006790 <mem_free+0xc0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	429a      	cmp	r2, r3
 8006714:	d907      	bls.n	8006726 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006716:	4b1a      	ldr	r3, [pc, #104]	; (8006780 <mem_free+0xb0>)
 8006718:	f240 227f 	movw	r2, #639	; 0x27f
 800671c:	491d      	ldr	r1, [pc, #116]	; (8006794 <mem_free+0xc4>)
 800671e:	481a      	ldr	r0, [pc, #104]	; (8006788 <mem_free+0xb8>)
 8006720:	f00a faae 	bl	8010c80 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006724:	e029      	b.n	800677a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	791b      	ldrb	r3, [r3, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d107      	bne.n	800673e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800672e:	4b14      	ldr	r3, [pc, #80]	; (8006780 <mem_free+0xb0>)
 8006730:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8006734:	4918      	ldr	r1, [pc, #96]	; (8006798 <mem_free+0xc8>)
 8006736:	4814      	ldr	r0, [pc, #80]	; (8006788 <mem_free+0xb8>)
 8006738:	f00a faa2 	bl	8010c80 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800673c:	e01d      	b.n	800677a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f7ff ff8a 	bl	8006658 <mem_link_valid>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d107      	bne.n	800675a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800674a:	4b0d      	ldr	r3, [pc, #52]	; (8006780 <mem_free+0xb0>)
 800674c:	f240 2295 	movw	r2, #661	; 0x295
 8006750:	4912      	ldr	r1, [pc, #72]	; (800679c <mem_free+0xcc>)
 8006752:	480d      	ldr	r0, [pc, #52]	; (8006788 <mem_free+0xb8>)
 8006754:	f00a fa94 	bl	8010c80 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006758:	e00f      	b.n	800677a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006760:	4b0f      	ldr	r3, [pc, #60]	; (80067a0 <mem_free+0xd0>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	429a      	cmp	r2, r3
 8006768:	d202      	bcs.n	8006770 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800676a:	4a0d      	ldr	r2, [pc, #52]	; (80067a0 <mem_free+0xd0>)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f7ff fe93 	bl	800649c <plug_holes>
 8006776:	e000      	b.n	800677a <mem_free+0xaa>
    return;
 8006778:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	0801210c 	.word	0x0801210c
 8006784:	080121e0 	.word	0x080121e0
 8006788:	08012154 	.word	0x08012154
 800678c:	200057e8 	.word	0x200057e8
 8006790:	200057ec 	.word	0x200057ec
 8006794:	08012204 	.word	0x08012204
 8006798:	08012220 	.word	0x08012220
 800679c:	08012248 	.word	0x08012248
 80067a0:	200057f0 	.word	0x200057f0

080067a4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b088      	sub	sp, #32
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	460b      	mov	r3, r1
 80067ae:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80067b0:	887b      	ldrh	r3, [r7, #2]
 80067b2:	3303      	adds	r3, #3
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	f023 0303 	bic.w	r3, r3, #3
 80067ba:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80067bc:	8bfb      	ldrh	r3, [r7, #30]
 80067be:	2b0b      	cmp	r3, #11
 80067c0:	d801      	bhi.n	80067c6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80067c2:	230c      	movs	r3, #12
 80067c4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80067c6:	8bfb      	ldrh	r3, [r7, #30]
 80067c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80067cc:	d803      	bhi.n	80067d6 <mem_trim+0x32>
 80067ce:	8bfa      	ldrh	r2, [r7, #30]
 80067d0:	887b      	ldrh	r3, [r7, #2]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d201      	bcs.n	80067da <mem_trim+0x36>
    return NULL;
 80067d6:	2300      	movs	r3, #0
 80067d8:	e0cc      	b.n	8006974 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80067da:	4b68      	ldr	r3, [pc, #416]	; (800697c <mem_trim+0x1d8>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d304      	bcc.n	80067ee <mem_trim+0x4a>
 80067e4:	4b66      	ldr	r3, [pc, #408]	; (8006980 <mem_trim+0x1dc>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d306      	bcc.n	80067fc <mem_trim+0x58>
 80067ee:	4b65      	ldr	r3, [pc, #404]	; (8006984 <mem_trim+0x1e0>)
 80067f0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80067f4:	4964      	ldr	r1, [pc, #400]	; (8006988 <mem_trim+0x1e4>)
 80067f6:	4865      	ldr	r0, [pc, #404]	; (800698c <mem_trim+0x1e8>)
 80067f8:	f00a fa42 	bl	8010c80 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80067fc:	4b5f      	ldr	r3, [pc, #380]	; (800697c <mem_trim+0x1d8>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	429a      	cmp	r2, r3
 8006804:	d304      	bcc.n	8006810 <mem_trim+0x6c>
 8006806:	4b5e      	ldr	r3, [pc, #376]	; (8006980 <mem_trim+0x1dc>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	429a      	cmp	r2, r3
 800680e:	d301      	bcc.n	8006814 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	e0af      	b.n	8006974 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	3b08      	subs	r3, #8
 8006818:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800681a:	69b8      	ldr	r0, [r7, #24]
 800681c:	f7ff fe2c 	bl	8006478 <mem_to_ptr>
 8006820:	4603      	mov	r3, r0
 8006822:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	881a      	ldrh	r2, [r3, #0]
 8006828:	8afb      	ldrh	r3, [r7, #22]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	b29b      	uxth	r3, r3
 800682e:	3b08      	subs	r3, #8
 8006830:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006832:	8bfa      	ldrh	r2, [r7, #30]
 8006834:	8abb      	ldrh	r3, [r7, #20]
 8006836:	429a      	cmp	r2, r3
 8006838:	d906      	bls.n	8006848 <mem_trim+0xa4>
 800683a:	4b52      	ldr	r3, [pc, #328]	; (8006984 <mem_trim+0x1e0>)
 800683c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8006840:	4953      	ldr	r1, [pc, #332]	; (8006990 <mem_trim+0x1ec>)
 8006842:	4852      	ldr	r0, [pc, #328]	; (800698c <mem_trim+0x1e8>)
 8006844:	f00a fa1c 	bl	8010c80 <iprintf>
  if (newsize > size) {
 8006848:	8bfa      	ldrh	r2, [r7, #30]
 800684a:	8abb      	ldrh	r3, [r7, #20]
 800684c:	429a      	cmp	r2, r3
 800684e:	d901      	bls.n	8006854 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006850:	2300      	movs	r3, #0
 8006852:	e08f      	b.n	8006974 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006854:	8bfa      	ldrh	r2, [r7, #30]
 8006856:	8abb      	ldrh	r3, [r7, #20]
 8006858:	429a      	cmp	r2, r3
 800685a:	d101      	bne.n	8006860 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	e089      	b.n	8006974 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	4618      	mov	r0, r3
 8006866:	f7ff fdf5 	bl	8006454 <ptr_to_mem>
 800686a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	791b      	ldrb	r3, [r3, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d13f      	bne.n	80068f4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800687c:	d106      	bne.n	800688c <mem_trim+0xe8>
 800687e:	4b41      	ldr	r3, [pc, #260]	; (8006984 <mem_trim+0x1e0>)
 8006880:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006884:	4943      	ldr	r1, [pc, #268]	; (8006994 <mem_trim+0x1f0>)
 8006886:	4841      	ldr	r0, [pc, #260]	; (800698c <mem_trim+0x1e8>)
 8006888:	f00a f9fa 	bl	8010c80 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006892:	8afa      	ldrh	r2, [r7, #22]
 8006894:	8bfb      	ldrh	r3, [r7, #30]
 8006896:	4413      	add	r3, r2
 8006898:	b29b      	uxth	r3, r3
 800689a:	3308      	adds	r3, #8
 800689c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800689e:	4b3e      	ldr	r3, [pc, #248]	; (8006998 <mem_trim+0x1f4>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d106      	bne.n	80068b6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80068a8:	89fb      	ldrh	r3, [r7, #14]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7ff fdd2 	bl	8006454 <ptr_to_mem>
 80068b0:	4603      	mov	r3, r0
 80068b2:	4a39      	ldr	r2, [pc, #228]	; (8006998 <mem_trim+0x1f4>)
 80068b4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80068b6:	89fb      	ldrh	r3, [r7, #14]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7ff fdcb 	bl	8006454 <ptr_to_mem>
 80068be:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	2200      	movs	r2, #0
 80068c4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	89ba      	ldrh	r2, [r7, #12]
 80068ca:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	8afa      	ldrh	r2, [r7, #22]
 80068d0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	89fa      	ldrh	r2, [r7, #14]
 80068d6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80068e0:	d047      	beq.n	8006972 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7ff fdb4 	bl	8006454 <ptr_to_mem>
 80068ec:	4602      	mov	r2, r0
 80068ee:	89fb      	ldrh	r3, [r7, #14]
 80068f0:	8053      	strh	r3, [r2, #2]
 80068f2:	e03e      	b.n	8006972 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80068f4:	8bfb      	ldrh	r3, [r7, #30]
 80068f6:	f103 0214 	add.w	r2, r3, #20
 80068fa:	8abb      	ldrh	r3, [r7, #20]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d838      	bhi.n	8006972 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006900:	8afa      	ldrh	r2, [r7, #22]
 8006902:	8bfb      	ldrh	r3, [r7, #30]
 8006904:	4413      	add	r3, r2
 8006906:	b29b      	uxth	r3, r3
 8006908:	3308      	adds	r3, #8
 800690a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006914:	d106      	bne.n	8006924 <mem_trim+0x180>
 8006916:	4b1b      	ldr	r3, [pc, #108]	; (8006984 <mem_trim+0x1e0>)
 8006918:	f240 3216 	movw	r2, #790	; 0x316
 800691c:	491d      	ldr	r1, [pc, #116]	; (8006994 <mem_trim+0x1f0>)
 800691e:	481b      	ldr	r0, [pc, #108]	; (800698c <mem_trim+0x1e8>)
 8006920:	f00a f9ae 	bl	8010c80 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006924:	89fb      	ldrh	r3, [r7, #14]
 8006926:	4618      	mov	r0, r3
 8006928:	f7ff fd94 	bl	8006454 <ptr_to_mem>
 800692c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800692e:	4b1a      	ldr	r3, [pc, #104]	; (8006998 <mem_trim+0x1f4>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	429a      	cmp	r2, r3
 8006936:	d202      	bcs.n	800693e <mem_trim+0x19a>
      lfree = mem2;
 8006938:	4a17      	ldr	r2, [pc, #92]	; (8006998 <mem_trim+0x1f4>)
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	2200      	movs	r2, #0
 8006942:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	881a      	ldrh	r2, [r3, #0]
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	8afa      	ldrh	r2, [r7, #22]
 8006950:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	89fa      	ldrh	r2, [r7, #14]
 8006956:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006960:	d007      	beq.n	8006972 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	4618      	mov	r0, r3
 8006968:	f7ff fd74 	bl	8006454 <ptr_to_mem>
 800696c:	4602      	mov	r2, r0
 800696e:	89fb      	ldrh	r3, [r7, #14]
 8006970:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006972:	687b      	ldr	r3, [r7, #4]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3720      	adds	r7, #32
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	200057e8 	.word	0x200057e8
 8006980:	200057ec 	.word	0x200057ec
 8006984:	0801210c 	.word	0x0801210c
 8006988:	0801227c 	.word	0x0801227c
 800698c:	08012154 	.word	0x08012154
 8006990:	08012294 	.word	0x08012294
 8006994:	080122b4 	.word	0x080122b4
 8006998:	200057f0 	.word	0x200057f0

0800699c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	4603      	mov	r3, r0
 80069a4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80069a6:	88fb      	ldrh	r3, [r7, #6]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <mem_malloc+0x14>
    return NULL;
 80069ac:	2300      	movs	r3, #0
 80069ae:	e0d9      	b.n	8006b64 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80069b0:	88fb      	ldrh	r3, [r7, #6]
 80069b2:	3303      	adds	r3, #3
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	f023 0303 	bic.w	r3, r3, #3
 80069ba:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80069bc:	8bbb      	ldrh	r3, [r7, #28]
 80069be:	2b0b      	cmp	r3, #11
 80069c0:	d801      	bhi.n	80069c6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80069c2:	230c      	movs	r3, #12
 80069c4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80069c6:	8bbb      	ldrh	r3, [r7, #28]
 80069c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80069cc:	d803      	bhi.n	80069d6 <mem_malloc+0x3a>
 80069ce:	8bba      	ldrh	r2, [r7, #28]
 80069d0:	88fb      	ldrh	r3, [r7, #6]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d201      	bcs.n	80069da <mem_malloc+0x3e>
    return NULL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	e0c4      	b.n	8006b64 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80069da:	4b64      	ldr	r3, [pc, #400]	; (8006b6c <mem_malloc+0x1d0>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4618      	mov	r0, r3
 80069e0:	f7ff fd4a 	bl	8006478 <mem_to_ptr>
 80069e4:	4603      	mov	r3, r0
 80069e6:	83fb      	strh	r3, [r7, #30]
 80069e8:	e0b4      	b.n	8006b54 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80069ea:	8bfb      	ldrh	r3, [r7, #30]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff fd31 	bl	8006454 <ptr_to_mem>
 80069f2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	791b      	ldrb	r3, [r3, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f040 80a4 	bne.w	8006b46 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	461a      	mov	r2, r3
 8006a04:	8bfb      	ldrh	r3, [r7, #30]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	f1a3 0208 	sub.w	r2, r3, #8
 8006a0c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	f0c0 8099 	bcc.w	8006b46 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	8bfb      	ldrh	r3, [r7, #30]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	f1a3 0208 	sub.w	r2, r3, #8
 8006a22:	8bbb      	ldrh	r3, [r7, #28]
 8006a24:	3314      	adds	r3, #20
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d333      	bcc.n	8006a92 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006a2a:	8bfa      	ldrh	r2, [r7, #30]
 8006a2c:	8bbb      	ldrh	r3, [r7, #28]
 8006a2e:	4413      	add	r3, r2
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	3308      	adds	r3, #8
 8006a34:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006a36:	8a7b      	ldrh	r3, [r7, #18]
 8006a38:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006a3c:	d106      	bne.n	8006a4c <mem_malloc+0xb0>
 8006a3e:	4b4c      	ldr	r3, [pc, #304]	; (8006b70 <mem_malloc+0x1d4>)
 8006a40:	f240 3287 	movw	r2, #903	; 0x387
 8006a44:	494b      	ldr	r1, [pc, #300]	; (8006b74 <mem_malloc+0x1d8>)
 8006a46:	484c      	ldr	r0, [pc, #304]	; (8006b78 <mem_malloc+0x1dc>)
 8006a48:	f00a f91a 	bl	8010c80 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006a4c:	8a7b      	ldrh	r3, [r7, #18]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7ff fd00 	bl	8006454 <ptr_to_mem>
 8006a54:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	881a      	ldrh	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	8bfa      	ldrh	r2, [r7, #30]
 8006a68:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	8a7a      	ldrh	r2, [r7, #18]
 8006a6e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	2201      	movs	r2, #1
 8006a74:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006a7e:	d00b      	beq.n	8006a98 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	881b      	ldrh	r3, [r3, #0]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7ff fce5 	bl	8006454 <ptr_to_mem>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	8a7b      	ldrh	r3, [r7, #18]
 8006a8e:	8053      	strh	r3, [r2, #2]
 8006a90:	e002      	b.n	8006a98 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	2201      	movs	r2, #1
 8006a96:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006a98:	4b34      	ldr	r3, [pc, #208]	; (8006b6c <mem_malloc+0x1d0>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d127      	bne.n	8006af2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006aa2:	4b32      	ldr	r3, [pc, #200]	; (8006b6c <mem_malloc+0x1d0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006aa8:	e005      	b.n	8006ab6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7ff fcd0 	bl	8006454 <ptr_to_mem>
 8006ab4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	791b      	ldrb	r3, [r3, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d004      	beq.n	8006ac8 <mem_malloc+0x12c>
 8006abe:	4b2f      	ldr	r3, [pc, #188]	; (8006b7c <mem_malloc+0x1e0>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d1f0      	bne.n	8006aaa <mem_malloc+0x10e>
          }
          lfree = cur;
 8006ac8:	4a28      	ldr	r2, [pc, #160]	; (8006b6c <mem_malloc+0x1d0>)
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006ace:	4b27      	ldr	r3, [pc, #156]	; (8006b6c <mem_malloc+0x1d0>)
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	4b2a      	ldr	r3, [pc, #168]	; (8006b7c <mem_malloc+0x1e0>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d00b      	beq.n	8006af2 <mem_malloc+0x156>
 8006ada:	4b24      	ldr	r3, [pc, #144]	; (8006b6c <mem_malloc+0x1d0>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	791b      	ldrb	r3, [r3, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d006      	beq.n	8006af2 <mem_malloc+0x156>
 8006ae4:	4b22      	ldr	r3, [pc, #136]	; (8006b70 <mem_malloc+0x1d4>)
 8006ae6:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006aea:	4925      	ldr	r1, [pc, #148]	; (8006b80 <mem_malloc+0x1e4>)
 8006aec:	4822      	ldr	r0, [pc, #136]	; (8006b78 <mem_malloc+0x1dc>)
 8006aee:	f00a f8c7 	bl	8010c80 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006af2:	8bba      	ldrh	r2, [r7, #28]
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	4413      	add	r3, r2
 8006af8:	3308      	adds	r3, #8
 8006afa:	4a20      	ldr	r2, [pc, #128]	; (8006b7c <mem_malloc+0x1e0>)
 8006afc:	6812      	ldr	r2, [r2, #0]
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d906      	bls.n	8006b10 <mem_malloc+0x174>
 8006b02:	4b1b      	ldr	r3, [pc, #108]	; (8006b70 <mem_malloc+0x1d4>)
 8006b04:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006b08:	491e      	ldr	r1, [pc, #120]	; (8006b84 <mem_malloc+0x1e8>)
 8006b0a:	481b      	ldr	r0, [pc, #108]	; (8006b78 <mem_malloc+0x1dc>)
 8006b0c:	f00a f8b8 	bl	8010c80 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f003 0303 	and.w	r3, r3, #3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d006      	beq.n	8006b28 <mem_malloc+0x18c>
 8006b1a:	4b15      	ldr	r3, [pc, #84]	; (8006b70 <mem_malloc+0x1d4>)
 8006b1c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006b20:	4919      	ldr	r1, [pc, #100]	; (8006b88 <mem_malloc+0x1ec>)
 8006b22:	4815      	ldr	r0, [pc, #84]	; (8006b78 <mem_malloc+0x1dc>)
 8006b24:	f00a f8ac 	bl	8010c80 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f003 0303 	and.w	r3, r3, #3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d006      	beq.n	8006b40 <mem_malloc+0x1a4>
 8006b32:	4b0f      	ldr	r3, [pc, #60]	; (8006b70 <mem_malloc+0x1d4>)
 8006b34:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006b38:	4914      	ldr	r1, [pc, #80]	; (8006b8c <mem_malloc+0x1f0>)
 8006b3a:	480f      	ldr	r0, [pc, #60]	; (8006b78 <mem_malloc+0x1dc>)
 8006b3c:	f00a f8a0 	bl	8010c80 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	3308      	adds	r3, #8
 8006b44:	e00e      	b.n	8006b64 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006b46:	8bfb      	ldrh	r3, [r7, #30]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7ff fc83 	bl	8006454 <ptr_to_mem>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	881b      	ldrh	r3, [r3, #0]
 8006b52:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006b54:	8bfa      	ldrh	r2, [r7, #30]
 8006b56:	8bbb      	ldrh	r3, [r7, #28]
 8006b58:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	f4ff af44 	bcc.w	80069ea <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3720      	adds	r7, #32
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	200057f0 	.word	0x200057f0
 8006b70:	0801210c 	.word	0x0801210c
 8006b74:	080122b4 	.word	0x080122b4
 8006b78:	08012154 	.word	0x08012154
 8006b7c:	200057ec 	.word	0x200057ec
 8006b80:	080122c8 	.word	0x080122c8
 8006b84:	080122e4 	.word	0x080122e4
 8006b88:	08012314 	.word	0x08012314
 8006b8c:	08012344 	.word	0x08012344

08006b90 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	3303      	adds	r3, #3
 8006ba6:	f023 0303 	bic.w	r3, r3, #3
 8006baa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006bac:	2300      	movs	r3, #0
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	e011      	b.n	8006bd6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	4413      	add	r3, r2
 8006bce:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	60fb      	str	r3, [r7, #12]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	885b      	ldrh	r3, [r3, #2]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4293      	cmp	r3, r2
 8006be0:	dbe7      	blt.n	8006bb2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006be2:	bf00      	nop
 8006be4:	bf00      	nop
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	80fb      	strh	r3, [r7, #6]
 8006bfa:	e009      	b.n	8006c10 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006bfc:	88fb      	ldrh	r3, [r7, #6]
 8006bfe:	4a08      	ldr	r2, [pc, #32]	; (8006c20 <memp_init+0x30>)
 8006c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7ff ffc3 	bl	8006b90 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006c0a:	88fb      	ldrh	r3, [r7, #6]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	80fb      	strh	r3, [r7, #6]
 8006c10:	88fb      	ldrh	r3, [r7, #6]
 8006c12:	2b08      	cmp	r3, #8
 8006c14:	d9f2      	bls.n	8006bfc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	08015004 	.word	0x08015004

08006c24 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d012      	beq.n	8006c60 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	6812      	ldr	r2, [r2, #0]
 8006c42:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f003 0303 	and.w	r3, r3, #3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d006      	beq.n	8006c5c <do_memp_malloc_pool+0x38>
 8006c4e:	4b07      	ldr	r3, [pc, #28]	; (8006c6c <do_memp_malloc_pool+0x48>)
 8006c50:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006c54:	4906      	ldr	r1, [pc, #24]	; (8006c70 <do_memp_malloc_pool+0x4c>)
 8006c56:	4807      	ldr	r0, [pc, #28]	; (8006c74 <do_memp_malloc_pool+0x50>)
 8006c58:	f00a f812 	bl	8010c80 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	e000      	b.n	8006c62 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	08012368 	.word	0x08012368
 8006c70:	08012398 	.word	0x08012398
 8006c74:	080123bc 	.word	0x080123bc

08006c78 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d106      	bne.n	8006c94 <memp_malloc_pool+0x1c>
 8006c86:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <memp_malloc_pool+0x38>)
 8006c88:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8006c8c:	4909      	ldr	r1, [pc, #36]	; (8006cb4 <memp_malloc_pool+0x3c>)
 8006c8e:	480a      	ldr	r0, [pc, #40]	; (8006cb8 <memp_malloc_pool+0x40>)
 8006c90:	f009 fff6 	bl	8010c80 <iprintf>
  if (desc == NULL) {
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <memp_malloc_pool+0x26>
    return NULL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	e003      	b.n	8006ca6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7ff ffc0 	bl	8006c24 <do_memp_malloc_pool>
 8006ca4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	08012368 	.word	0x08012368
 8006cb4:	080123e4 	.word	0x080123e4
 8006cb8:	080123bc 	.word	0x080123bc

08006cbc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006cc6:	79fb      	ldrb	r3, [r7, #7]
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	d908      	bls.n	8006cde <memp_malloc+0x22>
 8006ccc:	4b0a      	ldr	r3, [pc, #40]	; (8006cf8 <memp_malloc+0x3c>)
 8006cce:	f240 1257 	movw	r2, #343	; 0x157
 8006cd2:	490a      	ldr	r1, [pc, #40]	; (8006cfc <memp_malloc+0x40>)
 8006cd4:	480a      	ldr	r0, [pc, #40]	; (8006d00 <memp_malloc+0x44>)
 8006cd6:	f009 ffd3 	bl	8010c80 <iprintf>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	e008      	b.n	8006cf0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006cde:	79fb      	ldrb	r3, [r7, #7]
 8006ce0:	4a08      	ldr	r2, [pc, #32]	; (8006d04 <memp_malloc+0x48>)
 8006ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7ff ff9c 	bl	8006c24 <do_memp_malloc_pool>
 8006cec:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006cee:	68fb      	ldr	r3, [r7, #12]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	08012368 	.word	0x08012368
 8006cfc:	080123f8 	.word	0x080123f8
 8006d00:	080123bc 	.word	0x080123bc
 8006d04:	08015004 	.word	0x08015004

08006d08 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	f003 0303 	and.w	r3, r3, #3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d006      	beq.n	8006d2a <do_memp_free_pool+0x22>
 8006d1c:	4b0a      	ldr	r3, [pc, #40]	; (8006d48 <do_memp_free_pool+0x40>)
 8006d1e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006d22:	490a      	ldr	r1, [pc, #40]	; (8006d4c <do_memp_free_pool+0x44>)
 8006d24:	480a      	ldr	r0, [pc, #40]	; (8006d50 <do_memp_free_pool+0x48>)
 8006d26:	f009 ffab 	bl	8010c80 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006d40:	bf00      	nop
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	08012368 	.word	0x08012368
 8006d4c:	08012418 	.word	0x08012418
 8006d50:	080123bc 	.word	0x080123bc

08006d54 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d106      	bne.n	8006d72 <memp_free_pool+0x1e>
 8006d64:	4b0a      	ldr	r3, [pc, #40]	; (8006d90 <memp_free_pool+0x3c>)
 8006d66:	f240 1295 	movw	r2, #405	; 0x195
 8006d6a:	490a      	ldr	r1, [pc, #40]	; (8006d94 <memp_free_pool+0x40>)
 8006d6c:	480a      	ldr	r0, [pc, #40]	; (8006d98 <memp_free_pool+0x44>)
 8006d6e:	f009 ff87 	bl	8010c80 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d007      	beq.n	8006d88 <memp_free_pool+0x34>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d004      	beq.n	8006d88 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7ff ffc1 	bl	8006d08 <do_memp_free_pool>
 8006d86:	e000      	b.n	8006d8a <memp_free_pool+0x36>
    return;
 8006d88:	bf00      	nop
}
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	08012368 	.word	0x08012368
 8006d94:	080123e4 	.word	0x080123e4
 8006d98:	080123bc 	.word	0x080123bc

08006d9c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	4603      	mov	r3, r0
 8006da4:	6039      	str	r1, [r7, #0]
 8006da6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006da8:	79fb      	ldrb	r3, [r7, #7]
 8006daa:	2b08      	cmp	r3, #8
 8006dac:	d907      	bls.n	8006dbe <memp_free+0x22>
 8006dae:	4b0c      	ldr	r3, [pc, #48]	; (8006de0 <memp_free+0x44>)
 8006db0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006db4:	490b      	ldr	r1, [pc, #44]	; (8006de4 <memp_free+0x48>)
 8006db6:	480c      	ldr	r0, [pc, #48]	; (8006de8 <memp_free+0x4c>)
 8006db8:	f009 ff62 	bl	8010c80 <iprintf>
 8006dbc:	e00c      	b.n	8006dd8 <memp_free+0x3c>

  if (mem == NULL) {
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d008      	beq.n	8006dd6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006dc4:	79fb      	ldrb	r3, [r7, #7]
 8006dc6:	4a09      	ldr	r2, [pc, #36]	; (8006dec <memp_free+0x50>)
 8006dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7ff ff9a 	bl	8006d08 <do_memp_free_pool>
 8006dd4:	e000      	b.n	8006dd8 <memp_free+0x3c>
    return;
 8006dd6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	08012368 	.word	0x08012368
 8006de4:	08012438 	.word	0x08012438
 8006de8:	080123bc 	.word	0x080123bc
 8006dec:	08015004 	.word	0x08015004

08006df0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006df0:	b480      	push	{r7}
 8006df2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006df4:	bf00      	nop
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
	...

08006e00 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d108      	bne.n	8006e26 <netif_add+0x26>
 8006e14:	4b57      	ldr	r3, [pc, #348]	; (8006f74 <netif_add+0x174>)
 8006e16:	f240 1227 	movw	r2, #295	; 0x127
 8006e1a:	4957      	ldr	r1, [pc, #348]	; (8006f78 <netif_add+0x178>)
 8006e1c:	4857      	ldr	r0, [pc, #348]	; (8006f7c <netif_add+0x17c>)
 8006e1e:	f009 ff2f 	bl	8010c80 <iprintf>
 8006e22:	2300      	movs	r3, #0
 8006e24:	e0a2      	b.n	8006f6c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d108      	bne.n	8006e3e <netif_add+0x3e>
 8006e2c:	4b51      	ldr	r3, [pc, #324]	; (8006f74 <netif_add+0x174>)
 8006e2e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006e32:	4953      	ldr	r1, [pc, #332]	; (8006f80 <netif_add+0x180>)
 8006e34:	4851      	ldr	r0, [pc, #324]	; (8006f7c <netif_add+0x17c>)
 8006e36:	f009 ff23 	bl	8010c80 <iprintf>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	e096      	b.n	8006f6c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006e44:	4b4f      	ldr	r3, [pc, #316]	; (8006f84 <netif_add+0x184>)
 8006e46:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006e4e:	4b4d      	ldr	r3, [pc, #308]	; (8006f84 <netif_add+0x184>)
 8006e50:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d101      	bne.n	8006e5c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006e58:	4b4a      	ldr	r3, [pc, #296]	; (8006f84 <netif_add+0x184>)
 8006e5a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4a45      	ldr	r2, [pc, #276]	; (8006f88 <netif_add+0x188>)
 8006e72:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6a3a      	ldr	r2, [r7, #32]
 8006e8c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006e8e:	4b3f      	ldr	r3, [pc, #252]	; (8006f8c <netif_add+0x18c>)
 8006e90:	781a      	ldrb	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e9c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	68b9      	ldr	r1, [r7, #8]
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 f913 	bl	80070d0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	4798      	blx	r3
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <netif_add+0xba>
    return NULL;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	e058      	b.n	8006f6c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ec0:	2bff      	cmp	r3, #255	; 0xff
 8006ec2:	d103      	bne.n	8006ecc <netif_add+0xcc>
        netif->num = 0;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006ed0:	4b2f      	ldr	r3, [pc, #188]	; (8006f90 <netif_add+0x190>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	617b      	str	r3, [r7, #20]
 8006ed6:	e02b      	b.n	8006f30 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d106      	bne.n	8006eee <netif_add+0xee>
 8006ee0:	4b24      	ldr	r3, [pc, #144]	; (8006f74 <netif_add+0x174>)
 8006ee2:	f240 128b 	movw	r2, #395	; 0x18b
 8006ee6:	492b      	ldr	r1, [pc, #172]	; (8006f94 <netif_add+0x194>)
 8006ee8:	4824      	ldr	r0, [pc, #144]	; (8006f7c <netif_add+0x17c>)
 8006eea:	f009 fec9 	bl	8010c80 <iprintf>
        num_netifs++;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	2bff      	cmp	r3, #255	; 0xff
 8006ef8:	dd06      	ble.n	8006f08 <netif_add+0x108>
 8006efa:	4b1e      	ldr	r3, [pc, #120]	; (8006f74 <netif_add+0x174>)
 8006efc:	f240 128d 	movw	r2, #397	; 0x18d
 8006f00:	4925      	ldr	r1, [pc, #148]	; (8006f98 <netif_add+0x198>)
 8006f02:	481e      	ldr	r0, [pc, #120]	; (8006f7c <netif_add+0x17c>)
 8006f04:	f009 febc 	bl	8010c80 <iprintf>
        if (netif2->num == netif->num) {
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d108      	bne.n	8006f2a <netif_add+0x12a>
          netif->num++;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f1e:	3301      	adds	r3, #1
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8006f28:	e005      	b.n	8006f36 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1d0      	bne.n	8006ed8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1be      	bne.n	8006eba <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f42:	2bfe      	cmp	r3, #254	; 0xfe
 8006f44:	d103      	bne.n	8006f4e <netif_add+0x14e>
    netif_num = 0;
 8006f46:	4b11      	ldr	r3, [pc, #68]	; (8006f8c <netif_add+0x18c>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	701a      	strb	r2, [r3, #0]
 8006f4c:	e006      	b.n	8006f5c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f54:	3301      	adds	r3, #1
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	4b0c      	ldr	r3, [pc, #48]	; (8006f8c <netif_add+0x18c>)
 8006f5a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006f5c:	4b0c      	ldr	r3, [pc, #48]	; (8006f90 <netif_add+0x190>)
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006f64:	4a0a      	ldr	r2, [pc, #40]	; (8006f90 <netif_add+0x190>)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	08012454 	.word	0x08012454
 8006f78:	080124e8 	.word	0x080124e8
 8006f7c:	080124a4 	.word	0x080124a4
 8006f80:	08012504 	.word	0x08012504
 8006f84:	08015068 	.word	0x08015068
 8006f88:	080073ab 	.word	0x080073ab
 8006f8c:	200086e8 	.word	0x200086e8
 8006f90:	200086e0 	.word	0x200086e0
 8006f94:	08012528 	.word	0x08012528
 8006f98:	0801253c 	.word	0x0801253c

08006f9c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f002 fde9 	bl	8009b80 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006fae:	6839      	ldr	r1, [r7, #0]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f007 fb25 	bl	800e600 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006fb6:	bf00      	nop
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
	...

08006fc0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d106      	bne.n	8006fe0 <netif_do_set_ipaddr+0x20>
 8006fd2:	4b1d      	ldr	r3, [pc, #116]	; (8007048 <netif_do_set_ipaddr+0x88>)
 8006fd4:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006fd8:	491c      	ldr	r1, [pc, #112]	; (800704c <netif_do_set_ipaddr+0x8c>)
 8006fda:	481d      	ldr	r0, [pc, #116]	; (8007050 <netif_do_set_ipaddr+0x90>)
 8006fdc:	f009 fe50 	bl	8010c80 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d106      	bne.n	8006ff4 <netif_do_set_ipaddr+0x34>
 8006fe6:	4b18      	ldr	r3, [pc, #96]	; (8007048 <netif_do_set_ipaddr+0x88>)
 8006fe8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006fec:	4917      	ldr	r1, [pc, #92]	; (800704c <netif_do_set_ipaddr+0x8c>)
 8006fee:	4818      	ldr	r0, [pc, #96]	; (8007050 <netif_do_set_ipaddr+0x90>)
 8006ff0:	f009 fe46 	bl	8010c80 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d01c      	beq.n	800703c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	3304      	adds	r3, #4
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007012:	f107 0314 	add.w	r3, r7, #20
 8007016:	4619      	mov	r1, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f7ff ffbf 	bl	8006f9c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <netif_do_set_ipaddr+0x6a>
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	e000      	b.n	800702c <netif_do_set_ipaddr+0x6c>
 800702a:	2300      	movs	r3, #0
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007030:	2101      	movs	r1, #1
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 f8d2 	bl	80071dc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007038:	2301      	movs	r3, #1
 800703a:	e000      	b.n	800703e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	08012454 	.word	0x08012454
 800704c:	0801256c 	.word	0x0801256c
 8007050:	080124a4 	.word	0x080124a4

08007054 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	3308      	adds	r3, #8
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	429a      	cmp	r2, r3
 800706c:	d00a      	beq.n	8007084 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d002      	beq.n	800707a <netif_do_set_netmask+0x26>
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	e000      	b.n	800707c <netif_do_set_netmask+0x28>
 800707a:	2300      	movs	r3, #0
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007080:	2301      	movs	r3, #1
 8007082:	e000      	b.n	8007086 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007092:	b480      	push	{r7}
 8007094:	b085      	sub	sp, #20
 8007096:	af00      	add	r7, sp, #0
 8007098:	60f8      	str	r0, [r7, #12]
 800709a:	60b9      	str	r1, [r7, #8]
 800709c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	330c      	adds	r3, #12
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d00a      	beq.n	80070c2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <netif_do_set_gw+0x26>
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	e000      	b.n	80070ba <netif_do_set_gw+0x28>
 80070b8:	2300      	movs	r3, #0
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80070be:	2301      	movs	r3, #1
 80070c0:	e000      	b.n	80070c4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b088      	sub	sp, #32
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
 80070dc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80070de:	2300      	movs	r3, #0
 80070e0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80070e2:	2300      	movs	r3, #0
 80070e4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d101      	bne.n	80070f0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80070ec:	4b1c      	ldr	r3, [pc, #112]	; (8007160 <netif_set_addr+0x90>)
 80070ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80070f6:	4b1a      	ldr	r3, [pc, #104]	; (8007160 <netif_set_addr+0x90>)
 80070f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007100:	4b17      	ldr	r3, [pc, #92]	; (8007160 <netif_set_addr+0x90>)
 8007102:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <netif_set_addr+0x42>
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <netif_set_addr+0x46>
 8007112:	2301      	movs	r3, #1
 8007114:	e000      	b.n	8007118 <netif_set_addr+0x48>
 8007116:	2300      	movs	r3, #0
 8007118:	617b      	str	r3, [r7, #20]
  if (remove) {
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d006      	beq.n	800712e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007120:	f107 0310 	add.w	r3, r7, #16
 8007124:	461a      	mov	r2, r3
 8007126:	68b9      	ldr	r1, [r7, #8]
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f7ff ff49 	bl	8006fc0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800712e:	69fa      	ldr	r2, [r7, #28]
 8007130:	6879      	ldr	r1, [r7, #4]
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f7ff ff8e 	bl	8007054 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007138:	69ba      	ldr	r2, [r7, #24]
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f7ff ffa8 	bl	8007092 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d106      	bne.n	8007156 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007148:	f107 0310 	add.w	r3, r7, #16
 800714c:	461a      	mov	r2, r3
 800714e:	68b9      	ldr	r1, [r7, #8]
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f7ff ff35 	bl	8006fc0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007156:	bf00      	nop
 8007158:	3720      	adds	r7, #32
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	08015068 	.word	0x08015068

08007164 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800716c:	4a04      	ldr	r2, [pc, #16]	; (8007180 <netif_set_default+0x1c>)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007172:	bf00      	nop
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	200086e4 	.word	0x200086e4

08007184 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d107      	bne.n	80071a2 <netif_set_up+0x1e>
 8007192:	4b0f      	ldr	r3, [pc, #60]	; (80071d0 <netif_set_up+0x4c>)
 8007194:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007198:	490e      	ldr	r1, [pc, #56]	; (80071d4 <netif_set_up+0x50>)
 800719a:	480f      	ldr	r0, [pc, #60]	; (80071d8 <netif_set_up+0x54>)
 800719c:	f009 fd70 	bl	8010c80 <iprintf>
 80071a0:	e013      	b.n	80071ca <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10c      	bne.n	80071ca <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80071b6:	f043 0301 	orr.w	r3, r3, #1
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80071c2:	2103      	movs	r1, #3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f809 	bl	80071dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	08012454 	.word	0x08012454
 80071d4:	080125dc 	.word	0x080125dc
 80071d8:	080124a4 	.word	0x080124a4

080071dc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d106      	bne.n	80071fc <netif_issue_reports+0x20>
 80071ee:	4b18      	ldr	r3, [pc, #96]	; (8007250 <netif_issue_reports+0x74>)
 80071f0:	f240 326d 	movw	r2, #877	; 0x36d
 80071f4:	4917      	ldr	r1, [pc, #92]	; (8007254 <netif_issue_reports+0x78>)
 80071f6:	4818      	ldr	r0, [pc, #96]	; (8007258 <netif_issue_reports+0x7c>)
 80071f8:	f009 fd42 	bl	8010c80 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007202:	f003 0304 	and.w	r3, r3, #4
 8007206:	2b00      	cmp	r3, #0
 8007208:	d01e      	beq.n	8007248 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007210:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007214:	2b00      	cmp	r3, #0
 8007216:	d017      	beq.n	8007248 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007218:	78fb      	ldrb	r3, [r7, #3]
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b00      	cmp	r3, #0
 8007220:	d013      	beq.n	800724a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3304      	adds	r3, #4
 8007226:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00e      	beq.n	800724a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007232:	f003 0308 	and.w	r3, r3, #8
 8007236:	2b00      	cmp	r3, #0
 8007238:	d007      	beq.n	800724a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	3304      	adds	r3, #4
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f008 f947 	bl	800f4d4 <etharp_request>
 8007246:	e000      	b.n	800724a <netif_issue_reports+0x6e>
    return;
 8007248:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	08012454 	.word	0x08012454
 8007254:	080125f8 	.word	0x080125f8
 8007258:	080124a4 	.word	0x080124a4

0800725c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d107      	bne.n	800727a <netif_set_down+0x1e>
 800726a:	4b12      	ldr	r3, [pc, #72]	; (80072b4 <netif_set_down+0x58>)
 800726c:	f240 329b 	movw	r2, #923	; 0x39b
 8007270:	4911      	ldr	r1, [pc, #68]	; (80072b8 <netif_set_down+0x5c>)
 8007272:	4812      	ldr	r0, [pc, #72]	; (80072bc <netif_set_down+0x60>)
 8007274:	f009 fd04 	bl	8010c80 <iprintf>
 8007278:	e019      	b.n	80072ae <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	2b00      	cmp	r3, #0
 8007286:	d012      	beq.n	80072ae <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800728e:	f023 0301 	bic.w	r3, r3, #1
 8007292:	b2da      	uxtb	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072a0:	f003 0308 	and.w	r3, r3, #8
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d002      	beq.n	80072ae <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f007 fcd1 	bl	800ec50 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	08012454 	.word	0x08012454
 80072b8:	0801261c 	.word	0x0801261c
 80072bc:	080124a4 	.word	0x080124a4

080072c0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d107      	bne.n	80072de <netif_set_link_up+0x1e>
 80072ce:	4b13      	ldr	r3, [pc, #76]	; (800731c <netif_set_link_up+0x5c>)
 80072d0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80072d4:	4912      	ldr	r1, [pc, #72]	; (8007320 <netif_set_link_up+0x60>)
 80072d6:	4813      	ldr	r0, [pc, #76]	; (8007324 <netif_set_link_up+0x64>)
 80072d8:	f009 fcd2 	bl	8010c80 <iprintf>
 80072dc:	e01b      	b.n	8007316 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072e4:	f003 0304 	and.w	r3, r3, #4
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d114      	bne.n	8007316 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072f2:	f043 0304 	orr.w	r3, r3, #4
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80072fe:	2103      	movs	r1, #3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7ff ff6b 	bl	80071dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <netif_set_link_up+0x56>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	08012454 	.word	0x08012454
 8007320:	0801263c 	.word	0x0801263c
 8007324:	080124a4 	.word	0x080124a4

08007328 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d107      	bne.n	8007346 <netif_set_link_down+0x1e>
 8007336:	4b11      	ldr	r3, [pc, #68]	; (800737c <netif_set_link_down+0x54>)
 8007338:	f240 4206 	movw	r2, #1030	; 0x406
 800733c:	4910      	ldr	r1, [pc, #64]	; (8007380 <netif_set_link_down+0x58>)
 800733e:	4811      	ldr	r0, [pc, #68]	; (8007384 <netif_set_link_down+0x5c>)
 8007340:	f009 fc9e 	bl	8010c80 <iprintf>
 8007344:	e017      	b.n	8007376 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800734c:	f003 0304 	and.w	r3, r3, #4
 8007350:	2b00      	cmp	r3, #0
 8007352:	d010      	beq.n	8007376 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800735a:	f023 0304 	bic.w	r3, r3, #4
 800735e:	b2da      	uxtb	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d003      	beq.n	8007376 <netif_set_link_down+0x4e>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	08012454 	.word	0x08012454
 8007380:	08012660 	.word	0x08012660
 8007384:	080124a4 	.word	0x080124a4

08007388 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	61da      	str	r2, [r3, #28]
  }
}
 800739e:	bf00      	nop
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b085      	sub	sp, #20
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	60f8      	str	r0, [r7, #12]
 80073b2:	60b9      	str	r1, [r7, #8]
 80073b4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80073b6:	f06f 030b 	mvn.w	r3, #11
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
	...

080073c8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	4603      	mov	r3, r0
 80073d0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80073d2:	79fb      	ldrb	r3, [r7, #7]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d013      	beq.n	8007400 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80073d8:	4b0d      	ldr	r3, [pc, #52]	; (8007410 <netif_get_by_index+0x48>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	60fb      	str	r3, [r7, #12]
 80073de:	e00c      	b.n	80073fa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073e6:	3301      	adds	r3, #1
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	79fa      	ldrb	r2, [r7, #7]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d101      	bne.n	80073f4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	e006      	b.n	8007402 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	60fb      	str	r3, [r7, #12]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1ef      	bne.n	80073e0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	200086e0 	.word	0x200086e0

08007414 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800741a:	4b0c      	ldr	r3, [pc, #48]	; (800744c <pbuf_free_ooseq+0x38>)
 800741c:	2200      	movs	r2, #0
 800741e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007420:	4b0b      	ldr	r3, [pc, #44]	; (8007450 <pbuf_free_ooseq+0x3c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	607b      	str	r3, [r7, #4]
 8007426:	e00a      	b.n	800743e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800742c:	2b00      	cmp	r3, #0
 800742e:	d003      	beq.n	8007438 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f002 fbe3 	bl	8009bfc <tcp_free_ooseq>
      return;
 8007436:	e005      	b.n	8007444 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	607b      	str	r3, [r7, #4]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1f1      	bne.n	8007428 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	200086e9 	.word	0x200086e9
 8007450:	200086f8 	.word	0x200086f8

08007454 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007454:	b480      	push	{r7}
 8007456:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007458:	4b03      	ldr	r3, [pc, #12]	; (8007468 <pbuf_pool_is_empty+0x14>)
 800745a:	2201      	movs	r2, #1
 800745c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800745e:	bf00      	nop
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	200086e9 	.word	0x200086e9

0800746c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	4611      	mov	r1, r2
 8007478:	461a      	mov	r2, r3
 800747a:	460b      	mov	r3, r1
 800747c:	80fb      	strh	r3, [r7, #6]
 800747e:	4613      	mov	r3, r2
 8007480:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	88fa      	ldrh	r2, [r7, #6]
 8007492:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	88ba      	ldrh	r2, [r7, #4]
 8007498:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800749a:	8b3b      	ldrh	r3, [r7, #24]
 800749c:	b2da      	uxtb	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	7f3a      	ldrb	r2, [r7, #28]
 80074a6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2201      	movs	r2, #1
 80074ac:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	73da      	strb	r2, [r3, #15]
}
 80074b4:	bf00      	nop
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b08c      	sub	sp, #48	; 0x30
 80074c4:	af02      	add	r7, sp, #8
 80074c6:	4603      	mov	r3, r0
 80074c8:	71fb      	strb	r3, [r7, #7]
 80074ca:	460b      	mov	r3, r1
 80074cc:	80bb      	strh	r3, [r7, #4]
 80074ce:	4613      	mov	r3, r2
 80074d0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80074d2:	79fb      	ldrb	r3, [r7, #7]
 80074d4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80074d6:	887b      	ldrh	r3, [r7, #2]
 80074d8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80074dc:	d07f      	beq.n	80075de <pbuf_alloc+0x11e>
 80074de:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80074e2:	f300 80c8 	bgt.w	8007676 <pbuf_alloc+0x1b6>
 80074e6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80074ea:	d010      	beq.n	800750e <pbuf_alloc+0x4e>
 80074ec:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80074f0:	f300 80c1 	bgt.w	8007676 <pbuf_alloc+0x1b6>
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d002      	beq.n	80074fe <pbuf_alloc+0x3e>
 80074f8:	2b41      	cmp	r3, #65	; 0x41
 80074fa:	f040 80bc 	bne.w	8007676 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80074fe:	887a      	ldrh	r2, [r7, #2]
 8007500:	88bb      	ldrh	r3, [r7, #4]
 8007502:	4619      	mov	r1, r3
 8007504:	2000      	movs	r0, #0
 8007506:	f000 f8d1 	bl	80076ac <pbuf_alloc_reference>
 800750a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800750c:	e0bd      	b.n	800768a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800750e:	2300      	movs	r3, #0
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8007512:	2300      	movs	r3, #0
 8007514:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007516:	88bb      	ldrh	r3, [r7, #4]
 8007518:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800751a:	2008      	movs	r0, #8
 800751c:	f7ff fbce 	bl	8006cbc <memp_malloc>
 8007520:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d109      	bne.n	800753c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007528:	f7ff ff94 	bl	8007454 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	2b00      	cmp	r3, #0
 8007530:	d002      	beq.n	8007538 <pbuf_alloc+0x78>
            pbuf_free(p);
 8007532:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007534:	f000 faa8 	bl	8007a88 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007538:	2300      	movs	r3, #0
 800753a:	e0a7      	b.n	800768c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800753c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800753e:	3303      	adds	r3, #3
 8007540:	b29b      	uxth	r3, r3
 8007542:	f023 0303 	bic.w	r3, r3, #3
 8007546:	b29b      	uxth	r3, r3
 8007548:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800754c:	b29b      	uxth	r3, r3
 800754e:	8b7a      	ldrh	r2, [r7, #26]
 8007550:	4293      	cmp	r3, r2
 8007552:	bf28      	it	cs
 8007554:	4613      	movcs	r3, r2
 8007556:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007558:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800755a:	3310      	adds	r3, #16
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	4413      	add	r3, r2
 8007560:	3303      	adds	r3, #3
 8007562:	f023 0303 	bic.w	r3, r3, #3
 8007566:	4618      	mov	r0, r3
 8007568:	89f9      	ldrh	r1, [r7, #14]
 800756a:	8b7a      	ldrh	r2, [r7, #26]
 800756c:	2300      	movs	r3, #0
 800756e:	9301      	str	r3, [sp, #4]
 8007570:	887b      	ldrh	r3, [r7, #2]
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	460b      	mov	r3, r1
 8007576:	4601      	mov	r1, r0
 8007578:	6938      	ldr	r0, [r7, #16]
 800757a:	f7ff ff77 	bl	800746c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f003 0303 	and.w	r3, r3, #3
 8007586:	2b00      	cmp	r3, #0
 8007588:	d006      	beq.n	8007598 <pbuf_alloc+0xd8>
 800758a:	4b42      	ldr	r3, [pc, #264]	; (8007694 <pbuf_alloc+0x1d4>)
 800758c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007590:	4941      	ldr	r1, [pc, #260]	; (8007698 <pbuf_alloc+0x1d8>)
 8007592:	4842      	ldr	r0, [pc, #264]	; (800769c <pbuf_alloc+0x1dc>)
 8007594:	f009 fb74 	bl	8010c80 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007598:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800759a:	3303      	adds	r3, #3
 800759c:	f023 0303 	bic.w	r3, r3, #3
 80075a0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80075a4:	d106      	bne.n	80075b4 <pbuf_alloc+0xf4>
 80075a6:	4b3b      	ldr	r3, [pc, #236]	; (8007694 <pbuf_alloc+0x1d4>)
 80075a8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80075ac:	493c      	ldr	r1, [pc, #240]	; (80076a0 <pbuf_alloc+0x1e0>)
 80075ae:	483b      	ldr	r0, [pc, #236]	; (800769c <pbuf_alloc+0x1dc>)
 80075b0:	f009 fb66 	bl	8010c80 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d102      	bne.n	80075c0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	627b      	str	r3, [r7, #36]	; 0x24
 80075be:	e002      	b.n	80075c6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	693a      	ldr	r2, [r7, #16]
 80075c4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80075ca:	8b7a      	ldrh	r2, [r7, #26]
 80075cc:	89fb      	ldrh	r3, [r7, #14]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80075d2:	2300      	movs	r3, #0
 80075d4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80075d6:	8b7b      	ldrh	r3, [r7, #26]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d19e      	bne.n	800751a <pbuf_alloc+0x5a>
      break;
 80075dc:	e055      	b.n	800768a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80075de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80075e0:	3303      	adds	r3, #3
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	f023 0303 	bic.w	r3, r3, #3
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	88bb      	ldrh	r3, [r7, #4]
 80075ec:	3303      	adds	r3, #3
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	f023 0303 	bic.w	r3, r3, #3
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	4413      	add	r3, r2
 80075f8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80075fa:	8b3b      	ldrh	r3, [r7, #24]
 80075fc:	3310      	adds	r3, #16
 80075fe:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007600:	8b3a      	ldrh	r2, [r7, #24]
 8007602:	88bb      	ldrh	r3, [r7, #4]
 8007604:	3303      	adds	r3, #3
 8007606:	f023 0303 	bic.w	r3, r3, #3
 800760a:	429a      	cmp	r2, r3
 800760c:	d306      	bcc.n	800761c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800760e:	8afa      	ldrh	r2, [r7, #22]
 8007610:	88bb      	ldrh	r3, [r7, #4]
 8007612:	3303      	adds	r3, #3
 8007614:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007618:	429a      	cmp	r2, r3
 800761a:	d201      	bcs.n	8007620 <pbuf_alloc+0x160>
        return NULL;
 800761c:	2300      	movs	r3, #0
 800761e:	e035      	b.n	800768c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007620:	8afb      	ldrh	r3, [r7, #22]
 8007622:	4618      	mov	r0, r3
 8007624:	f7ff f9ba 	bl	800699c <mem_malloc>
 8007628:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	2b00      	cmp	r3, #0
 800762e:	d101      	bne.n	8007634 <pbuf_alloc+0x174>
        return NULL;
 8007630:	2300      	movs	r3, #0
 8007632:	e02b      	b.n	800768c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007634:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007636:	3310      	adds	r3, #16
 8007638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800763a:	4413      	add	r3, r2
 800763c:	3303      	adds	r3, #3
 800763e:	f023 0303 	bic.w	r3, r3, #3
 8007642:	4618      	mov	r0, r3
 8007644:	88b9      	ldrh	r1, [r7, #4]
 8007646:	88ba      	ldrh	r2, [r7, #4]
 8007648:	2300      	movs	r3, #0
 800764a:	9301      	str	r3, [sp, #4]
 800764c:	887b      	ldrh	r3, [r7, #2]
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	460b      	mov	r3, r1
 8007652:	4601      	mov	r1, r0
 8007654:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007656:	f7ff ff09 	bl	800746c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f003 0303 	and.w	r3, r3, #3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d010      	beq.n	8007688 <pbuf_alloc+0x1c8>
 8007666:	4b0b      	ldr	r3, [pc, #44]	; (8007694 <pbuf_alloc+0x1d4>)
 8007668:	f44f 7291 	mov.w	r2, #290	; 0x122
 800766c:	490d      	ldr	r1, [pc, #52]	; (80076a4 <pbuf_alloc+0x1e4>)
 800766e:	480b      	ldr	r0, [pc, #44]	; (800769c <pbuf_alloc+0x1dc>)
 8007670:	f009 fb06 	bl	8010c80 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007674:	e008      	b.n	8007688 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007676:	4b07      	ldr	r3, [pc, #28]	; (8007694 <pbuf_alloc+0x1d4>)
 8007678:	f240 1227 	movw	r2, #295	; 0x127
 800767c:	490a      	ldr	r1, [pc, #40]	; (80076a8 <pbuf_alloc+0x1e8>)
 800767e:	4807      	ldr	r0, [pc, #28]	; (800769c <pbuf_alloc+0x1dc>)
 8007680:	f009 fafe 	bl	8010c80 <iprintf>
      return NULL;
 8007684:	2300      	movs	r3, #0
 8007686:	e001      	b.n	800768c <pbuf_alloc+0x1cc>
      break;
 8007688:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800768c:	4618      	mov	r0, r3
 800768e:	3728      	adds	r7, #40	; 0x28
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	08012684 	.word	0x08012684
 8007698:	080126b4 	.word	0x080126b4
 800769c:	080126e4 	.word	0x080126e4
 80076a0:	0801270c 	.word	0x0801270c
 80076a4:	08012740 	.word	0x08012740
 80076a8:	0801276c 	.word	0x0801276c

080076ac <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af02      	add	r7, sp, #8
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	460b      	mov	r3, r1
 80076b6:	807b      	strh	r3, [r7, #2]
 80076b8:	4613      	mov	r3, r2
 80076ba:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80076bc:	883b      	ldrh	r3, [r7, #0]
 80076be:	2b41      	cmp	r3, #65	; 0x41
 80076c0:	d009      	beq.n	80076d6 <pbuf_alloc_reference+0x2a>
 80076c2:	883b      	ldrh	r3, [r7, #0]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d006      	beq.n	80076d6 <pbuf_alloc_reference+0x2a>
 80076c8:	4b0f      	ldr	r3, [pc, #60]	; (8007708 <pbuf_alloc_reference+0x5c>)
 80076ca:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80076ce:	490f      	ldr	r1, [pc, #60]	; (800770c <pbuf_alloc_reference+0x60>)
 80076d0:	480f      	ldr	r0, [pc, #60]	; (8007710 <pbuf_alloc_reference+0x64>)
 80076d2:	f009 fad5 	bl	8010c80 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80076d6:	2007      	movs	r0, #7
 80076d8:	f7ff faf0 	bl	8006cbc <memp_malloc>
 80076dc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80076e4:	2300      	movs	r3, #0
 80076e6:	e00b      	b.n	8007700 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80076e8:	8879      	ldrh	r1, [r7, #2]
 80076ea:	887a      	ldrh	r2, [r7, #2]
 80076ec:	2300      	movs	r3, #0
 80076ee:	9301      	str	r3, [sp, #4]
 80076f0:	883b      	ldrh	r3, [r7, #0]
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	460b      	mov	r3, r1
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f7ff feb7 	bl	800746c <pbuf_init_alloced_pbuf>
  return p;
 80076fe:	68fb      	ldr	r3, [r7, #12]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	08012684 	.word	0x08012684
 800770c:	08012788 	.word	0x08012788
 8007710:	080126e4 	.word	0x080126e4

08007714 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b088      	sub	sp, #32
 8007718:	af02      	add	r7, sp, #8
 800771a:	607b      	str	r3, [r7, #4]
 800771c:	4603      	mov	r3, r0
 800771e:	73fb      	strb	r3, [r7, #15]
 8007720:	460b      	mov	r3, r1
 8007722:	81bb      	strh	r3, [r7, #12]
 8007724:	4613      	mov	r3, r2
 8007726:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007728:	7bfb      	ldrb	r3, [r7, #15]
 800772a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800772c:	8a7b      	ldrh	r3, [r7, #18]
 800772e:	3303      	adds	r3, #3
 8007730:	f023 0203 	bic.w	r2, r3, #3
 8007734:	89bb      	ldrh	r3, [r7, #12]
 8007736:	441a      	add	r2, r3
 8007738:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800773a:	429a      	cmp	r2, r3
 800773c:	d901      	bls.n	8007742 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800773e:	2300      	movs	r3, #0
 8007740:	e018      	b.n	8007774 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8007742:	6a3b      	ldr	r3, [r7, #32]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d007      	beq.n	8007758 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007748:	8a7b      	ldrh	r3, [r7, #18]
 800774a:	3303      	adds	r3, #3
 800774c:	f023 0303 	bic.w	r3, r3, #3
 8007750:	6a3a      	ldr	r2, [r7, #32]
 8007752:	4413      	add	r3, r2
 8007754:	617b      	str	r3, [r7, #20]
 8007756:	e001      	b.n	800775c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007758:	2300      	movs	r3, #0
 800775a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	89b9      	ldrh	r1, [r7, #12]
 8007760:	89ba      	ldrh	r2, [r7, #12]
 8007762:	2302      	movs	r3, #2
 8007764:	9301      	str	r3, [sp, #4]
 8007766:	897b      	ldrh	r3, [r7, #10]
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	460b      	mov	r3, r1
 800776c:	6979      	ldr	r1, [r7, #20]
 800776e:	f7ff fe7d 	bl	800746c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8007772:	687b      	ldr	r3, [r7, #4]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3718      	adds	r7, #24
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	460b      	mov	r3, r1
 8007786:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d106      	bne.n	800779c <pbuf_realloc+0x20>
 800778e:	4b3a      	ldr	r3, [pc, #232]	; (8007878 <pbuf_realloc+0xfc>)
 8007790:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007794:	4939      	ldr	r1, [pc, #228]	; (800787c <pbuf_realloc+0x100>)
 8007796:	483a      	ldr	r0, [pc, #232]	; (8007880 <pbuf_realloc+0x104>)
 8007798:	f009 fa72 	bl	8010c80 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	891b      	ldrh	r3, [r3, #8]
 80077a0:	887a      	ldrh	r2, [r7, #2]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d263      	bcs.n	800786e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	891a      	ldrh	r2, [r3, #8]
 80077aa:	887b      	ldrh	r3, [r7, #2]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80077b0:	887b      	ldrh	r3, [r7, #2]
 80077b2:	817b      	strh	r3, [r7, #10]
  q = p;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80077b8:	e018      	b.n	80077ec <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	895b      	ldrh	r3, [r3, #10]
 80077be:	897a      	ldrh	r2, [r7, #10]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	891a      	ldrh	r2, [r3, #8]
 80077c8:	893b      	ldrh	r3, [r7, #8]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d106      	bne.n	80077ec <pbuf_realloc+0x70>
 80077de:	4b26      	ldr	r3, [pc, #152]	; (8007878 <pbuf_realloc+0xfc>)
 80077e0:	f240 12af 	movw	r2, #431	; 0x1af
 80077e4:	4927      	ldr	r1, [pc, #156]	; (8007884 <pbuf_realloc+0x108>)
 80077e6:	4826      	ldr	r0, [pc, #152]	; (8007880 <pbuf_realloc+0x104>)
 80077e8:	f009 fa4a 	bl	8010c80 <iprintf>
  while (rem_len > q->len) {
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	895b      	ldrh	r3, [r3, #10]
 80077f0:	897a      	ldrh	r2, [r7, #10]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d8e1      	bhi.n	80077ba <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	7b1b      	ldrb	r3, [r3, #12]
 80077fa:	f003 030f 	and.w	r3, r3, #15
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d121      	bne.n	8007846 <pbuf_realloc+0xca>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	895b      	ldrh	r3, [r3, #10]
 8007806:	897a      	ldrh	r2, [r7, #10]
 8007808:	429a      	cmp	r2, r3
 800780a:	d01c      	beq.n	8007846 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	7b5b      	ldrb	r3, [r3, #13]
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b00      	cmp	r3, #0
 8007816:	d116      	bne.n	8007846 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	b29a      	uxth	r2, r3
 8007822:	897b      	ldrh	r3, [r7, #10]
 8007824:	4413      	add	r3, r2
 8007826:	b29b      	uxth	r3, r3
 8007828:	4619      	mov	r1, r3
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f7fe ffba 	bl	80067a4 <mem_trim>
 8007830:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d106      	bne.n	8007846 <pbuf_realloc+0xca>
 8007838:	4b0f      	ldr	r3, [pc, #60]	; (8007878 <pbuf_realloc+0xfc>)
 800783a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800783e:	4912      	ldr	r1, [pc, #72]	; (8007888 <pbuf_realloc+0x10c>)
 8007840:	480f      	ldr	r0, [pc, #60]	; (8007880 <pbuf_realloc+0x104>)
 8007842:	f009 fa1d 	bl	8010c80 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	897a      	ldrh	r2, [r7, #10]
 800784a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	895a      	ldrh	r2, [r3, #10]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d004      	beq.n	8007866 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4618      	mov	r0, r3
 8007862:	f000 f911 	bl	8007a88 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	601a      	str	r2, [r3, #0]
 800786c:	e000      	b.n	8007870 <pbuf_realloc+0xf4>
    return;
 800786e:	bf00      	nop

}
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	08012684 	.word	0x08012684
 800787c:	0801279c 	.word	0x0801279c
 8007880:	080126e4 	.word	0x080126e4
 8007884:	080127b4 	.word	0x080127b4
 8007888:	080127cc 	.word	0x080127cc

0800788c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	4613      	mov	r3, r2
 8007898:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d106      	bne.n	80078ae <pbuf_add_header_impl+0x22>
 80078a0:	4b2b      	ldr	r3, [pc, #172]	; (8007950 <pbuf_add_header_impl+0xc4>)
 80078a2:	f240 12df 	movw	r2, #479	; 0x1df
 80078a6:	492b      	ldr	r1, [pc, #172]	; (8007954 <pbuf_add_header_impl+0xc8>)
 80078a8:	482b      	ldr	r0, [pc, #172]	; (8007958 <pbuf_add_header_impl+0xcc>)
 80078aa:	f009 f9e9 	bl	8010c80 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d003      	beq.n	80078bc <pbuf_add_header_impl+0x30>
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ba:	d301      	bcc.n	80078c0 <pbuf_add_header_impl+0x34>
    return 1;
 80078bc:	2301      	movs	r3, #1
 80078be:	e043      	b.n	8007948 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <pbuf_add_header_impl+0x3e>
    return 0;
 80078c6:	2300      	movs	r3, #0
 80078c8:	e03e      	b.n	8007948 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	891a      	ldrh	r2, [r3, #8]
 80078d2:	8a7b      	ldrh	r3, [r7, #18]
 80078d4:	4413      	add	r3, r2
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	8a7a      	ldrh	r2, [r7, #18]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d901      	bls.n	80078e2 <pbuf_add_header_impl+0x56>
    return 1;
 80078de:	2301      	movs	r3, #1
 80078e0:	e032      	b.n	8007948 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	7b1b      	ldrb	r3, [r3, #12]
 80078e6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80078e8:	8a3b      	ldrh	r3, [r7, #16]
 80078ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00c      	beq.n	800790c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	425b      	negs	r3, r3
 80078fa:	4413      	add	r3, r2
 80078fc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	3310      	adds	r3, #16
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	429a      	cmp	r2, r3
 8007906:	d20d      	bcs.n	8007924 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007908:	2301      	movs	r3, #1
 800790a:	e01d      	b.n	8007948 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800790c:	79fb      	ldrb	r3, [r7, #7]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d006      	beq.n	8007920 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	425b      	negs	r3, r3
 800791a:	4413      	add	r3, r2
 800791c:	617b      	str	r3, [r7, #20]
 800791e:	e001      	b.n	8007924 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007920:	2301      	movs	r3, #1
 8007922:	e011      	b.n	8007948 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	895a      	ldrh	r2, [r3, #10]
 800792e:	8a7b      	ldrh	r3, [r7, #18]
 8007930:	4413      	add	r3, r2
 8007932:	b29a      	uxth	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	891a      	ldrh	r2, [r3, #8]
 800793c:	8a7b      	ldrh	r3, [r7, #18]
 800793e:	4413      	add	r3, r2
 8007940:	b29a      	uxth	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	811a      	strh	r2, [r3, #8]


  return 0;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3718      	adds	r7, #24
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	08012684 	.word	0x08012684
 8007954:	080127e8 	.word	0x080127e8
 8007958:	080126e4 	.word	0x080126e4

0800795c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007966:	2200      	movs	r2, #0
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7ff ff8e 	bl	800788c <pbuf_add_header_impl>
 8007970:	4603      	mov	r3, r0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
	...

0800797c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d106      	bne.n	800799a <pbuf_remove_header+0x1e>
 800798c:	4b20      	ldr	r3, [pc, #128]	; (8007a10 <pbuf_remove_header+0x94>)
 800798e:	f240 224b 	movw	r2, #587	; 0x24b
 8007992:	4920      	ldr	r1, [pc, #128]	; (8007a14 <pbuf_remove_header+0x98>)
 8007994:	4820      	ldr	r0, [pc, #128]	; (8007a18 <pbuf_remove_header+0x9c>)
 8007996:	f009 f973 	bl	8010c80 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d003      	beq.n	80079a8 <pbuf_remove_header+0x2c>
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079a6:	d301      	bcc.n	80079ac <pbuf_remove_header+0x30>
    return 1;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e02c      	b.n	8007a06 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <pbuf_remove_header+0x3a>
    return 0;
 80079b2:	2300      	movs	r3, #0
 80079b4:	e027      	b.n	8007a06 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	895b      	ldrh	r3, [r3, #10]
 80079be:	89fa      	ldrh	r2, [r7, #14]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d908      	bls.n	80079d6 <pbuf_remove_header+0x5a>
 80079c4:	4b12      	ldr	r3, [pc, #72]	; (8007a10 <pbuf_remove_header+0x94>)
 80079c6:	f240 2255 	movw	r2, #597	; 0x255
 80079ca:	4914      	ldr	r1, [pc, #80]	; (8007a1c <pbuf_remove_header+0xa0>)
 80079cc:	4812      	ldr	r0, [pc, #72]	; (8007a18 <pbuf_remove_header+0x9c>)
 80079ce:	f009 f957 	bl	8010c80 <iprintf>
 80079d2:	2301      	movs	r3, #1
 80079d4:	e017      	b.n	8007a06 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685a      	ldr	r2, [r3, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	441a      	add	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	895a      	ldrh	r2, [r3, #10]
 80079ec:	89fb      	ldrh	r3, [r7, #14]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	891a      	ldrh	r2, [r3, #8]
 80079fa:	89fb      	ldrh	r3, [r7, #14]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	08012684 	.word	0x08012684
 8007a14:	080127e8 	.word	0x080127e8
 8007a18:	080126e4 	.word	0x080126e4
 8007a1c:	080127f4 	.word	0x080127f4

08007a20 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	807b      	strh	r3, [r7, #2]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007a30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	da08      	bge.n	8007a4a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007a38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a3c:	425b      	negs	r3, r3
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7ff ff9b 	bl	800797c <pbuf_remove_header>
 8007a46:	4603      	mov	r3, r0
 8007a48:	e007      	b.n	8007a5a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007a4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a4e:	787a      	ldrb	r2, [r7, #1]
 8007a50:	4619      	mov	r1, r3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7ff ff1a 	bl	800788c <pbuf_add_header_impl>
 8007a58:	4603      	mov	r3, r0
  }
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3708      	adds	r7, #8
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b082      	sub	sp, #8
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007a6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a72:	2201      	movs	r2, #1
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7ff ffd2 	bl	8007a20 <pbuf_header_impl>
 8007a7c:	4603      	mov	r3, r0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
	...

08007a88 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10b      	bne.n	8007aae <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d106      	bne.n	8007aaa <pbuf_free+0x22>
 8007a9c:	4b38      	ldr	r3, [pc, #224]	; (8007b80 <pbuf_free+0xf8>)
 8007a9e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007aa2:	4938      	ldr	r1, [pc, #224]	; (8007b84 <pbuf_free+0xfc>)
 8007aa4:	4838      	ldr	r0, [pc, #224]	; (8007b88 <pbuf_free+0x100>)
 8007aa6:	f009 f8eb 	bl	8010c80 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	e063      	b.n	8007b76 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007ab2:	e05c      	b.n	8007b6e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	7b9b      	ldrb	r3, [r3, #14]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d106      	bne.n	8007aca <pbuf_free+0x42>
 8007abc:	4b30      	ldr	r3, [pc, #192]	; (8007b80 <pbuf_free+0xf8>)
 8007abe:	f240 22f1 	movw	r2, #753	; 0x2f1
 8007ac2:	4932      	ldr	r1, [pc, #200]	; (8007b8c <pbuf_free+0x104>)
 8007ac4:	4830      	ldr	r0, [pc, #192]	; (8007b88 <pbuf_free+0x100>)
 8007ac6:	f009 f8db 	bl	8010c80 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	7b9b      	ldrb	r3, [r3, #14]
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	739a      	strb	r2, [r3, #14]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	7b9b      	ldrb	r3, [r3, #14]
 8007ada:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007adc:	7dbb      	ldrb	r3, [r7, #22]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d143      	bne.n	8007b6a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	7b1b      	ldrb	r3, [r3, #12]
 8007aec:	f003 030f 	and.w	r3, r3, #15
 8007af0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	7b5b      	ldrb	r3, [r3, #13]
 8007af6:	f003 0302 	and.w	r3, r3, #2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d011      	beq.n	8007b22 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d106      	bne.n	8007b18 <pbuf_free+0x90>
 8007b0a:	4b1d      	ldr	r3, [pc, #116]	; (8007b80 <pbuf_free+0xf8>)
 8007b0c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007b10:	491f      	ldr	r1, [pc, #124]	; (8007b90 <pbuf_free+0x108>)
 8007b12:	481d      	ldr	r0, [pc, #116]	; (8007b88 <pbuf_free+0x100>)
 8007b14:	f009 f8b4 	bl	8010c80 <iprintf>
        pc->custom_free_function(p);
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	4798      	blx	r3
 8007b20:	e01d      	b.n	8007b5e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007b22:	7bfb      	ldrb	r3, [r7, #15]
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d104      	bne.n	8007b32 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007b28:	6879      	ldr	r1, [r7, #4]
 8007b2a:	2008      	movs	r0, #8
 8007b2c:	f7ff f936 	bl	8006d9c <memp_free>
 8007b30:	e015      	b.n	8007b5e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d104      	bne.n	8007b42 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007b38:	6879      	ldr	r1, [r7, #4]
 8007b3a:	2007      	movs	r0, #7
 8007b3c:	f7ff f92e 	bl	8006d9c <memp_free>
 8007b40:	e00d      	b.n	8007b5e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007b42:	7bfb      	ldrb	r3, [r7, #15]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d103      	bne.n	8007b50 <pbuf_free+0xc8>
          mem_free(p);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7fe fdc1 	bl	80066d0 <mem_free>
 8007b4e:	e006      	b.n	8007b5e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007b50:	4b0b      	ldr	r3, [pc, #44]	; (8007b80 <pbuf_free+0xf8>)
 8007b52:	f240 320f 	movw	r2, #783	; 0x30f
 8007b56:	490f      	ldr	r1, [pc, #60]	; (8007b94 <pbuf_free+0x10c>)
 8007b58:	480b      	ldr	r0, [pc, #44]	; (8007b88 <pbuf_free+0x100>)
 8007b5a:	f009 f891 	bl	8010c80 <iprintf>
        }
      }
      count++;
 8007b5e:	7dfb      	ldrb	r3, [r7, #23]
 8007b60:	3301      	adds	r3, #1
 8007b62:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	607b      	str	r3, [r7, #4]
 8007b68:	e001      	b.n	8007b6e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d19f      	bne.n	8007ab4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3718      	adds	r7, #24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	08012684 	.word	0x08012684
 8007b84:	080127e8 	.word	0x080127e8
 8007b88:	080126e4 	.word	0x080126e4
 8007b8c:	08012814 	.word	0x08012814
 8007b90:	0801282c 	.word	0x0801282c
 8007b94:	08012850 	.word	0x08012850

08007b98 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007ba4:	e005      	b.n	8007bb2 <pbuf_clen+0x1a>
    ++len;
 8007ba6:	89fb      	ldrh	r3, [r7, #14]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1f6      	bne.n	8007ba6 <pbuf_clen+0xe>
  }
  return len;
 8007bb8:	89fb      	ldrh	r3, [r7, #14]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
	...

08007bc8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d010      	beq.n	8007bf8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	7b9b      	ldrb	r3, [r3, #14]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	b2da      	uxtb	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	7b9b      	ldrb	r3, [r3, #14]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d106      	bne.n	8007bf8 <pbuf_ref+0x30>
 8007bea:	4b05      	ldr	r3, [pc, #20]	; (8007c00 <pbuf_ref+0x38>)
 8007bec:	f240 3242 	movw	r2, #834	; 0x342
 8007bf0:	4904      	ldr	r1, [pc, #16]	; (8007c04 <pbuf_ref+0x3c>)
 8007bf2:	4805      	ldr	r0, [pc, #20]	; (8007c08 <pbuf_ref+0x40>)
 8007bf4:	f009 f844 	bl	8010c80 <iprintf>
  }
}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	08012684 	.word	0x08012684
 8007c04:	08012864 	.word	0x08012864
 8007c08:	080126e4 	.word	0x080126e4

08007c0c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d002      	beq.n	8007c22 <pbuf_cat+0x16>
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d107      	bne.n	8007c32 <pbuf_cat+0x26>
 8007c22:	4b20      	ldr	r3, [pc, #128]	; (8007ca4 <pbuf_cat+0x98>)
 8007c24:	f240 3259 	movw	r2, #857	; 0x359
 8007c28:	491f      	ldr	r1, [pc, #124]	; (8007ca8 <pbuf_cat+0x9c>)
 8007c2a:	4820      	ldr	r0, [pc, #128]	; (8007cac <pbuf_cat+0xa0>)
 8007c2c:	f009 f828 	bl	8010c80 <iprintf>
 8007c30:	e034      	b.n	8007c9c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	e00a      	b.n	8007c4e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	891a      	ldrh	r2, [r3, #8]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	891b      	ldrh	r3, [r3, #8]
 8007c40:	4413      	add	r3, r2
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	60fb      	str	r3, [r7, #12]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1f0      	bne.n	8007c38 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	891a      	ldrh	r2, [r3, #8]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	895b      	ldrh	r3, [r3, #10]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d006      	beq.n	8007c70 <pbuf_cat+0x64>
 8007c62:	4b10      	ldr	r3, [pc, #64]	; (8007ca4 <pbuf_cat+0x98>)
 8007c64:	f240 3262 	movw	r2, #866	; 0x362
 8007c68:	4911      	ldr	r1, [pc, #68]	; (8007cb0 <pbuf_cat+0xa4>)
 8007c6a:	4810      	ldr	r0, [pc, #64]	; (8007cac <pbuf_cat+0xa0>)
 8007c6c:	f009 f808 	bl	8010c80 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d006      	beq.n	8007c86 <pbuf_cat+0x7a>
 8007c78:	4b0a      	ldr	r3, [pc, #40]	; (8007ca4 <pbuf_cat+0x98>)
 8007c7a:	f240 3263 	movw	r2, #867	; 0x363
 8007c7e:	490d      	ldr	r1, [pc, #52]	; (8007cb4 <pbuf_cat+0xa8>)
 8007c80:	480a      	ldr	r0, [pc, #40]	; (8007cac <pbuf_cat+0xa0>)
 8007c82:	f008 fffd 	bl	8010c80 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	891a      	ldrh	r2, [r3, #8]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	891b      	ldrh	r3, [r3, #8]
 8007c8e:	4413      	add	r3, r2
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	08012684 	.word	0x08012684
 8007ca8:	08012878 	.word	0x08012878
 8007cac:	080126e4 	.word	0x080126e4
 8007cb0:	080128b0 	.word	0x080128b0
 8007cb4:	080128e0 	.word	0x080128e0

08007cb8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	617b      	str	r3, [r7, #20]
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d008      	beq.n	8007ce2 <pbuf_copy+0x2a>
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d005      	beq.n	8007ce2 <pbuf_copy+0x2a>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	891a      	ldrh	r2, [r3, #8]
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	891b      	ldrh	r3, [r3, #8]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d209      	bcs.n	8007cf6 <pbuf_copy+0x3e>
 8007ce2:	4b57      	ldr	r3, [pc, #348]	; (8007e40 <pbuf_copy+0x188>)
 8007ce4:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007ce8:	4956      	ldr	r1, [pc, #344]	; (8007e44 <pbuf_copy+0x18c>)
 8007cea:	4857      	ldr	r0, [pc, #348]	; (8007e48 <pbuf_copy+0x190>)
 8007cec:	f008 ffc8 	bl	8010c80 <iprintf>
 8007cf0:	f06f 030f 	mvn.w	r3, #15
 8007cf4:	e09f      	b.n	8007e36 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	895b      	ldrh	r3, [r3, #10]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	1ad2      	subs	r2, r2, r3
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	895b      	ldrh	r3, [r3, #10]
 8007d04:	4619      	mov	r1, r3
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	1acb      	subs	r3, r1, r3
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d306      	bcc.n	8007d1c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	895b      	ldrh	r3, [r3, #10]
 8007d12:	461a      	mov	r2, r3
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	60fb      	str	r3, [r7, #12]
 8007d1a:	e005      	b.n	8007d28 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	895b      	ldrh	r3, [r3, #10]
 8007d20:	461a      	mov	r2, r3
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	18d0      	adds	r0, r2, r3
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	4413      	add	r3, r2
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	f008 ff8a 	bl	8010c54 <memcpy>
    offset_to += len;
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	4413      	add	r3, r2
 8007d46:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	895b      	ldrh	r3, [r3, #10]
 8007d54:	461a      	mov	r2, r3
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d906      	bls.n	8007d6a <pbuf_copy+0xb2>
 8007d5c:	4b38      	ldr	r3, [pc, #224]	; (8007e40 <pbuf_copy+0x188>)
 8007d5e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007d62:	493a      	ldr	r1, [pc, #232]	; (8007e4c <pbuf_copy+0x194>)
 8007d64:	4838      	ldr	r0, [pc, #224]	; (8007e48 <pbuf_copy+0x190>)
 8007d66:	f008 ff8b 	bl	8010c80 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	895b      	ldrh	r3, [r3, #10]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d906      	bls.n	8007d84 <pbuf_copy+0xcc>
 8007d76:	4b32      	ldr	r3, [pc, #200]	; (8007e40 <pbuf_copy+0x188>)
 8007d78:	f240 32da 	movw	r2, #986	; 0x3da
 8007d7c:	4934      	ldr	r1, [pc, #208]	; (8007e50 <pbuf_copy+0x198>)
 8007d7e:	4832      	ldr	r0, [pc, #200]	; (8007e48 <pbuf_copy+0x190>)
 8007d80:	f008 ff7e 	bl	8010c80 <iprintf>
    if (offset_from >= p_from->len) {
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	895b      	ldrh	r3, [r3, #10]
 8007d88:	461a      	mov	r2, r3
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d304      	bcc.n	8007d9a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007d90:	2300      	movs	r3, #0
 8007d92:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	895b      	ldrh	r3, [r3, #10]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d114      	bne.n	8007dd0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007da6:	2300      	movs	r3, #0
 8007da8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10c      	bne.n	8007dd0 <pbuf_copy+0x118>
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d009      	beq.n	8007dd0 <pbuf_copy+0x118>
 8007dbc:	4b20      	ldr	r3, [pc, #128]	; (8007e40 <pbuf_copy+0x188>)
 8007dbe:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007dc2:	4924      	ldr	r1, [pc, #144]	; (8007e54 <pbuf_copy+0x19c>)
 8007dc4:	4820      	ldr	r0, [pc, #128]	; (8007e48 <pbuf_copy+0x190>)
 8007dc6:	f008 ff5b 	bl	8010c80 <iprintf>
 8007dca:	f06f 030f 	mvn.w	r3, #15
 8007dce:	e032      	b.n	8007e36 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d013      	beq.n	8007dfe <pbuf_copy+0x146>
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	895a      	ldrh	r2, [r3, #10]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	891b      	ldrh	r3, [r3, #8]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d10d      	bne.n	8007dfe <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d009      	beq.n	8007dfe <pbuf_copy+0x146>
 8007dea:	4b15      	ldr	r3, [pc, #84]	; (8007e40 <pbuf_copy+0x188>)
 8007dec:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8007df0:	4919      	ldr	r1, [pc, #100]	; (8007e58 <pbuf_copy+0x1a0>)
 8007df2:	4815      	ldr	r0, [pc, #84]	; (8007e48 <pbuf_copy+0x190>)
 8007df4:	f008 ff44 	bl	8010c80 <iprintf>
 8007df8:	f06f 0305 	mvn.w	r3, #5
 8007dfc:	e01b      	b.n	8007e36 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d013      	beq.n	8007e2c <pbuf_copy+0x174>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	895a      	ldrh	r2, [r3, #10]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	891b      	ldrh	r3, [r3, #8]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d10d      	bne.n	8007e2c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d009      	beq.n	8007e2c <pbuf_copy+0x174>
 8007e18:	4b09      	ldr	r3, [pc, #36]	; (8007e40 <pbuf_copy+0x188>)
 8007e1a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007e1e:	490e      	ldr	r1, [pc, #56]	; (8007e58 <pbuf_copy+0x1a0>)
 8007e20:	4809      	ldr	r0, [pc, #36]	; (8007e48 <pbuf_copy+0x190>)
 8007e22:	f008 ff2d 	bl	8010c80 <iprintf>
 8007e26:	f06f 0305 	mvn.w	r3, #5
 8007e2a:	e004      	b.n	8007e36 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f47f af61 	bne.w	8007cf6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3718      	adds	r7, #24
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	08012684 	.word	0x08012684
 8007e44:	0801292c 	.word	0x0801292c
 8007e48:	080126e4 	.word	0x080126e4
 8007e4c:	0801295c 	.word	0x0801295c
 8007e50:	08012974 	.word	0x08012974
 8007e54:	08012990 	.word	0x08012990
 8007e58:	080129a0 	.word	0x080129a0

08007e5c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b088      	sub	sp, #32
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	4611      	mov	r1, r2
 8007e68:	461a      	mov	r2, r3
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	80fb      	strh	r3, [r7, #6]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007e72:	2300      	movs	r3, #0
 8007e74:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007e76:	2300      	movs	r3, #0
 8007e78:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d108      	bne.n	8007e92 <pbuf_copy_partial+0x36>
 8007e80:	4b2b      	ldr	r3, [pc, #172]	; (8007f30 <pbuf_copy_partial+0xd4>)
 8007e82:	f240 420a 	movw	r2, #1034	; 0x40a
 8007e86:	492b      	ldr	r1, [pc, #172]	; (8007f34 <pbuf_copy_partial+0xd8>)
 8007e88:	482b      	ldr	r0, [pc, #172]	; (8007f38 <pbuf_copy_partial+0xdc>)
 8007e8a:	f008 fef9 	bl	8010c80 <iprintf>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	e04a      	b.n	8007f28 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d108      	bne.n	8007eaa <pbuf_copy_partial+0x4e>
 8007e98:	4b25      	ldr	r3, [pc, #148]	; (8007f30 <pbuf_copy_partial+0xd4>)
 8007e9a:	f240 420b 	movw	r2, #1035	; 0x40b
 8007e9e:	4927      	ldr	r1, [pc, #156]	; (8007f3c <pbuf_copy_partial+0xe0>)
 8007ea0:	4825      	ldr	r0, [pc, #148]	; (8007f38 <pbuf_copy_partial+0xdc>)
 8007ea2:	f008 feed 	bl	8010c80 <iprintf>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	e03e      	b.n	8007f28 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	61fb      	str	r3, [r7, #28]
 8007eae:	e034      	b.n	8007f1a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007eb0:	88bb      	ldrh	r3, [r7, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00a      	beq.n	8007ecc <pbuf_copy_partial+0x70>
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	895b      	ldrh	r3, [r3, #10]
 8007eba:	88ba      	ldrh	r2, [r7, #4]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d305      	bcc.n	8007ecc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	895b      	ldrh	r3, [r3, #10]
 8007ec4:	88ba      	ldrh	r2, [r7, #4]
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	80bb      	strh	r3, [r7, #4]
 8007eca:	e023      	b.n	8007f14 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	895a      	ldrh	r2, [r3, #10]
 8007ed0:	88bb      	ldrh	r3, [r7, #4]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007ed6:	8b3a      	ldrh	r2, [r7, #24]
 8007ed8:	88fb      	ldrh	r3, [r7, #6]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d901      	bls.n	8007ee2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007ede:	88fb      	ldrh	r3, [r7, #6]
 8007ee0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007ee2:	8b7b      	ldrh	r3, [r7, #26]
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	18d0      	adds	r0, r2, r3
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	88bb      	ldrh	r3, [r7, #4]
 8007eee:	4413      	add	r3, r2
 8007ef0:	8b3a      	ldrh	r2, [r7, #24]
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	f008 feae 	bl	8010c54 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007ef8:	8afa      	ldrh	r2, [r7, #22]
 8007efa:	8b3b      	ldrh	r3, [r7, #24]
 8007efc:	4413      	add	r3, r2
 8007efe:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007f00:	8b7a      	ldrh	r2, [r7, #26]
 8007f02:	8b3b      	ldrh	r3, [r7, #24]
 8007f04:	4413      	add	r3, r2
 8007f06:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007f08:	88fa      	ldrh	r2, [r7, #6]
 8007f0a:	8b3b      	ldrh	r3, [r7, #24]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007f10:	2300      	movs	r3, #0
 8007f12:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	61fb      	str	r3, [r7, #28]
 8007f1a:	88fb      	ldrh	r3, [r7, #6]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <pbuf_copy_partial+0xca>
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1c4      	bne.n	8007eb0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007f26:	8afb      	ldrh	r3, [r7, #22]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3720      	adds	r7, #32
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	08012684 	.word	0x08012684
 8007f34:	080129cc 	.word	0x080129cc
 8007f38:	080126e4 	.word	0x080126e4
 8007f3c:	080129ec 	.word	0x080129ec

08007f40 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	4603      	mov	r3, r0
 8007f48:	603a      	str	r2, [r7, #0]
 8007f4a:	71fb      	strb	r3, [r7, #7]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	8919      	ldrh	r1, [r3, #8]
 8007f54:	88ba      	ldrh	r2, [r7, #4]
 8007f56:	79fb      	ldrb	r3, [r7, #7]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7ff fab1 	bl	80074c0 <pbuf_alloc>
 8007f5e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d101      	bne.n	8007f6a <pbuf_clone+0x2a>
    return NULL;
 8007f66:	2300      	movs	r3, #0
 8007f68:	e011      	b.n	8007f8e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f7ff fea3 	bl	8007cb8 <pbuf_copy>
 8007f72:	4603      	mov	r3, r0
 8007f74:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007f76:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d006      	beq.n	8007f8c <pbuf_clone+0x4c>
 8007f7e:	4b06      	ldr	r3, [pc, #24]	; (8007f98 <pbuf_clone+0x58>)
 8007f80:	f240 5224 	movw	r2, #1316	; 0x524
 8007f84:	4905      	ldr	r1, [pc, #20]	; (8007f9c <pbuf_clone+0x5c>)
 8007f86:	4806      	ldr	r0, [pc, #24]	; (8007fa0 <pbuf_clone+0x60>)
 8007f88:	f008 fe7a 	bl	8010c80 <iprintf>
  return q;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	08012684 	.word	0x08012684
 8007f9c:	08012af8 	.word	0x08012af8
 8007fa0:	080126e4 	.word	0x080126e4

08007fa4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007fa8:	f008 fe82 	bl	8010cb0 <rand>
 8007fac:	4603      	mov	r3, r0
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	4b01      	ldr	r3, [pc, #4]	; (8007fc4 <tcp_init+0x20>)
 8007fbe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007fc0:	bf00      	nop
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	20000020 	.word	0x20000020

08007fc8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	7d1b      	ldrb	r3, [r3, #20]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d105      	bne.n	8007fe4 <tcp_free+0x1c>
 8007fd8:	4b06      	ldr	r3, [pc, #24]	; (8007ff4 <tcp_free+0x2c>)
 8007fda:	22d4      	movs	r2, #212	; 0xd4
 8007fdc:	4906      	ldr	r1, [pc, #24]	; (8007ff8 <tcp_free+0x30>)
 8007fde:	4807      	ldr	r0, [pc, #28]	; (8007ffc <tcp_free+0x34>)
 8007fe0:	f008 fe4e 	bl	8010c80 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007fe4:	6879      	ldr	r1, [r7, #4]
 8007fe6:	2001      	movs	r0, #1
 8007fe8:	f7fe fed8 	bl	8006d9c <memp_free>
}
 8007fec:	bf00      	nop
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	08012b84 	.word	0x08012b84
 8007ff8:	08012bb4 	.word	0x08012bb4
 8007ffc:	08012bc8 	.word	0x08012bc8

08008000 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	7d1b      	ldrb	r3, [r3, #20]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d105      	bne.n	800801c <tcp_free_listen+0x1c>
 8008010:	4b06      	ldr	r3, [pc, #24]	; (800802c <tcp_free_listen+0x2c>)
 8008012:	22df      	movs	r2, #223	; 0xdf
 8008014:	4906      	ldr	r1, [pc, #24]	; (8008030 <tcp_free_listen+0x30>)
 8008016:	4807      	ldr	r0, [pc, #28]	; (8008034 <tcp_free_listen+0x34>)
 8008018:	f008 fe32 	bl	8010c80 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800801c:	6879      	ldr	r1, [r7, #4]
 800801e:	2002      	movs	r0, #2
 8008020:	f7fe febc 	bl	8006d9c <memp_free>
}
 8008024:	bf00      	nop
 8008026:	3708      	adds	r7, #8
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	08012b84 	.word	0x08012b84
 8008030:	08012bf0 	.word	0x08012bf0
 8008034:	08012bc8 	.word	0x08012bc8

08008038 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800803c:	f001 f85c 	bl	80090f8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008040:	4b07      	ldr	r3, [pc, #28]	; (8008060 <tcp_tmr+0x28>)
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	3301      	adds	r3, #1
 8008046:	b2da      	uxtb	r2, r3
 8008048:	4b05      	ldr	r3, [pc, #20]	; (8008060 <tcp_tmr+0x28>)
 800804a:	701a      	strb	r2, [r3, #0]
 800804c:	4b04      	ldr	r3, [pc, #16]	; (8008060 <tcp_tmr+0x28>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008058:	f000 fd0e 	bl	8008a78 <tcp_slowtmr>
  }
}
 800805c:	bf00      	nop
 800805e:	bd80      	pop	{r7, pc}
 8008060:	20008701 	.word	0x20008701

08008064 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d105      	bne.n	8008080 <tcp_remove_listener+0x1c>
 8008074:	4b0d      	ldr	r3, [pc, #52]	; (80080ac <tcp_remove_listener+0x48>)
 8008076:	22ff      	movs	r2, #255	; 0xff
 8008078:	490d      	ldr	r1, [pc, #52]	; (80080b0 <tcp_remove_listener+0x4c>)
 800807a:	480e      	ldr	r0, [pc, #56]	; (80080b4 <tcp_remove_listener+0x50>)
 800807c:	f008 fe00 	bl	8010c80 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	60fb      	str	r3, [r7, #12]
 8008084:	e00a      	b.n	800809c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	429a      	cmp	r2, r3
 800808e:	d102      	bne.n	8008096 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	60fb      	str	r3, [r7, #12]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1f1      	bne.n	8008086 <tcp_remove_listener+0x22>
    }
  }
}
 80080a2:	bf00      	nop
 80080a4:	bf00      	nop
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	08012b84 	.word	0x08012b84
 80080b0:	08012c0c 	.word	0x08012c0c
 80080b4:	08012bc8 	.word	0x08012bc8

080080b8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d106      	bne.n	80080d4 <tcp_listen_closed+0x1c>
 80080c6:	4b14      	ldr	r3, [pc, #80]	; (8008118 <tcp_listen_closed+0x60>)
 80080c8:	f240 1211 	movw	r2, #273	; 0x111
 80080cc:	4913      	ldr	r1, [pc, #76]	; (800811c <tcp_listen_closed+0x64>)
 80080ce:	4814      	ldr	r0, [pc, #80]	; (8008120 <tcp_listen_closed+0x68>)
 80080d0:	f008 fdd6 	bl	8010c80 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	7d1b      	ldrb	r3, [r3, #20]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d006      	beq.n	80080ea <tcp_listen_closed+0x32>
 80080dc:	4b0e      	ldr	r3, [pc, #56]	; (8008118 <tcp_listen_closed+0x60>)
 80080de:	f44f 7289 	mov.w	r2, #274	; 0x112
 80080e2:	4910      	ldr	r1, [pc, #64]	; (8008124 <tcp_listen_closed+0x6c>)
 80080e4:	480e      	ldr	r0, [pc, #56]	; (8008120 <tcp_listen_closed+0x68>)
 80080e6:	f008 fdcb 	bl	8010c80 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80080ea:	2301      	movs	r3, #1
 80080ec:	60fb      	str	r3, [r7, #12]
 80080ee:	e00b      	b.n	8008108 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80080f0:	4a0d      	ldr	r2, [pc, #52]	; (8008128 <tcp_listen_closed+0x70>)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6879      	ldr	r1, [r7, #4]
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7ff ffb1 	bl	8008064 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3301      	adds	r3, #1
 8008106:	60fb      	str	r3, [r7, #12]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2b03      	cmp	r3, #3
 800810c:	d9f0      	bls.n	80080f0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800810e:	bf00      	nop
 8008110:	bf00      	nop
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	08012b84 	.word	0x08012b84
 800811c:	08012c34 	.word	0x08012c34
 8008120:	08012bc8 	.word	0x08012bc8
 8008124:	08012c40 	.word	0x08012c40
 8008128:	08015040 	.word	0x08015040

0800812c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800812c:	b5b0      	push	{r4, r5, r7, lr}
 800812e:	b088      	sub	sp, #32
 8008130:	af04      	add	r7, sp, #16
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	460b      	mov	r3, r1
 8008136:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d106      	bne.n	800814c <tcp_close_shutdown+0x20>
 800813e:	4b63      	ldr	r3, [pc, #396]	; (80082cc <tcp_close_shutdown+0x1a0>)
 8008140:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008144:	4962      	ldr	r1, [pc, #392]	; (80082d0 <tcp_close_shutdown+0x1a4>)
 8008146:	4863      	ldr	r0, [pc, #396]	; (80082d4 <tcp_close_shutdown+0x1a8>)
 8008148:	f008 fd9a 	bl	8010c80 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800814c:	78fb      	ldrb	r3, [r7, #3]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d066      	beq.n	8008220 <tcp_close_shutdown+0xf4>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	7d1b      	ldrb	r3, [r3, #20]
 8008156:	2b04      	cmp	r3, #4
 8008158:	d003      	beq.n	8008162 <tcp_close_shutdown+0x36>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	7d1b      	ldrb	r3, [r3, #20]
 800815e:	2b07      	cmp	r3, #7
 8008160:	d15e      	bne.n	8008220 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008166:	2b00      	cmp	r3, #0
 8008168:	d104      	bne.n	8008174 <tcp_close_shutdown+0x48>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800816e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008172:	d055      	beq.n	8008220 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	8b5b      	ldrh	r3, [r3, #26]
 8008178:	f003 0310 	and.w	r3, r3, #16
 800817c:	2b00      	cmp	r3, #0
 800817e:	d106      	bne.n	800818e <tcp_close_shutdown+0x62>
 8008180:	4b52      	ldr	r3, [pc, #328]	; (80082cc <tcp_close_shutdown+0x1a0>)
 8008182:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008186:	4954      	ldr	r1, [pc, #336]	; (80082d8 <tcp_close_shutdown+0x1ac>)
 8008188:	4852      	ldr	r0, [pc, #328]	; (80082d4 <tcp_close_shutdown+0x1a8>)
 800818a:	f008 fd79 	bl	8010c80 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008196:	687d      	ldr	r5, [r7, #4]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	3304      	adds	r3, #4
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	8ad2      	ldrh	r2, [r2, #22]
 80081a0:	6879      	ldr	r1, [r7, #4]
 80081a2:	8b09      	ldrh	r1, [r1, #24]
 80081a4:	9102      	str	r1, [sp, #8]
 80081a6:	9201      	str	r2, [sp, #4]
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	462b      	mov	r3, r5
 80081ac:	4622      	mov	r2, r4
 80081ae:	4601      	mov	r1, r0
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f005 fd8f 	bl	800dcd4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f001 fb6c 	bl	8009894 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80081bc:	4b47      	ldr	r3, [pc, #284]	; (80082dc <tcp_close_shutdown+0x1b0>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d105      	bne.n	80081d2 <tcp_close_shutdown+0xa6>
 80081c6:	4b45      	ldr	r3, [pc, #276]	; (80082dc <tcp_close_shutdown+0x1b0>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	4a43      	ldr	r2, [pc, #268]	; (80082dc <tcp_close_shutdown+0x1b0>)
 80081ce:	6013      	str	r3, [r2, #0]
 80081d0:	e013      	b.n	80081fa <tcp_close_shutdown+0xce>
 80081d2:	4b42      	ldr	r3, [pc, #264]	; (80082dc <tcp_close_shutdown+0x1b0>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	60fb      	str	r3, [r7, #12]
 80081d8:	e00c      	b.n	80081f4 <tcp_close_shutdown+0xc8>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d104      	bne.n	80081ee <tcp_close_shutdown+0xc2>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	68da      	ldr	r2, [r3, #12]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	60da      	str	r2, [r3, #12]
 80081ec:	e005      	b.n	80081fa <tcp_close_shutdown+0xce>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	60fb      	str	r3, [r7, #12]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1ef      	bne.n	80081da <tcp_close_shutdown+0xae>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	60da      	str	r2, [r3, #12]
 8008200:	4b37      	ldr	r3, [pc, #220]	; (80082e0 <tcp_close_shutdown+0x1b4>)
 8008202:	2201      	movs	r2, #1
 8008204:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008206:	4b37      	ldr	r3, [pc, #220]	; (80082e4 <tcp_close_shutdown+0x1b8>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	429a      	cmp	r2, r3
 800820e:	d102      	bne.n	8008216 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008210:	f004 f804 	bl	800c21c <tcp_trigger_input_pcb_close>
 8008214:	e002      	b.n	800821c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7ff fed6 	bl	8007fc8 <tcp_free>
      }
      return ERR_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	e050      	b.n	80082c2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	7d1b      	ldrb	r3, [r3, #20]
 8008224:	2b02      	cmp	r3, #2
 8008226:	d03b      	beq.n	80082a0 <tcp_close_shutdown+0x174>
 8008228:	2b02      	cmp	r3, #2
 800822a:	dc44      	bgt.n	80082b6 <tcp_close_shutdown+0x18a>
 800822c:	2b00      	cmp	r3, #0
 800822e:	d002      	beq.n	8008236 <tcp_close_shutdown+0x10a>
 8008230:	2b01      	cmp	r3, #1
 8008232:	d02a      	beq.n	800828a <tcp_close_shutdown+0x15e>
 8008234:	e03f      	b.n	80082b6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	8adb      	ldrh	r3, [r3, #22]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d021      	beq.n	8008282 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800823e:	4b2a      	ldr	r3, [pc, #168]	; (80082e8 <tcp_close_shutdown+0x1bc>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	429a      	cmp	r2, r3
 8008246:	d105      	bne.n	8008254 <tcp_close_shutdown+0x128>
 8008248:	4b27      	ldr	r3, [pc, #156]	; (80082e8 <tcp_close_shutdown+0x1bc>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	4a26      	ldr	r2, [pc, #152]	; (80082e8 <tcp_close_shutdown+0x1bc>)
 8008250:	6013      	str	r3, [r2, #0]
 8008252:	e013      	b.n	800827c <tcp_close_shutdown+0x150>
 8008254:	4b24      	ldr	r3, [pc, #144]	; (80082e8 <tcp_close_shutdown+0x1bc>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	60bb      	str	r3, [r7, #8]
 800825a:	e00c      	b.n	8008276 <tcp_close_shutdown+0x14a>
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	429a      	cmp	r2, r3
 8008264:	d104      	bne.n	8008270 <tcp_close_shutdown+0x144>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68da      	ldr	r2, [r3, #12]
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	60da      	str	r2, [r3, #12]
 800826e:	e005      	b.n	800827c <tcp_close_shutdown+0x150>
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	60bb      	str	r3, [r7, #8]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1ef      	bne.n	800825c <tcp_close_shutdown+0x130>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7ff fea0 	bl	8007fc8 <tcp_free>
      break;
 8008288:	e01a      	b.n	80082c0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f7ff ff14 	bl	80080b8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008290:	6879      	ldr	r1, [r7, #4]
 8008292:	4816      	ldr	r0, [pc, #88]	; (80082ec <tcp_close_shutdown+0x1c0>)
 8008294:	f001 fb4e 	bl	8009934 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f7ff feb1 	bl	8008000 <tcp_free_listen>
      break;
 800829e:	e00f      	b.n	80082c0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80082a0:	6879      	ldr	r1, [r7, #4]
 80082a2:	480e      	ldr	r0, [pc, #56]	; (80082dc <tcp_close_shutdown+0x1b0>)
 80082a4:	f001 fb46 	bl	8009934 <tcp_pcb_remove>
 80082a8:	4b0d      	ldr	r3, [pc, #52]	; (80082e0 <tcp_close_shutdown+0x1b4>)
 80082aa:	2201      	movs	r2, #1
 80082ac:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7ff fe8a 	bl	8007fc8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80082b4:	e004      	b.n	80082c0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f81a 	bl	80082f0 <tcp_close_shutdown_fin>
 80082bc:	4603      	mov	r3, r0
 80082be:	e000      	b.n	80082c2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bdb0      	pop	{r4, r5, r7, pc}
 80082ca:	bf00      	nop
 80082cc:	08012b84 	.word	0x08012b84
 80082d0:	08012c58 	.word	0x08012c58
 80082d4:	08012bc8 	.word	0x08012bc8
 80082d8:	08012c78 	.word	0x08012c78
 80082dc:	200086f8 	.word	0x200086f8
 80082e0:	20008700 	.word	0x20008700
 80082e4:	20008738 	.word	0x20008738
 80082e8:	200086f0 	.word	0x200086f0
 80082ec:	200086f4 	.word	0x200086f4

080082f0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d106      	bne.n	800830c <tcp_close_shutdown_fin+0x1c>
 80082fe:	4b2e      	ldr	r3, [pc, #184]	; (80083b8 <tcp_close_shutdown_fin+0xc8>)
 8008300:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008304:	492d      	ldr	r1, [pc, #180]	; (80083bc <tcp_close_shutdown_fin+0xcc>)
 8008306:	482e      	ldr	r0, [pc, #184]	; (80083c0 <tcp_close_shutdown_fin+0xd0>)
 8008308:	f008 fcba 	bl	8010c80 <iprintf>

  switch (pcb->state) {
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	7d1b      	ldrb	r3, [r3, #20]
 8008310:	2b07      	cmp	r3, #7
 8008312:	d020      	beq.n	8008356 <tcp_close_shutdown_fin+0x66>
 8008314:	2b07      	cmp	r3, #7
 8008316:	dc2b      	bgt.n	8008370 <tcp_close_shutdown_fin+0x80>
 8008318:	2b03      	cmp	r3, #3
 800831a:	d002      	beq.n	8008322 <tcp_close_shutdown_fin+0x32>
 800831c:	2b04      	cmp	r3, #4
 800831e:	d00d      	beq.n	800833c <tcp_close_shutdown_fin+0x4c>
 8008320:	e026      	b.n	8008370 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f004 fde4 	bl	800cef0 <tcp_send_fin>
 8008328:	4603      	mov	r3, r0
 800832a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800832c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d11f      	bne.n	8008374 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2205      	movs	r2, #5
 8008338:	751a      	strb	r2, [r3, #20]
      }
      break;
 800833a:	e01b      	b.n	8008374 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f004 fdd7 	bl	800cef0 <tcp_send_fin>
 8008342:	4603      	mov	r3, r0
 8008344:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d114      	bne.n	8008378 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2205      	movs	r2, #5
 8008352:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008354:	e010      	b.n	8008378 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f004 fdca 	bl	800cef0 <tcp_send_fin>
 800835c:	4603      	mov	r3, r0
 800835e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d109      	bne.n	800837c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2209      	movs	r2, #9
 800836c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800836e:	e005      	b.n	800837c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008370:	2300      	movs	r3, #0
 8008372:	e01c      	b.n	80083ae <tcp_close_shutdown_fin+0xbe>
      break;
 8008374:	bf00      	nop
 8008376:	e002      	b.n	800837e <tcp_close_shutdown_fin+0x8e>
      break;
 8008378:	bf00      	nop
 800837a:	e000      	b.n	800837e <tcp_close_shutdown_fin+0x8e>
      break;
 800837c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800837e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d103      	bne.n	800838e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f004 fef0 	bl	800d16c <tcp_output>
 800838c:	e00d      	b.n	80083aa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800838e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008396:	d108      	bne.n	80083aa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	8b5b      	ldrh	r3, [r3, #26]
 800839c:	f043 0308 	orr.w	r3, r3, #8
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	e001      	b.n	80083ae <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80083aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	08012b84 	.word	0x08012b84
 80083bc:	08012c34 	.word	0x08012c34
 80083c0:	08012bc8 	.word	0x08012bc8

080083c4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d109      	bne.n	80083e6 <tcp_close+0x22>
 80083d2:	4b0f      	ldr	r3, [pc, #60]	; (8008410 <tcp_close+0x4c>)
 80083d4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80083d8:	490e      	ldr	r1, [pc, #56]	; (8008414 <tcp_close+0x50>)
 80083da:	480f      	ldr	r0, [pc, #60]	; (8008418 <tcp_close+0x54>)
 80083dc:	f008 fc50 	bl	8010c80 <iprintf>
 80083e0:	f06f 030f 	mvn.w	r3, #15
 80083e4:	e00f      	b.n	8008406 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	7d1b      	ldrb	r3, [r3, #20]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d006      	beq.n	80083fc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	8b5b      	ldrh	r3, [r3, #26]
 80083f2:	f043 0310 	orr.w	r3, r3, #16
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80083fc:	2101      	movs	r1, #1
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7ff fe94 	bl	800812c <tcp_close_shutdown>
 8008404:	4603      	mov	r3, r0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	08012b84 	.word	0x08012b84
 8008414:	08012c94 	.word	0x08012c94
 8008418:	08012bc8 	.word	0x08012bc8

0800841c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08e      	sub	sp, #56	; 0x38
 8008420:	af04      	add	r7, sp, #16
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d107      	bne.n	800843c <tcp_abandon+0x20>
 800842c:	4b52      	ldr	r3, [pc, #328]	; (8008578 <tcp_abandon+0x15c>)
 800842e:	f240 223d 	movw	r2, #573	; 0x23d
 8008432:	4952      	ldr	r1, [pc, #328]	; (800857c <tcp_abandon+0x160>)
 8008434:	4852      	ldr	r0, [pc, #328]	; (8008580 <tcp_abandon+0x164>)
 8008436:	f008 fc23 	bl	8010c80 <iprintf>
 800843a:	e099      	b.n	8008570 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	7d1b      	ldrb	r3, [r3, #20]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d106      	bne.n	8008452 <tcp_abandon+0x36>
 8008444:	4b4c      	ldr	r3, [pc, #304]	; (8008578 <tcp_abandon+0x15c>)
 8008446:	f44f 7210 	mov.w	r2, #576	; 0x240
 800844a:	494e      	ldr	r1, [pc, #312]	; (8008584 <tcp_abandon+0x168>)
 800844c:	484c      	ldr	r0, [pc, #304]	; (8008580 <tcp_abandon+0x164>)
 800844e:	f008 fc17 	bl	8010c80 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	7d1b      	ldrb	r3, [r3, #20]
 8008456:	2b0a      	cmp	r3, #10
 8008458:	d107      	bne.n	800846a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800845a:	6879      	ldr	r1, [r7, #4]
 800845c:	484a      	ldr	r0, [pc, #296]	; (8008588 <tcp_abandon+0x16c>)
 800845e:	f001 fa69 	bl	8009934 <tcp_pcb_remove>
    tcp_free(pcb);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7ff fdb0 	bl	8007fc8 <tcp_free>
 8008468:	e082      	b.n	8008570 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800846a:	2300      	movs	r3, #0
 800846c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800846e:	2300      	movs	r3, #0
 8008470:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008476:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008484:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	7d1b      	ldrb	r3, [r3, #20]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d126      	bne.n	80084e2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	8adb      	ldrh	r3, [r3, #22]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d02e      	beq.n	80084fa <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800849c:	4b3b      	ldr	r3, [pc, #236]	; (800858c <tcp_abandon+0x170>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d105      	bne.n	80084b2 <tcp_abandon+0x96>
 80084a6:	4b39      	ldr	r3, [pc, #228]	; (800858c <tcp_abandon+0x170>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	4a37      	ldr	r2, [pc, #220]	; (800858c <tcp_abandon+0x170>)
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	e013      	b.n	80084da <tcp_abandon+0xbe>
 80084b2:	4b36      	ldr	r3, [pc, #216]	; (800858c <tcp_abandon+0x170>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	61fb      	str	r3, [r7, #28]
 80084b8:	e00c      	b.n	80084d4 <tcp_abandon+0xb8>
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d104      	bne.n	80084ce <tcp_abandon+0xb2>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	68da      	ldr	r2, [r3, #12]
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	60da      	str	r2, [r3, #12]
 80084cc:	e005      	b.n	80084da <tcp_abandon+0xbe>
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	61fb      	str	r3, [r7, #28]
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1ef      	bne.n	80084ba <tcp_abandon+0x9e>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	60da      	str	r2, [r3, #12]
 80084e0:	e00b      	b.n	80084fa <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	8adb      	ldrh	r3, [r3, #22]
 80084ea:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80084ec:	6879      	ldr	r1, [r7, #4]
 80084ee:	4828      	ldr	r0, [pc, #160]	; (8008590 <tcp_abandon+0x174>)
 80084f0:	f001 fa20 	bl	8009934 <tcp_pcb_remove>
 80084f4:	4b27      	ldr	r3, [pc, #156]	; (8008594 <tcp_abandon+0x178>)
 80084f6:	2201      	movs	r2, #1
 80084f8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d004      	beq.n	800850c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008506:	4618      	mov	r0, r3
 8008508:	f000 fed6 	bl	80092b8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008510:	2b00      	cmp	r3, #0
 8008512:	d004      	beq.n	800851e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008518:	4618      	mov	r0, r3
 800851a:	f000 fecd 	bl	80092b8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008522:	2b00      	cmp	r3, #0
 8008524:	d004      	beq.n	8008530 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800852a:	4618      	mov	r0, r3
 800852c:	f000 fec4 	bl	80092b8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00e      	beq.n	8008554 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008536:	6879      	ldr	r1, [r7, #4]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	3304      	adds	r3, #4
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	8b12      	ldrh	r2, [r2, #24]
 8008540:	9202      	str	r2, [sp, #8]
 8008542:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008544:	9201      	str	r2, [sp, #4]
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	460b      	mov	r3, r1
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	69b9      	ldr	r1, [r7, #24]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f005 fbc0 	bl	800dcd4 <tcp_rst>
    }
    last_state = pcb->state;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	7d1b      	ldrb	r3, [r3, #20]
 8008558:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7ff fd34 	bl	8007fc8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d004      	beq.n	8008570 <tcp_abandon+0x154>
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	f06f 010c 	mvn.w	r1, #12
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	4798      	blx	r3
  }
}
 8008570:	3728      	adds	r7, #40	; 0x28
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	08012b84 	.word	0x08012b84
 800857c:	08012cc8 	.word	0x08012cc8
 8008580:	08012bc8 	.word	0x08012bc8
 8008584:	08012ce4 	.word	0x08012ce4
 8008588:	200086fc 	.word	0x200086fc
 800858c:	200086f0 	.word	0x200086f0
 8008590:	200086f8 	.word	0x200086f8
 8008594:	20008700 	.word	0x20008700

08008598 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80085a0:	2101      	movs	r1, #1
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7ff ff3a 	bl	800841c <tcp_abandon>
}
 80085a8:	bf00      	nop
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	4613      	mov	r3, r2
 80085bc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80085be:	2304      	movs	r3, #4
 80085c0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d101      	bne.n	80085cc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80085c8:	4b3e      	ldr	r3, [pc, #248]	; (80086c4 <tcp_bind+0x114>)
 80085ca:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d109      	bne.n	80085e6 <tcp_bind+0x36>
 80085d2:	4b3d      	ldr	r3, [pc, #244]	; (80086c8 <tcp_bind+0x118>)
 80085d4:	f240 22a9 	movw	r2, #681	; 0x2a9
 80085d8:	493c      	ldr	r1, [pc, #240]	; (80086cc <tcp_bind+0x11c>)
 80085da:	483d      	ldr	r0, [pc, #244]	; (80086d0 <tcp_bind+0x120>)
 80085dc:	f008 fb50 	bl	8010c80 <iprintf>
 80085e0:	f06f 030f 	mvn.w	r3, #15
 80085e4:	e06a      	b.n	80086bc <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	7d1b      	ldrb	r3, [r3, #20]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d009      	beq.n	8008602 <tcp_bind+0x52>
 80085ee:	4b36      	ldr	r3, [pc, #216]	; (80086c8 <tcp_bind+0x118>)
 80085f0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80085f4:	4937      	ldr	r1, [pc, #220]	; (80086d4 <tcp_bind+0x124>)
 80085f6:	4836      	ldr	r0, [pc, #216]	; (80086d0 <tcp_bind+0x120>)
 80085f8:	f008 fb42 	bl	8010c80 <iprintf>
 80085fc:	f06f 0305 	mvn.w	r3, #5
 8008600:	e05c      	b.n	80086bc <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8008602:	88fb      	ldrh	r3, [r7, #6]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d109      	bne.n	800861c <tcp_bind+0x6c>
    port = tcp_new_port();
 8008608:	f000 f9f0 	bl	80089ec <tcp_new_port>
 800860c:	4603      	mov	r3, r0
 800860e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8008610:	88fb      	ldrh	r3, [r7, #6]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d135      	bne.n	8008682 <tcp_bind+0xd2>
      return ERR_BUF;
 8008616:	f06f 0301 	mvn.w	r3, #1
 800861a:	e04f      	b.n	80086bc <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800861c:	2300      	movs	r3, #0
 800861e:	61fb      	str	r3, [r7, #28]
 8008620:	e02b      	b.n	800867a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008622:	4a2d      	ldr	r2, [pc, #180]	; (80086d8 <tcp_bind+0x128>)
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	61bb      	str	r3, [r7, #24]
 800862e:	e01e      	b.n	800866e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	8adb      	ldrh	r3, [r3, #22]
 8008634:	88fa      	ldrh	r2, [r7, #6]
 8008636:	429a      	cmp	r2, r3
 8008638:	d116      	bne.n	8008668 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800863a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800863c:	2b00      	cmp	r3, #0
 800863e:	d010      	beq.n	8008662 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00c      	beq.n	8008662 <tcp_bind+0xb2>
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d009      	beq.n	8008662 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d005      	beq.n	8008662 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800865e:	429a      	cmp	r2, r3
 8008660:	d102      	bne.n	8008668 <tcp_bind+0xb8>
              return ERR_USE;
 8008662:	f06f 0307 	mvn.w	r3, #7
 8008666:	e029      	b.n	80086bc <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	61bb      	str	r3, [r7, #24]
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1dd      	bne.n	8008630 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	3301      	adds	r3, #1
 8008678:	61fb      	str	r3, [r7, #28]
 800867a:	69fa      	ldr	r2, [r7, #28]
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	429a      	cmp	r2, r3
 8008680:	dbcf      	blt.n	8008622 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00c      	beq.n	80086a2 <tcp_bind+0xf2>
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d008      	beq.n	80086a2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d002      	beq.n	800869c <tcp_bind+0xec>
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	e000      	b.n	800869e <tcp_bind+0xee>
 800869c:	2300      	movs	r3, #0
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	88fa      	ldrh	r2, [r7, #6]
 80086a6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80086a8:	4b0c      	ldr	r3, [pc, #48]	; (80086dc <tcp_bind+0x12c>)
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	60da      	str	r2, [r3, #12]
 80086b0:	4a0a      	ldr	r2, [pc, #40]	; (80086dc <tcp_bind+0x12c>)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6013      	str	r3, [r2, #0]
 80086b6:	f005 fccf 	bl	800e058 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3720      	adds	r7, #32
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	08015068 	.word	0x08015068
 80086c8:	08012b84 	.word	0x08012b84
 80086cc:	08012d18 	.word	0x08012d18
 80086d0:	08012bc8 	.word	0x08012bc8
 80086d4:	08012d30 	.word	0x08012d30
 80086d8:	08015040 	.word	0x08015040
 80086dc:	200086f0 	.word	0x200086f0

080086e0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	4613      	mov	r3, r2
 80086ec:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d106      	bne.n	8008702 <tcp_accept_null+0x22>
 80086f4:	4b07      	ldr	r3, [pc, #28]	; (8008714 <tcp_accept_null+0x34>)
 80086f6:	f240 320f 	movw	r2, #783	; 0x30f
 80086fa:	4907      	ldr	r1, [pc, #28]	; (8008718 <tcp_accept_null+0x38>)
 80086fc:	4807      	ldr	r0, [pc, #28]	; (800871c <tcp_accept_null+0x3c>)
 80086fe:	f008 fabf 	bl	8010c80 <iprintf>

  tcp_abort(pcb);
 8008702:	68b8      	ldr	r0, [r7, #8]
 8008704:	f7ff ff48 	bl	8008598 <tcp_abort>

  return ERR_ABRT;
 8008708:	f06f 030c 	mvn.w	r3, #12
}
 800870c:	4618      	mov	r0, r3
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	08012b84 	.word	0x08012b84
 8008718:	08012d58 	.word	0x08012d58
 800871c:	08012bc8 	.word	0x08012bc8

08008720 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	460b      	mov	r3, r1
 800872a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800872c:	78fb      	ldrb	r3, [r7, #3]
 800872e:	2200      	movs	r2, #0
 8008730:	4619      	mov	r1, r3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 f806 	bl	8008744 <tcp_listen_with_backlog_and_err>
 8008738:	4603      	mov	r3, r0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
	...

08008744 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b088      	sub	sp, #32
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	460b      	mov	r3, r1
 800874e:	607a      	str	r2, [r7, #4]
 8008750:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8008752:	2300      	movs	r3, #0
 8008754:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d109      	bne.n	8008770 <tcp_listen_with_backlog_and_err+0x2c>
 800875c:	4b47      	ldr	r3, [pc, #284]	; (800887c <tcp_listen_with_backlog_and_err+0x138>)
 800875e:	f240 3259 	movw	r2, #857	; 0x359
 8008762:	4947      	ldr	r1, [pc, #284]	; (8008880 <tcp_listen_with_backlog_and_err+0x13c>)
 8008764:	4847      	ldr	r0, [pc, #284]	; (8008884 <tcp_listen_with_backlog_and_err+0x140>)
 8008766:	f008 fa8b 	bl	8010c80 <iprintf>
 800876a:	23f0      	movs	r3, #240	; 0xf0
 800876c:	76fb      	strb	r3, [r7, #27]
 800876e:	e079      	b.n	8008864 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	7d1b      	ldrb	r3, [r3, #20]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d009      	beq.n	800878c <tcp_listen_with_backlog_and_err+0x48>
 8008778:	4b40      	ldr	r3, [pc, #256]	; (800887c <tcp_listen_with_backlog_and_err+0x138>)
 800877a:	f240 325a 	movw	r2, #858	; 0x35a
 800877e:	4942      	ldr	r1, [pc, #264]	; (8008888 <tcp_listen_with_backlog_and_err+0x144>)
 8008780:	4840      	ldr	r0, [pc, #256]	; (8008884 <tcp_listen_with_backlog_and_err+0x140>)
 8008782:	f008 fa7d 	bl	8010c80 <iprintf>
 8008786:	23f1      	movs	r3, #241	; 0xf1
 8008788:	76fb      	strb	r3, [r7, #27]
 800878a:	e06b      	b.n	8008864 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	7d1b      	ldrb	r3, [r3, #20]
 8008790:	2b01      	cmp	r3, #1
 8008792:	d104      	bne.n	800879e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8008798:	23f7      	movs	r3, #247	; 0xf7
 800879a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800879c:	e062      	b.n	8008864 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800879e:	2002      	movs	r0, #2
 80087a0:	f7fe fa8c 	bl	8006cbc <memp_malloc>
 80087a4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d102      	bne.n	80087b2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80087ac:	23ff      	movs	r3, #255	; 0xff
 80087ae:	76fb      	strb	r3, [r7, #27]
    goto done;
 80087b0:	e058      	b.n	8008864 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	691a      	ldr	r2, [r3, #16]
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	8ada      	ldrh	r2, [r3, #22]
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	2201      	movs	r2, #1
 80087c6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	7d5a      	ldrb	r2, [r3, #21]
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	7a5a      	ldrb	r2, [r3, #9]
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	2200      	movs	r2, #0
 80087dc:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	7ada      	ldrb	r2, [r3, #11]
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	7a9a      	ldrb	r2, [r3, #10]
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	8adb      	ldrh	r3, [r3, #22]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d021      	beq.n	8008842 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80087fe:	4b23      	ldr	r3, [pc, #140]	; (800888c <tcp_listen_with_backlog_and_err+0x148>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	429a      	cmp	r2, r3
 8008806:	d105      	bne.n	8008814 <tcp_listen_with_backlog_and_err+0xd0>
 8008808:	4b20      	ldr	r3, [pc, #128]	; (800888c <tcp_listen_with_backlog_and_err+0x148>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	4a1f      	ldr	r2, [pc, #124]	; (800888c <tcp_listen_with_backlog_and_err+0x148>)
 8008810:	6013      	str	r3, [r2, #0]
 8008812:	e013      	b.n	800883c <tcp_listen_with_backlog_and_err+0xf8>
 8008814:	4b1d      	ldr	r3, [pc, #116]	; (800888c <tcp_listen_with_backlog_and_err+0x148>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	617b      	str	r3, [r7, #20]
 800881a:	e00c      	b.n	8008836 <tcp_listen_with_backlog_and_err+0xf2>
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	429a      	cmp	r2, r3
 8008824:	d104      	bne.n	8008830 <tcp_listen_with_backlog_and_err+0xec>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	68da      	ldr	r2, [r3, #12]
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	60da      	str	r2, [r3, #12]
 800882e:	e005      	b.n	800883c <tcp_listen_with_backlog_and_err+0xf8>
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	617b      	str	r3, [r7, #20]
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1ef      	bne.n	800881c <tcp_listen_with_backlog_and_err+0xd8>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f7ff fbc0 	bl	8007fc8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	4a11      	ldr	r2, [pc, #68]	; (8008890 <tcp_listen_with_backlog_and_err+0x14c>)
 800884c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800884e:	4b11      	ldr	r3, [pc, #68]	; (8008894 <tcp_listen_with_backlog_and_err+0x150>)
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	60da      	str	r2, [r3, #12]
 8008856:	4a0f      	ldr	r2, [pc, #60]	; (8008894 <tcp_listen_with_backlog_and_err+0x150>)
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	6013      	str	r3, [r2, #0]
 800885c:	f005 fbfc 	bl	800e058 <tcp_timer_needed>
  res = ERR_OK;
 8008860:	2300      	movs	r3, #0
 8008862:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d002      	beq.n	8008870 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	7efa      	ldrb	r2, [r7, #27]
 800886e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8008870:	69fb      	ldr	r3, [r7, #28]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3720      	adds	r7, #32
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	08012b84 	.word	0x08012b84
 8008880:	08012d78 	.word	0x08012d78
 8008884:	08012bc8 	.word	0x08012bc8
 8008888:	08012da8 	.word	0x08012da8
 800888c:	200086f0 	.word	0x200086f0
 8008890:	080086e1 	.word	0x080086e1
 8008894:	200086f4 	.word	0x200086f4

08008898 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d106      	bne.n	80088b4 <tcp_update_rcv_ann_wnd+0x1c>
 80088a6:	4b25      	ldr	r3, [pc, #148]	; (800893c <tcp_update_rcv_ann_wnd+0xa4>)
 80088a8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80088ac:	4924      	ldr	r1, [pc, #144]	; (8008940 <tcp_update_rcv_ann_wnd+0xa8>)
 80088ae:	4825      	ldr	r0, [pc, #148]	; (8008944 <tcp_update_rcv_ann_wnd+0xac>)
 80088b0:	f008 f9e6 	bl	8010c80 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80088bc:	4413      	add	r3, r2
 80088be:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80088c8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80088cc:	bf28      	it	cs
 80088ce:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80088d2:	b292      	uxth	r2, r2
 80088d4:	4413      	add	r3, r2
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	db08      	blt.n	80088f0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	e020      	b.n	8008932 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	dd03      	ble.n	8008906 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008904:	e014      	b.n	8008930 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890e:	1ad3      	subs	r3, r2, r3
 8008910:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008918:	d306      	bcc.n	8008928 <tcp_update_rcv_ann_wnd+0x90>
 800891a:	4b08      	ldr	r3, [pc, #32]	; (800893c <tcp_update_rcv_ann_wnd+0xa4>)
 800891c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008920:	4909      	ldr	r1, [pc, #36]	; (8008948 <tcp_update_rcv_ann_wnd+0xb0>)
 8008922:	4808      	ldr	r0, [pc, #32]	; (8008944 <tcp_update_rcv_ann_wnd+0xac>)
 8008924:	f008 f9ac 	bl	8010c80 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	b29a      	uxth	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8008930:	2300      	movs	r3, #0
  }
}
 8008932:	4618      	mov	r0, r3
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	08012b84 	.word	0x08012b84
 8008940:	08012de0 	.word	0x08012de0
 8008944:	08012bc8 	.word	0x08012bc8
 8008948:	08012e04 	.word	0x08012e04

0800894c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	460b      	mov	r3, r1
 8008956:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d107      	bne.n	800896e <tcp_recved+0x22>
 800895e:	4b1f      	ldr	r3, [pc, #124]	; (80089dc <tcp_recved+0x90>)
 8008960:	f240 32cf 	movw	r2, #975	; 0x3cf
 8008964:	491e      	ldr	r1, [pc, #120]	; (80089e0 <tcp_recved+0x94>)
 8008966:	481f      	ldr	r0, [pc, #124]	; (80089e4 <tcp_recved+0x98>)
 8008968:	f008 f98a 	bl	8010c80 <iprintf>
 800896c:	e032      	b.n	80089d4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	7d1b      	ldrb	r3, [r3, #20]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d106      	bne.n	8008984 <tcp_recved+0x38>
 8008976:	4b19      	ldr	r3, [pc, #100]	; (80089dc <tcp_recved+0x90>)
 8008978:	f240 32d2 	movw	r2, #978	; 0x3d2
 800897c:	491a      	ldr	r1, [pc, #104]	; (80089e8 <tcp_recved+0x9c>)
 800897e:	4819      	ldr	r0, [pc, #100]	; (80089e4 <tcp_recved+0x98>)
 8008980:	f008 f97e 	bl	8010c80 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008988:	887b      	ldrh	r3, [r7, #2]
 800898a:	4413      	add	r3, r2
 800898c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800898e:	89fb      	ldrh	r3, [r7, #14]
 8008990:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008994:	d804      	bhi.n	80089a0 <tcp_recved+0x54>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800899a:	89fa      	ldrh	r2, [r7, #14]
 800899c:	429a      	cmp	r2, r3
 800899e:	d204      	bcs.n	80089aa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80089a6:	851a      	strh	r2, [r3, #40]	; 0x28
 80089a8:	e002      	b.n	80089b0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	89fa      	ldrh	r2, [r7, #14]
 80089ae:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7ff ff71 	bl	8008898 <tcp_update_rcv_ann_wnd>
 80089b6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80089be:	d309      	bcc.n	80089d4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	8b5b      	ldrh	r3, [r3, #26]
 80089c4:	f043 0302 	orr.w	r3, r3, #2
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f004 fbcc 	bl	800d16c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	08012b84 	.word	0x08012b84
 80089e0:	08012e20 	.word	0x08012e20
 80089e4:	08012bc8 	.word	0x08012bc8
 80089e8:	08012e38 	.word	0x08012e38

080089ec <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80089f2:	2300      	movs	r3, #0
 80089f4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80089f6:	4b1e      	ldr	r3, [pc, #120]	; (8008a70 <tcp_new_port+0x84>)
 80089f8:	881b      	ldrh	r3, [r3, #0]
 80089fa:	3301      	adds	r3, #1
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	4b1c      	ldr	r3, [pc, #112]	; (8008a70 <tcp_new_port+0x84>)
 8008a00:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8008a02:	4b1b      	ldr	r3, [pc, #108]	; (8008a70 <tcp_new_port+0x84>)
 8008a04:	881b      	ldrh	r3, [r3, #0]
 8008a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d103      	bne.n	8008a16 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008a0e:	4b18      	ldr	r3, [pc, #96]	; (8008a70 <tcp_new_port+0x84>)
 8008a10:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8008a14:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008a16:	2300      	movs	r3, #0
 8008a18:	71fb      	strb	r3, [r7, #7]
 8008a1a:	e01e      	b.n	8008a5a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008a1c:	79fb      	ldrb	r3, [r7, #7]
 8008a1e:	4a15      	ldr	r2, [pc, #84]	; (8008a74 <tcp_new_port+0x88>)
 8008a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	603b      	str	r3, [r7, #0]
 8008a28:	e011      	b.n	8008a4e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	8ada      	ldrh	r2, [r3, #22]
 8008a2e:	4b10      	ldr	r3, [pc, #64]	; (8008a70 <tcp_new_port+0x84>)
 8008a30:	881b      	ldrh	r3, [r3, #0]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d108      	bne.n	8008a48 <tcp_new_port+0x5c>
        n++;
 8008a36:	88bb      	ldrh	r3, [r7, #4]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008a3c:	88bb      	ldrh	r3, [r7, #4]
 8008a3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a42:	d3d8      	bcc.n	80089f6 <tcp_new_port+0xa>
          return 0;
 8008a44:	2300      	movs	r3, #0
 8008a46:	e00d      	b.n	8008a64 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	603b      	str	r3, [r7, #0]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1ea      	bne.n	8008a2a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008a54:	79fb      	ldrb	r3, [r7, #7]
 8008a56:	3301      	adds	r3, #1
 8008a58:	71fb      	strb	r3, [r7, #7]
 8008a5a:	79fb      	ldrb	r3, [r7, #7]
 8008a5c:	2b03      	cmp	r3, #3
 8008a5e:	d9dd      	bls.n	8008a1c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008a60:	4b03      	ldr	r3, [pc, #12]	; (8008a70 <tcp_new_port+0x84>)
 8008a62:	881b      	ldrh	r3, [r3, #0]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	20000020 	.word	0x20000020
 8008a74:	08015040 	.word	0x08015040

08008a78 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008a78:	b5b0      	push	{r4, r5, r7, lr}
 8008a7a:	b090      	sub	sp, #64	; 0x40
 8008a7c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8008a84:	4b94      	ldr	r3, [pc, #592]	; (8008cd8 <tcp_slowtmr+0x260>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	4a93      	ldr	r2, [pc, #588]	; (8008cd8 <tcp_slowtmr+0x260>)
 8008a8c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008a8e:	4b93      	ldr	r3, [pc, #588]	; (8008cdc <tcp_slowtmr+0x264>)
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	3301      	adds	r3, #1
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	4b91      	ldr	r3, [pc, #580]	; (8008cdc <tcp_slowtmr+0x264>)
 8008a98:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8008a9e:	4b90      	ldr	r3, [pc, #576]	; (8008ce0 <tcp_slowtmr+0x268>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8008aa4:	e29f      	b.n	8008fe6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa8:	7d1b      	ldrb	r3, [r3, #20]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d106      	bne.n	8008abc <tcp_slowtmr+0x44>
 8008aae:	4b8d      	ldr	r3, [pc, #564]	; (8008ce4 <tcp_slowtmr+0x26c>)
 8008ab0:	f240 42be 	movw	r2, #1214	; 0x4be
 8008ab4:	498c      	ldr	r1, [pc, #560]	; (8008ce8 <tcp_slowtmr+0x270>)
 8008ab6:	488d      	ldr	r0, [pc, #564]	; (8008cec <tcp_slowtmr+0x274>)
 8008ab8:	f008 f8e2 	bl	8010c80 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abe:	7d1b      	ldrb	r3, [r3, #20]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d106      	bne.n	8008ad2 <tcp_slowtmr+0x5a>
 8008ac4:	4b87      	ldr	r3, [pc, #540]	; (8008ce4 <tcp_slowtmr+0x26c>)
 8008ac6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8008aca:	4989      	ldr	r1, [pc, #548]	; (8008cf0 <tcp_slowtmr+0x278>)
 8008acc:	4887      	ldr	r0, [pc, #540]	; (8008cec <tcp_slowtmr+0x274>)
 8008ace:	f008 f8d7 	bl	8010c80 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad4:	7d1b      	ldrb	r3, [r3, #20]
 8008ad6:	2b0a      	cmp	r3, #10
 8008ad8:	d106      	bne.n	8008ae8 <tcp_slowtmr+0x70>
 8008ada:	4b82      	ldr	r3, [pc, #520]	; (8008ce4 <tcp_slowtmr+0x26c>)
 8008adc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8008ae0:	4984      	ldr	r1, [pc, #528]	; (8008cf4 <tcp_slowtmr+0x27c>)
 8008ae2:	4882      	ldr	r0, [pc, #520]	; (8008cec <tcp_slowtmr+0x274>)
 8008ae4:	f008 f8cc 	bl	8010c80 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aea:	7f9a      	ldrb	r2, [r3, #30]
 8008aec:	4b7b      	ldr	r3, [pc, #492]	; (8008cdc <tcp_slowtmr+0x264>)
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d105      	bne.n	8008b00 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8008af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8008afe:	e272      	b.n	8008fe6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008b00:	4b76      	ldr	r3, [pc, #472]	; (8008cdc <tcp_slowtmr+0x264>)
 8008b02:	781a      	ldrb	r2, [r3, #0]
 8008b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b06:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b16:	7d1b      	ldrb	r3, [r3, #20]
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d10a      	bne.n	8008b32 <tcp_slowtmr+0xba>
 8008b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b22:	2b05      	cmp	r3, #5
 8008b24:	d905      	bls.n	8008b32 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8008b26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008b30:	e11e      	b.n	8008d70 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b38:	2b0b      	cmp	r3, #11
 8008b3a:	d905      	bls.n	8008b48 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8008b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b40:	3301      	adds	r3, #1
 8008b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008b46:	e113      	b.n	8008d70 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8008b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d075      	beq.n	8008c3e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d006      	beq.n	8008b68 <tcp_slowtmr+0xf0>
 8008b5a:	4b62      	ldr	r3, [pc, #392]	; (8008ce4 <tcp_slowtmr+0x26c>)
 8008b5c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008b60:	4965      	ldr	r1, [pc, #404]	; (8008cf8 <tcp_slowtmr+0x280>)
 8008b62:	4862      	ldr	r0, [pc, #392]	; (8008cec <tcp_slowtmr+0x274>)
 8008b64:	f008 f88c 	bl	8010c80 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d106      	bne.n	8008b7e <tcp_slowtmr+0x106>
 8008b70:	4b5c      	ldr	r3, [pc, #368]	; (8008ce4 <tcp_slowtmr+0x26c>)
 8008b72:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008b76:	4961      	ldr	r1, [pc, #388]	; (8008cfc <tcp_slowtmr+0x284>)
 8008b78:	485c      	ldr	r0, [pc, #368]	; (8008cec <tcp_slowtmr+0x274>)
 8008b7a:	f008 f881 	bl	8010c80 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b80:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8008b84:	2b0b      	cmp	r3, #11
 8008b86:	d905      	bls.n	8008b94 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8008b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008b92:	e0ed      	b.n	8008d70 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b96:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	4a58      	ldr	r2, [pc, #352]	; (8008d00 <tcp_slowtmr+0x288>)
 8008b9e:	5cd3      	ldrb	r3, [r2, r3]
 8008ba0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8008ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008ba8:	7c7a      	ldrb	r2, [r7, #17]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d907      	bls.n	8008bbe <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8008bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bba:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8008bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008bc4:	7c7a      	ldrb	r2, [r7, #17]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	f200 80d2 	bhi.w	8008d70 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8008bcc:	2301      	movs	r3, #1
 8008bce:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8008bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d108      	bne.n	8008bec <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008bda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bdc:	f005 f96e 	bl	800debc <tcp_zero_window_probe>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d014      	beq.n	8008c10 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8008be6:	2300      	movs	r3, #0
 8008be8:	623b      	str	r3, [r7, #32]
 8008bea:	e011      	b.n	8008c10 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bf6:	f004 f833 	bl	800cc60 <tcp_split_unsent_seg>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d107      	bne.n	8008c10 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8008c00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c02:	f004 fab3 	bl	800d16c <tcp_output>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d101      	bne.n	8008c10 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8008c10:	6a3b      	ldr	r3, [r7, #32]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f000 80ac 	beq.w	8008d70 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8008c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c22:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008c26:	2b06      	cmp	r3, #6
 8008c28:	f200 80a2 	bhi.w	8008d70 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8008c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c2e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008c32:	3301      	adds	r3, #1
 8008c34:	b2da      	uxtb	r2, r3
 8008c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c38:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8008c3c:	e098      	b.n	8008d70 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c40:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	db0f      	blt.n	8008c68 <tcp_slowtmr+0x1f0>
 8008c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008c4e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d008      	beq.n	8008c68 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8008c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c58:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	3301      	adds	r3, #1
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	b21a      	sxth	r2, r3
 8008c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c66:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8008c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c70:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008c74:	429a      	cmp	r2, r3
 8008c76:	db7b      	blt.n	8008d70 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008c78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c7a:	f004 fd69 	bl	800d750 <tcp_rexmit_rto_prepare>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d007      	beq.n	8008c94 <tcp_slowtmr+0x21c>
 8008c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d171      	bne.n	8008d70 <tcp_slowtmr+0x2f8>
 8008c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d06d      	beq.n	8008d70 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c96:	7d1b      	ldrb	r3, [r3, #20]
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d03a      	beq.n	8008d12 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ca2:	2b0c      	cmp	r3, #12
 8008ca4:	bf28      	it	cs
 8008ca6:	230c      	movcs	r3, #12
 8008ca8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008cb0:	10db      	asrs	r3, r3, #3
 8008cb2:	b21b      	sxth	r3, r3
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008cbc:	4413      	add	r3, r2
 8008cbe:	7efa      	ldrb	r2, [r7, #27]
 8008cc0:	4910      	ldr	r1, [pc, #64]	; (8008d04 <tcp_slowtmr+0x28c>)
 8008cc2:	5c8a      	ldrb	r2, [r1, r2]
 8008cc4:	4093      	lsls	r3, r2
 8008cc6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	dc1a      	bgt.n	8008d08 <tcp_slowtmr+0x290>
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	b21a      	sxth	r2, r3
 8008cd6:	e019      	b.n	8008d0c <tcp_slowtmr+0x294>
 8008cd8:	200086ec 	.word	0x200086ec
 8008cdc:	20008702 	.word	0x20008702
 8008ce0:	200086f8 	.word	0x200086f8
 8008ce4:	08012b84 	.word	0x08012b84
 8008ce8:	08012ec8 	.word	0x08012ec8
 8008cec:	08012bc8 	.word	0x08012bc8
 8008cf0:	08012ef4 	.word	0x08012ef4
 8008cf4:	08012f20 	.word	0x08012f20
 8008cf8:	08012f50 	.word	0x08012f50
 8008cfc:	08012f84 	.word	0x08012f84
 8008d00:	08015038 	.word	0x08015038
 8008d04:	08015028 	.word	0x08015028
 8008d08:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d14:	2200      	movs	r2, #0
 8008d16:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d20:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008d24:	4293      	cmp	r3, r2
 8008d26:	bf28      	it	cs
 8008d28:	4613      	movcs	r3, r2
 8008d2a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008d2c:	8a7b      	ldrh	r3, [r7, #18]
 8008d2e:	085b      	lsrs	r3, r3, #1
 8008d30:	b29a      	uxth	r2, r3
 8008d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d34:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d42:	005b      	lsls	r3, r3, #1
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d206      	bcs.n	8008d58 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d4e:	005b      	lsls	r3, r3, #1
 8008d50:	b29a      	uxth	r2, r3
 8008d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d54:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8008d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8008d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d64:	2200      	movs	r2, #0
 8008d66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8008d6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d6c:	f004 fd60 	bl	800d830 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d72:	7d1b      	ldrb	r3, [r3, #20]
 8008d74:	2b06      	cmp	r3, #6
 8008d76:	d111      	bne.n	8008d9c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8008d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7a:	8b5b      	ldrh	r3, [r3, #26]
 8008d7c:	f003 0310 	and.w	r3, r3, #16
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d00b      	beq.n	8008d9c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008d84:	4b9d      	ldr	r3, [pc, #628]	; (8008ffc <tcp_slowtmr+0x584>)
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8a:	6a1b      	ldr	r3, [r3, #32]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	2b28      	cmp	r3, #40	; 0x28
 8008d90:	d904      	bls.n	8008d9c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8008d92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d96:	3301      	adds	r3, #1
 8008d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9e:	7a5b      	ldrb	r3, [r3, #9]
 8008da0:	f003 0308 	and.w	r3, r3, #8
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d04c      	beq.n	8008e42 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8008da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008daa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008dac:	2b04      	cmp	r3, #4
 8008dae:	d003      	beq.n	8008db8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8008db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008db4:	2b07      	cmp	r3, #7
 8008db6:	d144      	bne.n	8008e42 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008db8:	4b90      	ldr	r3, [pc, #576]	; (8008ffc <tcp_slowtmr+0x584>)
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbe:	6a1b      	ldr	r3, [r3, #32]
 8008dc0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008dc8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8008dcc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8008dd0:	498b      	ldr	r1, [pc, #556]	; (8009000 <tcp_slowtmr+0x588>)
 8008dd2:	fba1 1303 	umull	r1, r3, r1, r3
 8008dd6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d90a      	bls.n	8008df2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8008ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008de0:	3301      	adds	r3, #1
 8008de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8008de6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008dea:	3301      	adds	r3, #1
 8008dec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008df0:	e027      	b.n	8008e42 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008df2:	4b82      	ldr	r3, [pc, #520]	; (8008ffc <tcp_slowtmr+0x584>)
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df8:	6a1b      	ldr	r3, [r3, #32]
 8008dfa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfe:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e04:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008e08:	4618      	mov	r0, r3
 8008e0a:	4b7e      	ldr	r3, [pc, #504]	; (8009004 <tcp_slowtmr+0x58c>)
 8008e0c:	fb00 f303 	mul.w	r3, r0, r3
 8008e10:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008e12:	497b      	ldr	r1, [pc, #492]	; (8009000 <tcp_slowtmr+0x588>)
 8008e14:	fba1 1303 	umull	r1, r3, r1, r3
 8008e18:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d911      	bls.n	8008e42 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8008e1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e20:	f005 f80c 	bl	800de3c <tcp_keepalive>
 8008e24:	4603      	mov	r3, r0
 8008e26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8008e2a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d107      	bne.n	8008e42 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8008e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e34:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008e38:	3301      	adds	r3, #1
 8008e3a:	b2da      	uxtb	r2, r3
 8008e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d011      	beq.n	8008e6e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008e4a:	4b6c      	ldr	r3, [pc, #432]	; (8008ffc <tcp_slowtmr+0x584>)
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	1ad2      	subs	r2, r2, r3
 8008e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e56:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	005b      	lsls	r3, r3, #1
 8008e60:	440b      	add	r3, r1
 8008e62:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d302      	bcc.n	8008e6e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8008e68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e6a:	f000 fec7 	bl	8009bfc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8008e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e70:	7d1b      	ldrb	r3, [r3, #20]
 8008e72:	2b03      	cmp	r3, #3
 8008e74:	d10b      	bne.n	8008e8e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008e76:	4b61      	ldr	r3, [pc, #388]	; (8008ffc <tcp_slowtmr+0x584>)
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7c:	6a1b      	ldr	r3, [r3, #32]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	2b28      	cmp	r3, #40	; 0x28
 8008e82:	d904      	bls.n	8008e8e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e88:	3301      	adds	r3, #1
 8008e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8008e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e90:	7d1b      	ldrb	r3, [r3, #20]
 8008e92:	2b09      	cmp	r3, #9
 8008e94:	d10b      	bne.n	8008eae <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008e96:	4b59      	ldr	r3, [pc, #356]	; (8008ffc <tcp_slowtmr+0x584>)
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9c:	6a1b      	ldr	r3, [r3, #32]
 8008e9e:	1ad3      	subs	r3, r2, r3
 8008ea0:	2bf0      	cmp	r3, #240	; 0xf0
 8008ea2:	d904      	bls.n	8008eae <tcp_slowtmr+0x436>
        ++pcb_remove;
 8008ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008eae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d060      	beq.n	8008f78 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8008eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ebc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8008ebe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ec0:	f000 fce8 	bl	8009894 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8008ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d010      	beq.n	8008eec <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008eca:	4b4f      	ldr	r3, [pc, #316]	; (8009008 <tcp_slowtmr+0x590>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d106      	bne.n	8008ee2 <tcp_slowtmr+0x46a>
 8008ed4:	4b4d      	ldr	r3, [pc, #308]	; (800900c <tcp_slowtmr+0x594>)
 8008ed6:	f240 526d 	movw	r2, #1389	; 0x56d
 8008eda:	494d      	ldr	r1, [pc, #308]	; (8009010 <tcp_slowtmr+0x598>)
 8008edc:	484d      	ldr	r0, [pc, #308]	; (8009014 <tcp_slowtmr+0x59c>)
 8008ede:	f007 fecf 	bl	8010c80 <iprintf>
        prev->next = pcb->next;
 8008ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee4:	68da      	ldr	r2, [r3, #12]
 8008ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee8:	60da      	str	r2, [r3, #12]
 8008eea:	e00f      	b.n	8008f0c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008eec:	4b46      	ldr	r3, [pc, #280]	; (8009008 <tcp_slowtmr+0x590>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d006      	beq.n	8008f04 <tcp_slowtmr+0x48c>
 8008ef6:	4b45      	ldr	r3, [pc, #276]	; (800900c <tcp_slowtmr+0x594>)
 8008ef8:	f240 5271 	movw	r2, #1393	; 0x571
 8008efc:	4946      	ldr	r1, [pc, #280]	; (8009018 <tcp_slowtmr+0x5a0>)
 8008efe:	4845      	ldr	r0, [pc, #276]	; (8009014 <tcp_slowtmr+0x59c>)
 8008f00:	f007 febe 	bl	8010c80 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	4a3f      	ldr	r2, [pc, #252]	; (8009008 <tcp_slowtmr+0x590>)
 8008f0a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8008f0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d013      	beq.n	8008f3c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f16:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008f1c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8008f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f20:	3304      	adds	r3, #4
 8008f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f24:	8ad2      	ldrh	r2, [r2, #22]
 8008f26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f28:	8b09      	ldrh	r1, [r1, #24]
 8008f2a:	9102      	str	r1, [sp, #8]
 8008f2c:	9201      	str	r2, [sp, #4]
 8008f2e:	9300      	str	r3, [sp, #0]
 8008f30:	462b      	mov	r3, r5
 8008f32:	4622      	mov	r2, r4
 8008f34:	4601      	mov	r1, r0
 8008f36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f38:	f004 fecc 	bl	800dcd4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8008f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f44:	7d1b      	ldrb	r3, [r3, #20]
 8008f46:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008f52:	6838      	ldr	r0, [r7, #0]
 8008f54:	f7ff f838 	bl	8007fc8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8008f58:	4b30      	ldr	r3, [pc, #192]	; (800901c <tcp_slowtmr+0x5a4>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d004      	beq.n	8008f6e <tcp_slowtmr+0x4f6>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f06f 010c 	mvn.w	r1, #12
 8008f6a:	68b8      	ldr	r0, [r7, #8]
 8008f6c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008f6e:	4b2b      	ldr	r3, [pc, #172]	; (800901c <tcp_slowtmr+0x5a4>)
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d037      	beq.n	8008fe6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8008f76:	e590      	b.n	8008a9a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8008f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f84:	7f1b      	ldrb	r3, [r3, #28]
 8008f86:	3301      	adds	r3, #1
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f90:	7f1a      	ldrb	r2, [r3, #28]
 8008f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f94:	7f5b      	ldrb	r3, [r3, #29]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d325      	bcc.n	8008fe6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8008f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008fa0:	4b1e      	ldr	r3, [pc, #120]	; (800901c <tcp_slowtmr+0x5a4>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00b      	beq.n	8008fc8 <tcp_slowtmr+0x550>
 8008fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fb8:	6912      	ldr	r2, [r2, #16]
 8008fba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	4798      	blx	r3
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008fc6:	e002      	b.n	8008fce <tcp_slowtmr+0x556>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8008fce:	4b13      	ldr	r3, [pc, #76]	; (800901c <tcp_slowtmr+0x5a4>)
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d000      	beq.n	8008fd8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8008fd6:	e560      	b.n	8008a9a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008fd8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d102      	bne.n	8008fe6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8008fe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fe2:	f004 f8c3 	bl	800d16c <tcp_output>
  while (pcb != NULL) {
 8008fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f47f ad5c 	bne.w	8008aa6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8008ff2:	4b0b      	ldr	r3, [pc, #44]	; (8009020 <tcp_slowtmr+0x5a8>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008ff8:	e067      	b.n	80090ca <tcp_slowtmr+0x652>
 8008ffa:	bf00      	nop
 8008ffc:	200086ec 	.word	0x200086ec
 8009000:	10624dd3 	.word	0x10624dd3
 8009004:	000124f8 	.word	0x000124f8
 8009008:	200086f8 	.word	0x200086f8
 800900c:	08012b84 	.word	0x08012b84
 8009010:	08012fbc 	.word	0x08012fbc
 8009014:	08012bc8 	.word	0x08012bc8
 8009018:	08012fe8 	.word	0x08012fe8
 800901c:	20008700 	.word	0x20008700
 8009020:	200086fc 	.word	0x200086fc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009026:	7d1b      	ldrb	r3, [r3, #20]
 8009028:	2b0a      	cmp	r3, #10
 800902a:	d006      	beq.n	800903a <tcp_slowtmr+0x5c2>
 800902c:	4b2b      	ldr	r3, [pc, #172]	; (80090dc <tcp_slowtmr+0x664>)
 800902e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009032:	492b      	ldr	r1, [pc, #172]	; (80090e0 <tcp_slowtmr+0x668>)
 8009034:	482b      	ldr	r0, [pc, #172]	; (80090e4 <tcp_slowtmr+0x66c>)
 8009036:	f007 fe23 	bl	8010c80 <iprintf>
    pcb_remove = 0;
 800903a:	2300      	movs	r3, #0
 800903c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009040:	4b29      	ldr	r3, [pc, #164]	; (80090e8 <tcp_slowtmr+0x670>)
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009046:	6a1b      	ldr	r3, [r3, #32]
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	2bf0      	cmp	r3, #240	; 0xf0
 800904c:	d904      	bls.n	8009058 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800904e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009052:	3301      	adds	r3, #1
 8009054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800905c:	2b00      	cmp	r3, #0
 800905e:	d02f      	beq.n	80090c0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009060:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009062:	f000 fc17 	bl	8009894 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009068:	2b00      	cmp	r3, #0
 800906a:	d010      	beq.n	800908e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800906c:	4b1f      	ldr	r3, [pc, #124]	; (80090ec <tcp_slowtmr+0x674>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009072:	429a      	cmp	r2, r3
 8009074:	d106      	bne.n	8009084 <tcp_slowtmr+0x60c>
 8009076:	4b19      	ldr	r3, [pc, #100]	; (80090dc <tcp_slowtmr+0x664>)
 8009078:	f240 52af 	movw	r2, #1455	; 0x5af
 800907c:	491c      	ldr	r1, [pc, #112]	; (80090f0 <tcp_slowtmr+0x678>)
 800907e:	4819      	ldr	r0, [pc, #100]	; (80090e4 <tcp_slowtmr+0x66c>)
 8009080:	f007 fdfe 	bl	8010c80 <iprintf>
        prev->next = pcb->next;
 8009084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009086:	68da      	ldr	r2, [r3, #12]
 8009088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908a:	60da      	str	r2, [r3, #12]
 800908c:	e00f      	b.n	80090ae <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800908e:	4b17      	ldr	r3, [pc, #92]	; (80090ec <tcp_slowtmr+0x674>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009094:	429a      	cmp	r2, r3
 8009096:	d006      	beq.n	80090a6 <tcp_slowtmr+0x62e>
 8009098:	4b10      	ldr	r3, [pc, #64]	; (80090dc <tcp_slowtmr+0x664>)
 800909a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800909e:	4915      	ldr	r1, [pc, #84]	; (80090f4 <tcp_slowtmr+0x67c>)
 80090a0:	4810      	ldr	r0, [pc, #64]	; (80090e4 <tcp_slowtmr+0x66c>)
 80090a2:	f007 fded 	bl	8010c80 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80090a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	4a10      	ldr	r2, [pc, #64]	; (80090ec <tcp_slowtmr+0x674>)
 80090ac:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80090ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80090b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80090b8:	69f8      	ldr	r0, [r7, #28]
 80090ba:	f7fe ff85 	bl	8007fc8 <tcp_free>
 80090be:	e004      	b.n	80090ca <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80090c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80090c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80090ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1a9      	bne.n	8009024 <tcp_slowtmr+0x5ac>
    }
  }
}
 80090d0:	bf00      	nop
 80090d2:	bf00      	nop
 80090d4:	3730      	adds	r7, #48	; 0x30
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bdb0      	pop	{r4, r5, r7, pc}
 80090da:	bf00      	nop
 80090dc:	08012b84 	.word	0x08012b84
 80090e0:	08013014 	.word	0x08013014
 80090e4:	08012bc8 	.word	0x08012bc8
 80090e8:	200086ec 	.word	0x200086ec
 80090ec:	200086fc 	.word	0x200086fc
 80090f0:	08013044 	.word	0x08013044
 80090f4:	0801306c 	.word	0x0801306c

080090f8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80090fe:	4b2d      	ldr	r3, [pc, #180]	; (80091b4 <tcp_fasttmr+0xbc>)
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	3301      	adds	r3, #1
 8009104:	b2da      	uxtb	r2, r3
 8009106:	4b2b      	ldr	r3, [pc, #172]	; (80091b4 <tcp_fasttmr+0xbc>)
 8009108:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800910a:	4b2b      	ldr	r3, [pc, #172]	; (80091b8 <tcp_fasttmr+0xc0>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009110:	e048      	b.n	80091a4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	7f9a      	ldrb	r2, [r3, #30]
 8009116:	4b27      	ldr	r3, [pc, #156]	; (80091b4 <tcp_fasttmr+0xbc>)
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	429a      	cmp	r2, r3
 800911c:	d03f      	beq.n	800919e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800911e:	4b25      	ldr	r3, [pc, #148]	; (80091b4 <tcp_fasttmr+0xbc>)
 8009120:	781a      	ldrb	r2, [r3, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	8b5b      	ldrh	r3, [r3, #26]
 800912a:	f003 0301 	and.w	r3, r3, #1
 800912e:	2b00      	cmp	r3, #0
 8009130:	d010      	beq.n	8009154 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	8b5b      	ldrh	r3, [r3, #26]
 8009136:	f043 0302 	orr.w	r3, r3, #2
 800913a:	b29a      	uxth	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f004 f813 	bl	800d16c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	8b5b      	ldrh	r3, [r3, #26]
 800914a:	f023 0303 	bic.w	r3, r3, #3
 800914e:	b29a      	uxth	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	8b5b      	ldrh	r3, [r3, #26]
 8009158:	f003 0308 	and.w	r3, r3, #8
 800915c:	2b00      	cmp	r3, #0
 800915e:	d009      	beq.n	8009174 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	8b5b      	ldrh	r3, [r3, #26]
 8009164:	f023 0308 	bic.w	r3, r3, #8
 8009168:	b29a      	uxth	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f7ff f8be 	bl	80082f0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00a      	beq.n	8009198 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009182:	4b0e      	ldr	r3, [pc, #56]	; (80091bc <tcp_fasttmr+0xc4>)
 8009184:	2200      	movs	r2, #0
 8009186:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f819 	bl	80091c0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800918e:	4b0b      	ldr	r3, [pc, #44]	; (80091bc <tcp_fasttmr+0xc4>)
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d000      	beq.n	8009198 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009196:	e7b8      	b.n	800910a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	607b      	str	r3, [r7, #4]
 800919c:	e002      	b.n	80091a4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1b3      	bne.n	8009112 <tcp_fasttmr+0x1a>
    }
  }
}
 80091aa:	bf00      	nop
 80091ac:	bf00      	nop
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	20008702 	.word	0x20008702
 80091b8:	200086f8 	.word	0x200086f8
 80091bc:	20008700 	.word	0x20008700

080091c0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80091c0:	b590      	push	{r4, r7, lr}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d109      	bne.n	80091e2 <tcp_process_refused_data+0x22>
 80091ce:	4b37      	ldr	r3, [pc, #220]	; (80092ac <tcp_process_refused_data+0xec>)
 80091d0:	f240 6209 	movw	r2, #1545	; 0x609
 80091d4:	4936      	ldr	r1, [pc, #216]	; (80092b0 <tcp_process_refused_data+0xf0>)
 80091d6:	4837      	ldr	r0, [pc, #220]	; (80092b4 <tcp_process_refused_data+0xf4>)
 80091d8:	f007 fd52 	bl	8010c80 <iprintf>
 80091dc:	f06f 030f 	mvn.w	r3, #15
 80091e0:	e060      	b.n	80092a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091e6:	7b5b      	ldrb	r3, [r3, #13]
 80091e8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091ee:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00b      	beq.n	8009218 <tcp_process_refused_data+0x58>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6918      	ldr	r0, [r3, #16]
 800920a:	2300      	movs	r3, #0
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	6879      	ldr	r1, [r7, #4]
 8009210:	47a0      	blx	r4
 8009212:	4603      	mov	r3, r0
 8009214:	73fb      	strb	r3, [r7, #15]
 8009216:	e007      	b.n	8009228 <tcp_process_refused_data+0x68>
 8009218:	2300      	movs	r3, #0
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	6879      	ldr	r1, [r7, #4]
 800921e:	2000      	movs	r0, #0
 8009220:	f000 f8c2 	bl	80093a8 <tcp_recv_null>
 8009224:	4603      	mov	r3, r0
 8009226:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d12a      	bne.n	8009286 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009230:	7bbb      	ldrb	r3, [r7, #14]
 8009232:	f003 0320 	and.w	r3, r3, #32
 8009236:	2b00      	cmp	r3, #0
 8009238:	d033      	beq.n	80092a2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800923e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009242:	d005      	beq.n	8009250 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009248:	3301      	adds	r3, #1
 800924a:	b29a      	uxth	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00b      	beq.n	8009272 <tcp_process_refused_data+0xb2>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6918      	ldr	r0, [r3, #16]
 8009264:	2300      	movs	r3, #0
 8009266:	2200      	movs	r2, #0
 8009268:	6879      	ldr	r1, [r7, #4]
 800926a:	47a0      	blx	r4
 800926c:	4603      	mov	r3, r0
 800926e:	73fb      	strb	r3, [r7, #15]
 8009270:	e001      	b.n	8009276 <tcp_process_refused_data+0xb6>
 8009272:	2300      	movs	r3, #0
 8009274:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800927a:	f113 0f0d 	cmn.w	r3, #13
 800927e:	d110      	bne.n	80092a2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009280:	f06f 030c 	mvn.w	r3, #12
 8009284:	e00e      	b.n	80092a4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800928a:	f113 0f0d 	cmn.w	r3, #13
 800928e:	d102      	bne.n	8009296 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009290:	f06f 030c 	mvn.w	r3, #12
 8009294:	e006      	b.n	80092a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800929c:	f06f 0304 	mvn.w	r3, #4
 80092a0:	e000      	b.n	80092a4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3714      	adds	r7, #20
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd90      	pop	{r4, r7, pc}
 80092ac:	08012b84 	.word	0x08012b84
 80092b0:	08013094 	.word	0x08013094
 80092b4:	08012bc8 	.word	0x08012bc8

080092b8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80092c0:	e007      	b.n	80092d2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f80a 	bl	80092e2 <tcp_seg_free>
    seg = next;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1f4      	bne.n	80092c2 <tcp_segs_free+0xa>
  }
}
 80092d8:	bf00      	nop
 80092da:	bf00      	nop
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b082      	sub	sp, #8
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00c      	beq.n	800930a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d004      	beq.n	8009302 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fe fbc3 	bl	8007a88 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009302:	6879      	ldr	r1, [r7, #4]
 8009304:	2003      	movs	r0, #3
 8009306:	f7fd fd49 	bl	8006d9c <memp_free>
  }
}
 800930a:	bf00      	nop
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
	...

08009314 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	460b      	mov	r3, r1
 800931e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d107      	bne.n	8009336 <tcp_setprio+0x22>
 8009326:	4b07      	ldr	r3, [pc, #28]	; (8009344 <tcp_setprio+0x30>)
 8009328:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800932c:	4906      	ldr	r1, [pc, #24]	; (8009348 <tcp_setprio+0x34>)
 800932e:	4807      	ldr	r0, [pc, #28]	; (800934c <tcp_setprio+0x38>)
 8009330:	f007 fca6 	bl	8010c80 <iprintf>
 8009334:	e002      	b.n	800933c <tcp_setprio+0x28>

  pcb->prio = prio;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	78fa      	ldrb	r2, [r7, #3]
 800933a:	755a      	strb	r2, [r3, #21]
}
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	08012b84 	.word	0x08012b84
 8009348:	080130bc 	.word	0x080130bc
 800934c:	08012bc8 	.word	0x08012bc8

08009350 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d106      	bne.n	800936c <tcp_seg_copy+0x1c>
 800935e:	4b0f      	ldr	r3, [pc, #60]	; (800939c <tcp_seg_copy+0x4c>)
 8009360:	f240 6282 	movw	r2, #1666	; 0x682
 8009364:	490e      	ldr	r1, [pc, #56]	; (80093a0 <tcp_seg_copy+0x50>)
 8009366:	480f      	ldr	r0, [pc, #60]	; (80093a4 <tcp_seg_copy+0x54>)
 8009368:	f007 fc8a 	bl	8010c80 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800936c:	2003      	movs	r0, #3
 800936e:	f7fd fca5 	bl	8006cbc <memp_malloc>
 8009372:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d101      	bne.n	800937e <tcp_seg_copy+0x2e>
    return NULL;
 800937a:	2300      	movs	r3, #0
 800937c:	e00a      	b.n	8009394 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800937e:	2210      	movs	r2, #16
 8009380:	6879      	ldr	r1, [r7, #4]
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f007 fc66 	bl	8010c54 <memcpy>
  pbuf_ref(cseg->p);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	4618      	mov	r0, r3
 800938e:	f7fe fc1b 	bl	8007bc8 <pbuf_ref>
  return cseg;
 8009392:	68fb      	ldr	r3, [r7, #12]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	08012b84 	.word	0x08012b84
 80093a0:	080130d8 	.word	0x080130d8
 80093a4:	08012bc8 	.word	0x08012bc8

080093a8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
 80093b4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d109      	bne.n	80093d0 <tcp_recv_null+0x28>
 80093bc:	4b12      	ldr	r3, [pc, #72]	; (8009408 <tcp_recv_null+0x60>)
 80093be:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80093c2:	4912      	ldr	r1, [pc, #72]	; (800940c <tcp_recv_null+0x64>)
 80093c4:	4812      	ldr	r0, [pc, #72]	; (8009410 <tcp_recv_null+0x68>)
 80093c6:	f007 fc5b 	bl	8010c80 <iprintf>
 80093ca:	f06f 030f 	mvn.w	r3, #15
 80093ce:	e016      	b.n	80093fe <tcp_recv_null+0x56>

  if (p != NULL) {
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d009      	beq.n	80093ea <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	891b      	ldrh	r3, [r3, #8]
 80093da:	4619      	mov	r1, r3
 80093dc:	68b8      	ldr	r0, [r7, #8]
 80093de:	f7ff fab5 	bl	800894c <tcp_recved>
    pbuf_free(p);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7fe fb50 	bl	8007a88 <pbuf_free>
 80093e8:	e008      	b.n	80093fc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80093ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d104      	bne.n	80093fc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80093f2:	68b8      	ldr	r0, [r7, #8]
 80093f4:	f7fe ffe6 	bl	80083c4 <tcp_close>
 80093f8:	4603      	mov	r3, r0
 80093fa:	e000      	b.n	80093fe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	08012b84 	.word	0x08012b84
 800940c:	080130f4 	.word	0x080130f4
 8009410:	08012bc8 	.word	0x08012bc8

08009414 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	4603      	mov	r3, r0
 800941c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800941e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009422:	2b00      	cmp	r3, #0
 8009424:	db01      	blt.n	800942a <tcp_kill_prio+0x16>
 8009426:	79fb      	ldrb	r3, [r7, #7]
 8009428:	e000      	b.n	800942c <tcp_kill_prio+0x18>
 800942a:	237f      	movs	r3, #127	; 0x7f
 800942c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800942e:	7afb      	ldrb	r3, [r7, #11]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d034      	beq.n	800949e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009434:	7afb      	ldrb	r3, [r7, #11]
 8009436:	3b01      	subs	r3, #1
 8009438:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800943a:	2300      	movs	r3, #0
 800943c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800943e:	2300      	movs	r3, #0
 8009440:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009442:	4b19      	ldr	r3, [pc, #100]	; (80094a8 <tcp_kill_prio+0x94>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	617b      	str	r3, [r7, #20]
 8009448:	e01f      	b.n	800948a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	7d5b      	ldrb	r3, [r3, #21]
 800944e:	7afa      	ldrb	r2, [r7, #11]
 8009450:	429a      	cmp	r2, r3
 8009452:	d80c      	bhi.n	800946e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009458:	7afa      	ldrb	r2, [r7, #11]
 800945a:	429a      	cmp	r2, r3
 800945c:	d112      	bne.n	8009484 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800945e:	4b13      	ldr	r3, [pc, #76]	; (80094ac <tcp_kill_prio+0x98>)
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	6a1b      	ldr	r3, [r3, #32]
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	429a      	cmp	r2, r3
 800946c:	d80a      	bhi.n	8009484 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800946e:	4b0f      	ldr	r3, [pc, #60]	; (80094ac <tcp_kill_prio+0x98>)
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	7d5b      	ldrb	r3, [r3, #21]
 8009482:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	617b      	str	r3, [r7, #20]
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d1dc      	bne.n	800944a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d004      	beq.n	80094a0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009496:	6938      	ldr	r0, [r7, #16]
 8009498:	f7ff f87e 	bl	8008598 <tcp_abort>
 800949c:	e000      	b.n	80094a0 <tcp_kill_prio+0x8c>
    return;
 800949e:	bf00      	nop
  }
}
 80094a0:	3718      	adds	r7, #24
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	200086f8 	.word	0x200086f8
 80094ac:	200086ec 	.word	0x200086ec

080094b0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b086      	sub	sp, #24
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	4603      	mov	r3, r0
 80094b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80094ba:	79fb      	ldrb	r3, [r7, #7]
 80094bc:	2b08      	cmp	r3, #8
 80094be:	d009      	beq.n	80094d4 <tcp_kill_state+0x24>
 80094c0:	79fb      	ldrb	r3, [r7, #7]
 80094c2:	2b09      	cmp	r3, #9
 80094c4:	d006      	beq.n	80094d4 <tcp_kill_state+0x24>
 80094c6:	4b1a      	ldr	r3, [pc, #104]	; (8009530 <tcp_kill_state+0x80>)
 80094c8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80094cc:	4919      	ldr	r1, [pc, #100]	; (8009534 <tcp_kill_state+0x84>)
 80094ce:	481a      	ldr	r0, [pc, #104]	; (8009538 <tcp_kill_state+0x88>)
 80094d0:	f007 fbd6 	bl	8010c80 <iprintf>

  inactivity = 0;
 80094d4:	2300      	movs	r3, #0
 80094d6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80094d8:	2300      	movs	r3, #0
 80094da:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80094dc:	4b17      	ldr	r3, [pc, #92]	; (800953c <tcp_kill_state+0x8c>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	617b      	str	r3, [r7, #20]
 80094e2:	e017      	b.n	8009514 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	7d1b      	ldrb	r3, [r3, #20]
 80094e8:	79fa      	ldrb	r2, [r7, #7]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d10f      	bne.n	800950e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80094ee:	4b14      	ldr	r3, [pc, #80]	; (8009540 <tcp_kill_state+0x90>)
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	6a1b      	ldr	r3, [r3, #32]
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d807      	bhi.n	800950e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80094fe:	4b10      	ldr	r3, [pc, #64]	; (8009540 <tcp_kill_state+0x90>)
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	617b      	str	r3, [r7, #20]
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1e4      	bne.n	80094e4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d003      	beq.n	8009528 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009520:	2100      	movs	r1, #0
 8009522:	6938      	ldr	r0, [r7, #16]
 8009524:	f7fe ff7a 	bl	800841c <tcp_abandon>
  }
}
 8009528:	bf00      	nop
 800952a:	3718      	adds	r7, #24
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	08012b84 	.word	0x08012b84
 8009534:	08013110 	.word	0x08013110
 8009538:	08012bc8 	.word	0x08012bc8
 800953c:	200086f8 	.word	0x200086f8
 8009540:	200086ec 	.word	0x200086ec

08009544 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800954a:	2300      	movs	r3, #0
 800954c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800954e:	2300      	movs	r3, #0
 8009550:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009552:	4b12      	ldr	r3, [pc, #72]	; (800959c <tcp_kill_timewait+0x58>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	60fb      	str	r3, [r7, #12]
 8009558:	e012      	b.n	8009580 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800955a:	4b11      	ldr	r3, [pc, #68]	; (80095a0 <tcp_kill_timewait+0x5c>)
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6a1b      	ldr	r3, [r3, #32]
 8009562:	1ad3      	subs	r3, r2, r3
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	429a      	cmp	r2, r3
 8009568:	d807      	bhi.n	800957a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800956a:	4b0d      	ldr	r3, [pc, #52]	; (80095a0 <tcp_kill_timewait+0x5c>)
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6a1b      	ldr	r3, [r3, #32]
 8009572:	1ad3      	subs	r3, r2, r3
 8009574:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	60fb      	str	r3, [r7, #12]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1e9      	bne.n	800955a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800958c:	68b8      	ldr	r0, [r7, #8]
 800958e:	f7ff f803 	bl	8008598 <tcp_abort>
  }
}
 8009592:	bf00      	nop
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	200086fc 	.word	0x200086fc
 80095a0:	200086ec 	.word	0x200086ec

080095a4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80095aa:	4b10      	ldr	r3, [pc, #64]	; (80095ec <tcp_handle_closepend+0x48>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80095b0:	e014      	b.n	80095dc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	8b5b      	ldrh	r3, [r3, #26]
 80095bc:	f003 0308 	and.w	r3, r3, #8
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d009      	beq.n	80095d8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	8b5b      	ldrh	r3, [r3, #26]
 80095c8:	f023 0308 	bic.w	r3, r3, #8
 80095cc:	b29a      	uxth	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f7fe fe8c 	bl	80082f0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1e7      	bne.n	80095b2 <tcp_handle_closepend+0xe>
  }
}
 80095e2:	bf00      	nop
 80095e4:	bf00      	nop
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	200086f8 	.word	0x200086f8

080095f0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	4603      	mov	r3, r0
 80095f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80095fa:	2001      	movs	r0, #1
 80095fc:	f7fd fb5e 	bl	8006cbc <memp_malloc>
 8009600:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d126      	bne.n	8009656 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009608:	f7ff ffcc 	bl	80095a4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800960c:	f7ff ff9a 	bl	8009544 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009610:	2001      	movs	r0, #1
 8009612:	f7fd fb53 	bl	8006cbc <memp_malloc>
 8009616:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d11b      	bne.n	8009656 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800961e:	2009      	movs	r0, #9
 8009620:	f7ff ff46 	bl	80094b0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009624:	2001      	movs	r0, #1
 8009626:	f7fd fb49 	bl	8006cbc <memp_malloc>
 800962a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d111      	bne.n	8009656 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009632:	2008      	movs	r0, #8
 8009634:	f7ff ff3c 	bl	80094b0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009638:	2001      	movs	r0, #1
 800963a:	f7fd fb3f 	bl	8006cbc <memp_malloc>
 800963e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d107      	bne.n	8009656 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009646:	79fb      	ldrb	r3, [r7, #7]
 8009648:	4618      	mov	r0, r3
 800964a:	f7ff fee3 	bl	8009414 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800964e:	2001      	movs	r0, #1
 8009650:	f7fd fb34 	bl	8006cbc <memp_malloc>
 8009654:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d03f      	beq.n	80096dc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800965c:	229c      	movs	r2, #156	; 0x9c
 800965e:	2100      	movs	r1, #0
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f007 fb05 	bl	8010c70 <memset>
    pcb->prio = prio;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	79fa      	ldrb	r2, [r7, #7]
 800966a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009672:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800967c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	22ff      	movs	r2, #255	; 0xff
 800968a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009692:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2206      	movs	r2, #6
 8009698:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2206      	movs	r2, #6
 80096a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096a8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80096b2:	4b0d      	ldr	r3, [pc, #52]	; (80096e8 <tcp_alloc+0xf8>)
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80096ba:	4b0c      	ldr	r3, [pc, #48]	; (80096ec <tcp_alloc+0xfc>)
 80096bc:	781a      	ldrb	r2, [r3, #0]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80096c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	4a08      	ldr	r2, [pc, #32]	; (80096f0 <tcp_alloc+0x100>)
 80096d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	4a07      	ldr	r2, [pc, #28]	; (80096f4 <tcp_alloc+0x104>)
 80096d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80096dc:	68fb      	ldr	r3, [r7, #12]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	200086ec 	.word	0x200086ec
 80096ec:	20008702 	.word	0x20008702
 80096f0:	080093a9 	.word	0x080093a9
 80096f4:	006ddd00 	.word	0x006ddd00

080096f8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	4603      	mov	r3, r0
 8009700:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8009702:	2040      	movs	r0, #64	; 0x40
 8009704:	f7ff ff74 	bl	80095f0 <tcp_alloc>
 8009708:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800970a:	68fb      	ldr	r3, [r7, #12]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d002      	beq.n	800972a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	683a      	ldr	r2, [r7, #0]
 8009728:	611a      	str	r2, [r3, #16]
  }
}
 800972a:	bf00      	nop
 800972c:	370c      	adds	r7, #12
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
	...

08009738 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00e      	beq.n	8009766 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	7d1b      	ldrb	r3, [r3, #20]
 800974c:	2b01      	cmp	r3, #1
 800974e:	d106      	bne.n	800975e <tcp_recv+0x26>
 8009750:	4b07      	ldr	r3, [pc, #28]	; (8009770 <tcp_recv+0x38>)
 8009752:	f240 72df 	movw	r2, #2015	; 0x7df
 8009756:	4907      	ldr	r1, [pc, #28]	; (8009774 <tcp_recv+0x3c>)
 8009758:	4807      	ldr	r0, [pc, #28]	; (8009778 <tcp_recv+0x40>)
 800975a:	f007 fa91 	bl	8010c80 <iprintf>
    pcb->recv = recv;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	683a      	ldr	r2, [r7, #0]
 8009762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8009766:	bf00      	nop
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	08012b84 	.word	0x08012b84
 8009774:	08013120 	.word	0x08013120
 8009778:	08012bc8 	.word	0x08012bc8

0800977c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00e      	beq.n	80097aa <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	7d1b      	ldrb	r3, [r3, #20]
 8009790:	2b01      	cmp	r3, #1
 8009792:	d106      	bne.n	80097a2 <tcp_sent+0x26>
 8009794:	4b07      	ldr	r3, [pc, #28]	; (80097b4 <tcp_sent+0x38>)
 8009796:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800979a:	4907      	ldr	r1, [pc, #28]	; (80097b8 <tcp_sent+0x3c>)
 800979c:	4807      	ldr	r0, [pc, #28]	; (80097bc <tcp_sent+0x40>)
 800979e:	f007 fa6f 	bl	8010c80 <iprintf>
    pcb->sent = sent;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	683a      	ldr	r2, [r7, #0]
 80097a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80097aa:	bf00      	nop
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	08012b84 	.word	0x08012b84
 80097b8:	08013148 	.word	0x08013148
 80097bc:	08012bc8 	.word	0x08012bc8

080097c0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00e      	beq.n	80097ee <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	7d1b      	ldrb	r3, [r3, #20]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d106      	bne.n	80097e6 <tcp_err+0x26>
 80097d8:	4b07      	ldr	r3, [pc, #28]	; (80097f8 <tcp_err+0x38>)
 80097da:	f640 020d 	movw	r2, #2061	; 0x80d
 80097de:	4907      	ldr	r1, [pc, #28]	; (80097fc <tcp_err+0x3c>)
 80097e0:	4807      	ldr	r0, [pc, #28]	; (8009800 <tcp_err+0x40>)
 80097e2:	f007 fa4d 	bl	8010c80 <iprintf>
    pcb->errf = err;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	683a      	ldr	r2, [r7, #0]
 80097ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80097ee:	bf00      	nop
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	08012b84 	.word	0x08012b84
 80097fc:	08013170 	.word	0x08013170
 8009800:	08012bc8 	.word	0x08012bc8

08009804 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d008      	beq.n	8009826 <tcp_accept+0x22>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	7d1b      	ldrb	r3, [r3, #20]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d104      	bne.n	8009826 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	683a      	ldr	r2, [r7, #0]
 8009824:	619a      	str	r2, [r3, #24]
  }
}
 8009826:	bf00      	nop
 8009828:	3714      	adds	r7, #20
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr
	...

08009834 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	4613      	mov	r3, r2
 8009840:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d107      	bne.n	8009858 <tcp_poll+0x24>
 8009848:	4b0e      	ldr	r3, [pc, #56]	; (8009884 <tcp_poll+0x50>)
 800984a:	f640 023d 	movw	r2, #2109	; 0x83d
 800984e:	490e      	ldr	r1, [pc, #56]	; (8009888 <tcp_poll+0x54>)
 8009850:	480e      	ldr	r0, [pc, #56]	; (800988c <tcp_poll+0x58>)
 8009852:	f007 fa15 	bl	8010c80 <iprintf>
 8009856:	e011      	b.n	800987c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	7d1b      	ldrb	r3, [r3, #20]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d106      	bne.n	800986e <tcp_poll+0x3a>
 8009860:	4b08      	ldr	r3, [pc, #32]	; (8009884 <tcp_poll+0x50>)
 8009862:	f640 023e 	movw	r2, #2110	; 0x83e
 8009866:	490a      	ldr	r1, [pc, #40]	; (8009890 <tcp_poll+0x5c>)
 8009868:	4808      	ldr	r0, [pc, #32]	; (800988c <tcp_poll+0x58>)
 800986a:	f007 fa09 	bl	8010c80 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	68ba      	ldr	r2, [r7, #8]
 8009872:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	79fa      	ldrb	r2, [r7, #7]
 800987a:	775a      	strb	r2, [r3, #29]
}
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	08012b84 	.word	0x08012b84
 8009888:	08013198 	.word	0x08013198
 800988c:	08012bc8 	.word	0x08012bc8
 8009890:	080131b0 	.word	0x080131b0

08009894 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d107      	bne.n	80098b2 <tcp_pcb_purge+0x1e>
 80098a2:	4b21      	ldr	r3, [pc, #132]	; (8009928 <tcp_pcb_purge+0x94>)
 80098a4:	f640 0251 	movw	r2, #2129	; 0x851
 80098a8:	4920      	ldr	r1, [pc, #128]	; (800992c <tcp_pcb_purge+0x98>)
 80098aa:	4821      	ldr	r0, [pc, #132]	; (8009930 <tcp_pcb_purge+0x9c>)
 80098ac:	f007 f9e8 	bl	8010c80 <iprintf>
 80098b0:	e037      	b.n	8009922 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	7d1b      	ldrb	r3, [r3, #20]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d033      	beq.n	8009922 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80098be:	2b0a      	cmp	r3, #10
 80098c0:	d02f      	beq.n	8009922 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d02b      	beq.n	8009922 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d007      	beq.n	80098e2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7fe f8d6 	bl	8007a88 <pbuf_free>
      pcb->refused_data = NULL;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d002      	beq.n	80098f0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 f986 	bl	8009bfc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80098f6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7ff fcdb 	bl	80092b8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009906:	4618      	mov	r0, r3
 8009908:	f7ff fcd6 	bl	80092b8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	66da      	str	r2, [r3, #108]	; 0x6c
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	08012b84 	.word	0x08012b84
 800992c:	080131d0 	.word	0x080131d0
 8009930:	08012bc8 	.word	0x08012bc8

08009934 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d106      	bne.n	8009952 <tcp_pcb_remove+0x1e>
 8009944:	4b3e      	ldr	r3, [pc, #248]	; (8009a40 <tcp_pcb_remove+0x10c>)
 8009946:	f640 0283 	movw	r2, #2179	; 0x883
 800994a:	493e      	ldr	r1, [pc, #248]	; (8009a44 <tcp_pcb_remove+0x110>)
 800994c:	483e      	ldr	r0, [pc, #248]	; (8009a48 <tcp_pcb_remove+0x114>)
 800994e:	f007 f997 	bl	8010c80 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d106      	bne.n	8009966 <tcp_pcb_remove+0x32>
 8009958:	4b39      	ldr	r3, [pc, #228]	; (8009a40 <tcp_pcb_remove+0x10c>)
 800995a:	f640 0284 	movw	r2, #2180	; 0x884
 800995e:	493b      	ldr	r1, [pc, #236]	; (8009a4c <tcp_pcb_remove+0x118>)
 8009960:	4839      	ldr	r0, [pc, #228]	; (8009a48 <tcp_pcb_remove+0x114>)
 8009962:	f007 f98d 	bl	8010c80 <iprintf>

  TCP_RMV(pcblist, pcb);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	683a      	ldr	r2, [r7, #0]
 800996c:	429a      	cmp	r2, r3
 800996e:	d105      	bne.n	800997c <tcp_pcb_remove+0x48>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68da      	ldr	r2, [r3, #12]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	601a      	str	r2, [r3, #0]
 800997a:	e013      	b.n	80099a4 <tcp_pcb_remove+0x70>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	60fb      	str	r3, [r7, #12]
 8009982:	e00c      	b.n	800999e <tcp_pcb_remove+0x6a>
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	683a      	ldr	r2, [r7, #0]
 800998a:	429a      	cmp	r2, r3
 800998c:	d104      	bne.n	8009998 <tcp_pcb_remove+0x64>
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	68da      	ldr	r2, [r3, #12]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	60da      	str	r2, [r3, #12]
 8009996:	e005      	b.n	80099a4 <tcp_pcb_remove+0x70>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	60fb      	str	r3, [r7, #12]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1ef      	bne.n	8009984 <tcp_pcb_remove+0x50>
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	2200      	movs	r2, #0
 80099a8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80099aa:	6838      	ldr	r0, [r7, #0]
 80099ac:	f7ff ff72 	bl	8009894 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	7d1b      	ldrb	r3, [r3, #20]
 80099b4:	2b0a      	cmp	r3, #10
 80099b6:	d013      	beq.n	80099e0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d00f      	beq.n	80099e0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	8b5b      	ldrh	r3, [r3, #26]
 80099c4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d009      	beq.n	80099e0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	8b5b      	ldrh	r3, [r3, #26]
 80099d0:	f043 0302 	orr.w	r3, r3, #2
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80099da:	6838      	ldr	r0, [r7, #0]
 80099dc:	f003 fbc6 	bl	800d16c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	7d1b      	ldrb	r3, [r3, #20]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d020      	beq.n	8009a2a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d006      	beq.n	80099fe <tcp_pcb_remove+0xca>
 80099f0:	4b13      	ldr	r3, [pc, #76]	; (8009a40 <tcp_pcb_remove+0x10c>)
 80099f2:	f640 0293 	movw	r2, #2195	; 0x893
 80099f6:	4916      	ldr	r1, [pc, #88]	; (8009a50 <tcp_pcb_remove+0x11c>)
 80099f8:	4813      	ldr	r0, [pc, #76]	; (8009a48 <tcp_pcb_remove+0x114>)
 80099fa:	f007 f941 	bl	8010c80 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d006      	beq.n	8009a14 <tcp_pcb_remove+0xe0>
 8009a06:	4b0e      	ldr	r3, [pc, #56]	; (8009a40 <tcp_pcb_remove+0x10c>)
 8009a08:	f640 0294 	movw	r2, #2196	; 0x894
 8009a0c:	4911      	ldr	r1, [pc, #68]	; (8009a54 <tcp_pcb_remove+0x120>)
 8009a0e:	480e      	ldr	r0, [pc, #56]	; (8009a48 <tcp_pcb_remove+0x114>)
 8009a10:	f007 f936 	bl	8010c80 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d006      	beq.n	8009a2a <tcp_pcb_remove+0xf6>
 8009a1c:	4b08      	ldr	r3, [pc, #32]	; (8009a40 <tcp_pcb_remove+0x10c>)
 8009a1e:	f640 0296 	movw	r2, #2198	; 0x896
 8009a22:	490d      	ldr	r1, [pc, #52]	; (8009a58 <tcp_pcb_remove+0x124>)
 8009a24:	4808      	ldr	r0, [pc, #32]	; (8009a48 <tcp_pcb_remove+0x114>)
 8009a26:	f007 f92b 	bl	8010c80 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	2200      	movs	r2, #0
 8009a34:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009a36:	bf00      	nop
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	08012b84 	.word	0x08012b84
 8009a44:	080131ec 	.word	0x080131ec
 8009a48:	08012bc8 	.word	0x08012bc8
 8009a4c:	08013208 	.word	0x08013208
 8009a50:	08013228 	.word	0x08013228
 8009a54:	08013240 	.word	0x08013240
 8009a58:	0801325c 	.word	0x0801325c

08009a5c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d106      	bne.n	8009a78 <tcp_next_iss+0x1c>
 8009a6a:	4b0a      	ldr	r3, [pc, #40]	; (8009a94 <tcp_next_iss+0x38>)
 8009a6c:	f640 02af 	movw	r2, #2223	; 0x8af
 8009a70:	4909      	ldr	r1, [pc, #36]	; (8009a98 <tcp_next_iss+0x3c>)
 8009a72:	480a      	ldr	r0, [pc, #40]	; (8009a9c <tcp_next_iss+0x40>)
 8009a74:	f007 f904 	bl	8010c80 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009a78:	4b09      	ldr	r3, [pc, #36]	; (8009aa0 <tcp_next_iss+0x44>)
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	4b09      	ldr	r3, [pc, #36]	; (8009aa4 <tcp_next_iss+0x48>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4413      	add	r3, r2
 8009a82:	4a07      	ldr	r2, [pc, #28]	; (8009aa0 <tcp_next_iss+0x44>)
 8009a84:	6013      	str	r3, [r2, #0]
  return iss;
 8009a86:	4b06      	ldr	r3, [pc, #24]	; (8009aa0 <tcp_next_iss+0x44>)
 8009a88:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	08012b84 	.word	0x08012b84
 8009a98:	08013274 	.word	0x08013274
 8009a9c:	08012bc8 	.word	0x08012bc8
 8009aa0:	20000024 	.word	0x20000024
 8009aa4:	200086ec 	.word	0x200086ec

08009aa8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	4603      	mov	r3, r0
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
 8009ab4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d106      	bne.n	8009aca <tcp_eff_send_mss_netif+0x22>
 8009abc:	4b14      	ldr	r3, [pc, #80]	; (8009b10 <tcp_eff_send_mss_netif+0x68>)
 8009abe:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009ac2:	4914      	ldr	r1, [pc, #80]	; (8009b14 <tcp_eff_send_mss_netif+0x6c>)
 8009ac4:	4814      	ldr	r0, [pc, #80]	; (8009b18 <tcp_eff_send_mss_netif+0x70>)
 8009ac6:	f007 f8db 	bl	8010c80 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d101      	bne.n	8009ad4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009ad0:	89fb      	ldrh	r3, [r7, #14]
 8009ad2:	e019      	b.n	8009b08 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009ad8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009ada:	8afb      	ldrh	r3, [r7, #22]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d012      	beq.n	8009b06 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009ae0:	2328      	movs	r3, #40	; 0x28
 8009ae2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009ae4:	8afa      	ldrh	r2, [r7, #22]
 8009ae6:	8abb      	ldrh	r3, [r7, #20]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d904      	bls.n	8009af6 <tcp_eff_send_mss_netif+0x4e>
 8009aec:	8afa      	ldrh	r2, [r7, #22]
 8009aee:	8abb      	ldrh	r3, [r7, #20]
 8009af0:	1ad3      	subs	r3, r2, r3
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	e000      	b.n	8009af8 <tcp_eff_send_mss_netif+0x50>
 8009af6:	2300      	movs	r3, #0
 8009af8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009afa:	8a7a      	ldrh	r2, [r7, #18]
 8009afc:	89fb      	ldrh	r3, [r7, #14]
 8009afe:	4293      	cmp	r3, r2
 8009b00:	bf28      	it	cs
 8009b02:	4613      	movcs	r3, r2
 8009b04:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009b06:	89fb      	ldrh	r3, [r7, #14]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3718      	adds	r7, #24
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	08012b84 	.word	0x08012b84
 8009b14:	08013290 	.word	0x08013290
 8009b18:	08012bc8 	.word	0x08012bc8

08009b1c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d119      	bne.n	8009b64 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009b30:	4b10      	ldr	r3, [pc, #64]	; (8009b74 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8009b32:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009b36:	4910      	ldr	r1, [pc, #64]	; (8009b78 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009b38:	4810      	ldr	r0, [pc, #64]	; (8009b7c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8009b3a:	f007 f8a1 	bl	8010c80 <iprintf>

  while (pcb != NULL) {
 8009b3e:	e011      	b.n	8009b64 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d108      	bne.n	8009b5e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	f7fe fd20 	bl	8008598 <tcp_abort>
      pcb = next;
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	60fb      	str	r3, [r7, #12]
 8009b5c:	e002      	b.n	8009b64 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1ea      	bne.n	8009b40 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8009b6a:	bf00      	nop
 8009b6c:	bf00      	nop
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	08012b84 	.word	0x08012b84
 8009b78:	080132b8 	.word	0x080132b8
 8009b7c:	08012bc8 	.word	0x08012bc8

08009b80 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d02a      	beq.n	8009be6 <tcp_netif_ip_addr_changed+0x66>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d026      	beq.n	8009be6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009b98:	4b15      	ldr	r3, [pc, #84]	; (8009bf0 <tcp_netif_ip_addr_changed+0x70>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f7ff ffbc 	bl	8009b1c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009ba4:	4b13      	ldr	r3, [pc, #76]	; (8009bf4 <tcp_netif_ip_addr_changed+0x74>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4619      	mov	r1, r3
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f7ff ffb6 	bl	8009b1c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d017      	beq.n	8009be6 <tcp_netif_ip_addr_changed+0x66>
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d013      	beq.n	8009be6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009bbe:	4b0e      	ldr	r3, [pc, #56]	; (8009bf8 <tcp_netif_ip_addr_changed+0x78>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	60fb      	str	r3, [r7, #12]
 8009bc4:	e00c      	b.n	8009be0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d103      	bne.n	8009bda <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	60fb      	str	r3, [r7, #12]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1ef      	bne.n	8009bc6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009be6:	bf00      	nop
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	200086f8 	.word	0x200086f8
 8009bf4:	200086f0 	.word	0x200086f0
 8009bf8:	200086f4 	.word	0x200086f4

08009bfc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d007      	beq.n	8009c1c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7ff fb51 	bl	80092b8 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009c1c:	bf00      	nop
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009c24:	b590      	push	{r4, r7, lr}
 8009c26:	b08d      	sub	sp, #52	; 0x34
 8009c28:	af04      	add	r7, sp, #16
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d105      	bne.n	8009c40 <tcp_input+0x1c>
 8009c34:	4b9b      	ldr	r3, [pc, #620]	; (8009ea4 <tcp_input+0x280>)
 8009c36:	2283      	movs	r2, #131	; 0x83
 8009c38:	499b      	ldr	r1, [pc, #620]	; (8009ea8 <tcp_input+0x284>)
 8009c3a:	489c      	ldr	r0, [pc, #624]	; (8009eac <tcp_input+0x288>)
 8009c3c:	f007 f820 	bl	8010c80 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	4a9a      	ldr	r2, [pc, #616]	; (8009eb0 <tcp_input+0x28c>)
 8009c46:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	895b      	ldrh	r3, [r3, #10]
 8009c4c:	2b13      	cmp	r3, #19
 8009c4e:	f240 83d1 	bls.w	800a3f4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009c52:	4b98      	ldr	r3, [pc, #608]	; (8009eb4 <tcp_input+0x290>)
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	4a97      	ldr	r2, [pc, #604]	; (8009eb4 <tcp_input+0x290>)
 8009c58:	6812      	ldr	r2, [r2, #0]
 8009c5a:	4611      	mov	r1, r2
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f006 f86f 	bl	800fd40 <ip4_addr_isbroadcast_u32>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f040 83c7 	bne.w	800a3f8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009c6a:	4b92      	ldr	r3, [pc, #584]	; (8009eb4 <tcp_input+0x290>)
 8009c6c:	695b      	ldr	r3, [r3, #20]
 8009c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009c72:	2be0      	cmp	r3, #224	; 0xe0
 8009c74:	f000 83c0 	beq.w	800a3f8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009c78:	4b8d      	ldr	r3, [pc, #564]	; (8009eb0 <tcp_input+0x28c>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	899b      	ldrh	r3, [r3, #12]
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7fc fb39 	bl	80062f8 <lwip_htons>
 8009c86:	4603      	mov	r3, r0
 8009c88:	0b1b      	lsrs	r3, r3, #12
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009c92:	7cbb      	ldrb	r3, [r7, #18]
 8009c94:	2b13      	cmp	r3, #19
 8009c96:	f240 83b1 	bls.w	800a3fc <tcp_input+0x7d8>
 8009c9a:	7cbb      	ldrb	r3, [r7, #18]
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	891b      	ldrh	r3, [r3, #8]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	f200 83aa 	bhi.w	800a3fc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009ca8:	7cbb      	ldrb	r3, [r7, #18]
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	3b14      	subs	r3, #20
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	4b81      	ldr	r3, [pc, #516]	; (8009eb8 <tcp_input+0x294>)
 8009cb2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009cb4:	4b81      	ldr	r3, [pc, #516]	; (8009ebc <tcp_input+0x298>)
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	895a      	ldrh	r2, [r3, #10]
 8009cbe:	7cbb      	ldrb	r3, [r7, #18]
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d309      	bcc.n	8009cda <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009cc6:	4b7c      	ldr	r3, [pc, #496]	; (8009eb8 <tcp_input+0x294>)
 8009cc8:	881a      	ldrh	r2, [r3, #0]
 8009cca:	4b7d      	ldr	r3, [pc, #500]	; (8009ec0 <tcp_input+0x29c>)
 8009ccc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009cce:	7cbb      	ldrb	r3, [r7, #18]
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7fd fe52 	bl	800797c <pbuf_remove_header>
 8009cd8:	e04e      	b.n	8009d78 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d105      	bne.n	8009cee <tcp_input+0xca>
 8009ce2:	4b70      	ldr	r3, [pc, #448]	; (8009ea4 <tcp_input+0x280>)
 8009ce4:	22c2      	movs	r2, #194	; 0xc2
 8009ce6:	4977      	ldr	r1, [pc, #476]	; (8009ec4 <tcp_input+0x2a0>)
 8009ce8:	4870      	ldr	r0, [pc, #448]	; (8009eac <tcp_input+0x288>)
 8009cea:	f006 ffc9 	bl	8010c80 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009cee:	2114      	movs	r1, #20
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f7fd fe43 	bl	800797c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	895a      	ldrh	r2, [r3, #10]
 8009cfa:	4b71      	ldr	r3, [pc, #452]	; (8009ec0 <tcp_input+0x29c>)
 8009cfc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009cfe:	4b6e      	ldr	r3, [pc, #440]	; (8009eb8 <tcp_input+0x294>)
 8009d00:	881a      	ldrh	r2, [r3, #0]
 8009d02:	4b6f      	ldr	r3, [pc, #444]	; (8009ec0 <tcp_input+0x29c>)
 8009d04:	881b      	ldrh	r3, [r3, #0]
 8009d06:	1ad3      	subs	r3, r2, r3
 8009d08:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009d0a:	4b6d      	ldr	r3, [pc, #436]	; (8009ec0 <tcp_input+0x29c>)
 8009d0c:	881b      	ldrh	r3, [r3, #0]
 8009d0e:	4619      	mov	r1, r3
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f7fd fe33 	bl	800797c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	895b      	ldrh	r3, [r3, #10]
 8009d1c:	8a3a      	ldrh	r2, [r7, #16]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	f200 836e 	bhi.w	800a400 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	4a64      	ldr	r2, [pc, #400]	; (8009ebc <tcp_input+0x298>)
 8009d2c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	8a3a      	ldrh	r2, [r7, #16]
 8009d34:	4611      	mov	r1, r2
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fd fe20 	bl	800797c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	891a      	ldrh	r2, [r3, #8]
 8009d40:	8a3b      	ldrh	r3, [r7, #16]
 8009d42:	1ad3      	subs	r3, r2, r3
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	895b      	ldrh	r3, [r3, #10]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d005      	beq.n	8009d5e <tcp_input+0x13a>
 8009d52:	4b54      	ldr	r3, [pc, #336]	; (8009ea4 <tcp_input+0x280>)
 8009d54:	22df      	movs	r2, #223	; 0xdf
 8009d56:	495c      	ldr	r1, [pc, #368]	; (8009ec8 <tcp_input+0x2a4>)
 8009d58:	4854      	ldr	r0, [pc, #336]	; (8009eac <tcp_input+0x288>)
 8009d5a:	f006 ff91 	bl	8010c80 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	891a      	ldrh	r2, [r3, #8]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	891b      	ldrh	r3, [r3, #8]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d005      	beq.n	8009d78 <tcp_input+0x154>
 8009d6c:	4b4d      	ldr	r3, [pc, #308]	; (8009ea4 <tcp_input+0x280>)
 8009d6e:	22e0      	movs	r2, #224	; 0xe0
 8009d70:	4956      	ldr	r1, [pc, #344]	; (8009ecc <tcp_input+0x2a8>)
 8009d72:	484e      	ldr	r0, [pc, #312]	; (8009eac <tcp_input+0x288>)
 8009d74:	f006 ff84 	bl	8010c80 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009d78:	4b4d      	ldr	r3, [pc, #308]	; (8009eb0 <tcp_input+0x28c>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	881b      	ldrh	r3, [r3, #0]
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	4a4b      	ldr	r2, [pc, #300]	; (8009eb0 <tcp_input+0x28c>)
 8009d82:	6814      	ldr	r4, [r2, #0]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7fc fab7 	bl	80062f8 <lwip_htons>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009d8e:	4b48      	ldr	r3, [pc, #288]	; (8009eb0 <tcp_input+0x28c>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	885b      	ldrh	r3, [r3, #2]
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	4a46      	ldr	r2, [pc, #280]	; (8009eb0 <tcp_input+0x28c>)
 8009d98:	6814      	ldr	r4, [r2, #0]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fc faac 	bl	80062f8 <lwip_htons>
 8009da0:	4603      	mov	r3, r0
 8009da2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009da4:	4b42      	ldr	r3, [pc, #264]	; (8009eb0 <tcp_input+0x28c>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	4a41      	ldr	r2, [pc, #260]	; (8009eb0 <tcp_input+0x28c>)
 8009dac:	6814      	ldr	r4, [r2, #0]
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7fc fab7 	bl	8006322 <lwip_htonl>
 8009db4:	4603      	mov	r3, r0
 8009db6:	6063      	str	r3, [r4, #4]
 8009db8:	6863      	ldr	r3, [r4, #4]
 8009dba:	4a45      	ldr	r2, [pc, #276]	; (8009ed0 <tcp_input+0x2ac>)
 8009dbc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009dbe:	4b3c      	ldr	r3, [pc, #240]	; (8009eb0 <tcp_input+0x28c>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	4a3a      	ldr	r2, [pc, #232]	; (8009eb0 <tcp_input+0x28c>)
 8009dc6:	6814      	ldr	r4, [r2, #0]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7fc faaa 	bl	8006322 <lwip_htonl>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	60a3      	str	r3, [r4, #8]
 8009dd2:	68a3      	ldr	r3, [r4, #8]
 8009dd4:	4a3f      	ldr	r2, [pc, #252]	; (8009ed4 <tcp_input+0x2b0>)
 8009dd6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009dd8:	4b35      	ldr	r3, [pc, #212]	; (8009eb0 <tcp_input+0x28c>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	89db      	ldrh	r3, [r3, #14]
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	4a33      	ldr	r2, [pc, #204]	; (8009eb0 <tcp_input+0x28c>)
 8009de2:	6814      	ldr	r4, [r2, #0]
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fc fa87 	bl	80062f8 <lwip_htons>
 8009dea:	4603      	mov	r3, r0
 8009dec:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009dee:	4b30      	ldr	r3, [pc, #192]	; (8009eb0 <tcp_input+0x28c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	899b      	ldrh	r3, [r3, #12]
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fc fa7e 	bl	80062f8 <lwip_htons>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e04:	b2da      	uxtb	r2, r3
 8009e06:	4b34      	ldr	r3, [pc, #208]	; (8009ed8 <tcp_input+0x2b4>)
 8009e08:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	891a      	ldrh	r2, [r3, #8]
 8009e0e:	4b33      	ldr	r3, [pc, #204]	; (8009edc <tcp_input+0x2b8>)
 8009e10:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009e12:	4b31      	ldr	r3, [pc, #196]	; (8009ed8 <tcp_input+0x2b4>)
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	f003 0303 	and.w	r3, r3, #3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00c      	beq.n	8009e38 <tcp_input+0x214>
    tcplen++;
 8009e1e:	4b2f      	ldr	r3, [pc, #188]	; (8009edc <tcp_input+0x2b8>)
 8009e20:	881b      	ldrh	r3, [r3, #0]
 8009e22:	3301      	adds	r3, #1
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	4b2d      	ldr	r3, [pc, #180]	; (8009edc <tcp_input+0x2b8>)
 8009e28:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	891a      	ldrh	r2, [r3, #8]
 8009e2e:	4b2b      	ldr	r3, [pc, #172]	; (8009edc <tcp_input+0x2b8>)
 8009e30:	881b      	ldrh	r3, [r3, #0]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	f200 82e6 	bhi.w	800a404 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e3c:	4b28      	ldr	r3, [pc, #160]	; (8009ee0 <tcp_input+0x2bc>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	61fb      	str	r3, [r7, #28]
 8009e42:	e09d      	b.n	8009f80 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	7d1b      	ldrb	r3, [r3, #20]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d105      	bne.n	8009e58 <tcp_input+0x234>
 8009e4c:	4b15      	ldr	r3, [pc, #84]	; (8009ea4 <tcp_input+0x280>)
 8009e4e:	22fb      	movs	r2, #251	; 0xfb
 8009e50:	4924      	ldr	r1, [pc, #144]	; (8009ee4 <tcp_input+0x2c0>)
 8009e52:	4816      	ldr	r0, [pc, #88]	; (8009eac <tcp_input+0x288>)
 8009e54:	f006 ff14 	bl	8010c80 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	7d1b      	ldrb	r3, [r3, #20]
 8009e5c:	2b0a      	cmp	r3, #10
 8009e5e:	d105      	bne.n	8009e6c <tcp_input+0x248>
 8009e60:	4b10      	ldr	r3, [pc, #64]	; (8009ea4 <tcp_input+0x280>)
 8009e62:	22fc      	movs	r2, #252	; 0xfc
 8009e64:	4920      	ldr	r1, [pc, #128]	; (8009ee8 <tcp_input+0x2c4>)
 8009e66:	4811      	ldr	r0, [pc, #68]	; (8009eac <tcp_input+0x288>)
 8009e68:	f006 ff0a 	bl	8010c80 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	7d1b      	ldrb	r3, [r3, #20]
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d105      	bne.n	8009e80 <tcp_input+0x25c>
 8009e74:	4b0b      	ldr	r3, [pc, #44]	; (8009ea4 <tcp_input+0x280>)
 8009e76:	22fd      	movs	r2, #253	; 0xfd
 8009e78:	491c      	ldr	r1, [pc, #112]	; (8009eec <tcp_input+0x2c8>)
 8009e7a:	480c      	ldr	r0, [pc, #48]	; (8009eac <tcp_input+0x288>)
 8009e7c:	f006 ff00 	bl	8010c80 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	7a1b      	ldrb	r3, [r3, #8]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d033      	beq.n	8009ef0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	7a1a      	ldrb	r2, [r3, #8]
 8009e8c:	4b09      	ldr	r3, [pc, #36]	; (8009eb4 <tcp_input+0x290>)
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009e94:	3301      	adds	r3, #1
 8009e96:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d029      	beq.n	8009ef0 <tcp_input+0x2cc>
      prev = pcb;
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	61bb      	str	r3, [r7, #24]
      continue;
 8009ea0:	e06b      	b.n	8009f7a <tcp_input+0x356>
 8009ea2:	bf00      	nop
 8009ea4:	080132ec 	.word	0x080132ec
 8009ea8:	08013320 	.word	0x08013320
 8009eac:	08013338 	.word	0x08013338
 8009eb0:	20008714 	.word	0x20008714
 8009eb4:	2000517c 	.word	0x2000517c
 8009eb8:	20008718 	.word	0x20008718
 8009ebc:	2000871c 	.word	0x2000871c
 8009ec0:	2000871a 	.word	0x2000871a
 8009ec4:	08013360 	.word	0x08013360
 8009ec8:	08013370 	.word	0x08013370
 8009ecc:	0801337c 	.word	0x0801337c
 8009ed0:	20008724 	.word	0x20008724
 8009ed4:	20008728 	.word	0x20008728
 8009ed8:	20008730 	.word	0x20008730
 8009edc:	2000872e 	.word	0x2000872e
 8009ee0:	200086f8 	.word	0x200086f8
 8009ee4:	0801339c 	.word	0x0801339c
 8009ee8:	080133c4 	.word	0x080133c4
 8009eec:	080133f0 	.word	0x080133f0
    }

    if (pcb->remote_port == tcphdr->src &&
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	8b1a      	ldrh	r2, [r3, #24]
 8009ef4:	4b72      	ldr	r3, [pc, #456]	; (800a0c0 <tcp_input+0x49c>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	881b      	ldrh	r3, [r3, #0]
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d13a      	bne.n	8009f76 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009f00:	69fb      	ldr	r3, [r7, #28]
 8009f02:	8ada      	ldrh	r2, [r3, #22]
 8009f04:	4b6e      	ldr	r3, [pc, #440]	; (800a0c0 <tcp_input+0x49c>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	885b      	ldrh	r3, [r3, #2]
 8009f0a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d132      	bne.n	8009f76 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	685a      	ldr	r2, [r3, #4]
 8009f14:	4b6b      	ldr	r3, [pc, #428]	; (800a0c4 <tcp_input+0x4a0>)
 8009f16:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d12c      	bne.n	8009f76 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	4b68      	ldr	r3, [pc, #416]	; (800a0c4 <tcp_input+0x4a0>)
 8009f22:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d126      	bne.n	8009f76 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	69fa      	ldr	r2, [r7, #28]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d106      	bne.n	8009f40 <tcp_input+0x31c>
 8009f32:	4b65      	ldr	r3, [pc, #404]	; (800a0c8 <tcp_input+0x4a4>)
 8009f34:	f240 120d 	movw	r2, #269	; 0x10d
 8009f38:	4964      	ldr	r1, [pc, #400]	; (800a0cc <tcp_input+0x4a8>)
 8009f3a:	4865      	ldr	r0, [pc, #404]	; (800a0d0 <tcp_input+0x4ac>)
 8009f3c:	f006 fea0 	bl	8010c80 <iprintf>
      if (prev != NULL) {
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00a      	beq.n	8009f5c <tcp_input+0x338>
        prev->next = pcb->next;
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	68da      	ldr	r2, [r3, #12]
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009f4e:	4b61      	ldr	r3, [pc, #388]	; (800a0d4 <tcp_input+0x4b0>)
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009f56:	4a5f      	ldr	r2, [pc, #380]	; (800a0d4 <tcp_input+0x4b0>)
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	69fa      	ldr	r2, [r7, #28]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d111      	bne.n	8009f8a <tcp_input+0x366>
 8009f66:	4b58      	ldr	r3, [pc, #352]	; (800a0c8 <tcp_input+0x4a4>)
 8009f68:	f240 1215 	movw	r2, #277	; 0x115
 8009f6c:	495a      	ldr	r1, [pc, #360]	; (800a0d8 <tcp_input+0x4b4>)
 8009f6e:	4858      	ldr	r0, [pc, #352]	; (800a0d0 <tcp_input+0x4ac>)
 8009f70:	f006 fe86 	bl	8010c80 <iprintf>
      break;
 8009f74:	e009      	b.n	8009f8a <tcp_input+0x366>
    }
    prev = pcb;
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f7a:	69fb      	ldr	r3, [r7, #28]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	61fb      	str	r3, [r7, #28]
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f47f af5e 	bne.w	8009e44 <tcp_input+0x220>
 8009f88:	e000      	b.n	8009f8c <tcp_input+0x368>
      break;
 8009f8a:	bf00      	nop
  }

  if (pcb == NULL) {
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	f040 80aa 	bne.w	800a0e8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f94:	4b51      	ldr	r3, [pc, #324]	; (800a0dc <tcp_input+0x4b8>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	61fb      	str	r3, [r7, #28]
 8009f9a:	e03f      	b.n	800a01c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	7d1b      	ldrb	r3, [r3, #20]
 8009fa0:	2b0a      	cmp	r3, #10
 8009fa2:	d006      	beq.n	8009fb2 <tcp_input+0x38e>
 8009fa4:	4b48      	ldr	r3, [pc, #288]	; (800a0c8 <tcp_input+0x4a4>)
 8009fa6:	f240 121f 	movw	r2, #287	; 0x11f
 8009faa:	494d      	ldr	r1, [pc, #308]	; (800a0e0 <tcp_input+0x4bc>)
 8009fac:	4848      	ldr	r0, [pc, #288]	; (800a0d0 <tcp_input+0x4ac>)
 8009fae:	f006 fe67 	bl	8010c80 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	7a1b      	ldrb	r3, [r3, #8]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d009      	beq.n	8009fce <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009fba:	69fb      	ldr	r3, [r7, #28]
 8009fbc:	7a1a      	ldrb	r2, [r3, #8]
 8009fbe:	4b41      	ldr	r3, [pc, #260]	; (800a0c4 <tcp_input+0x4a0>)
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d122      	bne.n	800a014 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	8b1a      	ldrh	r2, [r3, #24]
 8009fd2:	4b3b      	ldr	r3, [pc, #236]	; (800a0c0 <tcp_input+0x49c>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	881b      	ldrh	r3, [r3, #0]
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d11b      	bne.n	800a016 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	8ada      	ldrh	r2, [r3, #22]
 8009fe2:	4b37      	ldr	r3, [pc, #220]	; (800a0c0 <tcp_input+0x49c>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	885b      	ldrh	r3, [r3, #2]
 8009fe8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d113      	bne.n	800a016 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	685a      	ldr	r2, [r3, #4]
 8009ff2:	4b34      	ldr	r3, [pc, #208]	; (800a0c4 <tcp_input+0x4a0>)
 8009ff4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d10d      	bne.n	800a016 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	4b31      	ldr	r3, [pc, #196]	; (800a0c4 <tcp_input+0x4a0>)
 800a000:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a002:	429a      	cmp	r2, r3
 800a004:	d107      	bne.n	800a016 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a006:	69f8      	ldr	r0, [r7, #28]
 800a008:	f000 fb56 	bl	800a6b8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f7fd fd3b 	bl	8007a88 <pbuf_free>
        return;
 800a012:	e1fd      	b.n	800a410 <tcp_input+0x7ec>
        continue;
 800a014:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	61fb      	str	r3, [r7, #28]
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1bc      	bne.n	8009f9c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a022:	2300      	movs	r3, #0
 800a024:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a026:	4b2f      	ldr	r3, [pc, #188]	; (800a0e4 <tcp_input+0x4c0>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	617b      	str	r3, [r7, #20]
 800a02c:	e02a      	b.n	800a084 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	7a1b      	ldrb	r3, [r3, #8]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00c      	beq.n	800a050 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	7a1a      	ldrb	r2, [r3, #8]
 800a03a:	4b22      	ldr	r3, [pc, #136]	; (800a0c4 <tcp_input+0x4a0>)
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a042:	3301      	adds	r3, #1
 800a044:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a046:	429a      	cmp	r2, r3
 800a048:	d002      	beq.n	800a050 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	61bb      	str	r3, [r7, #24]
        continue;
 800a04e:	e016      	b.n	800a07e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	8ada      	ldrh	r2, [r3, #22]
 800a054:	4b1a      	ldr	r3, [pc, #104]	; (800a0c0 <tcp_input+0x49c>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	885b      	ldrh	r3, [r3, #2]
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d10c      	bne.n	800a07a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	4b17      	ldr	r3, [pc, #92]	; (800a0c4 <tcp_input+0x4a0>)
 800a066:	695b      	ldr	r3, [r3, #20]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d00f      	beq.n	800a08c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00d      	beq.n	800a08e <tcp_input+0x46a>
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d009      	beq.n	800a08e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	617b      	str	r3, [r7, #20]
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d1d1      	bne.n	800a02e <tcp_input+0x40a>
 800a08a:	e000      	b.n	800a08e <tcp_input+0x46a>
            break;
 800a08c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d029      	beq.n	800a0e8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00a      	beq.n	800a0b0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	68da      	ldr	r2, [r3, #12]
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a0a2:	4b10      	ldr	r3, [pc, #64]	; (800a0e4 <tcp_input+0x4c0>)
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a0aa:	4a0e      	ldr	r2, [pc, #56]	; (800a0e4 <tcp_input+0x4c0>)
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a0b0:	6978      	ldr	r0, [r7, #20]
 800a0b2:	f000 fa03 	bl	800a4bc <tcp_listen_input>
      }
      pbuf_free(p);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f7fd fce6 	bl	8007a88 <pbuf_free>
      return;
 800a0bc:	e1a8      	b.n	800a410 <tcp_input+0x7ec>
 800a0be:	bf00      	nop
 800a0c0:	20008714 	.word	0x20008714
 800a0c4:	2000517c 	.word	0x2000517c
 800a0c8:	080132ec 	.word	0x080132ec
 800a0cc:	08013418 	.word	0x08013418
 800a0d0:	08013338 	.word	0x08013338
 800a0d4:	200086f8 	.word	0x200086f8
 800a0d8:	08013444 	.word	0x08013444
 800a0dc:	200086fc 	.word	0x200086fc
 800a0e0:	08013470 	.word	0x08013470
 800a0e4:	200086f4 	.word	0x200086f4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f000 8158 	beq.w	800a3a0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a0f0:	4b95      	ldr	r3, [pc, #596]	; (800a348 <tcp_input+0x724>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	891a      	ldrh	r2, [r3, #8]
 800a0fa:	4b93      	ldr	r3, [pc, #588]	; (800a348 <tcp_input+0x724>)
 800a0fc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a0fe:	4a92      	ldr	r2, [pc, #584]	; (800a348 <tcp_input+0x724>)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a104:	4b91      	ldr	r3, [pc, #580]	; (800a34c <tcp_input+0x728>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a8f      	ldr	r2, [pc, #572]	; (800a348 <tcp_input+0x724>)
 800a10a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a10c:	4b90      	ldr	r3, [pc, #576]	; (800a350 <tcp_input+0x72c>)
 800a10e:	2200      	movs	r2, #0
 800a110:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a112:	4b90      	ldr	r3, [pc, #576]	; (800a354 <tcp_input+0x730>)
 800a114:	2200      	movs	r2, #0
 800a116:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a118:	4b8f      	ldr	r3, [pc, #572]	; (800a358 <tcp_input+0x734>)
 800a11a:	2200      	movs	r2, #0
 800a11c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a11e:	4b8f      	ldr	r3, [pc, #572]	; (800a35c <tcp_input+0x738>)
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	f003 0308 	and.w	r3, r3, #8
 800a126:	2b00      	cmp	r3, #0
 800a128:	d006      	beq.n	800a138 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	7b5b      	ldrb	r3, [r3, #13]
 800a12e:	f043 0301 	orr.w	r3, r3, #1
 800a132:	b2da      	uxtb	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d017      	beq.n	800a170 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a140:	69f8      	ldr	r0, [r7, #28]
 800a142:	f7ff f83d 	bl	80091c0 <tcp_process_refused_data>
 800a146:	4603      	mov	r3, r0
 800a148:	f113 0f0d 	cmn.w	r3, #13
 800a14c:	d007      	beq.n	800a15e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00c      	beq.n	800a170 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a156:	4b82      	ldr	r3, [pc, #520]	; (800a360 <tcp_input+0x73c>)
 800a158:	881b      	ldrh	r3, [r3, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d008      	beq.n	800a170 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a162:	2b00      	cmp	r3, #0
 800a164:	f040 80e3 	bne.w	800a32e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a168:	69f8      	ldr	r0, [r7, #28]
 800a16a:	f003 fe05 	bl	800dd78 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a16e:	e0de      	b.n	800a32e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800a170:	4a7c      	ldr	r2, [pc, #496]	; (800a364 <tcp_input+0x740>)
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a176:	69f8      	ldr	r0, [r7, #28]
 800a178:	f000 fb18 	bl	800a7ac <tcp_process>
 800a17c:	4603      	mov	r3, r0
 800a17e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a180:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a184:	f113 0f0d 	cmn.w	r3, #13
 800a188:	f000 80d3 	beq.w	800a332 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800a18c:	4b71      	ldr	r3, [pc, #452]	; (800a354 <tcp_input+0x730>)
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	f003 0308 	and.w	r3, r3, #8
 800a194:	2b00      	cmp	r3, #0
 800a196:	d015      	beq.n	800a1c4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d008      	beq.n	800a1b4 <tcp_input+0x590>
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1a8:	69fa      	ldr	r2, [r7, #28]
 800a1aa:	6912      	ldr	r2, [r2, #16]
 800a1ac:	f06f 010d 	mvn.w	r1, #13
 800a1b0:	4610      	mov	r0, r2
 800a1b2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a1b4:	69f9      	ldr	r1, [r7, #28]
 800a1b6:	486c      	ldr	r0, [pc, #432]	; (800a368 <tcp_input+0x744>)
 800a1b8:	f7ff fbbc 	bl	8009934 <tcp_pcb_remove>
        tcp_free(pcb);
 800a1bc:	69f8      	ldr	r0, [r7, #28]
 800a1be:	f7fd ff03 	bl	8007fc8 <tcp_free>
 800a1c2:	e0da      	b.n	800a37a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a1c8:	4b63      	ldr	r3, [pc, #396]	; (800a358 <tcp_input+0x734>)
 800a1ca:	881b      	ldrh	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d01d      	beq.n	800a20c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a1d0:	4b61      	ldr	r3, [pc, #388]	; (800a358 <tcp_input+0x734>)
 800a1d2:	881b      	ldrh	r3, [r3, #0]
 800a1d4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a1d6:	69fb      	ldr	r3, [r7, #28]
 800a1d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00a      	beq.n	800a1f6 <tcp_input+0x5d2>
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1e6:	69fa      	ldr	r2, [r7, #28]
 800a1e8:	6910      	ldr	r0, [r2, #16]
 800a1ea:	89fa      	ldrh	r2, [r7, #14]
 800a1ec:	69f9      	ldr	r1, [r7, #28]
 800a1ee:	4798      	blx	r3
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	74fb      	strb	r3, [r7, #19]
 800a1f4:	e001      	b.n	800a1fa <tcp_input+0x5d6>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a1fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1fe:	f113 0f0d 	cmn.w	r3, #13
 800a202:	f000 8098 	beq.w	800a336 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a206:	4b54      	ldr	r3, [pc, #336]	; (800a358 <tcp_input+0x734>)
 800a208:	2200      	movs	r2, #0
 800a20a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a20c:	69f8      	ldr	r0, [r7, #28]
 800a20e:	f000 f915 	bl	800a43c <tcp_input_delayed_close>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	f040 8090 	bne.w	800a33a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a21a:	4b4d      	ldr	r3, [pc, #308]	; (800a350 <tcp_input+0x72c>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d041      	beq.n	800a2a6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a226:	2b00      	cmp	r3, #0
 800a228:	d006      	beq.n	800a238 <tcp_input+0x614>
 800a22a:	4b50      	ldr	r3, [pc, #320]	; (800a36c <tcp_input+0x748>)
 800a22c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a230:	494f      	ldr	r1, [pc, #316]	; (800a370 <tcp_input+0x74c>)
 800a232:	4850      	ldr	r0, [pc, #320]	; (800a374 <tcp_input+0x750>)
 800a234:	f006 fd24 	bl	8010c80 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	8b5b      	ldrh	r3, [r3, #26]
 800a23c:	f003 0310 	and.w	r3, r3, #16
 800a240:	2b00      	cmp	r3, #0
 800a242:	d008      	beq.n	800a256 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a244:	4b42      	ldr	r3, [pc, #264]	; (800a350 <tcp_input+0x72c>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4618      	mov	r0, r3
 800a24a:	f7fd fc1d 	bl	8007a88 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a24e:	69f8      	ldr	r0, [r7, #28]
 800a250:	f7fe f9a2 	bl	8008598 <tcp_abort>
            goto aborted;
 800a254:	e091      	b.n	800a37a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d00c      	beq.n	800a27a <tcp_input+0x656>
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	6918      	ldr	r0, [r3, #16]
 800a26a:	4b39      	ldr	r3, [pc, #228]	; (800a350 <tcp_input+0x72c>)
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	2300      	movs	r3, #0
 800a270:	69f9      	ldr	r1, [r7, #28]
 800a272:	47a0      	blx	r4
 800a274:	4603      	mov	r3, r0
 800a276:	74fb      	strb	r3, [r7, #19]
 800a278:	e008      	b.n	800a28c <tcp_input+0x668>
 800a27a:	4b35      	ldr	r3, [pc, #212]	; (800a350 <tcp_input+0x72c>)
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	2300      	movs	r3, #0
 800a280:	69f9      	ldr	r1, [r7, #28]
 800a282:	2000      	movs	r0, #0
 800a284:	f7ff f890 	bl	80093a8 <tcp_recv_null>
 800a288:	4603      	mov	r3, r0
 800a28a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a28c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a290:	f113 0f0d 	cmn.w	r3, #13
 800a294:	d053      	beq.n	800a33e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a296:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d003      	beq.n	800a2a6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a29e:	4b2c      	ldr	r3, [pc, #176]	; (800a350 <tcp_input+0x72c>)
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a2a6:	4b2b      	ldr	r3, [pc, #172]	; (800a354 <tcp_input+0x730>)
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	f003 0320 	and.w	r3, r3, #32
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d030      	beq.n	800a314 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d009      	beq.n	800a2ce <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2be:	7b5a      	ldrb	r2, [r3, #13]
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2c4:	f042 0220 	orr.w	r2, r2, #32
 800a2c8:	b2d2      	uxtb	r2, r2
 800a2ca:	735a      	strb	r2, [r3, #13]
 800a2cc:	e022      	b.n	800a314 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2d2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a2d6:	d005      	beq.n	800a2e4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2dc:	3301      	adds	r3, #1
 800a2de:	b29a      	uxth	r2, r3
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00b      	beq.n	800a306 <tcp_input+0x6e2>
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	6918      	ldr	r0, [r3, #16]
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	69f9      	ldr	r1, [r7, #28]
 800a2fe:	47a0      	blx	r4
 800a300:	4603      	mov	r3, r0
 800a302:	74fb      	strb	r3, [r7, #19]
 800a304:	e001      	b.n	800a30a <tcp_input+0x6e6>
 800a306:	2300      	movs	r3, #0
 800a308:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a30a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a30e:	f113 0f0d 	cmn.w	r3, #13
 800a312:	d016      	beq.n	800a342 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a314:	4b13      	ldr	r3, [pc, #76]	; (800a364 <tcp_input+0x740>)
 800a316:	2200      	movs	r2, #0
 800a318:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a31a:	69f8      	ldr	r0, [r7, #28]
 800a31c:	f000 f88e 	bl	800a43c <tcp_input_delayed_close>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d128      	bne.n	800a378 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a326:	69f8      	ldr	r0, [r7, #28]
 800a328:	f002 ff20 	bl	800d16c <tcp_output>
 800a32c:	e025      	b.n	800a37a <tcp_input+0x756>
        goto aborted;
 800a32e:	bf00      	nop
 800a330:	e023      	b.n	800a37a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a332:	bf00      	nop
 800a334:	e021      	b.n	800a37a <tcp_input+0x756>
              goto aborted;
 800a336:	bf00      	nop
 800a338:	e01f      	b.n	800a37a <tcp_input+0x756>
          goto aborted;
 800a33a:	bf00      	nop
 800a33c:	e01d      	b.n	800a37a <tcp_input+0x756>
            goto aborted;
 800a33e:	bf00      	nop
 800a340:	e01b      	b.n	800a37a <tcp_input+0x756>
              goto aborted;
 800a342:	bf00      	nop
 800a344:	e019      	b.n	800a37a <tcp_input+0x756>
 800a346:	bf00      	nop
 800a348:	20008704 	.word	0x20008704
 800a34c:	20008714 	.word	0x20008714
 800a350:	20008734 	.word	0x20008734
 800a354:	20008731 	.word	0x20008731
 800a358:	2000872c 	.word	0x2000872c
 800a35c:	20008730 	.word	0x20008730
 800a360:	2000872e 	.word	0x2000872e
 800a364:	20008738 	.word	0x20008738
 800a368:	200086f8 	.word	0x200086f8
 800a36c:	080132ec 	.word	0x080132ec
 800a370:	080134a0 	.word	0x080134a0
 800a374:	08013338 	.word	0x08013338
          goto aborted;
 800a378:	bf00      	nop
    tcp_input_pcb = NULL;
 800a37a:	4b27      	ldr	r3, [pc, #156]	; (800a418 <tcp_input+0x7f4>)
 800a37c:	2200      	movs	r2, #0
 800a37e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a380:	4b26      	ldr	r3, [pc, #152]	; (800a41c <tcp_input+0x7f8>)
 800a382:	2200      	movs	r2, #0
 800a384:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a386:	4b26      	ldr	r3, [pc, #152]	; (800a420 <tcp_input+0x7fc>)
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d03f      	beq.n	800a40e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800a38e:	4b24      	ldr	r3, [pc, #144]	; (800a420 <tcp_input+0x7fc>)
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	4618      	mov	r0, r3
 800a394:	f7fd fb78 	bl	8007a88 <pbuf_free>
      inseg.p = NULL;
 800a398:	4b21      	ldr	r3, [pc, #132]	; (800a420 <tcp_input+0x7fc>)
 800a39a:	2200      	movs	r2, #0
 800a39c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a39e:	e036      	b.n	800a40e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a3a0:	4b20      	ldr	r3, [pc, #128]	; (800a424 <tcp_input+0x800>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	899b      	ldrh	r3, [r3, #12]
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fb ffa5 	bl	80062f8 <lwip_htons>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	f003 0304 	and.w	r3, r3, #4
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d118      	bne.n	800a3ec <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a3ba:	4b1b      	ldr	r3, [pc, #108]	; (800a428 <tcp_input+0x804>)
 800a3bc:	6819      	ldr	r1, [r3, #0]
 800a3be:	4b1b      	ldr	r3, [pc, #108]	; (800a42c <tcp_input+0x808>)
 800a3c0:	881b      	ldrh	r3, [r3, #0]
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	4b1a      	ldr	r3, [pc, #104]	; (800a430 <tcp_input+0x80c>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a3ca:	4b16      	ldr	r3, [pc, #88]	; (800a424 <tcp_input+0x800>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a3ce:	885b      	ldrh	r3, [r3, #2]
 800a3d0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a3d2:	4a14      	ldr	r2, [pc, #80]	; (800a424 <tcp_input+0x800>)
 800a3d4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a3d6:	8812      	ldrh	r2, [r2, #0]
 800a3d8:	b292      	uxth	r2, r2
 800a3da:	9202      	str	r2, [sp, #8]
 800a3dc:	9301      	str	r3, [sp, #4]
 800a3de:	4b15      	ldr	r3, [pc, #84]	; (800a434 <tcp_input+0x810>)
 800a3e0:	9300      	str	r3, [sp, #0]
 800a3e2:	4b15      	ldr	r3, [pc, #84]	; (800a438 <tcp_input+0x814>)
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	f003 fc74 	bl	800dcd4 <tcp_rst>
    pbuf_free(p);
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f7fd fb4b 	bl	8007a88 <pbuf_free>
  return;
 800a3f2:	e00c      	b.n	800a40e <tcp_input+0x7ea>
    goto dropped;
 800a3f4:	bf00      	nop
 800a3f6:	e006      	b.n	800a406 <tcp_input+0x7e2>
    goto dropped;
 800a3f8:	bf00      	nop
 800a3fa:	e004      	b.n	800a406 <tcp_input+0x7e2>
    goto dropped;
 800a3fc:	bf00      	nop
 800a3fe:	e002      	b.n	800a406 <tcp_input+0x7e2>
      goto dropped;
 800a400:	bf00      	nop
 800a402:	e000      	b.n	800a406 <tcp_input+0x7e2>
      goto dropped;
 800a404:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f7fd fb3e 	bl	8007a88 <pbuf_free>
 800a40c:	e000      	b.n	800a410 <tcp_input+0x7ec>
  return;
 800a40e:	bf00      	nop
}
 800a410:	3724      	adds	r7, #36	; 0x24
 800a412:	46bd      	mov	sp, r7
 800a414:	bd90      	pop	{r4, r7, pc}
 800a416:	bf00      	nop
 800a418:	20008738 	.word	0x20008738
 800a41c:	20008734 	.word	0x20008734
 800a420:	20008704 	.word	0x20008704
 800a424:	20008714 	.word	0x20008714
 800a428:	20008728 	.word	0x20008728
 800a42c:	2000872e 	.word	0x2000872e
 800a430:	20008724 	.word	0x20008724
 800a434:	2000518c 	.word	0x2000518c
 800a438:	20005190 	.word	0x20005190

0800a43c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d106      	bne.n	800a458 <tcp_input_delayed_close+0x1c>
 800a44a:	4b17      	ldr	r3, [pc, #92]	; (800a4a8 <tcp_input_delayed_close+0x6c>)
 800a44c:	f240 225a 	movw	r2, #602	; 0x25a
 800a450:	4916      	ldr	r1, [pc, #88]	; (800a4ac <tcp_input_delayed_close+0x70>)
 800a452:	4817      	ldr	r0, [pc, #92]	; (800a4b0 <tcp_input_delayed_close+0x74>)
 800a454:	f006 fc14 	bl	8010c80 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a458:	4b16      	ldr	r3, [pc, #88]	; (800a4b4 <tcp_input_delayed_close+0x78>)
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	f003 0310 	and.w	r3, r3, #16
 800a460:	2b00      	cmp	r3, #0
 800a462:	d01c      	beq.n	800a49e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	8b5b      	ldrh	r3, [r3, #26]
 800a468:	f003 0310 	and.w	r3, r3, #16
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d10d      	bne.n	800a48c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a476:	2b00      	cmp	r3, #0
 800a478:	d008      	beq.n	800a48c <tcp_input_delayed_close+0x50>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	6912      	ldr	r2, [r2, #16]
 800a484:	f06f 010e 	mvn.w	r1, #14
 800a488:	4610      	mov	r0, r2
 800a48a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a48c:	6879      	ldr	r1, [r7, #4]
 800a48e:	480a      	ldr	r0, [pc, #40]	; (800a4b8 <tcp_input_delayed_close+0x7c>)
 800a490:	f7ff fa50 	bl	8009934 <tcp_pcb_remove>
    tcp_free(pcb);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f7fd fd97 	bl	8007fc8 <tcp_free>
    return 1;
 800a49a:	2301      	movs	r3, #1
 800a49c:	e000      	b.n	800a4a0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	080132ec 	.word	0x080132ec
 800a4ac:	080134bc 	.word	0x080134bc
 800a4b0:	08013338 	.word	0x08013338
 800a4b4:	20008731 	.word	0x20008731
 800a4b8:	200086f8 	.word	0x200086f8

0800a4bc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a4bc:	b590      	push	{r4, r7, lr}
 800a4be:	b08b      	sub	sp, #44	; 0x2c
 800a4c0:	af04      	add	r7, sp, #16
 800a4c2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a4c4:	4b6f      	ldr	r3, [pc, #444]	; (800a684 <tcp_listen_input+0x1c8>)
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	f003 0304 	and.w	r3, r3, #4
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f040 80d2 	bne.w	800a676 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d106      	bne.n	800a4e6 <tcp_listen_input+0x2a>
 800a4d8:	4b6b      	ldr	r3, [pc, #428]	; (800a688 <tcp_listen_input+0x1cc>)
 800a4da:	f240 2281 	movw	r2, #641	; 0x281
 800a4de:	496b      	ldr	r1, [pc, #428]	; (800a68c <tcp_listen_input+0x1d0>)
 800a4e0:	486b      	ldr	r0, [pc, #428]	; (800a690 <tcp_listen_input+0x1d4>)
 800a4e2:	f006 fbcd 	bl	8010c80 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a4e6:	4b67      	ldr	r3, [pc, #412]	; (800a684 <tcp_listen_input+0x1c8>)
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	f003 0310 	and.w	r3, r3, #16
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d019      	beq.n	800a526 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a4f2:	4b68      	ldr	r3, [pc, #416]	; (800a694 <tcp_listen_input+0x1d8>)
 800a4f4:	6819      	ldr	r1, [r3, #0]
 800a4f6:	4b68      	ldr	r3, [pc, #416]	; (800a698 <tcp_listen_input+0x1dc>)
 800a4f8:	881b      	ldrh	r3, [r3, #0]
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	4b67      	ldr	r3, [pc, #412]	; (800a69c <tcp_listen_input+0x1e0>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a502:	4b67      	ldr	r3, [pc, #412]	; (800a6a0 <tcp_listen_input+0x1e4>)
 800a504:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a506:	885b      	ldrh	r3, [r3, #2]
 800a508:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a50a:	4a65      	ldr	r2, [pc, #404]	; (800a6a0 <tcp_listen_input+0x1e4>)
 800a50c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a50e:	8812      	ldrh	r2, [r2, #0]
 800a510:	b292      	uxth	r2, r2
 800a512:	9202      	str	r2, [sp, #8]
 800a514:	9301      	str	r3, [sp, #4]
 800a516:	4b63      	ldr	r3, [pc, #396]	; (800a6a4 <tcp_listen_input+0x1e8>)
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	4b63      	ldr	r3, [pc, #396]	; (800a6a8 <tcp_listen_input+0x1ec>)
 800a51c:	4602      	mov	r2, r0
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f003 fbd8 	bl	800dcd4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a524:	e0a9      	b.n	800a67a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a526:	4b57      	ldr	r3, [pc, #348]	; (800a684 <tcp_listen_input+0x1c8>)
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	f003 0302 	and.w	r3, r3, #2
 800a52e:	2b00      	cmp	r3, #0
 800a530:	f000 80a3 	beq.w	800a67a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	7d5b      	ldrb	r3, [r3, #21]
 800a538:	4618      	mov	r0, r3
 800a53a:	f7ff f859 	bl	80095f0 <tcp_alloc>
 800a53e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d111      	bne.n	800a56a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	699b      	ldr	r3, [r3, #24]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00a      	beq.n	800a564 <tcp_listen_input+0xa8>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	699b      	ldr	r3, [r3, #24]
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	6910      	ldr	r0, [r2, #16]
 800a556:	f04f 32ff 	mov.w	r2, #4294967295
 800a55a:	2100      	movs	r1, #0
 800a55c:	4798      	blx	r3
 800a55e:	4603      	mov	r3, r0
 800a560:	73bb      	strb	r3, [r7, #14]
      return;
 800a562:	e08b      	b.n	800a67c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a564:	23f0      	movs	r3, #240	; 0xf0
 800a566:	73bb      	strb	r3, [r7, #14]
      return;
 800a568:	e088      	b.n	800a67c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a56a:	4b50      	ldr	r3, [pc, #320]	; (800a6ac <tcp_listen_input+0x1f0>)
 800a56c:	695a      	ldr	r2, [r3, #20]
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a572:	4b4e      	ldr	r3, [pc, #312]	; (800a6ac <tcp_listen_input+0x1f0>)
 800a574:	691a      	ldr	r2, [r3, #16]
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	8ada      	ldrh	r2, [r3, #22]
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a582:	4b47      	ldr	r3, [pc, #284]	; (800a6a0 <tcp_listen_input+0x1e4>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	881b      	ldrh	r3, [r3, #0]
 800a588:	b29a      	uxth	r2, r3
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	2203      	movs	r2, #3
 800a592:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a594:	4b41      	ldr	r3, [pc, #260]	; (800a69c <tcp_listen_input+0x1e0>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	1c5a      	adds	r2, r3, #1
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a5a6:	6978      	ldr	r0, [r7, #20]
 800a5a8:	f7ff fa58 	bl	8009a5c <tcp_next_iss>
 800a5ac:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	693a      	ldr	r2, [r7, #16]
 800a5b2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	693a      	ldr	r2, [r7, #16]
 800a5b8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	693a      	ldr	r2, [r7, #16]
 800a5be:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	693a      	ldr	r2, [r7, #16]
 800a5c4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a5c6:	4b35      	ldr	r3, [pc, #212]	; (800a69c <tcp_listen_input+0x1e0>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	1e5a      	subs	r2, r3, #1
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	691a      	ldr	r2, [r3, #16]
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	7a5b      	ldrb	r3, [r3, #9]
 800a5e2:	f003 030c 	and.w	r3, r3, #12
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	7a1a      	ldrb	r2, [r3, #8]
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a5f4:	4b2e      	ldr	r3, [pc, #184]	; (800a6b0 <tcp_listen_input+0x1f4>)
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	60da      	str	r2, [r3, #12]
 800a5fc:	4a2c      	ldr	r2, [pc, #176]	; (800a6b0 <tcp_listen_input+0x1f4>)
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	6013      	str	r3, [r2, #0]
 800a602:	f003 fd29 	bl	800e058 <tcp_timer_needed>
 800a606:	4b2b      	ldr	r3, [pc, #172]	; (800a6b4 <tcp_listen_input+0x1f8>)
 800a608:	2201      	movs	r2, #1
 800a60a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a60c:	6978      	ldr	r0, [r7, #20]
 800a60e:	f001 fd8f 	bl	800c130 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a612:	4b23      	ldr	r3, [pc, #140]	; (800a6a0 <tcp_listen_input+0x1e4>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	89db      	ldrh	r3, [r3, #14]
 800a618:	b29a      	uxth	r2, r3
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	3304      	adds	r3, #4
 800a634:	4618      	mov	r0, r3
 800a636:	f005 f8ed 	bl	800f814 <ip4_route>
 800a63a:	4601      	mov	r1, r0
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	3304      	adds	r3, #4
 800a640:	461a      	mov	r2, r3
 800a642:	4620      	mov	r0, r4
 800a644:	f7ff fa30 	bl	8009aa8 <tcp_eff_send_mss_netif>
 800a648:	4603      	mov	r3, r0
 800a64a:	461a      	mov	r2, r3
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a650:	2112      	movs	r1, #18
 800a652:	6978      	ldr	r0, [r7, #20]
 800a654:	f002 fc9c 	bl	800cf90 <tcp_enqueue_flags>
 800a658:	4603      	mov	r3, r0
 800a65a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a65c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d004      	beq.n	800a66e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a664:	2100      	movs	r1, #0
 800a666:	6978      	ldr	r0, [r7, #20]
 800a668:	f7fd fed8 	bl	800841c <tcp_abandon>
      return;
 800a66c:	e006      	b.n	800a67c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a66e:	6978      	ldr	r0, [r7, #20]
 800a670:	f002 fd7c 	bl	800d16c <tcp_output>
  return;
 800a674:	e001      	b.n	800a67a <tcp_listen_input+0x1be>
    return;
 800a676:	bf00      	nop
 800a678:	e000      	b.n	800a67c <tcp_listen_input+0x1c0>
  return;
 800a67a:	bf00      	nop
}
 800a67c:	371c      	adds	r7, #28
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd90      	pop	{r4, r7, pc}
 800a682:	bf00      	nop
 800a684:	20008730 	.word	0x20008730
 800a688:	080132ec 	.word	0x080132ec
 800a68c:	080134e4 	.word	0x080134e4
 800a690:	08013338 	.word	0x08013338
 800a694:	20008728 	.word	0x20008728
 800a698:	2000872e 	.word	0x2000872e
 800a69c:	20008724 	.word	0x20008724
 800a6a0:	20008714 	.word	0x20008714
 800a6a4:	2000518c 	.word	0x2000518c
 800a6a8:	20005190 	.word	0x20005190
 800a6ac:	2000517c 	.word	0x2000517c
 800a6b0:	200086f8 	.word	0x200086f8
 800a6b4:	20008700 	.word	0x20008700

0800a6b8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af04      	add	r7, sp, #16
 800a6be:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a6c0:	4b2f      	ldr	r3, [pc, #188]	; (800a780 <tcp_timewait_input+0xc8>)
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	f003 0304 	and.w	r3, r3, #4
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d153      	bne.n	800a774 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d106      	bne.n	800a6e0 <tcp_timewait_input+0x28>
 800a6d2:	4b2c      	ldr	r3, [pc, #176]	; (800a784 <tcp_timewait_input+0xcc>)
 800a6d4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a6d8:	492b      	ldr	r1, [pc, #172]	; (800a788 <tcp_timewait_input+0xd0>)
 800a6da:	482c      	ldr	r0, [pc, #176]	; (800a78c <tcp_timewait_input+0xd4>)
 800a6dc:	f006 fad0 	bl	8010c80 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a6e0:	4b27      	ldr	r3, [pc, #156]	; (800a780 <tcp_timewait_input+0xc8>)
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	f003 0302 	and.w	r3, r3, #2
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d02a      	beq.n	800a742 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a6ec:	4b28      	ldr	r3, [pc, #160]	; (800a790 <tcp_timewait_input+0xd8>)
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	db2d      	blt.n	800a756 <tcp_timewait_input+0x9e>
 800a6fa:	4b25      	ldr	r3, [pc, #148]	; (800a790 <tcp_timewait_input+0xd8>)
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a702:	6879      	ldr	r1, [r7, #4]
 800a704:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a706:	440b      	add	r3, r1
 800a708:	1ad3      	subs	r3, r2, r3
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	dc23      	bgt.n	800a756 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a70e:	4b21      	ldr	r3, [pc, #132]	; (800a794 <tcp_timewait_input+0xdc>)
 800a710:	6819      	ldr	r1, [r3, #0]
 800a712:	4b21      	ldr	r3, [pc, #132]	; (800a798 <tcp_timewait_input+0xe0>)
 800a714:	881b      	ldrh	r3, [r3, #0]
 800a716:	461a      	mov	r2, r3
 800a718:	4b1d      	ldr	r3, [pc, #116]	; (800a790 <tcp_timewait_input+0xd8>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a71e:	4b1f      	ldr	r3, [pc, #124]	; (800a79c <tcp_timewait_input+0xe4>)
 800a720:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a722:	885b      	ldrh	r3, [r3, #2]
 800a724:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a726:	4a1d      	ldr	r2, [pc, #116]	; (800a79c <tcp_timewait_input+0xe4>)
 800a728:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a72a:	8812      	ldrh	r2, [r2, #0]
 800a72c:	b292      	uxth	r2, r2
 800a72e:	9202      	str	r2, [sp, #8]
 800a730:	9301      	str	r3, [sp, #4]
 800a732:	4b1b      	ldr	r3, [pc, #108]	; (800a7a0 <tcp_timewait_input+0xe8>)
 800a734:	9300      	str	r3, [sp, #0]
 800a736:	4b1b      	ldr	r3, [pc, #108]	; (800a7a4 <tcp_timewait_input+0xec>)
 800a738:	4602      	mov	r2, r0
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f003 faca 	bl	800dcd4 <tcp_rst>
      return;
 800a740:	e01b      	b.n	800a77a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a742:	4b0f      	ldr	r3, [pc, #60]	; (800a780 <tcp_timewait_input+0xc8>)
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	f003 0301 	and.w	r3, r3, #1
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d003      	beq.n	800a756 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a74e:	4b16      	ldr	r3, [pc, #88]	; (800a7a8 <tcp_timewait_input+0xf0>)
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a756:	4b10      	ldr	r3, [pc, #64]	; (800a798 <tcp_timewait_input+0xe0>)
 800a758:	881b      	ldrh	r3, [r3, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00c      	beq.n	800a778 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	8b5b      	ldrh	r3, [r3, #26]
 800a762:	f043 0302 	orr.w	r3, r3, #2
 800a766:	b29a      	uxth	r2, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f002 fcfd 	bl	800d16c <tcp_output>
  }
  return;
 800a772:	e001      	b.n	800a778 <tcp_timewait_input+0xc0>
    return;
 800a774:	bf00      	nop
 800a776:	e000      	b.n	800a77a <tcp_timewait_input+0xc2>
  return;
 800a778:	bf00      	nop
}
 800a77a:	3708      	adds	r7, #8
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	20008730 	.word	0x20008730
 800a784:	080132ec 	.word	0x080132ec
 800a788:	08013504 	.word	0x08013504
 800a78c:	08013338 	.word	0x08013338
 800a790:	20008724 	.word	0x20008724
 800a794:	20008728 	.word	0x20008728
 800a798:	2000872e 	.word	0x2000872e
 800a79c:	20008714 	.word	0x20008714
 800a7a0:	2000518c 	.word	0x2000518c
 800a7a4:	20005190 	.word	0x20005190
 800a7a8:	200086ec 	.word	0x200086ec

0800a7ac <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a7ac:	b590      	push	{r4, r7, lr}
 800a7ae:	b08d      	sub	sp, #52	; 0x34
 800a7b0:	af04      	add	r7, sp, #16
 800a7b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d106      	bne.n	800a7d0 <tcp_process+0x24>
 800a7c2:	4b9d      	ldr	r3, [pc, #628]	; (800aa38 <tcp_process+0x28c>)
 800a7c4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a7c8:	499c      	ldr	r1, [pc, #624]	; (800aa3c <tcp_process+0x290>)
 800a7ca:	489d      	ldr	r0, [pc, #628]	; (800aa40 <tcp_process+0x294>)
 800a7cc:	f006 fa58 	bl	8010c80 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a7d0:	4b9c      	ldr	r3, [pc, #624]	; (800aa44 <tcp_process+0x298>)
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	f003 0304 	and.w	r3, r3, #4
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d04e      	beq.n	800a87a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	7d1b      	ldrb	r3, [r3, #20]
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	d108      	bne.n	800a7f6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a7e8:	4b97      	ldr	r3, [pc, #604]	; (800aa48 <tcp_process+0x29c>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d123      	bne.n	800a838 <tcp_process+0x8c>
        acceptable = 1;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	76fb      	strb	r3, [r7, #27]
 800a7f4:	e020      	b.n	800a838 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7fa:	4b94      	ldr	r3, [pc, #592]	; (800aa4c <tcp_process+0x2a0>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d102      	bne.n	800a808 <tcp_process+0x5c>
        acceptable = 1;
 800a802:	2301      	movs	r3, #1
 800a804:	76fb      	strb	r3, [r7, #27]
 800a806:	e017      	b.n	800a838 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a808:	4b90      	ldr	r3, [pc, #576]	; (800aa4c <tcp_process+0x2a0>)
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	2b00      	cmp	r3, #0
 800a814:	db10      	blt.n	800a838 <tcp_process+0x8c>
 800a816:	4b8d      	ldr	r3, [pc, #564]	; (800aa4c <tcp_process+0x2a0>)
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81e:	6879      	ldr	r1, [r7, #4]
 800a820:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a822:	440b      	add	r3, r1
 800a824:	1ad3      	subs	r3, r2, r3
 800a826:	2b00      	cmp	r3, #0
 800a828:	dc06      	bgt.n	800a838 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	8b5b      	ldrh	r3, [r3, #26]
 800a82e:	f043 0302 	orr.w	r3, r3, #2
 800a832:	b29a      	uxth	r2, r3
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a838:	7efb      	ldrb	r3, [r7, #27]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d01b      	beq.n	800a876 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	7d1b      	ldrb	r3, [r3, #20]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d106      	bne.n	800a854 <tcp_process+0xa8>
 800a846:	4b7c      	ldr	r3, [pc, #496]	; (800aa38 <tcp_process+0x28c>)
 800a848:	f44f 724e 	mov.w	r2, #824	; 0x338
 800a84c:	4980      	ldr	r1, [pc, #512]	; (800aa50 <tcp_process+0x2a4>)
 800a84e:	487c      	ldr	r0, [pc, #496]	; (800aa40 <tcp_process+0x294>)
 800a850:	f006 fa16 	bl	8010c80 <iprintf>
      recv_flags |= TF_RESET;
 800a854:	4b7f      	ldr	r3, [pc, #508]	; (800aa54 <tcp_process+0x2a8>)
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	f043 0308 	orr.w	r3, r3, #8
 800a85c:	b2da      	uxtb	r2, r3
 800a85e:	4b7d      	ldr	r3, [pc, #500]	; (800aa54 <tcp_process+0x2a8>)
 800a860:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	8b5b      	ldrh	r3, [r3, #26]
 800a866:	f023 0301 	bic.w	r3, r3, #1
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a870:	f06f 030d 	mvn.w	r3, #13
 800a874:	e37a      	b.n	800af6c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	e378      	b.n	800af6c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a87a:	4b72      	ldr	r3, [pc, #456]	; (800aa44 <tcp_process+0x298>)
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	f003 0302 	and.w	r3, r3, #2
 800a882:	2b00      	cmp	r3, #0
 800a884:	d010      	beq.n	800a8a8 <tcp_process+0xfc>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	7d1b      	ldrb	r3, [r3, #20]
 800a88a:	2b02      	cmp	r3, #2
 800a88c:	d00c      	beq.n	800a8a8 <tcp_process+0xfc>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	7d1b      	ldrb	r3, [r3, #20]
 800a892:	2b03      	cmp	r3, #3
 800a894:	d008      	beq.n	800a8a8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	8b5b      	ldrh	r3, [r3, #26]
 800a89a:	f043 0302 	orr.w	r3, r3, #2
 800a89e:	b29a      	uxth	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	e361      	b.n	800af6c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	8b5b      	ldrh	r3, [r3, #26]
 800a8ac:	f003 0310 	and.w	r3, r3, #16
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d103      	bne.n	800a8bc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a8b4:	4b68      	ldr	r3, [pc, #416]	; (800aa58 <tcp_process+0x2ac>)
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f001 fc2f 	bl	800c130 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	7d1b      	ldrb	r3, [r3, #20]
 800a8d6:	3b02      	subs	r3, #2
 800a8d8:	2b07      	cmp	r3, #7
 800a8da:	f200 8337 	bhi.w	800af4c <tcp_process+0x7a0>
 800a8de:	a201      	add	r2, pc, #4	; (adr r2, 800a8e4 <tcp_process+0x138>)
 800a8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e4:	0800a905 	.word	0x0800a905
 800a8e8:	0800ab35 	.word	0x0800ab35
 800a8ec:	0800acad 	.word	0x0800acad
 800a8f0:	0800acd7 	.word	0x0800acd7
 800a8f4:	0800adfb 	.word	0x0800adfb
 800a8f8:	0800acad 	.word	0x0800acad
 800a8fc:	0800ae87 	.word	0x0800ae87
 800a900:	0800af17 	.word	0x0800af17
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a904:	4b4f      	ldr	r3, [pc, #316]	; (800aa44 <tcp_process+0x298>)
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	f003 0310 	and.w	r3, r3, #16
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f000 80e4 	beq.w	800aada <tcp_process+0x32e>
 800a912:	4b4c      	ldr	r3, [pc, #304]	; (800aa44 <tcp_process+0x298>)
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	f003 0302 	and.w	r3, r3, #2
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	f000 80dd 	beq.w	800aada <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a924:	1c5a      	adds	r2, r3, #1
 800a926:	4b48      	ldr	r3, [pc, #288]	; (800aa48 <tcp_process+0x29c>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	f040 80d5 	bne.w	800aada <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a930:	4b46      	ldr	r3, [pc, #280]	; (800aa4c <tcp_process+0x2a0>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	1c5a      	adds	r2, r3, #1
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800a942:	4b41      	ldr	r3, [pc, #260]	; (800aa48 <tcp_process+0x29c>)
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a94a:	4b44      	ldr	r3, [pc, #272]	; (800aa5c <tcp_process+0x2b0>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	89db      	ldrh	r3, [r3, #14]
 800a950:	b29a      	uxth	r2, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a964:	4b39      	ldr	r3, [pc, #228]	; (800aa4c <tcp_process+0x2a0>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	1e5a      	subs	r2, r3, #1
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2204      	movs	r2, #4
 800a972:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	3304      	adds	r3, #4
 800a97c:	4618      	mov	r0, r3
 800a97e:	f004 ff49 	bl	800f814 <ip4_route>
 800a982:	4601      	mov	r1, r0
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	3304      	adds	r3, #4
 800a988:	461a      	mov	r2, r3
 800a98a:	4620      	mov	r0, r4
 800a98c:	f7ff f88c 	bl	8009aa8 <tcp_eff_send_mss_netif>
 800a990:	4603      	mov	r3, r0
 800a992:	461a      	mov	r2, r3
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a99c:	009a      	lsls	r2, r3, #2
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9a2:	005b      	lsls	r3, r3, #1
 800a9a4:	f241 111c 	movw	r1, #4380	; 0x111c
 800a9a8:	428b      	cmp	r3, r1
 800a9aa:	bf38      	it	cc
 800a9ac:	460b      	movcc	r3, r1
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d204      	bcs.n	800a9bc <tcp_process+0x210>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	e00d      	b.n	800a9d8 <tcp_process+0x22c>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9c0:	005b      	lsls	r3, r3, #1
 800a9c2:	f241 121c 	movw	r2, #4380	; 0x111c
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d904      	bls.n	800a9d4 <tcp_process+0x228>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9ce:	005b      	lsls	r3, r3, #1
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	e001      	b.n	800a9d8 <tcp_process+0x22c>
 800a9d4:	f241 131c 	movw	r3, #4380	; 0x111c
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d106      	bne.n	800a9f6 <tcp_process+0x24a>
 800a9e8:	4b13      	ldr	r3, [pc, #76]	; (800aa38 <tcp_process+0x28c>)
 800a9ea:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a9ee:	491c      	ldr	r1, [pc, #112]	; (800aa60 <tcp_process+0x2b4>)
 800a9f0:	4813      	ldr	r0, [pc, #76]	; (800aa40 <tcp_process+0x294>)
 800a9f2:	f006 f945 	bl	8010c80 <iprintf>
        --pcb->snd_queuelen;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	b29a      	uxth	r2, r3
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa0a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d12a      	bne.n	800aa68 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa16:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d106      	bne.n	800aa2c <tcp_process+0x280>
 800aa1e:	4b06      	ldr	r3, [pc, #24]	; (800aa38 <tcp_process+0x28c>)
 800aa20:	f44f 725d 	mov.w	r2, #884	; 0x374
 800aa24:	490f      	ldr	r1, [pc, #60]	; (800aa64 <tcp_process+0x2b8>)
 800aa26:	4806      	ldr	r0, [pc, #24]	; (800aa40 <tcp_process+0x294>)
 800aa28:	f006 f92a 	bl	8010c80 <iprintf>
          pcb->unsent = rseg->next;
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	66da      	str	r2, [r3, #108]	; 0x6c
 800aa34:	e01c      	b.n	800aa70 <tcp_process+0x2c4>
 800aa36:	bf00      	nop
 800aa38:	080132ec 	.word	0x080132ec
 800aa3c:	08013524 	.word	0x08013524
 800aa40:	08013338 	.word	0x08013338
 800aa44:	20008730 	.word	0x20008730
 800aa48:	20008728 	.word	0x20008728
 800aa4c:	20008724 	.word	0x20008724
 800aa50:	08013540 	.word	0x08013540
 800aa54:	20008731 	.word	0x20008731
 800aa58:	200086ec 	.word	0x200086ec
 800aa5c:	20008714 	.word	0x20008714
 800aa60:	08013560 	.word	0x08013560
 800aa64:	08013578 	.word	0x08013578
        } else {
          pcb->unacked = rseg->next;
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800aa70:	69f8      	ldr	r0, [r7, #28]
 800aa72:	f7fe fc36 	bl	80092e2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d104      	bne.n	800aa88 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa84:	861a      	strh	r2, [r3, #48]	; 0x30
 800aa86:	e006      	b.n	800aa96 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d00a      	beq.n	800aab6 <tcp_process+0x30a>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	6910      	ldr	r0, [r2, #16]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	6879      	ldr	r1, [r7, #4]
 800aaae:	4798      	blx	r3
 800aab0:	4603      	mov	r3, r0
 800aab2:	76bb      	strb	r3, [r7, #26]
 800aab4:	e001      	b.n	800aaba <tcp_process+0x30e>
 800aab6:	2300      	movs	r3, #0
 800aab8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800aaba:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800aabe:	f113 0f0d 	cmn.w	r3, #13
 800aac2:	d102      	bne.n	800aaca <tcp_process+0x31e>
          return ERR_ABRT;
 800aac4:	f06f 030c 	mvn.w	r3, #12
 800aac8:	e250      	b.n	800af6c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	8b5b      	ldrh	r3, [r3, #26]
 800aace:	f043 0302 	orr.w	r3, r3, #2
 800aad2:	b29a      	uxth	r2, r3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800aad8:	e23a      	b.n	800af50 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800aada:	4b98      	ldr	r3, [pc, #608]	; (800ad3c <tcp_process+0x590>)
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	f003 0310 	and.w	r3, r3, #16
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f000 8234 	beq.w	800af50 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aae8:	4b95      	ldr	r3, [pc, #596]	; (800ad40 <tcp_process+0x594>)
 800aaea:	6819      	ldr	r1, [r3, #0]
 800aaec:	4b95      	ldr	r3, [pc, #596]	; (800ad44 <tcp_process+0x598>)
 800aaee:	881b      	ldrh	r3, [r3, #0]
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	4b95      	ldr	r3, [pc, #596]	; (800ad48 <tcp_process+0x59c>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aaf8:	4b94      	ldr	r3, [pc, #592]	; (800ad4c <tcp_process+0x5a0>)
 800aafa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aafc:	885b      	ldrh	r3, [r3, #2]
 800aafe:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab00:	4a92      	ldr	r2, [pc, #584]	; (800ad4c <tcp_process+0x5a0>)
 800ab02:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab04:	8812      	ldrh	r2, [r2, #0]
 800ab06:	b292      	uxth	r2, r2
 800ab08:	9202      	str	r2, [sp, #8]
 800ab0a:	9301      	str	r3, [sp, #4]
 800ab0c:	4b90      	ldr	r3, [pc, #576]	; (800ad50 <tcp_process+0x5a4>)
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	4b90      	ldr	r3, [pc, #576]	; (800ad54 <tcp_process+0x5a8>)
 800ab12:	4602      	mov	r2, r0
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f003 f8dd 	bl	800dcd4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab20:	2b05      	cmp	r3, #5
 800ab22:	f200 8215 	bhi.w	800af50 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f002 fea7 	bl	800d880 <tcp_rexmit_rto>
      break;
 800ab32:	e20d      	b.n	800af50 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ab34:	4b81      	ldr	r3, [pc, #516]	; (800ad3c <tcp_process+0x590>)
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	f003 0310 	and.w	r3, r3, #16
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f000 80a1 	beq.w	800ac84 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ab42:	4b7f      	ldr	r3, [pc, #508]	; (800ad40 <tcp_process+0x594>)
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab4a:	1ad3      	subs	r3, r2, r3
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	db7e      	blt.n	800ac50 <tcp_process+0x4a4>
 800ab52:	4b7b      	ldr	r3, [pc, #492]	; (800ad40 <tcp_process+0x594>)
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab5a:	1ad3      	subs	r3, r2, r3
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	dc77      	bgt.n	800ac50 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2204      	movs	r2, #4
 800ab64:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d102      	bne.n	800ab74 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ab6e:	23fa      	movs	r3, #250	; 0xfa
 800ab70:	76bb      	strb	r3, [r7, #26]
 800ab72:	e01d      	b.n	800abb0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab78:	699b      	ldr	r3, [r3, #24]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d106      	bne.n	800ab8c <tcp_process+0x3e0>
 800ab7e:	4b76      	ldr	r3, [pc, #472]	; (800ad58 <tcp_process+0x5ac>)
 800ab80:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ab84:	4975      	ldr	r1, [pc, #468]	; (800ad5c <tcp_process+0x5b0>)
 800ab86:	4876      	ldr	r0, [pc, #472]	; (800ad60 <tcp_process+0x5b4>)
 800ab88:	f006 f87a 	bl	8010c80 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab90:	699b      	ldr	r3, [r3, #24]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d00a      	beq.n	800abac <tcp_process+0x400>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab9a:	699b      	ldr	r3, [r3, #24]
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	6910      	ldr	r0, [r2, #16]
 800aba0:	2200      	movs	r2, #0
 800aba2:	6879      	ldr	r1, [r7, #4]
 800aba4:	4798      	blx	r3
 800aba6:	4603      	mov	r3, r0
 800aba8:	76bb      	strb	r3, [r7, #26]
 800abaa:	e001      	b.n	800abb0 <tcp_process+0x404>
 800abac:	23f0      	movs	r3, #240	; 0xf0
 800abae:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800abb0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d00a      	beq.n	800abce <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800abb8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800abbc:	f113 0f0d 	cmn.w	r3, #13
 800abc0:	d002      	beq.n	800abc8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f7fd fce8 	bl	8008598 <tcp_abort>
            }
            return ERR_ABRT;
 800abc8:	f06f 030c 	mvn.w	r3, #12
 800abcc:	e1ce      	b.n	800af6c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 fae0 	bl	800b194 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800abd4:	4b63      	ldr	r3, [pc, #396]	; (800ad64 <tcp_process+0x5b8>)
 800abd6:	881b      	ldrh	r3, [r3, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d005      	beq.n	800abe8 <tcp_process+0x43c>
            recv_acked--;
 800abdc:	4b61      	ldr	r3, [pc, #388]	; (800ad64 <tcp_process+0x5b8>)
 800abde:	881b      	ldrh	r3, [r3, #0]
 800abe0:	3b01      	subs	r3, #1
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	4b5f      	ldr	r3, [pc, #380]	; (800ad64 <tcp_process+0x5b8>)
 800abe6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abec:	009a      	lsls	r2, r3, #2
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abf2:	005b      	lsls	r3, r3, #1
 800abf4:	f241 111c 	movw	r1, #4380	; 0x111c
 800abf8:	428b      	cmp	r3, r1
 800abfa:	bf38      	it	cc
 800abfc:	460b      	movcc	r3, r1
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d204      	bcs.n	800ac0c <tcp_process+0x460>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	e00d      	b.n	800ac28 <tcp_process+0x47c>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac10:	005b      	lsls	r3, r3, #1
 800ac12:	f241 121c 	movw	r2, #4380	; 0x111c
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d904      	bls.n	800ac24 <tcp_process+0x478>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac1e:	005b      	lsls	r3, r3, #1
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	e001      	b.n	800ac28 <tcp_process+0x47c>
 800ac24:	f241 131c 	movw	r3, #4380	; 0x111c
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ac2e:	4b4e      	ldr	r3, [pc, #312]	; (800ad68 <tcp_process+0x5bc>)
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	f003 0320 	and.w	r3, r3, #32
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d037      	beq.n	800acaa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	8b5b      	ldrh	r3, [r3, #26]
 800ac3e:	f043 0302 	orr.w	r3, r3, #2
 800ac42:	b29a      	uxth	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2207      	movs	r2, #7
 800ac4c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ac4e:	e02c      	b.n	800acaa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac50:	4b3b      	ldr	r3, [pc, #236]	; (800ad40 <tcp_process+0x594>)
 800ac52:	6819      	ldr	r1, [r3, #0]
 800ac54:	4b3b      	ldr	r3, [pc, #236]	; (800ad44 <tcp_process+0x598>)
 800ac56:	881b      	ldrh	r3, [r3, #0]
 800ac58:	461a      	mov	r2, r3
 800ac5a:	4b3b      	ldr	r3, [pc, #236]	; (800ad48 <tcp_process+0x59c>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac60:	4b3a      	ldr	r3, [pc, #232]	; (800ad4c <tcp_process+0x5a0>)
 800ac62:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac64:	885b      	ldrh	r3, [r3, #2]
 800ac66:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac68:	4a38      	ldr	r2, [pc, #224]	; (800ad4c <tcp_process+0x5a0>)
 800ac6a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac6c:	8812      	ldrh	r2, [r2, #0]
 800ac6e:	b292      	uxth	r2, r2
 800ac70:	9202      	str	r2, [sp, #8]
 800ac72:	9301      	str	r3, [sp, #4]
 800ac74:	4b36      	ldr	r3, [pc, #216]	; (800ad50 <tcp_process+0x5a4>)
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	4b36      	ldr	r3, [pc, #216]	; (800ad54 <tcp_process+0x5a8>)
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f003 f829 	bl	800dcd4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ac82:	e167      	b.n	800af54 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ac84:	4b2d      	ldr	r3, [pc, #180]	; (800ad3c <tcp_process+0x590>)
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	f003 0302 	and.w	r3, r3, #2
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	f000 8161 	beq.w	800af54 <tcp_process+0x7a8>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac96:	1e5a      	subs	r2, r3, #1
 800ac98:	4b2b      	ldr	r3, [pc, #172]	; (800ad48 <tcp_process+0x59c>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	f040 8159 	bne.w	800af54 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f002 fe0e 	bl	800d8c4 <tcp_rexmit>
      break;
 800aca8:	e154      	b.n	800af54 <tcp_process+0x7a8>
 800acaa:	e153      	b.n	800af54 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 fa71 	bl	800b194 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800acb2:	4b2d      	ldr	r3, [pc, #180]	; (800ad68 <tcp_process+0x5bc>)
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	f003 0320 	and.w	r3, r3, #32
 800acba:	2b00      	cmp	r3, #0
 800acbc:	f000 814c 	beq.w	800af58 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	8b5b      	ldrh	r3, [r3, #26]
 800acc4:	f043 0302 	orr.w	r3, r3, #2
 800acc8:	b29a      	uxth	r2, r3
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2207      	movs	r2, #7
 800acd2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800acd4:	e140      	b.n	800af58 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 fa5c 	bl	800b194 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800acdc:	4b22      	ldr	r3, [pc, #136]	; (800ad68 <tcp_process+0x5bc>)
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	f003 0320 	and.w	r3, r3, #32
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d071      	beq.n	800adcc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ace8:	4b14      	ldr	r3, [pc, #80]	; (800ad3c <tcp_process+0x590>)
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	f003 0310 	and.w	r3, r3, #16
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d060      	beq.n	800adb6 <tcp_process+0x60a>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800acf8:	4b11      	ldr	r3, [pc, #68]	; (800ad40 <tcp_process+0x594>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d15a      	bne.n	800adb6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d156      	bne.n	800adb6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	8b5b      	ldrh	r3, [r3, #26]
 800ad0c:	f043 0302 	orr.w	r3, r3, #2
 800ad10:	b29a      	uxth	r2, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f7fe fdbc 	bl	8009894 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ad1c:	4b13      	ldr	r3, [pc, #76]	; (800ad6c <tcp_process+0x5c0>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d105      	bne.n	800ad32 <tcp_process+0x586>
 800ad26:	4b11      	ldr	r3, [pc, #68]	; (800ad6c <tcp_process+0x5c0>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	68db      	ldr	r3, [r3, #12]
 800ad2c:	4a0f      	ldr	r2, [pc, #60]	; (800ad6c <tcp_process+0x5c0>)
 800ad2e:	6013      	str	r3, [r2, #0]
 800ad30:	e02e      	b.n	800ad90 <tcp_process+0x5e4>
 800ad32:	4b0e      	ldr	r3, [pc, #56]	; (800ad6c <tcp_process+0x5c0>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	617b      	str	r3, [r7, #20]
 800ad38:	e027      	b.n	800ad8a <tcp_process+0x5de>
 800ad3a:	bf00      	nop
 800ad3c:	20008730 	.word	0x20008730
 800ad40:	20008728 	.word	0x20008728
 800ad44:	2000872e 	.word	0x2000872e
 800ad48:	20008724 	.word	0x20008724
 800ad4c:	20008714 	.word	0x20008714
 800ad50:	2000518c 	.word	0x2000518c
 800ad54:	20005190 	.word	0x20005190
 800ad58:	080132ec 	.word	0x080132ec
 800ad5c:	0801358c 	.word	0x0801358c
 800ad60:	08013338 	.word	0x08013338
 800ad64:	2000872c 	.word	0x2000872c
 800ad68:	20008731 	.word	0x20008731
 800ad6c:	200086f8 	.word	0x200086f8
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d104      	bne.n	800ad84 <tcp_process+0x5d8>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	68da      	ldr	r2, [r3, #12]
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	60da      	str	r2, [r3, #12]
 800ad82:	e005      	b.n	800ad90 <tcp_process+0x5e4>
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	617b      	str	r3, [r7, #20]
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1ef      	bne.n	800ad70 <tcp_process+0x5c4>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	60da      	str	r2, [r3, #12]
 800ad96:	4b77      	ldr	r3, [pc, #476]	; (800af74 <tcp_process+0x7c8>)
 800ad98:	2201      	movs	r2, #1
 800ad9a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	220a      	movs	r2, #10
 800ada0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ada2:	4b75      	ldr	r3, [pc, #468]	; (800af78 <tcp_process+0x7cc>)
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	60da      	str	r2, [r3, #12]
 800adaa:	4a73      	ldr	r2, [pc, #460]	; (800af78 <tcp_process+0x7cc>)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6013      	str	r3, [r2, #0]
 800adb0:	f003 f952 	bl	800e058 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800adb4:	e0d2      	b.n	800af5c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	8b5b      	ldrh	r3, [r3, #26]
 800adba:	f043 0302 	orr.w	r3, r3, #2
 800adbe:	b29a      	uxth	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2208      	movs	r2, #8
 800adc8:	751a      	strb	r2, [r3, #20]
      break;
 800adca:	e0c7      	b.n	800af5c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800adcc:	4b6b      	ldr	r3, [pc, #428]	; (800af7c <tcp_process+0x7d0>)
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	f003 0310 	and.w	r3, r3, #16
 800add4:	2b00      	cmp	r3, #0
 800add6:	f000 80c1 	beq.w	800af5c <tcp_process+0x7b0>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800adde:	4b68      	ldr	r3, [pc, #416]	; (800af80 <tcp_process+0x7d4>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	f040 80ba 	bne.w	800af5c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800adec:	2b00      	cmp	r3, #0
 800adee:	f040 80b5 	bne.w	800af5c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2206      	movs	r2, #6
 800adf6:	751a      	strb	r2, [r3, #20]
      break;
 800adf8:	e0b0      	b.n	800af5c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 f9ca 	bl	800b194 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ae00:	4b60      	ldr	r3, [pc, #384]	; (800af84 <tcp_process+0x7d8>)
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	f003 0320 	and.w	r3, r3, #32
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f000 80a9 	beq.w	800af60 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	8b5b      	ldrh	r3, [r3, #26]
 800ae12:	f043 0302 	orr.w	r3, r3, #2
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f7fe fd39 	bl	8009894 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ae22:	4b59      	ldr	r3, [pc, #356]	; (800af88 <tcp_process+0x7dc>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d105      	bne.n	800ae38 <tcp_process+0x68c>
 800ae2c:	4b56      	ldr	r3, [pc, #344]	; (800af88 <tcp_process+0x7dc>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	4a55      	ldr	r2, [pc, #340]	; (800af88 <tcp_process+0x7dc>)
 800ae34:	6013      	str	r3, [r2, #0]
 800ae36:	e013      	b.n	800ae60 <tcp_process+0x6b4>
 800ae38:	4b53      	ldr	r3, [pc, #332]	; (800af88 <tcp_process+0x7dc>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	613b      	str	r3, [r7, #16]
 800ae3e:	e00c      	b.n	800ae5a <tcp_process+0x6ae>
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d104      	bne.n	800ae54 <tcp_process+0x6a8>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	68da      	ldr	r2, [r3, #12]
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	60da      	str	r2, [r3, #12]
 800ae52:	e005      	b.n	800ae60 <tcp_process+0x6b4>
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	613b      	str	r3, [r7, #16]
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1ef      	bne.n	800ae40 <tcp_process+0x694>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	60da      	str	r2, [r3, #12]
 800ae66:	4b43      	ldr	r3, [pc, #268]	; (800af74 <tcp_process+0x7c8>)
 800ae68:	2201      	movs	r2, #1
 800ae6a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	220a      	movs	r2, #10
 800ae70:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ae72:	4b41      	ldr	r3, [pc, #260]	; (800af78 <tcp_process+0x7cc>)
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	60da      	str	r2, [r3, #12]
 800ae7a:	4a3f      	ldr	r2, [pc, #252]	; (800af78 <tcp_process+0x7cc>)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6013      	str	r3, [r2, #0]
 800ae80:	f003 f8ea 	bl	800e058 <tcp_timer_needed>
      }
      break;
 800ae84:	e06c      	b.n	800af60 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 f984 	bl	800b194 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ae8c:	4b3b      	ldr	r3, [pc, #236]	; (800af7c <tcp_process+0x7d0>)
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	f003 0310 	and.w	r3, r3, #16
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d065      	beq.n	800af64 <tcp_process+0x7b8>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae9c:	4b38      	ldr	r3, [pc, #224]	; (800af80 <tcp_process+0x7d4>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d15f      	bne.n	800af64 <tcp_process+0x7b8>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d15b      	bne.n	800af64 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7fe fcf1 	bl	8009894 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800aeb2:	4b35      	ldr	r3, [pc, #212]	; (800af88 <tcp_process+0x7dc>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d105      	bne.n	800aec8 <tcp_process+0x71c>
 800aebc:	4b32      	ldr	r3, [pc, #200]	; (800af88 <tcp_process+0x7dc>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	4a31      	ldr	r2, [pc, #196]	; (800af88 <tcp_process+0x7dc>)
 800aec4:	6013      	str	r3, [r2, #0]
 800aec6:	e013      	b.n	800aef0 <tcp_process+0x744>
 800aec8:	4b2f      	ldr	r3, [pc, #188]	; (800af88 <tcp_process+0x7dc>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	60fb      	str	r3, [r7, #12]
 800aece:	e00c      	b.n	800aeea <tcp_process+0x73e>
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d104      	bne.n	800aee4 <tcp_process+0x738>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	68da      	ldr	r2, [r3, #12]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	60da      	str	r2, [r3, #12]
 800aee2:	e005      	b.n	800aef0 <tcp_process+0x744>
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	60fb      	str	r3, [r7, #12]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d1ef      	bne.n	800aed0 <tcp_process+0x724>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	60da      	str	r2, [r3, #12]
 800aef6:	4b1f      	ldr	r3, [pc, #124]	; (800af74 <tcp_process+0x7c8>)
 800aef8:	2201      	movs	r2, #1
 800aefa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	220a      	movs	r2, #10
 800af00:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800af02:	4b1d      	ldr	r3, [pc, #116]	; (800af78 <tcp_process+0x7cc>)
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	60da      	str	r2, [r3, #12]
 800af0a:	4a1b      	ldr	r2, [pc, #108]	; (800af78 <tcp_process+0x7cc>)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6013      	str	r3, [r2, #0]
 800af10:	f003 f8a2 	bl	800e058 <tcp_timer_needed>
      }
      break;
 800af14:	e026      	b.n	800af64 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 f93c 	bl	800b194 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800af1c:	4b17      	ldr	r3, [pc, #92]	; (800af7c <tcp_process+0x7d0>)
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	f003 0310 	and.w	r3, r3, #16
 800af24:	2b00      	cmp	r3, #0
 800af26:	d01f      	beq.n	800af68 <tcp_process+0x7bc>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800af2c:	4b14      	ldr	r3, [pc, #80]	; (800af80 <tcp_process+0x7d4>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	429a      	cmp	r2, r3
 800af32:	d119      	bne.n	800af68 <tcp_process+0x7bc>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d115      	bne.n	800af68 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800af3c:	4b11      	ldr	r3, [pc, #68]	; (800af84 <tcp_process+0x7d8>)
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	f043 0310 	orr.w	r3, r3, #16
 800af44:	b2da      	uxtb	r2, r3
 800af46:	4b0f      	ldr	r3, [pc, #60]	; (800af84 <tcp_process+0x7d8>)
 800af48:	701a      	strb	r2, [r3, #0]
      }
      break;
 800af4a:	e00d      	b.n	800af68 <tcp_process+0x7bc>
    default:
      break;
 800af4c:	bf00      	nop
 800af4e:	e00c      	b.n	800af6a <tcp_process+0x7be>
      break;
 800af50:	bf00      	nop
 800af52:	e00a      	b.n	800af6a <tcp_process+0x7be>
      break;
 800af54:	bf00      	nop
 800af56:	e008      	b.n	800af6a <tcp_process+0x7be>
      break;
 800af58:	bf00      	nop
 800af5a:	e006      	b.n	800af6a <tcp_process+0x7be>
      break;
 800af5c:	bf00      	nop
 800af5e:	e004      	b.n	800af6a <tcp_process+0x7be>
      break;
 800af60:	bf00      	nop
 800af62:	e002      	b.n	800af6a <tcp_process+0x7be>
      break;
 800af64:	bf00      	nop
 800af66:	e000      	b.n	800af6a <tcp_process+0x7be>
      break;
 800af68:	bf00      	nop
  }
  return ERR_OK;
 800af6a:	2300      	movs	r3, #0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3724      	adds	r7, #36	; 0x24
 800af70:	46bd      	mov	sp, r7
 800af72:	bd90      	pop	{r4, r7, pc}
 800af74:	20008700 	.word	0x20008700
 800af78:	200086fc 	.word	0x200086fc
 800af7c:	20008730 	.word	0x20008730
 800af80:	20008728 	.word	0x20008728
 800af84:	20008731 	.word	0x20008731
 800af88:	200086f8 	.word	0x200086f8

0800af8c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800af8c:	b590      	push	{r4, r7, lr}
 800af8e:	b085      	sub	sp, #20
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d106      	bne.n	800afaa <tcp_oos_insert_segment+0x1e>
 800af9c:	4b3b      	ldr	r3, [pc, #236]	; (800b08c <tcp_oos_insert_segment+0x100>)
 800af9e:	f240 421f 	movw	r2, #1055	; 0x41f
 800afa2:	493b      	ldr	r1, [pc, #236]	; (800b090 <tcp_oos_insert_segment+0x104>)
 800afa4:	483b      	ldr	r0, [pc, #236]	; (800b094 <tcp_oos_insert_segment+0x108>)
 800afa6:	f005 fe6b 	bl	8010c80 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	899b      	ldrh	r3, [r3, #12]
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7fb f9a0 	bl	80062f8 <lwip_htons>
 800afb8:	4603      	mov	r3, r0
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	f003 0301 	and.w	r3, r3, #1
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d028      	beq.n	800b016 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800afc4:	6838      	ldr	r0, [r7, #0]
 800afc6:	f7fe f977 	bl	80092b8 <tcp_segs_free>
    next = NULL;
 800afca:	2300      	movs	r3, #0
 800afcc:	603b      	str	r3, [r7, #0]
 800afce:	e056      	b.n	800b07e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	899b      	ldrh	r3, [r3, #12]
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	4618      	mov	r0, r3
 800afda:	f7fb f98d 	bl	80062f8 <lwip_htons>
 800afde:	4603      	mov	r3, r0
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	f003 0301 	and.w	r3, r3, #1
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00d      	beq.n	800b006 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	68db      	ldr	r3, [r3, #12]
 800afee:	899b      	ldrh	r3, [r3, #12]
 800aff0:	b29c      	uxth	r4, r3
 800aff2:	2001      	movs	r0, #1
 800aff4:	f7fb f980 	bl	80062f8 <lwip_htons>
 800aff8:	4603      	mov	r3, r0
 800affa:	461a      	mov	r2, r3
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	4322      	orrs	r2, r4
 800b002:	b292      	uxth	r2, r2
 800b004:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f7fe f966 	bl	80092e2 <tcp_seg_free>
    while (next &&
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00e      	beq.n	800b03a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	891b      	ldrh	r3, [r3, #8]
 800b020:	461a      	mov	r2, r3
 800b022:	4b1d      	ldr	r3, [pc, #116]	; (800b098 <tcp_oos_insert_segment+0x10c>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	441a      	add	r2, r3
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	6839      	ldr	r1, [r7, #0]
 800b030:	8909      	ldrh	r1, [r1, #8]
 800b032:	440b      	add	r3, r1
 800b034:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b036:	2b00      	cmp	r3, #0
 800b038:	daca      	bge.n	800afd0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d01e      	beq.n	800b07e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	891b      	ldrh	r3, [r3, #8]
 800b044:	461a      	mov	r2, r3
 800b046:	4b14      	ldr	r3, [pc, #80]	; (800b098 <tcp_oos_insert_segment+0x10c>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	441a      	add	r2, r3
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	68db      	ldr	r3, [r3, #12]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b054:	2b00      	cmp	r3, #0
 800b056:	dd12      	ble.n	800b07e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	b29a      	uxth	r2, r3
 800b060:	4b0d      	ldr	r3, [pc, #52]	; (800b098 <tcp_oos_insert_segment+0x10c>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	b29b      	uxth	r3, r3
 800b066:	1ad3      	subs	r3, r2, r3
 800b068:	b29a      	uxth	r2, r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	685a      	ldr	r2, [r3, #4]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	891b      	ldrh	r3, [r3, #8]
 800b076:	4619      	mov	r1, r3
 800b078:	4610      	mov	r0, r2
 800b07a:	f7fc fb7f 	bl	800777c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	683a      	ldr	r2, [r7, #0]
 800b082:	601a      	str	r2, [r3, #0]
}
 800b084:	bf00      	nop
 800b086:	3714      	adds	r7, #20
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd90      	pop	{r4, r7, pc}
 800b08c:	080132ec 	.word	0x080132ec
 800b090:	080135ac 	.word	0x080135ac
 800b094:	08013338 	.word	0x08013338
 800b098:	20008724 	.word	0x20008724

0800b09c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b09c:	b5b0      	push	{r4, r5, r7, lr}
 800b09e:	b086      	sub	sp, #24
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]
 800b0a8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b0aa:	e03e      	b.n	800b12a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7fc fd6c 	bl	8007b98 <pbuf_clen>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b0ca:	8a7a      	ldrh	r2, [r7, #18]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d906      	bls.n	800b0de <tcp_free_acked_segments+0x42>
 800b0d0:	4b2a      	ldr	r3, [pc, #168]	; (800b17c <tcp_free_acked_segments+0xe0>)
 800b0d2:	f240 4257 	movw	r2, #1111	; 0x457
 800b0d6:	492a      	ldr	r1, [pc, #168]	; (800b180 <tcp_free_acked_segments+0xe4>)
 800b0d8:	482a      	ldr	r0, [pc, #168]	; (800b184 <tcp_free_acked_segments+0xe8>)
 800b0da:	f005 fdd1 	bl	8010c80 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b0e4:	8a7b      	ldrh	r3, [r7, #18]
 800b0e6:	1ad3      	subs	r3, r2, r3
 800b0e8:	b29a      	uxth	r2, r3
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	891a      	ldrh	r2, [r3, #8]
 800b0f4:	4b24      	ldr	r3, [pc, #144]	; (800b188 <tcp_free_acked_segments+0xec>)
 800b0f6:	881b      	ldrh	r3, [r3, #0]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	4b22      	ldr	r3, [pc, #136]	; (800b188 <tcp_free_acked_segments+0xec>)
 800b0fe:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b100:	6978      	ldr	r0, [r7, #20]
 800b102:	f7fe f8ee 	bl	80092e2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d00c      	beq.n	800b12a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d109      	bne.n	800b12a <tcp_free_acked_segments+0x8e>
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d106      	bne.n	800b12a <tcp_free_acked_segments+0x8e>
 800b11c:	4b17      	ldr	r3, [pc, #92]	; (800b17c <tcp_free_acked_segments+0xe0>)
 800b11e:	f240 4261 	movw	r2, #1121	; 0x461
 800b122:	491a      	ldr	r1, [pc, #104]	; (800b18c <tcp_free_acked_segments+0xf0>)
 800b124:	4817      	ldr	r0, [pc, #92]	; (800b184 <tcp_free_acked_segments+0xe8>)
 800b126:	f005 fdab 	bl	8010c80 <iprintf>
  while (seg_list != NULL &&
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d020      	beq.n	800b172 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	4618      	mov	r0, r3
 800b138:	f7fb f8f3 	bl	8006322 <lwip_htonl>
 800b13c:	4604      	mov	r4, r0
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	891b      	ldrh	r3, [r3, #8]
 800b142:	461d      	mov	r5, r3
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	899b      	ldrh	r3, [r3, #12]
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7fb f8d3 	bl	80062f8 <lwip_htons>
 800b152:	4603      	mov	r3, r0
 800b154:	b2db      	uxtb	r3, r3
 800b156:	f003 0303 	and.w	r3, r3, #3
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d001      	beq.n	800b162 <tcp_free_acked_segments+0xc6>
 800b15e:	2301      	movs	r3, #1
 800b160:	e000      	b.n	800b164 <tcp_free_acked_segments+0xc8>
 800b162:	2300      	movs	r3, #0
 800b164:	442b      	add	r3, r5
 800b166:	18e2      	adds	r2, r4, r3
 800b168:	4b09      	ldr	r3, [pc, #36]	; (800b190 <tcp_free_acked_segments+0xf4>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b16e:	2b00      	cmp	r3, #0
 800b170:	dd9c      	ble.n	800b0ac <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b172:	68bb      	ldr	r3, [r7, #8]
}
 800b174:	4618      	mov	r0, r3
 800b176:	3718      	adds	r7, #24
 800b178:	46bd      	mov	sp, r7
 800b17a:	bdb0      	pop	{r4, r5, r7, pc}
 800b17c:	080132ec 	.word	0x080132ec
 800b180:	080135d4 	.word	0x080135d4
 800b184:	08013338 	.word	0x08013338
 800b188:	2000872c 	.word	0x2000872c
 800b18c:	080135fc 	.word	0x080135fc
 800b190:	20008728 	.word	0x20008728

0800b194 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b194:	b5b0      	push	{r4, r5, r7, lr}
 800b196:	b094      	sub	sp, #80	; 0x50
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b19c:	2300      	movs	r3, #0
 800b19e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d106      	bne.n	800b1b4 <tcp_receive+0x20>
 800b1a6:	4b91      	ldr	r3, [pc, #580]	; (800b3ec <tcp_receive+0x258>)
 800b1a8:	f240 427b 	movw	r2, #1147	; 0x47b
 800b1ac:	4990      	ldr	r1, [pc, #576]	; (800b3f0 <tcp_receive+0x25c>)
 800b1ae:	4891      	ldr	r0, [pc, #580]	; (800b3f4 <tcp_receive+0x260>)
 800b1b0:	f005 fd66 	bl	8010c80 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	7d1b      	ldrb	r3, [r3, #20]
 800b1b8:	2b03      	cmp	r3, #3
 800b1ba:	d806      	bhi.n	800b1ca <tcp_receive+0x36>
 800b1bc:	4b8b      	ldr	r3, [pc, #556]	; (800b3ec <tcp_receive+0x258>)
 800b1be:	f240 427c 	movw	r2, #1148	; 0x47c
 800b1c2:	498d      	ldr	r1, [pc, #564]	; (800b3f8 <tcp_receive+0x264>)
 800b1c4:	488b      	ldr	r0, [pc, #556]	; (800b3f4 <tcp_receive+0x260>)
 800b1c6:	f005 fd5b 	bl	8010c80 <iprintf>

  if (flags & TCP_ACK) {
 800b1ca:	4b8c      	ldr	r3, [pc, #560]	; (800b3fc <tcp_receive+0x268>)
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	f003 0310 	and.w	r3, r3, #16
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	f000 8264 	beq.w	800b6a0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b1de:	461a      	mov	r2, r3
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1e4:	4413      	add	r3, r2
 800b1e6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b1ec:	4b84      	ldr	r3, [pc, #528]	; (800b400 <tcp_receive+0x26c>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	1ad3      	subs	r3, r2, r3
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	db1b      	blt.n	800b22e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b1fa:	4b81      	ldr	r3, [pc, #516]	; (800b400 <tcp_receive+0x26c>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d106      	bne.n	800b210 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b206:	4b7f      	ldr	r3, [pc, #508]	; (800b404 <tcp_receive+0x270>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	1ad3      	subs	r3, r2, r3
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	db0e      	blt.n	800b22e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b214:	4b7b      	ldr	r3, [pc, #492]	; (800b404 <tcp_receive+0x270>)
 800b216:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b218:	429a      	cmp	r2, r3
 800b21a:	d125      	bne.n	800b268 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b21c:	4b7a      	ldr	r3, [pc, #488]	; (800b408 <tcp_receive+0x274>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	89db      	ldrh	r3, [r3, #14]
 800b222:	b29a      	uxth	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d91c      	bls.n	800b268 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b22e:	4b76      	ldr	r3, [pc, #472]	; (800b408 <tcp_receive+0x274>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	89db      	ldrh	r3, [r3, #14]
 800b234:	b29a      	uxth	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b248:	429a      	cmp	r2, r3
 800b24a:	d205      	bcs.n	800b258 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800b258:	4b69      	ldr	r3, [pc, #420]	; (800b400 <tcp_receive+0x26c>)
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800b260:	4b68      	ldr	r3, [pc, #416]	; (800b404 <tcp_receive+0x270>)
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b268:	4b66      	ldr	r3, [pc, #408]	; (800b404 <tcp_receive+0x270>)
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b270:	1ad3      	subs	r3, r2, r3
 800b272:	2b00      	cmp	r3, #0
 800b274:	dc58      	bgt.n	800b328 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b276:	4b65      	ldr	r3, [pc, #404]	; (800b40c <tcp_receive+0x278>)
 800b278:	881b      	ldrh	r3, [r3, #0]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d14b      	bne.n	800b316 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800b288:	4413      	add	r3, r2
 800b28a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d142      	bne.n	800b316 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b296:	2b00      	cmp	r3, #0
 800b298:	db3d      	blt.n	800b316 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b29e:	4b59      	ldr	r3, [pc, #356]	; (800b404 <tcp_receive+0x270>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d137      	bne.n	800b316 <tcp_receive+0x182>
              found_dupack = 1;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b2b0:	2bff      	cmp	r3, #255	; 0xff
 800b2b2:	d007      	beq.n	800b2c4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	b2da      	uxtb	r2, r3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b2ca:	2b03      	cmp	r3, #3
 800b2cc:	d91b      	bls.n	800b306 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2d8:	4413      	add	r3, r2
 800b2da:	b29a      	uxth	r2, r3
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d30a      	bcc.n	800b2fc <tcp_receive+0x168>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2f0:	4413      	add	r3, r2
 800b2f2:	b29a      	uxth	r2, r3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b2fa:	e004      	b.n	800b306 <tcp_receive+0x172>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b302:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b30c:	2b02      	cmp	r3, #2
 800b30e:	d902      	bls.n	800b316 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f002 fb43 	bl	800d99c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b318:	2b00      	cmp	r3, #0
 800b31a:	f040 8161 	bne.w	800b5e0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b326:	e15b      	b.n	800b5e0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b328:	4b36      	ldr	r3, [pc, #216]	; (800b404 <tcp_receive+0x270>)
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b330:	1ad3      	subs	r3, r2, r3
 800b332:	3b01      	subs	r3, #1
 800b334:	2b00      	cmp	r3, #0
 800b336:	f2c0 814e 	blt.w	800b5d6 <tcp_receive+0x442>
 800b33a:	4b32      	ldr	r3, [pc, #200]	; (800b404 <tcp_receive+0x270>)
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b342:	1ad3      	subs	r3, r2, r3
 800b344:	2b00      	cmp	r3, #0
 800b346:	f300 8146 	bgt.w	800b5d6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	8b5b      	ldrh	r3, [r3, #26]
 800b34e:	f003 0304 	and.w	r3, r3, #4
 800b352:	2b00      	cmp	r3, #0
 800b354:	d010      	beq.n	800b378 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	8b5b      	ldrh	r3, [r3, #26]
 800b35a:	f023 0304 	bic.w	r3, r3, #4
 800b35e:	b29a      	uxth	r2, r3
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b386:	10db      	asrs	r3, r3, #3
 800b388:	b21b      	sxth	r3, r3
 800b38a:	b29a      	uxth	r2, r3
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b392:	b29b      	uxth	r3, r3
 800b394:	4413      	add	r3, r2
 800b396:	b29b      	uxth	r3, r3
 800b398:	b21a      	sxth	r2, r3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b3a0:	4b18      	ldr	r3, [pc, #96]	; (800b404 <tcp_receive+0x270>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3aa:	b29b      	uxth	r3, r3
 800b3ac:	1ad3      	subs	r3, r2, r3
 800b3ae:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b3b8:	4b12      	ldr	r3, [pc, #72]	; (800b404 <tcp_receive+0x270>)
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	7d1b      	ldrb	r3, [r3, #20]
 800b3c4:	2b03      	cmp	r3, #3
 800b3c6:	f240 8097 	bls.w	800b4f8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d245      	bcs.n	800b466 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	8b5b      	ldrh	r3, [r3, #26]
 800b3de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d014      	beq.n	800b410 <tcp_receive+0x27c>
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e013      	b.n	800b412 <tcp_receive+0x27e>
 800b3ea:	bf00      	nop
 800b3ec:	080132ec 	.word	0x080132ec
 800b3f0:	0801361c 	.word	0x0801361c
 800b3f4:	08013338 	.word	0x08013338
 800b3f8:	08013638 	.word	0x08013638
 800b3fc:	20008730 	.word	0x20008730
 800b400:	20008724 	.word	0x20008724
 800b404:	20008728 	.word	0x20008728
 800b408:	20008714 	.word	0x20008714
 800b40c:	2000872e 	.word	0x2000872e
 800b410:	2302      	movs	r3, #2
 800b412:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b416:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b41a:	b29a      	uxth	r2, r3
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b420:	fb12 f303 	smulbb	r3, r2, r3
 800b424:	b29b      	uxth	r3, r3
 800b426:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b428:	4293      	cmp	r3, r2
 800b42a:	bf28      	it	cs
 800b42c:	4613      	movcs	r3, r2
 800b42e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b436:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b438:	4413      	add	r3, r2
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b442:	429a      	cmp	r2, r3
 800b444:	d309      	bcc.n	800b45a <tcp_receive+0x2c6>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b44c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b44e:	4413      	add	r3, r2
 800b450:	b29a      	uxth	r2, r3
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b458:	e04e      	b.n	800b4f8 <tcp_receive+0x364>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b460:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b464:	e048      	b.n	800b4f8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b46c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b46e:	4413      	add	r3, r2
 800b470:	b29a      	uxth	r2, r3
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b478:	429a      	cmp	r2, r3
 800b47a:	d309      	bcc.n	800b490 <tcp_receive+0x2fc>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b482:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b484:	4413      	add	r3, r2
 800b486:	b29a      	uxth	r2, r3
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b48e:	e004      	b.n	800b49a <tcp_receive+0x306>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b496:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d326      	bcc.n	800b4f8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b4b6:	1ad3      	subs	r3, r2, r3
 800b4b8:	b29a      	uxth	r2, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4ca:	4413      	add	r3, r2
 800b4cc:	b29a      	uxth	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d30a      	bcc.n	800b4ee <tcp_receive+0x35a>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4e2:	4413      	add	r3, r2
 800b4e4:	b29a      	uxth	r2, r3
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b4ec:	e004      	b.n	800b4f8 <tcp_receive+0x364>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b500:	4a98      	ldr	r2, [pc, #608]	; (800b764 <tcp_receive+0x5d0>)
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f7ff fdca 	bl	800b09c <tcp_free_acked_segments>
 800b508:	4602      	mov	r2, r0
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b516:	4a94      	ldr	r2, [pc, #592]	; (800b768 <tcp_receive+0x5d4>)
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f7ff fdbf 	bl	800b09c <tcp_free_acked_segments>
 800b51e:	4602      	mov	r2, r0
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d104      	bne.n	800b536 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b532:	861a      	strh	r2, [r3, #48]	; 0x30
 800b534:	e002      	b.n	800b53c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2200      	movs	r2, #0
 800b540:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b546:	2b00      	cmp	r3, #0
 800b548:	d103      	bne.n	800b552 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2200      	movs	r2, #0
 800b54e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b558:	4b84      	ldr	r3, [pc, #528]	; (800b76c <tcp_receive+0x5d8>)
 800b55a:	881b      	ldrh	r3, [r3, #0]
 800b55c:	4413      	add	r3, r2
 800b55e:	b29a      	uxth	r2, r3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	8b5b      	ldrh	r3, [r3, #26]
 800b56a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d035      	beq.n	800b5de <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b576:	2b00      	cmp	r3, #0
 800b578:	d118      	bne.n	800b5ac <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d00c      	beq.n	800b59c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	4618      	mov	r0, r3
 800b590:	f7fa fec7 	bl	8006322 <lwip_htonl>
 800b594:	4603      	mov	r3, r0
 800b596:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b598:	2b00      	cmp	r3, #0
 800b59a:	dc20      	bgt.n	800b5de <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	8b5b      	ldrh	r3, [r3, #26]
 800b5a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b5a4:	b29a      	uxth	r2, r3
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b5aa:	e018      	b.n	800b5de <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7fa feb2 	bl	8006322 <lwip_htonl>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	1ae3      	subs	r3, r4, r3
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	dc0b      	bgt.n	800b5de <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	8b5b      	ldrh	r3, [r3, #26]
 800b5ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b5ce:	b29a      	uxth	r2, r3
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b5d4:	e003      	b.n	800b5de <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f002 fbce 	bl	800dd78 <tcp_send_empty_ack>
 800b5dc:	e000      	b.n	800b5e0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b5de:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d05b      	beq.n	800b6a0 <tcp_receive+0x50c>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5ec:	4b60      	ldr	r3, [pc, #384]	; (800b770 <tcp_receive+0x5dc>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	1ad3      	subs	r3, r2, r3
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	da54      	bge.n	800b6a0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b5f6:	4b5f      	ldr	r3, [pc, #380]	; (800b774 <tcp_receive+0x5e0>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	b29a      	uxth	r2, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b600:	b29b      	uxth	r3, r3
 800b602:	1ad3      	subs	r3, r2, r3
 800b604:	b29b      	uxth	r3, r3
 800b606:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b60a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b614:	10db      	asrs	r3, r3, #3
 800b616:	b21b      	sxth	r3, r3
 800b618:	b29b      	uxth	r3, r3
 800b61a:	1ad3      	subs	r3, r2, r3
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b628:	b29a      	uxth	r2, r3
 800b62a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b62e:	4413      	add	r3, r2
 800b630:	b29b      	uxth	r3, r3
 800b632:	b21a      	sxth	r2, r3
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800b638:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	da05      	bge.n	800b64c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800b640:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b644:	425b      	negs	r3, r3
 800b646:	b29b      	uxth	r3, r3
 800b648:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b64c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b656:	109b      	asrs	r3, r3, #2
 800b658:	b21b      	sxth	r3, r3
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	1ad3      	subs	r3, r2, r3
 800b65e:	b29b      	uxth	r3, r3
 800b660:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b66a:	b29a      	uxth	r2, r3
 800b66c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b670:	4413      	add	r3, r2
 800b672:	b29b      	uxth	r3, r3
 800b674:	b21a      	sxth	r2, r3
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b680:	10db      	asrs	r3, r3, #3
 800b682:	b21b      	sxth	r3, r3
 800b684:	b29a      	uxth	r2, r3
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	4413      	add	r3, r2
 800b690:	b29b      	uxth	r3, r3
 800b692:	b21a      	sxth	r2, r3
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b6a0:	4b35      	ldr	r3, [pc, #212]	; (800b778 <tcp_receive+0x5e4>)
 800b6a2:	881b      	ldrh	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	f000 84e2 	beq.w	800c06e <tcp_receive+0xeda>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	7d1b      	ldrb	r3, [r3, #20]
 800b6ae:	2b06      	cmp	r3, #6
 800b6b0:	f200 84dd 	bhi.w	800c06e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6b8:	4b30      	ldr	r3, [pc, #192]	; (800b77c <tcp_receive+0x5e8>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	1ad3      	subs	r3, r2, r3
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	f2c0 808f 	blt.w	800b7e4 <tcp_receive+0x650>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6ca:	4b2b      	ldr	r3, [pc, #172]	; (800b778 <tcp_receive+0x5e4>)
 800b6cc:	881b      	ldrh	r3, [r3, #0]
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	4b2a      	ldr	r3, [pc, #168]	; (800b77c <tcp_receive+0x5e8>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	440b      	add	r3, r1
 800b6d6:	1ad3      	subs	r3, r2, r3
 800b6d8:	3301      	adds	r3, #1
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	f300 8082 	bgt.w	800b7e4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b6e0:	4b27      	ldr	r3, [pc, #156]	; (800b780 <tcp_receive+0x5ec>)
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6ea:	4b24      	ldr	r3, [pc, #144]	; (800b77c <tcp_receive+0x5e8>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	1ad3      	subs	r3, r2, r3
 800b6f0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b6f2:	4b23      	ldr	r3, [pc, #140]	; (800b780 <tcp_receive+0x5ec>)
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d106      	bne.n	800b708 <tcp_receive+0x574>
 800b6fa:	4b22      	ldr	r3, [pc, #136]	; (800b784 <tcp_receive+0x5f0>)
 800b6fc:	f240 5294 	movw	r2, #1428	; 0x594
 800b700:	4921      	ldr	r1, [pc, #132]	; (800b788 <tcp_receive+0x5f4>)
 800b702:	4822      	ldr	r0, [pc, #136]	; (800b78c <tcp_receive+0x5f8>)
 800b704:	f005 fabc 	bl	8010c80 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b70e:	4293      	cmp	r3, r2
 800b710:	d906      	bls.n	800b720 <tcp_receive+0x58c>
 800b712:	4b1c      	ldr	r3, [pc, #112]	; (800b784 <tcp_receive+0x5f0>)
 800b714:	f240 5295 	movw	r2, #1429	; 0x595
 800b718:	491d      	ldr	r1, [pc, #116]	; (800b790 <tcp_receive+0x5fc>)
 800b71a:	481c      	ldr	r0, [pc, #112]	; (800b78c <tcp_receive+0x5f8>)
 800b71c:	f005 fab0 	bl	8010c80 <iprintf>
      off = (u16_t)off32;
 800b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b722:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b726:	4b16      	ldr	r3, [pc, #88]	; (800b780 <tcp_receive+0x5ec>)
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	891b      	ldrh	r3, [r3, #8]
 800b72c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b730:	429a      	cmp	r2, r3
 800b732:	d906      	bls.n	800b742 <tcp_receive+0x5ae>
 800b734:	4b13      	ldr	r3, [pc, #76]	; (800b784 <tcp_receive+0x5f0>)
 800b736:	f240 5297 	movw	r2, #1431	; 0x597
 800b73a:	4916      	ldr	r1, [pc, #88]	; (800b794 <tcp_receive+0x600>)
 800b73c:	4813      	ldr	r0, [pc, #76]	; (800b78c <tcp_receive+0x5f8>)
 800b73e:	f005 fa9f 	bl	8010c80 <iprintf>
      inseg.len -= off;
 800b742:	4b0f      	ldr	r3, [pc, #60]	; (800b780 <tcp_receive+0x5ec>)
 800b744:	891a      	ldrh	r2, [r3, #8]
 800b746:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b74a:	1ad3      	subs	r3, r2, r3
 800b74c:	b29a      	uxth	r2, r3
 800b74e:	4b0c      	ldr	r3, [pc, #48]	; (800b780 <tcp_receive+0x5ec>)
 800b750:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b752:	4b0b      	ldr	r3, [pc, #44]	; (800b780 <tcp_receive+0x5ec>)
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	891a      	ldrh	r2, [r3, #8]
 800b758:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b75c:	1ad3      	subs	r3, r2, r3
 800b75e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800b760:	e02a      	b.n	800b7b8 <tcp_receive+0x624>
 800b762:	bf00      	nop
 800b764:	08013654 	.word	0x08013654
 800b768:	0801365c 	.word	0x0801365c
 800b76c:	2000872c 	.word	0x2000872c
 800b770:	20008728 	.word	0x20008728
 800b774:	200086ec 	.word	0x200086ec
 800b778:	2000872e 	.word	0x2000872e
 800b77c:	20008724 	.word	0x20008724
 800b780:	20008704 	.word	0x20008704
 800b784:	080132ec 	.word	0x080132ec
 800b788:	08013664 	.word	0x08013664
 800b78c:	08013338 	.word	0x08013338
 800b790:	08013674 	.word	0x08013674
 800b794:	08013684 	.word	0x08013684
        off -= p->len;
 800b798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b79a:	895b      	ldrh	r3, [r3, #10]
 800b79c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b7a0:	1ad3      	subs	r3, r2, r3
 800b7a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b7a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7a8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b7aa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b7ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b7b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800b7b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7ba:	895b      	ldrh	r3, [r3, #10]
 800b7bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d8e9      	bhi.n	800b798 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b7c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b7cc:	f7fc f8d6 	bl	800797c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d4:	4a91      	ldr	r2, [pc, #580]	; (800ba1c <tcp_receive+0x888>)
 800b7d6:	6013      	str	r3, [r2, #0]
 800b7d8:	4b91      	ldr	r3, [pc, #580]	; (800ba20 <tcp_receive+0x88c>)
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	4a8f      	ldr	r2, [pc, #572]	; (800ba1c <tcp_receive+0x888>)
 800b7de:	6812      	ldr	r2, [r2, #0]
 800b7e0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b7e2:	e00d      	b.n	800b800 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b7e4:	4b8d      	ldr	r3, [pc, #564]	; (800ba1c <tcp_receive+0x888>)
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ec:	1ad3      	subs	r3, r2, r3
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	da06      	bge.n	800b800 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	8b5b      	ldrh	r3, [r3, #26]
 800b7f6:	f043 0302 	orr.w	r3, r3, #2
 800b7fa:	b29a      	uxth	r2, r3
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b800:	4b86      	ldr	r3, [pc, #536]	; (800ba1c <tcp_receive+0x888>)
 800b802:	681a      	ldr	r2, [r3, #0]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b808:	1ad3      	subs	r3, r2, r3
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	f2c0 842a 	blt.w	800c064 <tcp_receive+0xed0>
 800b810:	4b82      	ldr	r3, [pc, #520]	; (800ba1c <tcp_receive+0x888>)
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b818:	6879      	ldr	r1, [r7, #4]
 800b81a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b81c:	440b      	add	r3, r1
 800b81e:	1ad3      	subs	r3, r2, r3
 800b820:	3301      	adds	r3, #1
 800b822:	2b00      	cmp	r3, #0
 800b824:	f300 841e 	bgt.w	800c064 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b82c:	4b7b      	ldr	r3, [pc, #492]	; (800ba1c <tcp_receive+0x888>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	429a      	cmp	r2, r3
 800b832:	f040 829a 	bne.w	800bd6a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b836:	4b7a      	ldr	r3, [pc, #488]	; (800ba20 <tcp_receive+0x88c>)
 800b838:	891c      	ldrh	r4, [r3, #8]
 800b83a:	4b79      	ldr	r3, [pc, #484]	; (800ba20 <tcp_receive+0x88c>)
 800b83c:	68db      	ldr	r3, [r3, #12]
 800b83e:	899b      	ldrh	r3, [r3, #12]
 800b840:	b29b      	uxth	r3, r3
 800b842:	4618      	mov	r0, r3
 800b844:	f7fa fd58 	bl	80062f8 <lwip_htons>
 800b848:	4603      	mov	r3, r0
 800b84a:	b2db      	uxtb	r3, r3
 800b84c:	f003 0303 	and.w	r3, r3, #3
 800b850:	2b00      	cmp	r3, #0
 800b852:	d001      	beq.n	800b858 <tcp_receive+0x6c4>
 800b854:	2301      	movs	r3, #1
 800b856:	e000      	b.n	800b85a <tcp_receive+0x6c6>
 800b858:	2300      	movs	r3, #0
 800b85a:	4423      	add	r3, r4
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	4b71      	ldr	r3, [pc, #452]	; (800ba24 <tcp_receive+0x890>)
 800b860:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b866:	4b6f      	ldr	r3, [pc, #444]	; (800ba24 <tcp_receive+0x890>)
 800b868:	881b      	ldrh	r3, [r3, #0]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d275      	bcs.n	800b95a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b86e:	4b6c      	ldr	r3, [pc, #432]	; (800ba20 <tcp_receive+0x88c>)
 800b870:	68db      	ldr	r3, [r3, #12]
 800b872:	899b      	ldrh	r3, [r3, #12]
 800b874:	b29b      	uxth	r3, r3
 800b876:	4618      	mov	r0, r3
 800b878:	f7fa fd3e 	bl	80062f8 <lwip_htons>
 800b87c:	4603      	mov	r3, r0
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	f003 0301 	and.w	r3, r3, #1
 800b884:	2b00      	cmp	r3, #0
 800b886:	d01f      	beq.n	800b8c8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b888:	4b65      	ldr	r3, [pc, #404]	; (800ba20 <tcp_receive+0x88c>)
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	899b      	ldrh	r3, [r3, #12]
 800b88e:	b29b      	uxth	r3, r3
 800b890:	b21b      	sxth	r3, r3
 800b892:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b896:	b21c      	sxth	r4, r3
 800b898:	4b61      	ldr	r3, [pc, #388]	; (800ba20 <tcp_receive+0x88c>)
 800b89a:	68db      	ldr	r3, [r3, #12]
 800b89c:	899b      	ldrh	r3, [r3, #12]
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7fa fd29 	bl	80062f8 <lwip_htons>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7fa fd20 	bl	80062f8 <lwip_htons>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	b21b      	sxth	r3, r3
 800b8bc:	4323      	orrs	r3, r4
 800b8be:	b21a      	sxth	r2, r3
 800b8c0:	4b57      	ldr	r3, [pc, #348]	; (800ba20 <tcp_receive+0x88c>)
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	b292      	uxth	r2, r2
 800b8c6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b8cc:	4b54      	ldr	r3, [pc, #336]	; (800ba20 <tcp_receive+0x88c>)
 800b8ce:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b8d0:	4b53      	ldr	r3, [pc, #332]	; (800ba20 <tcp_receive+0x88c>)
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	899b      	ldrh	r3, [r3, #12]
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7fa fd0d 	bl	80062f8 <lwip_htons>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	b2db      	uxtb	r3, r3
 800b8e2:	f003 0302 	and.w	r3, r3, #2
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d005      	beq.n	800b8f6 <tcp_receive+0x762>
            inseg.len -= 1;
 800b8ea:	4b4d      	ldr	r3, [pc, #308]	; (800ba20 <tcp_receive+0x88c>)
 800b8ec:	891b      	ldrh	r3, [r3, #8]
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	b29a      	uxth	r2, r3
 800b8f2:	4b4b      	ldr	r3, [pc, #300]	; (800ba20 <tcp_receive+0x88c>)
 800b8f4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b8f6:	4b4a      	ldr	r3, [pc, #296]	; (800ba20 <tcp_receive+0x88c>)
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	4a49      	ldr	r2, [pc, #292]	; (800ba20 <tcp_receive+0x88c>)
 800b8fc:	8912      	ldrh	r2, [r2, #8]
 800b8fe:	4611      	mov	r1, r2
 800b900:	4618      	mov	r0, r3
 800b902:	f7fb ff3b 	bl	800777c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b906:	4b46      	ldr	r3, [pc, #280]	; (800ba20 <tcp_receive+0x88c>)
 800b908:	891c      	ldrh	r4, [r3, #8]
 800b90a:	4b45      	ldr	r3, [pc, #276]	; (800ba20 <tcp_receive+0x88c>)
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	899b      	ldrh	r3, [r3, #12]
 800b910:	b29b      	uxth	r3, r3
 800b912:	4618      	mov	r0, r3
 800b914:	f7fa fcf0 	bl	80062f8 <lwip_htons>
 800b918:	4603      	mov	r3, r0
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	f003 0303 	and.w	r3, r3, #3
 800b920:	2b00      	cmp	r3, #0
 800b922:	d001      	beq.n	800b928 <tcp_receive+0x794>
 800b924:	2301      	movs	r3, #1
 800b926:	e000      	b.n	800b92a <tcp_receive+0x796>
 800b928:	2300      	movs	r3, #0
 800b92a:	4423      	add	r3, r4
 800b92c:	b29a      	uxth	r2, r3
 800b92e:	4b3d      	ldr	r3, [pc, #244]	; (800ba24 <tcp_receive+0x890>)
 800b930:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b932:	4b3c      	ldr	r3, [pc, #240]	; (800ba24 <tcp_receive+0x890>)
 800b934:	881b      	ldrh	r3, [r3, #0]
 800b936:	461a      	mov	r2, r3
 800b938:	4b38      	ldr	r3, [pc, #224]	; (800ba1c <tcp_receive+0x888>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	441a      	add	r2, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b942:	6879      	ldr	r1, [r7, #4]
 800b944:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b946:	440b      	add	r3, r1
 800b948:	429a      	cmp	r2, r3
 800b94a:	d006      	beq.n	800b95a <tcp_receive+0x7c6>
 800b94c:	4b36      	ldr	r3, [pc, #216]	; (800ba28 <tcp_receive+0x894>)
 800b94e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800b952:	4936      	ldr	r1, [pc, #216]	; (800ba2c <tcp_receive+0x898>)
 800b954:	4836      	ldr	r0, [pc, #216]	; (800ba30 <tcp_receive+0x89c>)
 800b956:	f005 f993 	bl	8010c80 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b95e:	2b00      	cmp	r3, #0
 800b960:	f000 80e7 	beq.w	800bb32 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b964:	4b2e      	ldr	r3, [pc, #184]	; (800ba20 <tcp_receive+0x88c>)
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	899b      	ldrh	r3, [r3, #12]
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7fa fcc3 	bl	80062f8 <lwip_htons>
 800b972:	4603      	mov	r3, r0
 800b974:	b2db      	uxtb	r3, r3
 800b976:	f003 0301 	and.w	r3, r3, #1
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d010      	beq.n	800b9a0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b97e:	e00a      	b.n	800b996 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b984:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f7fd fca6 	bl	80092e2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d1f0      	bne.n	800b980 <tcp_receive+0x7ec>
 800b99e:	e0c8      	b.n	800bb32 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b9a6:	e052      	b.n	800ba4e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b9a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	899b      	ldrh	r3, [r3, #12]
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7fa fca1 	bl	80062f8 <lwip_htons>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	f003 0301 	and.w	r3, r3, #1
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d03d      	beq.n	800ba3e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b9c2:	4b17      	ldr	r3, [pc, #92]	; (800ba20 <tcp_receive+0x88c>)
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	899b      	ldrh	r3, [r3, #12]
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f7fa fc94 	bl	80062f8 <lwip_htons>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d130      	bne.n	800ba3e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b9dc:	4b10      	ldr	r3, [pc, #64]	; (800ba20 <tcp_receive+0x88c>)
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	899b      	ldrh	r3, [r3, #12]
 800b9e2:	b29c      	uxth	r4, r3
 800b9e4:	2001      	movs	r0, #1
 800b9e6:	f7fa fc87 	bl	80062f8 <lwip_htons>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	4b0c      	ldr	r3, [pc, #48]	; (800ba20 <tcp_receive+0x88c>)
 800b9f0:	68db      	ldr	r3, [r3, #12]
 800b9f2:	4322      	orrs	r2, r4
 800b9f4:	b292      	uxth	r2, r2
 800b9f6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b9f8:	4b09      	ldr	r3, [pc, #36]	; (800ba20 <tcp_receive+0x88c>)
 800b9fa:	891c      	ldrh	r4, [r3, #8]
 800b9fc:	4b08      	ldr	r3, [pc, #32]	; (800ba20 <tcp_receive+0x88c>)
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	899b      	ldrh	r3, [r3, #12]
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7fa fc77 	bl	80062f8 <lwip_htons>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	f003 0303 	and.w	r3, r3, #3
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00e      	beq.n	800ba34 <tcp_receive+0x8a0>
 800ba16:	2301      	movs	r3, #1
 800ba18:	e00d      	b.n	800ba36 <tcp_receive+0x8a2>
 800ba1a:	bf00      	nop
 800ba1c:	20008724 	.word	0x20008724
 800ba20:	20008704 	.word	0x20008704
 800ba24:	2000872e 	.word	0x2000872e
 800ba28:	080132ec 	.word	0x080132ec
 800ba2c:	08013694 	.word	0x08013694
 800ba30:	08013338 	.word	0x08013338
 800ba34:	2300      	movs	r3, #0
 800ba36:	4423      	add	r3, r4
 800ba38:	b29a      	uxth	r2, r3
 800ba3a:	4b98      	ldr	r3, [pc, #608]	; (800bc9c <tcp_receive+0xb08>)
 800ba3c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ba3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba40:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ba42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ba48:	6938      	ldr	r0, [r7, #16]
 800ba4a:	f7fd fc4a 	bl	80092e2 <tcp_seg_free>
            while (next &&
 800ba4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d00e      	beq.n	800ba72 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ba54:	4b91      	ldr	r3, [pc, #580]	; (800bc9c <tcp_receive+0xb08>)
 800ba56:	881b      	ldrh	r3, [r3, #0]
 800ba58:	461a      	mov	r2, r3
 800ba5a:	4b91      	ldr	r3, [pc, #580]	; (800bca0 <tcp_receive+0xb0c>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	441a      	add	r2, r3
 800ba60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba68:	8909      	ldrh	r1, [r1, #8]
 800ba6a:	440b      	add	r3, r1
 800ba6c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	da9a      	bge.n	800b9a8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ba72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d059      	beq.n	800bb2c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800ba78:	4b88      	ldr	r3, [pc, #544]	; (800bc9c <tcp_receive+0xb08>)
 800ba7a:	881b      	ldrh	r3, [r3, #0]
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	4b88      	ldr	r3, [pc, #544]	; (800bca0 <tcp_receive+0xb0c>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	441a      	add	r2, r3
 800ba84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	dd4d      	ble.n	800bb2c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ba90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba92:	68db      	ldr	r3, [r3, #12]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	b29a      	uxth	r2, r3
 800ba98:	4b81      	ldr	r3, [pc, #516]	; (800bca0 <tcp_receive+0xb0c>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	1ad3      	subs	r3, r2, r3
 800baa0:	b29a      	uxth	r2, r3
 800baa2:	4b80      	ldr	r3, [pc, #512]	; (800bca4 <tcp_receive+0xb10>)
 800baa4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800baa6:	4b7f      	ldr	r3, [pc, #508]	; (800bca4 <tcp_receive+0xb10>)
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	899b      	ldrh	r3, [r3, #12]
 800baac:	b29b      	uxth	r3, r3
 800baae:	4618      	mov	r0, r3
 800bab0:	f7fa fc22 	bl	80062f8 <lwip_htons>
 800bab4:	4603      	mov	r3, r0
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	f003 0302 	and.w	r3, r3, #2
 800babc:	2b00      	cmp	r3, #0
 800babe:	d005      	beq.n	800bacc <tcp_receive+0x938>
                inseg.len -= 1;
 800bac0:	4b78      	ldr	r3, [pc, #480]	; (800bca4 <tcp_receive+0xb10>)
 800bac2:	891b      	ldrh	r3, [r3, #8]
 800bac4:	3b01      	subs	r3, #1
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	4b76      	ldr	r3, [pc, #472]	; (800bca4 <tcp_receive+0xb10>)
 800baca:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800bacc:	4b75      	ldr	r3, [pc, #468]	; (800bca4 <tcp_receive+0xb10>)
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	4a74      	ldr	r2, [pc, #464]	; (800bca4 <tcp_receive+0xb10>)
 800bad2:	8912      	ldrh	r2, [r2, #8]
 800bad4:	4611      	mov	r1, r2
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7fb fe50 	bl	800777c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800badc:	4b71      	ldr	r3, [pc, #452]	; (800bca4 <tcp_receive+0xb10>)
 800bade:	891c      	ldrh	r4, [r3, #8]
 800bae0:	4b70      	ldr	r3, [pc, #448]	; (800bca4 <tcp_receive+0xb10>)
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	899b      	ldrh	r3, [r3, #12]
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	4618      	mov	r0, r3
 800baea:	f7fa fc05 	bl	80062f8 <lwip_htons>
 800baee:	4603      	mov	r3, r0
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	f003 0303 	and.w	r3, r3, #3
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d001      	beq.n	800bafe <tcp_receive+0x96a>
 800bafa:	2301      	movs	r3, #1
 800bafc:	e000      	b.n	800bb00 <tcp_receive+0x96c>
 800bafe:	2300      	movs	r3, #0
 800bb00:	4423      	add	r3, r4
 800bb02:	b29a      	uxth	r2, r3
 800bb04:	4b65      	ldr	r3, [pc, #404]	; (800bc9c <tcp_receive+0xb08>)
 800bb06:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800bb08:	4b64      	ldr	r3, [pc, #400]	; (800bc9c <tcp_receive+0xb08>)
 800bb0a:	881b      	ldrh	r3, [r3, #0]
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	4b64      	ldr	r3, [pc, #400]	; (800bca0 <tcp_receive+0xb0c>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	441a      	add	r2, r3
 800bb14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d006      	beq.n	800bb2c <tcp_receive+0x998>
 800bb1e:	4b62      	ldr	r3, [pc, #392]	; (800bca8 <tcp_receive+0xb14>)
 800bb20:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800bb24:	4961      	ldr	r1, [pc, #388]	; (800bcac <tcp_receive+0xb18>)
 800bb26:	4862      	ldr	r0, [pc, #392]	; (800bcb0 <tcp_receive+0xb1c>)
 800bb28:	f005 f8aa 	bl	8010c80 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb30:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800bb32:	4b5a      	ldr	r3, [pc, #360]	; (800bc9c <tcp_receive+0xb08>)
 800bb34:	881b      	ldrh	r3, [r3, #0]
 800bb36:	461a      	mov	r2, r3
 800bb38:	4b59      	ldr	r3, [pc, #356]	; (800bca0 <tcp_receive+0xb0c>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	441a      	add	r2, r3
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bb46:	4b55      	ldr	r3, [pc, #340]	; (800bc9c <tcp_receive+0xb08>)
 800bb48:	881b      	ldrh	r3, [r3, #0]
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d206      	bcs.n	800bb5c <tcp_receive+0x9c8>
 800bb4e:	4b56      	ldr	r3, [pc, #344]	; (800bca8 <tcp_receive+0xb14>)
 800bb50:	f240 6207 	movw	r2, #1543	; 0x607
 800bb54:	4957      	ldr	r1, [pc, #348]	; (800bcb4 <tcp_receive+0xb20>)
 800bb56:	4856      	ldr	r0, [pc, #344]	; (800bcb0 <tcp_receive+0xb1c>)
 800bb58:	f005 f892 	bl	8010c80 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bb60:	4b4e      	ldr	r3, [pc, #312]	; (800bc9c <tcp_receive+0xb08>)
 800bb62:	881b      	ldrh	r3, [r3, #0]
 800bb64:	1ad3      	subs	r3, r2, r3
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f7fc fe93 	bl	8008898 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800bb72:	4b4c      	ldr	r3, [pc, #304]	; (800bca4 <tcp_receive+0xb10>)
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	891b      	ldrh	r3, [r3, #8]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d006      	beq.n	800bb8a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800bb7c:	4b49      	ldr	r3, [pc, #292]	; (800bca4 <tcp_receive+0xb10>)
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	4a4d      	ldr	r2, [pc, #308]	; (800bcb8 <tcp_receive+0xb24>)
 800bb82:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800bb84:	4b47      	ldr	r3, [pc, #284]	; (800bca4 <tcp_receive+0xb10>)
 800bb86:	2200      	movs	r2, #0
 800bb88:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bb8a:	4b46      	ldr	r3, [pc, #280]	; (800bca4 <tcp_receive+0xb10>)
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	899b      	ldrh	r3, [r3, #12]
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7fa fbb0 	bl	80062f8 <lwip_htons>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	f003 0301 	and.w	r3, r3, #1
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f000 80b8 	beq.w	800bd16 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800bba6:	4b45      	ldr	r3, [pc, #276]	; (800bcbc <tcp_receive+0xb28>)
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	f043 0320 	orr.w	r3, r3, #32
 800bbae:	b2da      	uxtb	r2, r3
 800bbb0:	4b42      	ldr	r3, [pc, #264]	; (800bcbc <tcp_receive+0xb28>)
 800bbb2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800bbb4:	e0af      	b.n	800bd16 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbba:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	4a36      	ldr	r2, [pc, #216]	; (800bca0 <tcp_receive+0xb0c>)
 800bbc6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	891b      	ldrh	r3, [r3, #8]
 800bbcc:	461c      	mov	r4, r3
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	899b      	ldrh	r3, [r3, #12]
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fa fb8e 	bl	80062f8 <lwip_htons>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	b2db      	uxtb	r3, r3
 800bbe0:	f003 0303 	and.w	r3, r3, #3
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d001      	beq.n	800bbec <tcp_receive+0xa58>
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e000      	b.n	800bbee <tcp_receive+0xa5a>
 800bbec:	2300      	movs	r3, #0
 800bbee:	191a      	adds	r2, r3, r4
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf4:	441a      	add	r2, r3
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbfe:	461c      	mov	r4, r3
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	891b      	ldrh	r3, [r3, #8]
 800bc04:	461d      	mov	r5, r3
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	899b      	ldrh	r3, [r3, #12]
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7fa fb72 	bl	80062f8 <lwip_htons>
 800bc14:	4603      	mov	r3, r0
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	f003 0303 	and.w	r3, r3, #3
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d001      	beq.n	800bc24 <tcp_receive+0xa90>
 800bc20:	2301      	movs	r3, #1
 800bc22:	e000      	b.n	800bc26 <tcp_receive+0xa92>
 800bc24:	2300      	movs	r3, #0
 800bc26:	442b      	add	r3, r5
 800bc28:	429c      	cmp	r4, r3
 800bc2a:	d206      	bcs.n	800bc3a <tcp_receive+0xaa6>
 800bc2c:	4b1e      	ldr	r3, [pc, #120]	; (800bca8 <tcp_receive+0xb14>)
 800bc2e:	f240 622b 	movw	r2, #1579	; 0x62b
 800bc32:	4923      	ldr	r1, [pc, #140]	; (800bcc0 <tcp_receive+0xb2c>)
 800bc34:	481e      	ldr	r0, [pc, #120]	; (800bcb0 <tcp_receive+0xb1c>)
 800bc36:	f005 f823 	bl	8010c80 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	891b      	ldrh	r3, [r3, #8]
 800bc3e:	461c      	mov	r4, r3
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	899b      	ldrh	r3, [r3, #12]
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7fa fb55 	bl	80062f8 <lwip_htons>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	f003 0303 	and.w	r3, r3, #3
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d001      	beq.n	800bc5e <tcp_receive+0xaca>
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	e000      	b.n	800bc60 <tcp_receive+0xacc>
 800bc5e:	2300      	movs	r3, #0
 800bc60:	1919      	adds	r1, r3, r4
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bc66:	b28b      	uxth	r3, r1
 800bc68:	1ad3      	subs	r3, r2, r3
 800bc6a:	b29a      	uxth	r2, r3
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f7fc fe11 	bl	8008898 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	891b      	ldrh	r3, [r3, #8]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d028      	beq.n	800bcd2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800bc80:	4b0d      	ldr	r3, [pc, #52]	; (800bcb8 <tcp_receive+0xb24>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d01d      	beq.n	800bcc4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800bc88:	4b0b      	ldr	r3, [pc, #44]	; (800bcb8 <tcp_receive+0xb24>)
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	4619      	mov	r1, r3
 800bc92:	4610      	mov	r0, r2
 800bc94:	f7fb ffba 	bl	8007c0c <pbuf_cat>
 800bc98:	e018      	b.n	800bccc <tcp_receive+0xb38>
 800bc9a:	bf00      	nop
 800bc9c:	2000872e 	.word	0x2000872e
 800bca0:	20008724 	.word	0x20008724
 800bca4:	20008704 	.word	0x20008704
 800bca8:	080132ec 	.word	0x080132ec
 800bcac:	080136cc 	.word	0x080136cc
 800bcb0:	08013338 	.word	0x08013338
 800bcb4:	08013708 	.word	0x08013708
 800bcb8:	20008734 	.word	0x20008734
 800bcbc:	20008731 	.word	0x20008731
 800bcc0:	08013728 	.word	0x08013728
            } else {
              recv_data = cseg->p;
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	4a70      	ldr	r2, [pc, #448]	; (800be8c <tcp_receive+0xcf8>)
 800bcca:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	899b      	ldrh	r3, [r3, #12]
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7fa fb0c 	bl	80062f8 <lwip_htons>
 800bce0:	4603      	mov	r3, r0
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	f003 0301 	and.w	r3, r3, #1
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00d      	beq.n	800bd08 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800bcec:	4b68      	ldr	r3, [pc, #416]	; (800be90 <tcp_receive+0xcfc>)
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	f043 0320 	orr.w	r3, r3, #32
 800bcf4:	b2da      	uxtb	r2, r3
 800bcf6:	4b66      	ldr	r3, [pc, #408]	; (800be90 <tcp_receive+0xcfc>)
 800bcf8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	7d1b      	ldrb	r3, [r3, #20]
 800bcfe:	2b04      	cmp	r3, #4
 800bd00:	d102      	bne.n	800bd08 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2207      	movs	r2, #7
 800bd06:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800bd10:	68b8      	ldr	r0, [r7, #8]
 800bd12:	f7fd fae6 	bl	80092e2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d008      	beq.n	800bd30 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	685a      	ldr	r2, [r3, #4]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	f43f af43 	beq.w	800bbb6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	8b5b      	ldrh	r3, [r3, #26]
 800bd34:	f003 0301 	and.w	r3, r3, #1
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d00e      	beq.n	800bd5a <tcp_receive+0xbc6>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	8b5b      	ldrh	r3, [r3, #26]
 800bd40:	f023 0301 	bic.w	r3, r3, #1
 800bd44:	b29a      	uxth	r2, r3
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	835a      	strh	r2, [r3, #26]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	8b5b      	ldrh	r3, [r3, #26]
 800bd4e:	f043 0302 	orr.w	r3, r3, #2
 800bd52:	b29a      	uxth	r2, r3
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bd58:	e188      	b.n	800c06c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	8b5b      	ldrh	r3, [r3, #26]
 800bd5e:	f043 0301 	orr.w	r3, r3, #1
 800bd62:	b29a      	uxth	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bd68:	e180      	b.n	800c06c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d106      	bne.n	800bd80 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800bd72:	4848      	ldr	r0, [pc, #288]	; (800be94 <tcp_receive+0xd00>)
 800bd74:	f7fd faec 	bl	8009350 <tcp_seg_copy>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	675a      	str	r2, [r3, #116]	; 0x74
 800bd7e:	e16d      	b.n	800c05c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800bd80:	2300      	movs	r3, #0
 800bd82:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd88:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd8a:	e157      	b.n	800c03c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800bd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	685a      	ldr	r2, [r3, #4]
 800bd92:	4b41      	ldr	r3, [pc, #260]	; (800be98 <tcp_receive+0xd04>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d11d      	bne.n	800bdd6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800bd9a:	4b3e      	ldr	r3, [pc, #248]	; (800be94 <tcp_receive+0xd00>)
 800bd9c:	891a      	ldrh	r2, [r3, #8]
 800bd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda0:	891b      	ldrh	r3, [r3, #8]
 800bda2:	429a      	cmp	r2, r3
 800bda4:	f240 814f 	bls.w	800c046 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bda8:	483a      	ldr	r0, [pc, #232]	; (800be94 <tcp_receive+0xd00>)
 800bdaa:	f7fd fad1 	bl	8009350 <tcp_seg_copy>
 800bdae:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f000 8149 	beq.w	800c04a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800bdb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d003      	beq.n	800bdc6 <tcp_receive+0xc32>
                    prev->next = cseg;
 800bdbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc0:	697a      	ldr	r2, [r7, #20]
 800bdc2:	601a      	str	r2, [r3, #0]
 800bdc4:	e002      	b.n	800bdcc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	697a      	ldr	r2, [r7, #20]
 800bdca:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800bdcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bdce:	6978      	ldr	r0, [r7, #20]
 800bdd0:	f7ff f8dc 	bl	800af8c <tcp_oos_insert_segment>
                }
                break;
 800bdd4:	e139      	b.n	800c04a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800bdd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d117      	bne.n	800be0c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800bddc:	4b2e      	ldr	r3, [pc, #184]	; (800be98 <tcp_receive+0xd04>)
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	1ad3      	subs	r3, r2, r3
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	da57      	bge.n	800be9c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bdec:	4829      	ldr	r0, [pc, #164]	; (800be94 <tcp_receive+0xd00>)
 800bdee:	f7fd faaf 	bl	8009350 <tcp_seg_copy>
 800bdf2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	f000 8129 	beq.w	800c04e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	69ba      	ldr	r2, [r7, #24]
 800be00:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800be02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800be04:	69b8      	ldr	r0, [r7, #24]
 800be06:	f7ff f8c1 	bl	800af8c <tcp_oos_insert_segment>
                  }
                  break;
 800be0a:	e120      	b.n	800c04e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800be0c:	4b22      	ldr	r3, [pc, #136]	; (800be98 <tcp_receive+0xd04>)
 800be0e:	681a      	ldr	r2, [r3, #0]
 800be10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be12:	68db      	ldr	r3, [r3, #12]
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	1ad3      	subs	r3, r2, r3
 800be18:	3b01      	subs	r3, #1
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	db3e      	blt.n	800be9c <tcp_receive+0xd08>
 800be1e:	4b1e      	ldr	r3, [pc, #120]	; (800be98 <tcp_receive+0xd04>)
 800be20:	681a      	ldr	r2, [r3, #0]
 800be22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	1ad3      	subs	r3, r2, r3
 800be2a:	3301      	adds	r3, #1
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	dc35      	bgt.n	800be9c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800be30:	4818      	ldr	r0, [pc, #96]	; (800be94 <tcp_receive+0xd00>)
 800be32:	f7fd fa8d 	bl	8009350 <tcp_seg_copy>
 800be36:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	f000 8109 	beq.w	800c052 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800be40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be42:	68db      	ldr	r3, [r3, #12]
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be48:	8912      	ldrh	r2, [r2, #8]
 800be4a:	441a      	add	r2, r3
 800be4c:	4b12      	ldr	r3, [pc, #72]	; (800be98 <tcp_receive+0xd04>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	1ad3      	subs	r3, r2, r3
 800be52:	2b00      	cmp	r3, #0
 800be54:	dd12      	ble.n	800be7c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800be56:	4b10      	ldr	r3, [pc, #64]	; (800be98 <tcp_receive+0xd04>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	b29a      	uxth	r2, r3
 800be5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be5e:	68db      	ldr	r3, [r3, #12]
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	b29b      	uxth	r3, r3
 800be64:	1ad3      	subs	r3, r2, r3
 800be66:	b29a      	uxth	r2, r3
 800be68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be6a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800be6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be6e:	685a      	ldr	r2, [r3, #4]
 800be70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be72:	891b      	ldrh	r3, [r3, #8]
 800be74:	4619      	mov	r1, r3
 800be76:	4610      	mov	r0, r2
 800be78:	f7fb fc80 	bl	800777c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800be7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be7e:	69fa      	ldr	r2, [r7, #28]
 800be80:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800be82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800be84:	69f8      	ldr	r0, [r7, #28]
 800be86:	f7ff f881 	bl	800af8c <tcp_oos_insert_segment>
                  }
                  break;
 800be8a:	e0e2      	b.n	800c052 <tcp_receive+0xebe>
 800be8c:	20008734 	.word	0x20008734
 800be90:	20008731 	.word	0x20008731
 800be94:	20008704 	.word	0x20008704
 800be98:	20008724 	.word	0x20008724
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800be9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800bea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	f040 80c6 	bne.w	800c036 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800beaa:	4b80      	ldr	r3, [pc, #512]	; (800c0ac <tcp_receive+0xf18>)
 800beac:	681a      	ldr	r2, [r3, #0]
 800beae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb0:	68db      	ldr	r3, [r3, #12]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	f340 80bd 	ble.w	800c036 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	899b      	ldrh	r3, [r3, #12]
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7fa fa17 	bl	80062f8 <lwip_htons>
 800beca:	4603      	mov	r3, r0
 800becc:	b2db      	uxtb	r3, r3
 800bece:	f003 0301 	and.w	r3, r3, #1
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	f040 80bf 	bne.w	800c056 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800bed8:	4875      	ldr	r0, [pc, #468]	; (800c0b0 <tcp_receive+0xf1c>)
 800beda:	f7fd fa39 	bl	8009350 <tcp_seg_copy>
 800bede:	4602      	mov	r2, r0
 800bee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800bee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	f000 80b6 	beq.w	800c05a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800beee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bef6:	8912      	ldrh	r2, [r2, #8]
 800bef8:	441a      	add	r2, r3
 800befa:	4b6c      	ldr	r3, [pc, #432]	; (800c0ac <tcp_receive+0xf18>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	1ad3      	subs	r3, r2, r3
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	dd12      	ble.n	800bf2a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800bf04:	4b69      	ldr	r3, [pc, #420]	; (800c0ac <tcp_receive+0xf18>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	b29a      	uxth	r2, r3
 800bf0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	1ad3      	subs	r3, r2, r3
 800bf14:	b29a      	uxth	r2, r3
 800bf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf18:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800bf1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1c:	685a      	ldr	r2, [r3, #4]
 800bf1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf20:	891b      	ldrh	r3, [r3, #8]
 800bf22:	4619      	mov	r1, r3
 800bf24:	4610      	mov	r0, r2
 800bf26:	f7fb fc29 	bl	800777c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800bf2a:	4b62      	ldr	r3, [pc, #392]	; (800c0b4 <tcp_receive+0xf20>)
 800bf2c:	881b      	ldrh	r3, [r3, #0]
 800bf2e:	461a      	mov	r2, r3
 800bf30:	4b5e      	ldr	r3, [pc, #376]	; (800c0ac <tcp_receive+0xf18>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	441a      	add	r2, r3
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf3a:	6879      	ldr	r1, [r7, #4]
 800bf3c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bf3e:	440b      	add	r3, r1
 800bf40:	1ad3      	subs	r3, r2, r3
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f340 8089 	ble.w	800c05a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800bf48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	68db      	ldr	r3, [r3, #12]
 800bf4e:	899b      	ldrh	r3, [r3, #12]
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7fa f9d0 	bl	80062f8 <lwip_htons>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	f003 0301 	and.w	r3, r3, #1
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d022      	beq.n	800bfaa <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800bf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	68db      	ldr	r3, [r3, #12]
 800bf6a:	899b      	ldrh	r3, [r3, #12]
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	b21b      	sxth	r3, r3
 800bf70:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bf74:	b21c      	sxth	r4, r3
 800bf76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	899b      	ldrh	r3, [r3, #12]
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7fa f9b9 	bl	80062f8 <lwip_htons>
 800bf86:	4603      	mov	r3, r0
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7fa f9b0 	bl	80062f8 <lwip_htons>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	b21b      	sxth	r3, r3
 800bf9c:	4323      	orrs	r3, r4
 800bf9e:	b21a      	sxth	r2, r3
 800bfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	68db      	ldr	r3, [r3, #12]
 800bfa6:	b292      	uxth	r2, r2
 800bfa8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfae:	b29a      	uxth	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfb4:	4413      	add	r3, r2
 800bfb6:	b299      	uxth	r1, r3
 800bfb8:	4b3c      	ldr	r3, [pc, #240]	; (800c0ac <tcp_receive+0xf18>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	b29a      	uxth	r2, r3
 800bfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	1a8a      	subs	r2, r1, r2
 800bfc4:	b292      	uxth	r2, r2
 800bfc6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800bfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	685a      	ldr	r2, [r3, #4]
 800bfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	891b      	ldrh	r3, [r3, #8]
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	4610      	mov	r0, r2
 800bfd8:	f7fb fbd0 	bl	800777c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800bfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	891c      	ldrh	r4, [r3, #8]
 800bfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	68db      	ldr	r3, [r3, #12]
 800bfe8:	899b      	ldrh	r3, [r3, #12]
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7fa f983 	bl	80062f8 <lwip_htons>
 800bff2:	4603      	mov	r3, r0
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	f003 0303 	and.w	r3, r3, #3
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d001      	beq.n	800c002 <tcp_receive+0xe6e>
 800bffe:	2301      	movs	r3, #1
 800c000:	e000      	b.n	800c004 <tcp_receive+0xe70>
 800c002:	2300      	movs	r3, #0
 800c004:	4423      	add	r3, r4
 800c006:	b29a      	uxth	r2, r3
 800c008:	4b2a      	ldr	r3, [pc, #168]	; (800c0b4 <tcp_receive+0xf20>)
 800c00a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c00c:	4b29      	ldr	r3, [pc, #164]	; (800c0b4 <tcp_receive+0xf20>)
 800c00e:	881b      	ldrh	r3, [r3, #0]
 800c010:	461a      	mov	r2, r3
 800c012:	4b26      	ldr	r3, [pc, #152]	; (800c0ac <tcp_receive+0xf18>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	441a      	add	r2, r3
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01c:	6879      	ldr	r1, [r7, #4]
 800c01e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c020:	440b      	add	r3, r1
 800c022:	429a      	cmp	r2, r3
 800c024:	d019      	beq.n	800c05a <tcp_receive+0xec6>
 800c026:	4b24      	ldr	r3, [pc, #144]	; (800c0b8 <tcp_receive+0xf24>)
 800c028:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c02c:	4923      	ldr	r1, [pc, #140]	; (800c0bc <tcp_receive+0xf28>)
 800c02e:	4824      	ldr	r0, [pc, #144]	; (800c0c0 <tcp_receive+0xf2c>)
 800c030:	f004 fe26 	bl	8010c80 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c034:	e011      	b.n	800c05a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03e:	2b00      	cmp	r3, #0
 800c040:	f47f aea4 	bne.w	800bd8c <tcp_receive+0xbf8>
 800c044:	e00a      	b.n	800c05c <tcp_receive+0xec8>
                break;
 800c046:	bf00      	nop
 800c048:	e008      	b.n	800c05c <tcp_receive+0xec8>
                break;
 800c04a:	bf00      	nop
 800c04c:	e006      	b.n	800c05c <tcp_receive+0xec8>
                  break;
 800c04e:	bf00      	nop
 800c050:	e004      	b.n	800c05c <tcp_receive+0xec8>
                  break;
 800c052:	bf00      	nop
 800c054:	e002      	b.n	800c05c <tcp_receive+0xec8>
                  break;
 800c056:	bf00      	nop
 800c058:	e000      	b.n	800c05c <tcp_receive+0xec8>
                break;
 800c05a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f001 fe8b 	bl	800dd78 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c062:	e003      	b.n	800c06c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f001 fe87 	bl	800dd78 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c06a:	e01a      	b.n	800c0a2 <tcp_receive+0xf0e>
 800c06c:	e019      	b.n	800c0a2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c06e:	4b0f      	ldr	r3, [pc, #60]	; (800c0ac <tcp_receive+0xf18>)
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c076:	1ad3      	subs	r3, r2, r3
 800c078:	2b00      	cmp	r3, #0
 800c07a:	db0a      	blt.n	800c092 <tcp_receive+0xefe>
 800c07c:	4b0b      	ldr	r3, [pc, #44]	; (800c0ac <tcp_receive+0xf18>)
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c084:	6879      	ldr	r1, [r7, #4]
 800c086:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c088:	440b      	add	r3, r1
 800c08a:	1ad3      	subs	r3, r2, r3
 800c08c:	3301      	adds	r3, #1
 800c08e:	2b00      	cmp	r3, #0
 800c090:	dd07      	ble.n	800c0a2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	8b5b      	ldrh	r3, [r3, #26]
 800c096:	f043 0302 	orr.w	r3, r3, #2
 800c09a:	b29a      	uxth	r2, r3
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c0a0:	e7ff      	b.n	800c0a2 <tcp_receive+0xf0e>
 800c0a2:	bf00      	nop
 800c0a4:	3750      	adds	r7, #80	; 0x50
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bdb0      	pop	{r4, r5, r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	20008724 	.word	0x20008724
 800c0b0:	20008704 	.word	0x20008704
 800c0b4:	2000872e 	.word	0x2000872e
 800c0b8:	080132ec 	.word	0x080132ec
 800c0bc:	08013694 	.word	0x08013694
 800c0c0:	08013338 	.word	0x08013338

0800c0c4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c0ca:	4b15      	ldr	r3, [pc, #84]	; (800c120 <tcp_get_next_optbyte+0x5c>)
 800c0cc:	881b      	ldrh	r3, [r3, #0]
 800c0ce:	1c5a      	adds	r2, r3, #1
 800c0d0:	b291      	uxth	r1, r2
 800c0d2:	4a13      	ldr	r2, [pc, #76]	; (800c120 <tcp_get_next_optbyte+0x5c>)
 800c0d4:	8011      	strh	r1, [r2, #0]
 800c0d6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c0d8:	4b12      	ldr	r3, [pc, #72]	; (800c124 <tcp_get_next_optbyte+0x60>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d004      	beq.n	800c0ea <tcp_get_next_optbyte+0x26>
 800c0e0:	4b11      	ldr	r3, [pc, #68]	; (800c128 <tcp_get_next_optbyte+0x64>)
 800c0e2:	881b      	ldrh	r3, [r3, #0]
 800c0e4:	88fa      	ldrh	r2, [r7, #6]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d208      	bcs.n	800c0fc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c0ea:	4b10      	ldr	r3, [pc, #64]	; (800c12c <tcp_get_next_optbyte+0x68>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	3314      	adds	r3, #20
 800c0f0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c0f2:	88fb      	ldrh	r3, [r7, #6]
 800c0f4:	683a      	ldr	r2, [r7, #0]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	e00b      	b.n	800c114 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c0fc:	88fb      	ldrh	r3, [r7, #6]
 800c0fe:	b2da      	uxtb	r2, r3
 800c100:	4b09      	ldr	r3, [pc, #36]	; (800c128 <tcp_get_next_optbyte+0x64>)
 800c102:	881b      	ldrh	r3, [r3, #0]
 800c104:	b2db      	uxtb	r3, r3
 800c106:	1ad3      	subs	r3, r2, r3
 800c108:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c10a:	4b06      	ldr	r3, [pc, #24]	; (800c124 <tcp_get_next_optbyte+0x60>)
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	797b      	ldrb	r3, [r7, #5]
 800c110:	4413      	add	r3, r2
 800c112:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c114:	4618      	mov	r0, r3
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr
 800c120:	20008720 	.word	0x20008720
 800c124:	2000871c 	.word	0x2000871c
 800c128:	2000871a 	.word	0x2000871a
 800c12c:	20008714 	.word	0x20008714

0800c130 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b084      	sub	sp, #16
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d106      	bne.n	800c14c <tcp_parseopt+0x1c>
 800c13e:	4b32      	ldr	r3, [pc, #200]	; (800c208 <tcp_parseopt+0xd8>)
 800c140:	f240 727d 	movw	r2, #1917	; 0x77d
 800c144:	4931      	ldr	r1, [pc, #196]	; (800c20c <tcp_parseopt+0xdc>)
 800c146:	4832      	ldr	r0, [pc, #200]	; (800c210 <tcp_parseopt+0xe0>)
 800c148:	f004 fd9a 	bl	8010c80 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c14c:	4b31      	ldr	r3, [pc, #196]	; (800c214 <tcp_parseopt+0xe4>)
 800c14e:	881b      	ldrh	r3, [r3, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d055      	beq.n	800c200 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c154:	4b30      	ldr	r3, [pc, #192]	; (800c218 <tcp_parseopt+0xe8>)
 800c156:	2200      	movs	r2, #0
 800c158:	801a      	strh	r2, [r3, #0]
 800c15a:	e045      	b.n	800c1e8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800c15c:	f7ff ffb2 	bl	800c0c4 <tcp_get_next_optbyte>
 800c160:	4603      	mov	r3, r0
 800c162:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c164:	7bfb      	ldrb	r3, [r7, #15]
 800c166:	2b02      	cmp	r3, #2
 800c168:	d006      	beq.n	800c178 <tcp_parseopt+0x48>
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	dc2b      	bgt.n	800c1c6 <tcp_parseopt+0x96>
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d041      	beq.n	800c1f6 <tcp_parseopt+0xc6>
 800c172:	2b01      	cmp	r3, #1
 800c174:	d127      	bne.n	800c1c6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800c176:	e037      	b.n	800c1e8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c178:	f7ff ffa4 	bl	800c0c4 <tcp_get_next_optbyte>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b04      	cmp	r3, #4
 800c180:	d13b      	bne.n	800c1fa <tcp_parseopt+0xca>
 800c182:	4b25      	ldr	r3, [pc, #148]	; (800c218 <tcp_parseopt+0xe8>)
 800c184:	881b      	ldrh	r3, [r3, #0]
 800c186:	3301      	adds	r3, #1
 800c188:	4a22      	ldr	r2, [pc, #136]	; (800c214 <tcp_parseopt+0xe4>)
 800c18a:	8812      	ldrh	r2, [r2, #0]
 800c18c:	4293      	cmp	r3, r2
 800c18e:	da34      	bge.n	800c1fa <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c190:	f7ff ff98 	bl	800c0c4 <tcp_get_next_optbyte>
 800c194:	4603      	mov	r3, r0
 800c196:	b29b      	uxth	r3, r3
 800c198:	021b      	lsls	r3, r3, #8
 800c19a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c19c:	f7ff ff92 	bl	800c0c4 <tcp_get_next_optbyte>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	b29a      	uxth	r2, r3
 800c1a4:	89bb      	ldrh	r3, [r7, #12]
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c1aa:	89bb      	ldrh	r3, [r7, #12]
 800c1ac:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c1b0:	d804      	bhi.n	800c1bc <tcp_parseopt+0x8c>
 800c1b2:	89bb      	ldrh	r3, [r7, #12]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d001      	beq.n	800c1bc <tcp_parseopt+0x8c>
 800c1b8:	89ba      	ldrh	r2, [r7, #12]
 800c1ba:	e001      	b.n	800c1c0 <tcp_parseopt+0x90>
 800c1bc:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800c1c4:	e010      	b.n	800c1e8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c1c6:	f7ff ff7d 	bl	800c0c4 <tcp_get_next_optbyte>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c1ce:	7afb      	ldrb	r3, [r7, #11]
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d914      	bls.n	800c1fe <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c1d4:	7afb      	ldrb	r3, [r7, #11]
 800c1d6:	b29a      	uxth	r2, r3
 800c1d8:	4b0f      	ldr	r3, [pc, #60]	; (800c218 <tcp_parseopt+0xe8>)
 800c1da:	881b      	ldrh	r3, [r3, #0]
 800c1dc:	4413      	add	r3, r2
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	3b02      	subs	r3, #2
 800c1e2:	b29a      	uxth	r2, r3
 800c1e4:	4b0c      	ldr	r3, [pc, #48]	; (800c218 <tcp_parseopt+0xe8>)
 800c1e6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c1e8:	4b0b      	ldr	r3, [pc, #44]	; (800c218 <tcp_parseopt+0xe8>)
 800c1ea:	881a      	ldrh	r2, [r3, #0]
 800c1ec:	4b09      	ldr	r3, [pc, #36]	; (800c214 <tcp_parseopt+0xe4>)
 800c1ee:	881b      	ldrh	r3, [r3, #0]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d3b3      	bcc.n	800c15c <tcp_parseopt+0x2c>
 800c1f4:	e004      	b.n	800c200 <tcp_parseopt+0xd0>
          return;
 800c1f6:	bf00      	nop
 800c1f8:	e002      	b.n	800c200 <tcp_parseopt+0xd0>
            return;
 800c1fa:	bf00      	nop
 800c1fc:	e000      	b.n	800c200 <tcp_parseopt+0xd0>
            return;
 800c1fe:	bf00      	nop
      }
    }
  }
}
 800c200:	3710      	adds	r7, #16
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	080132ec 	.word	0x080132ec
 800c20c:	08013750 	.word	0x08013750
 800c210:	08013338 	.word	0x08013338
 800c214:	20008718 	.word	0x20008718
 800c218:	20008720 	.word	0x20008720

0800c21c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c21c:	b480      	push	{r7}
 800c21e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c220:	4b05      	ldr	r3, [pc, #20]	; (800c238 <tcp_trigger_input_pcb_close+0x1c>)
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	f043 0310 	orr.w	r3, r3, #16
 800c228:	b2da      	uxtb	r2, r3
 800c22a:	4b03      	ldr	r3, [pc, #12]	; (800c238 <tcp_trigger_input_pcb_close+0x1c>)
 800c22c:	701a      	strb	r2, [r3, #0]
}
 800c22e:	bf00      	nop
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr
 800c238:	20008731 	.word	0x20008731

0800c23c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	60f8      	str	r0, [r7, #12]
 800c244:	60b9      	str	r1, [r7, #8]
 800c246:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d00a      	beq.n	800c264 <tcp_route+0x28>
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	7a1b      	ldrb	r3, [r3, #8]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d006      	beq.n	800c264 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	7a1b      	ldrb	r3, [r3, #8]
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7fb f8b4 	bl	80073c8 <netif_get_by_index>
 800c260:	4603      	mov	r3, r0
 800c262:	e003      	b.n	800c26c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f003 fad5 	bl	800f814 <ip4_route>
 800c26a:	4603      	mov	r3, r0
  }
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3710      	adds	r7, #16
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}

0800c274 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c274:	b590      	push	{r4, r7, lr}
 800c276:	b087      	sub	sp, #28
 800c278:	af00      	add	r7, sp, #0
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	60b9      	str	r1, [r7, #8]
 800c27e:	603b      	str	r3, [r7, #0]
 800c280:	4613      	mov	r3, r2
 800c282:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d105      	bne.n	800c296 <tcp_create_segment+0x22>
 800c28a:	4b44      	ldr	r3, [pc, #272]	; (800c39c <tcp_create_segment+0x128>)
 800c28c:	22a3      	movs	r2, #163	; 0xa3
 800c28e:	4944      	ldr	r1, [pc, #272]	; (800c3a0 <tcp_create_segment+0x12c>)
 800c290:	4844      	ldr	r0, [pc, #272]	; (800c3a4 <tcp_create_segment+0x130>)
 800c292:	f004 fcf5 	bl	8010c80 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d105      	bne.n	800c2a8 <tcp_create_segment+0x34>
 800c29c:	4b3f      	ldr	r3, [pc, #252]	; (800c39c <tcp_create_segment+0x128>)
 800c29e:	22a4      	movs	r2, #164	; 0xa4
 800c2a0:	4941      	ldr	r1, [pc, #260]	; (800c3a8 <tcp_create_segment+0x134>)
 800c2a2:	4840      	ldr	r0, [pc, #256]	; (800c3a4 <tcp_create_segment+0x130>)
 800c2a4:	f004 fcec 	bl	8010c80 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c2a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c2ac:	009b      	lsls	r3, r3, #2
 800c2ae:	b2db      	uxtb	r3, r3
 800c2b0:	f003 0304 	and.w	r3, r3, #4
 800c2b4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c2b6:	2003      	movs	r0, #3
 800c2b8:	f7fa fd00 	bl	8006cbc <memp_malloc>
 800c2bc:	6138      	str	r0, [r7, #16]
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d104      	bne.n	800c2ce <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c2c4:	68b8      	ldr	r0, [r7, #8]
 800c2c6:	f7fb fbdf 	bl	8007a88 <pbuf_free>
    return NULL;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	e061      	b.n	800c392 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c2d4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	68ba      	ldr	r2, [r7, #8]
 800c2e0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	891a      	ldrh	r2, [r3, #8]
 800c2e6:	7dfb      	ldrb	r3, [r7, #23]
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d205      	bcs.n	800c2fa <tcp_create_segment+0x86>
 800c2ee:	4b2b      	ldr	r3, [pc, #172]	; (800c39c <tcp_create_segment+0x128>)
 800c2f0:	22b0      	movs	r2, #176	; 0xb0
 800c2f2:	492e      	ldr	r1, [pc, #184]	; (800c3ac <tcp_create_segment+0x138>)
 800c2f4:	482b      	ldr	r0, [pc, #172]	; (800c3a4 <tcp_create_segment+0x130>)
 800c2f6:	f004 fcc3 	bl	8010c80 <iprintf>
  seg->len = p->tot_len - optlen;
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	891a      	ldrh	r2, [r3, #8]
 800c2fe:	7dfb      	ldrb	r3, [r7, #23]
 800c300:	b29b      	uxth	r3, r3
 800c302:	1ad3      	subs	r3, r2, r3
 800c304:	b29a      	uxth	r2, r3
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c30a:	2114      	movs	r1, #20
 800c30c:	68b8      	ldr	r0, [r7, #8]
 800c30e:	f7fb fb25 	bl	800795c <pbuf_add_header>
 800c312:	4603      	mov	r3, r0
 800c314:	2b00      	cmp	r3, #0
 800c316:	d004      	beq.n	800c322 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c318:	6938      	ldr	r0, [r7, #16]
 800c31a:	f7fc ffe2 	bl	80092e2 <tcp_seg_free>
    return NULL;
 800c31e:	2300      	movs	r3, #0
 800c320:	e037      	b.n	800c392 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	685a      	ldr	r2, [r3, #4]
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	8ada      	ldrh	r2, [r3, #22]
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	68dc      	ldr	r4, [r3, #12]
 800c334:	4610      	mov	r0, r2
 800c336:	f7f9 ffdf 	bl	80062f8 <lwip_htons>
 800c33a:	4603      	mov	r3, r0
 800c33c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	8b1a      	ldrh	r2, [r3, #24]
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	68dc      	ldr	r4, [r3, #12]
 800c346:	4610      	mov	r0, r2
 800c348:	f7f9 ffd6 	bl	80062f8 <lwip_htons>
 800c34c:	4603      	mov	r3, r0
 800c34e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	68dc      	ldr	r4, [r3, #12]
 800c354:	6838      	ldr	r0, [r7, #0]
 800c356:	f7f9 ffe4 	bl	8006322 <lwip_htonl>
 800c35a:	4603      	mov	r3, r0
 800c35c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c35e:	7dfb      	ldrb	r3, [r7, #23]
 800c360:	089b      	lsrs	r3, r3, #2
 800c362:	b2db      	uxtb	r3, r3
 800c364:	b29b      	uxth	r3, r3
 800c366:	3305      	adds	r3, #5
 800c368:	b29b      	uxth	r3, r3
 800c36a:	031b      	lsls	r3, r3, #12
 800c36c:	b29a      	uxth	r2, r3
 800c36e:	79fb      	ldrb	r3, [r7, #7]
 800c370:	b29b      	uxth	r3, r3
 800c372:	4313      	orrs	r3, r2
 800c374:	b29a      	uxth	r2, r3
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	68dc      	ldr	r4, [r3, #12]
 800c37a:	4610      	mov	r0, r2
 800c37c:	f7f9 ffbc 	bl	80062f8 <lwip_htons>
 800c380:	4603      	mov	r3, r0
 800c382:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	68db      	ldr	r3, [r3, #12]
 800c388:	2200      	movs	r2, #0
 800c38a:	749a      	strb	r2, [r3, #18]
 800c38c:	2200      	movs	r2, #0
 800c38e:	74da      	strb	r2, [r3, #19]
  return seg;
 800c390:	693b      	ldr	r3, [r7, #16]
}
 800c392:	4618      	mov	r0, r3
 800c394:	371c      	adds	r7, #28
 800c396:	46bd      	mov	sp, r7
 800c398:	bd90      	pop	{r4, r7, pc}
 800c39a:	bf00      	nop
 800c39c:	0801376c 	.word	0x0801376c
 800c3a0:	080137a0 	.word	0x080137a0
 800c3a4:	080137c0 	.word	0x080137c0
 800c3a8:	080137e8 	.word	0x080137e8
 800c3ac:	0801380c 	.word	0x0801380c

0800c3b0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b086      	sub	sp, #24
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	607b      	str	r3, [r7, #4]
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	73fb      	strb	r3, [r7, #15]
 800c3bc:	460b      	mov	r3, r1
 800c3be:	81bb      	strh	r3, [r7, #12]
 800c3c0:	4613      	mov	r3, r2
 800c3c2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800c3c4:	89bb      	ldrh	r3, [r7, #12]
 800c3c6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d105      	bne.n	800c3da <tcp_pbuf_prealloc+0x2a>
 800c3ce:	4b30      	ldr	r3, [pc, #192]	; (800c490 <tcp_pbuf_prealloc+0xe0>)
 800c3d0:	22e8      	movs	r2, #232	; 0xe8
 800c3d2:	4930      	ldr	r1, [pc, #192]	; (800c494 <tcp_pbuf_prealloc+0xe4>)
 800c3d4:	4830      	ldr	r0, [pc, #192]	; (800c498 <tcp_pbuf_prealloc+0xe8>)
 800c3d6:	f004 fc53 	bl	8010c80 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c3da:	6a3b      	ldr	r3, [r7, #32]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d105      	bne.n	800c3ec <tcp_pbuf_prealloc+0x3c>
 800c3e0:	4b2b      	ldr	r3, [pc, #172]	; (800c490 <tcp_pbuf_prealloc+0xe0>)
 800c3e2:	22e9      	movs	r2, #233	; 0xe9
 800c3e4:	492d      	ldr	r1, [pc, #180]	; (800c49c <tcp_pbuf_prealloc+0xec>)
 800c3e6:	482c      	ldr	r0, [pc, #176]	; (800c498 <tcp_pbuf_prealloc+0xe8>)
 800c3e8:	f004 fc4a 	bl	8010c80 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800c3ec:	89ba      	ldrh	r2, [r7, #12]
 800c3ee:	897b      	ldrh	r3, [r7, #10]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d221      	bcs.n	800c438 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c3f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c3f8:	f003 0302 	and.w	r3, r3, #2
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d111      	bne.n	800c424 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800c400:	6a3b      	ldr	r3, [r7, #32]
 800c402:	8b5b      	ldrh	r3, [r3, #26]
 800c404:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d115      	bne.n	800c438 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800c40c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c410:	2b00      	cmp	r3, #0
 800c412:	d007      	beq.n	800c424 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800c414:	6a3b      	ldr	r3, [r7, #32]
 800c416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d103      	bne.n	800c424 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800c41c:	6a3b      	ldr	r3, [r7, #32]
 800c41e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800c420:	2b00      	cmp	r3, #0
 800c422:	d009      	beq.n	800c438 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c424:	89bb      	ldrh	r3, [r7, #12]
 800c426:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800c42a:	f023 0203 	bic.w	r2, r3, #3
 800c42e:	897b      	ldrh	r3, [r7, #10]
 800c430:	4293      	cmp	r3, r2
 800c432:	bf28      	it	cs
 800c434:	4613      	movcs	r3, r2
 800c436:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c438:	8af9      	ldrh	r1, [r7, #22]
 800c43a:	7bfb      	ldrb	r3, [r7, #15]
 800c43c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c440:	4618      	mov	r0, r3
 800c442:	f7fb f83d 	bl	80074c0 <pbuf_alloc>
 800c446:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d101      	bne.n	800c452 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800c44e:	2300      	movs	r3, #0
 800c450:	e019      	b.n	800c486 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d006      	beq.n	800c468 <tcp_pbuf_prealloc+0xb8>
 800c45a:	4b0d      	ldr	r3, [pc, #52]	; (800c490 <tcp_pbuf_prealloc+0xe0>)
 800c45c:	f240 120b 	movw	r2, #267	; 0x10b
 800c460:	490f      	ldr	r1, [pc, #60]	; (800c4a0 <tcp_pbuf_prealloc+0xf0>)
 800c462:	480d      	ldr	r0, [pc, #52]	; (800c498 <tcp_pbuf_prealloc+0xe8>)
 800c464:	f004 fc0c 	bl	8010c80 <iprintf>
  *oversize = p->len - length;
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	895a      	ldrh	r2, [r3, #10]
 800c46c:	89bb      	ldrh	r3, [r7, #12]
 800c46e:	1ad3      	subs	r3, r2, r3
 800c470:	b29a      	uxth	r2, r3
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	89ba      	ldrh	r2, [r7, #12]
 800c47a:	811a      	strh	r2, [r3, #8]
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	891a      	ldrh	r2, [r3, #8]
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	815a      	strh	r2, [r3, #10]
  return p;
 800c484:	693b      	ldr	r3, [r7, #16]
}
 800c486:	4618      	mov	r0, r3
 800c488:	3718      	adds	r7, #24
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	0801376c 	.word	0x0801376c
 800c494:	08013824 	.word	0x08013824
 800c498:	080137c0 	.word	0x080137c0
 800c49c:	08013848 	.word	0x08013848
 800c4a0:	08013868 	.word	0x08013868

0800c4a4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d106      	bne.n	800c4c4 <tcp_write_checks+0x20>
 800c4b6:	4b33      	ldr	r3, [pc, #204]	; (800c584 <tcp_write_checks+0xe0>)
 800c4b8:	f240 1233 	movw	r2, #307	; 0x133
 800c4bc:	4932      	ldr	r1, [pc, #200]	; (800c588 <tcp_write_checks+0xe4>)
 800c4be:	4833      	ldr	r0, [pc, #204]	; (800c58c <tcp_write_checks+0xe8>)
 800c4c0:	f004 fbde 	bl	8010c80 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	7d1b      	ldrb	r3, [r3, #20]
 800c4c8:	2b04      	cmp	r3, #4
 800c4ca:	d00e      	beq.n	800c4ea <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800c4d0:	2b07      	cmp	r3, #7
 800c4d2:	d00a      	beq.n	800c4ea <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800c4d8:	2b02      	cmp	r3, #2
 800c4da:	d006      	beq.n	800c4ea <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800c4e0:	2b03      	cmp	r3, #3
 800c4e2:	d002      	beq.n	800c4ea <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800c4e4:	f06f 030a 	mvn.w	r3, #10
 800c4e8:	e048      	b.n	800c57c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800c4ea:	887b      	ldrh	r3, [r7, #2]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d101      	bne.n	800c4f4 <tcp_write_checks+0x50>
    return ERR_OK;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	e043      	b.n	800c57c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c4fa:	887a      	ldrh	r2, [r7, #2]
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d909      	bls.n	800c514 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	8b5b      	ldrh	r3, [r3, #26]
 800c504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c508:	b29a      	uxth	r2, r3
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c50e:	f04f 33ff 	mov.w	r3, #4294967295
 800c512:	e033      	b.n	800c57c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c51a:	2b08      	cmp	r3, #8
 800c51c:	d909      	bls.n	800c532 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	8b5b      	ldrh	r3, [r3, #26]
 800c522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c526:	b29a      	uxth	r2, r3
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c52c:	f04f 33ff 	mov.w	r3, #4294967295
 800c530:	e024      	b.n	800c57c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d00f      	beq.n	800c55c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c540:	2b00      	cmp	r3, #0
 800c542:	d11a      	bne.n	800c57a <tcp_write_checks+0xd6>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d116      	bne.n	800c57a <tcp_write_checks+0xd6>
 800c54c:	4b0d      	ldr	r3, [pc, #52]	; (800c584 <tcp_write_checks+0xe0>)
 800c54e:	f240 1255 	movw	r2, #341	; 0x155
 800c552:	490f      	ldr	r1, [pc, #60]	; (800c590 <tcp_write_checks+0xec>)
 800c554:	480d      	ldr	r0, [pc, #52]	; (800c58c <tcp_write_checks+0xe8>)
 800c556:	f004 fb93 	bl	8010c80 <iprintf>
 800c55a:	e00e      	b.n	800c57a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c560:	2b00      	cmp	r3, #0
 800c562:	d103      	bne.n	800c56c <tcp_write_checks+0xc8>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d006      	beq.n	800c57a <tcp_write_checks+0xd6>
 800c56c:	4b05      	ldr	r3, [pc, #20]	; (800c584 <tcp_write_checks+0xe0>)
 800c56e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800c572:	4908      	ldr	r1, [pc, #32]	; (800c594 <tcp_write_checks+0xf0>)
 800c574:	4805      	ldr	r0, [pc, #20]	; (800c58c <tcp_write_checks+0xe8>)
 800c576:	f004 fb83 	bl	8010c80 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800c57a:	2300      	movs	r3, #0
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3708      	adds	r7, #8
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	0801376c 	.word	0x0801376c
 800c588:	0801387c 	.word	0x0801387c
 800c58c:	080137c0 	.word	0x080137c0
 800c590:	0801389c 	.word	0x0801389c
 800c594:	080138d8 	.word	0x080138d8

0800c598 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800c598:	b590      	push	{r4, r7, lr}
 800c59a:	b09b      	sub	sp, #108	; 0x6c
 800c59c:	af04      	add	r7, sp, #16
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	4611      	mov	r1, r2
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	460b      	mov	r3, r1
 800c5a8:	80fb      	strh	r3, [r7, #6]
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	653b      	str	r3, [r7, #80]	; 0x50
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800c5be:	2300      	movs	r3, #0
 800c5c0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d109      	bne.n	800c5f4 <tcp_write+0x5c>
 800c5e0:	4ba4      	ldr	r3, [pc, #656]	; (800c874 <tcp_write+0x2dc>)
 800c5e2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800c5e6:	49a4      	ldr	r1, [pc, #656]	; (800c878 <tcp_write+0x2e0>)
 800c5e8:	48a4      	ldr	r0, [pc, #656]	; (800c87c <tcp_write+0x2e4>)
 800c5ea:	f004 fb49 	bl	8010c80 <iprintf>
 800c5ee:	f06f 030f 	mvn.w	r3, #15
 800c5f2:	e32a      	b.n	800cc4a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c5fa:	085b      	lsrs	r3, r3, #1
 800c5fc:	b29a      	uxth	r2, r3
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c602:	4293      	cmp	r3, r2
 800c604:	bf28      	it	cs
 800c606:	4613      	movcs	r3, r2
 800c608:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800c60a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d102      	bne.n	800c616 <tcp_write+0x7e>
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c614:	e000      	b.n	800c618 <tcp_write+0x80>
 800c616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c618:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d109      	bne.n	800c634 <tcp_write+0x9c>
 800c620:	4b94      	ldr	r3, [pc, #592]	; (800c874 <tcp_write+0x2dc>)
 800c622:	f240 12ad 	movw	r2, #429	; 0x1ad
 800c626:	4996      	ldr	r1, [pc, #600]	; (800c880 <tcp_write+0x2e8>)
 800c628:	4894      	ldr	r0, [pc, #592]	; (800c87c <tcp_write+0x2e4>)
 800c62a:	f004 fb29 	bl	8010c80 <iprintf>
 800c62e:	f06f 030f 	mvn.w	r3, #15
 800c632:	e30a      	b.n	800cc4a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800c634:	88fb      	ldrh	r3, [r7, #6]
 800c636:	4619      	mov	r1, r3
 800c638:	68f8      	ldr	r0, [r7, #12]
 800c63a:	f7ff ff33 	bl	800c4a4 <tcp_write_checks>
 800c63e:	4603      	mov	r3, r0
 800c640:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800c644:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d002      	beq.n	800c652 <tcp_write+0xba>
    return err;
 800c64c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c650:	e2fb      	b.n	800cc4a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c658:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c65c:	2300      	movs	r3, #0
 800c65e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c666:	2b00      	cmp	r3, #0
 800c668:	f000 80f6 	beq.w	800c858 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c670:	653b      	str	r3, [r7, #80]	; 0x50
 800c672:	e002      	b.n	800c67a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800c674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c67a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d1f8      	bne.n	800c674 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c684:	7a9b      	ldrb	r3, [r3, #10]
 800c686:	009b      	lsls	r3, r3, #2
 800c688:	b29b      	uxth	r3, r3
 800c68a:	f003 0304 	and.w	r3, r3, #4
 800c68e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c690:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c694:	891b      	ldrh	r3, [r3, #8]
 800c696:	4619      	mov	r1, r3
 800c698:	8c3b      	ldrh	r3, [r7, #32]
 800c69a:	440b      	add	r3, r1
 800c69c:	429a      	cmp	r2, r3
 800c69e:	da06      	bge.n	800c6ae <tcp_write+0x116>
 800c6a0:	4b74      	ldr	r3, [pc, #464]	; (800c874 <tcp_write+0x2dc>)
 800c6a2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c6a6:	4977      	ldr	r1, [pc, #476]	; (800c884 <tcp_write+0x2ec>)
 800c6a8:	4874      	ldr	r0, [pc, #464]	; (800c87c <tcp_write+0x2e4>)
 800c6aa:	f004 fae9 	bl	8010c80 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c6ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6b0:	891a      	ldrh	r2, [r3, #8]
 800c6b2:	8c3b      	ldrh	r3, [r7, #32]
 800c6b4:	4413      	add	r3, r2
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c6ba:	1ad3      	subs	r3, r2, r3
 800c6bc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c6c4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800c6c6:	8a7b      	ldrh	r3, [r7, #18]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d026      	beq.n	800c71a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c6cc:	8a7b      	ldrh	r3, [r7, #18]
 800c6ce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d206      	bcs.n	800c6e2 <tcp_write+0x14a>
 800c6d4:	4b67      	ldr	r3, [pc, #412]	; (800c874 <tcp_write+0x2dc>)
 800c6d6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800c6da:	496b      	ldr	r1, [pc, #428]	; (800c888 <tcp_write+0x2f0>)
 800c6dc:	4867      	ldr	r0, [pc, #412]	; (800c87c <tcp_write+0x2e4>)
 800c6de:	f004 facf 	bl	8010c80 <iprintf>
      seg = last_unsent;
 800c6e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6e4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c6e6:	8a7b      	ldrh	r3, [r7, #18]
 800c6e8:	88fa      	ldrh	r2, [r7, #6]
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	bf28      	it	cs
 800c6ee:	4613      	movcs	r3, r2
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	bf28      	it	cs
 800c6f8:	4613      	movcs	r3, r2
 800c6fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800c6fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c700:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c702:	4413      	add	r3, r2
 800c704:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800c708:	8a7a      	ldrh	r2, [r7, #18]
 800c70a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c70c:	1ad3      	subs	r3, r2, r3
 800c70e:	b29b      	uxth	r3, r3
 800c710:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800c712:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c714:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c716:	1ad3      	subs	r3, r2, r3
 800c718:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c71a:	8a7b      	ldrh	r3, [r7, #18]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d00b      	beq.n	800c738 <tcp_write+0x1a0>
 800c720:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c724:	88fb      	ldrh	r3, [r7, #6]
 800c726:	429a      	cmp	r2, r3
 800c728:	d006      	beq.n	800c738 <tcp_write+0x1a0>
 800c72a:	4b52      	ldr	r3, [pc, #328]	; (800c874 <tcp_write+0x2dc>)
 800c72c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c730:	4956      	ldr	r1, [pc, #344]	; (800c88c <tcp_write+0x2f4>)
 800c732:	4852      	ldr	r0, [pc, #328]	; (800c87c <tcp_write+0x2e4>)
 800c734:	f004 faa4 	bl	8010c80 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c738:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c73c:	88fb      	ldrh	r3, [r7, #6]
 800c73e:	429a      	cmp	r2, r3
 800c740:	f080 8167 	bcs.w	800ca12 <tcp_write+0x47a>
 800c744:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c746:	2b00      	cmp	r3, #0
 800c748:	f000 8163 	beq.w	800ca12 <tcp_write+0x47a>
 800c74c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c74e:	891b      	ldrh	r3, [r3, #8]
 800c750:	2b00      	cmp	r3, #0
 800c752:	f000 815e 	beq.w	800ca12 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c756:	88fa      	ldrh	r2, [r7, #6]
 800c758:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c75c:	1ad2      	subs	r2, r2, r3
 800c75e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c760:	4293      	cmp	r3, r2
 800c762:	bfa8      	it	ge
 800c764:	4613      	movge	r3, r2
 800c766:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800c768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c76a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c76c:	797b      	ldrb	r3, [r7, #5]
 800c76e:	f003 0301 	and.w	r3, r3, #1
 800c772:	2b00      	cmp	r3, #0
 800c774:	d027      	beq.n	800c7c6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800c776:	f107 0012 	add.w	r0, r7, #18
 800c77a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c77c:	8bf9      	ldrh	r1, [r7, #30]
 800c77e:	2301      	movs	r3, #1
 800c780:	9302      	str	r3, [sp, #8]
 800c782:	797b      	ldrb	r3, [r7, #5]
 800c784:	9301      	str	r3, [sp, #4]
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	9300      	str	r3, [sp, #0]
 800c78a:	4603      	mov	r3, r0
 800c78c:	2000      	movs	r0, #0
 800c78e:	f7ff fe0f 	bl	800c3b0 <tcp_pbuf_prealloc>
 800c792:	6578      	str	r0, [r7, #84]	; 0x54
 800c794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c796:	2b00      	cmp	r3, #0
 800c798:	f000 8225 	beq.w	800cbe6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800c79c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c79e:	6858      	ldr	r0, [r3, #4]
 800c7a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c7a4:	68ba      	ldr	r2, [r7, #8]
 800c7a6:	4413      	add	r3, r2
 800c7a8:	8bfa      	ldrh	r2, [r7, #30]
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	f004 fa52 	bl	8010c54 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800c7b0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c7b2:	f7fb f9f1 	bl	8007b98 <pbuf_clen>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c7be:	4413      	add	r3, r2
 800c7c0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800c7c4:	e041      	b.n	800c84a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800c7c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	637b      	str	r3, [r7, #52]	; 0x34
 800c7cc:	e002      	b.n	800c7d4 <tcp_write+0x23c>
 800c7ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	637b      	str	r3, [r7, #52]	; 0x34
 800c7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d1f8      	bne.n	800c7ce <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7de:	7b1b      	ldrb	r3, [r3, #12]
 800c7e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d115      	bne.n	800c814 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c7e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7ee:	8952      	ldrh	r2, [r2, #10]
 800c7f0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c7f2:	68ba      	ldr	r2, [r7, #8]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d10d      	bne.n	800c814 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c7f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d006      	beq.n	800c80e <tcp_write+0x276>
 800c800:	4b1c      	ldr	r3, [pc, #112]	; (800c874 <tcp_write+0x2dc>)
 800c802:	f240 2231 	movw	r2, #561	; 0x231
 800c806:	4922      	ldr	r1, [pc, #136]	; (800c890 <tcp_write+0x2f8>)
 800c808:	481c      	ldr	r0, [pc, #112]	; (800c87c <tcp_write+0x2e4>)
 800c80a:	f004 fa39 	bl	8010c80 <iprintf>
          extendlen = seglen;
 800c80e:	8bfb      	ldrh	r3, [r7, #30]
 800c810:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800c812:	e01a      	b.n	800c84a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800c814:	8bfb      	ldrh	r3, [r7, #30]
 800c816:	2201      	movs	r2, #1
 800c818:	4619      	mov	r1, r3
 800c81a:	2000      	movs	r0, #0
 800c81c:	f7fa fe50 	bl	80074c0 <pbuf_alloc>
 800c820:	6578      	str	r0, [r7, #84]	; 0x54
 800c822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c824:	2b00      	cmp	r3, #0
 800c826:	f000 81e0 	beq.w	800cbea <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800c82a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c82e:	68ba      	ldr	r2, [r7, #8]
 800c830:	441a      	add	r2, r3
 800c832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c834:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800c836:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c838:	f7fb f9ae 	bl	8007b98 <pbuf_clen>
 800c83c:	4603      	mov	r3, r0
 800c83e:	461a      	mov	r2, r3
 800c840:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c844:	4413      	add	r3, r2
 800c846:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800c84a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c84e:	8bfb      	ldrh	r3, [r7, #30]
 800c850:	4413      	add	r3, r2
 800c852:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c856:	e0dc      	b.n	800ca12 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c85e:	2b00      	cmp	r3, #0
 800c860:	f000 80d7 	beq.w	800ca12 <tcp_write+0x47a>
 800c864:	4b03      	ldr	r3, [pc, #12]	; (800c874 <tcp_write+0x2dc>)
 800c866:	f240 224a 	movw	r2, #586	; 0x24a
 800c86a:	490a      	ldr	r1, [pc, #40]	; (800c894 <tcp_write+0x2fc>)
 800c86c:	4803      	ldr	r0, [pc, #12]	; (800c87c <tcp_write+0x2e4>)
 800c86e:	f004 fa07 	bl	8010c80 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800c872:	e0ce      	b.n	800ca12 <tcp_write+0x47a>
 800c874:	0801376c 	.word	0x0801376c
 800c878:	0801390c 	.word	0x0801390c
 800c87c:	080137c0 	.word	0x080137c0
 800c880:	08013924 	.word	0x08013924
 800c884:	08013958 	.word	0x08013958
 800c888:	08013970 	.word	0x08013970
 800c88c:	08013990 	.word	0x08013990
 800c890:	080139b0 	.word	0x080139b0
 800c894:	080139dc 	.word	0x080139dc
    struct pbuf *p;
    u16_t left = len - pos;
 800c898:	88fa      	ldrh	r2, [r7, #6]
 800c89a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c89e:	1ad3      	subs	r3, r2, r3
 800c8a0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800c8a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c8a6:	b29b      	uxth	r3, r3
 800c8a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c8aa:	1ad3      	subs	r3, r2, r3
 800c8ac:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800c8ae:	8b7a      	ldrh	r2, [r7, #26]
 800c8b0:	8bbb      	ldrh	r3, [r7, #28]
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	bf28      	it	cs
 800c8b6:	4613      	movcs	r3, r2
 800c8b8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c8ba:	797b      	ldrb	r3, [r7, #5]
 800c8bc:	f003 0301 	and.w	r3, r3, #1
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d036      	beq.n	800c932 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800c8c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c8c8:	b29a      	uxth	r2, r3
 800c8ca:	8b3b      	ldrh	r3, [r7, #24]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	b299      	uxth	r1, r3
 800c8d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	bf0c      	ite	eq
 800c8d6:	2301      	moveq	r3, #1
 800c8d8:	2300      	movne	r3, #0
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	f107 0012 	add.w	r0, r7, #18
 800c8e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c8e2:	9302      	str	r3, [sp, #8]
 800c8e4:	797b      	ldrb	r3, [r7, #5]
 800c8e6:	9301      	str	r3, [sp, #4]
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	9300      	str	r3, [sp, #0]
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	2036      	movs	r0, #54	; 0x36
 800c8f0:	f7ff fd5e 	bl	800c3b0 <tcp_pbuf_prealloc>
 800c8f4:	6338      	str	r0, [r7, #48]	; 0x30
 800c8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	f000 8178 	beq.w	800cbee <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800c8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c900:	895b      	ldrh	r3, [r3, #10]
 800c902:	8b3a      	ldrh	r2, [r7, #24]
 800c904:	429a      	cmp	r2, r3
 800c906:	d906      	bls.n	800c916 <tcp_write+0x37e>
 800c908:	4b8c      	ldr	r3, [pc, #560]	; (800cb3c <tcp_write+0x5a4>)
 800c90a:	f240 2266 	movw	r2, #614	; 0x266
 800c90e:	498c      	ldr	r1, [pc, #560]	; (800cb40 <tcp_write+0x5a8>)
 800c910:	488c      	ldr	r0, [pc, #560]	; (800cb44 <tcp_write+0x5ac>)
 800c912:	f004 f9b5 	bl	8010c80 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800c916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c918:	685a      	ldr	r2, [r3, #4]
 800c91a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c91e:	18d0      	adds	r0, r2, r3
 800c920:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c924:	68ba      	ldr	r2, [r7, #8]
 800c926:	4413      	add	r3, r2
 800c928:	8b3a      	ldrh	r2, [r7, #24]
 800c92a:	4619      	mov	r1, r3
 800c92c:	f004 f992 	bl	8010c54 <memcpy>
 800c930:	e02f      	b.n	800c992 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800c932:	8a7b      	ldrh	r3, [r7, #18]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d006      	beq.n	800c946 <tcp_write+0x3ae>
 800c938:	4b80      	ldr	r3, [pc, #512]	; (800cb3c <tcp_write+0x5a4>)
 800c93a:	f240 2271 	movw	r2, #625	; 0x271
 800c93e:	4982      	ldr	r1, [pc, #520]	; (800cb48 <tcp_write+0x5b0>)
 800c940:	4880      	ldr	r0, [pc, #512]	; (800cb44 <tcp_write+0x5ac>)
 800c942:	f004 f99d 	bl	8010c80 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800c946:	8b3b      	ldrh	r3, [r7, #24]
 800c948:	2201      	movs	r2, #1
 800c94a:	4619      	mov	r1, r3
 800c94c:	2036      	movs	r0, #54	; 0x36
 800c94e:	f7fa fdb7 	bl	80074c0 <pbuf_alloc>
 800c952:	6178      	str	r0, [r7, #20]
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	2b00      	cmp	r3, #0
 800c958:	f000 814b 	beq.w	800cbf2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800c95c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c960:	68ba      	ldr	r2, [r7, #8]
 800c962:	441a      	add	r2, r3
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c968:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c972:	4619      	mov	r1, r3
 800c974:	2036      	movs	r0, #54	; 0x36
 800c976:	f7fa fda3 	bl	80074c0 <pbuf_alloc>
 800c97a:	6338      	str	r0, [r7, #48]	; 0x30
 800c97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d103      	bne.n	800c98a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800c982:	6978      	ldr	r0, [r7, #20]
 800c984:	f7fb f880 	bl	8007a88 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800c988:	e136      	b.n	800cbf8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800c98a:	6979      	ldr	r1, [r7, #20]
 800c98c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c98e:	f7fb f93d 	bl	8007c0c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800c992:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c994:	f7fb f900 	bl	8007b98 <pbuf_clen>
 800c998:	4603      	mov	r3, r0
 800c99a:	461a      	mov	r2, r3
 800c99c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c9a0:	4413      	add	r3, r2
 800c9a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c9a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c9aa:	2b09      	cmp	r3, #9
 800c9ac:	d903      	bls.n	800c9b6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800c9ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9b0:	f7fb f86a 	bl	8007a88 <pbuf_free>
      goto memerr;
 800c9b4:	e120      	b.n	800cbf8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c9ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c9be:	441a      	add	r2, r3
 800c9c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9c4:	9300      	str	r3, [sp, #0]
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c9cc:	68f8      	ldr	r0, [r7, #12]
 800c9ce:	f7ff fc51 	bl	800c274 <tcp_create_segment>
 800c9d2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c9d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	f000 810d 	beq.w	800cbf6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800c9dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d102      	bne.n	800c9e8 <tcp_write+0x450>
      queue = seg;
 800c9e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9e4:	647b      	str	r3, [r7, #68]	; 0x44
 800c9e6:	e00c      	b.n	800ca02 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800c9e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d106      	bne.n	800c9fc <tcp_write+0x464>
 800c9ee:	4b53      	ldr	r3, [pc, #332]	; (800cb3c <tcp_write+0x5a4>)
 800c9f0:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c9f4:	4955      	ldr	r1, [pc, #340]	; (800cb4c <tcp_write+0x5b4>)
 800c9f6:	4853      	ldr	r0, [pc, #332]	; (800cb44 <tcp_write+0x5ac>)
 800c9f8:	f004 f942 	bl	8010c80 <iprintf>
      prev_seg->next = seg;
 800c9fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca00:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800ca02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca04:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800ca06:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ca0a:	8b3b      	ldrh	r3, [r7, #24]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800ca12:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ca16:	88fb      	ldrh	r3, [r7, #6]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	f4ff af3d 	bcc.w	800c898 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800ca1e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d02c      	beq.n	800ca7e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800ca24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca2a:	e01e      	b.n	800ca6a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800ca2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2e:	891a      	ldrh	r2, [r3, #8]
 800ca30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ca32:	4413      	add	r3, r2
 800ca34:	b29a      	uxth	r2, r3
 800ca36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca38:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800ca3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d110      	bne.n	800ca64 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800ca42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca44:	685b      	ldr	r3, [r3, #4]
 800ca46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca48:	8952      	ldrh	r2, [r2, #10]
 800ca4a:	4413      	add	r3, r2
 800ca4c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ca4e:	68b9      	ldr	r1, [r7, #8]
 800ca50:	4618      	mov	r0, r3
 800ca52:	f004 f8ff 	bl	8010c54 <memcpy>
        p->len += oversize_used;
 800ca56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca58:	895a      	ldrh	r2, [r3, #10]
 800ca5a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ca5c:	4413      	add	r3, r2
 800ca5e:	b29a      	uxth	r2, r3
 800ca60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca62:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800ca64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d1dd      	bne.n	800ca2c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800ca70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca72:	891a      	ldrh	r2, [r3, #8]
 800ca74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ca76:	4413      	add	r3, r2
 800ca78:	b29a      	uxth	r2, r3
 800ca7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca7c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800ca7e:	8a7a      	ldrh	r2, [r7, #18]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800ca86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d018      	beq.n	800cabe <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800ca8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d106      	bne.n	800caa0 <tcp_write+0x508>
 800ca92:	4b2a      	ldr	r3, [pc, #168]	; (800cb3c <tcp_write+0x5a4>)
 800ca94:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800ca98:	492d      	ldr	r1, [pc, #180]	; (800cb50 <tcp_write+0x5b8>)
 800ca9a:	482a      	ldr	r0, [pc, #168]	; (800cb44 <tcp_write+0x5ac>)
 800ca9c:	f004 f8f0 	bl	8010c80 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800caa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7fb f8b0 	bl	8007c0c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800caac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caae:	891a      	ldrh	r2, [r3, #8]
 800cab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cab2:	891b      	ldrh	r3, [r3, #8]
 800cab4:	4413      	add	r3, r2
 800cab6:	b29a      	uxth	r2, r3
 800cab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caba:	811a      	strh	r2, [r3, #8]
 800cabc:	e037      	b.n	800cb2e <tcp_write+0x596>
  } else if (extendlen > 0) {
 800cabe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d034      	beq.n	800cb2e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800cac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d003      	beq.n	800cad2 <tcp_write+0x53a>
 800caca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d106      	bne.n	800cae0 <tcp_write+0x548>
 800cad2:	4b1a      	ldr	r3, [pc, #104]	; (800cb3c <tcp_write+0x5a4>)
 800cad4:	f240 22e6 	movw	r2, #742	; 0x2e6
 800cad8:	491e      	ldr	r1, [pc, #120]	; (800cb54 <tcp_write+0x5bc>)
 800cada:	481a      	ldr	r0, [pc, #104]	; (800cb44 <tcp_write+0x5ac>)
 800cadc:	f004 f8d0 	bl	8010c80 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	62bb      	str	r3, [r7, #40]	; 0x28
 800cae6:	e009      	b.n	800cafc <tcp_write+0x564>
      p->tot_len += extendlen;
 800cae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caea:	891a      	ldrh	r2, [r3, #8]
 800caec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800caee:	4413      	add	r3, r2
 800caf0:	b29a      	uxth	r2, r3
 800caf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800caf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	62bb      	str	r3, [r7, #40]	; 0x28
 800cafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d1f1      	bne.n	800cae8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800cb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb06:	891a      	ldrh	r2, [r3, #8]
 800cb08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cb0a:	4413      	add	r3, r2
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb10:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800cb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb14:	895a      	ldrh	r2, [r3, #10]
 800cb16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cb18:	4413      	add	r3, r2
 800cb1a:	b29a      	uxth	r2, r3
 800cb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800cb20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb22:	891a      	ldrh	r2, [r3, #8]
 800cb24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cb26:	4413      	add	r3, r2
 800cb28:	b29a      	uxth	r2, r3
 800cb2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb2c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800cb2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d111      	bne.n	800cb58 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb38:	66da      	str	r2, [r3, #108]	; 0x6c
 800cb3a:	e010      	b.n	800cb5e <tcp_write+0x5c6>
 800cb3c:	0801376c 	.word	0x0801376c
 800cb40:	08013a0c 	.word	0x08013a0c
 800cb44:	080137c0 	.word	0x080137c0
 800cb48:	08013a4c 	.word	0x08013a4c
 800cb4c:	08013a5c 	.word	0x08013a5c
 800cb50:	08013a70 	.word	0x08013a70
 800cb54:	08013aa8 	.word	0x08013aa8
  } else {
    last_unsent->next = queue;
 800cb58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb5c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cb62:	88fb      	ldrh	r3, [r7, #6]
 800cb64:	441a      	add	r2, r3
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800cb70:	88fb      	ldrh	r3, [r7, #6]
 800cb72:	1ad3      	subs	r3, r2, r3
 800cb74:	b29a      	uxth	r2, r3
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800cb82:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d00e      	beq.n	800cbae <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10a      	bne.n	800cbae <tcp_write+0x616>
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d106      	bne.n	800cbae <tcp_write+0x616>
 800cba0:	4b2c      	ldr	r3, [pc, #176]	; (800cc54 <tcp_write+0x6bc>)
 800cba2:	f240 3212 	movw	r2, #786	; 0x312
 800cba6:	492c      	ldr	r1, [pc, #176]	; (800cc58 <tcp_write+0x6c0>)
 800cba8:	482c      	ldr	r0, [pc, #176]	; (800cc5c <tcp_write+0x6c4>)
 800cbaa:	f004 f869 	bl	8010c80 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800cbae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d016      	beq.n	800cbe2 <tcp_write+0x64a>
 800cbb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbb6:	68db      	ldr	r3, [r3, #12]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d012      	beq.n	800cbe2 <tcp_write+0x64a>
 800cbbc:	797b      	ldrb	r3, [r7, #5]
 800cbbe:	f003 0302 	and.w	r3, r3, #2
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d10d      	bne.n	800cbe2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800cbc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbc8:	68db      	ldr	r3, [r3, #12]
 800cbca:	899b      	ldrh	r3, [r3, #12]
 800cbcc:	b29c      	uxth	r4, r3
 800cbce:	2008      	movs	r0, #8
 800cbd0:	f7f9 fb92 	bl	80062f8 <lwip_htons>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	4322      	orrs	r2, r4
 800cbde:	b292      	uxth	r2, r2
 800cbe0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	e031      	b.n	800cc4a <tcp_write+0x6b2>
          goto memerr;
 800cbe6:	bf00      	nop
 800cbe8:	e006      	b.n	800cbf8 <tcp_write+0x660>
            goto memerr;
 800cbea:	bf00      	nop
 800cbec:	e004      	b.n	800cbf8 <tcp_write+0x660>
        goto memerr;
 800cbee:	bf00      	nop
 800cbf0:	e002      	b.n	800cbf8 <tcp_write+0x660>
        goto memerr;
 800cbf2:	bf00      	nop
 800cbf4:	e000      	b.n	800cbf8 <tcp_write+0x660>
      goto memerr;
 800cbf6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	8b5b      	ldrh	r3, [r3, #26]
 800cbfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc00:	b29a      	uxth	r2, r3
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800cc06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d002      	beq.n	800cc12 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800cc0c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cc0e:	f7fa ff3b 	bl	8007a88 <pbuf_free>
  }
  if (queue != NULL) {
 800cc12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d002      	beq.n	800cc1e <tcp_write+0x686>
    tcp_segs_free(queue);
 800cc18:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cc1a:	f7fc fb4d 	bl	80092b8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d00e      	beq.n	800cc46 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d10a      	bne.n	800cc46 <tcp_write+0x6ae>
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d106      	bne.n	800cc46 <tcp_write+0x6ae>
 800cc38:	4b06      	ldr	r3, [pc, #24]	; (800cc54 <tcp_write+0x6bc>)
 800cc3a:	f240 3227 	movw	r2, #807	; 0x327
 800cc3e:	4906      	ldr	r1, [pc, #24]	; (800cc58 <tcp_write+0x6c0>)
 800cc40:	4806      	ldr	r0, [pc, #24]	; (800cc5c <tcp_write+0x6c4>)
 800cc42:	f004 f81d 	bl	8010c80 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800cc46:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	375c      	adds	r7, #92	; 0x5c
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd90      	pop	{r4, r7, pc}
 800cc52:	bf00      	nop
 800cc54:	0801376c 	.word	0x0801376c
 800cc58:	08013ae0 	.word	0x08013ae0
 800cc5c:	080137c0 	.word	0x080137c0

0800cc60 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800cc60:	b590      	push	{r4, r7, lr}
 800cc62:	b08b      	sub	sp, #44	; 0x2c
 800cc64:	af02      	add	r7, sp, #8
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	460b      	mov	r3, r1
 800cc6a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	61fb      	str	r3, [r7, #28]
 800cc70:	2300      	movs	r3, #0
 800cc72:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800cc74:	2300      	movs	r3, #0
 800cc76:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d106      	bne.n	800cc8c <tcp_split_unsent_seg+0x2c>
 800cc7e:	4b95      	ldr	r3, [pc, #596]	; (800ced4 <tcp_split_unsent_seg+0x274>)
 800cc80:	f240 324b 	movw	r2, #843	; 0x34b
 800cc84:	4994      	ldr	r1, [pc, #592]	; (800ced8 <tcp_split_unsent_seg+0x278>)
 800cc86:	4895      	ldr	r0, [pc, #596]	; (800cedc <tcp_split_unsent_seg+0x27c>)
 800cc88:	f003 fffa 	bl	8010c80 <iprintf>

  useg = pcb->unsent;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc90:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d102      	bne.n	800cc9e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800cc98:	f04f 33ff 	mov.w	r3, #4294967295
 800cc9c:	e116      	b.n	800cecc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800cc9e:	887b      	ldrh	r3, [r7, #2]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d109      	bne.n	800ccb8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800cca4:	4b8b      	ldr	r3, [pc, #556]	; (800ced4 <tcp_split_unsent_seg+0x274>)
 800cca6:	f240 3253 	movw	r2, #851	; 0x353
 800ccaa:	498d      	ldr	r1, [pc, #564]	; (800cee0 <tcp_split_unsent_seg+0x280>)
 800ccac:	488b      	ldr	r0, [pc, #556]	; (800cedc <tcp_split_unsent_seg+0x27c>)
 800ccae:	f003 ffe7 	bl	8010c80 <iprintf>
    return ERR_VAL;
 800ccb2:	f06f 0305 	mvn.w	r3, #5
 800ccb6:	e109      	b.n	800cecc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	891b      	ldrh	r3, [r3, #8]
 800ccbc:	887a      	ldrh	r2, [r7, #2]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d301      	bcc.n	800ccc6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	e102      	b.n	800cecc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ccca:	887a      	ldrh	r2, [r7, #2]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d906      	bls.n	800ccde <tcp_split_unsent_seg+0x7e>
 800ccd0:	4b80      	ldr	r3, [pc, #512]	; (800ced4 <tcp_split_unsent_seg+0x274>)
 800ccd2:	f240 325b 	movw	r2, #859	; 0x35b
 800ccd6:	4983      	ldr	r1, [pc, #524]	; (800cee4 <tcp_split_unsent_seg+0x284>)
 800ccd8:	4880      	ldr	r0, [pc, #512]	; (800cedc <tcp_split_unsent_seg+0x27c>)
 800ccda:	f003 ffd1 	bl	8010c80 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	891b      	ldrh	r3, [r3, #8]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d106      	bne.n	800ccf4 <tcp_split_unsent_seg+0x94>
 800cce6:	4b7b      	ldr	r3, [pc, #492]	; (800ced4 <tcp_split_unsent_seg+0x274>)
 800cce8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ccec:	497e      	ldr	r1, [pc, #504]	; (800cee8 <tcp_split_unsent_seg+0x288>)
 800ccee:	487b      	ldr	r0, [pc, #492]	; (800cedc <tcp_split_unsent_seg+0x27c>)
 800ccf0:	f003 ffc6 	bl	8010c80 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	7a9b      	ldrb	r3, [r3, #10]
 800ccf8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ccfa:	7bfb      	ldrb	r3, [r7, #15]
 800ccfc:	009b      	lsls	r3, r3, #2
 800ccfe:	b2db      	uxtb	r3, r3
 800cd00:	f003 0304 	and.w	r3, r3, #4
 800cd04:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	891a      	ldrh	r2, [r3, #8]
 800cd0a:	887b      	ldrh	r3, [r7, #2]
 800cd0c:	1ad3      	subs	r3, r2, r3
 800cd0e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800cd10:	7bbb      	ldrb	r3, [r7, #14]
 800cd12:	b29a      	uxth	r2, r3
 800cd14:	89bb      	ldrh	r3, [r7, #12]
 800cd16:	4413      	add	r3, r2
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cd1e:	4619      	mov	r1, r3
 800cd20:	2036      	movs	r0, #54	; 0x36
 800cd22:	f7fa fbcd 	bl	80074c0 <pbuf_alloc>
 800cd26:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	f000 80b7 	beq.w	800ce9e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	891a      	ldrh	r2, [r3, #8]
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	891b      	ldrh	r3, [r3, #8]
 800cd3a:	1ad3      	subs	r3, r2, r3
 800cd3c:	b29a      	uxth	r2, r3
 800cd3e:	887b      	ldrh	r3, [r7, #2]
 800cd40:	4413      	add	r3, r2
 800cd42:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	6858      	ldr	r0, [r3, #4]
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	685a      	ldr	r2, [r3, #4]
 800cd4c:	7bbb      	ldrb	r3, [r7, #14]
 800cd4e:	18d1      	adds	r1, r2, r3
 800cd50:	897b      	ldrh	r3, [r7, #10]
 800cd52:	89ba      	ldrh	r2, [r7, #12]
 800cd54:	f7fb f882 	bl	8007e5c <pbuf_copy_partial>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	89bb      	ldrh	r3, [r7, #12]
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	f040 809f 	bne.w	800cea2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	899b      	ldrh	r3, [r3, #12]
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f7f9 fac3 	bl	80062f8 <lwip_htons>
 800cd72:	4603      	mov	r3, r0
 800cd74:	b2db      	uxtb	r3, r3
 800cd76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd7a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800cd80:	7efb      	ldrb	r3, [r7, #27]
 800cd82:	f003 0308 	and.w	r3, r3, #8
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d007      	beq.n	800cd9a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800cd8a:	7efb      	ldrb	r3, [r7, #27]
 800cd8c:	f023 0308 	bic.w	r3, r3, #8
 800cd90:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800cd92:	7ebb      	ldrb	r3, [r7, #26]
 800cd94:	f043 0308 	orr.w	r3, r3, #8
 800cd98:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800cd9a:	7efb      	ldrb	r3, [r7, #27]
 800cd9c:	f003 0301 	and.w	r3, r3, #1
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d007      	beq.n	800cdb4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800cda4:	7efb      	ldrb	r3, [r7, #27]
 800cda6:	f023 0301 	bic.w	r3, r3, #1
 800cdaa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800cdac:	7ebb      	ldrb	r3, [r7, #26]
 800cdae:	f043 0301 	orr.w	r3, r3, #1
 800cdb2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	68db      	ldr	r3, [r3, #12]
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7f9 fab1 	bl	8006322 <lwip_htonl>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	887b      	ldrh	r3, [r7, #2]
 800cdc4:	18d1      	adds	r1, r2, r3
 800cdc6:	7eba      	ldrb	r2, [r7, #26]
 800cdc8:	7bfb      	ldrb	r3, [r7, #15]
 800cdca:	9300      	str	r3, [sp, #0]
 800cdcc:	460b      	mov	r3, r1
 800cdce:	6939      	ldr	r1, [r7, #16]
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f7ff fa4f 	bl	800c274 <tcp_create_segment>
 800cdd6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d063      	beq.n	800cea6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7fa fed8 	bl	8007b98 <pbuf_clen>
 800cde8:	4603      	mov	r3, r0
 800cdea:	461a      	mov	r2, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cdf2:	1a9b      	subs	r3, r3, r2
 800cdf4:	b29a      	uxth	r2, r3
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	6858      	ldr	r0, [r3, #4]
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	891a      	ldrh	r2, [r3, #8]
 800ce06:	89bb      	ldrh	r3, [r7, #12]
 800ce08:	1ad3      	subs	r3, r2, r3
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	f7fa fcb5 	bl	800777c <pbuf_realloc>
  useg->len -= remainder;
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	891a      	ldrh	r2, [r3, #8]
 800ce16:	89bb      	ldrh	r3, [r7, #12]
 800ce18:	1ad3      	subs	r3, r2, r3
 800ce1a:	b29a      	uxth	r2, r3
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	68db      	ldr	r3, [r3, #12]
 800ce24:	899b      	ldrh	r3, [r3, #12]
 800ce26:	b29c      	uxth	r4, r3
 800ce28:	7efb      	ldrb	r3, [r7, #27]
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f7f9 fa63 	bl	80062f8 <lwip_htons>
 800ce32:	4603      	mov	r3, r0
 800ce34:	461a      	mov	r2, r3
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	68db      	ldr	r3, [r3, #12]
 800ce3a:	4322      	orrs	r2, r4
 800ce3c:	b292      	uxth	r2, r2
 800ce3e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	4618      	mov	r0, r3
 800ce46:	f7fa fea7 	bl	8007b98 <pbuf_clen>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce54:	4413      	add	r3, r2
 800ce56:	b29a      	uxth	r2, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ce5e:	69fb      	ldr	r3, [r7, #28]
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7fa fe98 	bl	8007b98 <pbuf_clen>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce72:	4413      	add	r3, r2
 800ce74:	b29a      	uxth	r2, r3
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	681a      	ldr	r2, [r3, #0]
 800ce80:	69fb      	ldr	r3, [r7, #28]
 800ce82:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	69fa      	ldr	r2, [r7, #28]
 800ce88:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ce8a:	69fb      	ldr	r3, [r7, #28]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d103      	bne.n	800ce9a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2200      	movs	r2, #0
 800ce96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	e016      	b.n	800cecc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ce9e:	bf00      	nop
 800cea0:	e002      	b.n	800cea8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cea2:	bf00      	nop
 800cea4:	e000      	b.n	800cea8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cea6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d006      	beq.n	800cebc <tcp_split_unsent_seg+0x25c>
 800ceae:	4b09      	ldr	r3, [pc, #36]	; (800ced4 <tcp_split_unsent_seg+0x274>)
 800ceb0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ceb4:	490d      	ldr	r1, [pc, #52]	; (800ceec <tcp_split_unsent_seg+0x28c>)
 800ceb6:	4809      	ldr	r0, [pc, #36]	; (800cedc <tcp_split_unsent_seg+0x27c>)
 800ceb8:	f003 fee2 	bl	8010c80 <iprintf>
  if (p != NULL) {
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d002      	beq.n	800cec8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800cec2:	6938      	ldr	r0, [r7, #16]
 800cec4:	f7fa fde0 	bl	8007a88 <pbuf_free>
  }

  return ERR_MEM;
 800cec8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3724      	adds	r7, #36	; 0x24
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd90      	pop	{r4, r7, pc}
 800ced4:	0801376c 	.word	0x0801376c
 800ced8:	08013b00 	.word	0x08013b00
 800cedc:	080137c0 	.word	0x080137c0
 800cee0:	08013b24 	.word	0x08013b24
 800cee4:	08013b48 	.word	0x08013b48
 800cee8:	08013b58 	.word	0x08013b58
 800ceec:	08013b68 	.word	0x08013b68

0800cef0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cef0:	b590      	push	{r4, r7, lr}
 800cef2:	b085      	sub	sp, #20
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d106      	bne.n	800cf0c <tcp_send_fin+0x1c>
 800cefe:	4b21      	ldr	r3, [pc, #132]	; (800cf84 <tcp_send_fin+0x94>)
 800cf00:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800cf04:	4920      	ldr	r1, [pc, #128]	; (800cf88 <tcp_send_fin+0x98>)
 800cf06:	4821      	ldr	r0, [pc, #132]	; (800cf8c <tcp_send_fin+0x9c>)
 800cf08:	f003 feba 	bl	8010c80 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d02e      	beq.n	800cf72 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf18:	60fb      	str	r3, [r7, #12]
 800cf1a:	e002      	b.n	800cf22 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d1f8      	bne.n	800cf1c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	68db      	ldr	r3, [r3, #12]
 800cf2e:	899b      	ldrh	r3, [r3, #12]
 800cf30:	b29b      	uxth	r3, r3
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7f9 f9e0 	bl	80062f8 <lwip_htons>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	b2db      	uxtb	r3, r3
 800cf3c:	f003 0307 	and.w	r3, r3, #7
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d116      	bne.n	800cf72 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	68db      	ldr	r3, [r3, #12]
 800cf48:	899b      	ldrh	r3, [r3, #12]
 800cf4a:	b29c      	uxth	r4, r3
 800cf4c:	2001      	movs	r0, #1
 800cf4e:	f7f9 f9d3 	bl	80062f8 <lwip_htons>
 800cf52:	4603      	mov	r3, r0
 800cf54:	461a      	mov	r2, r3
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	4322      	orrs	r2, r4
 800cf5c:	b292      	uxth	r2, r2
 800cf5e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	8b5b      	ldrh	r3, [r3, #26]
 800cf64:	f043 0320 	orr.w	r3, r3, #32
 800cf68:	b29a      	uxth	r2, r3
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	e004      	b.n	800cf7c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cf72:	2101      	movs	r1, #1
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f000 f80b 	bl	800cf90 <tcp_enqueue_flags>
 800cf7a:	4603      	mov	r3, r0
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3714      	adds	r7, #20
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd90      	pop	{r4, r7, pc}
 800cf84:	0801376c 	.word	0x0801376c
 800cf88:	08013b74 	.word	0x08013b74
 800cf8c:	080137c0 	.word	0x080137c0

0800cf90 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b08a      	sub	sp, #40	; 0x28
 800cf94:	af02      	add	r7, sp, #8
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	460b      	mov	r3, r1
 800cf9a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cfa4:	78fb      	ldrb	r3, [r7, #3]
 800cfa6:	f003 0303 	and.w	r3, r3, #3
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d106      	bne.n	800cfbc <tcp_enqueue_flags+0x2c>
 800cfae:	4b67      	ldr	r3, [pc, #412]	; (800d14c <tcp_enqueue_flags+0x1bc>)
 800cfb0:	f240 4211 	movw	r2, #1041	; 0x411
 800cfb4:	4966      	ldr	r1, [pc, #408]	; (800d150 <tcp_enqueue_flags+0x1c0>)
 800cfb6:	4867      	ldr	r0, [pc, #412]	; (800d154 <tcp_enqueue_flags+0x1c4>)
 800cfb8:	f003 fe62 	bl	8010c80 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d106      	bne.n	800cfd0 <tcp_enqueue_flags+0x40>
 800cfc2:	4b62      	ldr	r3, [pc, #392]	; (800d14c <tcp_enqueue_flags+0x1bc>)
 800cfc4:	f240 4213 	movw	r2, #1043	; 0x413
 800cfc8:	4963      	ldr	r1, [pc, #396]	; (800d158 <tcp_enqueue_flags+0x1c8>)
 800cfca:	4862      	ldr	r0, [pc, #392]	; (800d154 <tcp_enqueue_flags+0x1c4>)
 800cfcc:	f003 fe58 	bl	8010c80 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cfd0:	78fb      	ldrb	r3, [r7, #3]
 800cfd2:	f003 0302 	and.w	r3, r3, #2
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d001      	beq.n	800cfde <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800cfda:	2301      	movs	r3, #1
 800cfdc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cfde:	7ffb      	ldrb	r3, [r7, #31]
 800cfe0:	009b      	lsls	r3, r3, #2
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	f003 0304 	and.w	r3, r3, #4
 800cfe8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cfea:	7dfb      	ldrb	r3, [r7, #23]
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cff2:	4619      	mov	r1, r3
 800cff4:	2036      	movs	r0, #54	; 0x36
 800cff6:	f7fa fa63 	bl	80074c0 <pbuf_alloc>
 800cffa:	6138      	str	r0, [r7, #16]
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d109      	bne.n	800d016 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	8b5b      	ldrh	r3, [r3, #26]
 800d006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d00a:	b29a      	uxth	r2, r3
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d010:	f04f 33ff 	mov.w	r3, #4294967295
 800d014:	e095      	b.n	800d142 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	895a      	ldrh	r2, [r3, #10]
 800d01a:	7dfb      	ldrb	r3, [r7, #23]
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	429a      	cmp	r2, r3
 800d020:	d206      	bcs.n	800d030 <tcp_enqueue_flags+0xa0>
 800d022:	4b4a      	ldr	r3, [pc, #296]	; (800d14c <tcp_enqueue_flags+0x1bc>)
 800d024:	f240 4239 	movw	r2, #1081	; 0x439
 800d028:	494c      	ldr	r1, [pc, #304]	; (800d15c <tcp_enqueue_flags+0x1cc>)
 800d02a:	484a      	ldr	r0, [pc, #296]	; (800d154 <tcp_enqueue_flags+0x1c4>)
 800d02c:	f003 fe28 	bl	8010c80 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d034:	78fa      	ldrb	r2, [r7, #3]
 800d036:	7ffb      	ldrb	r3, [r7, #31]
 800d038:	9300      	str	r3, [sp, #0]
 800d03a:	460b      	mov	r3, r1
 800d03c:	6939      	ldr	r1, [r7, #16]
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f7ff f918 	bl	800c274 <tcp_create_segment>
 800d044:	60f8      	str	r0, [r7, #12]
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d109      	bne.n	800d060 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	8b5b      	ldrh	r3, [r3, #26]
 800d050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d054:	b29a      	uxth	r2, r3
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d05a:	f04f 33ff 	mov.w	r3, #4294967295
 800d05e:	e070      	b.n	800d142 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	68db      	ldr	r3, [r3, #12]
 800d064:	f003 0303 	and.w	r3, r3, #3
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d006      	beq.n	800d07a <tcp_enqueue_flags+0xea>
 800d06c:	4b37      	ldr	r3, [pc, #220]	; (800d14c <tcp_enqueue_flags+0x1bc>)
 800d06e:	f240 4242 	movw	r2, #1090	; 0x442
 800d072:	493b      	ldr	r1, [pc, #236]	; (800d160 <tcp_enqueue_flags+0x1d0>)
 800d074:	4837      	ldr	r0, [pc, #220]	; (800d154 <tcp_enqueue_flags+0x1c4>)
 800d076:	f003 fe03 	bl	8010c80 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	891b      	ldrh	r3, [r3, #8]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d006      	beq.n	800d090 <tcp_enqueue_flags+0x100>
 800d082:	4b32      	ldr	r3, [pc, #200]	; (800d14c <tcp_enqueue_flags+0x1bc>)
 800d084:	f240 4243 	movw	r2, #1091	; 0x443
 800d088:	4936      	ldr	r1, [pc, #216]	; (800d164 <tcp_enqueue_flags+0x1d4>)
 800d08a:	4832      	ldr	r0, [pc, #200]	; (800d154 <tcp_enqueue_flags+0x1c4>)
 800d08c:	f003 fdf8 	bl	8010c80 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d094:	2b00      	cmp	r3, #0
 800d096:	d103      	bne.n	800d0a0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	68fa      	ldr	r2, [r7, #12]
 800d09c:	66da      	str	r2, [r3, #108]	; 0x6c
 800d09e:	e00d      	b.n	800d0bc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0a4:	61bb      	str	r3, [r7, #24]
 800d0a6:	e002      	b.n	800d0ae <tcp_enqueue_flags+0x11e>
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	61bb      	str	r3, [r7, #24]
 800d0ae:	69bb      	ldr	r3, [r7, #24]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d1f8      	bne.n	800d0a8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800d0b6:	69bb      	ldr	r3, [r7, #24]
 800d0b8:	68fa      	ldr	r2, [r7, #12]
 800d0ba:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d0c4:	78fb      	ldrb	r3, [r7, #3]
 800d0c6:	f003 0302 	and.w	r3, r3, #2
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d104      	bne.n	800d0d8 <tcp_enqueue_flags+0x148>
 800d0ce:	78fb      	ldrb	r3, [r7, #3]
 800d0d0:	f003 0301 	and.w	r3, r3, #1
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d004      	beq.n	800d0e2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0dc:	1c5a      	adds	r2, r3, #1
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d0e2:	78fb      	ldrb	r3, [r7, #3]
 800d0e4:	f003 0301 	and.w	r3, r3, #1
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d006      	beq.n	800d0fa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	8b5b      	ldrh	r3, [r3, #26]
 800d0f0:	f043 0320 	orr.w	r3, r3, #32
 800d0f4:	b29a      	uxth	r2, r3
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7fa fd4a 	bl	8007b98 <pbuf_clen>
 800d104:	4603      	mov	r3, r0
 800d106:	461a      	mov	r2, r3
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d10e:	4413      	add	r3, r2
 800d110:	b29a      	uxth	r2, r3
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d00e      	beq.n	800d140 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d126:	2b00      	cmp	r3, #0
 800d128:	d10a      	bne.n	800d140 <tcp_enqueue_flags+0x1b0>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d106      	bne.n	800d140 <tcp_enqueue_flags+0x1b0>
 800d132:	4b06      	ldr	r3, [pc, #24]	; (800d14c <tcp_enqueue_flags+0x1bc>)
 800d134:	f240 4265 	movw	r2, #1125	; 0x465
 800d138:	490b      	ldr	r1, [pc, #44]	; (800d168 <tcp_enqueue_flags+0x1d8>)
 800d13a:	4806      	ldr	r0, [pc, #24]	; (800d154 <tcp_enqueue_flags+0x1c4>)
 800d13c:	f003 fda0 	bl	8010c80 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d140:	2300      	movs	r3, #0
}
 800d142:	4618      	mov	r0, r3
 800d144:	3720      	adds	r7, #32
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop
 800d14c:	0801376c 	.word	0x0801376c
 800d150:	08013b90 	.word	0x08013b90
 800d154:	080137c0 	.word	0x080137c0
 800d158:	08013be8 	.word	0x08013be8
 800d15c:	08013c08 	.word	0x08013c08
 800d160:	08013c44 	.word	0x08013c44
 800d164:	08013c5c 	.word	0x08013c5c
 800d168:	08013c88 	.word	0x08013c88

0800d16c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d16c:	b5b0      	push	{r4, r5, r7, lr}
 800d16e:	b08a      	sub	sp, #40	; 0x28
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d106      	bne.n	800d188 <tcp_output+0x1c>
 800d17a:	4b8a      	ldr	r3, [pc, #552]	; (800d3a4 <tcp_output+0x238>)
 800d17c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d180:	4989      	ldr	r1, [pc, #548]	; (800d3a8 <tcp_output+0x23c>)
 800d182:	488a      	ldr	r0, [pc, #552]	; (800d3ac <tcp_output+0x240>)
 800d184:	f003 fd7c 	bl	8010c80 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	7d1b      	ldrb	r3, [r3, #20]
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	d106      	bne.n	800d19e <tcp_output+0x32>
 800d190:	4b84      	ldr	r3, [pc, #528]	; (800d3a4 <tcp_output+0x238>)
 800d192:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d196:	4986      	ldr	r1, [pc, #536]	; (800d3b0 <tcp_output+0x244>)
 800d198:	4884      	ldr	r0, [pc, #528]	; (800d3ac <tcp_output+0x240>)
 800d19a:	f003 fd71 	bl	8010c80 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d19e:	4b85      	ldr	r3, [pc, #532]	; (800d3b4 <tcp_output+0x248>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	687a      	ldr	r2, [r7, #4]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d101      	bne.n	800d1ac <tcp_output+0x40>
    return ERR_OK;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	e1ce      	b.n	800d54a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	bf28      	it	cs
 800d1bc:	4613      	movcs	r3, r2
 800d1be:	b29b      	uxth	r3, r3
 800d1c0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800d1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d10b      	bne.n	800d1e6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	8b5b      	ldrh	r3, [r3, #26]
 800d1d2:	f003 0302 	and.w	r3, r3, #2
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	f000 81aa 	beq.w	800d530 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f000 fdcb 	bl	800dd78 <tcp_send_empty_ack>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	e1b1      	b.n	800d54a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d1e6:	6879      	ldr	r1, [r7, #4]
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	3304      	adds	r3, #4
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f7ff f824 	bl	800c23c <tcp_route>
 800d1f4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d102      	bne.n	800d202 <tcp_output+0x96>
    return ERR_RTE;
 800d1fc:	f06f 0303 	mvn.w	r3, #3
 800d200:	e1a3      	b.n	800d54a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d003      	beq.n	800d210 <tcp_output+0xa4>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d111      	bne.n	800d234 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d002      	beq.n	800d21c <tcp_output+0xb0>
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	3304      	adds	r3, #4
 800d21a:	e000      	b.n	800d21e <tcp_output+0xb2>
 800d21c:	2300      	movs	r3, #0
 800d21e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d102      	bne.n	800d22c <tcp_output+0xc0>
      return ERR_RTE;
 800d226:	f06f 0303 	mvn.w	r3, #3
 800d22a:	e18e      	b.n	800d54a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	681a      	ldr	r2, [r3, #0]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d236:	68db      	ldr	r3, [r3, #12]
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7f9 f871 	bl	8006322 <lwip_htonl>
 800d240:	4602      	mov	r2, r0
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d246:	1ad3      	subs	r3, r2, r3
 800d248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d24a:	8912      	ldrh	r2, [r2, #8]
 800d24c:	4413      	add	r3, r2
 800d24e:	69ba      	ldr	r2, [r7, #24]
 800d250:	429a      	cmp	r2, r3
 800d252:	d227      	bcs.n	800d2a4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d25a:	461a      	mov	r2, r3
 800d25c:	69bb      	ldr	r3, [r7, #24]
 800d25e:	4293      	cmp	r3, r2
 800d260:	d114      	bne.n	800d28c <tcp_output+0x120>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d266:	2b00      	cmp	r3, #0
 800d268:	d110      	bne.n	800d28c <tcp_output+0x120>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d270:	2b00      	cmp	r3, #0
 800d272:	d10b      	bne.n	800d28c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2200      	movs	r2, #0
 800d278:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2201      	movs	r2, #1
 800d280:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2200      	movs	r2, #0
 800d288:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	8b5b      	ldrh	r3, [r3, #26]
 800d290:	f003 0302 	and.w	r3, r3, #2
 800d294:	2b00      	cmp	r3, #0
 800d296:	f000 814d 	beq.w	800d534 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 fd6c 	bl	800dd78 <tcp_send_empty_ack>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	e152      	b.n	800d54a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2b0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d2b2:	6a3b      	ldr	r3, [r7, #32]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	f000 811c 	beq.w	800d4f2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d2ba:	e002      	b.n	800d2c2 <tcp_output+0x156>
 800d2bc:	6a3b      	ldr	r3, [r7, #32]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	623b      	str	r3, [r7, #32]
 800d2c2:	6a3b      	ldr	r3, [r7, #32]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d1f8      	bne.n	800d2bc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d2ca:	e112      	b.n	800d4f2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ce:	68db      	ldr	r3, [r3, #12]
 800d2d0:	899b      	ldrh	r3, [r3, #12]
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f7f9 f80f 	bl	80062f8 <lwip_htons>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	f003 0304 	and.w	r3, r3, #4
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d006      	beq.n	800d2f4 <tcp_output+0x188>
 800d2e6:	4b2f      	ldr	r3, [pc, #188]	; (800d3a4 <tcp_output+0x238>)
 800d2e8:	f240 5236 	movw	r2, #1334	; 0x536
 800d2ec:	4932      	ldr	r1, [pc, #200]	; (800d3b8 <tcp_output+0x24c>)
 800d2ee:	482f      	ldr	r0, [pc, #188]	; (800d3ac <tcp_output+0x240>)
 800d2f0:	f003 fcc6 	bl	8010c80 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d01f      	beq.n	800d33c <tcp_output+0x1d0>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	8b5b      	ldrh	r3, [r3, #26]
 800d300:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d304:	2b00      	cmp	r3, #0
 800d306:	d119      	bne.n	800d33c <tcp_output+0x1d0>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d00b      	beq.n	800d328 <tcp_output+0x1bc>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d110      	bne.n	800d33c <tcp_output+0x1d0>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d31e:	891a      	ldrh	r2, [r3, #8]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d324:	429a      	cmp	r2, r3
 800d326:	d209      	bcs.n	800d33c <tcp_output+0x1d0>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d004      	beq.n	800d33c <tcp_output+0x1d0>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d338:	2b08      	cmp	r3, #8
 800d33a:	d901      	bls.n	800d340 <tcp_output+0x1d4>
 800d33c:	2301      	movs	r3, #1
 800d33e:	e000      	b.n	800d342 <tcp_output+0x1d6>
 800d340:	2300      	movs	r3, #0
 800d342:	2b00      	cmp	r3, #0
 800d344:	d106      	bne.n	800d354 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	8b5b      	ldrh	r3, [r3, #26]
 800d34a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d34e:	2b00      	cmp	r3, #0
 800d350:	f000 80e4 	beq.w	800d51c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	7d1b      	ldrb	r3, [r3, #20]
 800d358:	2b02      	cmp	r3, #2
 800d35a:	d00d      	beq.n	800d378 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35e:	68db      	ldr	r3, [r3, #12]
 800d360:	899b      	ldrh	r3, [r3, #12]
 800d362:	b29c      	uxth	r4, r3
 800d364:	2010      	movs	r0, #16
 800d366:	f7f8 ffc7 	bl	80062f8 <lwip_htons>
 800d36a:	4603      	mov	r3, r0
 800d36c:	461a      	mov	r2, r3
 800d36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d370:	68db      	ldr	r3, [r3, #12]
 800d372:	4322      	orrs	r2, r4
 800d374:	b292      	uxth	r2, r2
 800d376:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d378:	697a      	ldr	r2, [r7, #20]
 800d37a:	6879      	ldr	r1, [r7, #4]
 800d37c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d37e:	f000 f909 	bl	800d594 <tcp_output_segment>
 800d382:	4603      	mov	r3, r0
 800d384:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d016      	beq.n	800d3bc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	8b5b      	ldrh	r3, [r3, #26]
 800d392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d396:	b29a      	uxth	r2, r3
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	835a      	strh	r2, [r3, #26]
      return err;
 800d39c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3a0:	e0d3      	b.n	800d54a <tcp_output+0x3de>
 800d3a2:	bf00      	nop
 800d3a4:	0801376c 	.word	0x0801376c
 800d3a8:	08013cb0 	.word	0x08013cb0
 800d3ac:	080137c0 	.word	0x080137c0
 800d3b0:	08013cc8 	.word	0x08013cc8
 800d3b4:	20008738 	.word	0x20008738
 800d3b8:	08013cf0 	.word	0x08013cf0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	7d1b      	ldrb	r3, [r3, #20]
 800d3c8:	2b02      	cmp	r3, #2
 800d3ca:	d006      	beq.n	800d3da <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	8b5b      	ldrh	r3, [r3, #26]
 800d3d0:	f023 0303 	bic.w	r3, r3, #3
 800d3d4:	b29a      	uxth	r2, r3
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3dc:	68db      	ldr	r3, [r3, #12]
 800d3de:	685b      	ldr	r3, [r3, #4]
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7f8 ff9e 	bl	8006322 <lwip_htonl>
 800d3e6:	4604      	mov	r4, r0
 800d3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ea:	891b      	ldrh	r3, [r3, #8]
 800d3ec:	461d      	mov	r5, r3
 800d3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f0:	68db      	ldr	r3, [r3, #12]
 800d3f2:	899b      	ldrh	r3, [r3, #12]
 800d3f4:	b29b      	uxth	r3, r3
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f7f8 ff7e 	bl	80062f8 <lwip_htons>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	b2db      	uxtb	r3, r3
 800d400:	f003 0303 	and.w	r3, r3, #3
 800d404:	2b00      	cmp	r3, #0
 800d406:	d001      	beq.n	800d40c <tcp_output+0x2a0>
 800d408:	2301      	movs	r3, #1
 800d40a:	e000      	b.n	800d40e <tcp_output+0x2a2>
 800d40c:	2300      	movs	r3, #0
 800d40e:	442b      	add	r3, r5
 800d410:	4423      	add	r3, r4
 800d412:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	1ad3      	subs	r3, r2, r3
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	da02      	bge.n	800d426 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	68ba      	ldr	r2, [r7, #8]
 800d424:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d428:	891b      	ldrh	r3, [r3, #8]
 800d42a:	461c      	mov	r4, r3
 800d42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42e:	68db      	ldr	r3, [r3, #12]
 800d430:	899b      	ldrh	r3, [r3, #12]
 800d432:	b29b      	uxth	r3, r3
 800d434:	4618      	mov	r0, r3
 800d436:	f7f8 ff5f 	bl	80062f8 <lwip_htons>
 800d43a:	4603      	mov	r3, r0
 800d43c:	b2db      	uxtb	r3, r3
 800d43e:	f003 0303 	and.w	r3, r3, #3
 800d442:	2b00      	cmp	r3, #0
 800d444:	d001      	beq.n	800d44a <tcp_output+0x2de>
 800d446:	2301      	movs	r3, #1
 800d448:	e000      	b.n	800d44c <tcp_output+0x2e0>
 800d44a:	2300      	movs	r3, #0
 800d44c:	4423      	add	r3, r4
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d049      	beq.n	800d4e6 <tcp_output+0x37a>
      seg->next = NULL;
 800d452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d454:	2200      	movs	r2, #0
 800d456:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d105      	bne.n	800d46c <tcp_output+0x300>
        pcb->unacked = seg;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d464:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d468:	623b      	str	r3, [r7, #32]
 800d46a:	e03f      	b.n	800d4ec <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46e:	68db      	ldr	r3, [r3, #12]
 800d470:	685b      	ldr	r3, [r3, #4]
 800d472:	4618      	mov	r0, r3
 800d474:	f7f8 ff55 	bl	8006322 <lwip_htonl>
 800d478:	4604      	mov	r4, r0
 800d47a:	6a3b      	ldr	r3, [r7, #32]
 800d47c:	68db      	ldr	r3, [r3, #12]
 800d47e:	685b      	ldr	r3, [r3, #4]
 800d480:	4618      	mov	r0, r3
 800d482:	f7f8 ff4e 	bl	8006322 <lwip_htonl>
 800d486:	4603      	mov	r3, r0
 800d488:	1ae3      	subs	r3, r4, r3
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	da24      	bge.n	800d4d8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	3370      	adds	r3, #112	; 0x70
 800d492:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d494:	e002      	b.n	800d49c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d496:	69fb      	ldr	r3, [r7, #28]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d49c:	69fb      	ldr	r3, [r7, #28]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d011      	beq.n	800d4c8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d4a4:	69fb      	ldr	r3, [r7, #28]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	68db      	ldr	r3, [r3, #12]
 800d4aa:	685b      	ldr	r3, [r3, #4]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7f8 ff38 	bl	8006322 <lwip_htonl>
 800d4b2:	4604      	mov	r4, r0
 800d4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b6:	68db      	ldr	r3, [r3, #12]
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7f8 ff31 	bl	8006322 <lwip_htonl>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	dbe6      	blt.n	800d496 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d4c8:	69fb      	ldr	r3, [r7, #28]
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ce:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d4d0:	69fb      	ldr	r3, [r7, #28]
 800d4d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4d4:	601a      	str	r2, [r3, #0]
 800d4d6:	e009      	b.n	800d4ec <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d4d8:	6a3b      	ldr	r3, [r7, #32]
 800d4da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4dc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d4de:	6a3b      	ldr	r3, [r7, #32]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	623b      	str	r3, [r7, #32]
 800d4e4:	e002      	b.n	800d4ec <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d4e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4e8:	f7fb fefb 	bl	80092e2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4f0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d012      	beq.n	800d51e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7f8 ff0f 	bl	8006322 <lwip_htonl>
 800d504:	4602      	mov	r2, r0
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d50a:	1ad3      	subs	r3, r2, r3
 800d50c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d50e:	8912      	ldrh	r2, [r2, #8]
 800d510:	4413      	add	r3, r2
  while (seg != NULL &&
 800d512:	69ba      	ldr	r2, [r7, #24]
 800d514:	429a      	cmp	r2, r3
 800d516:	f4bf aed9 	bcs.w	800d2cc <tcp_output+0x160>
 800d51a:	e000      	b.n	800d51e <tcp_output+0x3b2>
      break;
 800d51c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d522:	2b00      	cmp	r3, #0
 800d524:	d108      	bne.n	800d538 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2200      	movs	r2, #0
 800d52a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d52e:	e004      	b.n	800d53a <tcp_output+0x3ce>
    goto output_done;
 800d530:	bf00      	nop
 800d532:	e002      	b.n	800d53a <tcp_output+0x3ce>
    goto output_done;
 800d534:	bf00      	nop
 800d536:	e000      	b.n	800d53a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d538:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	8b5b      	ldrh	r3, [r3, #26]
 800d53e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d542:	b29a      	uxth	r2, r3
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d548:	2300      	movs	r3, #0
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	3728      	adds	r7, #40	; 0x28
 800d54e:	46bd      	mov	sp, r7
 800d550:	bdb0      	pop	{r4, r5, r7, pc}
 800d552:	bf00      	nop

0800d554 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b082      	sub	sp, #8
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d106      	bne.n	800d570 <tcp_output_segment_busy+0x1c>
 800d562:	4b09      	ldr	r3, [pc, #36]	; (800d588 <tcp_output_segment_busy+0x34>)
 800d564:	f240 529a 	movw	r2, #1434	; 0x59a
 800d568:	4908      	ldr	r1, [pc, #32]	; (800d58c <tcp_output_segment_busy+0x38>)
 800d56a:	4809      	ldr	r0, [pc, #36]	; (800d590 <tcp_output_segment_busy+0x3c>)
 800d56c:	f003 fb88 	bl	8010c80 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	685b      	ldr	r3, [r3, #4]
 800d574:	7b9b      	ldrb	r3, [r3, #14]
 800d576:	2b01      	cmp	r3, #1
 800d578:	d001      	beq.n	800d57e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d57a:	2301      	movs	r3, #1
 800d57c:	e000      	b.n	800d580 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d57e:	2300      	movs	r3, #0
}
 800d580:	4618      	mov	r0, r3
 800d582:	3708      	adds	r7, #8
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}
 800d588:	0801376c 	.word	0x0801376c
 800d58c:	08013d08 	.word	0x08013d08
 800d590:	080137c0 	.word	0x080137c0

0800d594 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d594:	b5b0      	push	{r4, r5, r7, lr}
 800d596:	b08c      	sub	sp, #48	; 0x30
 800d598:	af04      	add	r7, sp, #16
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d106      	bne.n	800d5b4 <tcp_output_segment+0x20>
 800d5a6:	4b63      	ldr	r3, [pc, #396]	; (800d734 <tcp_output_segment+0x1a0>)
 800d5a8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d5ac:	4962      	ldr	r1, [pc, #392]	; (800d738 <tcp_output_segment+0x1a4>)
 800d5ae:	4863      	ldr	r0, [pc, #396]	; (800d73c <tcp_output_segment+0x1a8>)
 800d5b0:	f003 fb66 	bl	8010c80 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d106      	bne.n	800d5c8 <tcp_output_segment+0x34>
 800d5ba:	4b5e      	ldr	r3, [pc, #376]	; (800d734 <tcp_output_segment+0x1a0>)
 800d5bc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d5c0:	495f      	ldr	r1, [pc, #380]	; (800d740 <tcp_output_segment+0x1ac>)
 800d5c2:	485e      	ldr	r0, [pc, #376]	; (800d73c <tcp_output_segment+0x1a8>)
 800d5c4:	f003 fb5c 	bl	8010c80 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d106      	bne.n	800d5dc <tcp_output_segment+0x48>
 800d5ce:	4b59      	ldr	r3, [pc, #356]	; (800d734 <tcp_output_segment+0x1a0>)
 800d5d0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d5d4:	495b      	ldr	r1, [pc, #364]	; (800d744 <tcp_output_segment+0x1b0>)
 800d5d6:	4859      	ldr	r0, [pc, #356]	; (800d73c <tcp_output_segment+0x1a8>)
 800d5d8:	f003 fb52 	bl	8010c80 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d5dc:	68f8      	ldr	r0, [r7, #12]
 800d5de:	f7ff ffb9 	bl	800d554 <tcp_output_segment_busy>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d001      	beq.n	800d5ec <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	e09f      	b.n	800d72c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	68dc      	ldr	r4, [r3, #12]
 800d5f4:	4610      	mov	r0, r2
 800d5f6:	f7f8 fe94 	bl	8006322 <lwip_htonl>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	68dc      	ldr	r4, [r3, #12]
 800d606:	4610      	mov	r0, r2
 800d608:	f7f8 fe76 	bl	80062f8 <lwip_htons>
 800d60c:	4603      	mov	r3, r0
 800d60e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d614:	68ba      	ldr	r2, [r7, #8]
 800d616:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d618:	441a      	add	r2, r3
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	68db      	ldr	r3, [r3, #12]
 800d622:	3314      	adds	r3, #20
 800d624:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	7a9b      	ldrb	r3, [r3, #10]
 800d62a:	f003 0301 	and.w	r3, r3, #1
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d015      	beq.n	800d65e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	3304      	adds	r3, #4
 800d636:	461a      	mov	r2, r3
 800d638:	6879      	ldr	r1, [r7, #4]
 800d63a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d63e:	f7fc fa33 	bl	8009aa8 <tcp_eff_send_mss_netif>
 800d642:	4603      	mov	r3, r0
 800d644:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d646:	8b7b      	ldrh	r3, [r7, #26]
 800d648:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d64c:	4618      	mov	r0, r3
 800d64e:	f7f8 fe68 	bl	8006322 <lwip_htonl>
 800d652:	4602      	mov	r2, r0
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d658:	69fb      	ldr	r3, [r7, #28]
 800d65a:	3304      	adds	r3, #4
 800d65c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d664:	2b00      	cmp	r3, #0
 800d666:	da02      	bge.n	800d66e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	2200      	movs	r2, #0
 800d66c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d672:	2b00      	cmp	r3, #0
 800d674:	d10c      	bne.n	800d690 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d676:	4b34      	ldr	r3, [pc, #208]	; (800d748 <tcp_output_segment+0x1b4>)
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	68db      	ldr	r3, [r3, #12]
 800d682:	685b      	ldr	r3, [r3, #4]
 800d684:	4618      	mov	r0, r3
 800d686:	f7f8 fe4c 	bl	8006322 <lwip_htonl>
 800d68a:	4602      	mov	r2, r0
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	68da      	ldr	r2, [r3, #12]
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	685b      	ldr	r3, [r3, #4]
 800d698:	685b      	ldr	r3, [r3, #4]
 800d69a:	1ad3      	subs	r3, r2, r3
 800d69c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	8959      	ldrh	r1, [r3, #10]
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	8b3a      	ldrh	r2, [r7, #24]
 800d6aa:	1a8a      	subs	r2, r1, r2
 800d6ac:	b292      	uxth	r2, r2
 800d6ae:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	8919      	ldrh	r1, [r3, #8]
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	8b3a      	ldrh	r2, [r7, #24]
 800d6bc:	1a8a      	subs	r2, r1, r2
 800d6be:	b292      	uxth	r2, r2
 800d6c0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	68fa      	ldr	r2, [r7, #12]
 800d6c8:	68d2      	ldr	r2, [r2, #12]
 800d6ca:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	68db      	ldr	r3, [r3, #12]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	741a      	strb	r2, [r3, #16]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	68db      	ldr	r3, [r3, #12]
 800d6dc:	f103 0214 	add.w	r2, r3, #20
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	7a9b      	ldrb	r3, [r3, #10]
 800d6e4:	009b      	lsls	r3, r3, #2
 800d6e6:	f003 0304 	and.w	r3, r3, #4
 800d6ea:	4413      	add	r3, r2
 800d6ec:	69fa      	ldr	r2, [r7, #28]
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d006      	beq.n	800d700 <tcp_output_segment+0x16c>
 800d6f2:	4b10      	ldr	r3, [pc, #64]	; (800d734 <tcp_output_segment+0x1a0>)
 800d6f4:	f240 621c 	movw	r2, #1564	; 0x61c
 800d6f8:	4914      	ldr	r1, [pc, #80]	; (800d74c <tcp_output_segment+0x1b8>)
 800d6fa:	4810      	ldr	r0, [pc, #64]	; (800d73c <tcp_output_segment+0x1a8>)
 800d6fc:	f003 fac0 	bl	8010c80 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	6858      	ldr	r0, [r3, #4]
 800d704:	68b9      	ldr	r1, [r7, #8]
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	1d1c      	adds	r4, r3, #4
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	7add      	ldrb	r5, [r3, #11]
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	7a9b      	ldrb	r3, [r3, #10]
 800d712:	687a      	ldr	r2, [r7, #4]
 800d714:	9202      	str	r2, [sp, #8]
 800d716:	2206      	movs	r2, #6
 800d718:	9201      	str	r2, [sp, #4]
 800d71a:	9300      	str	r3, [sp, #0]
 800d71c:	462b      	mov	r3, r5
 800d71e:	4622      	mov	r2, r4
 800d720:	f002 fa36 	bl	800fb90 <ip4_output_if>
 800d724:	4603      	mov	r3, r0
 800d726:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d728:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3720      	adds	r7, #32
 800d730:	46bd      	mov	sp, r7
 800d732:	bdb0      	pop	{r4, r5, r7, pc}
 800d734:	0801376c 	.word	0x0801376c
 800d738:	08013d30 	.word	0x08013d30
 800d73c:	080137c0 	.word	0x080137c0
 800d740:	08013d50 	.word	0x08013d50
 800d744:	08013d70 	.word	0x08013d70
 800d748:	200086ec 	.word	0x200086ec
 800d74c:	08013d94 	.word	0x08013d94

0800d750 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d750:	b5b0      	push	{r4, r5, r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d106      	bne.n	800d76c <tcp_rexmit_rto_prepare+0x1c>
 800d75e:	4b31      	ldr	r3, [pc, #196]	; (800d824 <tcp_rexmit_rto_prepare+0xd4>)
 800d760:	f240 6263 	movw	r2, #1635	; 0x663
 800d764:	4930      	ldr	r1, [pc, #192]	; (800d828 <tcp_rexmit_rto_prepare+0xd8>)
 800d766:	4831      	ldr	r0, [pc, #196]	; (800d82c <tcp_rexmit_rto_prepare+0xdc>)
 800d768:	f003 fa8a 	bl	8010c80 <iprintf>

  if (pcb->unacked == NULL) {
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d770:	2b00      	cmp	r3, #0
 800d772:	d102      	bne.n	800d77a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d774:	f06f 0305 	mvn.w	r3, #5
 800d778:	e050      	b.n	800d81c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d77e:	60fb      	str	r3, [r7, #12]
 800d780:	e00b      	b.n	800d79a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d782:	68f8      	ldr	r0, [r7, #12]
 800d784:	f7ff fee6 	bl	800d554 <tcp_output_segment_busy>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d002      	beq.n	800d794 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d78e:	f06f 0305 	mvn.w	r3, #5
 800d792:	e043      	b.n	800d81c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	60fb      	str	r3, [r7, #12]
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d1ef      	bne.n	800d782 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d7a2:	68f8      	ldr	r0, [r7, #12]
 800d7a4:	f7ff fed6 	bl	800d554 <tcp_output_segment_busy>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d002      	beq.n	800d7b4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d7ae:	f06f 0305 	mvn.w	r3, #5
 800d7b2:	e033      	b.n	800d81c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	8b5b      	ldrh	r3, [r3, #26]
 800d7ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d7d2:	b29a      	uxth	r2, r3
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	68db      	ldr	r3, [r3, #12]
 800d7dc:	685b      	ldr	r3, [r3, #4]
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7f8 fd9f 	bl	8006322 <lwip_htonl>
 800d7e4:	4604      	mov	r4, r0
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	891b      	ldrh	r3, [r3, #8]
 800d7ea:	461d      	mov	r5, r3
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	68db      	ldr	r3, [r3, #12]
 800d7f0:	899b      	ldrh	r3, [r3, #12]
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7f8 fd7f 	bl	80062f8 <lwip_htons>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	f003 0303 	and.w	r3, r3, #3
 800d802:	2b00      	cmp	r3, #0
 800d804:	d001      	beq.n	800d80a <tcp_rexmit_rto_prepare+0xba>
 800d806:	2301      	movs	r3, #1
 800d808:	e000      	b.n	800d80c <tcp_rexmit_rto_prepare+0xbc>
 800d80a:	2300      	movs	r3, #0
 800d80c:	442b      	add	r3, r5
 800d80e:	18e2      	adds	r2, r4, r3
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2200      	movs	r2, #0
 800d818:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d81a:	2300      	movs	r3, #0
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3710      	adds	r7, #16
 800d820:	46bd      	mov	sp, r7
 800d822:	bdb0      	pop	{r4, r5, r7, pc}
 800d824:	0801376c 	.word	0x0801376c
 800d828:	08013da8 	.word	0x08013da8
 800d82c:	080137c0 	.word	0x080137c0

0800d830 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d106      	bne.n	800d84c <tcp_rexmit_rto_commit+0x1c>
 800d83e:	4b0d      	ldr	r3, [pc, #52]	; (800d874 <tcp_rexmit_rto_commit+0x44>)
 800d840:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d844:	490c      	ldr	r1, [pc, #48]	; (800d878 <tcp_rexmit_rto_commit+0x48>)
 800d846:	480d      	ldr	r0, [pc, #52]	; (800d87c <tcp_rexmit_rto_commit+0x4c>)
 800d848:	f003 fa1a 	bl	8010c80 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d852:	2bff      	cmp	r3, #255	; 0xff
 800d854:	d007      	beq.n	800d866 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d85c:	3301      	adds	r3, #1
 800d85e:	b2da      	uxtb	r2, r3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f7ff fc80 	bl	800d16c <tcp_output>
}
 800d86c:	bf00      	nop
 800d86e:	3708      	adds	r7, #8
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}
 800d874:	0801376c 	.word	0x0801376c
 800d878:	08013dcc 	.word	0x08013dcc
 800d87c:	080137c0 	.word	0x080137c0

0800d880 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d106      	bne.n	800d89c <tcp_rexmit_rto+0x1c>
 800d88e:	4b0a      	ldr	r3, [pc, #40]	; (800d8b8 <tcp_rexmit_rto+0x38>)
 800d890:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d894:	4909      	ldr	r1, [pc, #36]	; (800d8bc <tcp_rexmit_rto+0x3c>)
 800d896:	480a      	ldr	r0, [pc, #40]	; (800d8c0 <tcp_rexmit_rto+0x40>)
 800d898:	f003 f9f2 	bl	8010c80 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f7ff ff57 	bl	800d750 <tcp_rexmit_rto_prepare>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d102      	bne.n	800d8ae <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f7ff ffc1 	bl	800d830 <tcp_rexmit_rto_commit>
  }
}
 800d8ae:	bf00      	nop
 800d8b0:	3708      	adds	r7, #8
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	0801376c 	.word	0x0801376c
 800d8bc:	08013df0 	.word	0x08013df0
 800d8c0:	080137c0 	.word	0x080137c0

0800d8c4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d8c4:	b590      	push	{r4, r7, lr}
 800d8c6:	b085      	sub	sp, #20
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d106      	bne.n	800d8e0 <tcp_rexmit+0x1c>
 800d8d2:	4b2f      	ldr	r3, [pc, #188]	; (800d990 <tcp_rexmit+0xcc>)
 800d8d4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d8d8:	492e      	ldr	r1, [pc, #184]	; (800d994 <tcp_rexmit+0xd0>)
 800d8da:	482f      	ldr	r0, [pc, #188]	; (800d998 <tcp_rexmit+0xd4>)
 800d8dc:	f003 f9d0 	bl	8010c80 <iprintf>

  if (pcb->unacked == NULL) {
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d102      	bne.n	800d8ee <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d8e8:	f06f 0305 	mvn.w	r3, #5
 800d8ec:	e04c      	b.n	800d988 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8f2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d8f4:	68b8      	ldr	r0, [r7, #8]
 800d8f6:	f7ff fe2d 	bl	800d554 <tcp_output_segment_busy>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d002      	beq.n	800d906 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d900:	f06f 0305 	mvn.w	r3, #5
 800d904:	e040      	b.n	800d988 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	336c      	adds	r3, #108	; 0x6c
 800d912:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d914:	e002      	b.n	800d91c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d011      	beq.n	800d948 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	68db      	ldr	r3, [r3, #12]
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7f8 fcf8 	bl	8006322 <lwip_htonl>
 800d932:	4604      	mov	r4, r0
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	68db      	ldr	r3, [r3, #12]
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7f8 fcf1 	bl	8006322 <lwip_htonl>
 800d940:	4603      	mov	r3, r0
 800d942:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d944:	2b00      	cmp	r3, #0
 800d946:	dbe6      	blt.n	800d916 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	68ba      	ldr	r2, [r7, #8]
 800d954:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d103      	bne.n	800d966 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2200      	movs	r2, #0
 800d962:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d96c:	2bff      	cmp	r3, #255	; 0xff
 800d96e:	d007      	beq.n	800d980 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d976:	3301      	adds	r3, #1
 800d978:	b2da      	uxtb	r2, r3
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d986:	2300      	movs	r3, #0
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3714      	adds	r7, #20
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd90      	pop	{r4, r7, pc}
 800d990:	0801376c 	.word	0x0801376c
 800d994:	08013e0c 	.word	0x08013e0c
 800d998:	080137c0 	.word	0x080137c0

0800d99c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d106      	bne.n	800d9b8 <tcp_rexmit_fast+0x1c>
 800d9aa:	4b2a      	ldr	r3, [pc, #168]	; (800da54 <tcp_rexmit_fast+0xb8>)
 800d9ac:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d9b0:	4929      	ldr	r1, [pc, #164]	; (800da58 <tcp_rexmit_fast+0xbc>)
 800d9b2:	482a      	ldr	r0, [pc, #168]	; (800da5c <tcp_rexmit_fast+0xc0>)
 800d9b4:	f003 f964 	bl	8010c80 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d044      	beq.n	800da4a <tcp_rexmit_fast+0xae>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	8b5b      	ldrh	r3, [r3, #26]
 800d9c4:	f003 0304 	and.w	r3, r3, #4
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d13e      	bne.n	800da4a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f7ff ff79 	bl	800d8c4 <tcp_rexmit>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d138      	bne.n	800da4a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	bf28      	it	cs
 800d9e8:	4613      	movcs	r3, r2
 800d9ea:	b29b      	uxth	r3, r3
 800d9ec:	0fda      	lsrs	r2, r3, #31
 800d9ee:	4413      	add	r3, r2
 800d9f0:	105b      	asrs	r3, r3, #1
 800d9f2:	b29a      	uxth	r2, r3
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800da00:	461a      	mov	r2, r3
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da06:	005b      	lsls	r3, r3, #1
 800da08:	429a      	cmp	r2, r3
 800da0a:	d206      	bcs.n	800da1a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da10:	005b      	lsls	r3, r3, #1
 800da12:	b29a      	uxth	r2, r3
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da24:	4619      	mov	r1, r3
 800da26:	0049      	lsls	r1, r1, #1
 800da28:	440b      	add	r3, r1
 800da2a:	b29b      	uxth	r3, r3
 800da2c:	4413      	add	r3, r2
 800da2e:	b29a      	uxth	r2, r3
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	8b5b      	ldrh	r3, [r3, #26]
 800da3a:	f043 0304 	orr.w	r3, r3, #4
 800da3e:	b29a      	uxth	r2, r3
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2200      	movs	r2, #0
 800da48:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800da4a:	bf00      	nop
 800da4c:	3708      	adds	r7, #8
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
 800da52:	bf00      	nop
 800da54:	0801376c 	.word	0x0801376c
 800da58:	08013e24 	.word	0x08013e24
 800da5c:	080137c0 	.word	0x080137c0

0800da60 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b086      	sub	sp, #24
 800da64:	af00      	add	r7, sp, #0
 800da66:	60f8      	str	r0, [r7, #12]
 800da68:	607b      	str	r3, [r7, #4]
 800da6a:	460b      	mov	r3, r1
 800da6c:	817b      	strh	r3, [r7, #10]
 800da6e:	4613      	mov	r3, r2
 800da70:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800da72:	897a      	ldrh	r2, [r7, #10]
 800da74:	893b      	ldrh	r3, [r7, #8]
 800da76:	4413      	add	r3, r2
 800da78:	b29b      	uxth	r3, r3
 800da7a:	3314      	adds	r3, #20
 800da7c:	b29b      	uxth	r3, r3
 800da7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800da82:	4619      	mov	r1, r3
 800da84:	2022      	movs	r0, #34	; 0x22
 800da86:	f7f9 fd1b 	bl	80074c0 <pbuf_alloc>
 800da8a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d04d      	beq.n	800db2e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800da92:	897b      	ldrh	r3, [r7, #10]
 800da94:	3313      	adds	r3, #19
 800da96:	697a      	ldr	r2, [r7, #20]
 800da98:	8952      	ldrh	r2, [r2, #10]
 800da9a:	4293      	cmp	r3, r2
 800da9c:	db06      	blt.n	800daac <tcp_output_alloc_header_common+0x4c>
 800da9e:	4b26      	ldr	r3, [pc, #152]	; (800db38 <tcp_output_alloc_header_common+0xd8>)
 800daa0:	f240 7223 	movw	r2, #1827	; 0x723
 800daa4:	4925      	ldr	r1, [pc, #148]	; (800db3c <tcp_output_alloc_header_common+0xdc>)
 800daa6:	4826      	ldr	r0, [pc, #152]	; (800db40 <tcp_output_alloc_header_common+0xe0>)
 800daa8:	f003 f8ea 	bl	8010c80 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800dab2:	8c3b      	ldrh	r3, [r7, #32]
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7f8 fc1f 	bl	80062f8 <lwip_htons>
 800daba:	4603      	mov	r3, r0
 800dabc:	461a      	mov	r2, r3
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800dac2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7f8 fc17 	bl	80062f8 <lwip_htons>
 800daca:	4603      	mov	r3, r0
 800dacc:	461a      	mov	r2, r3
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	687a      	ldr	r2, [r7, #4]
 800dad6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800dad8:	68f8      	ldr	r0, [r7, #12]
 800dada:	f7f8 fc22 	bl	8006322 <lwip_htonl>
 800dade:	4602      	mov	r2, r0
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800dae4:	897b      	ldrh	r3, [r7, #10]
 800dae6:	089b      	lsrs	r3, r3, #2
 800dae8:	b29b      	uxth	r3, r3
 800daea:	3305      	adds	r3, #5
 800daec:	b29b      	uxth	r3, r3
 800daee:	031b      	lsls	r3, r3, #12
 800daf0:	b29a      	uxth	r2, r3
 800daf2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	4313      	orrs	r3, r2
 800dafa:	b29b      	uxth	r3, r3
 800dafc:	4618      	mov	r0, r3
 800dafe:	f7f8 fbfb 	bl	80062f8 <lwip_htons>
 800db02:	4603      	mov	r3, r0
 800db04:	461a      	mov	r2, r3
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800db0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800db0c:	4618      	mov	r0, r3
 800db0e:	f7f8 fbf3 	bl	80062f8 <lwip_htons>
 800db12:	4603      	mov	r3, r0
 800db14:	461a      	mov	r2, r3
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	2200      	movs	r2, #0
 800db1e:	741a      	strb	r2, [r3, #16]
 800db20:	2200      	movs	r2, #0
 800db22:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	2200      	movs	r2, #0
 800db28:	749a      	strb	r2, [r3, #18]
 800db2a:	2200      	movs	r2, #0
 800db2c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800db2e:	697b      	ldr	r3, [r7, #20]
}
 800db30:	4618      	mov	r0, r3
 800db32:	3718      	adds	r7, #24
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}
 800db38:	0801376c 	.word	0x0801376c
 800db3c:	08013e44 	.word	0x08013e44
 800db40:	080137c0 	.word	0x080137c0

0800db44 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800db44:	b5b0      	push	{r4, r5, r7, lr}
 800db46:	b08a      	sub	sp, #40	; 0x28
 800db48:	af04      	add	r7, sp, #16
 800db4a:	60f8      	str	r0, [r7, #12]
 800db4c:	607b      	str	r3, [r7, #4]
 800db4e:	460b      	mov	r3, r1
 800db50:	817b      	strh	r3, [r7, #10]
 800db52:	4613      	mov	r3, r2
 800db54:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d106      	bne.n	800db6a <tcp_output_alloc_header+0x26>
 800db5c:	4b15      	ldr	r3, [pc, #84]	; (800dbb4 <tcp_output_alloc_header+0x70>)
 800db5e:	f240 7242 	movw	r2, #1858	; 0x742
 800db62:	4915      	ldr	r1, [pc, #84]	; (800dbb8 <tcp_output_alloc_header+0x74>)
 800db64:	4815      	ldr	r0, [pc, #84]	; (800dbbc <tcp_output_alloc_header+0x78>)
 800db66:	f003 f88b 	bl	8010c80 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	8adb      	ldrh	r3, [r3, #22]
 800db72:	68fa      	ldr	r2, [r7, #12]
 800db74:	8b12      	ldrh	r2, [r2, #24]
 800db76:	68f9      	ldr	r1, [r7, #12]
 800db78:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800db7a:	893d      	ldrh	r5, [r7, #8]
 800db7c:	897c      	ldrh	r4, [r7, #10]
 800db7e:	9103      	str	r1, [sp, #12]
 800db80:	2110      	movs	r1, #16
 800db82:	9102      	str	r1, [sp, #8]
 800db84:	9201      	str	r2, [sp, #4]
 800db86:	9300      	str	r3, [sp, #0]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	462a      	mov	r2, r5
 800db8c:	4621      	mov	r1, r4
 800db8e:	f7ff ff67 	bl	800da60 <tcp_output_alloc_header_common>
 800db92:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d006      	beq.n	800dba8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db9e:	68fa      	ldr	r2, [r7, #12]
 800dba0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800dba2:	441a      	add	r2, r3
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800dba8:	697b      	ldr	r3, [r7, #20]
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3718      	adds	r7, #24
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bdb0      	pop	{r4, r5, r7, pc}
 800dbb2:	bf00      	nop
 800dbb4:	0801376c 	.word	0x0801376c
 800dbb8:	08013e74 	.word	0x08013e74
 800dbbc:	080137c0 	.word	0x080137c0

0800dbc0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b088      	sub	sp, #32
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	60f8      	str	r0, [r7, #12]
 800dbc8:	60b9      	str	r1, [r7, #8]
 800dbca:	4611      	mov	r1, r2
 800dbcc:	461a      	mov	r2, r3
 800dbce:	460b      	mov	r3, r1
 800dbd0:	71fb      	strb	r3, [r7, #7]
 800dbd2:	4613      	mov	r3, r2
 800dbd4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d106      	bne.n	800dbee <tcp_output_fill_options+0x2e>
 800dbe0:	4b13      	ldr	r3, [pc, #76]	; (800dc30 <tcp_output_fill_options+0x70>)
 800dbe2:	f240 7256 	movw	r2, #1878	; 0x756
 800dbe6:	4913      	ldr	r1, [pc, #76]	; (800dc34 <tcp_output_fill_options+0x74>)
 800dbe8:	4813      	ldr	r0, [pc, #76]	; (800dc38 <tcp_output_fill_options+0x78>)
 800dbea:	f003 f849 	bl	8010c80 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800dbf4:	69bb      	ldr	r3, [r7, #24]
 800dbf6:	3314      	adds	r3, #20
 800dbf8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800dbfa:	69bb      	ldr	r3, [r7, #24]
 800dbfc:	f103 0214 	add.w	r2, r3, #20
 800dc00:	8bfb      	ldrh	r3, [r7, #30]
 800dc02:	009b      	lsls	r3, r3, #2
 800dc04:	4619      	mov	r1, r3
 800dc06:	79fb      	ldrb	r3, [r7, #7]
 800dc08:	009b      	lsls	r3, r3, #2
 800dc0a:	f003 0304 	and.w	r3, r3, #4
 800dc0e:	440b      	add	r3, r1
 800dc10:	4413      	add	r3, r2
 800dc12:	697a      	ldr	r2, [r7, #20]
 800dc14:	429a      	cmp	r2, r3
 800dc16:	d006      	beq.n	800dc26 <tcp_output_fill_options+0x66>
 800dc18:	4b05      	ldr	r3, [pc, #20]	; (800dc30 <tcp_output_fill_options+0x70>)
 800dc1a:	f240 7275 	movw	r2, #1909	; 0x775
 800dc1e:	4907      	ldr	r1, [pc, #28]	; (800dc3c <tcp_output_fill_options+0x7c>)
 800dc20:	4805      	ldr	r0, [pc, #20]	; (800dc38 <tcp_output_fill_options+0x78>)
 800dc22:	f003 f82d 	bl	8010c80 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800dc26:	bf00      	nop
 800dc28:	3720      	adds	r7, #32
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}
 800dc2e:	bf00      	nop
 800dc30:	0801376c 	.word	0x0801376c
 800dc34:	08013e9c 	.word	0x08013e9c
 800dc38:	080137c0 	.word	0x080137c0
 800dc3c:	08013d94 	.word	0x08013d94

0800dc40 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b08a      	sub	sp, #40	; 0x28
 800dc44:	af04      	add	r7, sp, #16
 800dc46:	60f8      	str	r0, [r7, #12]
 800dc48:	60b9      	str	r1, [r7, #8]
 800dc4a:	607a      	str	r2, [r7, #4]
 800dc4c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d106      	bne.n	800dc62 <tcp_output_control_segment+0x22>
 800dc54:	4b1c      	ldr	r3, [pc, #112]	; (800dcc8 <tcp_output_control_segment+0x88>)
 800dc56:	f240 7287 	movw	r2, #1927	; 0x787
 800dc5a:	491c      	ldr	r1, [pc, #112]	; (800dccc <tcp_output_control_segment+0x8c>)
 800dc5c:	481c      	ldr	r0, [pc, #112]	; (800dcd0 <tcp_output_control_segment+0x90>)
 800dc5e:	f003 f80f 	bl	8010c80 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800dc62:	683a      	ldr	r2, [r7, #0]
 800dc64:	6879      	ldr	r1, [r7, #4]
 800dc66:	68f8      	ldr	r0, [r7, #12]
 800dc68:	f7fe fae8 	bl	800c23c <tcp_route>
 800dc6c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d102      	bne.n	800dc7a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800dc74:	23fc      	movs	r3, #252	; 0xfc
 800dc76:	75fb      	strb	r3, [r7, #23]
 800dc78:	e01c      	b.n	800dcb4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d006      	beq.n	800dc8e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	7adb      	ldrb	r3, [r3, #11]
 800dc84:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	7a9b      	ldrb	r3, [r3, #10]
 800dc8a:	757b      	strb	r3, [r7, #21]
 800dc8c:	e003      	b.n	800dc96 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800dc8e:	23ff      	movs	r3, #255	; 0xff
 800dc90:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800dc92:	2300      	movs	r3, #0
 800dc94:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800dc96:	7dba      	ldrb	r2, [r7, #22]
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	9302      	str	r3, [sp, #8]
 800dc9c:	2306      	movs	r3, #6
 800dc9e:	9301      	str	r3, [sp, #4]
 800dca0:	7d7b      	ldrb	r3, [r7, #21]
 800dca2:	9300      	str	r3, [sp, #0]
 800dca4:	4613      	mov	r3, r2
 800dca6:	683a      	ldr	r2, [r7, #0]
 800dca8:	6879      	ldr	r1, [r7, #4]
 800dcaa:	68b8      	ldr	r0, [r7, #8]
 800dcac:	f001 ff70 	bl	800fb90 <ip4_output_if>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800dcb4:	68b8      	ldr	r0, [r7, #8]
 800dcb6:	f7f9 fee7 	bl	8007a88 <pbuf_free>
  return err;
 800dcba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3718      	adds	r7, #24
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	0801376c 	.word	0x0801376c
 800dccc:	08013ec4 	.word	0x08013ec4
 800dcd0:	080137c0 	.word	0x080137c0

0800dcd4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800dcd4:	b590      	push	{r4, r7, lr}
 800dcd6:	b08b      	sub	sp, #44	; 0x2c
 800dcd8:	af04      	add	r7, sp, #16
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	607a      	str	r2, [r7, #4]
 800dce0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d106      	bne.n	800dcf6 <tcp_rst+0x22>
 800dce8:	4b1f      	ldr	r3, [pc, #124]	; (800dd68 <tcp_rst+0x94>)
 800dcea:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800dcee:	491f      	ldr	r1, [pc, #124]	; (800dd6c <tcp_rst+0x98>)
 800dcf0:	481f      	ldr	r0, [pc, #124]	; (800dd70 <tcp_rst+0x9c>)
 800dcf2:	f002 ffc5 	bl	8010c80 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800dcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d106      	bne.n	800dd0a <tcp_rst+0x36>
 800dcfc:	4b1a      	ldr	r3, [pc, #104]	; (800dd68 <tcp_rst+0x94>)
 800dcfe:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800dd02:	491c      	ldr	r1, [pc, #112]	; (800dd74 <tcp_rst+0xa0>)
 800dd04:	481a      	ldr	r0, [pc, #104]	; (800dd70 <tcp_rst+0x9c>)
 800dd06:	f002 ffbb 	bl	8010c80 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800dd0e:	f246 0308 	movw	r3, #24584	; 0x6008
 800dd12:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800dd14:	7dfb      	ldrb	r3, [r7, #23]
 800dd16:	b29c      	uxth	r4, r3
 800dd18:	68b8      	ldr	r0, [r7, #8]
 800dd1a:	f7f8 fb02 	bl	8006322 <lwip_htonl>
 800dd1e:	4602      	mov	r2, r0
 800dd20:	8abb      	ldrh	r3, [r7, #20]
 800dd22:	9303      	str	r3, [sp, #12]
 800dd24:	2314      	movs	r3, #20
 800dd26:	9302      	str	r3, [sp, #8]
 800dd28:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dd2a:	9301      	str	r3, [sp, #4]
 800dd2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dd2e:	9300      	str	r3, [sp, #0]
 800dd30:	4613      	mov	r3, r2
 800dd32:	2200      	movs	r2, #0
 800dd34:	4621      	mov	r1, r4
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f7ff fe92 	bl	800da60 <tcp_output_alloc_header_common>
 800dd3c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d00c      	beq.n	800dd5e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dd44:	7dfb      	ldrb	r3, [r7, #23]
 800dd46:	2200      	movs	r2, #0
 800dd48:	6939      	ldr	r1, [r7, #16]
 800dd4a:	68f8      	ldr	r0, [r7, #12]
 800dd4c:	f7ff ff38 	bl	800dbc0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800dd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd52:	683a      	ldr	r2, [r7, #0]
 800dd54:	6939      	ldr	r1, [r7, #16]
 800dd56:	68f8      	ldr	r0, [r7, #12]
 800dd58:	f7ff ff72 	bl	800dc40 <tcp_output_control_segment>
 800dd5c:	e000      	b.n	800dd60 <tcp_rst+0x8c>
    return;
 800dd5e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800dd60:	371c      	adds	r7, #28
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd90      	pop	{r4, r7, pc}
 800dd66:	bf00      	nop
 800dd68:	0801376c 	.word	0x0801376c
 800dd6c:	08013ef0 	.word	0x08013ef0
 800dd70:	080137c0 	.word	0x080137c0
 800dd74:	08013f0c 	.word	0x08013f0c

0800dd78 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800dd78:	b590      	push	{r4, r7, lr}
 800dd7a:	b087      	sub	sp, #28
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800dd80:	2300      	movs	r3, #0
 800dd82:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800dd84:	2300      	movs	r3, #0
 800dd86:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d106      	bne.n	800dd9c <tcp_send_empty_ack+0x24>
 800dd8e:	4b28      	ldr	r3, [pc, #160]	; (800de30 <tcp_send_empty_ack+0xb8>)
 800dd90:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800dd94:	4927      	ldr	r1, [pc, #156]	; (800de34 <tcp_send_empty_ack+0xbc>)
 800dd96:	4828      	ldr	r0, [pc, #160]	; (800de38 <tcp_send_empty_ack+0xc0>)
 800dd98:	f002 ff72 	bl	8010c80 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dd9c:	7dfb      	ldrb	r3, [r7, #23]
 800dd9e:	009b      	lsls	r3, r3, #2
 800dda0:	b2db      	uxtb	r3, r3
 800dda2:	f003 0304 	and.w	r3, r3, #4
 800dda6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800dda8:	7d7b      	ldrb	r3, [r7, #21]
 800ddaa:	b29c      	uxth	r4, r3
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7f8 fab6 	bl	8006322 <lwip_htonl>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	2200      	movs	r2, #0
 800ddba:	4621      	mov	r1, r4
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f7ff fec1 	bl	800db44 <tcp_output_alloc_header>
 800ddc2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d109      	bne.n	800ddde <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	8b5b      	ldrh	r3, [r3, #26]
 800ddce:	f043 0303 	orr.w	r3, r3, #3
 800ddd2:	b29a      	uxth	r2, r3
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ddd8:	f06f 0301 	mvn.w	r3, #1
 800dddc:	e023      	b.n	800de26 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ddde:	7dbb      	ldrb	r3, [r7, #22]
 800dde0:	7dfa      	ldrb	r2, [r7, #23]
 800dde2:	6939      	ldr	r1, [r7, #16]
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f7ff feeb 	bl	800dbc0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ddea:	687a      	ldr	r2, [r7, #4]
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	3304      	adds	r3, #4
 800ddf0:	6939      	ldr	r1, [r7, #16]
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f7ff ff24 	bl	800dc40 <tcp_output_control_segment>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ddfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d007      	beq.n	800de14 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	8b5b      	ldrh	r3, [r3, #26]
 800de08:	f043 0303 	orr.w	r3, r3, #3
 800de0c:	b29a      	uxth	r2, r3
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	835a      	strh	r2, [r3, #26]
 800de12:	e006      	b.n	800de22 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	8b5b      	ldrh	r3, [r3, #26]
 800de18:	f023 0303 	bic.w	r3, r3, #3
 800de1c:	b29a      	uxth	r2, r3
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800de22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800de26:	4618      	mov	r0, r3
 800de28:	371c      	adds	r7, #28
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd90      	pop	{r4, r7, pc}
 800de2e:	bf00      	nop
 800de30:	0801376c 	.word	0x0801376c
 800de34:	08013f28 	.word	0x08013f28
 800de38:	080137c0 	.word	0x080137c0

0800de3c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800de3c:	b590      	push	{r4, r7, lr}
 800de3e:	b087      	sub	sp, #28
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800de44:	2300      	movs	r3, #0
 800de46:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d106      	bne.n	800de5c <tcp_keepalive+0x20>
 800de4e:	4b18      	ldr	r3, [pc, #96]	; (800deb0 <tcp_keepalive+0x74>)
 800de50:	f640 0224 	movw	r2, #2084	; 0x824
 800de54:	4917      	ldr	r1, [pc, #92]	; (800deb4 <tcp_keepalive+0x78>)
 800de56:	4818      	ldr	r0, [pc, #96]	; (800deb8 <tcp_keepalive+0x7c>)
 800de58:	f002 ff12 	bl	8010c80 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800de5c:	7dfb      	ldrb	r3, [r7, #23]
 800de5e:	b29c      	uxth	r4, r3
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de64:	3b01      	subs	r3, #1
 800de66:	4618      	mov	r0, r3
 800de68:	f7f8 fa5b 	bl	8006322 <lwip_htonl>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2200      	movs	r2, #0
 800de70:	4621      	mov	r1, r4
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f7ff fe66 	bl	800db44 <tcp_output_alloc_header>
 800de78:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d102      	bne.n	800de86 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800de80:	f04f 33ff 	mov.w	r3, #4294967295
 800de84:	e010      	b.n	800dea8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800de86:	7dfb      	ldrb	r3, [r7, #23]
 800de88:	2200      	movs	r2, #0
 800de8a:	6939      	ldr	r1, [r7, #16]
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f7ff fe97 	bl	800dbc0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800de92:	687a      	ldr	r2, [r7, #4]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	3304      	adds	r3, #4
 800de98:	6939      	ldr	r1, [r7, #16]
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f7ff fed0 	bl	800dc40 <tcp_output_control_segment>
 800dea0:	4603      	mov	r3, r0
 800dea2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	371c      	adds	r7, #28
 800deac:	46bd      	mov	sp, r7
 800deae:	bd90      	pop	{r4, r7, pc}
 800deb0:	0801376c 	.word	0x0801376c
 800deb4:	08013f48 	.word	0x08013f48
 800deb8:	080137c0 	.word	0x080137c0

0800debc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800debc:	b590      	push	{r4, r7, lr}
 800debe:	b08b      	sub	sp, #44	; 0x2c
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dec4:	2300      	movs	r3, #0
 800dec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d106      	bne.n	800dede <tcp_zero_window_probe+0x22>
 800ded0:	4b4c      	ldr	r3, [pc, #304]	; (800e004 <tcp_zero_window_probe+0x148>)
 800ded2:	f640 024f 	movw	r2, #2127	; 0x84f
 800ded6:	494c      	ldr	r1, [pc, #304]	; (800e008 <tcp_zero_window_probe+0x14c>)
 800ded8:	484c      	ldr	r0, [pc, #304]	; (800e00c <tcp_zero_window_probe+0x150>)
 800deda:	f002 fed1 	bl	8010c80 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dee2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800dee4:	6a3b      	ldr	r3, [r7, #32]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d101      	bne.n	800deee <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800deea:	2300      	movs	r3, #0
 800deec:	e086      	b.n	800dffc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800def4:	2bff      	cmp	r3, #255	; 0xff
 800def6:	d007      	beq.n	800df08 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800defe:	3301      	adds	r3, #1
 800df00:	b2da      	uxtb	r2, r3
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800df08:	6a3b      	ldr	r3, [r7, #32]
 800df0a:	68db      	ldr	r3, [r3, #12]
 800df0c:	899b      	ldrh	r3, [r3, #12]
 800df0e:	b29b      	uxth	r3, r3
 800df10:	4618      	mov	r0, r3
 800df12:	f7f8 f9f1 	bl	80062f8 <lwip_htons>
 800df16:	4603      	mov	r3, r0
 800df18:	b2db      	uxtb	r3, r3
 800df1a:	f003 0301 	and.w	r3, r3, #1
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d005      	beq.n	800df2e <tcp_zero_window_probe+0x72>
 800df22:	6a3b      	ldr	r3, [r7, #32]
 800df24:	891b      	ldrh	r3, [r3, #8]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d101      	bne.n	800df2e <tcp_zero_window_probe+0x72>
 800df2a:	2301      	movs	r3, #1
 800df2c:	e000      	b.n	800df30 <tcp_zero_window_probe+0x74>
 800df2e:	2300      	movs	r3, #0
 800df30:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800df32:	7ffb      	ldrb	r3, [r7, #31]
 800df34:	2b00      	cmp	r3, #0
 800df36:	bf0c      	ite	eq
 800df38:	2301      	moveq	r3, #1
 800df3a:	2300      	movne	r3, #0
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800df40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df44:	b299      	uxth	r1, r3
 800df46:	6a3b      	ldr	r3, [r7, #32]
 800df48:	68db      	ldr	r3, [r3, #12]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	8bba      	ldrh	r2, [r7, #28]
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f7ff fdf8 	bl	800db44 <tcp_output_alloc_header>
 800df54:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800df56:	69bb      	ldr	r3, [r7, #24]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d102      	bne.n	800df62 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800df5c:	f04f 33ff 	mov.w	r3, #4294967295
 800df60:	e04c      	b.n	800dffc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800df62:	69bb      	ldr	r3, [r7, #24]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800df68:	7ffb      	ldrb	r3, [r7, #31]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d011      	beq.n	800df92 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	899b      	ldrh	r3, [r3, #12]
 800df72:	b29b      	uxth	r3, r3
 800df74:	b21b      	sxth	r3, r3
 800df76:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800df7a:	b21c      	sxth	r4, r3
 800df7c:	2011      	movs	r0, #17
 800df7e:	f7f8 f9bb 	bl	80062f8 <lwip_htons>
 800df82:	4603      	mov	r3, r0
 800df84:	b21b      	sxth	r3, r3
 800df86:	4323      	orrs	r3, r4
 800df88:	b21b      	sxth	r3, r3
 800df8a:	b29a      	uxth	r2, r3
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	819a      	strh	r2, [r3, #12]
 800df90:	e010      	b.n	800dfb4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800df92:	69bb      	ldr	r3, [r7, #24]
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	3314      	adds	r3, #20
 800df98:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800df9a:	6a3b      	ldr	r3, [r7, #32]
 800df9c:	6858      	ldr	r0, [r3, #4]
 800df9e:	6a3b      	ldr	r3, [r7, #32]
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	891a      	ldrh	r2, [r3, #8]
 800dfa4:	6a3b      	ldr	r3, [r7, #32]
 800dfa6:	891b      	ldrh	r3, [r3, #8]
 800dfa8:	1ad3      	subs	r3, r2, r3
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	2201      	movs	r2, #1
 800dfae:	6939      	ldr	r1, [r7, #16]
 800dfb0:	f7f9 ff54 	bl	8007e5c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dfb4:	6a3b      	ldr	r3, [r7, #32]
 800dfb6:	68db      	ldr	r3, [r3, #12]
 800dfb8:	685b      	ldr	r3, [r3, #4]
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7f8 f9b1 	bl	8006322 <lwip_htonl>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	1ad3      	subs	r3, r2, r3
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	da02      	bge.n	800dfd8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	68fa      	ldr	r2, [r7, #12]
 800dfd6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dfd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfdc:	2200      	movs	r2, #0
 800dfde:	69b9      	ldr	r1, [r7, #24]
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f7ff fded 	bl	800dbc0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	3304      	adds	r3, #4
 800dfec:	69b9      	ldr	r1, [r7, #24]
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f7ff fe26 	bl	800dc40 <tcp_output_control_segment>
 800dff4:	4603      	mov	r3, r0
 800dff6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dff8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	372c      	adds	r7, #44	; 0x2c
 800e000:	46bd      	mov	sp, r7
 800e002:	bd90      	pop	{r4, r7, pc}
 800e004:	0801376c 	.word	0x0801376c
 800e008:	08013f64 	.word	0x08013f64
 800e00c:	080137c0 	.word	0x080137c0

0800e010 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e018:	f7fa f80e 	bl	8008038 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e01c:	4b0a      	ldr	r3, [pc, #40]	; (800e048 <tcpip_tcp_timer+0x38>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d103      	bne.n	800e02c <tcpip_tcp_timer+0x1c>
 800e024:	4b09      	ldr	r3, [pc, #36]	; (800e04c <tcpip_tcp_timer+0x3c>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d005      	beq.n	800e038 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e02c:	2200      	movs	r2, #0
 800e02e:	4908      	ldr	r1, [pc, #32]	; (800e050 <tcpip_tcp_timer+0x40>)
 800e030:	20fa      	movs	r0, #250	; 0xfa
 800e032:	f000 f8f3 	bl	800e21c <sys_timeout>
 800e036:	e003      	b.n	800e040 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e038:	4b06      	ldr	r3, [pc, #24]	; (800e054 <tcpip_tcp_timer+0x44>)
 800e03a:	2200      	movs	r2, #0
 800e03c:	601a      	str	r2, [r3, #0]
  }
}
 800e03e:	bf00      	nop
 800e040:	bf00      	nop
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	200086f8 	.word	0x200086f8
 800e04c:	200086fc 	.word	0x200086fc
 800e050:	0800e011 	.word	0x0800e011
 800e054:	20008744 	.word	0x20008744

0800e058 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e05c:	4b0a      	ldr	r3, [pc, #40]	; (800e088 <tcp_timer_needed+0x30>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d10f      	bne.n	800e084 <tcp_timer_needed+0x2c>
 800e064:	4b09      	ldr	r3, [pc, #36]	; (800e08c <tcp_timer_needed+0x34>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d103      	bne.n	800e074 <tcp_timer_needed+0x1c>
 800e06c:	4b08      	ldr	r3, [pc, #32]	; (800e090 <tcp_timer_needed+0x38>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d007      	beq.n	800e084 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e074:	4b04      	ldr	r3, [pc, #16]	; (800e088 <tcp_timer_needed+0x30>)
 800e076:	2201      	movs	r2, #1
 800e078:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e07a:	2200      	movs	r2, #0
 800e07c:	4905      	ldr	r1, [pc, #20]	; (800e094 <tcp_timer_needed+0x3c>)
 800e07e:	20fa      	movs	r0, #250	; 0xfa
 800e080:	f000 f8cc 	bl	800e21c <sys_timeout>
  }
}
 800e084:	bf00      	nop
 800e086:	bd80      	pop	{r7, pc}
 800e088:	20008744 	.word	0x20008744
 800e08c:	200086f8 	.word	0x200086f8
 800e090:	200086fc 	.word	0x200086fc
 800e094:	0800e011 	.word	0x0800e011

0800e098 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b086      	sub	sp, #24
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	60f8      	str	r0, [r7, #12]
 800e0a0:	60b9      	str	r1, [r7, #8]
 800e0a2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e0a4:	2006      	movs	r0, #6
 800e0a6:	f7f8 fe09 	bl	8006cbc <memp_malloc>
 800e0aa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d109      	bne.n	800e0c6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d151      	bne.n	800e15c <sys_timeout_abs+0xc4>
 800e0b8:	4b2a      	ldr	r3, [pc, #168]	; (800e164 <sys_timeout_abs+0xcc>)
 800e0ba:	22be      	movs	r2, #190	; 0xbe
 800e0bc:	492a      	ldr	r1, [pc, #168]	; (800e168 <sys_timeout_abs+0xd0>)
 800e0be:	482b      	ldr	r0, [pc, #172]	; (800e16c <sys_timeout_abs+0xd4>)
 800e0c0:	f002 fdde 	bl	8010c80 <iprintf>
    return;
 800e0c4:	e04a      	b.n	800e15c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	68ba      	ldr	r2, [r7, #8]
 800e0d0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e0d2:	693b      	ldr	r3, [r7, #16]
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	68fa      	ldr	r2, [r7, #12]
 800e0dc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e0de:	4b24      	ldr	r3, [pc, #144]	; (800e170 <sys_timeout_abs+0xd8>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d103      	bne.n	800e0ee <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e0e6:	4a22      	ldr	r2, [pc, #136]	; (800e170 <sys_timeout_abs+0xd8>)
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	6013      	str	r3, [r2, #0]
    return;
 800e0ec:	e037      	b.n	800e15e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	685a      	ldr	r2, [r3, #4]
 800e0f2:	4b1f      	ldr	r3, [pc, #124]	; (800e170 <sys_timeout_abs+0xd8>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	1ad3      	subs	r3, r2, r3
 800e0fa:	0fdb      	lsrs	r3, r3, #31
 800e0fc:	f003 0301 	and.w	r3, r3, #1
 800e100:	b2db      	uxtb	r3, r3
 800e102:	2b00      	cmp	r3, #0
 800e104:	d007      	beq.n	800e116 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e106:	4b1a      	ldr	r3, [pc, #104]	; (800e170 <sys_timeout_abs+0xd8>)
 800e108:	681a      	ldr	r2, [r3, #0]
 800e10a:	693b      	ldr	r3, [r7, #16]
 800e10c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e10e:	4a18      	ldr	r2, [pc, #96]	; (800e170 <sys_timeout_abs+0xd8>)
 800e110:	693b      	ldr	r3, [r7, #16]
 800e112:	6013      	str	r3, [r2, #0]
 800e114:	e023      	b.n	800e15e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e116:	4b16      	ldr	r3, [pc, #88]	; (800e170 <sys_timeout_abs+0xd8>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	617b      	str	r3, [r7, #20]
 800e11c:	e01a      	b.n	800e154 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d00b      	beq.n	800e13e <sys_timeout_abs+0xa6>
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	685a      	ldr	r2, [r3, #4]
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	1ad3      	subs	r3, r2, r3
 800e132:	0fdb      	lsrs	r3, r3, #31
 800e134:	f003 0301 	and.w	r3, r3, #1
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d007      	beq.n	800e14e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	681a      	ldr	r2, [r3, #0]
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	693a      	ldr	r2, [r7, #16]
 800e14a:	601a      	str	r2, [r3, #0]
        break;
 800e14c:	e007      	b.n	800e15e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	617b      	str	r3, [r7, #20]
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d1e1      	bne.n	800e11e <sys_timeout_abs+0x86>
 800e15a:	e000      	b.n	800e15e <sys_timeout_abs+0xc6>
    return;
 800e15c:	bf00      	nop
      }
    }
  }
}
 800e15e:	3718      	adds	r7, #24
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}
 800e164:	08013f88 	.word	0x08013f88
 800e168:	08013fbc 	.word	0x08013fbc
 800e16c:	08013ffc 	.word	0x08013ffc
 800e170:	2000873c 	.word	0x2000873c

0800e174 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b086      	sub	sp, #24
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	685b      	ldr	r3, [r3, #4]
 800e184:	4798      	blx	r3

  now = sys_now();
 800e186:	f7f6 fb4d 	bl	8004824 <sys_now>
 800e18a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	681a      	ldr	r2, [r3, #0]
 800e190:	4b0f      	ldr	r3, [pc, #60]	; (800e1d0 <lwip_cyclic_timer+0x5c>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	4413      	add	r3, r2
 800e196:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e198:	68fa      	ldr	r2, [r7, #12]
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	1ad3      	subs	r3, r2, r3
 800e19e:	0fdb      	lsrs	r3, r3, #31
 800e1a0:	f003 0301 	and.w	r3, r3, #1
 800e1a4:	b2db      	uxtb	r3, r3
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d009      	beq.n	800e1be <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	681a      	ldr	r2, [r3, #0]
 800e1ae:	693b      	ldr	r3, [r7, #16]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	4907      	ldr	r1, [pc, #28]	; (800e1d4 <lwip_cyclic_timer+0x60>)
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7ff ff6e 	bl	800e098 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e1bc:	e004      	b.n	800e1c8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	4904      	ldr	r1, [pc, #16]	; (800e1d4 <lwip_cyclic_timer+0x60>)
 800e1c2:	68f8      	ldr	r0, [r7, #12]
 800e1c4:	f7ff ff68 	bl	800e098 <sys_timeout_abs>
}
 800e1c8:	bf00      	nop
 800e1ca:	3718      	adds	r7, #24
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}
 800e1d0:	20008740 	.word	0x20008740
 800e1d4:	0800e175 	.word	0x0800e175

0800e1d8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b082      	sub	sp, #8
 800e1dc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e1de:	2301      	movs	r3, #1
 800e1e0:	607b      	str	r3, [r7, #4]
 800e1e2:	e00e      	b.n	800e202 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e1e4:	4a0b      	ldr	r2, [pc, #44]	; (800e214 <sys_timeouts_init+0x3c>)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	00db      	lsls	r3, r3, #3
 800e1f0:	4a08      	ldr	r2, [pc, #32]	; (800e214 <sys_timeouts_init+0x3c>)
 800e1f2:	4413      	add	r3, r2
 800e1f4:	461a      	mov	r2, r3
 800e1f6:	4908      	ldr	r1, [pc, #32]	; (800e218 <sys_timeouts_init+0x40>)
 800e1f8:	f000 f810 	bl	800e21c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	3301      	adds	r3, #1
 800e200:	607b      	str	r3, [r7, #4]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2b02      	cmp	r3, #2
 800e206:	d9ed      	bls.n	800e1e4 <sys_timeouts_init+0xc>
  }
}
 800e208:	bf00      	nop
 800e20a:	bf00      	nop
 800e20c:	3708      	adds	r7, #8
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}
 800e212:	bf00      	nop
 800e214:	08015050 	.word	0x08015050
 800e218:	0800e175 	.word	0x0800e175

0800e21c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b086      	sub	sp, #24
 800e220:	af00      	add	r7, sp, #0
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	60b9      	str	r1, [r7, #8]
 800e226:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e22e:	d306      	bcc.n	800e23e <sys_timeout+0x22>
 800e230:	4b0a      	ldr	r3, [pc, #40]	; (800e25c <sys_timeout+0x40>)
 800e232:	f240 1229 	movw	r2, #297	; 0x129
 800e236:	490a      	ldr	r1, [pc, #40]	; (800e260 <sys_timeout+0x44>)
 800e238:	480a      	ldr	r0, [pc, #40]	; (800e264 <sys_timeout+0x48>)
 800e23a:	f002 fd21 	bl	8010c80 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e23e:	f7f6 faf1 	bl	8004824 <sys_now>
 800e242:	4602      	mov	r2, r0
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	4413      	add	r3, r2
 800e248:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e24a:	687a      	ldr	r2, [r7, #4]
 800e24c:	68b9      	ldr	r1, [r7, #8]
 800e24e:	6978      	ldr	r0, [r7, #20]
 800e250:	f7ff ff22 	bl	800e098 <sys_timeout_abs>
#endif
}
 800e254:	bf00      	nop
 800e256:	3718      	adds	r7, #24
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}
 800e25c:	08013f88 	.word	0x08013f88
 800e260:	08014024 	.word	0x08014024
 800e264:	08013ffc 	.word	0x08013ffc

0800e268 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b084      	sub	sp, #16
 800e26c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e26e:	f7f6 fad9 	bl	8004824 <sys_now>
 800e272:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800e274:	4b1a      	ldr	r3, [pc, #104]	; (800e2e0 <sys_check_timeouts+0x78>)
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	b2db      	uxtb	r3, r3
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d001      	beq.n	800e282 <sys_check_timeouts+0x1a>
 800e27e:	f7f9 f8c9 	bl	8007414 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800e282:	4b18      	ldr	r3, [pc, #96]	; (800e2e4 <sys_check_timeouts+0x7c>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d022      	beq.n	800e2d4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	685b      	ldr	r3, [r3, #4]
 800e292:	68fa      	ldr	r2, [r7, #12]
 800e294:	1ad3      	subs	r3, r2, r3
 800e296:	0fdb      	lsrs	r3, r3, #31
 800e298:	f003 0301 	and.w	r3, r3, #1
 800e29c:	b2db      	uxtb	r3, r3
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d11a      	bne.n	800e2d8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4a0f      	ldr	r2, [pc, #60]	; (800e2e4 <sys_check_timeouts+0x7c>)
 800e2a8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	689b      	ldr	r3, [r3, #8]
 800e2ae:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	68db      	ldr	r3, [r3, #12]
 800e2b4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	685b      	ldr	r3, [r3, #4]
 800e2ba:	4a0b      	ldr	r2, [pc, #44]	; (800e2e8 <sys_check_timeouts+0x80>)
 800e2bc:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e2be:	68b9      	ldr	r1, [r7, #8]
 800e2c0:	2006      	movs	r0, #6
 800e2c2:	f7f8 fd6b 	bl	8006d9c <memp_free>
    if (handler != NULL) {
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d0d3      	beq.n	800e274 <sys_check_timeouts+0xc>
      handler(arg);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6838      	ldr	r0, [r7, #0]
 800e2d0:	4798      	blx	r3
  do {
 800e2d2:	e7cf      	b.n	800e274 <sys_check_timeouts+0xc>
      return;
 800e2d4:	bf00      	nop
 800e2d6:	e000      	b.n	800e2da <sys_check_timeouts+0x72>
      return;
 800e2d8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e2da:	3710      	adds	r7, #16
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}
 800e2e0:	200086e9 	.word	0x200086e9
 800e2e4:	2000873c 	.word	0x2000873c
 800e2e8:	20008740 	.word	0x20008740

0800e2ec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e2f0:	f002 fcde 	bl	8010cb0 <rand>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e302:	b29a      	uxth	r2, r3
 800e304:	4b01      	ldr	r3, [pc, #4]	; (800e30c <udp_init+0x20>)
 800e306:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e308:	bf00      	nop
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	20000028 	.word	0x20000028

0800e310 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	4613      	mov	r3, r2
 800e31c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d105      	bne.n	800e330 <udp_input_local_match+0x20>
 800e324:	4b27      	ldr	r3, [pc, #156]	; (800e3c4 <udp_input_local_match+0xb4>)
 800e326:	2287      	movs	r2, #135	; 0x87
 800e328:	4927      	ldr	r1, [pc, #156]	; (800e3c8 <udp_input_local_match+0xb8>)
 800e32a:	4828      	ldr	r0, [pc, #160]	; (800e3cc <udp_input_local_match+0xbc>)
 800e32c:	f002 fca8 	bl	8010c80 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e330:	68bb      	ldr	r3, [r7, #8]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d105      	bne.n	800e342 <udp_input_local_match+0x32>
 800e336:	4b23      	ldr	r3, [pc, #140]	; (800e3c4 <udp_input_local_match+0xb4>)
 800e338:	2288      	movs	r2, #136	; 0x88
 800e33a:	4925      	ldr	r1, [pc, #148]	; (800e3d0 <udp_input_local_match+0xc0>)
 800e33c:	4823      	ldr	r0, [pc, #140]	; (800e3cc <udp_input_local_match+0xbc>)
 800e33e:	f002 fc9f 	bl	8010c80 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	7a1b      	ldrb	r3, [r3, #8]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d00b      	beq.n	800e362 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	7a1a      	ldrb	r2, [r3, #8]
 800e34e:	4b21      	ldr	r3, [pc, #132]	; (800e3d4 <udp_input_local_match+0xc4>)
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e356:	3301      	adds	r3, #1
 800e358:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d001      	beq.n	800e362 <udp_input_local_match+0x52>
    return 0;
 800e35e:	2300      	movs	r3, #0
 800e360:	e02b      	b.n	800e3ba <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e362:	79fb      	ldrb	r3, [r7, #7]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d018      	beq.n	800e39a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d013      	beq.n	800e396 <udp_input_local_match+0x86>
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d00f      	beq.n	800e396 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e376:	4b17      	ldr	r3, [pc, #92]	; (800e3d4 <udp_input_local_match+0xc4>)
 800e378:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e37a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e37e:	d00a      	beq.n	800e396 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681a      	ldr	r2, [r3, #0]
 800e384:	4b13      	ldr	r3, [pc, #76]	; (800e3d4 <udp_input_local_match+0xc4>)
 800e386:	695b      	ldr	r3, [r3, #20]
 800e388:	405a      	eors	r2, r3
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	3308      	adds	r3, #8
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e392:	2b00      	cmp	r3, #0
 800e394:	d110      	bne.n	800e3b8 <udp_input_local_match+0xa8>
          return 1;
 800e396:	2301      	movs	r3, #1
 800e398:	e00f      	b.n	800e3ba <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d009      	beq.n	800e3b4 <udp_input_local_match+0xa4>
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d005      	beq.n	800e3b4 <udp_input_local_match+0xa4>
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	681a      	ldr	r2, [r3, #0]
 800e3ac:	4b09      	ldr	r3, [pc, #36]	; (800e3d4 <udp_input_local_match+0xc4>)
 800e3ae:	695b      	ldr	r3, [r3, #20]
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	d101      	bne.n	800e3b8 <udp_input_local_match+0xa8>
        return 1;
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	e000      	b.n	800e3ba <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e3b8:	2300      	movs	r3, #0
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3710      	adds	r7, #16
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	08014070 	.word	0x08014070
 800e3c8:	080140a0 	.word	0x080140a0
 800e3cc:	080140c4 	.word	0x080140c4
 800e3d0:	080140ec 	.word	0x080140ec
 800e3d4:	2000517c 	.word	0x2000517c

0800e3d8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e3d8:	b590      	push	{r4, r7, lr}
 800e3da:	b08d      	sub	sp, #52	; 0x34
 800e3dc:	af02      	add	r7, sp, #8
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d105      	bne.n	800e3f8 <udp_input+0x20>
 800e3ec:	4b7c      	ldr	r3, [pc, #496]	; (800e5e0 <udp_input+0x208>)
 800e3ee:	22cf      	movs	r2, #207	; 0xcf
 800e3f0:	497c      	ldr	r1, [pc, #496]	; (800e5e4 <udp_input+0x20c>)
 800e3f2:	487d      	ldr	r0, [pc, #500]	; (800e5e8 <udp_input+0x210>)
 800e3f4:	f002 fc44 	bl	8010c80 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d105      	bne.n	800e40a <udp_input+0x32>
 800e3fe:	4b78      	ldr	r3, [pc, #480]	; (800e5e0 <udp_input+0x208>)
 800e400:	22d0      	movs	r2, #208	; 0xd0
 800e402:	497a      	ldr	r1, [pc, #488]	; (800e5ec <udp_input+0x214>)
 800e404:	4878      	ldr	r0, [pc, #480]	; (800e5e8 <udp_input+0x210>)
 800e406:	f002 fc3b 	bl	8010c80 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	895b      	ldrh	r3, [r3, #10]
 800e40e:	2b07      	cmp	r3, #7
 800e410:	d803      	bhi.n	800e41a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f7f9 fb38 	bl	8007a88 <pbuf_free>
    goto end;
 800e418:	e0de      	b.n	800e5d8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	685b      	ldr	r3, [r3, #4]
 800e41e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e420:	4b73      	ldr	r3, [pc, #460]	; (800e5f0 <udp_input+0x218>)
 800e422:	695b      	ldr	r3, [r3, #20]
 800e424:	4a72      	ldr	r2, [pc, #456]	; (800e5f0 <udp_input+0x218>)
 800e426:	6812      	ldr	r2, [r2, #0]
 800e428:	4611      	mov	r1, r2
 800e42a:	4618      	mov	r0, r3
 800e42c:	f001 fc88 	bl	800fd40 <ip4_addr_isbroadcast_u32>
 800e430:	4603      	mov	r3, r0
 800e432:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	881b      	ldrh	r3, [r3, #0]
 800e438:	b29b      	uxth	r3, r3
 800e43a:	4618      	mov	r0, r3
 800e43c:	f7f7 ff5c 	bl	80062f8 <lwip_htons>
 800e440:	4603      	mov	r3, r0
 800e442:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	885b      	ldrh	r3, [r3, #2]
 800e448:	b29b      	uxth	r3, r3
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7f7 ff54 	bl	80062f8 <lwip_htons>
 800e450:	4603      	mov	r3, r0
 800e452:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e454:	2300      	movs	r3, #0
 800e456:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e458:	2300      	movs	r3, #0
 800e45a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e45c:	2300      	movs	r3, #0
 800e45e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e460:	4b64      	ldr	r3, [pc, #400]	; (800e5f4 <udp_input+0x21c>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	627b      	str	r3, [r7, #36]	; 0x24
 800e466:	e054      	b.n	800e512 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46a:	8a5b      	ldrh	r3, [r3, #18]
 800e46c:	89fa      	ldrh	r2, [r7, #14]
 800e46e:	429a      	cmp	r2, r3
 800e470:	d14a      	bne.n	800e508 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e472:	7cfb      	ldrb	r3, [r7, #19]
 800e474:	461a      	mov	r2, r3
 800e476:	6839      	ldr	r1, [r7, #0]
 800e478:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e47a:	f7ff ff49 	bl	800e310 <udp_input_local_match>
 800e47e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e480:	2b00      	cmp	r3, #0
 800e482:	d041      	beq.n	800e508 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e486:	7c1b      	ldrb	r3, [r3, #16]
 800e488:	f003 0304 	and.w	r3, r3, #4
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d11d      	bne.n	800e4cc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d102      	bne.n	800e49c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e498:	61fb      	str	r3, [r7, #28]
 800e49a:	e017      	b.n	800e4cc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e49c:	7cfb      	ldrb	r3, [r7, #19]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d014      	beq.n	800e4cc <udp_input+0xf4>
 800e4a2:	4b53      	ldr	r3, [pc, #332]	; (800e5f0 <udp_input+0x218>)
 800e4a4:	695b      	ldr	r3, [r3, #20]
 800e4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4aa:	d10f      	bne.n	800e4cc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e4ac:	69fb      	ldr	r3, [r7, #28]
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	3304      	adds	r3, #4
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d008      	beq.n	800e4cc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4bc:	681a      	ldr	r2, [r3, #0]
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	3304      	adds	r3, #4
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d101      	bne.n	800e4cc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ca:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ce:	8a9b      	ldrh	r3, [r3, #20]
 800e4d0:	8a3a      	ldrh	r2, [r7, #16]
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	d118      	bne.n	800e508 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d005      	beq.n	800e4ea <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e0:	685a      	ldr	r2, [r3, #4]
 800e4e2:	4b43      	ldr	r3, [pc, #268]	; (800e5f0 <udp_input+0x218>)
 800e4e4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d10e      	bne.n	800e508 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e4ea:	6a3b      	ldr	r3, [r7, #32]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d014      	beq.n	800e51a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f2:	68da      	ldr	r2, [r3, #12]
 800e4f4:	6a3b      	ldr	r3, [r7, #32]
 800e4f6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e4f8:	4b3e      	ldr	r3, [pc, #248]	; (800e5f4 <udp_input+0x21c>)
 800e4fa:	681a      	ldr	r2, [r3, #0]
 800e4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e500:	4a3c      	ldr	r2, [pc, #240]	; (800e5f4 <udp_input+0x21c>)
 800e502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e504:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e506:	e008      	b.n	800e51a <udp_input+0x142>
      }
    }

    prev = pcb;
 800e508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50e:	68db      	ldr	r3, [r3, #12]
 800e510:	627b      	str	r3, [r7, #36]	; 0x24
 800e512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e514:	2b00      	cmp	r3, #0
 800e516:	d1a7      	bne.n	800e468 <udp_input+0x90>
 800e518:	e000      	b.n	800e51c <udp_input+0x144>
        break;
 800e51a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d101      	bne.n	800e526 <udp_input+0x14e>
    pcb = uncon_pcb;
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d002      	beq.n	800e532 <udp_input+0x15a>
    for_us = 1;
 800e52c:	2301      	movs	r3, #1
 800e52e:	76fb      	strb	r3, [r7, #27]
 800e530:	e00a      	b.n	800e548 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	3304      	adds	r3, #4
 800e536:	681a      	ldr	r2, [r3, #0]
 800e538:	4b2d      	ldr	r3, [pc, #180]	; (800e5f0 <udp_input+0x218>)
 800e53a:	695b      	ldr	r3, [r3, #20]
 800e53c:	429a      	cmp	r2, r3
 800e53e:	bf0c      	ite	eq
 800e540:	2301      	moveq	r3, #1
 800e542:	2300      	movne	r3, #0
 800e544:	b2db      	uxtb	r3, r3
 800e546:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e548:	7efb      	ldrb	r3, [r7, #27]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d041      	beq.n	800e5d2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e54e:	2108      	movs	r1, #8
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f7f9 fa13 	bl	800797c <pbuf_remove_header>
 800e556:	4603      	mov	r3, r0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d00a      	beq.n	800e572 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e55c:	4b20      	ldr	r3, [pc, #128]	; (800e5e0 <udp_input+0x208>)
 800e55e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e562:	4925      	ldr	r1, [pc, #148]	; (800e5f8 <udp_input+0x220>)
 800e564:	4820      	ldr	r0, [pc, #128]	; (800e5e8 <udp_input+0x210>)
 800e566:	f002 fb8b 	bl	8010c80 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f7f9 fa8c 	bl	8007a88 <pbuf_free>
      goto end;
 800e570:	e032      	b.n	800e5d8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e574:	2b00      	cmp	r3, #0
 800e576:	d012      	beq.n	800e59e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57a:	699b      	ldr	r3, [r3, #24]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d00a      	beq.n	800e596 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e582:	699c      	ldr	r4, [r3, #24]
 800e584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e586:	69d8      	ldr	r0, [r3, #28]
 800e588:	8a3b      	ldrh	r3, [r7, #16]
 800e58a:	9300      	str	r3, [sp, #0]
 800e58c:	4b1b      	ldr	r3, [pc, #108]	; (800e5fc <udp_input+0x224>)
 800e58e:	687a      	ldr	r2, [r7, #4]
 800e590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e592:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e594:	e021      	b.n	800e5da <udp_input+0x202>
        pbuf_free(p);
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f7f9 fa76 	bl	8007a88 <pbuf_free>
        goto end;
 800e59c:	e01c      	b.n	800e5d8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e59e:	7cfb      	ldrb	r3, [r7, #19]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d112      	bne.n	800e5ca <udp_input+0x1f2>
 800e5a4:	4b12      	ldr	r3, [pc, #72]	; (800e5f0 <udp_input+0x218>)
 800e5a6:	695b      	ldr	r3, [r3, #20]
 800e5a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e5ac:	2be0      	cmp	r3, #224	; 0xe0
 800e5ae:	d00c      	beq.n	800e5ca <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e5b0:	4b0f      	ldr	r3, [pc, #60]	; (800e5f0 <udp_input+0x218>)
 800e5b2:	899b      	ldrh	r3, [r3, #12]
 800e5b4:	3308      	adds	r3, #8
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	b21b      	sxth	r3, r3
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f7f9 fa50 	bl	8007a62 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e5c2:	2103      	movs	r1, #3
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f001 f89b 	bl	800f700 <icmp_dest_unreach>
      pbuf_free(p);
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f7f9 fa5c 	bl	8007a88 <pbuf_free>
  return;
 800e5d0:	e003      	b.n	800e5da <udp_input+0x202>
    pbuf_free(p);
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f7f9 fa58 	bl	8007a88 <pbuf_free>
  return;
 800e5d8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e5da:	372c      	adds	r7, #44	; 0x2c
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd90      	pop	{r4, r7, pc}
 800e5e0:	08014070 	.word	0x08014070
 800e5e4:	08014114 	.word	0x08014114
 800e5e8:	080140c4 	.word	0x080140c4
 800e5ec:	0801412c 	.word	0x0801412c
 800e5f0:	2000517c 	.word	0x2000517c
 800e5f4:	20008748 	.word	0x20008748
 800e5f8:	08014148 	.word	0x08014148
 800e5fc:	2000518c 	.word	0x2000518c

0800e600 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e600:	b480      	push	{r7}
 800e602:	b085      	sub	sp, #20
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d01e      	beq.n	800e64e <udp_netif_ip_addr_changed+0x4e>
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d01a      	beq.n	800e64e <udp_netif_ip_addr_changed+0x4e>
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d017      	beq.n	800e64e <udp_netif_ip_addr_changed+0x4e>
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d013      	beq.n	800e64e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e626:	4b0d      	ldr	r3, [pc, #52]	; (800e65c <udp_netif_ip_addr_changed+0x5c>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	60fb      	str	r3, [r7, #12]
 800e62c:	e00c      	b.n	800e648 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	681a      	ldr	r2, [r3, #0]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	429a      	cmp	r2, r3
 800e638:	d103      	bne.n	800e642 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	681a      	ldr	r2, [r3, #0]
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	68db      	ldr	r3, [r3, #12]
 800e646:	60fb      	str	r3, [r7, #12]
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d1ef      	bne.n	800e62e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e64e:	bf00      	nop
 800e650:	3714      	adds	r7, #20
 800e652:	46bd      	mov	sp, r7
 800e654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e658:	4770      	bx	lr
 800e65a:	bf00      	nop
 800e65c:	20008748 	.word	0x20008748

0800e660 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e668:	4915      	ldr	r1, [pc, #84]	; (800e6c0 <etharp_free_entry+0x60>)
 800e66a:	687a      	ldr	r2, [r7, #4]
 800e66c:	4613      	mov	r3, r2
 800e66e:	005b      	lsls	r3, r3, #1
 800e670:	4413      	add	r3, r2
 800e672:	00db      	lsls	r3, r3, #3
 800e674:	440b      	add	r3, r1
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d013      	beq.n	800e6a4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e67c:	4910      	ldr	r1, [pc, #64]	; (800e6c0 <etharp_free_entry+0x60>)
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	4613      	mov	r3, r2
 800e682:	005b      	lsls	r3, r3, #1
 800e684:	4413      	add	r3, r2
 800e686:	00db      	lsls	r3, r3, #3
 800e688:	440b      	add	r3, r1
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	4618      	mov	r0, r3
 800e68e:	f7f9 f9fb 	bl	8007a88 <pbuf_free>
    arp_table[i].q = NULL;
 800e692:	490b      	ldr	r1, [pc, #44]	; (800e6c0 <etharp_free_entry+0x60>)
 800e694:	687a      	ldr	r2, [r7, #4]
 800e696:	4613      	mov	r3, r2
 800e698:	005b      	lsls	r3, r3, #1
 800e69a:	4413      	add	r3, r2
 800e69c:	00db      	lsls	r3, r3, #3
 800e69e:	440b      	add	r3, r1
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e6a4:	4906      	ldr	r1, [pc, #24]	; (800e6c0 <etharp_free_entry+0x60>)
 800e6a6:	687a      	ldr	r2, [r7, #4]
 800e6a8:	4613      	mov	r3, r2
 800e6aa:	005b      	lsls	r3, r3, #1
 800e6ac:	4413      	add	r3, r2
 800e6ae:	00db      	lsls	r3, r3, #3
 800e6b0:	440b      	add	r3, r1
 800e6b2:	3314      	adds	r3, #20
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e6b8:	bf00      	nop
 800e6ba:	3708      	adds	r7, #8
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}
 800e6c0:	2000874c 	.word	0x2000874c

0800e6c4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	607b      	str	r3, [r7, #4]
 800e6ce:	e096      	b.n	800e7fe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e6d0:	494f      	ldr	r1, [pc, #316]	; (800e810 <etharp_tmr+0x14c>)
 800e6d2:	687a      	ldr	r2, [r7, #4]
 800e6d4:	4613      	mov	r3, r2
 800e6d6:	005b      	lsls	r3, r3, #1
 800e6d8:	4413      	add	r3, r2
 800e6da:	00db      	lsls	r3, r3, #3
 800e6dc:	440b      	add	r3, r1
 800e6de:	3314      	adds	r3, #20
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e6e4:	78fb      	ldrb	r3, [r7, #3]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	f000 8086 	beq.w	800e7f8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e6ec:	4948      	ldr	r1, [pc, #288]	; (800e810 <etharp_tmr+0x14c>)
 800e6ee:	687a      	ldr	r2, [r7, #4]
 800e6f0:	4613      	mov	r3, r2
 800e6f2:	005b      	lsls	r3, r3, #1
 800e6f4:	4413      	add	r3, r2
 800e6f6:	00db      	lsls	r3, r3, #3
 800e6f8:	440b      	add	r3, r1
 800e6fa:	3312      	adds	r3, #18
 800e6fc:	881b      	ldrh	r3, [r3, #0]
 800e6fe:	3301      	adds	r3, #1
 800e700:	b298      	uxth	r0, r3
 800e702:	4943      	ldr	r1, [pc, #268]	; (800e810 <etharp_tmr+0x14c>)
 800e704:	687a      	ldr	r2, [r7, #4]
 800e706:	4613      	mov	r3, r2
 800e708:	005b      	lsls	r3, r3, #1
 800e70a:	4413      	add	r3, r2
 800e70c:	00db      	lsls	r3, r3, #3
 800e70e:	440b      	add	r3, r1
 800e710:	3312      	adds	r3, #18
 800e712:	4602      	mov	r2, r0
 800e714:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e716:	493e      	ldr	r1, [pc, #248]	; (800e810 <etharp_tmr+0x14c>)
 800e718:	687a      	ldr	r2, [r7, #4]
 800e71a:	4613      	mov	r3, r2
 800e71c:	005b      	lsls	r3, r3, #1
 800e71e:	4413      	add	r3, r2
 800e720:	00db      	lsls	r3, r3, #3
 800e722:	440b      	add	r3, r1
 800e724:	3312      	adds	r3, #18
 800e726:	881b      	ldrh	r3, [r3, #0]
 800e728:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e72c:	d215      	bcs.n	800e75a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e72e:	4938      	ldr	r1, [pc, #224]	; (800e810 <etharp_tmr+0x14c>)
 800e730:	687a      	ldr	r2, [r7, #4]
 800e732:	4613      	mov	r3, r2
 800e734:	005b      	lsls	r3, r3, #1
 800e736:	4413      	add	r3, r2
 800e738:	00db      	lsls	r3, r3, #3
 800e73a:	440b      	add	r3, r1
 800e73c:	3314      	adds	r3, #20
 800e73e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e740:	2b01      	cmp	r3, #1
 800e742:	d10e      	bne.n	800e762 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e744:	4932      	ldr	r1, [pc, #200]	; (800e810 <etharp_tmr+0x14c>)
 800e746:	687a      	ldr	r2, [r7, #4]
 800e748:	4613      	mov	r3, r2
 800e74a:	005b      	lsls	r3, r3, #1
 800e74c:	4413      	add	r3, r2
 800e74e:	00db      	lsls	r3, r3, #3
 800e750:	440b      	add	r3, r1
 800e752:	3312      	adds	r3, #18
 800e754:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e756:	2b04      	cmp	r3, #4
 800e758:	d903      	bls.n	800e762 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f7ff ff80 	bl	800e660 <etharp_free_entry>
 800e760:	e04a      	b.n	800e7f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e762:	492b      	ldr	r1, [pc, #172]	; (800e810 <etharp_tmr+0x14c>)
 800e764:	687a      	ldr	r2, [r7, #4]
 800e766:	4613      	mov	r3, r2
 800e768:	005b      	lsls	r3, r3, #1
 800e76a:	4413      	add	r3, r2
 800e76c:	00db      	lsls	r3, r3, #3
 800e76e:	440b      	add	r3, r1
 800e770:	3314      	adds	r3, #20
 800e772:	781b      	ldrb	r3, [r3, #0]
 800e774:	2b03      	cmp	r3, #3
 800e776:	d10a      	bne.n	800e78e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e778:	4925      	ldr	r1, [pc, #148]	; (800e810 <etharp_tmr+0x14c>)
 800e77a:	687a      	ldr	r2, [r7, #4]
 800e77c:	4613      	mov	r3, r2
 800e77e:	005b      	lsls	r3, r3, #1
 800e780:	4413      	add	r3, r2
 800e782:	00db      	lsls	r3, r3, #3
 800e784:	440b      	add	r3, r1
 800e786:	3314      	adds	r3, #20
 800e788:	2204      	movs	r2, #4
 800e78a:	701a      	strb	r2, [r3, #0]
 800e78c:	e034      	b.n	800e7f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e78e:	4920      	ldr	r1, [pc, #128]	; (800e810 <etharp_tmr+0x14c>)
 800e790:	687a      	ldr	r2, [r7, #4]
 800e792:	4613      	mov	r3, r2
 800e794:	005b      	lsls	r3, r3, #1
 800e796:	4413      	add	r3, r2
 800e798:	00db      	lsls	r3, r3, #3
 800e79a:	440b      	add	r3, r1
 800e79c:	3314      	adds	r3, #20
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	2b04      	cmp	r3, #4
 800e7a2:	d10a      	bne.n	800e7ba <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e7a4:	491a      	ldr	r1, [pc, #104]	; (800e810 <etharp_tmr+0x14c>)
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	4613      	mov	r3, r2
 800e7aa:	005b      	lsls	r3, r3, #1
 800e7ac:	4413      	add	r3, r2
 800e7ae:	00db      	lsls	r3, r3, #3
 800e7b0:	440b      	add	r3, r1
 800e7b2:	3314      	adds	r3, #20
 800e7b4:	2202      	movs	r2, #2
 800e7b6:	701a      	strb	r2, [r3, #0]
 800e7b8:	e01e      	b.n	800e7f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e7ba:	4915      	ldr	r1, [pc, #84]	; (800e810 <etharp_tmr+0x14c>)
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	4613      	mov	r3, r2
 800e7c0:	005b      	lsls	r3, r3, #1
 800e7c2:	4413      	add	r3, r2
 800e7c4:	00db      	lsls	r3, r3, #3
 800e7c6:	440b      	add	r3, r1
 800e7c8:	3314      	adds	r3, #20
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	d113      	bne.n	800e7f8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e7d0:	490f      	ldr	r1, [pc, #60]	; (800e810 <etharp_tmr+0x14c>)
 800e7d2:	687a      	ldr	r2, [r7, #4]
 800e7d4:	4613      	mov	r3, r2
 800e7d6:	005b      	lsls	r3, r3, #1
 800e7d8:	4413      	add	r3, r2
 800e7da:	00db      	lsls	r3, r3, #3
 800e7dc:	440b      	add	r3, r1
 800e7de:	3308      	adds	r3, #8
 800e7e0:	6818      	ldr	r0, [r3, #0]
 800e7e2:	687a      	ldr	r2, [r7, #4]
 800e7e4:	4613      	mov	r3, r2
 800e7e6:	005b      	lsls	r3, r3, #1
 800e7e8:	4413      	add	r3, r2
 800e7ea:	00db      	lsls	r3, r3, #3
 800e7ec:	4a08      	ldr	r2, [pc, #32]	; (800e810 <etharp_tmr+0x14c>)
 800e7ee:	4413      	add	r3, r2
 800e7f0:	3304      	adds	r3, #4
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	f000 fe6e 	bl	800f4d4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	607b      	str	r3, [r7, #4]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2b09      	cmp	r3, #9
 800e802:	f77f af65 	ble.w	800e6d0 <etharp_tmr+0xc>
      }
    }
  }
}
 800e806:	bf00      	nop
 800e808:	bf00      	nop
 800e80a:	3708      	adds	r7, #8
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}
 800e810:	2000874c 	.word	0x2000874c

0800e814 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b08a      	sub	sp, #40	; 0x28
 800e818:	af00      	add	r7, sp, #0
 800e81a:	60f8      	str	r0, [r7, #12]
 800e81c:	460b      	mov	r3, r1
 800e81e:	607a      	str	r2, [r7, #4]
 800e820:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e822:	230a      	movs	r3, #10
 800e824:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e826:	230a      	movs	r3, #10
 800e828:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800e82a:	230a      	movs	r3, #10
 800e82c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800e82e:	2300      	movs	r3, #0
 800e830:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e832:	230a      	movs	r3, #10
 800e834:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e836:	2300      	movs	r3, #0
 800e838:	83bb      	strh	r3, [r7, #28]
 800e83a:	2300      	movs	r3, #0
 800e83c:	837b      	strh	r3, [r7, #26]
 800e83e:	2300      	movs	r3, #0
 800e840:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e842:	2300      	movs	r3, #0
 800e844:	843b      	strh	r3, [r7, #32]
 800e846:	e0ae      	b.n	800e9a6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e848:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e84c:	49a6      	ldr	r1, [pc, #664]	; (800eae8 <etharp_find_entry+0x2d4>)
 800e84e:	4613      	mov	r3, r2
 800e850:	005b      	lsls	r3, r3, #1
 800e852:	4413      	add	r3, r2
 800e854:	00db      	lsls	r3, r3, #3
 800e856:	440b      	add	r3, r1
 800e858:	3314      	adds	r3, #20
 800e85a:	781b      	ldrb	r3, [r3, #0]
 800e85c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e85e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e862:	2b0a      	cmp	r3, #10
 800e864:	d105      	bne.n	800e872 <etharp_find_entry+0x5e>
 800e866:	7dfb      	ldrb	r3, [r7, #23]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d102      	bne.n	800e872 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e86c:	8c3b      	ldrh	r3, [r7, #32]
 800e86e:	847b      	strh	r3, [r7, #34]	; 0x22
 800e870:	e095      	b.n	800e99e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e872:	7dfb      	ldrb	r3, [r7, #23]
 800e874:	2b00      	cmp	r3, #0
 800e876:	f000 8092 	beq.w	800e99e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e87a:	7dfb      	ldrb	r3, [r7, #23]
 800e87c:	2b01      	cmp	r3, #1
 800e87e:	d009      	beq.n	800e894 <etharp_find_entry+0x80>
 800e880:	7dfb      	ldrb	r3, [r7, #23]
 800e882:	2b01      	cmp	r3, #1
 800e884:	d806      	bhi.n	800e894 <etharp_find_entry+0x80>
 800e886:	4b99      	ldr	r3, [pc, #612]	; (800eaec <etharp_find_entry+0x2d8>)
 800e888:	f240 1223 	movw	r2, #291	; 0x123
 800e88c:	4998      	ldr	r1, [pc, #608]	; (800eaf0 <etharp_find_entry+0x2dc>)
 800e88e:	4899      	ldr	r0, [pc, #612]	; (800eaf4 <etharp_find_entry+0x2e0>)
 800e890:	f002 f9f6 	bl	8010c80 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d020      	beq.n	800e8dc <etharp_find_entry+0xc8>
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	6819      	ldr	r1, [r3, #0]
 800e89e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e8a2:	4891      	ldr	r0, [pc, #580]	; (800eae8 <etharp_find_entry+0x2d4>)
 800e8a4:	4613      	mov	r3, r2
 800e8a6:	005b      	lsls	r3, r3, #1
 800e8a8:	4413      	add	r3, r2
 800e8aa:	00db      	lsls	r3, r3, #3
 800e8ac:	4403      	add	r3, r0
 800e8ae:	3304      	adds	r3, #4
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	4299      	cmp	r1, r3
 800e8b4:	d112      	bne.n	800e8dc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d00c      	beq.n	800e8d6 <etharp_find_entry+0xc2>
 800e8bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e8c0:	4989      	ldr	r1, [pc, #548]	; (800eae8 <etharp_find_entry+0x2d4>)
 800e8c2:	4613      	mov	r3, r2
 800e8c4:	005b      	lsls	r3, r3, #1
 800e8c6:	4413      	add	r3, r2
 800e8c8:	00db      	lsls	r3, r3, #3
 800e8ca:	440b      	add	r3, r1
 800e8cc:	3308      	adds	r3, #8
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	687a      	ldr	r2, [r7, #4]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d102      	bne.n	800e8dc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e8d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e8da:	e100      	b.n	800eade <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e8dc:	7dfb      	ldrb	r3, [r7, #23]
 800e8de:	2b01      	cmp	r3, #1
 800e8e0:	d140      	bne.n	800e964 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e8e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e8e6:	4980      	ldr	r1, [pc, #512]	; (800eae8 <etharp_find_entry+0x2d4>)
 800e8e8:	4613      	mov	r3, r2
 800e8ea:	005b      	lsls	r3, r3, #1
 800e8ec:	4413      	add	r3, r2
 800e8ee:	00db      	lsls	r3, r3, #3
 800e8f0:	440b      	add	r3, r1
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d01a      	beq.n	800e92e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e8f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e8fc:	497a      	ldr	r1, [pc, #488]	; (800eae8 <etharp_find_entry+0x2d4>)
 800e8fe:	4613      	mov	r3, r2
 800e900:	005b      	lsls	r3, r3, #1
 800e902:	4413      	add	r3, r2
 800e904:	00db      	lsls	r3, r3, #3
 800e906:	440b      	add	r3, r1
 800e908:	3312      	adds	r3, #18
 800e90a:	881b      	ldrh	r3, [r3, #0]
 800e90c:	8bba      	ldrh	r2, [r7, #28]
 800e90e:	429a      	cmp	r2, r3
 800e910:	d845      	bhi.n	800e99e <etharp_find_entry+0x18a>
            old_queue = i;
 800e912:	8c3b      	ldrh	r3, [r7, #32]
 800e914:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e916:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e91a:	4973      	ldr	r1, [pc, #460]	; (800eae8 <etharp_find_entry+0x2d4>)
 800e91c:	4613      	mov	r3, r2
 800e91e:	005b      	lsls	r3, r3, #1
 800e920:	4413      	add	r3, r2
 800e922:	00db      	lsls	r3, r3, #3
 800e924:	440b      	add	r3, r1
 800e926:	3312      	adds	r3, #18
 800e928:	881b      	ldrh	r3, [r3, #0]
 800e92a:	83bb      	strh	r3, [r7, #28]
 800e92c:	e037      	b.n	800e99e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e92e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e932:	496d      	ldr	r1, [pc, #436]	; (800eae8 <etharp_find_entry+0x2d4>)
 800e934:	4613      	mov	r3, r2
 800e936:	005b      	lsls	r3, r3, #1
 800e938:	4413      	add	r3, r2
 800e93a:	00db      	lsls	r3, r3, #3
 800e93c:	440b      	add	r3, r1
 800e93e:	3312      	adds	r3, #18
 800e940:	881b      	ldrh	r3, [r3, #0]
 800e942:	8b7a      	ldrh	r2, [r7, #26]
 800e944:	429a      	cmp	r2, r3
 800e946:	d82a      	bhi.n	800e99e <etharp_find_entry+0x18a>
            old_pending = i;
 800e948:	8c3b      	ldrh	r3, [r7, #32]
 800e94a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800e94c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e950:	4965      	ldr	r1, [pc, #404]	; (800eae8 <etharp_find_entry+0x2d4>)
 800e952:	4613      	mov	r3, r2
 800e954:	005b      	lsls	r3, r3, #1
 800e956:	4413      	add	r3, r2
 800e958:	00db      	lsls	r3, r3, #3
 800e95a:	440b      	add	r3, r1
 800e95c:	3312      	adds	r3, #18
 800e95e:	881b      	ldrh	r3, [r3, #0]
 800e960:	837b      	strh	r3, [r7, #26]
 800e962:	e01c      	b.n	800e99e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e964:	7dfb      	ldrb	r3, [r7, #23]
 800e966:	2b01      	cmp	r3, #1
 800e968:	d919      	bls.n	800e99e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e96a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e96e:	495e      	ldr	r1, [pc, #376]	; (800eae8 <etharp_find_entry+0x2d4>)
 800e970:	4613      	mov	r3, r2
 800e972:	005b      	lsls	r3, r3, #1
 800e974:	4413      	add	r3, r2
 800e976:	00db      	lsls	r3, r3, #3
 800e978:	440b      	add	r3, r1
 800e97a:	3312      	adds	r3, #18
 800e97c:	881b      	ldrh	r3, [r3, #0]
 800e97e:	8b3a      	ldrh	r2, [r7, #24]
 800e980:	429a      	cmp	r2, r3
 800e982:	d80c      	bhi.n	800e99e <etharp_find_entry+0x18a>
            old_stable = i;
 800e984:	8c3b      	ldrh	r3, [r7, #32]
 800e986:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800e988:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e98c:	4956      	ldr	r1, [pc, #344]	; (800eae8 <etharp_find_entry+0x2d4>)
 800e98e:	4613      	mov	r3, r2
 800e990:	005b      	lsls	r3, r3, #1
 800e992:	4413      	add	r3, r2
 800e994:	00db      	lsls	r3, r3, #3
 800e996:	440b      	add	r3, r1
 800e998:	3312      	adds	r3, #18
 800e99a:	881b      	ldrh	r3, [r3, #0]
 800e99c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e99e:	8c3b      	ldrh	r3, [r7, #32]
 800e9a0:	3301      	adds	r3, #1
 800e9a2:	b29b      	uxth	r3, r3
 800e9a4:	843b      	strh	r3, [r7, #32]
 800e9a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e9aa:	2b09      	cmp	r3, #9
 800e9ac:	f77f af4c 	ble.w	800e848 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e9b0:	7afb      	ldrb	r3, [r7, #11]
 800e9b2:	f003 0302 	and.w	r3, r3, #2
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d108      	bne.n	800e9cc <etharp_find_entry+0x1b8>
 800e9ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e9be:	2b0a      	cmp	r3, #10
 800e9c0:	d107      	bne.n	800e9d2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e9c2:	7afb      	ldrb	r3, [r7, #11]
 800e9c4:	f003 0301 	and.w	r3, r3, #1
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d102      	bne.n	800e9d2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e9cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e9d0:	e085      	b.n	800eade <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e9d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e9d6:	2b09      	cmp	r3, #9
 800e9d8:	dc02      	bgt.n	800e9e0 <etharp_find_entry+0x1cc>
    i = empty;
 800e9da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e9dc:	843b      	strh	r3, [r7, #32]
 800e9de:	e039      	b.n	800ea54 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e9e0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e9e4:	2b09      	cmp	r3, #9
 800e9e6:	dc14      	bgt.n	800ea12 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e9e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9ea:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e9ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e9f0:	493d      	ldr	r1, [pc, #244]	; (800eae8 <etharp_find_entry+0x2d4>)
 800e9f2:	4613      	mov	r3, r2
 800e9f4:	005b      	lsls	r3, r3, #1
 800e9f6:	4413      	add	r3, r2
 800e9f8:	00db      	lsls	r3, r3, #3
 800e9fa:	440b      	add	r3, r1
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d018      	beq.n	800ea34 <etharp_find_entry+0x220>
 800ea02:	4b3a      	ldr	r3, [pc, #232]	; (800eaec <etharp_find_entry+0x2d8>)
 800ea04:	f240 126d 	movw	r2, #365	; 0x16d
 800ea08:	493b      	ldr	r1, [pc, #236]	; (800eaf8 <etharp_find_entry+0x2e4>)
 800ea0a:	483a      	ldr	r0, [pc, #232]	; (800eaf4 <etharp_find_entry+0x2e0>)
 800ea0c:	f002 f938 	bl	8010c80 <iprintf>
 800ea10:	e010      	b.n	800ea34 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ea12:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ea16:	2b09      	cmp	r3, #9
 800ea18:	dc02      	bgt.n	800ea20 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ea1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ea1c:	843b      	strh	r3, [r7, #32]
 800ea1e:	e009      	b.n	800ea34 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ea20:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ea24:	2b09      	cmp	r3, #9
 800ea26:	dc02      	bgt.n	800ea2e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ea28:	8bfb      	ldrh	r3, [r7, #30]
 800ea2a:	843b      	strh	r3, [r7, #32]
 800ea2c:	e002      	b.n	800ea34 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ea2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ea32:	e054      	b.n	800eade <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ea34:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ea38:	2b09      	cmp	r3, #9
 800ea3a:	dd06      	ble.n	800ea4a <etharp_find_entry+0x236>
 800ea3c:	4b2b      	ldr	r3, [pc, #172]	; (800eaec <etharp_find_entry+0x2d8>)
 800ea3e:	f240 127f 	movw	r2, #383	; 0x17f
 800ea42:	492e      	ldr	r1, [pc, #184]	; (800eafc <etharp_find_entry+0x2e8>)
 800ea44:	482b      	ldr	r0, [pc, #172]	; (800eaf4 <etharp_find_entry+0x2e0>)
 800ea46:	f002 f91b 	bl	8010c80 <iprintf>
    etharp_free_entry(i);
 800ea4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f7ff fe06 	bl	800e660 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ea54:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ea58:	2b09      	cmp	r3, #9
 800ea5a:	dd06      	ble.n	800ea6a <etharp_find_entry+0x256>
 800ea5c:	4b23      	ldr	r3, [pc, #140]	; (800eaec <etharp_find_entry+0x2d8>)
 800ea5e:	f240 1283 	movw	r2, #387	; 0x183
 800ea62:	4926      	ldr	r1, [pc, #152]	; (800eafc <etharp_find_entry+0x2e8>)
 800ea64:	4823      	ldr	r0, [pc, #140]	; (800eaf4 <etharp_find_entry+0x2e0>)
 800ea66:	f002 f90b 	bl	8010c80 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ea6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea6e:	491e      	ldr	r1, [pc, #120]	; (800eae8 <etharp_find_entry+0x2d4>)
 800ea70:	4613      	mov	r3, r2
 800ea72:	005b      	lsls	r3, r3, #1
 800ea74:	4413      	add	r3, r2
 800ea76:	00db      	lsls	r3, r3, #3
 800ea78:	440b      	add	r3, r1
 800ea7a:	3314      	adds	r3, #20
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d006      	beq.n	800ea90 <etharp_find_entry+0x27c>
 800ea82:	4b1a      	ldr	r3, [pc, #104]	; (800eaec <etharp_find_entry+0x2d8>)
 800ea84:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800ea88:	491d      	ldr	r1, [pc, #116]	; (800eb00 <etharp_find_entry+0x2ec>)
 800ea8a:	481a      	ldr	r0, [pc, #104]	; (800eaf4 <etharp_find_entry+0x2e0>)
 800ea8c:	f002 f8f8 	bl	8010c80 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d00b      	beq.n	800eaae <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ea96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	6819      	ldr	r1, [r3, #0]
 800ea9e:	4812      	ldr	r0, [pc, #72]	; (800eae8 <etharp_find_entry+0x2d4>)
 800eaa0:	4613      	mov	r3, r2
 800eaa2:	005b      	lsls	r3, r3, #1
 800eaa4:	4413      	add	r3, r2
 800eaa6:	00db      	lsls	r3, r3, #3
 800eaa8:	4403      	add	r3, r0
 800eaaa:	3304      	adds	r3, #4
 800eaac:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800eaae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eab2:	490d      	ldr	r1, [pc, #52]	; (800eae8 <etharp_find_entry+0x2d4>)
 800eab4:	4613      	mov	r3, r2
 800eab6:	005b      	lsls	r3, r3, #1
 800eab8:	4413      	add	r3, r2
 800eaba:	00db      	lsls	r3, r3, #3
 800eabc:	440b      	add	r3, r1
 800eabe:	3312      	adds	r3, #18
 800eac0:	2200      	movs	r2, #0
 800eac2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800eac4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eac8:	4907      	ldr	r1, [pc, #28]	; (800eae8 <etharp_find_entry+0x2d4>)
 800eaca:	4613      	mov	r3, r2
 800eacc:	005b      	lsls	r3, r3, #1
 800eace:	4413      	add	r3, r2
 800ead0:	00db      	lsls	r3, r3, #3
 800ead2:	440b      	add	r3, r1
 800ead4:	3308      	adds	r3, #8
 800ead6:	687a      	ldr	r2, [r7, #4]
 800ead8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800eada:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3728      	adds	r7, #40	; 0x28
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}
 800eae6:	bf00      	nop
 800eae8:	2000874c 	.word	0x2000874c
 800eaec:	080143d4 	.word	0x080143d4
 800eaf0:	0801440c 	.word	0x0801440c
 800eaf4:	0801444c 	.word	0x0801444c
 800eaf8:	08014474 	.word	0x08014474
 800eafc:	0801448c 	.word	0x0801448c
 800eb00:	080144a0 	.word	0x080144a0

0800eb04 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b088      	sub	sp, #32
 800eb08:	af02      	add	r7, sp, #8
 800eb0a:	60f8      	str	r0, [r7, #12]
 800eb0c:	60b9      	str	r1, [r7, #8]
 800eb0e:	607a      	str	r2, [r7, #4]
 800eb10:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eb18:	2b06      	cmp	r3, #6
 800eb1a:	d006      	beq.n	800eb2a <etharp_update_arp_entry+0x26>
 800eb1c:	4b48      	ldr	r3, [pc, #288]	; (800ec40 <etharp_update_arp_entry+0x13c>)
 800eb1e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800eb22:	4948      	ldr	r1, [pc, #288]	; (800ec44 <etharp_update_arp_entry+0x140>)
 800eb24:	4848      	ldr	r0, [pc, #288]	; (800ec48 <etharp_update_arp_entry+0x144>)
 800eb26:	f002 f8ab 	bl	8010c80 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d012      	beq.n	800eb56 <etharp_update_arp_entry+0x52>
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d00e      	beq.n	800eb56 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	68f9      	ldr	r1, [r7, #12]
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f001 f8fe 	bl	800fd40 <ip4_addr_isbroadcast_u32>
 800eb44:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d105      	bne.n	800eb56 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800eb52:	2be0      	cmp	r3, #224	; 0xe0
 800eb54:	d102      	bne.n	800eb5c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800eb56:	f06f 030f 	mvn.w	r3, #15
 800eb5a:	e06c      	b.n	800ec36 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800eb5c:	78fb      	ldrb	r3, [r7, #3]
 800eb5e:	68fa      	ldr	r2, [r7, #12]
 800eb60:	4619      	mov	r1, r3
 800eb62:	68b8      	ldr	r0, [r7, #8]
 800eb64:	f7ff fe56 	bl	800e814 <etharp_find_entry>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800eb6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	da02      	bge.n	800eb7a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800eb74:	8afb      	ldrh	r3, [r7, #22]
 800eb76:	b25b      	sxtb	r3, r3
 800eb78:	e05d      	b.n	800ec36 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800eb7a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eb7e:	4933      	ldr	r1, [pc, #204]	; (800ec4c <etharp_update_arp_entry+0x148>)
 800eb80:	4613      	mov	r3, r2
 800eb82:	005b      	lsls	r3, r3, #1
 800eb84:	4413      	add	r3, r2
 800eb86:	00db      	lsls	r3, r3, #3
 800eb88:	440b      	add	r3, r1
 800eb8a:	3314      	adds	r3, #20
 800eb8c:	2202      	movs	r2, #2
 800eb8e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800eb90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eb94:	492d      	ldr	r1, [pc, #180]	; (800ec4c <etharp_update_arp_entry+0x148>)
 800eb96:	4613      	mov	r3, r2
 800eb98:	005b      	lsls	r3, r3, #1
 800eb9a:	4413      	add	r3, r2
 800eb9c:	00db      	lsls	r3, r3, #3
 800eb9e:	440b      	add	r3, r1
 800eba0:	3308      	adds	r3, #8
 800eba2:	68fa      	ldr	r2, [r7, #12]
 800eba4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800eba6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ebaa:	4613      	mov	r3, r2
 800ebac:	005b      	lsls	r3, r3, #1
 800ebae:	4413      	add	r3, r2
 800ebb0:	00db      	lsls	r3, r3, #3
 800ebb2:	3308      	adds	r3, #8
 800ebb4:	4a25      	ldr	r2, [pc, #148]	; (800ec4c <etharp_update_arp_entry+0x148>)
 800ebb6:	4413      	add	r3, r2
 800ebb8:	3304      	adds	r3, #4
 800ebba:	2206      	movs	r2, #6
 800ebbc:	6879      	ldr	r1, [r7, #4]
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f002 f848 	bl	8010c54 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ebc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ebc8:	4920      	ldr	r1, [pc, #128]	; (800ec4c <etharp_update_arp_entry+0x148>)
 800ebca:	4613      	mov	r3, r2
 800ebcc:	005b      	lsls	r3, r3, #1
 800ebce:	4413      	add	r3, r2
 800ebd0:	00db      	lsls	r3, r3, #3
 800ebd2:	440b      	add	r3, r1
 800ebd4:	3312      	adds	r3, #18
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ebda:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ebde:	491b      	ldr	r1, [pc, #108]	; (800ec4c <etharp_update_arp_entry+0x148>)
 800ebe0:	4613      	mov	r3, r2
 800ebe2:	005b      	lsls	r3, r3, #1
 800ebe4:	4413      	add	r3, r2
 800ebe6:	00db      	lsls	r3, r3, #3
 800ebe8:	440b      	add	r3, r1
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d021      	beq.n	800ec34 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ebf0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ebf4:	4915      	ldr	r1, [pc, #84]	; (800ec4c <etharp_update_arp_entry+0x148>)
 800ebf6:	4613      	mov	r3, r2
 800ebf8:	005b      	lsls	r3, r3, #1
 800ebfa:	4413      	add	r3, r2
 800ebfc:	00db      	lsls	r3, r3, #3
 800ebfe:	440b      	add	r3, r1
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ec04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ec08:	4910      	ldr	r1, [pc, #64]	; (800ec4c <etharp_update_arp_entry+0x148>)
 800ec0a:	4613      	mov	r3, r2
 800ec0c:	005b      	lsls	r3, r3, #1
 800ec0e:	4413      	add	r3, r2
 800ec10:	00db      	lsls	r3, r3, #3
 800ec12:	440b      	add	r3, r1
 800ec14:	2200      	movs	r2, #0
 800ec16:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ec1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ec22:	9300      	str	r3, [sp, #0]
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6939      	ldr	r1, [r7, #16]
 800ec28:	68f8      	ldr	r0, [r7, #12]
 800ec2a:	f001 ff97 	bl	8010b5c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ec2e:	6938      	ldr	r0, [r7, #16]
 800ec30:	f7f8 ff2a 	bl	8007a88 <pbuf_free>
  }
  return ERR_OK;
 800ec34:	2300      	movs	r3, #0
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3718      	adds	r7, #24
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	080143d4 	.word	0x080143d4
 800ec44:	080144cc 	.word	0x080144cc
 800ec48:	0801444c 	.word	0x0801444c
 800ec4c:	2000874c 	.word	0x2000874c

0800ec50 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ec58:	2300      	movs	r3, #0
 800ec5a:	60fb      	str	r3, [r7, #12]
 800ec5c:	e01e      	b.n	800ec9c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800ec5e:	4913      	ldr	r1, [pc, #76]	; (800ecac <etharp_cleanup_netif+0x5c>)
 800ec60:	68fa      	ldr	r2, [r7, #12]
 800ec62:	4613      	mov	r3, r2
 800ec64:	005b      	lsls	r3, r3, #1
 800ec66:	4413      	add	r3, r2
 800ec68:	00db      	lsls	r3, r3, #3
 800ec6a:	440b      	add	r3, r1
 800ec6c:	3314      	adds	r3, #20
 800ec6e:	781b      	ldrb	r3, [r3, #0]
 800ec70:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ec72:	7afb      	ldrb	r3, [r7, #11]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d00e      	beq.n	800ec96 <etharp_cleanup_netif+0x46>
 800ec78:	490c      	ldr	r1, [pc, #48]	; (800ecac <etharp_cleanup_netif+0x5c>)
 800ec7a:	68fa      	ldr	r2, [r7, #12]
 800ec7c:	4613      	mov	r3, r2
 800ec7e:	005b      	lsls	r3, r3, #1
 800ec80:	4413      	add	r3, r2
 800ec82:	00db      	lsls	r3, r3, #3
 800ec84:	440b      	add	r3, r1
 800ec86:	3308      	adds	r3, #8
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	687a      	ldr	r2, [r7, #4]
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	d102      	bne.n	800ec96 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ec90:	68f8      	ldr	r0, [r7, #12]
 800ec92:	f7ff fce5 	bl	800e660 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	3301      	adds	r3, #1
 800ec9a:	60fb      	str	r3, [r7, #12]
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	2b09      	cmp	r3, #9
 800eca0:	dddd      	ble.n	800ec5e <etharp_cleanup_netif+0xe>
    }
  }
}
 800eca2:	bf00      	nop
 800eca4:	bf00      	nop
 800eca6:	3710      	adds	r7, #16
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}
 800ecac:	2000874c 	.word	0x2000874c

0800ecb0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ecb0:	b5b0      	push	{r4, r5, r7, lr}
 800ecb2:	b08a      	sub	sp, #40	; 0x28
 800ecb4:	af04      	add	r7, sp, #16
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d107      	bne.n	800ecd0 <etharp_input+0x20>
 800ecc0:	4b3d      	ldr	r3, [pc, #244]	; (800edb8 <etharp_input+0x108>)
 800ecc2:	f240 228a 	movw	r2, #650	; 0x28a
 800ecc6:	493d      	ldr	r1, [pc, #244]	; (800edbc <etharp_input+0x10c>)
 800ecc8:	483d      	ldr	r0, [pc, #244]	; (800edc0 <etharp_input+0x110>)
 800ecca:	f001 ffd9 	bl	8010c80 <iprintf>
 800ecce:	e06f      	b.n	800edb0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	881b      	ldrh	r3, [r3, #0]
 800ecda:	b29b      	uxth	r3, r3
 800ecdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ece0:	d10c      	bne.n	800ecfc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ece6:	2b06      	cmp	r3, #6
 800ece8:	d108      	bne.n	800ecfc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ecee:	2b04      	cmp	r3, #4
 800ecf0:	d104      	bne.n	800ecfc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	885b      	ldrh	r3, [r3, #2]
 800ecf6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ecf8:	2b08      	cmp	r3, #8
 800ecfa:	d003      	beq.n	800ed04 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	f7f8 fec3 	bl	8007a88 <pbuf_free>
    return;
 800ed02:	e055      	b.n	800edb0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	330e      	adds	r3, #14
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	3318      	adds	r3, #24
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	3304      	adds	r3, #4
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d102      	bne.n	800ed24 <etharp_input+0x74>
    for_us = 0;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	75fb      	strb	r3, [r7, #23]
 800ed22:	e009      	b.n	800ed38 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ed24:	68ba      	ldr	r2, [r7, #8]
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	3304      	adds	r3, #4
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	bf0c      	ite	eq
 800ed30:	2301      	moveq	r3, #1
 800ed32:	2300      	movne	r3, #0
 800ed34:	b2db      	uxtb	r3, r3
 800ed36:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	f103 0208 	add.w	r2, r3, #8
 800ed3e:	7dfb      	ldrb	r3, [r7, #23]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d001      	beq.n	800ed48 <etharp_input+0x98>
 800ed44:	2301      	movs	r3, #1
 800ed46:	e000      	b.n	800ed4a <etharp_input+0x9a>
 800ed48:	2302      	movs	r3, #2
 800ed4a:	f107 010c 	add.w	r1, r7, #12
 800ed4e:	6838      	ldr	r0, [r7, #0]
 800ed50:	f7ff fed8 	bl	800eb04 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	88db      	ldrh	r3, [r3, #6]
 800ed58:	b29b      	uxth	r3, r3
 800ed5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed5e:	d003      	beq.n	800ed68 <etharp_input+0xb8>
 800ed60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed64:	d01e      	beq.n	800eda4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ed66:	e020      	b.n	800edaa <etharp_input+0xfa>
      if (for_us) {
 800ed68:	7dfb      	ldrb	r3, [r7, #23]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d01c      	beq.n	800eda8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ed84:	693a      	ldr	r2, [r7, #16]
 800ed86:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ed88:	2102      	movs	r1, #2
 800ed8a:	9103      	str	r1, [sp, #12]
 800ed8c:	f107 010c 	add.w	r1, r7, #12
 800ed90:	9102      	str	r1, [sp, #8]
 800ed92:	9201      	str	r2, [sp, #4]
 800ed94:	9300      	str	r3, [sp, #0]
 800ed96:	462b      	mov	r3, r5
 800ed98:	4622      	mov	r2, r4
 800ed9a:	4601      	mov	r1, r0
 800ed9c:	6838      	ldr	r0, [r7, #0]
 800ed9e:	f000 faeb 	bl	800f378 <etharp_raw>
      break;
 800eda2:	e001      	b.n	800eda8 <etharp_input+0xf8>
      break;
 800eda4:	bf00      	nop
 800eda6:	e000      	b.n	800edaa <etharp_input+0xfa>
      break;
 800eda8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f7f8 fe6c 	bl	8007a88 <pbuf_free>
}
 800edb0:	3718      	adds	r7, #24
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bdb0      	pop	{r4, r5, r7, pc}
 800edb6:	bf00      	nop
 800edb8:	080143d4 	.word	0x080143d4
 800edbc:	08014524 	.word	0x08014524
 800edc0:	0801444c 	.word	0x0801444c

0800edc4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b086      	sub	sp, #24
 800edc8:	af02      	add	r7, sp, #8
 800edca:	60f8      	str	r0, [r7, #12]
 800edcc:	60b9      	str	r1, [r7, #8]
 800edce:	4613      	mov	r3, r2
 800edd0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800edd2:	79fa      	ldrb	r2, [r7, #7]
 800edd4:	4944      	ldr	r1, [pc, #272]	; (800eee8 <etharp_output_to_arp_index+0x124>)
 800edd6:	4613      	mov	r3, r2
 800edd8:	005b      	lsls	r3, r3, #1
 800edda:	4413      	add	r3, r2
 800eddc:	00db      	lsls	r3, r3, #3
 800edde:	440b      	add	r3, r1
 800ede0:	3314      	adds	r3, #20
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	2b01      	cmp	r3, #1
 800ede6:	d806      	bhi.n	800edf6 <etharp_output_to_arp_index+0x32>
 800ede8:	4b40      	ldr	r3, [pc, #256]	; (800eeec <etharp_output_to_arp_index+0x128>)
 800edea:	f240 22ee 	movw	r2, #750	; 0x2ee
 800edee:	4940      	ldr	r1, [pc, #256]	; (800eef0 <etharp_output_to_arp_index+0x12c>)
 800edf0:	4840      	ldr	r0, [pc, #256]	; (800eef4 <etharp_output_to_arp_index+0x130>)
 800edf2:	f001 ff45 	bl	8010c80 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800edf6:	79fa      	ldrb	r2, [r7, #7]
 800edf8:	493b      	ldr	r1, [pc, #236]	; (800eee8 <etharp_output_to_arp_index+0x124>)
 800edfa:	4613      	mov	r3, r2
 800edfc:	005b      	lsls	r3, r3, #1
 800edfe:	4413      	add	r3, r2
 800ee00:	00db      	lsls	r3, r3, #3
 800ee02:	440b      	add	r3, r1
 800ee04:	3314      	adds	r3, #20
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	2b02      	cmp	r3, #2
 800ee0a:	d153      	bne.n	800eeb4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800ee0c:	79fa      	ldrb	r2, [r7, #7]
 800ee0e:	4936      	ldr	r1, [pc, #216]	; (800eee8 <etharp_output_to_arp_index+0x124>)
 800ee10:	4613      	mov	r3, r2
 800ee12:	005b      	lsls	r3, r3, #1
 800ee14:	4413      	add	r3, r2
 800ee16:	00db      	lsls	r3, r3, #3
 800ee18:	440b      	add	r3, r1
 800ee1a:	3312      	adds	r3, #18
 800ee1c:	881b      	ldrh	r3, [r3, #0]
 800ee1e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800ee22:	d919      	bls.n	800ee58 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800ee24:	79fa      	ldrb	r2, [r7, #7]
 800ee26:	4613      	mov	r3, r2
 800ee28:	005b      	lsls	r3, r3, #1
 800ee2a:	4413      	add	r3, r2
 800ee2c:	00db      	lsls	r3, r3, #3
 800ee2e:	4a2e      	ldr	r2, [pc, #184]	; (800eee8 <etharp_output_to_arp_index+0x124>)
 800ee30:	4413      	add	r3, r2
 800ee32:	3304      	adds	r3, #4
 800ee34:	4619      	mov	r1, r3
 800ee36:	68f8      	ldr	r0, [r7, #12]
 800ee38:	f000 fb4c 	bl	800f4d4 <etharp_request>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d138      	bne.n	800eeb4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ee42:	79fa      	ldrb	r2, [r7, #7]
 800ee44:	4928      	ldr	r1, [pc, #160]	; (800eee8 <etharp_output_to_arp_index+0x124>)
 800ee46:	4613      	mov	r3, r2
 800ee48:	005b      	lsls	r3, r3, #1
 800ee4a:	4413      	add	r3, r2
 800ee4c:	00db      	lsls	r3, r3, #3
 800ee4e:	440b      	add	r3, r1
 800ee50:	3314      	adds	r3, #20
 800ee52:	2203      	movs	r2, #3
 800ee54:	701a      	strb	r2, [r3, #0]
 800ee56:	e02d      	b.n	800eeb4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800ee58:	79fa      	ldrb	r2, [r7, #7]
 800ee5a:	4923      	ldr	r1, [pc, #140]	; (800eee8 <etharp_output_to_arp_index+0x124>)
 800ee5c:	4613      	mov	r3, r2
 800ee5e:	005b      	lsls	r3, r3, #1
 800ee60:	4413      	add	r3, r2
 800ee62:	00db      	lsls	r3, r3, #3
 800ee64:	440b      	add	r3, r1
 800ee66:	3312      	adds	r3, #18
 800ee68:	881b      	ldrh	r3, [r3, #0]
 800ee6a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ee6e:	d321      	bcc.n	800eeb4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ee70:	79fa      	ldrb	r2, [r7, #7]
 800ee72:	4613      	mov	r3, r2
 800ee74:	005b      	lsls	r3, r3, #1
 800ee76:	4413      	add	r3, r2
 800ee78:	00db      	lsls	r3, r3, #3
 800ee7a:	4a1b      	ldr	r2, [pc, #108]	; (800eee8 <etharp_output_to_arp_index+0x124>)
 800ee7c:	4413      	add	r3, r2
 800ee7e:	1d19      	adds	r1, r3, #4
 800ee80:	79fa      	ldrb	r2, [r7, #7]
 800ee82:	4613      	mov	r3, r2
 800ee84:	005b      	lsls	r3, r3, #1
 800ee86:	4413      	add	r3, r2
 800ee88:	00db      	lsls	r3, r3, #3
 800ee8a:	3308      	adds	r3, #8
 800ee8c:	4a16      	ldr	r2, [pc, #88]	; (800eee8 <etharp_output_to_arp_index+0x124>)
 800ee8e:	4413      	add	r3, r2
 800ee90:	3304      	adds	r3, #4
 800ee92:	461a      	mov	r2, r3
 800ee94:	68f8      	ldr	r0, [r7, #12]
 800ee96:	f000 fafb 	bl	800f490 <etharp_request_dst>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d109      	bne.n	800eeb4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800eea0:	79fa      	ldrb	r2, [r7, #7]
 800eea2:	4911      	ldr	r1, [pc, #68]	; (800eee8 <etharp_output_to_arp_index+0x124>)
 800eea4:	4613      	mov	r3, r2
 800eea6:	005b      	lsls	r3, r3, #1
 800eea8:	4413      	add	r3, r2
 800eeaa:	00db      	lsls	r3, r3, #3
 800eeac:	440b      	add	r3, r1
 800eeae:	3314      	adds	r3, #20
 800eeb0:	2203      	movs	r2, #3
 800eeb2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800eeba:	79fa      	ldrb	r2, [r7, #7]
 800eebc:	4613      	mov	r3, r2
 800eebe:	005b      	lsls	r3, r3, #1
 800eec0:	4413      	add	r3, r2
 800eec2:	00db      	lsls	r3, r3, #3
 800eec4:	3308      	adds	r3, #8
 800eec6:	4a08      	ldr	r2, [pc, #32]	; (800eee8 <etharp_output_to_arp_index+0x124>)
 800eec8:	4413      	add	r3, r2
 800eeca:	3304      	adds	r3, #4
 800eecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eed0:	9200      	str	r2, [sp, #0]
 800eed2:	460a      	mov	r2, r1
 800eed4:	68b9      	ldr	r1, [r7, #8]
 800eed6:	68f8      	ldr	r0, [r7, #12]
 800eed8:	f001 fe40 	bl	8010b5c <ethernet_output>
 800eedc:	4603      	mov	r3, r0
}
 800eede:	4618      	mov	r0, r3
 800eee0:	3710      	adds	r7, #16
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
 800eee6:	bf00      	nop
 800eee8:	2000874c 	.word	0x2000874c
 800eeec:	080143d4 	.word	0x080143d4
 800eef0:	08014544 	.word	0x08014544
 800eef4:	0801444c 	.word	0x0801444c

0800eef8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b08a      	sub	sp, #40	; 0x28
 800eefc:	af02      	add	r7, sp, #8
 800eefe:	60f8      	str	r0, [r7, #12]
 800ef00:	60b9      	str	r1, [r7, #8]
 800ef02:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d106      	bne.n	800ef1c <etharp_output+0x24>
 800ef0e:	4b73      	ldr	r3, [pc, #460]	; (800f0dc <etharp_output+0x1e4>)
 800ef10:	f240 321e 	movw	r2, #798	; 0x31e
 800ef14:	4972      	ldr	r1, [pc, #456]	; (800f0e0 <etharp_output+0x1e8>)
 800ef16:	4873      	ldr	r0, [pc, #460]	; (800f0e4 <etharp_output+0x1ec>)
 800ef18:	f001 feb2 	bl	8010c80 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d106      	bne.n	800ef30 <etharp_output+0x38>
 800ef22:	4b6e      	ldr	r3, [pc, #440]	; (800f0dc <etharp_output+0x1e4>)
 800ef24:	f240 321f 	movw	r2, #799	; 0x31f
 800ef28:	496f      	ldr	r1, [pc, #444]	; (800f0e8 <etharp_output+0x1f0>)
 800ef2a:	486e      	ldr	r0, [pc, #440]	; (800f0e4 <etharp_output+0x1ec>)
 800ef2c:	f001 fea8 	bl	8010c80 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d106      	bne.n	800ef44 <etharp_output+0x4c>
 800ef36:	4b69      	ldr	r3, [pc, #420]	; (800f0dc <etharp_output+0x1e4>)
 800ef38:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ef3c:	496b      	ldr	r1, [pc, #428]	; (800f0ec <etharp_output+0x1f4>)
 800ef3e:	4869      	ldr	r0, [pc, #420]	; (800f0e4 <etharp_output+0x1ec>)
 800ef40:	f001 fe9e 	bl	8010c80 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	68f9      	ldr	r1, [r7, #12]
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f000 fef8 	bl	800fd40 <ip4_addr_isbroadcast_u32>
 800ef50:	4603      	mov	r3, r0
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d002      	beq.n	800ef5c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ef56:	4b66      	ldr	r3, [pc, #408]	; (800f0f0 <etharp_output+0x1f8>)
 800ef58:	61fb      	str	r3, [r7, #28]
 800ef5a:	e0af      	b.n	800f0bc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef64:	2be0      	cmp	r3, #224	; 0xe0
 800ef66:	d118      	bne.n	800ef9a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ef68:	2301      	movs	r3, #1
 800ef6a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ef70:	235e      	movs	r3, #94	; 0x5e
 800ef72:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	3301      	adds	r3, #1
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef7e:	b2db      	uxtb	r3, r3
 800ef80:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	3302      	adds	r3, #2
 800ef86:	781b      	ldrb	r3, [r3, #0]
 800ef88:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	3303      	adds	r3, #3
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ef92:	f107 0310 	add.w	r3, r7, #16
 800ef96:	61fb      	str	r3, [r7, #28]
 800ef98:	e090      	b.n	800f0bc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681a      	ldr	r2, [r3, #0]
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	3304      	adds	r3, #4
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	405a      	eors	r2, r3
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	3308      	adds	r3, #8
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	4013      	ands	r3, r2
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d012      	beq.n	800efd8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800efb8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800efbc:	4293      	cmp	r3, r2
 800efbe:	d00b      	beq.n	800efd8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	330c      	adds	r3, #12
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d003      	beq.n	800efd2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	330c      	adds	r3, #12
 800efce:	61bb      	str	r3, [r7, #24]
 800efd0:	e002      	b.n	800efd8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800efd2:	f06f 0303 	mvn.w	r3, #3
 800efd6:	e07d      	b.n	800f0d4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800efd8:	4b46      	ldr	r3, [pc, #280]	; (800f0f4 <etharp_output+0x1fc>)
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	4619      	mov	r1, r3
 800efde:	4a46      	ldr	r2, [pc, #280]	; (800f0f8 <etharp_output+0x200>)
 800efe0:	460b      	mov	r3, r1
 800efe2:	005b      	lsls	r3, r3, #1
 800efe4:	440b      	add	r3, r1
 800efe6:	00db      	lsls	r3, r3, #3
 800efe8:	4413      	add	r3, r2
 800efea:	3314      	adds	r3, #20
 800efec:	781b      	ldrb	r3, [r3, #0]
 800efee:	2b01      	cmp	r3, #1
 800eff0:	d925      	bls.n	800f03e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800eff2:	4b40      	ldr	r3, [pc, #256]	; (800f0f4 <etharp_output+0x1fc>)
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	4619      	mov	r1, r3
 800eff8:	4a3f      	ldr	r2, [pc, #252]	; (800f0f8 <etharp_output+0x200>)
 800effa:	460b      	mov	r3, r1
 800effc:	005b      	lsls	r3, r3, #1
 800effe:	440b      	add	r3, r1
 800f000:	00db      	lsls	r3, r3, #3
 800f002:	4413      	add	r3, r2
 800f004:	3308      	adds	r3, #8
 800f006:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f008:	68fa      	ldr	r2, [r7, #12]
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d117      	bne.n	800f03e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f00e:	69bb      	ldr	r3, [r7, #24]
 800f010:	681a      	ldr	r2, [r3, #0]
 800f012:	4b38      	ldr	r3, [pc, #224]	; (800f0f4 <etharp_output+0x1fc>)
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	4618      	mov	r0, r3
 800f018:	4937      	ldr	r1, [pc, #220]	; (800f0f8 <etharp_output+0x200>)
 800f01a:	4603      	mov	r3, r0
 800f01c:	005b      	lsls	r3, r3, #1
 800f01e:	4403      	add	r3, r0
 800f020:	00db      	lsls	r3, r3, #3
 800f022:	440b      	add	r3, r1
 800f024:	3304      	adds	r3, #4
 800f026:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f028:	429a      	cmp	r2, r3
 800f02a:	d108      	bne.n	800f03e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f02c:	4b31      	ldr	r3, [pc, #196]	; (800f0f4 <etharp_output+0x1fc>)
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	461a      	mov	r2, r3
 800f032:	68b9      	ldr	r1, [r7, #8]
 800f034:	68f8      	ldr	r0, [r7, #12]
 800f036:	f7ff fec5 	bl	800edc4 <etharp_output_to_arp_index>
 800f03a:	4603      	mov	r3, r0
 800f03c:	e04a      	b.n	800f0d4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f03e:	2300      	movs	r3, #0
 800f040:	75fb      	strb	r3, [r7, #23]
 800f042:	e031      	b.n	800f0a8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f044:	7dfa      	ldrb	r2, [r7, #23]
 800f046:	492c      	ldr	r1, [pc, #176]	; (800f0f8 <etharp_output+0x200>)
 800f048:	4613      	mov	r3, r2
 800f04a:	005b      	lsls	r3, r3, #1
 800f04c:	4413      	add	r3, r2
 800f04e:	00db      	lsls	r3, r3, #3
 800f050:	440b      	add	r3, r1
 800f052:	3314      	adds	r3, #20
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	2b01      	cmp	r3, #1
 800f058:	d923      	bls.n	800f0a2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f05a:	7dfa      	ldrb	r2, [r7, #23]
 800f05c:	4926      	ldr	r1, [pc, #152]	; (800f0f8 <etharp_output+0x200>)
 800f05e:	4613      	mov	r3, r2
 800f060:	005b      	lsls	r3, r3, #1
 800f062:	4413      	add	r3, r2
 800f064:	00db      	lsls	r3, r3, #3
 800f066:	440b      	add	r3, r1
 800f068:	3308      	adds	r3, #8
 800f06a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f06c:	68fa      	ldr	r2, [r7, #12]
 800f06e:	429a      	cmp	r2, r3
 800f070:	d117      	bne.n	800f0a2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f072:	69bb      	ldr	r3, [r7, #24]
 800f074:	6819      	ldr	r1, [r3, #0]
 800f076:	7dfa      	ldrb	r2, [r7, #23]
 800f078:	481f      	ldr	r0, [pc, #124]	; (800f0f8 <etharp_output+0x200>)
 800f07a:	4613      	mov	r3, r2
 800f07c:	005b      	lsls	r3, r3, #1
 800f07e:	4413      	add	r3, r2
 800f080:	00db      	lsls	r3, r3, #3
 800f082:	4403      	add	r3, r0
 800f084:	3304      	adds	r3, #4
 800f086:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f088:	4299      	cmp	r1, r3
 800f08a:	d10a      	bne.n	800f0a2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f08c:	4a19      	ldr	r2, [pc, #100]	; (800f0f4 <etharp_output+0x1fc>)
 800f08e:	7dfb      	ldrb	r3, [r7, #23]
 800f090:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f092:	7dfb      	ldrb	r3, [r7, #23]
 800f094:	461a      	mov	r2, r3
 800f096:	68b9      	ldr	r1, [r7, #8]
 800f098:	68f8      	ldr	r0, [r7, #12]
 800f09a:	f7ff fe93 	bl	800edc4 <etharp_output_to_arp_index>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	e018      	b.n	800f0d4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f0a2:	7dfb      	ldrb	r3, [r7, #23]
 800f0a4:	3301      	adds	r3, #1
 800f0a6:	75fb      	strb	r3, [r7, #23]
 800f0a8:	7dfb      	ldrb	r3, [r7, #23]
 800f0aa:	2b09      	cmp	r3, #9
 800f0ac:	d9ca      	bls.n	800f044 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f0ae:	68ba      	ldr	r2, [r7, #8]
 800f0b0:	69b9      	ldr	r1, [r7, #24]
 800f0b2:	68f8      	ldr	r0, [r7, #12]
 800f0b4:	f000 f822 	bl	800f0fc <etharp_query>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	e00b      	b.n	800f0d4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f0c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f0c6:	9300      	str	r3, [sp, #0]
 800f0c8:	69fb      	ldr	r3, [r7, #28]
 800f0ca:	68b9      	ldr	r1, [r7, #8]
 800f0cc:	68f8      	ldr	r0, [r7, #12]
 800f0ce:	f001 fd45 	bl	8010b5c <ethernet_output>
 800f0d2:	4603      	mov	r3, r0
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3720      	adds	r7, #32
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}
 800f0dc:	080143d4 	.word	0x080143d4
 800f0e0:	08014524 	.word	0x08014524
 800f0e4:	0801444c 	.word	0x0801444c
 800f0e8:	08014574 	.word	0x08014574
 800f0ec:	08014514 	.word	0x08014514
 800f0f0:	0801506c 	.word	0x0801506c
 800f0f4:	2000883c 	.word	0x2000883c
 800f0f8:	2000874c 	.word	0x2000874c

0800f0fc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b08c      	sub	sp, #48	; 0x30
 800f100:	af02      	add	r7, sp, #8
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	60b9      	str	r1, [r7, #8]
 800f106:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	3326      	adds	r3, #38	; 0x26
 800f10c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f10e:	23ff      	movs	r3, #255	; 0xff
 800f110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f114:	2300      	movs	r3, #0
 800f116:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	68f9      	ldr	r1, [r7, #12]
 800f11e:	4618      	mov	r0, r3
 800f120:	f000 fe0e 	bl	800fd40 <ip4_addr_isbroadcast_u32>
 800f124:	4603      	mov	r3, r0
 800f126:	2b00      	cmp	r3, #0
 800f128:	d10c      	bne.n	800f144 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f132:	2be0      	cmp	r3, #224	; 0xe0
 800f134:	d006      	beq.n	800f144 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d003      	beq.n	800f144 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d102      	bne.n	800f14a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f144:	f06f 030f 	mvn.w	r3, #15
 800f148:	e101      	b.n	800f34e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f14a:	68fa      	ldr	r2, [r7, #12]
 800f14c:	2101      	movs	r1, #1
 800f14e:	68b8      	ldr	r0, [r7, #8]
 800f150:	f7ff fb60 	bl	800e814 <etharp_find_entry>
 800f154:	4603      	mov	r3, r0
 800f156:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f158:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	da02      	bge.n	800f166 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f160:	8a7b      	ldrh	r3, [r7, #18]
 800f162:	b25b      	sxtb	r3, r3
 800f164:	e0f3      	b.n	800f34e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f166:	8a7b      	ldrh	r3, [r7, #18]
 800f168:	2b7e      	cmp	r3, #126	; 0x7e
 800f16a:	d906      	bls.n	800f17a <etharp_query+0x7e>
 800f16c:	4b7a      	ldr	r3, [pc, #488]	; (800f358 <etharp_query+0x25c>)
 800f16e:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f172:	497a      	ldr	r1, [pc, #488]	; (800f35c <etharp_query+0x260>)
 800f174:	487a      	ldr	r0, [pc, #488]	; (800f360 <etharp_query+0x264>)
 800f176:	f001 fd83 	bl	8010c80 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f17a:	8a7b      	ldrh	r3, [r7, #18]
 800f17c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f17e:	7c7a      	ldrb	r2, [r7, #17]
 800f180:	4978      	ldr	r1, [pc, #480]	; (800f364 <etharp_query+0x268>)
 800f182:	4613      	mov	r3, r2
 800f184:	005b      	lsls	r3, r3, #1
 800f186:	4413      	add	r3, r2
 800f188:	00db      	lsls	r3, r3, #3
 800f18a:	440b      	add	r3, r1
 800f18c:	3314      	adds	r3, #20
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d115      	bne.n	800f1c0 <etharp_query+0xc4>
    is_new_entry = 1;
 800f194:	2301      	movs	r3, #1
 800f196:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f198:	7c7a      	ldrb	r2, [r7, #17]
 800f19a:	4972      	ldr	r1, [pc, #456]	; (800f364 <etharp_query+0x268>)
 800f19c:	4613      	mov	r3, r2
 800f19e:	005b      	lsls	r3, r3, #1
 800f1a0:	4413      	add	r3, r2
 800f1a2:	00db      	lsls	r3, r3, #3
 800f1a4:	440b      	add	r3, r1
 800f1a6:	3314      	adds	r3, #20
 800f1a8:	2201      	movs	r2, #1
 800f1aa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f1ac:	7c7a      	ldrb	r2, [r7, #17]
 800f1ae:	496d      	ldr	r1, [pc, #436]	; (800f364 <etharp_query+0x268>)
 800f1b0:	4613      	mov	r3, r2
 800f1b2:	005b      	lsls	r3, r3, #1
 800f1b4:	4413      	add	r3, r2
 800f1b6:	00db      	lsls	r3, r3, #3
 800f1b8:	440b      	add	r3, r1
 800f1ba:	3308      	adds	r3, #8
 800f1bc:	68fa      	ldr	r2, [r7, #12]
 800f1be:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f1c0:	7c7a      	ldrb	r2, [r7, #17]
 800f1c2:	4968      	ldr	r1, [pc, #416]	; (800f364 <etharp_query+0x268>)
 800f1c4:	4613      	mov	r3, r2
 800f1c6:	005b      	lsls	r3, r3, #1
 800f1c8:	4413      	add	r3, r2
 800f1ca:	00db      	lsls	r3, r3, #3
 800f1cc:	440b      	add	r3, r1
 800f1ce:	3314      	adds	r3, #20
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	2b01      	cmp	r3, #1
 800f1d4:	d011      	beq.n	800f1fa <etharp_query+0xfe>
 800f1d6:	7c7a      	ldrb	r2, [r7, #17]
 800f1d8:	4962      	ldr	r1, [pc, #392]	; (800f364 <etharp_query+0x268>)
 800f1da:	4613      	mov	r3, r2
 800f1dc:	005b      	lsls	r3, r3, #1
 800f1de:	4413      	add	r3, r2
 800f1e0:	00db      	lsls	r3, r3, #3
 800f1e2:	440b      	add	r3, r1
 800f1e4:	3314      	adds	r3, #20
 800f1e6:	781b      	ldrb	r3, [r3, #0]
 800f1e8:	2b01      	cmp	r3, #1
 800f1ea:	d806      	bhi.n	800f1fa <etharp_query+0xfe>
 800f1ec:	4b5a      	ldr	r3, [pc, #360]	; (800f358 <etharp_query+0x25c>)
 800f1ee:	f240 32cd 	movw	r2, #973	; 0x3cd
 800f1f2:	495d      	ldr	r1, [pc, #372]	; (800f368 <etharp_query+0x26c>)
 800f1f4:	485a      	ldr	r0, [pc, #360]	; (800f360 <etharp_query+0x264>)
 800f1f6:	f001 fd43 	bl	8010c80 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f1fa:	6a3b      	ldr	r3, [r7, #32]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d102      	bne.n	800f206 <etharp_query+0x10a>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d10c      	bne.n	800f220 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f206:	68b9      	ldr	r1, [r7, #8]
 800f208:	68f8      	ldr	r0, [r7, #12]
 800f20a:	f000 f963 	bl	800f4d4 <etharp_request>
 800f20e:	4603      	mov	r3, r0
 800f210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d102      	bne.n	800f220 <etharp_query+0x124>
      return result;
 800f21a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f21e:	e096      	b.n	800f34e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d106      	bne.n	800f234 <etharp_query+0x138>
 800f226:	4b4c      	ldr	r3, [pc, #304]	; (800f358 <etharp_query+0x25c>)
 800f228:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f22c:	494f      	ldr	r1, [pc, #316]	; (800f36c <etharp_query+0x270>)
 800f22e:	484c      	ldr	r0, [pc, #304]	; (800f360 <etharp_query+0x264>)
 800f230:	f001 fd26 	bl	8010c80 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f234:	7c7a      	ldrb	r2, [r7, #17]
 800f236:	494b      	ldr	r1, [pc, #300]	; (800f364 <etharp_query+0x268>)
 800f238:	4613      	mov	r3, r2
 800f23a:	005b      	lsls	r3, r3, #1
 800f23c:	4413      	add	r3, r2
 800f23e:	00db      	lsls	r3, r3, #3
 800f240:	440b      	add	r3, r1
 800f242:	3314      	adds	r3, #20
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	2b01      	cmp	r3, #1
 800f248:	d917      	bls.n	800f27a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f24a:	4a49      	ldr	r2, [pc, #292]	; (800f370 <etharp_query+0x274>)
 800f24c:	7c7b      	ldrb	r3, [r7, #17]
 800f24e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f250:	7c7a      	ldrb	r2, [r7, #17]
 800f252:	4613      	mov	r3, r2
 800f254:	005b      	lsls	r3, r3, #1
 800f256:	4413      	add	r3, r2
 800f258:	00db      	lsls	r3, r3, #3
 800f25a:	3308      	adds	r3, #8
 800f25c:	4a41      	ldr	r2, [pc, #260]	; (800f364 <etharp_query+0x268>)
 800f25e:	4413      	add	r3, r2
 800f260:	3304      	adds	r3, #4
 800f262:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f266:	9200      	str	r2, [sp, #0]
 800f268:	697a      	ldr	r2, [r7, #20]
 800f26a:	6879      	ldr	r1, [r7, #4]
 800f26c:	68f8      	ldr	r0, [r7, #12]
 800f26e:	f001 fc75 	bl	8010b5c <ethernet_output>
 800f272:	4603      	mov	r3, r0
 800f274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f278:	e067      	b.n	800f34a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f27a:	7c7a      	ldrb	r2, [r7, #17]
 800f27c:	4939      	ldr	r1, [pc, #228]	; (800f364 <etharp_query+0x268>)
 800f27e:	4613      	mov	r3, r2
 800f280:	005b      	lsls	r3, r3, #1
 800f282:	4413      	add	r3, r2
 800f284:	00db      	lsls	r3, r3, #3
 800f286:	440b      	add	r3, r1
 800f288:	3314      	adds	r3, #20
 800f28a:	781b      	ldrb	r3, [r3, #0]
 800f28c:	2b01      	cmp	r3, #1
 800f28e:	d15c      	bne.n	800f34a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f290:	2300      	movs	r3, #0
 800f292:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f298:	e01c      	b.n	800f2d4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f29a:	69fb      	ldr	r3, [r7, #28]
 800f29c:	895a      	ldrh	r2, [r3, #10]
 800f29e:	69fb      	ldr	r3, [r7, #28]
 800f2a0:	891b      	ldrh	r3, [r3, #8]
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d10a      	bne.n	800f2bc <etharp_query+0x1c0>
 800f2a6:	69fb      	ldr	r3, [r7, #28]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d006      	beq.n	800f2bc <etharp_query+0x1c0>
 800f2ae:	4b2a      	ldr	r3, [pc, #168]	; (800f358 <etharp_query+0x25c>)
 800f2b0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f2b4:	492f      	ldr	r1, [pc, #188]	; (800f374 <etharp_query+0x278>)
 800f2b6:	482a      	ldr	r0, [pc, #168]	; (800f360 <etharp_query+0x264>)
 800f2b8:	f001 fce2 	bl	8010c80 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f2bc:	69fb      	ldr	r3, [r7, #28]
 800f2be:	7b1b      	ldrb	r3, [r3, #12]
 800f2c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d002      	beq.n	800f2ce <etharp_query+0x1d2>
        copy_needed = 1;
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	61bb      	str	r3, [r7, #24]
        break;
 800f2cc:	e005      	b.n	800f2da <etharp_query+0x1de>
      }
      p = p->next;
 800f2ce:	69fb      	ldr	r3, [r7, #28]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f2d4:	69fb      	ldr	r3, [r7, #28]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d1df      	bne.n	800f29a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f2da:	69bb      	ldr	r3, [r7, #24]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d007      	beq.n	800f2f0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f2e0:	687a      	ldr	r2, [r7, #4]
 800f2e2:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f2e6:	200e      	movs	r0, #14
 800f2e8:	f7f8 fe2a 	bl	8007f40 <pbuf_clone>
 800f2ec:	61f8      	str	r0, [r7, #28]
 800f2ee:	e004      	b.n	800f2fa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f2f4:	69f8      	ldr	r0, [r7, #28]
 800f2f6:	f7f8 fc67 	bl	8007bc8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f2fa:	69fb      	ldr	r3, [r7, #28]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d021      	beq.n	800f344 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f300:	7c7a      	ldrb	r2, [r7, #17]
 800f302:	4918      	ldr	r1, [pc, #96]	; (800f364 <etharp_query+0x268>)
 800f304:	4613      	mov	r3, r2
 800f306:	005b      	lsls	r3, r3, #1
 800f308:	4413      	add	r3, r2
 800f30a:	00db      	lsls	r3, r3, #3
 800f30c:	440b      	add	r3, r1
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d00a      	beq.n	800f32a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f314:	7c7a      	ldrb	r2, [r7, #17]
 800f316:	4913      	ldr	r1, [pc, #76]	; (800f364 <etharp_query+0x268>)
 800f318:	4613      	mov	r3, r2
 800f31a:	005b      	lsls	r3, r3, #1
 800f31c:	4413      	add	r3, r2
 800f31e:	00db      	lsls	r3, r3, #3
 800f320:	440b      	add	r3, r1
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	4618      	mov	r0, r3
 800f326:	f7f8 fbaf 	bl	8007a88 <pbuf_free>
      }
      arp_table[i].q = p;
 800f32a:	7c7a      	ldrb	r2, [r7, #17]
 800f32c:	490d      	ldr	r1, [pc, #52]	; (800f364 <etharp_query+0x268>)
 800f32e:	4613      	mov	r3, r2
 800f330:	005b      	lsls	r3, r3, #1
 800f332:	4413      	add	r3, r2
 800f334:	00db      	lsls	r3, r3, #3
 800f336:	440b      	add	r3, r1
 800f338:	69fa      	ldr	r2, [r7, #28]
 800f33a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f33c:	2300      	movs	r3, #0
 800f33e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f342:	e002      	b.n	800f34a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f344:	23ff      	movs	r3, #255	; 0xff
 800f346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f34a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f34e:	4618      	mov	r0, r3
 800f350:	3728      	adds	r7, #40	; 0x28
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}
 800f356:	bf00      	nop
 800f358:	080143d4 	.word	0x080143d4
 800f35c:	08014580 	.word	0x08014580
 800f360:	0801444c 	.word	0x0801444c
 800f364:	2000874c 	.word	0x2000874c
 800f368:	08014590 	.word	0x08014590
 800f36c:	08014574 	.word	0x08014574
 800f370:	2000883c 	.word	0x2000883c
 800f374:	080145b8 	.word	0x080145b8

0800f378 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b08a      	sub	sp, #40	; 0x28
 800f37c:	af02      	add	r7, sp, #8
 800f37e:	60f8      	str	r0, [r7, #12]
 800f380:	60b9      	str	r1, [r7, #8]
 800f382:	607a      	str	r2, [r7, #4]
 800f384:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f386:	2300      	movs	r3, #0
 800f388:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d106      	bne.n	800f39e <etharp_raw+0x26>
 800f390:	4b3a      	ldr	r3, [pc, #232]	; (800f47c <etharp_raw+0x104>)
 800f392:	f240 4257 	movw	r2, #1111	; 0x457
 800f396:	493a      	ldr	r1, [pc, #232]	; (800f480 <etharp_raw+0x108>)
 800f398:	483a      	ldr	r0, [pc, #232]	; (800f484 <etharp_raw+0x10c>)
 800f39a:	f001 fc71 	bl	8010c80 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f39e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f3a2:	211c      	movs	r1, #28
 800f3a4:	200e      	movs	r0, #14
 800f3a6:	f7f8 f88b 	bl	80074c0 <pbuf_alloc>
 800f3aa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f3ac:	69bb      	ldr	r3, [r7, #24]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d102      	bne.n	800f3b8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800f3b6:	e05d      	b.n	800f474 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f3b8:	69bb      	ldr	r3, [r7, #24]
 800f3ba:	895b      	ldrh	r3, [r3, #10]
 800f3bc:	2b1b      	cmp	r3, #27
 800f3be:	d806      	bhi.n	800f3ce <etharp_raw+0x56>
 800f3c0:	4b2e      	ldr	r3, [pc, #184]	; (800f47c <etharp_raw+0x104>)
 800f3c2:	f240 4262 	movw	r2, #1122	; 0x462
 800f3c6:	4930      	ldr	r1, [pc, #192]	; (800f488 <etharp_raw+0x110>)
 800f3c8:	482e      	ldr	r0, [pc, #184]	; (800f484 <etharp_raw+0x10c>)
 800f3ca:	f001 fc59 	bl	8010c80 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f3ce:	69bb      	ldr	r3, [r7, #24]
 800f3d0:	685b      	ldr	r3, [r3, #4]
 800f3d2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f3d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7f6 ff8e 	bl	80062f8 <lwip_htons>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	461a      	mov	r2, r3
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f3ea:	2b06      	cmp	r3, #6
 800f3ec:	d006      	beq.n	800f3fc <etharp_raw+0x84>
 800f3ee:	4b23      	ldr	r3, [pc, #140]	; (800f47c <etharp_raw+0x104>)
 800f3f0:	f240 4269 	movw	r2, #1129	; 0x469
 800f3f4:	4925      	ldr	r1, [pc, #148]	; (800f48c <etharp_raw+0x114>)
 800f3f6:	4823      	ldr	r0, [pc, #140]	; (800f484 <etharp_raw+0x10c>)
 800f3f8:	f001 fc42 	bl	8010c80 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f3fc:	697b      	ldr	r3, [r7, #20]
 800f3fe:	3308      	adds	r3, #8
 800f400:	2206      	movs	r2, #6
 800f402:	6839      	ldr	r1, [r7, #0]
 800f404:	4618      	mov	r0, r3
 800f406:	f001 fc25 	bl	8010c54 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	3312      	adds	r3, #18
 800f40e:	2206      	movs	r2, #6
 800f410:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f412:	4618      	mov	r0, r3
 800f414:	f001 fc1e 	bl	8010c54 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	330e      	adds	r3, #14
 800f41c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f41e:	6812      	ldr	r2, [r2, #0]
 800f420:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	3318      	adds	r3, #24
 800f426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f428:	6812      	ldr	r2, [r2, #0]
 800f42a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	2200      	movs	r2, #0
 800f430:	701a      	strb	r2, [r3, #0]
 800f432:	2200      	movs	r2, #0
 800f434:	f042 0201 	orr.w	r2, r2, #1
 800f438:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	2200      	movs	r2, #0
 800f43e:	f042 0208 	orr.w	r2, r2, #8
 800f442:	709a      	strb	r2, [r3, #2]
 800f444:	2200      	movs	r2, #0
 800f446:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	2206      	movs	r2, #6
 800f44c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	2204      	movs	r2, #4
 800f452:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f454:	f640 0306 	movw	r3, #2054	; 0x806
 800f458:	9300      	str	r3, [sp, #0]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	68ba      	ldr	r2, [r7, #8]
 800f45e:	69b9      	ldr	r1, [r7, #24]
 800f460:	68f8      	ldr	r0, [r7, #12]
 800f462:	f001 fb7b 	bl	8010b5c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f466:	69b8      	ldr	r0, [r7, #24]
 800f468:	f7f8 fb0e 	bl	8007a88 <pbuf_free>
  p = NULL;
 800f46c:	2300      	movs	r3, #0
 800f46e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f470:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f474:	4618      	mov	r0, r3
 800f476:	3720      	adds	r7, #32
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}
 800f47c:	080143d4 	.word	0x080143d4
 800f480:	08014524 	.word	0x08014524
 800f484:	0801444c 	.word	0x0801444c
 800f488:	080145d4 	.word	0x080145d4
 800f48c:	08014608 	.word	0x08014608

0800f490 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b088      	sub	sp, #32
 800f494:	af04      	add	r7, sp, #16
 800f496:	60f8      	str	r0, [r7, #12]
 800f498:	60b9      	str	r1, [r7, #8]
 800f49a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	9203      	str	r2, [sp, #12]
 800f4b0:	68ba      	ldr	r2, [r7, #8]
 800f4b2:	9202      	str	r2, [sp, #8]
 800f4b4:	4a06      	ldr	r2, [pc, #24]	; (800f4d0 <etharp_request_dst+0x40>)
 800f4b6:	9201      	str	r2, [sp, #4]
 800f4b8:	9300      	str	r3, [sp, #0]
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	687a      	ldr	r2, [r7, #4]
 800f4be:	68f8      	ldr	r0, [r7, #12]
 800f4c0:	f7ff ff5a 	bl	800f378 <etharp_raw>
 800f4c4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	3710      	adds	r7, #16
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}
 800f4ce:	bf00      	nop
 800f4d0:	08015074 	.word	0x08015074

0800f4d4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f4de:	4a05      	ldr	r2, [pc, #20]	; (800f4f4 <etharp_request+0x20>)
 800f4e0:	6839      	ldr	r1, [r7, #0]
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f7ff ffd4 	bl	800f490 <etharp_request_dst>
 800f4e8:	4603      	mov	r3, r0
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	3708      	adds	r7, #8
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}
 800f4f2:	bf00      	nop
 800f4f4:	0801506c 	.word	0x0801506c

0800f4f8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b08e      	sub	sp, #56	; 0x38
 800f4fc:	af04      	add	r7, sp, #16
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f502:	4b79      	ldr	r3, [pc, #484]	; (800f6e8 <icmp_input+0x1f0>)
 800f504:	689b      	ldr	r3, [r3, #8]
 800f506:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800f508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	f003 030f 	and.w	r3, r3, #15
 800f510:	b2db      	uxtb	r3, r3
 800f512:	009b      	lsls	r3, r3, #2
 800f514:	b2db      	uxtb	r3, r3
 800f516:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800f518:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f51a:	2b13      	cmp	r3, #19
 800f51c:	f240 80cd 	bls.w	800f6ba <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	895b      	ldrh	r3, [r3, #10]
 800f524:	2b03      	cmp	r3, #3
 800f526:	f240 80ca 	bls.w	800f6be <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	685b      	ldr	r3, [r3, #4]
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f534:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f538:	2b00      	cmp	r3, #0
 800f53a:	f000 80b7 	beq.w	800f6ac <icmp_input+0x1b4>
 800f53e:	2b08      	cmp	r3, #8
 800f540:	f040 80b7 	bne.w	800f6b2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f544:	4b69      	ldr	r3, [pc, #420]	; (800f6ec <icmp_input+0x1f4>)
 800f546:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f548:	4b67      	ldr	r3, [pc, #412]	; (800f6e8 <icmp_input+0x1f0>)
 800f54a:	695b      	ldr	r3, [r3, #20]
 800f54c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f550:	2be0      	cmp	r3, #224	; 0xe0
 800f552:	f000 80bb 	beq.w	800f6cc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f556:	4b64      	ldr	r3, [pc, #400]	; (800f6e8 <icmp_input+0x1f0>)
 800f558:	695b      	ldr	r3, [r3, #20]
 800f55a:	4a63      	ldr	r2, [pc, #396]	; (800f6e8 <icmp_input+0x1f0>)
 800f55c:	6812      	ldr	r2, [r2, #0]
 800f55e:	4611      	mov	r1, r2
 800f560:	4618      	mov	r0, r3
 800f562:	f000 fbed 	bl	800fd40 <ip4_addr_isbroadcast_u32>
 800f566:	4603      	mov	r3, r0
 800f568:	2b00      	cmp	r3, #0
 800f56a:	f040 80b1 	bne.w	800f6d0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	891b      	ldrh	r3, [r3, #8]
 800f572:	2b07      	cmp	r3, #7
 800f574:	f240 80a5 	bls.w	800f6c2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f578:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f57a:	330e      	adds	r3, #14
 800f57c:	4619      	mov	r1, r3
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f7f8 f9ec 	bl	800795c <pbuf_add_header>
 800f584:	4603      	mov	r3, r0
 800f586:	2b00      	cmp	r3, #0
 800f588:	d04b      	beq.n	800f622 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	891a      	ldrh	r2, [r3, #8]
 800f58e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f590:	4413      	add	r3, r2
 800f592:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	891b      	ldrh	r3, [r3, #8]
 800f598:	8b7a      	ldrh	r2, [r7, #26]
 800f59a:	429a      	cmp	r2, r3
 800f59c:	f0c0 809a 	bcc.w	800f6d4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f5a0:	8b7b      	ldrh	r3, [r7, #26]
 800f5a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	200e      	movs	r0, #14
 800f5aa:	f7f7 ff89 	bl	80074c0 <pbuf_alloc>
 800f5ae:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	f000 8090 	beq.w	800f6d8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	895b      	ldrh	r3, [r3, #10]
 800f5bc:	461a      	mov	r2, r3
 800f5be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f5c0:	3308      	adds	r3, #8
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d203      	bcs.n	800f5ce <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800f5c6:	6978      	ldr	r0, [r7, #20]
 800f5c8:	f7f8 fa5e 	bl	8007a88 <pbuf_free>
          goto icmperr;
 800f5cc:	e085      	b.n	800f6da <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	685b      	ldr	r3, [r3, #4]
 800f5d2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f5d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f001 fb3c 	bl	8010c54 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f5dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f5de:	4619      	mov	r1, r3
 800f5e0:	6978      	ldr	r0, [r7, #20]
 800f5e2:	f7f8 f9cb 	bl	800797c <pbuf_remove_header>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d009      	beq.n	800f600 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f5ec:	4b40      	ldr	r3, [pc, #256]	; (800f6f0 <icmp_input+0x1f8>)
 800f5ee:	22b6      	movs	r2, #182	; 0xb6
 800f5f0:	4940      	ldr	r1, [pc, #256]	; (800f6f4 <icmp_input+0x1fc>)
 800f5f2:	4841      	ldr	r0, [pc, #260]	; (800f6f8 <icmp_input+0x200>)
 800f5f4:	f001 fb44 	bl	8010c80 <iprintf>
          pbuf_free(r);
 800f5f8:	6978      	ldr	r0, [r7, #20]
 800f5fa:	f7f8 fa45 	bl	8007a88 <pbuf_free>
          goto icmperr;
 800f5fe:	e06c      	b.n	800f6da <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f600:	6879      	ldr	r1, [r7, #4]
 800f602:	6978      	ldr	r0, [r7, #20]
 800f604:	f7f8 fb58 	bl	8007cb8 <pbuf_copy>
 800f608:	4603      	mov	r3, r0
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d003      	beq.n	800f616 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f60e:	6978      	ldr	r0, [r7, #20]
 800f610:	f7f8 fa3a 	bl	8007a88 <pbuf_free>
          goto icmperr;
 800f614:	e061      	b.n	800f6da <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f7f8 fa36 	bl	8007a88 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	607b      	str	r3, [r7, #4]
 800f620:	e00f      	b.n	800f642 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f622:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f624:	330e      	adds	r3, #14
 800f626:	4619      	mov	r1, r3
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f7f8 f9a7 	bl	800797c <pbuf_remove_header>
 800f62e:	4603      	mov	r3, r0
 800f630:	2b00      	cmp	r3, #0
 800f632:	d006      	beq.n	800f642 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f634:	4b2e      	ldr	r3, [pc, #184]	; (800f6f0 <icmp_input+0x1f8>)
 800f636:	22c7      	movs	r2, #199	; 0xc7
 800f638:	4930      	ldr	r1, [pc, #192]	; (800f6fc <icmp_input+0x204>)
 800f63a:	482f      	ldr	r0, [pc, #188]	; (800f6f8 <icmp_input+0x200>)
 800f63c:	f001 fb20 	bl	8010c80 <iprintf>
          goto icmperr;
 800f640:	e04b      	b.n	800f6da <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	685b      	ldr	r3, [r3, #4]
 800f646:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f648:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f64a:	4619      	mov	r1, r3
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f7f8 f985 	bl	800795c <pbuf_add_header>
 800f652:	4603      	mov	r3, r0
 800f654:	2b00      	cmp	r3, #0
 800f656:	d12b      	bne.n	800f6b0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	685b      	ldr	r3, [r3, #4]
 800f65c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f65e:	69fb      	ldr	r3, [r7, #28]
 800f660:	681a      	ldr	r2, [r3, #0]
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f666:	4b20      	ldr	r3, [pc, #128]	; (800f6e8 <icmp_input+0x1f0>)
 800f668:	691a      	ldr	r2, [r3, #16]
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	2200      	movs	r2, #0
 800f672:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	2200      	movs	r2, #0
 800f678:	709a      	strb	r2, [r3, #2]
 800f67a:	2200      	movs	r2, #0
 800f67c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	22ff      	movs	r2, #255	; 0xff
 800f682:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	2200      	movs	r2, #0
 800f688:	729a      	strb	r2, [r3, #10]
 800f68a:	2200      	movs	r2, #0
 800f68c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	9302      	str	r3, [sp, #8]
 800f692:	2301      	movs	r3, #1
 800f694:	9301      	str	r3, [sp, #4]
 800f696:	2300      	movs	r3, #0
 800f698:	9300      	str	r3, [sp, #0]
 800f69a:	23ff      	movs	r3, #255	; 0xff
 800f69c:	2200      	movs	r2, #0
 800f69e:	69f9      	ldr	r1, [r7, #28]
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f000 fa75 	bl	800fb90 <ip4_output_if>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f6aa:	e001      	b.n	800f6b0 <icmp_input+0x1b8>
      break;
 800f6ac:	bf00      	nop
 800f6ae:	e000      	b.n	800f6b2 <icmp_input+0x1ba>
      break;
 800f6b0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	f7f8 f9e8 	bl	8007a88 <pbuf_free>
  return;
 800f6b8:	e013      	b.n	800f6e2 <icmp_input+0x1ea>
    goto lenerr;
 800f6ba:	bf00      	nop
 800f6bc:	e002      	b.n	800f6c4 <icmp_input+0x1cc>
    goto lenerr;
 800f6be:	bf00      	nop
 800f6c0:	e000      	b.n	800f6c4 <icmp_input+0x1cc>
        goto lenerr;
 800f6c2:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f6c4:	6878      	ldr	r0, [r7, #4]
 800f6c6:	f7f8 f9df 	bl	8007a88 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f6ca:	e00a      	b.n	800f6e2 <icmp_input+0x1ea>
        goto icmperr;
 800f6cc:	bf00      	nop
 800f6ce:	e004      	b.n	800f6da <icmp_input+0x1e2>
        goto icmperr;
 800f6d0:	bf00      	nop
 800f6d2:	e002      	b.n	800f6da <icmp_input+0x1e2>
          goto icmperr;
 800f6d4:	bf00      	nop
 800f6d6:	e000      	b.n	800f6da <icmp_input+0x1e2>
          goto icmperr;
 800f6d8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f7f8 f9d4 	bl	8007a88 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f6e0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f6e2:	3728      	adds	r7, #40	; 0x28
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}
 800f6e8:	2000517c 	.word	0x2000517c
 800f6ec:	20005190 	.word	0x20005190
 800f6f0:	0801464c 	.word	0x0801464c
 800f6f4:	08014684 	.word	0x08014684
 800f6f8:	080146bc 	.word	0x080146bc
 800f6fc:	080146e4 	.word	0x080146e4

0800f700 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	460b      	mov	r3, r1
 800f70a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f70c:	78fb      	ldrb	r3, [r7, #3]
 800f70e:	461a      	mov	r2, r3
 800f710:	2103      	movs	r1, #3
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f000 f814 	bl	800f740 <icmp_send_response>
}
 800f718:	bf00      	nop
 800f71a:	3708      	adds	r7, #8
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}

0800f720 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b082      	sub	sp, #8
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	460b      	mov	r3, r1
 800f72a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f72c:	78fb      	ldrb	r3, [r7, #3]
 800f72e:	461a      	mov	r2, r3
 800f730:	210b      	movs	r1, #11
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f000 f804 	bl	800f740 <icmp_send_response>
}
 800f738:	bf00      	nop
 800f73a:	3708      	adds	r7, #8
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}

0800f740 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b08c      	sub	sp, #48	; 0x30
 800f744:	af04      	add	r7, sp, #16
 800f746:	6078      	str	r0, [r7, #4]
 800f748:	460b      	mov	r3, r1
 800f74a:	70fb      	strb	r3, [r7, #3]
 800f74c:	4613      	mov	r3, r2
 800f74e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f750:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f754:	2124      	movs	r1, #36	; 0x24
 800f756:	2022      	movs	r0, #34	; 0x22
 800f758:	f7f7 feb2 	bl	80074c0 <pbuf_alloc>
 800f75c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d04c      	beq.n	800f7fe <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f764:	69fb      	ldr	r3, [r7, #28]
 800f766:	895b      	ldrh	r3, [r3, #10]
 800f768:	2b23      	cmp	r3, #35	; 0x23
 800f76a:	d806      	bhi.n	800f77a <icmp_send_response+0x3a>
 800f76c:	4b26      	ldr	r3, [pc, #152]	; (800f808 <icmp_send_response+0xc8>)
 800f76e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f772:	4926      	ldr	r1, [pc, #152]	; (800f80c <icmp_send_response+0xcc>)
 800f774:	4826      	ldr	r0, [pc, #152]	; (800f810 <icmp_send_response+0xd0>)
 800f776:	f001 fa83 	bl	8010c80 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f780:	69fb      	ldr	r3, [r7, #28]
 800f782:	685b      	ldr	r3, [r3, #4]
 800f784:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	78fa      	ldrb	r2, [r7, #3]
 800f78a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	78ba      	ldrb	r2, [r7, #2]
 800f790:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	2200      	movs	r2, #0
 800f796:	711a      	strb	r2, [r3, #4]
 800f798:	2200      	movs	r2, #0
 800f79a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	719a      	strb	r2, [r3, #6]
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f7a6:	69fb      	ldr	r3, [r7, #28]
 800f7a8:	685b      	ldr	r3, [r3, #4]
 800f7aa:	f103 0008 	add.w	r0, r3, #8
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	221c      	movs	r2, #28
 800f7b4:	4619      	mov	r1, r3
 800f7b6:	f001 fa4d 	bl	8010c54 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f7ba:	69bb      	ldr	r3, [r7, #24]
 800f7bc:	68db      	ldr	r3, [r3, #12]
 800f7be:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f7c0:	f107 030c 	add.w	r3, r7, #12
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f000 f825 	bl	800f814 <ip4_route>
 800f7ca:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f7cc:	693b      	ldr	r3, [r7, #16]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d011      	beq.n	800f7f6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	709a      	strb	r2, [r3, #2]
 800f7d8:	2200      	movs	r2, #0
 800f7da:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f7dc:	f107 020c 	add.w	r2, r7, #12
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	9302      	str	r3, [sp, #8]
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	9301      	str	r3, [sp, #4]
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	9300      	str	r3, [sp, #0]
 800f7ec:	23ff      	movs	r3, #255	; 0xff
 800f7ee:	2100      	movs	r1, #0
 800f7f0:	69f8      	ldr	r0, [r7, #28]
 800f7f2:	f000 f9cd 	bl	800fb90 <ip4_output_if>
  }
  pbuf_free(q);
 800f7f6:	69f8      	ldr	r0, [r7, #28]
 800f7f8:	f7f8 f946 	bl	8007a88 <pbuf_free>
 800f7fc:	e000      	b.n	800f800 <icmp_send_response+0xc0>
    return;
 800f7fe:	bf00      	nop
}
 800f800:	3720      	adds	r7, #32
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
 800f806:	bf00      	nop
 800f808:	0801464c 	.word	0x0801464c
 800f80c:	08014718 	.word	0x08014718
 800f810:	080146bc 	.word	0x080146bc

0800f814 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f814:	b480      	push	{r7}
 800f816:	b085      	sub	sp, #20
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f81c:	4b33      	ldr	r3, [pc, #204]	; (800f8ec <ip4_route+0xd8>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	60fb      	str	r3, [r7, #12]
 800f822:	e036      	b.n	800f892 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f82a:	f003 0301 	and.w	r3, r3, #1
 800f82e:	b2db      	uxtb	r3, r3
 800f830:	2b00      	cmp	r3, #0
 800f832:	d02b      	beq.n	800f88c <ip4_route+0x78>
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f83a:	089b      	lsrs	r3, r3, #2
 800f83c:	f003 0301 	and.w	r3, r3, #1
 800f840:	b2db      	uxtb	r3, r3
 800f842:	2b00      	cmp	r3, #0
 800f844:	d022      	beq.n	800f88c <ip4_route+0x78>
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	3304      	adds	r3, #4
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d01d      	beq.n	800f88c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681a      	ldr	r2, [r3, #0]
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	3304      	adds	r3, #4
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	405a      	eors	r2, r3
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	3308      	adds	r3, #8
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	4013      	ands	r3, r2
 800f864:	2b00      	cmp	r3, #0
 800f866:	d101      	bne.n	800f86c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	e038      	b.n	800f8de <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f872:	f003 0302 	and.w	r3, r3, #2
 800f876:	2b00      	cmp	r3, #0
 800f878:	d108      	bne.n	800f88c <ip4_route+0x78>
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	330c      	adds	r3, #12
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	429a      	cmp	r2, r3
 800f886:	d101      	bne.n	800f88c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	e028      	b.n	800f8de <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	60fb      	str	r3, [r7, #12]
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d1c5      	bne.n	800f824 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f898:	4b15      	ldr	r3, [pc, #84]	; (800f8f0 <ip4_route+0xdc>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d01a      	beq.n	800f8d6 <ip4_route+0xc2>
 800f8a0:	4b13      	ldr	r3, [pc, #76]	; (800f8f0 <ip4_route+0xdc>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f8a8:	f003 0301 	and.w	r3, r3, #1
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d012      	beq.n	800f8d6 <ip4_route+0xc2>
 800f8b0:	4b0f      	ldr	r3, [pc, #60]	; (800f8f0 <ip4_route+0xdc>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f8b8:	f003 0304 	and.w	r3, r3, #4
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d00a      	beq.n	800f8d6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f8c0:	4b0b      	ldr	r3, [pc, #44]	; (800f8f0 <ip4_route+0xdc>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	3304      	adds	r3, #4
 800f8c6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d004      	beq.n	800f8d6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	b2db      	uxtb	r3, r3
 800f8d2:	2b7f      	cmp	r3, #127	; 0x7f
 800f8d4:	d101      	bne.n	800f8da <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	e001      	b.n	800f8de <ip4_route+0xca>
  }

  return netif_default;
 800f8da:	4b05      	ldr	r3, [pc, #20]	; (800f8f0 <ip4_route+0xdc>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3714      	adds	r7, #20
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e8:	4770      	bx	lr
 800f8ea:	bf00      	nop
 800f8ec:	200086e0 	.word	0x200086e0
 800f8f0:	200086e4 	.word	0x200086e4

0800f8f4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b082      	sub	sp, #8
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f902:	f003 0301 	and.w	r3, r3, #1
 800f906:	b2db      	uxtb	r3, r3
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d016      	beq.n	800f93a <ip4_input_accept+0x46>
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	3304      	adds	r3, #4
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d011      	beq.n	800f93a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f916:	4b0b      	ldr	r3, [pc, #44]	; (800f944 <ip4_input_accept+0x50>)
 800f918:	695a      	ldr	r2, [r3, #20]
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	3304      	adds	r3, #4
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	429a      	cmp	r2, r3
 800f922:	d008      	beq.n	800f936 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f924:	4b07      	ldr	r3, [pc, #28]	; (800f944 <ip4_input_accept+0x50>)
 800f926:	695b      	ldr	r3, [r3, #20]
 800f928:	6879      	ldr	r1, [r7, #4]
 800f92a:	4618      	mov	r0, r3
 800f92c:	f000 fa08 	bl	800fd40 <ip4_addr_isbroadcast_u32>
 800f930:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f932:	2b00      	cmp	r3, #0
 800f934:	d001      	beq.n	800f93a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f936:	2301      	movs	r3, #1
 800f938:	e000      	b.n	800f93c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f93a:	2300      	movs	r3, #0
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3708      	adds	r7, #8
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}
 800f944:	2000517c 	.word	0x2000517c

0800f948 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b086      	sub	sp, #24
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	685b      	ldr	r3, [r3, #4]
 800f956:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	781b      	ldrb	r3, [r3, #0]
 800f95c:	091b      	lsrs	r3, r3, #4
 800f95e:	b2db      	uxtb	r3, r3
 800f960:	2b04      	cmp	r3, #4
 800f962:	d004      	beq.n	800f96e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f7f8 f88f 	bl	8007a88 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f96a:	2300      	movs	r3, #0
 800f96c:	e107      	b.n	800fb7e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f96e:	697b      	ldr	r3, [r7, #20]
 800f970:	781b      	ldrb	r3, [r3, #0]
 800f972:	f003 030f 	and.w	r3, r3, #15
 800f976:	b2db      	uxtb	r3, r3
 800f978:	009b      	lsls	r3, r3, #2
 800f97a:	b2db      	uxtb	r3, r3
 800f97c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	885b      	ldrh	r3, [r3, #2]
 800f982:	b29b      	uxth	r3, r3
 800f984:	4618      	mov	r0, r3
 800f986:	f7f6 fcb7 	bl	80062f8 <lwip_htons>
 800f98a:	4603      	mov	r3, r0
 800f98c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	891b      	ldrh	r3, [r3, #8]
 800f992:	89ba      	ldrh	r2, [r7, #12]
 800f994:	429a      	cmp	r2, r3
 800f996:	d204      	bcs.n	800f9a2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800f998:	89bb      	ldrh	r3, [r7, #12]
 800f99a:	4619      	mov	r1, r3
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f7f7 feed 	bl	800777c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	895b      	ldrh	r3, [r3, #10]
 800f9a6:	89fa      	ldrh	r2, [r7, #14]
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	d807      	bhi.n	800f9bc <ip4_input+0x74>
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	891b      	ldrh	r3, [r3, #8]
 800f9b0:	89ba      	ldrh	r2, [r7, #12]
 800f9b2:	429a      	cmp	r2, r3
 800f9b4:	d802      	bhi.n	800f9bc <ip4_input+0x74>
 800f9b6:	89fb      	ldrh	r3, [r7, #14]
 800f9b8:	2b13      	cmp	r3, #19
 800f9ba:	d804      	bhi.n	800f9c6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f7f8 f863 	bl	8007a88 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	e0db      	b.n	800fb7e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f9c6:	697b      	ldr	r3, [r7, #20]
 800f9c8:	691b      	ldr	r3, [r3, #16]
 800f9ca:	4a6f      	ldr	r2, [pc, #444]	; (800fb88 <ip4_input+0x240>)
 800f9cc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	68db      	ldr	r3, [r3, #12]
 800f9d2:	4a6d      	ldr	r2, [pc, #436]	; (800fb88 <ip4_input+0x240>)
 800f9d4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f9d6:	4b6c      	ldr	r3, [pc, #432]	; (800fb88 <ip4_input+0x240>)
 800f9d8:	695b      	ldr	r3, [r3, #20]
 800f9da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f9de:	2be0      	cmp	r3, #224	; 0xe0
 800f9e0:	d112      	bne.n	800fa08 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f9e8:	f003 0301 	and.w	r3, r3, #1
 800f9ec:	b2db      	uxtb	r3, r3
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d007      	beq.n	800fa02 <ip4_input+0xba>
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	3304      	adds	r3, #4
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d002      	beq.n	800fa02 <ip4_input+0xba>
      netif = inp;
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	613b      	str	r3, [r7, #16]
 800fa00:	e02a      	b.n	800fa58 <ip4_input+0x110>
    } else {
      netif = NULL;
 800fa02:	2300      	movs	r3, #0
 800fa04:	613b      	str	r3, [r7, #16]
 800fa06:	e027      	b.n	800fa58 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800fa08:	6838      	ldr	r0, [r7, #0]
 800fa0a:	f7ff ff73 	bl	800f8f4 <ip4_input_accept>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d002      	beq.n	800fa1a <ip4_input+0xd2>
      netif = inp;
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	613b      	str	r3, [r7, #16]
 800fa18:	e01e      	b.n	800fa58 <ip4_input+0x110>
    } else {
      netif = NULL;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800fa1e:	4b5a      	ldr	r3, [pc, #360]	; (800fb88 <ip4_input+0x240>)
 800fa20:	695b      	ldr	r3, [r3, #20]
 800fa22:	b2db      	uxtb	r3, r3
 800fa24:	2b7f      	cmp	r3, #127	; 0x7f
 800fa26:	d017      	beq.n	800fa58 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800fa28:	4b58      	ldr	r3, [pc, #352]	; (800fb8c <ip4_input+0x244>)
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	613b      	str	r3, [r7, #16]
 800fa2e:	e00e      	b.n	800fa4e <ip4_input+0x106>
          if (netif == inp) {
 800fa30:	693a      	ldr	r2, [r7, #16]
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	429a      	cmp	r2, r3
 800fa36:	d006      	beq.n	800fa46 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800fa38:	6938      	ldr	r0, [r7, #16]
 800fa3a:	f7ff ff5b 	bl	800f8f4 <ip4_input_accept>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d108      	bne.n	800fa56 <ip4_input+0x10e>
 800fa44:	e000      	b.n	800fa48 <ip4_input+0x100>
            continue;
 800fa46:	bf00      	nop
        NETIF_FOREACH(netif) {
 800fa48:	693b      	ldr	r3, [r7, #16]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	613b      	str	r3, [r7, #16]
 800fa4e:	693b      	ldr	r3, [r7, #16]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d1ed      	bne.n	800fa30 <ip4_input+0xe8>
 800fa54:	e000      	b.n	800fa58 <ip4_input+0x110>
            break;
 800fa56:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fa58:	4b4b      	ldr	r3, [pc, #300]	; (800fb88 <ip4_input+0x240>)
 800fa5a:	691b      	ldr	r3, [r3, #16]
 800fa5c:	6839      	ldr	r1, [r7, #0]
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f000 f96e 	bl	800fd40 <ip4_addr_isbroadcast_u32>
 800fa64:	4603      	mov	r3, r0
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d105      	bne.n	800fa76 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800fa6a:	4b47      	ldr	r3, [pc, #284]	; (800fb88 <ip4_input+0x240>)
 800fa6c:	691b      	ldr	r3, [r3, #16]
 800fa6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fa72:	2be0      	cmp	r3, #224	; 0xe0
 800fa74:	d104      	bne.n	800fa80 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f7f8 f806 	bl	8007a88 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	e07e      	b.n	800fb7e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d104      	bne.n	800fa90 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f7f7 fffe 	bl	8007a88 <pbuf_free>
    return ERR_OK;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	e076      	b.n	800fb7e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	88db      	ldrh	r3, [r3, #6]
 800fa94:	b29b      	uxth	r3, r3
 800fa96:	461a      	mov	r2, r3
 800fa98:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800fa9c:	4013      	ands	r3, r2
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d00b      	beq.n	800faba <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f000 fc92 	bl	80103cc <ip4_reass>
 800faa8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d101      	bne.n	800fab4 <ip4_input+0x16c>
      return ERR_OK;
 800fab0:	2300      	movs	r3, #0
 800fab2:	e064      	b.n	800fb7e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	685b      	ldr	r3, [r3, #4]
 800fab8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800faba:	4a33      	ldr	r2, [pc, #204]	; (800fb88 <ip4_input+0x240>)
 800fabc:	693b      	ldr	r3, [r7, #16]
 800fabe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800fac0:	4a31      	ldr	r2, [pc, #196]	; (800fb88 <ip4_input+0x240>)
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800fac6:	4a30      	ldr	r2, [pc, #192]	; (800fb88 <ip4_input+0x240>)
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	781b      	ldrb	r3, [r3, #0]
 800fad0:	f003 030f 	and.w	r3, r3, #15
 800fad4:	b2db      	uxtb	r3, r3
 800fad6:	009b      	lsls	r3, r3, #2
 800fad8:	b2db      	uxtb	r3, r3
 800fada:	b29a      	uxth	r2, r3
 800fadc:	4b2a      	ldr	r3, [pc, #168]	; (800fb88 <ip4_input+0x240>)
 800fade:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800fae0:	89fb      	ldrh	r3, [r7, #14]
 800fae2:	4619      	mov	r1, r3
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f7f7 ff49 	bl	800797c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800faea:	697b      	ldr	r3, [r7, #20]
 800faec:	7a5b      	ldrb	r3, [r3, #9]
 800faee:	2b11      	cmp	r3, #17
 800faf0:	d006      	beq.n	800fb00 <ip4_input+0x1b8>
 800faf2:	2b11      	cmp	r3, #17
 800faf4:	dc13      	bgt.n	800fb1e <ip4_input+0x1d6>
 800faf6:	2b01      	cmp	r3, #1
 800faf8:	d00c      	beq.n	800fb14 <ip4_input+0x1cc>
 800fafa:	2b06      	cmp	r3, #6
 800fafc:	d005      	beq.n	800fb0a <ip4_input+0x1c2>
 800fafe:	e00e      	b.n	800fb1e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800fb00:	6839      	ldr	r1, [r7, #0]
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f7fe fc68 	bl	800e3d8 <udp_input>
        break;
 800fb08:	e026      	b.n	800fb58 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800fb0a:	6839      	ldr	r1, [r7, #0]
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f7fa f889 	bl	8009c24 <tcp_input>
        break;
 800fb12:	e021      	b.n	800fb58 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800fb14:	6839      	ldr	r1, [r7, #0]
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f7ff fcee 	bl	800f4f8 <icmp_input>
        break;
 800fb1c:	e01c      	b.n	800fb58 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fb1e:	4b1a      	ldr	r3, [pc, #104]	; (800fb88 <ip4_input+0x240>)
 800fb20:	695b      	ldr	r3, [r3, #20]
 800fb22:	6939      	ldr	r1, [r7, #16]
 800fb24:	4618      	mov	r0, r3
 800fb26:	f000 f90b 	bl	800fd40 <ip4_addr_isbroadcast_u32>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d10f      	bne.n	800fb50 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fb30:	4b15      	ldr	r3, [pc, #84]	; (800fb88 <ip4_input+0x240>)
 800fb32:	695b      	ldr	r3, [r3, #20]
 800fb34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fb38:	2be0      	cmp	r3, #224	; 0xe0
 800fb3a:	d009      	beq.n	800fb50 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800fb3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fb40:	4619      	mov	r1, r3
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f7f7 ff8d 	bl	8007a62 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800fb48:	2102      	movs	r1, #2
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f7ff fdd8 	bl	800f700 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f7f7 ff99 	bl	8007a88 <pbuf_free>
        break;
 800fb56:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800fb58:	4b0b      	ldr	r3, [pc, #44]	; (800fb88 <ip4_input+0x240>)
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800fb5e:	4b0a      	ldr	r3, [pc, #40]	; (800fb88 <ip4_input+0x240>)
 800fb60:	2200      	movs	r2, #0
 800fb62:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800fb64:	4b08      	ldr	r3, [pc, #32]	; (800fb88 <ip4_input+0x240>)
 800fb66:	2200      	movs	r2, #0
 800fb68:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800fb6a:	4b07      	ldr	r3, [pc, #28]	; (800fb88 <ip4_input+0x240>)
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800fb70:	4b05      	ldr	r3, [pc, #20]	; (800fb88 <ip4_input+0x240>)
 800fb72:	2200      	movs	r2, #0
 800fb74:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800fb76:	4b04      	ldr	r3, [pc, #16]	; (800fb88 <ip4_input+0x240>)
 800fb78:	2200      	movs	r2, #0
 800fb7a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800fb7c:	2300      	movs	r3, #0
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3718      	adds	r7, #24
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	2000517c 	.word	0x2000517c
 800fb8c:	200086e0 	.word	0x200086e0

0800fb90 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b08a      	sub	sp, #40	; 0x28
 800fb94:	af04      	add	r7, sp, #16
 800fb96:	60f8      	str	r0, [r7, #12]
 800fb98:	60b9      	str	r1, [r7, #8]
 800fb9a:	607a      	str	r2, [r7, #4]
 800fb9c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d009      	beq.n	800fbbc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800fba8:	68bb      	ldr	r3, [r7, #8]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d003      	beq.n	800fbb6 <ip4_output_if+0x26>
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d102      	bne.n	800fbbc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800fbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbb8:	3304      	adds	r3, #4
 800fbba:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800fbbc:	78fa      	ldrb	r2, [r7, #3]
 800fbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc0:	9302      	str	r3, [sp, #8]
 800fbc2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fbc6:	9301      	str	r3, [sp, #4]
 800fbc8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fbcc:	9300      	str	r3, [sp, #0]
 800fbce:	4613      	mov	r3, r2
 800fbd0:	687a      	ldr	r2, [r7, #4]
 800fbd2:	6979      	ldr	r1, [r7, #20]
 800fbd4:	68f8      	ldr	r0, [r7, #12]
 800fbd6:	f000 f805 	bl	800fbe4 <ip4_output_if_src>
 800fbda:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3718      	adds	r7, #24
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}

0800fbe4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b088      	sub	sp, #32
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	60f8      	str	r0, [r7, #12]
 800fbec:	60b9      	str	r1, [r7, #8]
 800fbee:	607a      	str	r2, [r7, #4]
 800fbf0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	7b9b      	ldrb	r3, [r3, #14]
 800fbf6:	2b01      	cmp	r3, #1
 800fbf8:	d006      	beq.n	800fc08 <ip4_output_if_src+0x24>
 800fbfa:	4b4b      	ldr	r3, [pc, #300]	; (800fd28 <ip4_output_if_src+0x144>)
 800fbfc:	f44f 7255 	mov.w	r2, #852	; 0x354
 800fc00:	494a      	ldr	r1, [pc, #296]	; (800fd2c <ip4_output_if_src+0x148>)
 800fc02:	484b      	ldr	r0, [pc, #300]	; (800fd30 <ip4_output_if_src+0x14c>)
 800fc04:	f001 f83c 	bl	8010c80 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d060      	beq.n	800fcd0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800fc0e:	2314      	movs	r3, #20
 800fc10:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800fc12:	2114      	movs	r1, #20
 800fc14:	68f8      	ldr	r0, [r7, #12]
 800fc16:	f7f7 fea1 	bl	800795c <pbuf_add_header>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d002      	beq.n	800fc26 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fc20:	f06f 0301 	mvn.w	r3, #1
 800fc24:	e07c      	b.n	800fd20 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	895b      	ldrh	r3, [r3, #10]
 800fc30:	2b13      	cmp	r3, #19
 800fc32:	d806      	bhi.n	800fc42 <ip4_output_if_src+0x5e>
 800fc34:	4b3c      	ldr	r3, [pc, #240]	; (800fd28 <ip4_output_if_src+0x144>)
 800fc36:	f44f 7262 	mov.w	r2, #904	; 0x388
 800fc3a:	493e      	ldr	r1, [pc, #248]	; (800fd34 <ip4_output_if_src+0x150>)
 800fc3c:	483c      	ldr	r0, [pc, #240]	; (800fd30 <ip4_output_if_src+0x14c>)
 800fc3e:	f001 f81f 	bl	8010c80 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800fc42:	69fb      	ldr	r3, [r7, #28]
 800fc44:	78fa      	ldrb	r2, [r7, #3]
 800fc46:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800fc48:	69fb      	ldr	r3, [r7, #28]
 800fc4a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800fc4e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681a      	ldr	r2, [r3, #0]
 800fc54:	69fb      	ldr	r3, [r7, #28]
 800fc56:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800fc58:	8b7b      	ldrh	r3, [r7, #26]
 800fc5a:	089b      	lsrs	r3, r3, #2
 800fc5c:	b29b      	uxth	r3, r3
 800fc5e:	b2db      	uxtb	r3, r3
 800fc60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc64:	b2da      	uxtb	r2, r3
 800fc66:	69fb      	ldr	r3, [r7, #28]
 800fc68:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800fc6a:	69fb      	ldr	r3, [r7, #28]
 800fc6c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fc70:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	891b      	ldrh	r3, [r3, #8]
 800fc76:	4618      	mov	r0, r3
 800fc78:	f7f6 fb3e 	bl	80062f8 <lwip_htons>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	461a      	mov	r2, r3
 800fc80:	69fb      	ldr	r3, [r7, #28]
 800fc82:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800fc84:	69fb      	ldr	r3, [r7, #28]
 800fc86:	2200      	movs	r2, #0
 800fc88:	719a      	strb	r2, [r3, #6]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fc8e:	4b2a      	ldr	r3, [pc, #168]	; (800fd38 <ip4_output_if_src+0x154>)
 800fc90:	881b      	ldrh	r3, [r3, #0]
 800fc92:	4618      	mov	r0, r3
 800fc94:	f7f6 fb30 	bl	80062f8 <lwip_htons>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	461a      	mov	r2, r3
 800fc9c:	69fb      	ldr	r3, [r7, #28]
 800fc9e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800fca0:	4b25      	ldr	r3, [pc, #148]	; (800fd38 <ip4_output_if_src+0x154>)
 800fca2:	881b      	ldrh	r3, [r3, #0]
 800fca4:	3301      	adds	r3, #1
 800fca6:	b29a      	uxth	r2, r3
 800fca8:	4b23      	ldr	r3, [pc, #140]	; (800fd38 <ip4_output_if_src+0x154>)
 800fcaa:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800fcac:	68bb      	ldr	r3, [r7, #8]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d104      	bne.n	800fcbc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800fcb2:	4b22      	ldr	r3, [pc, #136]	; (800fd3c <ip4_output_if_src+0x158>)
 800fcb4:	681a      	ldr	r2, [r3, #0]
 800fcb6:	69fb      	ldr	r3, [r7, #28]
 800fcb8:	60da      	str	r2, [r3, #12]
 800fcba:	e003      	b.n	800fcc4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	681a      	ldr	r2, [r3, #0]
 800fcc0:	69fb      	ldr	r3, [r7, #28]
 800fcc2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800fcc4:	69fb      	ldr	r3, [r7, #28]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	729a      	strb	r2, [r3, #10]
 800fcca:	2200      	movs	r2, #0
 800fccc:	72da      	strb	r2, [r3, #11]
 800fcce:	e00f      	b.n	800fcf0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	895b      	ldrh	r3, [r3, #10]
 800fcd4:	2b13      	cmp	r3, #19
 800fcd6:	d802      	bhi.n	800fcde <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fcd8:	f06f 0301 	mvn.w	r3, #1
 800fcdc:	e020      	b.n	800fd20 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	685b      	ldr	r3, [r3, #4]
 800fce2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800fce4:	69fb      	ldr	r3, [r7, #28]
 800fce6:	691b      	ldr	r3, [r3, #16]
 800fce8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800fcea:	f107 0314 	add.w	r3, r7, #20
 800fcee:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800fcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d00c      	beq.n	800fd12 <ip4_output_if_src+0x12e>
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	891a      	ldrh	r2, [r3, #8]
 800fcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcfe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d906      	bls.n	800fd12 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800fd04:	687a      	ldr	r2, [r7, #4]
 800fd06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fd08:	68f8      	ldr	r0, [r7, #12]
 800fd0a:	f000 fd53 	bl	80107b4 <ip4_frag>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	e006      	b.n	800fd20 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800fd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd14:	695b      	ldr	r3, [r3, #20]
 800fd16:	687a      	ldr	r2, [r7, #4]
 800fd18:	68f9      	ldr	r1, [r7, #12]
 800fd1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd1c:	4798      	blx	r3
 800fd1e:	4603      	mov	r3, r0
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	3720      	adds	r7, #32
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}
 800fd28:	08014744 	.word	0x08014744
 800fd2c:	08014778 	.word	0x08014778
 800fd30:	08014784 	.word	0x08014784
 800fd34:	080147ac 	.word	0x080147ac
 800fd38:	2000883e 	.word	0x2000883e
 800fd3c:	08015068 	.word	0x08015068

0800fd40 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800fd40:	b480      	push	{r7}
 800fd42:	b085      	sub	sp, #20
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
 800fd48:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd54:	d002      	beq.n	800fd5c <ip4_addr_isbroadcast_u32+0x1c>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d101      	bne.n	800fd60 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	e02a      	b.n	800fdb6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fd66:	f003 0302 	and.w	r3, r3, #2
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d101      	bne.n	800fd72 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	e021      	b.n	800fdb6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	3304      	adds	r3, #4
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	687a      	ldr	r2, [r7, #4]
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	d101      	bne.n	800fd82 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	e019      	b.n	800fdb6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800fd82:	68fa      	ldr	r2, [r7, #12]
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	3304      	adds	r3, #4
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	405a      	eors	r2, r3
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	3308      	adds	r3, #8
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	4013      	ands	r3, r2
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d10d      	bne.n	800fdb4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	3308      	adds	r3, #8
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	43da      	mvns	r2, r3
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	3308      	adds	r3, #8
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fdac:	429a      	cmp	r2, r3
 800fdae:	d101      	bne.n	800fdb4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800fdb0:	2301      	movs	r3, #1
 800fdb2:	e000      	b.n	800fdb6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800fdb4:	2300      	movs	r3, #0
  }
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3714      	adds	r7, #20
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc0:	4770      	bx	lr
	...

0800fdc4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b084      	sub	sp, #16
 800fdc8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800fdce:	4b12      	ldr	r3, [pc, #72]	; (800fe18 <ip_reass_tmr+0x54>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800fdd4:	e018      	b.n	800fe08 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	7fdb      	ldrb	r3, [r3, #31]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d00b      	beq.n	800fdf6 <ip_reass_tmr+0x32>
      r->timer--;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	7fdb      	ldrb	r3, [r3, #31]
 800fde2:	3b01      	subs	r3, #1
 800fde4:	b2da      	uxtb	r2, r3
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	60fb      	str	r3, [r7, #12]
 800fdf4:	e008      	b.n	800fe08 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800fe00:	68b9      	ldr	r1, [r7, #8]
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f000 f80a 	bl	800fe1c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d1e3      	bne.n	800fdd6 <ip_reass_tmr+0x12>
    }
  }
}
 800fe0e:	bf00      	nop
 800fe10:	bf00      	nop
 800fe12:	3710      	adds	r7, #16
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}
 800fe18:	20008840 	.word	0x20008840

0800fe1c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b088      	sub	sp, #32
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800fe26:	2300      	movs	r3, #0
 800fe28:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800fe2a:	683a      	ldr	r2, [r7, #0]
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	429a      	cmp	r2, r3
 800fe30:	d105      	bne.n	800fe3e <ip_reass_free_complete_datagram+0x22>
 800fe32:	4b45      	ldr	r3, [pc, #276]	; (800ff48 <ip_reass_free_complete_datagram+0x12c>)
 800fe34:	22ab      	movs	r2, #171	; 0xab
 800fe36:	4945      	ldr	r1, [pc, #276]	; (800ff4c <ip_reass_free_complete_datagram+0x130>)
 800fe38:	4845      	ldr	r0, [pc, #276]	; (800ff50 <ip_reass_free_complete_datagram+0x134>)
 800fe3a:	f000 ff21 	bl	8010c80 <iprintf>
  if (prev != NULL) {
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d00a      	beq.n	800fe5a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	687a      	ldr	r2, [r7, #4]
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	d005      	beq.n	800fe5a <ip_reass_free_complete_datagram+0x3e>
 800fe4e:	4b3e      	ldr	r3, [pc, #248]	; (800ff48 <ip_reass_free_complete_datagram+0x12c>)
 800fe50:	22ad      	movs	r2, #173	; 0xad
 800fe52:	4940      	ldr	r1, [pc, #256]	; (800ff54 <ip_reass_free_complete_datagram+0x138>)
 800fe54:	483e      	ldr	r0, [pc, #248]	; (800ff50 <ip_reass_free_complete_datagram+0x134>)
 800fe56:	f000 ff13 	bl	8010c80 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	685b      	ldr	r3, [r3, #4]
 800fe5e:	685b      	ldr	r3, [r3, #4]
 800fe60:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800fe62:	697b      	ldr	r3, [r7, #20]
 800fe64:	889b      	ldrh	r3, [r3, #4]
 800fe66:	b29b      	uxth	r3, r3
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d12a      	bne.n	800fec2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	685b      	ldr	r3, [r3, #4]
 800fe70:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	681a      	ldr	r2, [r3, #0]
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800fe7a:	69bb      	ldr	r3, [r7, #24]
 800fe7c:	6858      	ldr	r0, [r3, #4]
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	3308      	adds	r3, #8
 800fe82:	2214      	movs	r2, #20
 800fe84:	4619      	mov	r1, r3
 800fe86:	f000 fee5 	bl	8010c54 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800fe8a:	2101      	movs	r1, #1
 800fe8c:	69b8      	ldr	r0, [r7, #24]
 800fe8e:	f7ff fc47 	bl	800f720 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800fe92:	69b8      	ldr	r0, [r7, #24]
 800fe94:	f7f7 fe80 	bl	8007b98 <pbuf_clen>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fe9c:	8bfa      	ldrh	r2, [r7, #30]
 800fe9e:	8a7b      	ldrh	r3, [r7, #18]
 800fea0:	4413      	add	r3, r2
 800fea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fea6:	db05      	blt.n	800feb4 <ip_reass_free_complete_datagram+0x98>
 800fea8:	4b27      	ldr	r3, [pc, #156]	; (800ff48 <ip_reass_free_complete_datagram+0x12c>)
 800feaa:	22bc      	movs	r2, #188	; 0xbc
 800feac:	492a      	ldr	r1, [pc, #168]	; (800ff58 <ip_reass_free_complete_datagram+0x13c>)
 800feae:	4828      	ldr	r0, [pc, #160]	; (800ff50 <ip_reass_free_complete_datagram+0x134>)
 800feb0:	f000 fee6 	bl	8010c80 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800feb4:	8bfa      	ldrh	r2, [r7, #30]
 800feb6:	8a7b      	ldrh	r3, [r7, #18]
 800feb8:	4413      	add	r3, r2
 800feba:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800febc:	69b8      	ldr	r0, [r7, #24]
 800febe:	f7f7 fde3 	bl	8007a88 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	685b      	ldr	r3, [r3, #4]
 800fec6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800fec8:	e01f      	b.n	800ff0a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800feca:	69bb      	ldr	r3, [r7, #24]
 800fecc:	685b      	ldr	r3, [r3, #4]
 800fece:	617b      	str	r3, [r7, #20]
    pcur = p;
 800fed0:	69bb      	ldr	r3, [r7, #24]
 800fed2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800feda:	68f8      	ldr	r0, [r7, #12]
 800fedc:	f7f7 fe5c 	bl	8007b98 <pbuf_clen>
 800fee0:	4603      	mov	r3, r0
 800fee2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fee4:	8bfa      	ldrh	r2, [r7, #30]
 800fee6:	8a7b      	ldrh	r3, [r7, #18]
 800fee8:	4413      	add	r3, r2
 800feea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800feee:	db05      	blt.n	800fefc <ip_reass_free_complete_datagram+0xe0>
 800fef0:	4b15      	ldr	r3, [pc, #84]	; (800ff48 <ip_reass_free_complete_datagram+0x12c>)
 800fef2:	22cc      	movs	r2, #204	; 0xcc
 800fef4:	4918      	ldr	r1, [pc, #96]	; (800ff58 <ip_reass_free_complete_datagram+0x13c>)
 800fef6:	4816      	ldr	r0, [pc, #88]	; (800ff50 <ip_reass_free_complete_datagram+0x134>)
 800fef8:	f000 fec2 	bl	8010c80 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800fefc:	8bfa      	ldrh	r2, [r7, #30]
 800fefe:	8a7b      	ldrh	r3, [r7, #18]
 800ff00:	4413      	add	r3, r2
 800ff02:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ff04:	68f8      	ldr	r0, [r7, #12]
 800ff06:	f7f7 fdbf 	bl	8007a88 <pbuf_free>
  while (p != NULL) {
 800ff0a:	69bb      	ldr	r3, [r7, #24]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d1dc      	bne.n	800feca <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ff10:	6839      	ldr	r1, [r7, #0]
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f000 f8c2 	bl	801009c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ff18:	4b10      	ldr	r3, [pc, #64]	; (800ff5c <ip_reass_free_complete_datagram+0x140>)
 800ff1a:	881b      	ldrh	r3, [r3, #0]
 800ff1c:	8bfa      	ldrh	r2, [r7, #30]
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d905      	bls.n	800ff2e <ip_reass_free_complete_datagram+0x112>
 800ff22:	4b09      	ldr	r3, [pc, #36]	; (800ff48 <ip_reass_free_complete_datagram+0x12c>)
 800ff24:	22d2      	movs	r2, #210	; 0xd2
 800ff26:	490e      	ldr	r1, [pc, #56]	; (800ff60 <ip_reass_free_complete_datagram+0x144>)
 800ff28:	4809      	ldr	r0, [pc, #36]	; (800ff50 <ip_reass_free_complete_datagram+0x134>)
 800ff2a:	f000 fea9 	bl	8010c80 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ff2e:	4b0b      	ldr	r3, [pc, #44]	; (800ff5c <ip_reass_free_complete_datagram+0x140>)
 800ff30:	881a      	ldrh	r2, [r3, #0]
 800ff32:	8bfb      	ldrh	r3, [r7, #30]
 800ff34:	1ad3      	subs	r3, r2, r3
 800ff36:	b29a      	uxth	r2, r3
 800ff38:	4b08      	ldr	r3, [pc, #32]	; (800ff5c <ip_reass_free_complete_datagram+0x140>)
 800ff3a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ff3c:	8bfb      	ldrh	r3, [r7, #30]
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	3720      	adds	r7, #32
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bd80      	pop	{r7, pc}
 800ff46:	bf00      	nop
 800ff48:	080147dc 	.word	0x080147dc
 800ff4c:	08014818 	.word	0x08014818
 800ff50:	08014824 	.word	0x08014824
 800ff54:	0801484c 	.word	0x0801484c
 800ff58:	08014860 	.word	0x08014860
 800ff5c:	20008844 	.word	0x20008844
 800ff60:	08014880 	.word	0x08014880

0800ff64 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b08a      	sub	sp, #40	; 0x28
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
 800ff6c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ff72:	2300      	movs	r3, #0
 800ff74:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ff76:	2300      	movs	r3, #0
 800ff78:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ff82:	4b28      	ldr	r3, [pc, #160]	; (8010024 <ip_reass_remove_oldest_datagram+0xc0>)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ff88:	e030      	b.n	800ffec <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ff8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff8c:	695a      	ldr	r2, [r3, #20]
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	68db      	ldr	r3, [r3, #12]
 800ff92:	429a      	cmp	r2, r3
 800ff94:	d10c      	bne.n	800ffb0 <ip_reass_remove_oldest_datagram+0x4c>
 800ff96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff98:	699a      	ldr	r2, [r3, #24]
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	691b      	ldr	r3, [r3, #16]
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d106      	bne.n	800ffb0 <ip_reass_remove_oldest_datagram+0x4c>
 800ffa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffa4:	899a      	ldrh	r2, [r3, #12]
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	889b      	ldrh	r3, [r3, #4]
 800ffaa:	b29b      	uxth	r3, r3
 800ffac:	429a      	cmp	r2, r3
 800ffae:	d014      	beq.n	800ffda <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800ffb0:	693b      	ldr	r3, [r7, #16]
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800ffb6:	6a3b      	ldr	r3, [r7, #32]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d104      	bne.n	800ffc6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ffbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffbe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ffc0:	69fb      	ldr	r3, [r7, #28]
 800ffc2:	61bb      	str	r3, [r7, #24]
 800ffc4:	e009      	b.n	800ffda <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800ffc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc8:	7fda      	ldrb	r2, [r3, #31]
 800ffca:	6a3b      	ldr	r3, [r7, #32]
 800ffcc:	7fdb      	ldrb	r3, [r3, #31]
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d803      	bhi.n	800ffda <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800ffd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ffd6:	69fb      	ldr	r3, [r7, #28]
 800ffd8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ffda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d001      	beq.n	800ffe6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ffe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ffe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ffec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d1cb      	bne.n	800ff8a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800fff2:	6a3b      	ldr	r3, [r7, #32]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d008      	beq.n	801000a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800fff8:	69b9      	ldr	r1, [r7, #24]
 800fffa:	6a38      	ldr	r0, [r7, #32]
 800fffc:	f7ff ff0e 	bl	800fe1c <ip_reass_free_complete_datagram>
 8010000:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010002:	697a      	ldr	r2, [r7, #20]
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	4413      	add	r3, r2
 8010008:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801000a:	697a      	ldr	r2, [r7, #20]
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	429a      	cmp	r2, r3
 8010010:	da02      	bge.n	8010018 <ip_reass_remove_oldest_datagram+0xb4>
 8010012:	693b      	ldr	r3, [r7, #16]
 8010014:	2b01      	cmp	r3, #1
 8010016:	dcac      	bgt.n	800ff72 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010018:	697b      	ldr	r3, [r7, #20]
}
 801001a:	4618      	mov	r0, r3
 801001c:	3728      	adds	r7, #40	; 0x28
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}
 8010022:	bf00      	nop
 8010024:	20008840 	.word	0x20008840

08010028 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b084      	sub	sp, #16
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
 8010030:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010032:	2004      	movs	r0, #4
 8010034:	f7f6 fe42 	bl	8006cbc <memp_malloc>
 8010038:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d110      	bne.n	8010062 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010040:	6839      	ldr	r1, [r7, #0]
 8010042:	6878      	ldr	r0, [r7, #4]
 8010044:	f7ff ff8e 	bl	800ff64 <ip_reass_remove_oldest_datagram>
 8010048:	4602      	mov	r2, r0
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	4293      	cmp	r3, r2
 801004e:	dc03      	bgt.n	8010058 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010050:	2004      	movs	r0, #4
 8010052:	f7f6 fe33 	bl	8006cbc <memp_malloc>
 8010056:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d101      	bne.n	8010062 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801005e:	2300      	movs	r3, #0
 8010060:	e016      	b.n	8010090 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010062:	2220      	movs	r2, #32
 8010064:	2100      	movs	r1, #0
 8010066:	68f8      	ldr	r0, [r7, #12]
 8010068:	f000 fe02 	bl	8010c70 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	220f      	movs	r2, #15
 8010070:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010072:	4b09      	ldr	r3, [pc, #36]	; (8010098 <ip_reass_enqueue_new_datagram+0x70>)
 8010074:	681a      	ldr	r2, [r3, #0]
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801007a:	4a07      	ldr	r2, [pc, #28]	; (8010098 <ip_reass_enqueue_new_datagram+0x70>)
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	3308      	adds	r3, #8
 8010084:	2214      	movs	r2, #20
 8010086:	6879      	ldr	r1, [r7, #4]
 8010088:	4618      	mov	r0, r3
 801008a:	f000 fde3 	bl	8010c54 <memcpy>
  return ipr;
 801008e:	68fb      	ldr	r3, [r7, #12]
}
 8010090:	4618      	mov	r0, r3
 8010092:	3710      	adds	r7, #16
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}
 8010098:	20008840 	.word	0x20008840

0801009c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80100a6:	4b10      	ldr	r3, [pc, #64]	; (80100e8 <ip_reass_dequeue_datagram+0x4c>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	687a      	ldr	r2, [r7, #4]
 80100ac:	429a      	cmp	r2, r3
 80100ae:	d104      	bne.n	80100ba <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	4a0c      	ldr	r2, [pc, #48]	; (80100e8 <ip_reass_dequeue_datagram+0x4c>)
 80100b6:	6013      	str	r3, [r2, #0]
 80100b8:	e00d      	b.n	80100d6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d106      	bne.n	80100ce <ip_reass_dequeue_datagram+0x32>
 80100c0:	4b0a      	ldr	r3, [pc, #40]	; (80100ec <ip_reass_dequeue_datagram+0x50>)
 80100c2:	f240 1245 	movw	r2, #325	; 0x145
 80100c6:	490a      	ldr	r1, [pc, #40]	; (80100f0 <ip_reass_dequeue_datagram+0x54>)
 80100c8:	480a      	ldr	r0, [pc, #40]	; (80100f4 <ip_reass_dequeue_datagram+0x58>)
 80100ca:	f000 fdd9 	bl	8010c80 <iprintf>
    prev->next = ipr->next;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681a      	ldr	r2, [r3, #0]
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80100d6:	6879      	ldr	r1, [r7, #4]
 80100d8:	2004      	movs	r0, #4
 80100da:	f7f6 fe5f 	bl	8006d9c <memp_free>
}
 80100de:	bf00      	nop
 80100e0:	3708      	adds	r7, #8
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
 80100e6:	bf00      	nop
 80100e8:	20008840 	.word	0x20008840
 80100ec:	080147dc 	.word	0x080147dc
 80100f0:	080148a4 	.word	0x080148a4
 80100f4:	08014824 	.word	0x08014824

080100f8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b08c      	sub	sp, #48	; 0x30
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	60f8      	str	r0, [r7, #12]
 8010100:	60b9      	str	r1, [r7, #8]
 8010102:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010104:	2300      	movs	r3, #0
 8010106:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010108:	2301      	movs	r3, #1
 801010a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	685b      	ldr	r3, [r3, #4]
 8010110:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010112:	69fb      	ldr	r3, [r7, #28]
 8010114:	885b      	ldrh	r3, [r3, #2]
 8010116:	b29b      	uxth	r3, r3
 8010118:	4618      	mov	r0, r3
 801011a:	f7f6 f8ed 	bl	80062f8 <lwip_htons>
 801011e:	4603      	mov	r3, r0
 8010120:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010122:	69fb      	ldr	r3, [r7, #28]
 8010124:	781b      	ldrb	r3, [r3, #0]
 8010126:	f003 030f 	and.w	r3, r3, #15
 801012a:	b2db      	uxtb	r3, r3
 801012c:	009b      	lsls	r3, r3, #2
 801012e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010130:	7e7b      	ldrb	r3, [r7, #25]
 8010132:	b29b      	uxth	r3, r3
 8010134:	8b7a      	ldrh	r2, [r7, #26]
 8010136:	429a      	cmp	r2, r3
 8010138:	d202      	bcs.n	8010140 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801013a:	f04f 33ff 	mov.w	r3, #4294967295
 801013e:	e135      	b.n	80103ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010140:	7e7b      	ldrb	r3, [r7, #25]
 8010142:	b29b      	uxth	r3, r3
 8010144:	8b7a      	ldrh	r2, [r7, #26]
 8010146:	1ad3      	subs	r3, r2, r3
 8010148:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801014a:	69fb      	ldr	r3, [r7, #28]
 801014c:	88db      	ldrh	r3, [r3, #6]
 801014e:	b29b      	uxth	r3, r3
 8010150:	4618      	mov	r0, r3
 8010152:	f7f6 f8d1 	bl	80062f8 <lwip_htons>
 8010156:	4603      	mov	r3, r0
 8010158:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801015c:	b29b      	uxth	r3, r3
 801015e:	00db      	lsls	r3, r3, #3
 8010160:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	685b      	ldr	r3, [r3, #4]
 8010166:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8010168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801016a:	2200      	movs	r2, #0
 801016c:	701a      	strb	r2, [r3, #0]
 801016e:	2200      	movs	r2, #0
 8010170:	705a      	strb	r2, [r3, #1]
 8010172:	2200      	movs	r2, #0
 8010174:	709a      	strb	r2, [r3, #2]
 8010176:	2200      	movs	r2, #0
 8010178:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801017a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801017c:	8afa      	ldrh	r2, [r7, #22]
 801017e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010180:	8afa      	ldrh	r2, [r7, #22]
 8010182:	8b7b      	ldrh	r3, [r7, #26]
 8010184:	4413      	add	r3, r2
 8010186:	b29a      	uxth	r2, r3
 8010188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801018a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801018c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801018e:	88db      	ldrh	r3, [r3, #6]
 8010190:	b29b      	uxth	r3, r3
 8010192:	8afa      	ldrh	r2, [r7, #22]
 8010194:	429a      	cmp	r2, r3
 8010196:	d902      	bls.n	801019e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010198:	f04f 33ff 	mov.w	r3, #4294967295
 801019c:	e106      	b.n	80103ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	685b      	ldr	r3, [r3, #4]
 80101a2:	627b      	str	r3, [r7, #36]	; 0x24
 80101a4:	e068      	b.n	8010278 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80101a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a8:	685b      	ldr	r3, [r3, #4]
 80101aa:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80101ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ae:	889b      	ldrh	r3, [r3, #4]
 80101b0:	b29a      	uxth	r2, r3
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	889b      	ldrh	r3, [r3, #4]
 80101b6:	b29b      	uxth	r3, r3
 80101b8:	429a      	cmp	r2, r3
 80101ba:	d235      	bcs.n	8010228 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80101bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101c0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80101c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d020      	beq.n	801020a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80101c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ca:	889b      	ldrh	r3, [r3, #4]
 80101cc:	b29a      	uxth	r2, r3
 80101ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101d0:	88db      	ldrh	r3, [r3, #6]
 80101d2:	b29b      	uxth	r3, r3
 80101d4:	429a      	cmp	r2, r3
 80101d6:	d307      	bcc.n	80101e8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80101d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101da:	88db      	ldrh	r3, [r3, #6]
 80101dc:	b29a      	uxth	r2, r3
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	889b      	ldrh	r3, [r3, #4]
 80101e2:	b29b      	uxth	r3, r3
 80101e4:	429a      	cmp	r2, r3
 80101e6:	d902      	bls.n	80101ee <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80101e8:	f04f 33ff 	mov.w	r3, #4294967295
 80101ec:	e0de      	b.n	80103ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80101ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f0:	68ba      	ldr	r2, [r7, #8]
 80101f2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80101f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f6:	88db      	ldrh	r3, [r3, #6]
 80101f8:	b29a      	uxth	r2, r3
 80101fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101fc:	889b      	ldrh	r3, [r3, #4]
 80101fe:	b29b      	uxth	r3, r3
 8010200:	429a      	cmp	r2, r3
 8010202:	d03d      	beq.n	8010280 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010204:	2300      	movs	r3, #0
 8010206:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010208:	e03a      	b.n	8010280 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801020a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801020c:	88db      	ldrh	r3, [r3, #6]
 801020e:	b29a      	uxth	r2, r3
 8010210:	693b      	ldr	r3, [r7, #16]
 8010212:	889b      	ldrh	r3, [r3, #4]
 8010214:	b29b      	uxth	r3, r3
 8010216:	429a      	cmp	r2, r3
 8010218:	d902      	bls.n	8010220 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801021a:	f04f 33ff 	mov.w	r3, #4294967295
 801021e:	e0c5      	b.n	80103ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	68ba      	ldr	r2, [r7, #8]
 8010224:	605a      	str	r2, [r3, #4]
      break;
 8010226:	e02b      	b.n	8010280 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801022a:	889b      	ldrh	r3, [r3, #4]
 801022c:	b29a      	uxth	r2, r3
 801022e:	693b      	ldr	r3, [r7, #16]
 8010230:	889b      	ldrh	r3, [r3, #4]
 8010232:	b29b      	uxth	r3, r3
 8010234:	429a      	cmp	r2, r3
 8010236:	d102      	bne.n	801023e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010238:	f04f 33ff 	mov.w	r3, #4294967295
 801023c:	e0b6      	b.n	80103ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801023e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010240:	889b      	ldrh	r3, [r3, #4]
 8010242:	b29a      	uxth	r2, r3
 8010244:	693b      	ldr	r3, [r7, #16]
 8010246:	88db      	ldrh	r3, [r3, #6]
 8010248:	b29b      	uxth	r3, r3
 801024a:	429a      	cmp	r2, r3
 801024c:	d202      	bcs.n	8010254 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801024e:	f04f 33ff 	mov.w	r3, #4294967295
 8010252:	e0ab      	b.n	80103ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010256:	2b00      	cmp	r3, #0
 8010258:	d009      	beq.n	801026e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801025a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801025c:	88db      	ldrh	r3, [r3, #6]
 801025e:	b29a      	uxth	r2, r3
 8010260:	693b      	ldr	r3, [r7, #16]
 8010262:	889b      	ldrh	r3, [r3, #4]
 8010264:	b29b      	uxth	r3, r3
 8010266:	429a      	cmp	r2, r3
 8010268:	d001      	beq.n	801026e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801026a:	2300      	movs	r3, #0
 801026c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010274:	693b      	ldr	r3, [r7, #16]
 8010276:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8010278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801027a:	2b00      	cmp	r3, #0
 801027c:	d193      	bne.n	80101a6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801027e:	e000      	b.n	8010282 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010280:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010284:	2b00      	cmp	r3, #0
 8010286:	d12d      	bne.n	80102e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8010288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801028a:	2b00      	cmp	r3, #0
 801028c:	d01c      	beq.n	80102c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801028e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010290:	88db      	ldrh	r3, [r3, #6]
 8010292:	b29a      	uxth	r2, r3
 8010294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010296:	889b      	ldrh	r3, [r3, #4]
 8010298:	b29b      	uxth	r3, r3
 801029a:	429a      	cmp	r2, r3
 801029c:	d906      	bls.n	80102ac <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801029e:	4b45      	ldr	r3, [pc, #276]	; (80103b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80102a0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80102a4:	4944      	ldr	r1, [pc, #272]	; (80103b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80102a6:	4845      	ldr	r0, [pc, #276]	; (80103bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80102a8:	f000 fcea 	bl	8010c80 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80102ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ae:	68ba      	ldr	r2, [r7, #8]
 80102b0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80102b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b4:	88db      	ldrh	r3, [r3, #6]
 80102b6:	b29a      	uxth	r2, r3
 80102b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ba:	889b      	ldrh	r3, [r3, #4]
 80102bc:	b29b      	uxth	r3, r3
 80102be:	429a      	cmp	r2, r3
 80102c0:	d010      	beq.n	80102e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80102c2:	2300      	movs	r3, #0
 80102c4:	623b      	str	r3, [r7, #32]
 80102c6:	e00d      	b.n	80102e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	685b      	ldr	r3, [r3, #4]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d006      	beq.n	80102de <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80102d0:	4b38      	ldr	r3, [pc, #224]	; (80103b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80102d2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80102d6:	493a      	ldr	r1, [pc, #232]	; (80103c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80102d8:	4838      	ldr	r0, [pc, #224]	; (80103bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80102da:	f000 fcd1 	bl	8010c80 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	68ba      	ldr	r2, [r7, #8]
 80102e2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d105      	bne.n	80102f6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	7f9b      	ldrb	r3, [r3, #30]
 80102ee:	f003 0301 	and.w	r3, r3, #1
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d059      	beq.n	80103aa <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80102f6:	6a3b      	ldr	r3, [r7, #32]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d04f      	beq.n	801039c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	685b      	ldr	r3, [r3, #4]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d006      	beq.n	8010312 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	685b      	ldr	r3, [r3, #4]
 8010308:	685b      	ldr	r3, [r3, #4]
 801030a:	889b      	ldrh	r3, [r3, #4]
 801030c:	b29b      	uxth	r3, r3
 801030e:	2b00      	cmp	r3, #0
 8010310:	d002      	beq.n	8010318 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010312:	2300      	movs	r3, #0
 8010314:	623b      	str	r3, [r7, #32]
 8010316:	e041      	b.n	801039c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801031c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010322:	e012      	b.n	801034a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010326:	685b      	ldr	r3, [r3, #4]
 8010328:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801032a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801032c:	88db      	ldrh	r3, [r3, #6]
 801032e:	b29a      	uxth	r2, r3
 8010330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010332:	889b      	ldrh	r3, [r3, #4]
 8010334:	b29b      	uxth	r3, r3
 8010336:	429a      	cmp	r2, r3
 8010338:	d002      	beq.n	8010340 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801033a:	2300      	movs	r3, #0
 801033c:	623b      	str	r3, [r7, #32]
            break;
 801033e:	e007      	b.n	8010350 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010342:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801034a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801034c:	2b00      	cmp	r3, #0
 801034e:	d1e9      	bne.n	8010324 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010350:	6a3b      	ldr	r3, [r7, #32]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d022      	beq.n	801039c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	685b      	ldr	r3, [r3, #4]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d106      	bne.n	801036c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801035e:	4b15      	ldr	r3, [pc, #84]	; (80103b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010360:	f240 12df 	movw	r2, #479	; 0x1df
 8010364:	4917      	ldr	r1, [pc, #92]	; (80103c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010366:	4815      	ldr	r0, [pc, #84]	; (80103bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010368:	f000 fc8a 	bl	8010c80 <iprintf>
          LWIP_ASSERT("sanity check",
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	685b      	ldr	r3, [r3, #4]
 8010372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010374:	429a      	cmp	r2, r3
 8010376:	d106      	bne.n	8010386 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8010378:	4b0e      	ldr	r3, [pc, #56]	; (80103b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801037a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801037e:	4911      	ldr	r1, [pc, #68]	; (80103c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010380:	480e      	ldr	r0, [pc, #56]	; (80103bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010382:	f000 fc7d 	bl	8010c80 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d006      	beq.n	801039c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801038e:	4b09      	ldr	r3, [pc, #36]	; (80103b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010390:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010394:	490c      	ldr	r1, [pc, #48]	; (80103c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8010396:	4809      	ldr	r0, [pc, #36]	; (80103bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010398:	f000 fc72 	bl	8010c80 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801039c:	6a3b      	ldr	r3, [r7, #32]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	bf14      	ite	ne
 80103a2:	2301      	movne	r3, #1
 80103a4:	2300      	moveq	r3, #0
 80103a6:	b2db      	uxtb	r3, r3
 80103a8:	e000      	b.n	80103ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80103aa:	2300      	movs	r3, #0
}
 80103ac:	4618      	mov	r0, r3
 80103ae:	3730      	adds	r7, #48	; 0x30
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}
 80103b4:	080147dc 	.word	0x080147dc
 80103b8:	080148c0 	.word	0x080148c0
 80103bc:	08014824 	.word	0x08014824
 80103c0:	080148e0 	.word	0x080148e0
 80103c4:	08014918 	.word	0x08014918
 80103c8:	08014928 	.word	0x08014928

080103cc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b08e      	sub	sp, #56	; 0x38
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	685b      	ldr	r3, [r3, #4]
 80103d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80103da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103dc:	781b      	ldrb	r3, [r3, #0]
 80103de:	f003 030f 	and.w	r3, r3, #15
 80103e2:	b2db      	uxtb	r3, r3
 80103e4:	009b      	lsls	r3, r3, #2
 80103e6:	b2db      	uxtb	r3, r3
 80103e8:	2b14      	cmp	r3, #20
 80103ea:	f040 8171 	bne.w	80106d0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80103ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103f0:	88db      	ldrh	r3, [r3, #6]
 80103f2:	b29b      	uxth	r3, r3
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7f5 ff7f 	bl	80062f8 <lwip_htons>
 80103fa:	4603      	mov	r3, r0
 80103fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010400:	b29b      	uxth	r3, r3
 8010402:	00db      	lsls	r3, r3, #3
 8010404:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010408:	885b      	ldrh	r3, [r3, #2]
 801040a:	b29b      	uxth	r3, r3
 801040c:	4618      	mov	r0, r3
 801040e:	f7f5 ff73 	bl	80062f8 <lwip_htons>
 8010412:	4603      	mov	r3, r0
 8010414:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010418:	781b      	ldrb	r3, [r3, #0]
 801041a:	f003 030f 	and.w	r3, r3, #15
 801041e:	b2db      	uxtb	r3, r3
 8010420:	009b      	lsls	r3, r3, #2
 8010422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8010426:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801042a:	b29b      	uxth	r3, r3
 801042c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801042e:	429a      	cmp	r2, r3
 8010430:	f0c0 8150 	bcc.w	80106d4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010434:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010438:	b29b      	uxth	r3, r3
 801043a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801043c:	1ad3      	subs	r3, r2, r3
 801043e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010440:	6878      	ldr	r0, [r7, #4]
 8010442:	f7f7 fba9 	bl	8007b98 <pbuf_clen>
 8010446:	4603      	mov	r3, r0
 8010448:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801044a:	4b8c      	ldr	r3, [pc, #560]	; (801067c <ip4_reass+0x2b0>)
 801044c:	881b      	ldrh	r3, [r3, #0]
 801044e:	461a      	mov	r2, r3
 8010450:	8c3b      	ldrh	r3, [r7, #32]
 8010452:	4413      	add	r3, r2
 8010454:	2b0a      	cmp	r3, #10
 8010456:	dd10      	ble.n	801047a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010458:	8c3b      	ldrh	r3, [r7, #32]
 801045a:	4619      	mov	r1, r3
 801045c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801045e:	f7ff fd81 	bl	800ff64 <ip_reass_remove_oldest_datagram>
 8010462:	4603      	mov	r3, r0
 8010464:	2b00      	cmp	r3, #0
 8010466:	f000 8137 	beq.w	80106d8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801046a:	4b84      	ldr	r3, [pc, #528]	; (801067c <ip4_reass+0x2b0>)
 801046c:	881b      	ldrh	r3, [r3, #0]
 801046e:	461a      	mov	r2, r3
 8010470:	8c3b      	ldrh	r3, [r7, #32]
 8010472:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010474:	2b0a      	cmp	r3, #10
 8010476:	f300 812f 	bgt.w	80106d8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801047a:	4b81      	ldr	r3, [pc, #516]	; (8010680 <ip4_reass+0x2b4>)
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	633b      	str	r3, [r7, #48]	; 0x30
 8010480:	e015      	b.n	80104ae <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010484:	695a      	ldr	r2, [r3, #20]
 8010486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010488:	68db      	ldr	r3, [r3, #12]
 801048a:	429a      	cmp	r2, r3
 801048c:	d10c      	bne.n	80104a8 <ip4_reass+0xdc>
 801048e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010490:	699a      	ldr	r2, [r3, #24]
 8010492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010494:	691b      	ldr	r3, [r3, #16]
 8010496:	429a      	cmp	r2, r3
 8010498:	d106      	bne.n	80104a8 <ip4_reass+0xdc>
 801049a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801049c:	899a      	ldrh	r2, [r3, #12]
 801049e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104a0:	889b      	ldrh	r3, [r3, #4]
 80104a2:	b29b      	uxth	r3, r3
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d006      	beq.n	80104b6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80104a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	633b      	str	r3, [r7, #48]	; 0x30
 80104ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d1e6      	bne.n	8010482 <ip4_reass+0xb6>
 80104b4:	e000      	b.n	80104b8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80104b6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80104b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d109      	bne.n	80104d2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80104be:	8c3b      	ldrh	r3, [r7, #32]
 80104c0:	4619      	mov	r1, r3
 80104c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104c4:	f7ff fdb0 	bl	8010028 <ip_reass_enqueue_new_datagram>
 80104c8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80104ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d11c      	bne.n	801050a <ip4_reass+0x13e>
      goto nullreturn;
 80104d0:	e105      	b.n	80106de <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80104d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104d4:	88db      	ldrh	r3, [r3, #6]
 80104d6:	b29b      	uxth	r3, r3
 80104d8:	4618      	mov	r0, r3
 80104da:	f7f5 ff0d 	bl	80062f8 <lwip_htons>
 80104de:	4603      	mov	r3, r0
 80104e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d110      	bne.n	801050a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80104e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ea:	89db      	ldrh	r3, [r3, #14]
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7f5 ff03 	bl	80062f8 <lwip_htons>
 80104f2:	4603      	mov	r3, r0
 80104f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d006      	beq.n	801050a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80104fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104fe:	3308      	adds	r3, #8
 8010500:	2214      	movs	r2, #20
 8010502:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010504:	4618      	mov	r0, r3
 8010506:	f000 fba5 	bl	8010c54 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801050a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801050c:	88db      	ldrh	r3, [r3, #6]
 801050e:	b29b      	uxth	r3, r3
 8010510:	f003 0320 	and.w	r3, r3, #32
 8010514:	2b00      	cmp	r3, #0
 8010516:	bf0c      	ite	eq
 8010518:	2301      	moveq	r3, #1
 801051a:	2300      	movne	r3, #0
 801051c:	b2db      	uxtb	r3, r3
 801051e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010520:	69fb      	ldr	r3, [r7, #28]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d00e      	beq.n	8010544 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010526:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010528:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801052a:	4413      	add	r3, r2
 801052c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801052e:	8b7a      	ldrh	r2, [r7, #26]
 8010530:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010532:	429a      	cmp	r2, r3
 8010534:	f0c0 80a0 	bcc.w	8010678 <ip4_reass+0x2ac>
 8010538:	8b7b      	ldrh	r3, [r7, #26]
 801053a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801053e:	4293      	cmp	r3, r2
 8010540:	f200 809a 	bhi.w	8010678 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010544:	69fa      	ldr	r2, [r7, #28]
 8010546:	6879      	ldr	r1, [r7, #4]
 8010548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801054a:	f7ff fdd5 	bl	80100f8 <ip_reass_chain_frag_into_datagram_and_validate>
 801054e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010550:	697b      	ldr	r3, [r7, #20]
 8010552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010556:	f000 809b 	beq.w	8010690 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801055a:	4b48      	ldr	r3, [pc, #288]	; (801067c <ip4_reass+0x2b0>)
 801055c:	881a      	ldrh	r2, [r3, #0]
 801055e:	8c3b      	ldrh	r3, [r7, #32]
 8010560:	4413      	add	r3, r2
 8010562:	b29a      	uxth	r2, r3
 8010564:	4b45      	ldr	r3, [pc, #276]	; (801067c <ip4_reass+0x2b0>)
 8010566:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010568:	69fb      	ldr	r3, [r7, #28]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d00d      	beq.n	801058a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801056e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010570:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010572:	4413      	add	r3, r2
 8010574:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010578:	8a7a      	ldrh	r2, [r7, #18]
 801057a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801057c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801057e:	7f9b      	ldrb	r3, [r3, #30]
 8010580:	f043 0301 	orr.w	r3, r3, #1
 8010584:	b2da      	uxtb	r2, r3
 8010586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010588:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	2b01      	cmp	r3, #1
 801058e:	d171      	bne.n	8010674 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010592:	8b9b      	ldrh	r3, [r3, #28]
 8010594:	3314      	adds	r3, #20
 8010596:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801059a:	685b      	ldr	r3, [r3, #4]
 801059c:	685b      	ldr	r3, [r3, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80105a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a4:	685b      	ldr	r3, [r3, #4]
 80105a6:	685b      	ldr	r3, [r3, #4]
 80105a8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80105aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ac:	3308      	adds	r3, #8
 80105ae:	2214      	movs	r2, #20
 80105b0:	4619      	mov	r1, r3
 80105b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105b4:	f000 fb4e 	bl	8010c54 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80105b8:	8a3b      	ldrh	r3, [r7, #16]
 80105ba:	4618      	mov	r0, r3
 80105bc:	f7f5 fe9c 	bl	80062f8 <lwip_htons>
 80105c0:	4603      	mov	r3, r0
 80105c2:	461a      	mov	r2, r3
 80105c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80105c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ca:	2200      	movs	r2, #0
 80105cc:	719a      	strb	r2, [r3, #6]
 80105ce:	2200      	movs	r2, #0
 80105d0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80105d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d4:	2200      	movs	r2, #0
 80105d6:	729a      	strb	r2, [r3, #10]
 80105d8:	2200      	movs	r2, #0
 80105da:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80105dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105de:	685b      	ldr	r3, [r3, #4]
 80105e0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80105e2:	e00d      	b.n	8010600 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80105e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105e6:	685b      	ldr	r3, [r3, #4]
 80105e8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80105ea:	2114      	movs	r1, #20
 80105ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80105ee:	f7f7 f9c5 	bl	800797c <pbuf_remove_header>
      pbuf_cat(p, r);
 80105f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80105f4:	6878      	ldr	r0, [r7, #4]
 80105f6:	f7f7 fb09 	bl	8007c0c <pbuf_cat>
      r = iprh->next_pbuf;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010602:	2b00      	cmp	r3, #0
 8010604:	d1ee      	bne.n	80105e4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010606:	4b1e      	ldr	r3, [pc, #120]	; (8010680 <ip4_reass+0x2b4>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801060c:	429a      	cmp	r2, r3
 801060e:	d102      	bne.n	8010616 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010610:	2300      	movs	r3, #0
 8010612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010614:	e010      	b.n	8010638 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010616:	4b1a      	ldr	r3, [pc, #104]	; (8010680 <ip4_reass+0x2b4>)
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801061c:	e007      	b.n	801062e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801061e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010624:	429a      	cmp	r2, r3
 8010626:	d006      	beq.n	8010636 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801062e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010630:	2b00      	cmp	r3, #0
 8010632:	d1f4      	bne.n	801061e <ip4_reass+0x252>
 8010634:	e000      	b.n	8010638 <ip4_reass+0x26c>
          break;
 8010636:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010638:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801063a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801063c:	f7ff fd2e 	bl	801009c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f7f7 faa9 	bl	8007b98 <pbuf_clen>
 8010646:	4603      	mov	r3, r0
 8010648:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801064a:	4b0c      	ldr	r3, [pc, #48]	; (801067c <ip4_reass+0x2b0>)
 801064c:	881b      	ldrh	r3, [r3, #0]
 801064e:	8c3a      	ldrh	r2, [r7, #32]
 8010650:	429a      	cmp	r2, r3
 8010652:	d906      	bls.n	8010662 <ip4_reass+0x296>
 8010654:	4b0b      	ldr	r3, [pc, #44]	; (8010684 <ip4_reass+0x2b8>)
 8010656:	f240 229b 	movw	r2, #667	; 0x29b
 801065a:	490b      	ldr	r1, [pc, #44]	; (8010688 <ip4_reass+0x2bc>)
 801065c:	480b      	ldr	r0, [pc, #44]	; (801068c <ip4_reass+0x2c0>)
 801065e:	f000 fb0f 	bl	8010c80 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010662:	4b06      	ldr	r3, [pc, #24]	; (801067c <ip4_reass+0x2b0>)
 8010664:	881a      	ldrh	r2, [r3, #0]
 8010666:	8c3b      	ldrh	r3, [r7, #32]
 8010668:	1ad3      	subs	r3, r2, r3
 801066a:	b29a      	uxth	r2, r3
 801066c:	4b03      	ldr	r3, [pc, #12]	; (801067c <ip4_reass+0x2b0>)
 801066e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	e038      	b.n	80106e6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010674:	2300      	movs	r3, #0
 8010676:	e036      	b.n	80106e6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8010678:	bf00      	nop
 801067a:	e00a      	b.n	8010692 <ip4_reass+0x2c6>
 801067c:	20008844 	.word	0x20008844
 8010680:	20008840 	.word	0x20008840
 8010684:	080147dc 	.word	0x080147dc
 8010688:	0801494c 	.word	0x0801494c
 801068c:	08014824 	.word	0x08014824
    goto nullreturn_ipr;
 8010690:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010694:	2b00      	cmp	r3, #0
 8010696:	d106      	bne.n	80106a6 <ip4_reass+0x2da>
 8010698:	4b15      	ldr	r3, [pc, #84]	; (80106f0 <ip4_reass+0x324>)
 801069a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801069e:	4915      	ldr	r1, [pc, #84]	; (80106f4 <ip4_reass+0x328>)
 80106a0:	4815      	ldr	r0, [pc, #84]	; (80106f8 <ip4_reass+0x32c>)
 80106a2:	f000 faed 	bl	8010c80 <iprintf>
  if (ipr->p == NULL) {
 80106a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106a8:	685b      	ldr	r3, [r3, #4]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d116      	bne.n	80106dc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80106ae:	4b13      	ldr	r3, [pc, #76]	; (80106fc <ip4_reass+0x330>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106b4:	429a      	cmp	r2, r3
 80106b6:	d006      	beq.n	80106c6 <ip4_reass+0x2fa>
 80106b8:	4b0d      	ldr	r3, [pc, #52]	; (80106f0 <ip4_reass+0x324>)
 80106ba:	f240 22ab 	movw	r2, #683	; 0x2ab
 80106be:	4910      	ldr	r1, [pc, #64]	; (8010700 <ip4_reass+0x334>)
 80106c0:	480d      	ldr	r0, [pc, #52]	; (80106f8 <ip4_reass+0x32c>)
 80106c2:	f000 fadd 	bl	8010c80 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80106c6:	2100      	movs	r1, #0
 80106c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106ca:	f7ff fce7 	bl	801009c <ip_reass_dequeue_datagram>
 80106ce:	e006      	b.n	80106de <ip4_reass+0x312>
    goto nullreturn;
 80106d0:	bf00      	nop
 80106d2:	e004      	b.n	80106de <ip4_reass+0x312>
    goto nullreturn;
 80106d4:	bf00      	nop
 80106d6:	e002      	b.n	80106de <ip4_reass+0x312>
      goto nullreturn;
 80106d8:	bf00      	nop
 80106da:	e000      	b.n	80106de <ip4_reass+0x312>
  }

nullreturn:
 80106dc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f7f7 f9d2 	bl	8007a88 <pbuf_free>
  return NULL;
 80106e4:	2300      	movs	r3, #0
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	3738      	adds	r7, #56	; 0x38
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}
 80106ee:	bf00      	nop
 80106f0:	080147dc 	.word	0x080147dc
 80106f4:	08014968 	.word	0x08014968
 80106f8:	08014824 	.word	0x08014824
 80106fc:	20008840 	.word	0x20008840
 8010700:	08014974 	.word	0x08014974

08010704 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010708:	2005      	movs	r0, #5
 801070a:	f7f6 fad7 	bl	8006cbc <memp_malloc>
 801070e:	4603      	mov	r3, r0
}
 8010710:	4618      	mov	r0, r3
 8010712:	bd80      	pop	{r7, pc}

08010714 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b082      	sub	sp, #8
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d106      	bne.n	8010730 <ip_frag_free_pbuf_custom_ref+0x1c>
 8010722:	4b07      	ldr	r3, [pc, #28]	; (8010740 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010724:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8010728:	4906      	ldr	r1, [pc, #24]	; (8010744 <ip_frag_free_pbuf_custom_ref+0x30>)
 801072a:	4807      	ldr	r0, [pc, #28]	; (8010748 <ip_frag_free_pbuf_custom_ref+0x34>)
 801072c:	f000 faa8 	bl	8010c80 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010730:	6879      	ldr	r1, [r7, #4]
 8010732:	2005      	movs	r0, #5
 8010734:	f7f6 fb32 	bl	8006d9c <memp_free>
}
 8010738:	bf00      	nop
 801073a:	3708      	adds	r7, #8
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}
 8010740:	080147dc 	.word	0x080147dc
 8010744:	08014994 	.word	0x08014994
 8010748:	08014824 	.word	0x08014824

0801074c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b084      	sub	sp, #16
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d106      	bne.n	801076c <ipfrag_free_pbuf_custom+0x20>
 801075e:	4b11      	ldr	r3, [pc, #68]	; (80107a4 <ipfrag_free_pbuf_custom+0x58>)
 8010760:	f240 22ce 	movw	r2, #718	; 0x2ce
 8010764:	4910      	ldr	r1, [pc, #64]	; (80107a8 <ipfrag_free_pbuf_custom+0x5c>)
 8010766:	4811      	ldr	r0, [pc, #68]	; (80107ac <ipfrag_free_pbuf_custom+0x60>)
 8010768:	f000 fa8a 	bl	8010c80 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801076c:	68fa      	ldr	r2, [r7, #12]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	429a      	cmp	r2, r3
 8010772:	d006      	beq.n	8010782 <ipfrag_free_pbuf_custom+0x36>
 8010774:	4b0b      	ldr	r3, [pc, #44]	; (80107a4 <ipfrag_free_pbuf_custom+0x58>)
 8010776:	f240 22cf 	movw	r2, #719	; 0x2cf
 801077a:	490d      	ldr	r1, [pc, #52]	; (80107b0 <ipfrag_free_pbuf_custom+0x64>)
 801077c:	480b      	ldr	r0, [pc, #44]	; (80107ac <ipfrag_free_pbuf_custom+0x60>)
 801077e:	f000 fa7f 	bl	8010c80 <iprintf>
  if (pcr->original != NULL) {
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	695b      	ldr	r3, [r3, #20]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d004      	beq.n	8010794 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	695b      	ldr	r3, [r3, #20]
 801078e:	4618      	mov	r0, r3
 8010790:	f7f7 f97a 	bl	8007a88 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010794:	68f8      	ldr	r0, [r7, #12]
 8010796:	f7ff ffbd 	bl	8010714 <ip_frag_free_pbuf_custom_ref>
}
 801079a:	bf00      	nop
 801079c:	3710      	adds	r7, #16
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
 80107a2:	bf00      	nop
 80107a4:	080147dc 	.word	0x080147dc
 80107a8:	080149a0 	.word	0x080149a0
 80107ac:	08014824 	.word	0x08014824
 80107b0:	080149ac 	.word	0x080149ac

080107b4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b094      	sub	sp, #80	; 0x50
 80107b8:	af02      	add	r7, sp, #8
 80107ba:	60f8      	str	r0, [r7, #12]
 80107bc:	60b9      	str	r1, [r7, #8]
 80107be:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80107c0:	2300      	movs	r3, #0
 80107c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80107ca:	3b14      	subs	r3, #20
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	da00      	bge.n	80107d2 <ip4_frag+0x1e>
 80107d0:	3307      	adds	r3, #7
 80107d2:	10db      	asrs	r3, r3, #3
 80107d4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80107d6:	2314      	movs	r3, #20
 80107d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80107e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80107e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e6:	781b      	ldrb	r3, [r3, #0]
 80107e8:	f003 030f 	and.w	r3, r3, #15
 80107ec:	b2db      	uxtb	r3, r3
 80107ee:	009b      	lsls	r3, r3, #2
 80107f0:	b2db      	uxtb	r3, r3
 80107f2:	2b14      	cmp	r3, #20
 80107f4:	d002      	beq.n	80107fc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80107f6:	f06f 0305 	mvn.w	r3, #5
 80107fa:	e110      	b.n	8010a1e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	895b      	ldrh	r3, [r3, #10]
 8010800:	2b13      	cmp	r3, #19
 8010802:	d809      	bhi.n	8010818 <ip4_frag+0x64>
 8010804:	4b88      	ldr	r3, [pc, #544]	; (8010a28 <ip4_frag+0x274>)
 8010806:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801080a:	4988      	ldr	r1, [pc, #544]	; (8010a2c <ip4_frag+0x278>)
 801080c:	4888      	ldr	r0, [pc, #544]	; (8010a30 <ip4_frag+0x27c>)
 801080e:	f000 fa37 	bl	8010c80 <iprintf>
 8010812:	f06f 0305 	mvn.w	r3, #5
 8010816:	e102      	b.n	8010a1e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801081a:	88db      	ldrh	r3, [r3, #6]
 801081c:	b29b      	uxth	r3, r3
 801081e:	4618      	mov	r0, r3
 8010820:	f7f5 fd6a 	bl	80062f8 <lwip_htons>
 8010824:	4603      	mov	r3, r0
 8010826:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010828:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801082a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801082e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010832:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010834:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010838:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	891b      	ldrh	r3, [r3, #8]
 801083e:	3b14      	subs	r3, #20
 8010840:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8010844:	e0e1      	b.n	8010a0a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010846:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010848:	00db      	lsls	r3, r3, #3
 801084a:	b29b      	uxth	r3, r3
 801084c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010850:	4293      	cmp	r3, r2
 8010852:	bf28      	it	cs
 8010854:	4613      	movcs	r3, r2
 8010856:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010858:	f44f 7220 	mov.w	r2, #640	; 0x280
 801085c:	2114      	movs	r1, #20
 801085e:	200e      	movs	r0, #14
 8010860:	f7f6 fe2e 	bl	80074c0 <pbuf_alloc>
 8010864:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8010866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010868:	2b00      	cmp	r3, #0
 801086a:	f000 80d5 	beq.w	8010a18 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010870:	895b      	ldrh	r3, [r3, #10]
 8010872:	2b13      	cmp	r3, #19
 8010874:	d806      	bhi.n	8010884 <ip4_frag+0xd0>
 8010876:	4b6c      	ldr	r3, [pc, #432]	; (8010a28 <ip4_frag+0x274>)
 8010878:	f44f 7249 	mov.w	r2, #804	; 0x324
 801087c:	496d      	ldr	r1, [pc, #436]	; (8010a34 <ip4_frag+0x280>)
 801087e:	486c      	ldr	r0, [pc, #432]	; (8010a30 <ip4_frag+0x27c>)
 8010880:	f000 f9fe 	bl	8010c80 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010886:	685b      	ldr	r3, [r3, #4]
 8010888:	2214      	movs	r2, #20
 801088a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801088c:	4618      	mov	r0, r3
 801088e:	f000 f9e1 	bl	8010c54 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010894:	685b      	ldr	r3, [r3, #4]
 8010896:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010898:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801089a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801089e:	e064      	b.n	801096a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	895a      	ldrh	r2, [r3, #10]
 80108a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80108a6:	1ad3      	subs	r3, r2, r3
 80108a8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	895b      	ldrh	r3, [r3, #10]
 80108ae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d906      	bls.n	80108c2 <ip4_frag+0x10e>
 80108b4:	4b5c      	ldr	r3, [pc, #368]	; (8010a28 <ip4_frag+0x274>)
 80108b6:	f240 322d 	movw	r2, #813	; 0x32d
 80108ba:	495f      	ldr	r1, [pc, #380]	; (8010a38 <ip4_frag+0x284>)
 80108bc:	485c      	ldr	r0, [pc, #368]	; (8010a30 <ip4_frag+0x27c>)
 80108be:	f000 f9df 	bl	8010c80 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80108c2:	8bfa      	ldrh	r2, [r7, #30]
 80108c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80108c8:	4293      	cmp	r3, r2
 80108ca:	bf28      	it	cs
 80108cc:	4613      	movcs	r3, r2
 80108ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80108d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d105      	bne.n	80108e6 <ip4_frag+0x132>
        poff = 0;
 80108da:	2300      	movs	r3, #0
 80108dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	60fb      	str	r3, [r7, #12]
        continue;
 80108e4:	e041      	b.n	801096a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80108e6:	f7ff ff0d 	bl	8010704 <ip_frag_alloc_pbuf_custom_ref>
 80108ea:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80108ec:	69bb      	ldr	r3, [r7, #24]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d103      	bne.n	80108fa <ip4_frag+0x146>
        pbuf_free(rambuf);
 80108f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80108f4:	f7f7 f8c8 	bl	8007a88 <pbuf_free>
        goto memerr;
 80108f8:	e08f      	b.n	8010a1a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80108fa:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010900:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010902:	4413      	add	r3, r2
 8010904:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8010908:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801090c:	9201      	str	r2, [sp, #4]
 801090e:	9300      	str	r3, [sp, #0]
 8010910:	4603      	mov	r3, r0
 8010912:	2241      	movs	r2, #65	; 0x41
 8010914:	2000      	movs	r0, #0
 8010916:	f7f6 fefd 	bl	8007714 <pbuf_alloced_custom>
 801091a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801091c:	697b      	ldr	r3, [r7, #20]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d106      	bne.n	8010930 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010922:	69b8      	ldr	r0, [r7, #24]
 8010924:	f7ff fef6 	bl	8010714 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010928:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801092a:	f7f7 f8ad 	bl	8007a88 <pbuf_free>
        goto memerr;
 801092e:	e074      	b.n	8010a1a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010930:	68f8      	ldr	r0, [r7, #12]
 8010932:	f7f7 f949 	bl	8007bc8 <pbuf_ref>
      pcr->original = p;
 8010936:	69bb      	ldr	r3, [r7, #24]
 8010938:	68fa      	ldr	r2, [r7, #12]
 801093a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801093c:	69bb      	ldr	r3, [r7, #24]
 801093e:	4a3f      	ldr	r2, [pc, #252]	; (8010a3c <ip4_frag+0x288>)
 8010940:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010942:	6979      	ldr	r1, [r7, #20]
 8010944:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010946:	f7f7 f961 	bl	8007c0c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801094a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801094e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010952:	1ad3      	subs	r3, r2, r3
 8010954:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8010958:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801095c:	2b00      	cmp	r3, #0
 801095e:	d004      	beq.n	801096a <ip4_frag+0x1b6>
        poff = 0;
 8010960:	2300      	movs	r3, #0
 8010962:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801096a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801096e:	2b00      	cmp	r3, #0
 8010970:	d196      	bne.n	80108a0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010972:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010974:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010978:	4413      	add	r3, r2
 801097a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010980:	f1a3 0213 	sub.w	r2, r3, #19
 8010984:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010988:	429a      	cmp	r2, r3
 801098a:	bfcc      	ite	gt
 801098c:	2301      	movgt	r3, #1
 801098e:	2300      	movle	r3, #0
 8010990:	b2db      	uxtb	r3, r3
 8010992:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010994:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010998:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801099c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801099e:	6a3b      	ldr	r3, [r7, #32]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d002      	beq.n	80109aa <ip4_frag+0x1f6>
 80109a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d003      	beq.n	80109b2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80109aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80109ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80109b0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80109b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80109b4:	4618      	mov	r0, r3
 80109b6:	f7f5 fc9f 	bl	80062f8 <lwip_htons>
 80109ba:	4603      	mov	r3, r0
 80109bc:	461a      	mov	r2, r3
 80109be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80109c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80109c4:	3314      	adds	r3, #20
 80109c6:	b29b      	uxth	r3, r3
 80109c8:	4618      	mov	r0, r3
 80109ca:	f7f5 fc95 	bl	80062f8 <lwip_htons>
 80109ce:	4603      	mov	r3, r0
 80109d0:	461a      	mov	r2, r3
 80109d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80109d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d8:	2200      	movs	r2, #0
 80109da:	729a      	strb	r2, [r3, #10]
 80109dc:	2200      	movs	r2, #0
 80109de:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80109e0:	68bb      	ldr	r3, [r7, #8]
 80109e2:	695b      	ldr	r3, [r3, #20]
 80109e4:	687a      	ldr	r2, [r7, #4]
 80109e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80109e8:	68b8      	ldr	r0, [r7, #8]
 80109ea:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80109ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80109ee:	f7f7 f84b 	bl	8007a88 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80109f2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80109f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80109f8:	1ad3      	subs	r3, r2, r3
 80109fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80109fe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010a02:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010a04:	4413      	add	r3, r2
 8010a06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8010a0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	f47f af19 	bne.w	8010846 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010a14:	2300      	movs	r3, #0
 8010a16:	e002      	b.n	8010a1e <ip4_frag+0x26a>
      goto memerr;
 8010a18:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010a1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3748      	adds	r7, #72	; 0x48
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd80      	pop	{r7, pc}
 8010a26:	bf00      	nop
 8010a28:	080147dc 	.word	0x080147dc
 8010a2c:	080149b8 	.word	0x080149b8
 8010a30:	08014824 	.word	0x08014824
 8010a34:	080149d4 	.word	0x080149d4
 8010a38:	080149f4 	.word	0x080149f4
 8010a3c:	0801074d 	.word	0x0801074d

08010a40 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b086      	sub	sp, #24
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
 8010a48:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010a4a:	230e      	movs	r3, #14
 8010a4c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	895b      	ldrh	r3, [r3, #10]
 8010a52:	2b0e      	cmp	r3, #14
 8010a54:	d96e      	bls.n	8010b34 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	7bdb      	ldrb	r3, [r3, #15]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d106      	bne.n	8010a6c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a64:	3301      	adds	r3, #1
 8010a66:	b2da      	uxtb	r2, r3
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	685b      	ldr	r3, [r3, #4]
 8010a70:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010a72:	693b      	ldr	r3, [r7, #16]
 8010a74:	7b1a      	ldrb	r2, [r3, #12]
 8010a76:	7b5b      	ldrb	r3, [r3, #13]
 8010a78:	021b      	lsls	r3, r3, #8
 8010a7a:	4313      	orrs	r3, r2
 8010a7c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010a7e:	693b      	ldr	r3, [r7, #16]
 8010a80:	781b      	ldrb	r3, [r3, #0]
 8010a82:	f003 0301 	and.w	r3, r3, #1
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d023      	beq.n	8010ad2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010a8a:	693b      	ldr	r3, [r7, #16]
 8010a8c:	781b      	ldrb	r3, [r3, #0]
 8010a8e:	2b01      	cmp	r3, #1
 8010a90:	d10f      	bne.n	8010ab2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010a92:	693b      	ldr	r3, [r7, #16]
 8010a94:	785b      	ldrb	r3, [r3, #1]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d11b      	bne.n	8010ad2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010a9e:	2b5e      	cmp	r3, #94	; 0x5e
 8010aa0:	d117      	bne.n	8010ad2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	7b5b      	ldrb	r3, [r3, #13]
 8010aa6:	f043 0310 	orr.w	r3, r3, #16
 8010aaa:	b2da      	uxtb	r2, r3
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	735a      	strb	r2, [r3, #13]
 8010ab0:	e00f      	b.n	8010ad2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010ab2:	693b      	ldr	r3, [r7, #16]
 8010ab4:	2206      	movs	r2, #6
 8010ab6:	4928      	ldr	r1, [pc, #160]	; (8010b58 <ethernet_input+0x118>)
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f000 f8bb 	bl	8010c34 <memcmp>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d106      	bne.n	8010ad2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	7b5b      	ldrb	r3, [r3, #13]
 8010ac8:	f043 0308 	orr.w	r3, r3, #8
 8010acc:	b2da      	uxtb	r2, r3
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010ad2:	89fb      	ldrh	r3, [r7, #14]
 8010ad4:	2b08      	cmp	r3, #8
 8010ad6:	d003      	beq.n	8010ae0 <ethernet_input+0xa0>
 8010ad8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010adc:	d014      	beq.n	8010b08 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010ade:	e032      	b.n	8010b46 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010ae6:	f003 0308 	and.w	r3, r3, #8
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d024      	beq.n	8010b38 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010aee:	8afb      	ldrh	r3, [r7, #22]
 8010af0:	4619      	mov	r1, r3
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f7f6 ff42 	bl	800797c <pbuf_remove_header>
 8010af8:	4603      	mov	r3, r0
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d11e      	bne.n	8010b3c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010afe:	6839      	ldr	r1, [r7, #0]
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	f7fe ff21 	bl	800f948 <ip4_input>
      break;
 8010b06:	e013      	b.n	8010b30 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010b08:	683b      	ldr	r3, [r7, #0]
 8010b0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b0e:	f003 0308 	and.w	r3, r3, #8
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d014      	beq.n	8010b40 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010b16:	8afb      	ldrh	r3, [r7, #22]
 8010b18:	4619      	mov	r1, r3
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f7f6 ff2e 	bl	800797c <pbuf_remove_header>
 8010b20:	4603      	mov	r3, r0
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d10e      	bne.n	8010b44 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010b26:	6839      	ldr	r1, [r7, #0]
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	f7fe f8c1 	bl	800ecb0 <etharp_input>
      break;
 8010b2e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010b30:	2300      	movs	r3, #0
 8010b32:	e00c      	b.n	8010b4e <ethernet_input+0x10e>
    goto free_and_return;
 8010b34:	bf00      	nop
 8010b36:	e006      	b.n	8010b46 <ethernet_input+0x106>
        goto free_and_return;
 8010b38:	bf00      	nop
 8010b3a:	e004      	b.n	8010b46 <ethernet_input+0x106>
        goto free_and_return;
 8010b3c:	bf00      	nop
 8010b3e:	e002      	b.n	8010b46 <ethernet_input+0x106>
        goto free_and_return;
 8010b40:	bf00      	nop
 8010b42:	e000      	b.n	8010b46 <ethernet_input+0x106>
        goto free_and_return;
 8010b44:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010b46:	6878      	ldr	r0, [r7, #4]
 8010b48:	f7f6 ff9e 	bl	8007a88 <pbuf_free>
  return ERR_OK;
 8010b4c:	2300      	movs	r3, #0
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3718      	adds	r7, #24
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}
 8010b56:	bf00      	nop
 8010b58:	0801506c 	.word	0x0801506c

08010b5c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b086      	sub	sp, #24
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	60f8      	str	r0, [r7, #12]
 8010b64:	60b9      	str	r1, [r7, #8]
 8010b66:	607a      	str	r2, [r7, #4]
 8010b68:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010b6a:	8c3b      	ldrh	r3, [r7, #32]
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7f5 fbc3 	bl	80062f8 <lwip_htons>
 8010b72:	4603      	mov	r3, r0
 8010b74:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010b76:	210e      	movs	r1, #14
 8010b78:	68b8      	ldr	r0, [r7, #8]
 8010b7a:	f7f6 feef 	bl	800795c <pbuf_add_header>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d125      	bne.n	8010bd0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	685b      	ldr	r3, [r3, #4]
 8010b88:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010b8a:	693b      	ldr	r3, [r7, #16]
 8010b8c:	8afa      	ldrh	r2, [r7, #22]
 8010b8e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010b90:	693b      	ldr	r3, [r7, #16]
 8010b92:	2206      	movs	r2, #6
 8010b94:	6839      	ldr	r1, [r7, #0]
 8010b96:	4618      	mov	r0, r3
 8010b98:	f000 f85c 	bl	8010c54 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010b9c:	693b      	ldr	r3, [r7, #16]
 8010b9e:	3306      	adds	r3, #6
 8010ba0:	2206      	movs	r2, #6
 8010ba2:	6879      	ldr	r1, [r7, #4]
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f000 f855 	bl	8010c54 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010bb0:	2b06      	cmp	r3, #6
 8010bb2:	d006      	beq.n	8010bc2 <ethernet_output+0x66>
 8010bb4:	4b0a      	ldr	r3, [pc, #40]	; (8010be0 <ethernet_output+0x84>)
 8010bb6:	f44f 7299 	mov.w	r2, #306	; 0x132
 8010bba:	490a      	ldr	r1, [pc, #40]	; (8010be4 <ethernet_output+0x88>)
 8010bbc:	480a      	ldr	r0, [pc, #40]	; (8010be8 <ethernet_output+0x8c>)
 8010bbe:	f000 f85f 	bl	8010c80 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	699b      	ldr	r3, [r3, #24]
 8010bc6:	68b9      	ldr	r1, [r7, #8]
 8010bc8:	68f8      	ldr	r0, [r7, #12]
 8010bca:	4798      	blx	r3
 8010bcc:	4603      	mov	r3, r0
 8010bce:	e002      	b.n	8010bd6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010bd0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010bd2:	f06f 0301 	mvn.w	r3, #1
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	3718      	adds	r7, #24
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}
 8010bde:	bf00      	nop
 8010be0:	08014a04 	.word	0x08014a04
 8010be4:	08014a3c 	.word	0x08014a3c
 8010be8:	08014a70 	.word	0x08014a70

08010bec <__libc_init_array>:
 8010bec:	b570      	push	{r4, r5, r6, lr}
 8010bee:	4d0d      	ldr	r5, [pc, #52]	; (8010c24 <__libc_init_array+0x38>)
 8010bf0:	4c0d      	ldr	r4, [pc, #52]	; (8010c28 <__libc_init_array+0x3c>)
 8010bf2:	1b64      	subs	r4, r4, r5
 8010bf4:	10a4      	asrs	r4, r4, #2
 8010bf6:	2600      	movs	r6, #0
 8010bf8:	42a6      	cmp	r6, r4
 8010bfa:	d109      	bne.n	8010c10 <__libc_init_array+0x24>
 8010bfc:	4d0b      	ldr	r5, [pc, #44]	; (8010c2c <__libc_init_array+0x40>)
 8010bfe:	4c0c      	ldr	r4, [pc, #48]	; (8010c30 <__libc_init_array+0x44>)
 8010c00:	f001 f8b0 	bl	8011d64 <_init>
 8010c04:	1b64      	subs	r4, r4, r5
 8010c06:	10a4      	asrs	r4, r4, #2
 8010c08:	2600      	movs	r6, #0
 8010c0a:	42a6      	cmp	r6, r4
 8010c0c:	d105      	bne.n	8010c1a <__libc_init_array+0x2e>
 8010c0e:	bd70      	pop	{r4, r5, r6, pc}
 8010c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c14:	4798      	blx	r3
 8010c16:	3601      	adds	r6, #1
 8010c18:	e7ee      	b.n	8010bf8 <__libc_init_array+0xc>
 8010c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c1e:	4798      	blx	r3
 8010c20:	3601      	adds	r6, #1
 8010c22:	e7f2      	b.n	8010c0a <__libc_init_array+0x1e>
 8010c24:	080151cc 	.word	0x080151cc
 8010c28:	080151cc 	.word	0x080151cc
 8010c2c:	080151cc 	.word	0x080151cc
 8010c30:	080151d0 	.word	0x080151d0

08010c34 <memcmp>:
 8010c34:	b510      	push	{r4, lr}
 8010c36:	3901      	subs	r1, #1
 8010c38:	4402      	add	r2, r0
 8010c3a:	4290      	cmp	r0, r2
 8010c3c:	d101      	bne.n	8010c42 <memcmp+0xe>
 8010c3e:	2000      	movs	r0, #0
 8010c40:	e005      	b.n	8010c4e <memcmp+0x1a>
 8010c42:	7803      	ldrb	r3, [r0, #0]
 8010c44:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010c48:	42a3      	cmp	r3, r4
 8010c4a:	d001      	beq.n	8010c50 <memcmp+0x1c>
 8010c4c:	1b18      	subs	r0, r3, r4
 8010c4e:	bd10      	pop	{r4, pc}
 8010c50:	3001      	adds	r0, #1
 8010c52:	e7f2      	b.n	8010c3a <memcmp+0x6>

08010c54 <memcpy>:
 8010c54:	440a      	add	r2, r1
 8010c56:	4291      	cmp	r1, r2
 8010c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c5c:	d100      	bne.n	8010c60 <memcpy+0xc>
 8010c5e:	4770      	bx	lr
 8010c60:	b510      	push	{r4, lr}
 8010c62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c6a:	4291      	cmp	r1, r2
 8010c6c:	d1f9      	bne.n	8010c62 <memcpy+0xe>
 8010c6e:	bd10      	pop	{r4, pc}

08010c70 <memset>:
 8010c70:	4402      	add	r2, r0
 8010c72:	4603      	mov	r3, r0
 8010c74:	4293      	cmp	r3, r2
 8010c76:	d100      	bne.n	8010c7a <memset+0xa>
 8010c78:	4770      	bx	lr
 8010c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8010c7e:	e7f9      	b.n	8010c74 <memset+0x4>

08010c80 <iprintf>:
 8010c80:	b40f      	push	{r0, r1, r2, r3}
 8010c82:	4b0a      	ldr	r3, [pc, #40]	; (8010cac <iprintf+0x2c>)
 8010c84:	b513      	push	{r0, r1, r4, lr}
 8010c86:	681c      	ldr	r4, [r3, #0]
 8010c88:	b124      	cbz	r4, 8010c94 <iprintf+0x14>
 8010c8a:	69a3      	ldr	r3, [r4, #24]
 8010c8c:	b913      	cbnz	r3, 8010c94 <iprintf+0x14>
 8010c8e:	4620      	mov	r0, r4
 8010c90:	f000 f8e4 	bl	8010e5c <__sinit>
 8010c94:	ab05      	add	r3, sp, #20
 8010c96:	9a04      	ldr	r2, [sp, #16]
 8010c98:	68a1      	ldr	r1, [r4, #8]
 8010c9a:	9301      	str	r3, [sp, #4]
 8010c9c:	4620      	mov	r0, r4
 8010c9e:	f000 faa1 	bl	80111e4 <_vfiprintf_r>
 8010ca2:	b002      	add	sp, #8
 8010ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ca8:	b004      	add	sp, #16
 8010caa:	4770      	bx	lr
 8010cac:	2000002c 	.word	0x2000002c

08010cb0 <rand>:
 8010cb0:	4b16      	ldr	r3, [pc, #88]	; (8010d0c <rand+0x5c>)
 8010cb2:	b510      	push	{r4, lr}
 8010cb4:	681c      	ldr	r4, [r3, #0]
 8010cb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010cb8:	b9b3      	cbnz	r3, 8010ce8 <rand+0x38>
 8010cba:	2018      	movs	r0, #24
 8010cbc:	f000 f980 	bl	8010fc0 <malloc>
 8010cc0:	63a0      	str	r0, [r4, #56]	; 0x38
 8010cc2:	b928      	cbnz	r0, 8010cd0 <rand+0x20>
 8010cc4:	4602      	mov	r2, r0
 8010cc6:	4b12      	ldr	r3, [pc, #72]	; (8010d10 <rand+0x60>)
 8010cc8:	4812      	ldr	r0, [pc, #72]	; (8010d14 <rand+0x64>)
 8010cca:	214e      	movs	r1, #78	; 0x4e
 8010ccc:	f000 f850 	bl	8010d70 <__assert_func>
 8010cd0:	4a11      	ldr	r2, [pc, #68]	; (8010d18 <rand+0x68>)
 8010cd2:	4b12      	ldr	r3, [pc, #72]	; (8010d1c <rand+0x6c>)
 8010cd4:	e9c0 2300 	strd	r2, r3, [r0]
 8010cd8:	4b11      	ldr	r3, [pc, #68]	; (8010d20 <rand+0x70>)
 8010cda:	6083      	str	r3, [r0, #8]
 8010cdc:	230b      	movs	r3, #11
 8010cde:	8183      	strh	r3, [r0, #12]
 8010ce0:	2201      	movs	r2, #1
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010ce8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8010cea:	4a0e      	ldr	r2, [pc, #56]	; (8010d24 <rand+0x74>)
 8010cec:	6920      	ldr	r0, [r4, #16]
 8010cee:	6963      	ldr	r3, [r4, #20]
 8010cf0:	490d      	ldr	r1, [pc, #52]	; (8010d28 <rand+0x78>)
 8010cf2:	4342      	muls	r2, r0
 8010cf4:	fb01 2203 	mla	r2, r1, r3, r2
 8010cf8:	fba0 0101 	umull	r0, r1, r0, r1
 8010cfc:	1c43      	adds	r3, r0, #1
 8010cfe:	eb42 0001 	adc.w	r0, r2, r1
 8010d02:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8010d06:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010d0a:	bd10      	pop	{r4, pc}
 8010d0c:	2000002c 	.word	0x2000002c
 8010d10:	08015080 	.word	0x08015080
 8010d14:	08015097 	.word	0x08015097
 8010d18:	abcd330e 	.word	0xabcd330e
 8010d1c:	e66d1234 	.word	0xe66d1234
 8010d20:	0005deec 	.word	0x0005deec
 8010d24:	5851f42d 	.word	0x5851f42d
 8010d28:	4c957f2d 	.word	0x4c957f2d

08010d2c <strchr>:
 8010d2c:	b2c9      	uxtb	r1, r1
 8010d2e:	4603      	mov	r3, r0
 8010d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d34:	b11a      	cbz	r2, 8010d3e <strchr+0x12>
 8010d36:	428a      	cmp	r2, r1
 8010d38:	d1f9      	bne.n	8010d2e <strchr+0x2>
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	4770      	bx	lr
 8010d3e:	2900      	cmp	r1, #0
 8010d40:	bf18      	it	ne
 8010d42:	2300      	movne	r3, #0
 8010d44:	e7f9      	b.n	8010d3a <strchr+0xe>

08010d46 <strncmp>:
 8010d46:	b510      	push	{r4, lr}
 8010d48:	b17a      	cbz	r2, 8010d6a <strncmp+0x24>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	3901      	subs	r1, #1
 8010d4e:	1884      	adds	r4, r0, r2
 8010d50:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010d54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010d58:	4290      	cmp	r0, r2
 8010d5a:	d101      	bne.n	8010d60 <strncmp+0x1a>
 8010d5c:	42a3      	cmp	r3, r4
 8010d5e:	d101      	bne.n	8010d64 <strncmp+0x1e>
 8010d60:	1a80      	subs	r0, r0, r2
 8010d62:	bd10      	pop	{r4, pc}
 8010d64:	2800      	cmp	r0, #0
 8010d66:	d1f3      	bne.n	8010d50 <strncmp+0xa>
 8010d68:	e7fa      	b.n	8010d60 <strncmp+0x1a>
 8010d6a:	4610      	mov	r0, r2
 8010d6c:	e7f9      	b.n	8010d62 <strncmp+0x1c>
	...

08010d70 <__assert_func>:
 8010d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d72:	4614      	mov	r4, r2
 8010d74:	461a      	mov	r2, r3
 8010d76:	4b09      	ldr	r3, [pc, #36]	; (8010d9c <__assert_func+0x2c>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	4605      	mov	r5, r0
 8010d7c:	68d8      	ldr	r0, [r3, #12]
 8010d7e:	b14c      	cbz	r4, 8010d94 <__assert_func+0x24>
 8010d80:	4b07      	ldr	r3, [pc, #28]	; (8010da0 <__assert_func+0x30>)
 8010d82:	9100      	str	r1, [sp, #0]
 8010d84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d88:	4906      	ldr	r1, [pc, #24]	; (8010da4 <__assert_func+0x34>)
 8010d8a:	462b      	mov	r3, r5
 8010d8c:	f000 f8e4 	bl	8010f58 <fiprintf>
 8010d90:	f000 fe12 	bl	80119b8 <abort>
 8010d94:	4b04      	ldr	r3, [pc, #16]	; (8010da8 <__assert_func+0x38>)
 8010d96:	461c      	mov	r4, r3
 8010d98:	e7f3      	b.n	8010d82 <__assert_func+0x12>
 8010d9a:	bf00      	nop
 8010d9c:	2000002c 	.word	0x2000002c
 8010da0:	080150f2 	.word	0x080150f2
 8010da4:	080150ff 	.word	0x080150ff
 8010da8:	0801512d 	.word	0x0801512d

08010dac <std>:
 8010dac:	2300      	movs	r3, #0
 8010dae:	b510      	push	{r4, lr}
 8010db0:	4604      	mov	r4, r0
 8010db2:	e9c0 3300 	strd	r3, r3, [r0]
 8010db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010dba:	6083      	str	r3, [r0, #8]
 8010dbc:	8181      	strh	r1, [r0, #12]
 8010dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8010dc0:	81c2      	strh	r2, [r0, #14]
 8010dc2:	6183      	str	r3, [r0, #24]
 8010dc4:	4619      	mov	r1, r3
 8010dc6:	2208      	movs	r2, #8
 8010dc8:	305c      	adds	r0, #92	; 0x5c
 8010dca:	f7ff ff51 	bl	8010c70 <memset>
 8010dce:	4b05      	ldr	r3, [pc, #20]	; (8010de4 <std+0x38>)
 8010dd0:	6263      	str	r3, [r4, #36]	; 0x24
 8010dd2:	4b05      	ldr	r3, [pc, #20]	; (8010de8 <std+0x3c>)
 8010dd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8010dd6:	4b05      	ldr	r3, [pc, #20]	; (8010dec <std+0x40>)
 8010dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010dda:	4b05      	ldr	r3, [pc, #20]	; (8010df0 <std+0x44>)
 8010ddc:	6224      	str	r4, [r4, #32]
 8010dde:	6323      	str	r3, [r4, #48]	; 0x30
 8010de0:	bd10      	pop	{r4, pc}
 8010de2:	bf00      	nop
 8010de4:	0801178d 	.word	0x0801178d
 8010de8:	080117af 	.word	0x080117af
 8010dec:	080117e7 	.word	0x080117e7
 8010df0:	0801180b 	.word	0x0801180b

08010df4 <_cleanup_r>:
 8010df4:	4901      	ldr	r1, [pc, #4]	; (8010dfc <_cleanup_r+0x8>)
 8010df6:	f000 b8c1 	b.w	8010f7c <_fwalk_reent>
 8010dfa:	bf00      	nop
 8010dfc:	08011af5 	.word	0x08011af5

08010e00 <__sfmoreglue>:
 8010e00:	b570      	push	{r4, r5, r6, lr}
 8010e02:	2268      	movs	r2, #104	; 0x68
 8010e04:	1e4d      	subs	r5, r1, #1
 8010e06:	4355      	muls	r5, r2
 8010e08:	460e      	mov	r6, r1
 8010e0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010e0e:	f000 f94b 	bl	80110a8 <_malloc_r>
 8010e12:	4604      	mov	r4, r0
 8010e14:	b140      	cbz	r0, 8010e28 <__sfmoreglue+0x28>
 8010e16:	2100      	movs	r1, #0
 8010e18:	e9c0 1600 	strd	r1, r6, [r0]
 8010e1c:	300c      	adds	r0, #12
 8010e1e:	60a0      	str	r0, [r4, #8]
 8010e20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010e24:	f7ff ff24 	bl	8010c70 <memset>
 8010e28:	4620      	mov	r0, r4
 8010e2a:	bd70      	pop	{r4, r5, r6, pc}

08010e2c <__sfp_lock_acquire>:
 8010e2c:	4801      	ldr	r0, [pc, #4]	; (8010e34 <__sfp_lock_acquire+0x8>)
 8010e2e:	f000 b8c5 	b.w	8010fbc <__retarget_lock_acquire_recursive>
 8010e32:	bf00      	nop
 8010e34:	2000884d 	.word	0x2000884d

08010e38 <__sfp_lock_release>:
 8010e38:	4801      	ldr	r0, [pc, #4]	; (8010e40 <__sfp_lock_release+0x8>)
 8010e3a:	f000 b8c0 	b.w	8010fbe <__retarget_lock_release_recursive>
 8010e3e:	bf00      	nop
 8010e40:	2000884d 	.word	0x2000884d

08010e44 <__sinit_lock_acquire>:
 8010e44:	4801      	ldr	r0, [pc, #4]	; (8010e4c <__sinit_lock_acquire+0x8>)
 8010e46:	f000 b8b9 	b.w	8010fbc <__retarget_lock_acquire_recursive>
 8010e4a:	bf00      	nop
 8010e4c:	2000884e 	.word	0x2000884e

08010e50 <__sinit_lock_release>:
 8010e50:	4801      	ldr	r0, [pc, #4]	; (8010e58 <__sinit_lock_release+0x8>)
 8010e52:	f000 b8b4 	b.w	8010fbe <__retarget_lock_release_recursive>
 8010e56:	bf00      	nop
 8010e58:	2000884e 	.word	0x2000884e

08010e5c <__sinit>:
 8010e5c:	b510      	push	{r4, lr}
 8010e5e:	4604      	mov	r4, r0
 8010e60:	f7ff fff0 	bl	8010e44 <__sinit_lock_acquire>
 8010e64:	69a3      	ldr	r3, [r4, #24]
 8010e66:	b11b      	cbz	r3, 8010e70 <__sinit+0x14>
 8010e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e6c:	f7ff bff0 	b.w	8010e50 <__sinit_lock_release>
 8010e70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010e74:	6523      	str	r3, [r4, #80]	; 0x50
 8010e76:	4b13      	ldr	r3, [pc, #76]	; (8010ec4 <__sinit+0x68>)
 8010e78:	4a13      	ldr	r2, [pc, #76]	; (8010ec8 <__sinit+0x6c>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8010e7e:	42a3      	cmp	r3, r4
 8010e80:	bf04      	itt	eq
 8010e82:	2301      	moveq	r3, #1
 8010e84:	61a3      	streq	r3, [r4, #24]
 8010e86:	4620      	mov	r0, r4
 8010e88:	f000 f820 	bl	8010ecc <__sfp>
 8010e8c:	6060      	str	r0, [r4, #4]
 8010e8e:	4620      	mov	r0, r4
 8010e90:	f000 f81c 	bl	8010ecc <__sfp>
 8010e94:	60a0      	str	r0, [r4, #8]
 8010e96:	4620      	mov	r0, r4
 8010e98:	f000 f818 	bl	8010ecc <__sfp>
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	60e0      	str	r0, [r4, #12]
 8010ea0:	2104      	movs	r1, #4
 8010ea2:	6860      	ldr	r0, [r4, #4]
 8010ea4:	f7ff ff82 	bl	8010dac <std>
 8010ea8:	68a0      	ldr	r0, [r4, #8]
 8010eaa:	2201      	movs	r2, #1
 8010eac:	2109      	movs	r1, #9
 8010eae:	f7ff ff7d 	bl	8010dac <std>
 8010eb2:	68e0      	ldr	r0, [r4, #12]
 8010eb4:	2202      	movs	r2, #2
 8010eb6:	2112      	movs	r1, #18
 8010eb8:	f7ff ff78 	bl	8010dac <std>
 8010ebc:	2301      	movs	r3, #1
 8010ebe:	61a3      	str	r3, [r4, #24]
 8010ec0:	e7d2      	b.n	8010e68 <__sinit+0xc>
 8010ec2:	bf00      	nop
 8010ec4:	0801507c 	.word	0x0801507c
 8010ec8:	08010df5 	.word	0x08010df5

08010ecc <__sfp>:
 8010ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ece:	4607      	mov	r7, r0
 8010ed0:	f7ff ffac 	bl	8010e2c <__sfp_lock_acquire>
 8010ed4:	4b1e      	ldr	r3, [pc, #120]	; (8010f50 <__sfp+0x84>)
 8010ed6:	681e      	ldr	r6, [r3, #0]
 8010ed8:	69b3      	ldr	r3, [r6, #24]
 8010eda:	b913      	cbnz	r3, 8010ee2 <__sfp+0x16>
 8010edc:	4630      	mov	r0, r6
 8010ede:	f7ff ffbd 	bl	8010e5c <__sinit>
 8010ee2:	3648      	adds	r6, #72	; 0x48
 8010ee4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010ee8:	3b01      	subs	r3, #1
 8010eea:	d503      	bpl.n	8010ef4 <__sfp+0x28>
 8010eec:	6833      	ldr	r3, [r6, #0]
 8010eee:	b30b      	cbz	r3, 8010f34 <__sfp+0x68>
 8010ef0:	6836      	ldr	r6, [r6, #0]
 8010ef2:	e7f7      	b.n	8010ee4 <__sfp+0x18>
 8010ef4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010ef8:	b9d5      	cbnz	r5, 8010f30 <__sfp+0x64>
 8010efa:	4b16      	ldr	r3, [pc, #88]	; (8010f54 <__sfp+0x88>)
 8010efc:	60e3      	str	r3, [r4, #12]
 8010efe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010f02:	6665      	str	r5, [r4, #100]	; 0x64
 8010f04:	f000 f859 	bl	8010fba <__retarget_lock_init_recursive>
 8010f08:	f7ff ff96 	bl	8010e38 <__sfp_lock_release>
 8010f0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010f10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010f14:	6025      	str	r5, [r4, #0]
 8010f16:	61a5      	str	r5, [r4, #24]
 8010f18:	2208      	movs	r2, #8
 8010f1a:	4629      	mov	r1, r5
 8010f1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010f20:	f7ff fea6 	bl	8010c70 <memset>
 8010f24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010f28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010f2c:	4620      	mov	r0, r4
 8010f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f30:	3468      	adds	r4, #104	; 0x68
 8010f32:	e7d9      	b.n	8010ee8 <__sfp+0x1c>
 8010f34:	2104      	movs	r1, #4
 8010f36:	4638      	mov	r0, r7
 8010f38:	f7ff ff62 	bl	8010e00 <__sfmoreglue>
 8010f3c:	4604      	mov	r4, r0
 8010f3e:	6030      	str	r0, [r6, #0]
 8010f40:	2800      	cmp	r0, #0
 8010f42:	d1d5      	bne.n	8010ef0 <__sfp+0x24>
 8010f44:	f7ff ff78 	bl	8010e38 <__sfp_lock_release>
 8010f48:	230c      	movs	r3, #12
 8010f4a:	603b      	str	r3, [r7, #0]
 8010f4c:	e7ee      	b.n	8010f2c <__sfp+0x60>
 8010f4e:	bf00      	nop
 8010f50:	0801507c 	.word	0x0801507c
 8010f54:	ffff0001 	.word	0xffff0001

08010f58 <fiprintf>:
 8010f58:	b40e      	push	{r1, r2, r3}
 8010f5a:	b503      	push	{r0, r1, lr}
 8010f5c:	4601      	mov	r1, r0
 8010f5e:	ab03      	add	r3, sp, #12
 8010f60:	4805      	ldr	r0, [pc, #20]	; (8010f78 <fiprintf+0x20>)
 8010f62:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f66:	6800      	ldr	r0, [r0, #0]
 8010f68:	9301      	str	r3, [sp, #4]
 8010f6a:	f000 f93b 	bl	80111e4 <_vfiprintf_r>
 8010f6e:	b002      	add	sp, #8
 8010f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f74:	b003      	add	sp, #12
 8010f76:	4770      	bx	lr
 8010f78:	2000002c 	.word	0x2000002c

08010f7c <_fwalk_reent>:
 8010f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f80:	4606      	mov	r6, r0
 8010f82:	4688      	mov	r8, r1
 8010f84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010f88:	2700      	movs	r7, #0
 8010f8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010f8e:	f1b9 0901 	subs.w	r9, r9, #1
 8010f92:	d505      	bpl.n	8010fa0 <_fwalk_reent+0x24>
 8010f94:	6824      	ldr	r4, [r4, #0]
 8010f96:	2c00      	cmp	r4, #0
 8010f98:	d1f7      	bne.n	8010f8a <_fwalk_reent+0xe>
 8010f9a:	4638      	mov	r0, r7
 8010f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fa0:	89ab      	ldrh	r3, [r5, #12]
 8010fa2:	2b01      	cmp	r3, #1
 8010fa4:	d907      	bls.n	8010fb6 <_fwalk_reent+0x3a>
 8010fa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010faa:	3301      	adds	r3, #1
 8010fac:	d003      	beq.n	8010fb6 <_fwalk_reent+0x3a>
 8010fae:	4629      	mov	r1, r5
 8010fb0:	4630      	mov	r0, r6
 8010fb2:	47c0      	blx	r8
 8010fb4:	4307      	orrs	r7, r0
 8010fb6:	3568      	adds	r5, #104	; 0x68
 8010fb8:	e7e9      	b.n	8010f8e <_fwalk_reent+0x12>

08010fba <__retarget_lock_init_recursive>:
 8010fba:	4770      	bx	lr

08010fbc <__retarget_lock_acquire_recursive>:
 8010fbc:	4770      	bx	lr

08010fbe <__retarget_lock_release_recursive>:
 8010fbe:	4770      	bx	lr

08010fc0 <malloc>:
 8010fc0:	4b02      	ldr	r3, [pc, #8]	; (8010fcc <malloc+0xc>)
 8010fc2:	4601      	mov	r1, r0
 8010fc4:	6818      	ldr	r0, [r3, #0]
 8010fc6:	f000 b86f 	b.w	80110a8 <_malloc_r>
 8010fca:	bf00      	nop
 8010fcc:	2000002c 	.word	0x2000002c

08010fd0 <_free_r>:
 8010fd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010fd2:	2900      	cmp	r1, #0
 8010fd4:	d044      	beq.n	8011060 <_free_r+0x90>
 8010fd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010fda:	9001      	str	r0, [sp, #4]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	f1a1 0404 	sub.w	r4, r1, #4
 8010fe2:	bfb8      	it	lt
 8010fe4:	18e4      	addlt	r4, r4, r3
 8010fe6:	f000 fe39 	bl	8011c5c <__malloc_lock>
 8010fea:	4a1e      	ldr	r2, [pc, #120]	; (8011064 <_free_r+0x94>)
 8010fec:	9801      	ldr	r0, [sp, #4]
 8010fee:	6813      	ldr	r3, [r2, #0]
 8010ff0:	b933      	cbnz	r3, 8011000 <_free_r+0x30>
 8010ff2:	6063      	str	r3, [r4, #4]
 8010ff4:	6014      	str	r4, [r2, #0]
 8010ff6:	b003      	add	sp, #12
 8010ff8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010ffc:	f000 be34 	b.w	8011c68 <__malloc_unlock>
 8011000:	42a3      	cmp	r3, r4
 8011002:	d908      	bls.n	8011016 <_free_r+0x46>
 8011004:	6825      	ldr	r5, [r4, #0]
 8011006:	1961      	adds	r1, r4, r5
 8011008:	428b      	cmp	r3, r1
 801100a:	bf01      	itttt	eq
 801100c:	6819      	ldreq	r1, [r3, #0]
 801100e:	685b      	ldreq	r3, [r3, #4]
 8011010:	1949      	addeq	r1, r1, r5
 8011012:	6021      	streq	r1, [r4, #0]
 8011014:	e7ed      	b.n	8010ff2 <_free_r+0x22>
 8011016:	461a      	mov	r2, r3
 8011018:	685b      	ldr	r3, [r3, #4]
 801101a:	b10b      	cbz	r3, 8011020 <_free_r+0x50>
 801101c:	42a3      	cmp	r3, r4
 801101e:	d9fa      	bls.n	8011016 <_free_r+0x46>
 8011020:	6811      	ldr	r1, [r2, #0]
 8011022:	1855      	adds	r5, r2, r1
 8011024:	42a5      	cmp	r5, r4
 8011026:	d10b      	bne.n	8011040 <_free_r+0x70>
 8011028:	6824      	ldr	r4, [r4, #0]
 801102a:	4421      	add	r1, r4
 801102c:	1854      	adds	r4, r2, r1
 801102e:	42a3      	cmp	r3, r4
 8011030:	6011      	str	r1, [r2, #0]
 8011032:	d1e0      	bne.n	8010ff6 <_free_r+0x26>
 8011034:	681c      	ldr	r4, [r3, #0]
 8011036:	685b      	ldr	r3, [r3, #4]
 8011038:	6053      	str	r3, [r2, #4]
 801103a:	4421      	add	r1, r4
 801103c:	6011      	str	r1, [r2, #0]
 801103e:	e7da      	b.n	8010ff6 <_free_r+0x26>
 8011040:	d902      	bls.n	8011048 <_free_r+0x78>
 8011042:	230c      	movs	r3, #12
 8011044:	6003      	str	r3, [r0, #0]
 8011046:	e7d6      	b.n	8010ff6 <_free_r+0x26>
 8011048:	6825      	ldr	r5, [r4, #0]
 801104a:	1961      	adds	r1, r4, r5
 801104c:	428b      	cmp	r3, r1
 801104e:	bf04      	itt	eq
 8011050:	6819      	ldreq	r1, [r3, #0]
 8011052:	685b      	ldreq	r3, [r3, #4]
 8011054:	6063      	str	r3, [r4, #4]
 8011056:	bf04      	itt	eq
 8011058:	1949      	addeq	r1, r1, r5
 801105a:	6021      	streq	r1, [r4, #0]
 801105c:	6054      	str	r4, [r2, #4]
 801105e:	e7ca      	b.n	8010ff6 <_free_r+0x26>
 8011060:	b003      	add	sp, #12
 8011062:	bd30      	pop	{r4, r5, pc}
 8011064:	20008850 	.word	0x20008850

08011068 <sbrk_aligned>:
 8011068:	b570      	push	{r4, r5, r6, lr}
 801106a:	4e0e      	ldr	r6, [pc, #56]	; (80110a4 <sbrk_aligned+0x3c>)
 801106c:	460c      	mov	r4, r1
 801106e:	6831      	ldr	r1, [r6, #0]
 8011070:	4605      	mov	r5, r0
 8011072:	b911      	cbnz	r1, 801107a <sbrk_aligned+0x12>
 8011074:	f000 fb7a 	bl	801176c <_sbrk_r>
 8011078:	6030      	str	r0, [r6, #0]
 801107a:	4621      	mov	r1, r4
 801107c:	4628      	mov	r0, r5
 801107e:	f000 fb75 	bl	801176c <_sbrk_r>
 8011082:	1c43      	adds	r3, r0, #1
 8011084:	d00a      	beq.n	801109c <sbrk_aligned+0x34>
 8011086:	1cc4      	adds	r4, r0, #3
 8011088:	f024 0403 	bic.w	r4, r4, #3
 801108c:	42a0      	cmp	r0, r4
 801108e:	d007      	beq.n	80110a0 <sbrk_aligned+0x38>
 8011090:	1a21      	subs	r1, r4, r0
 8011092:	4628      	mov	r0, r5
 8011094:	f000 fb6a 	bl	801176c <_sbrk_r>
 8011098:	3001      	adds	r0, #1
 801109a:	d101      	bne.n	80110a0 <sbrk_aligned+0x38>
 801109c:	f04f 34ff 	mov.w	r4, #4294967295
 80110a0:	4620      	mov	r0, r4
 80110a2:	bd70      	pop	{r4, r5, r6, pc}
 80110a4:	20008854 	.word	0x20008854

080110a8 <_malloc_r>:
 80110a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110ac:	1ccd      	adds	r5, r1, #3
 80110ae:	f025 0503 	bic.w	r5, r5, #3
 80110b2:	3508      	adds	r5, #8
 80110b4:	2d0c      	cmp	r5, #12
 80110b6:	bf38      	it	cc
 80110b8:	250c      	movcc	r5, #12
 80110ba:	2d00      	cmp	r5, #0
 80110bc:	4607      	mov	r7, r0
 80110be:	db01      	blt.n	80110c4 <_malloc_r+0x1c>
 80110c0:	42a9      	cmp	r1, r5
 80110c2:	d905      	bls.n	80110d0 <_malloc_r+0x28>
 80110c4:	230c      	movs	r3, #12
 80110c6:	603b      	str	r3, [r7, #0]
 80110c8:	2600      	movs	r6, #0
 80110ca:	4630      	mov	r0, r6
 80110cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110d0:	4e2e      	ldr	r6, [pc, #184]	; (801118c <_malloc_r+0xe4>)
 80110d2:	f000 fdc3 	bl	8011c5c <__malloc_lock>
 80110d6:	6833      	ldr	r3, [r6, #0]
 80110d8:	461c      	mov	r4, r3
 80110da:	bb34      	cbnz	r4, 801112a <_malloc_r+0x82>
 80110dc:	4629      	mov	r1, r5
 80110de:	4638      	mov	r0, r7
 80110e0:	f7ff ffc2 	bl	8011068 <sbrk_aligned>
 80110e4:	1c43      	adds	r3, r0, #1
 80110e6:	4604      	mov	r4, r0
 80110e8:	d14d      	bne.n	8011186 <_malloc_r+0xde>
 80110ea:	6834      	ldr	r4, [r6, #0]
 80110ec:	4626      	mov	r6, r4
 80110ee:	2e00      	cmp	r6, #0
 80110f0:	d140      	bne.n	8011174 <_malloc_r+0xcc>
 80110f2:	6823      	ldr	r3, [r4, #0]
 80110f4:	4631      	mov	r1, r6
 80110f6:	4638      	mov	r0, r7
 80110f8:	eb04 0803 	add.w	r8, r4, r3
 80110fc:	f000 fb36 	bl	801176c <_sbrk_r>
 8011100:	4580      	cmp	r8, r0
 8011102:	d13a      	bne.n	801117a <_malloc_r+0xd2>
 8011104:	6821      	ldr	r1, [r4, #0]
 8011106:	3503      	adds	r5, #3
 8011108:	1a6d      	subs	r5, r5, r1
 801110a:	f025 0503 	bic.w	r5, r5, #3
 801110e:	3508      	adds	r5, #8
 8011110:	2d0c      	cmp	r5, #12
 8011112:	bf38      	it	cc
 8011114:	250c      	movcc	r5, #12
 8011116:	4629      	mov	r1, r5
 8011118:	4638      	mov	r0, r7
 801111a:	f7ff ffa5 	bl	8011068 <sbrk_aligned>
 801111e:	3001      	adds	r0, #1
 8011120:	d02b      	beq.n	801117a <_malloc_r+0xd2>
 8011122:	6823      	ldr	r3, [r4, #0]
 8011124:	442b      	add	r3, r5
 8011126:	6023      	str	r3, [r4, #0]
 8011128:	e00e      	b.n	8011148 <_malloc_r+0xa0>
 801112a:	6822      	ldr	r2, [r4, #0]
 801112c:	1b52      	subs	r2, r2, r5
 801112e:	d41e      	bmi.n	801116e <_malloc_r+0xc6>
 8011130:	2a0b      	cmp	r2, #11
 8011132:	d916      	bls.n	8011162 <_malloc_r+0xba>
 8011134:	1961      	adds	r1, r4, r5
 8011136:	42a3      	cmp	r3, r4
 8011138:	6025      	str	r5, [r4, #0]
 801113a:	bf18      	it	ne
 801113c:	6059      	strne	r1, [r3, #4]
 801113e:	6863      	ldr	r3, [r4, #4]
 8011140:	bf08      	it	eq
 8011142:	6031      	streq	r1, [r6, #0]
 8011144:	5162      	str	r2, [r4, r5]
 8011146:	604b      	str	r3, [r1, #4]
 8011148:	4638      	mov	r0, r7
 801114a:	f104 060b 	add.w	r6, r4, #11
 801114e:	f000 fd8b 	bl	8011c68 <__malloc_unlock>
 8011152:	f026 0607 	bic.w	r6, r6, #7
 8011156:	1d23      	adds	r3, r4, #4
 8011158:	1af2      	subs	r2, r6, r3
 801115a:	d0b6      	beq.n	80110ca <_malloc_r+0x22>
 801115c:	1b9b      	subs	r3, r3, r6
 801115e:	50a3      	str	r3, [r4, r2]
 8011160:	e7b3      	b.n	80110ca <_malloc_r+0x22>
 8011162:	6862      	ldr	r2, [r4, #4]
 8011164:	42a3      	cmp	r3, r4
 8011166:	bf0c      	ite	eq
 8011168:	6032      	streq	r2, [r6, #0]
 801116a:	605a      	strne	r2, [r3, #4]
 801116c:	e7ec      	b.n	8011148 <_malloc_r+0xa0>
 801116e:	4623      	mov	r3, r4
 8011170:	6864      	ldr	r4, [r4, #4]
 8011172:	e7b2      	b.n	80110da <_malloc_r+0x32>
 8011174:	4634      	mov	r4, r6
 8011176:	6876      	ldr	r6, [r6, #4]
 8011178:	e7b9      	b.n	80110ee <_malloc_r+0x46>
 801117a:	230c      	movs	r3, #12
 801117c:	603b      	str	r3, [r7, #0]
 801117e:	4638      	mov	r0, r7
 8011180:	f000 fd72 	bl	8011c68 <__malloc_unlock>
 8011184:	e7a1      	b.n	80110ca <_malloc_r+0x22>
 8011186:	6025      	str	r5, [r4, #0]
 8011188:	e7de      	b.n	8011148 <_malloc_r+0xa0>
 801118a:	bf00      	nop
 801118c:	20008850 	.word	0x20008850

08011190 <__sfputc_r>:
 8011190:	6893      	ldr	r3, [r2, #8]
 8011192:	3b01      	subs	r3, #1
 8011194:	2b00      	cmp	r3, #0
 8011196:	b410      	push	{r4}
 8011198:	6093      	str	r3, [r2, #8]
 801119a:	da08      	bge.n	80111ae <__sfputc_r+0x1e>
 801119c:	6994      	ldr	r4, [r2, #24]
 801119e:	42a3      	cmp	r3, r4
 80111a0:	db01      	blt.n	80111a6 <__sfputc_r+0x16>
 80111a2:	290a      	cmp	r1, #10
 80111a4:	d103      	bne.n	80111ae <__sfputc_r+0x1e>
 80111a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111aa:	f000 bb33 	b.w	8011814 <__swbuf_r>
 80111ae:	6813      	ldr	r3, [r2, #0]
 80111b0:	1c58      	adds	r0, r3, #1
 80111b2:	6010      	str	r0, [r2, #0]
 80111b4:	7019      	strb	r1, [r3, #0]
 80111b6:	4608      	mov	r0, r1
 80111b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111bc:	4770      	bx	lr

080111be <__sfputs_r>:
 80111be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111c0:	4606      	mov	r6, r0
 80111c2:	460f      	mov	r7, r1
 80111c4:	4614      	mov	r4, r2
 80111c6:	18d5      	adds	r5, r2, r3
 80111c8:	42ac      	cmp	r4, r5
 80111ca:	d101      	bne.n	80111d0 <__sfputs_r+0x12>
 80111cc:	2000      	movs	r0, #0
 80111ce:	e007      	b.n	80111e0 <__sfputs_r+0x22>
 80111d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111d4:	463a      	mov	r2, r7
 80111d6:	4630      	mov	r0, r6
 80111d8:	f7ff ffda 	bl	8011190 <__sfputc_r>
 80111dc:	1c43      	adds	r3, r0, #1
 80111de:	d1f3      	bne.n	80111c8 <__sfputs_r+0xa>
 80111e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080111e4 <_vfiprintf_r>:
 80111e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111e8:	460d      	mov	r5, r1
 80111ea:	b09d      	sub	sp, #116	; 0x74
 80111ec:	4614      	mov	r4, r2
 80111ee:	4698      	mov	r8, r3
 80111f0:	4606      	mov	r6, r0
 80111f2:	b118      	cbz	r0, 80111fc <_vfiprintf_r+0x18>
 80111f4:	6983      	ldr	r3, [r0, #24]
 80111f6:	b90b      	cbnz	r3, 80111fc <_vfiprintf_r+0x18>
 80111f8:	f7ff fe30 	bl	8010e5c <__sinit>
 80111fc:	4b89      	ldr	r3, [pc, #548]	; (8011424 <_vfiprintf_r+0x240>)
 80111fe:	429d      	cmp	r5, r3
 8011200:	d11b      	bne.n	801123a <_vfiprintf_r+0x56>
 8011202:	6875      	ldr	r5, [r6, #4]
 8011204:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011206:	07d9      	lsls	r1, r3, #31
 8011208:	d405      	bmi.n	8011216 <_vfiprintf_r+0x32>
 801120a:	89ab      	ldrh	r3, [r5, #12]
 801120c:	059a      	lsls	r2, r3, #22
 801120e:	d402      	bmi.n	8011216 <_vfiprintf_r+0x32>
 8011210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011212:	f7ff fed3 	bl	8010fbc <__retarget_lock_acquire_recursive>
 8011216:	89ab      	ldrh	r3, [r5, #12]
 8011218:	071b      	lsls	r3, r3, #28
 801121a:	d501      	bpl.n	8011220 <_vfiprintf_r+0x3c>
 801121c:	692b      	ldr	r3, [r5, #16]
 801121e:	b9eb      	cbnz	r3, 801125c <_vfiprintf_r+0x78>
 8011220:	4629      	mov	r1, r5
 8011222:	4630      	mov	r0, r6
 8011224:	f000 fb5a 	bl	80118dc <__swsetup_r>
 8011228:	b1c0      	cbz	r0, 801125c <_vfiprintf_r+0x78>
 801122a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801122c:	07dc      	lsls	r4, r3, #31
 801122e:	d50e      	bpl.n	801124e <_vfiprintf_r+0x6a>
 8011230:	f04f 30ff 	mov.w	r0, #4294967295
 8011234:	b01d      	add	sp, #116	; 0x74
 8011236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801123a:	4b7b      	ldr	r3, [pc, #492]	; (8011428 <_vfiprintf_r+0x244>)
 801123c:	429d      	cmp	r5, r3
 801123e:	d101      	bne.n	8011244 <_vfiprintf_r+0x60>
 8011240:	68b5      	ldr	r5, [r6, #8]
 8011242:	e7df      	b.n	8011204 <_vfiprintf_r+0x20>
 8011244:	4b79      	ldr	r3, [pc, #484]	; (801142c <_vfiprintf_r+0x248>)
 8011246:	429d      	cmp	r5, r3
 8011248:	bf08      	it	eq
 801124a:	68f5      	ldreq	r5, [r6, #12]
 801124c:	e7da      	b.n	8011204 <_vfiprintf_r+0x20>
 801124e:	89ab      	ldrh	r3, [r5, #12]
 8011250:	0598      	lsls	r0, r3, #22
 8011252:	d4ed      	bmi.n	8011230 <_vfiprintf_r+0x4c>
 8011254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011256:	f7ff feb2 	bl	8010fbe <__retarget_lock_release_recursive>
 801125a:	e7e9      	b.n	8011230 <_vfiprintf_r+0x4c>
 801125c:	2300      	movs	r3, #0
 801125e:	9309      	str	r3, [sp, #36]	; 0x24
 8011260:	2320      	movs	r3, #32
 8011262:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011266:	f8cd 800c 	str.w	r8, [sp, #12]
 801126a:	2330      	movs	r3, #48	; 0x30
 801126c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011430 <_vfiprintf_r+0x24c>
 8011270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011274:	f04f 0901 	mov.w	r9, #1
 8011278:	4623      	mov	r3, r4
 801127a:	469a      	mov	sl, r3
 801127c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011280:	b10a      	cbz	r2, 8011286 <_vfiprintf_r+0xa2>
 8011282:	2a25      	cmp	r2, #37	; 0x25
 8011284:	d1f9      	bne.n	801127a <_vfiprintf_r+0x96>
 8011286:	ebba 0b04 	subs.w	fp, sl, r4
 801128a:	d00b      	beq.n	80112a4 <_vfiprintf_r+0xc0>
 801128c:	465b      	mov	r3, fp
 801128e:	4622      	mov	r2, r4
 8011290:	4629      	mov	r1, r5
 8011292:	4630      	mov	r0, r6
 8011294:	f7ff ff93 	bl	80111be <__sfputs_r>
 8011298:	3001      	adds	r0, #1
 801129a:	f000 80aa 	beq.w	80113f2 <_vfiprintf_r+0x20e>
 801129e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80112a0:	445a      	add	r2, fp
 80112a2:	9209      	str	r2, [sp, #36]	; 0x24
 80112a4:	f89a 3000 	ldrb.w	r3, [sl]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	f000 80a2 	beq.w	80113f2 <_vfiprintf_r+0x20e>
 80112ae:	2300      	movs	r3, #0
 80112b0:	f04f 32ff 	mov.w	r2, #4294967295
 80112b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80112b8:	f10a 0a01 	add.w	sl, sl, #1
 80112bc:	9304      	str	r3, [sp, #16]
 80112be:	9307      	str	r3, [sp, #28]
 80112c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80112c4:	931a      	str	r3, [sp, #104]	; 0x68
 80112c6:	4654      	mov	r4, sl
 80112c8:	2205      	movs	r2, #5
 80112ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112ce:	4858      	ldr	r0, [pc, #352]	; (8011430 <_vfiprintf_r+0x24c>)
 80112d0:	f7ee ffa6 	bl	8000220 <memchr>
 80112d4:	9a04      	ldr	r2, [sp, #16]
 80112d6:	b9d8      	cbnz	r0, 8011310 <_vfiprintf_r+0x12c>
 80112d8:	06d1      	lsls	r1, r2, #27
 80112da:	bf44      	itt	mi
 80112dc:	2320      	movmi	r3, #32
 80112de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112e2:	0713      	lsls	r3, r2, #28
 80112e4:	bf44      	itt	mi
 80112e6:	232b      	movmi	r3, #43	; 0x2b
 80112e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112ec:	f89a 3000 	ldrb.w	r3, [sl]
 80112f0:	2b2a      	cmp	r3, #42	; 0x2a
 80112f2:	d015      	beq.n	8011320 <_vfiprintf_r+0x13c>
 80112f4:	9a07      	ldr	r2, [sp, #28]
 80112f6:	4654      	mov	r4, sl
 80112f8:	2000      	movs	r0, #0
 80112fa:	f04f 0c0a 	mov.w	ip, #10
 80112fe:	4621      	mov	r1, r4
 8011300:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011304:	3b30      	subs	r3, #48	; 0x30
 8011306:	2b09      	cmp	r3, #9
 8011308:	d94e      	bls.n	80113a8 <_vfiprintf_r+0x1c4>
 801130a:	b1b0      	cbz	r0, 801133a <_vfiprintf_r+0x156>
 801130c:	9207      	str	r2, [sp, #28]
 801130e:	e014      	b.n	801133a <_vfiprintf_r+0x156>
 8011310:	eba0 0308 	sub.w	r3, r0, r8
 8011314:	fa09 f303 	lsl.w	r3, r9, r3
 8011318:	4313      	orrs	r3, r2
 801131a:	9304      	str	r3, [sp, #16]
 801131c:	46a2      	mov	sl, r4
 801131e:	e7d2      	b.n	80112c6 <_vfiprintf_r+0xe2>
 8011320:	9b03      	ldr	r3, [sp, #12]
 8011322:	1d19      	adds	r1, r3, #4
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	9103      	str	r1, [sp, #12]
 8011328:	2b00      	cmp	r3, #0
 801132a:	bfbb      	ittet	lt
 801132c:	425b      	neglt	r3, r3
 801132e:	f042 0202 	orrlt.w	r2, r2, #2
 8011332:	9307      	strge	r3, [sp, #28]
 8011334:	9307      	strlt	r3, [sp, #28]
 8011336:	bfb8      	it	lt
 8011338:	9204      	strlt	r2, [sp, #16]
 801133a:	7823      	ldrb	r3, [r4, #0]
 801133c:	2b2e      	cmp	r3, #46	; 0x2e
 801133e:	d10c      	bne.n	801135a <_vfiprintf_r+0x176>
 8011340:	7863      	ldrb	r3, [r4, #1]
 8011342:	2b2a      	cmp	r3, #42	; 0x2a
 8011344:	d135      	bne.n	80113b2 <_vfiprintf_r+0x1ce>
 8011346:	9b03      	ldr	r3, [sp, #12]
 8011348:	1d1a      	adds	r2, r3, #4
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	9203      	str	r2, [sp, #12]
 801134e:	2b00      	cmp	r3, #0
 8011350:	bfb8      	it	lt
 8011352:	f04f 33ff 	movlt.w	r3, #4294967295
 8011356:	3402      	adds	r4, #2
 8011358:	9305      	str	r3, [sp, #20]
 801135a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011440 <_vfiprintf_r+0x25c>
 801135e:	7821      	ldrb	r1, [r4, #0]
 8011360:	2203      	movs	r2, #3
 8011362:	4650      	mov	r0, sl
 8011364:	f7ee ff5c 	bl	8000220 <memchr>
 8011368:	b140      	cbz	r0, 801137c <_vfiprintf_r+0x198>
 801136a:	2340      	movs	r3, #64	; 0x40
 801136c:	eba0 000a 	sub.w	r0, r0, sl
 8011370:	fa03 f000 	lsl.w	r0, r3, r0
 8011374:	9b04      	ldr	r3, [sp, #16]
 8011376:	4303      	orrs	r3, r0
 8011378:	3401      	adds	r4, #1
 801137a:	9304      	str	r3, [sp, #16]
 801137c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011380:	482c      	ldr	r0, [pc, #176]	; (8011434 <_vfiprintf_r+0x250>)
 8011382:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011386:	2206      	movs	r2, #6
 8011388:	f7ee ff4a 	bl	8000220 <memchr>
 801138c:	2800      	cmp	r0, #0
 801138e:	d03f      	beq.n	8011410 <_vfiprintf_r+0x22c>
 8011390:	4b29      	ldr	r3, [pc, #164]	; (8011438 <_vfiprintf_r+0x254>)
 8011392:	bb1b      	cbnz	r3, 80113dc <_vfiprintf_r+0x1f8>
 8011394:	9b03      	ldr	r3, [sp, #12]
 8011396:	3307      	adds	r3, #7
 8011398:	f023 0307 	bic.w	r3, r3, #7
 801139c:	3308      	adds	r3, #8
 801139e:	9303      	str	r3, [sp, #12]
 80113a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113a2:	443b      	add	r3, r7
 80113a4:	9309      	str	r3, [sp, #36]	; 0x24
 80113a6:	e767      	b.n	8011278 <_vfiprintf_r+0x94>
 80113a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80113ac:	460c      	mov	r4, r1
 80113ae:	2001      	movs	r0, #1
 80113b0:	e7a5      	b.n	80112fe <_vfiprintf_r+0x11a>
 80113b2:	2300      	movs	r3, #0
 80113b4:	3401      	adds	r4, #1
 80113b6:	9305      	str	r3, [sp, #20]
 80113b8:	4619      	mov	r1, r3
 80113ba:	f04f 0c0a 	mov.w	ip, #10
 80113be:	4620      	mov	r0, r4
 80113c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80113c4:	3a30      	subs	r2, #48	; 0x30
 80113c6:	2a09      	cmp	r2, #9
 80113c8:	d903      	bls.n	80113d2 <_vfiprintf_r+0x1ee>
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d0c5      	beq.n	801135a <_vfiprintf_r+0x176>
 80113ce:	9105      	str	r1, [sp, #20]
 80113d0:	e7c3      	b.n	801135a <_vfiprintf_r+0x176>
 80113d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80113d6:	4604      	mov	r4, r0
 80113d8:	2301      	movs	r3, #1
 80113da:	e7f0      	b.n	80113be <_vfiprintf_r+0x1da>
 80113dc:	ab03      	add	r3, sp, #12
 80113de:	9300      	str	r3, [sp, #0]
 80113e0:	462a      	mov	r2, r5
 80113e2:	4b16      	ldr	r3, [pc, #88]	; (801143c <_vfiprintf_r+0x258>)
 80113e4:	a904      	add	r1, sp, #16
 80113e6:	4630      	mov	r0, r6
 80113e8:	f3af 8000 	nop.w
 80113ec:	4607      	mov	r7, r0
 80113ee:	1c78      	adds	r0, r7, #1
 80113f0:	d1d6      	bne.n	80113a0 <_vfiprintf_r+0x1bc>
 80113f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80113f4:	07d9      	lsls	r1, r3, #31
 80113f6:	d405      	bmi.n	8011404 <_vfiprintf_r+0x220>
 80113f8:	89ab      	ldrh	r3, [r5, #12]
 80113fa:	059a      	lsls	r2, r3, #22
 80113fc:	d402      	bmi.n	8011404 <_vfiprintf_r+0x220>
 80113fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011400:	f7ff fddd 	bl	8010fbe <__retarget_lock_release_recursive>
 8011404:	89ab      	ldrh	r3, [r5, #12]
 8011406:	065b      	lsls	r3, r3, #25
 8011408:	f53f af12 	bmi.w	8011230 <_vfiprintf_r+0x4c>
 801140c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801140e:	e711      	b.n	8011234 <_vfiprintf_r+0x50>
 8011410:	ab03      	add	r3, sp, #12
 8011412:	9300      	str	r3, [sp, #0]
 8011414:	462a      	mov	r2, r5
 8011416:	4b09      	ldr	r3, [pc, #36]	; (801143c <_vfiprintf_r+0x258>)
 8011418:	a904      	add	r1, sp, #16
 801141a:	4630      	mov	r0, r6
 801141c:	f000 f880 	bl	8011520 <_printf_i>
 8011420:	e7e4      	b.n	80113ec <_vfiprintf_r+0x208>
 8011422:	bf00      	nop
 8011424:	08015150 	.word	0x08015150
 8011428:	08015170 	.word	0x08015170
 801142c:	08015130 	.word	0x08015130
 8011430:	08015190 	.word	0x08015190
 8011434:	0801519a 	.word	0x0801519a
 8011438:	00000000 	.word	0x00000000
 801143c:	080111bf 	.word	0x080111bf
 8011440:	08015196 	.word	0x08015196

08011444 <_printf_common>:
 8011444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011448:	4616      	mov	r6, r2
 801144a:	4699      	mov	r9, r3
 801144c:	688a      	ldr	r2, [r1, #8]
 801144e:	690b      	ldr	r3, [r1, #16]
 8011450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011454:	4293      	cmp	r3, r2
 8011456:	bfb8      	it	lt
 8011458:	4613      	movlt	r3, r2
 801145a:	6033      	str	r3, [r6, #0]
 801145c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011460:	4607      	mov	r7, r0
 8011462:	460c      	mov	r4, r1
 8011464:	b10a      	cbz	r2, 801146a <_printf_common+0x26>
 8011466:	3301      	adds	r3, #1
 8011468:	6033      	str	r3, [r6, #0]
 801146a:	6823      	ldr	r3, [r4, #0]
 801146c:	0699      	lsls	r1, r3, #26
 801146e:	bf42      	ittt	mi
 8011470:	6833      	ldrmi	r3, [r6, #0]
 8011472:	3302      	addmi	r3, #2
 8011474:	6033      	strmi	r3, [r6, #0]
 8011476:	6825      	ldr	r5, [r4, #0]
 8011478:	f015 0506 	ands.w	r5, r5, #6
 801147c:	d106      	bne.n	801148c <_printf_common+0x48>
 801147e:	f104 0a19 	add.w	sl, r4, #25
 8011482:	68e3      	ldr	r3, [r4, #12]
 8011484:	6832      	ldr	r2, [r6, #0]
 8011486:	1a9b      	subs	r3, r3, r2
 8011488:	42ab      	cmp	r3, r5
 801148a:	dc26      	bgt.n	80114da <_printf_common+0x96>
 801148c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011490:	1e13      	subs	r3, r2, #0
 8011492:	6822      	ldr	r2, [r4, #0]
 8011494:	bf18      	it	ne
 8011496:	2301      	movne	r3, #1
 8011498:	0692      	lsls	r2, r2, #26
 801149a:	d42b      	bmi.n	80114f4 <_printf_common+0xb0>
 801149c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80114a0:	4649      	mov	r1, r9
 80114a2:	4638      	mov	r0, r7
 80114a4:	47c0      	blx	r8
 80114a6:	3001      	adds	r0, #1
 80114a8:	d01e      	beq.n	80114e8 <_printf_common+0xa4>
 80114aa:	6823      	ldr	r3, [r4, #0]
 80114ac:	68e5      	ldr	r5, [r4, #12]
 80114ae:	6832      	ldr	r2, [r6, #0]
 80114b0:	f003 0306 	and.w	r3, r3, #6
 80114b4:	2b04      	cmp	r3, #4
 80114b6:	bf08      	it	eq
 80114b8:	1aad      	subeq	r5, r5, r2
 80114ba:	68a3      	ldr	r3, [r4, #8]
 80114bc:	6922      	ldr	r2, [r4, #16]
 80114be:	bf0c      	ite	eq
 80114c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80114c4:	2500      	movne	r5, #0
 80114c6:	4293      	cmp	r3, r2
 80114c8:	bfc4      	itt	gt
 80114ca:	1a9b      	subgt	r3, r3, r2
 80114cc:	18ed      	addgt	r5, r5, r3
 80114ce:	2600      	movs	r6, #0
 80114d0:	341a      	adds	r4, #26
 80114d2:	42b5      	cmp	r5, r6
 80114d4:	d11a      	bne.n	801150c <_printf_common+0xc8>
 80114d6:	2000      	movs	r0, #0
 80114d8:	e008      	b.n	80114ec <_printf_common+0xa8>
 80114da:	2301      	movs	r3, #1
 80114dc:	4652      	mov	r2, sl
 80114de:	4649      	mov	r1, r9
 80114e0:	4638      	mov	r0, r7
 80114e2:	47c0      	blx	r8
 80114e4:	3001      	adds	r0, #1
 80114e6:	d103      	bne.n	80114f0 <_printf_common+0xac>
 80114e8:	f04f 30ff 	mov.w	r0, #4294967295
 80114ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114f0:	3501      	adds	r5, #1
 80114f2:	e7c6      	b.n	8011482 <_printf_common+0x3e>
 80114f4:	18e1      	adds	r1, r4, r3
 80114f6:	1c5a      	adds	r2, r3, #1
 80114f8:	2030      	movs	r0, #48	; 0x30
 80114fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80114fe:	4422      	add	r2, r4
 8011500:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011504:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011508:	3302      	adds	r3, #2
 801150a:	e7c7      	b.n	801149c <_printf_common+0x58>
 801150c:	2301      	movs	r3, #1
 801150e:	4622      	mov	r2, r4
 8011510:	4649      	mov	r1, r9
 8011512:	4638      	mov	r0, r7
 8011514:	47c0      	blx	r8
 8011516:	3001      	adds	r0, #1
 8011518:	d0e6      	beq.n	80114e8 <_printf_common+0xa4>
 801151a:	3601      	adds	r6, #1
 801151c:	e7d9      	b.n	80114d2 <_printf_common+0x8e>
	...

08011520 <_printf_i>:
 8011520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011524:	7e0f      	ldrb	r7, [r1, #24]
 8011526:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011528:	2f78      	cmp	r7, #120	; 0x78
 801152a:	4691      	mov	r9, r2
 801152c:	4680      	mov	r8, r0
 801152e:	460c      	mov	r4, r1
 8011530:	469a      	mov	sl, r3
 8011532:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011536:	d807      	bhi.n	8011548 <_printf_i+0x28>
 8011538:	2f62      	cmp	r7, #98	; 0x62
 801153a:	d80a      	bhi.n	8011552 <_printf_i+0x32>
 801153c:	2f00      	cmp	r7, #0
 801153e:	f000 80d8 	beq.w	80116f2 <_printf_i+0x1d2>
 8011542:	2f58      	cmp	r7, #88	; 0x58
 8011544:	f000 80a3 	beq.w	801168e <_printf_i+0x16e>
 8011548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801154c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011550:	e03a      	b.n	80115c8 <_printf_i+0xa8>
 8011552:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011556:	2b15      	cmp	r3, #21
 8011558:	d8f6      	bhi.n	8011548 <_printf_i+0x28>
 801155a:	a101      	add	r1, pc, #4	; (adr r1, 8011560 <_printf_i+0x40>)
 801155c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011560:	080115b9 	.word	0x080115b9
 8011564:	080115cd 	.word	0x080115cd
 8011568:	08011549 	.word	0x08011549
 801156c:	08011549 	.word	0x08011549
 8011570:	08011549 	.word	0x08011549
 8011574:	08011549 	.word	0x08011549
 8011578:	080115cd 	.word	0x080115cd
 801157c:	08011549 	.word	0x08011549
 8011580:	08011549 	.word	0x08011549
 8011584:	08011549 	.word	0x08011549
 8011588:	08011549 	.word	0x08011549
 801158c:	080116d9 	.word	0x080116d9
 8011590:	080115fd 	.word	0x080115fd
 8011594:	080116bb 	.word	0x080116bb
 8011598:	08011549 	.word	0x08011549
 801159c:	08011549 	.word	0x08011549
 80115a0:	080116fb 	.word	0x080116fb
 80115a4:	08011549 	.word	0x08011549
 80115a8:	080115fd 	.word	0x080115fd
 80115ac:	08011549 	.word	0x08011549
 80115b0:	08011549 	.word	0x08011549
 80115b4:	080116c3 	.word	0x080116c3
 80115b8:	682b      	ldr	r3, [r5, #0]
 80115ba:	1d1a      	adds	r2, r3, #4
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	602a      	str	r2, [r5, #0]
 80115c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80115c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80115c8:	2301      	movs	r3, #1
 80115ca:	e0a3      	b.n	8011714 <_printf_i+0x1f4>
 80115cc:	6820      	ldr	r0, [r4, #0]
 80115ce:	6829      	ldr	r1, [r5, #0]
 80115d0:	0606      	lsls	r6, r0, #24
 80115d2:	f101 0304 	add.w	r3, r1, #4
 80115d6:	d50a      	bpl.n	80115ee <_printf_i+0xce>
 80115d8:	680e      	ldr	r6, [r1, #0]
 80115da:	602b      	str	r3, [r5, #0]
 80115dc:	2e00      	cmp	r6, #0
 80115de:	da03      	bge.n	80115e8 <_printf_i+0xc8>
 80115e0:	232d      	movs	r3, #45	; 0x2d
 80115e2:	4276      	negs	r6, r6
 80115e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80115e8:	485e      	ldr	r0, [pc, #376]	; (8011764 <_printf_i+0x244>)
 80115ea:	230a      	movs	r3, #10
 80115ec:	e019      	b.n	8011622 <_printf_i+0x102>
 80115ee:	680e      	ldr	r6, [r1, #0]
 80115f0:	602b      	str	r3, [r5, #0]
 80115f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80115f6:	bf18      	it	ne
 80115f8:	b236      	sxthne	r6, r6
 80115fa:	e7ef      	b.n	80115dc <_printf_i+0xbc>
 80115fc:	682b      	ldr	r3, [r5, #0]
 80115fe:	6820      	ldr	r0, [r4, #0]
 8011600:	1d19      	adds	r1, r3, #4
 8011602:	6029      	str	r1, [r5, #0]
 8011604:	0601      	lsls	r1, r0, #24
 8011606:	d501      	bpl.n	801160c <_printf_i+0xec>
 8011608:	681e      	ldr	r6, [r3, #0]
 801160a:	e002      	b.n	8011612 <_printf_i+0xf2>
 801160c:	0646      	lsls	r6, r0, #25
 801160e:	d5fb      	bpl.n	8011608 <_printf_i+0xe8>
 8011610:	881e      	ldrh	r6, [r3, #0]
 8011612:	4854      	ldr	r0, [pc, #336]	; (8011764 <_printf_i+0x244>)
 8011614:	2f6f      	cmp	r7, #111	; 0x6f
 8011616:	bf0c      	ite	eq
 8011618:	2308      	moveq	r3, #8
 801161a:	230a      	movne	r3, #10
 801161c:	2100      	movs	r1, #0
 801161e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011622:	6865      	ldr	r5, [r4, #4]
 8011624:	60a5      	str	r5, [r4, #8]
 8011626:	2d00      	cmp	r5, #0
 8011628:	bfa2      	ittt	ge
 801162a:	6821      	ldrge	r1, [r4, #0]
 801162c:	f021 0104 	bicge.w	r1, r1, #4
 8011630:	6021      	strge	r1, [r4, #0]
 8011632:	b90e      	cbnz	r6, 8011638 <_printf_i+0x118>
 8011634:	2d00      	cmp	r5, #0
 8011636:	d04d      	beq.n	80116d4 <_printf_i+0x1b4>
 8011638:	4615      	mov	r5, r2
 801163a:	fbb6 f1f3 	udiv	r1, r6, r3
 801163e:	fb03 6711 	mls	r7, r3, r1, r6
 8011642:	5dc7      	ldrb	r7, [r0, r7]
 8011644:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011648:	4637      	mov	r7, r6
 801164a:	42bb      	cmp	r3, r7
 801164c:	460e      	mov	r6, r1
 801164e:	d9f4      	bls.n	801163a <_printf_i+0x11a>
 8011650:	2b08      	cmp	r3, #8
 8011652:	d10b      	bne.n	801166c <_printf_i+0x14c>
 8011654:	6823      	ldr	r3, [r4, #0]
 8011656:	07de      	lsls	r6, r3, #31
 8011658:	d508      	bpl.n	801166c <_printf_i+0x14c>
 801165a:	6923      	ldr	r3, [r4, #16]
 801165c:	6861      	ldr	r1, [r4, #4]
 801165e:	4299      	cmp	r1, r3
 8011660:	bfde      	ittt	le
 8011662:	2330      	movle	r3, #48	; 0x30
 8011664:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011668:	f105 35ff 	addle.w	r5, r5, #4294967295
 801166c:	1b52      	subs	r2, r2, r5
 801166e:	6122      	str	r2, [r4, #16]
 8011670:	f8cd a000 	str.w	sl, [sp]
 8011674:	464b      	mov	r3, r9
 8011676:	aa03      	add	r2, sp, #12
 8011678:	4621      	mov	r1, r4
 801167a:	4640      	mov	r0, r8
 801167c:	f7ff fee2 	bl	8011444 <_printf_common>
 8011680:	3001      	adds	r0, #1
 8011682:	d14c      	bne.n	801171e <_printf_i+0x1fe>
 8011684:	f04f 30ff 	mov.w	r0, #4294967295
 8011688:	b004      	add	sp, #16
 801168a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801168e:	4835      	ldr	r0, [pc, #212]	; (8011764 <_printf_i+0x244>)
 8011690:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011694:	6829      	ldr	r1, [r5, #0]
 8011696:	6823      	ldr	r3, [r4, #0]
 8011698:	f851 6b04 	ldr.w	r6, [r1], #4
 801169c:	6029      	str	r1, [r5, #0]
 801169e:	061d      	lsls	r5, r3, #24
 80116a0:	d514      	bpl.n	80116cc <_printf_i+0x1ac>
 80116a2:	07df      	lsls	r7, r3, #31
 80116a4:	bf44      	itt	mi
 80116a6:	f043 0320 	orrmi.w	r3, r3, #32
 80116aa:	6023      	strmi	r3, [r4, #0]
 80116ac:	b91e      	cbnz	r6, 80116b6 <_printf_i+0x196>
 80116ae:	6823      	ldr	r3, [r4, #0]
 80116b0:	f023 0320 	bic.w	r3, r3, #32
 80116b4:	6023      	str	r3, [r4, #0]
 80116b6:	2310      	movs	r3, #16
 80116b8:	e7b0      	b.n	801161c <_printf_i+0xfc>
 80116ba:	6823      	ldr	r3, [r4, #0]
 80116bc:	f043 0320 	orr.w	r3, r3, #32
 80116c0:	6023      	str	r3, [r4, #0]
 80116c2:	2378      	movs	r3, #120	; 0x78
 80116c4:	4828      	ldr	r0, [pc, #160]	; (8011768 <_printf_i+0x248>)
 80116c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80116ca:	e7e3      	b.n	8011694 <_printf_i+0x174>
 80116cc:	0659      	lsls	r1, r3, #25
 80116ce:	bf48      	it	mi
 80116d0:	b2b6      	uxthmi	r6, r6
 80116d2:	e7e6      	b.n	80116a2 <_printf_i+0x182>
 80116d4:	4615      	mov	r5, r2
 80116d6:	e7bb      	b.n	8011650 <_printf_i+0x130>
 80116d8:	682b      	ldr	r3, [r5, #0]
 80116da:	6826      	ldr	r6, [r4, #0]
 80116dc:	6961      	ldr	r1, [r4, #20]
 80116de:	1d18      	adds	r0, r3, #4
 80116e0:	6028      	str	r0, [r5, #0]
 80116e2:	0635      	lsls	r5, r6, #24
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	d501      	bpl.n	80116ec <_printf_i+0x1cc>
 80116e8:	6019      	str	r1, [r3, #0]
 80116ea:	e002      	b.n	80116f2 <_printf_i+0x1d2>
 80116ec:	0670      	lsls	r0, r6, #25
 80116ee:	d5fb      	bpl.n	80116e8 <_printf_i+0x1c8>
 80116f0:	8019      	strh	r1, [r3, #0]
 80116f2:	2300      	movs	r3, #0
 80116f4:	6123      	str	r3, [r4, #16]
 80116f6:	4615      	mov	r5, r2
 80116f8:	e7ba      	b.n	8011670 <_printf_i+0x150>
 80116fa:	682b      	ldr	r3, [r5, #0]
 80116fc:	1d1a      	adds	r2, r3, #4
 80116fe:	602a      	str	r2, [r5, #0]
 8011700:	681d      	ldr	r5, [r3, #0]
 8011702:	6862      	ldr	r2, [r4, #4]
 8011704:	2100      	movs	r1, #0
 8011706:	4628      	mov	r0, r5
 8011708:	f7ee fd8a 	bl	8000220 <memchr>
 801170c:	b108      	cbz	r0, 8011712 <_printf_i+0x1f2>
 801170e:	1b40      	subs	r0, r0, r5
 8011710:	6060      	str	r0, [r4, #4]
 8011712:	6863      	ldr	r3, [r4, #4]
 8011714:	6123      	str	r3, [r4, #16]
 8011716:	2300      	movs	r3, #0
 8011718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801171c:	e7a8      	b.n	8011670 <_printf_i+0x150>
 801171e:	6923      	ldr	r3, [r4, #16]
 8011720:	462a      	mov	r2, r5
 8011722:	4649      	mov	r1, r9
 8011724:	4640      	mov	r0, r8
 8011726:	47d0      	blx	sl
 8011728:	3001      	adds	r0, #1
 801172a:	d0ab      	beq.n	8011684 <_printf_i+0x164>
 801172c:	6823      	ldr	r3, [r4, #0]
 801172e:	079b      	lsls	r3, r3, #30
 8011730:	d413      	bmi.n	801175a <_printf_i+0x23a>
 8011732:	68e0      	ldr	r0, [r4, #12]
 8011734:	9b03      	ldr	r3, [sp, #12]
 8011736:	4298      	cmp	r0, r3
 8011738:	bfb8      	it	lt
 801173a:	4618      	movlt	r0, r3
 801173c:	e7a4      	b.n	8011688 <_printf_i+0x168>
 801173e:	2301      	movs	r3, #1
 8011740:	4632      	mov	r2, r6
 8011742:	4649      	mov	r1, r9
 8011744:	4640      	mov	r0, r8
 8011746:	47d0      	blx	sl
 8011748:	3001      	adds	r0, #1
 801174a:	d09b      	beq.n	8011684 <_printf_i+0x164>
 801174c:	3501      	adds	r5, #1
 801174e:	68e3      	ldr	r3, [r4, #12]
 8011750:	9903      	ldr	r1, [sp, #12]
 8011752:	1a5b      	subs	r3, r3, r1
 8011754:	42ab      	cmp	r3, r5
 8011756:	dcf2      	bgt.n	801173e <_printf_i+0x21e>
 8011758:	e7eb      	b.n	8011732 <_printf_i+0x212>
 801175a:	2500      	movs	r5, #0
 801175c:	f104 0619 	add.w	r6, r4, #25
 8011760:	e7f5      	b.n	801174e <_printf_i+0x22e>
 8011762:	bf00      	nop
 8011764:	080151a1 	.word	0x080151a1
 8011768:	080151b2 	.word	0x080151b2

0801176c <_sbrk_r>:
 801176c:	b538      	push	{r3, r4, r5, lr}
 801176e:	4d06      	ldr	r5, [pc, #24]	; (8011788 <_sbrk_r+0x1c>)
 8011770:	2300      	movs	r3, #0
 8011772:	4604      	mov	r4, r0
 8011774:	4608      	mov	r0, r1
 8011776:	602b      	str	r3, [r5, #0]
 8011778:	f7ef fa32 	bl	8000be0 <_sbrk>
 801177c:	1c43      	adds	r3, r0, #1
 801177e:	d102      	bne.n	8011786 <_sbrk_r+0x1a>
 8011780:	682b      	ldr	r3, [r5, #0]
 8011782:	b103      	cbz	r3, 8011786 <_sbrk_r+0x1a>
 8011784:	6023      	str	r3, [r4, #0]
 8011786:	bd38      	pop	{r3, r4, r5, pc}
 8011788:	20008848 	.word	0x20008848

0801178c <__sread>:
 801178c:	b510      	push	{r4, lr}
 801178e:	460c      	mov	r4, r1
 8011790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011794:	f000 fa6e 	bl	8011c74 <_read_r>
 8011798:	2800      	cmp	r0, #0
 801179a:	bfab      	itete	ge
 801179c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801179e:	89a3      	ldrhlt	r3, [r4, #12]
 80117a0:	181b      	addge	r3, r3, r0
 80117a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80117a6:	bfac      	ite	ge
 80117a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80117aa:	81a3      	strhlt	r3, [r4, #12]
 80117ac:	bd10      	pop	{r4, pc}

080117ae <__swrite>:
 80117ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117b2:	461f      	mov	r7, r3
 80117b4:	898b      	ldrh	r3, [r1, #12]
 80117b6:	05db      	lsls	r3, r3, #23
 80117b8:	4605      	mov	r5, r0
 80117ba:	460c      	mov	r4, r1
 80117bc:	4616      	mov	r6, r2
 80117be:	d505      	bpl.n	80117cc <__swrite+0x1e>
 80117c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117c4:	2302      	movs	r3, #2
 80117c6:	2200      	movs	r2, #0
 80117c8:	f000 f9d0 	bl	8011b6c <_lseek_r>
 80117cc:	89a3      	ldrh	r3, [r4, #12]
 80117ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80117d6:	81a3      	strh	r3, [r4, #12]
 80117d8:	4632      	mov	r2, r6
 80117da:	463b      	mov	r3, r7
 80117dc:	4628      	mov	r0, r5
 80117de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117e2:	f000 b869 	b.w	80118b8 <_write_r>

080117e6 <__sseek>:
 80117e6:	b510      	push	{r4, lr}
 80117e8:	460c      	mov	r4, r1
 80117ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117ee:	f000 f9bd 	bl	8011b6c <_lseek_r>
 80117f2:	1c43      	adds	r3, r0, #1
 80117f4:	89a3      	ldrh	r3, [r4, #12]
 80117f6:	bf15      	itete	ne
 80117f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80117fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80117fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011802:	81a3      	strheq	r3, [r4, #12]
 8011804:	bf18      	it	ne
 8011806:	81a3      	strhne	r3, [r4, #12]
 8011808:	bd10      	pop	{r4, pc}

0801180a <__sclose>:
 801180a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801180e:	f000 b8db 	b.w	80119c8 <_close_r>
	...

08011814 <__swbuf_r>:
 8011814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011816:	460e      	mov	r6, r1
 8011818:	4614      	mov	r4, r2
 801181a:	4605      	mov	r5, r0
 801181c:	b118      	cbz	r0, 8011826 <__swbuf_r+0x12>
 801181e:	6983      	ldr	r3, [r0, #24]
 8011820:	b90b      	cbnz	r3, 8011826 <__swbuf_r+0x12>
 8011822:	f7ff fb1b 	bl	8010e5c <__sinit>
 8011826:	4b21      	ldr	r3, [pc, #132]	; (80118ac <__swbuf_r+0x98>)
 8011828:	429c      	cmp	r4, r3
 801182a:	d12b      	bne.n	8011884 <__swbuf_r+0x70>
 801182c:	686c      	ldr	r4, [r5, #4]
 801182e:	69a3      	ldr	r3, [r4, #24]
 8011830:	60a3      	str	r3, [r4, #8]
 8011832:	89a3      	ldrh	r3, [r4, #12]
 8011834:	071a      	lsls	r2, r3, #28
 8011836:	d52f      	bpl.n	8011898 <__swbuf_r+0x84>
 8011838:	6923      	ldr	r3, [r4, #16]
 801183a:	b36b      	cbz	r3, 8011898 <__swbuf_r+0x84>
 801183c:	6923      	ldr	r3, [r4, #16]
 801183e:	6820      	ldr	r0, [r4, #0]
 8011840:	1ac0      	subs	r0, r0, r3
 8011842:	6963      	ldr	r3, [r4, #20]
 8011844:	b2f6      	uxtb	r6, r6
 8011846:	4283      	cmp	r3, r0
 8011848:	4637      	mov	r7, r6
 801184a:	dc04      	bgt.n	8011856 <__swbuf_r+0x42>
 801184c:	4621      	mov	r1, r4
 801184e:	4628      	mov	r0, r5
 8011850:	f000 f950 	bl	8011af4 <_fflush_r>
 8011854:	bb30      	cbnz	r0, 80118a4 <__swbuf_r+0x90>
 8011856:	68a3      	ldr	r3, [r4, #8]
 8011858:	3b01      	subs	r3, #1
 801185a:	60a3      	str	r3, [r4, #8]
 801185c:	6823      	ldr	r3, [r4, #0]
 801185e:	1c5a      	adds	r2, r3, #1
 8011860:	6022      	str	r2, [r4, #0]
 8011862:	701e      	strb	r6, [r3, #0]
 8011864:	6963      	ldr	r3, [r4, #20]
 8011866:	3001      	adds	r0, #1
 8011868:	4283      	cmp	r3, r0
 801186a:	d004      	beq.n	8011876 <__swbuf_r+0x62>
 801186c:	89a3      	ldrh	r3, [r4, #12]
 801186e:	07db      	lsls	r3, r3, #31
 8011870:	d506      	bpl.n	8011880 <__swbuf_r+0x6c>
 8011872:	2e0a      	cmp	r6, #10
 8011874:	d104      	bne.n	8011880 <__swbuf_r+0x6c>
 8011876:	4621      	mov	r1, r4
 8011878:	4628      	mov	r0, r5
 801187a:	f000 f93b 	bl	8011af4 <_fflush_r>
 801187e:	b988      	cbnz	r0, 80118a4 <__swbuf_r+0x90>
 8011880:	4638      	mov	r0, r7
 8011882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011884:	4b0a      	ldr	r3, [pc, #40]	; (80118b0 <__swbuf_r+0x9c>)
 8011886:	429c      	cmp	r4, r3
 8011888:	d101      	bne.n	801188e <__swbuf_r+0x7a>
 801188a:	68ac      	ldr	r4, [r5, #8]
 801188c:	e7cf      	b.n	801182e <__swbuf_r+0x1a>
 801188e:	4b09      	ldr	r3, [pc, #36]	; (80118b4 <__swbuf_r+0xa0>)
 8011890:	429c      	cmp	r4, r3
 8011892:	bf08      	it	eq
 8011894:	68ec      	ldreq	r4, [r5, #12]
 8011896:	e7ca      	b.n	801182e <__swbuf_r+0x1a>
 8011898:	4621      	mov	r1, r4
 801189a:	4628      	mov	r0, r5
 801189c:	f000 f81e 	bl	80118dc <__swsetup_r>
 80118a0:	2800      	cmp	r0, #0
 80118a2:	d0cb      	beq.n	801183c <__swbuf_r+0x28>
 80118a4:	f04f 37ff 	mov.w	r7, #4294967295
 80118a8:	e7ea      	b.n	8011880 <__swbuf_r+0x6c>
 80118aa:	bf00      	nop
 80118ac:	08015150 	.word	0x08015150
 80118b0:	08015170 	.word	0x08015170
 80118b4:	08015130 	.word	0x08015130

080118b8 <_write_r>:
 80118b8:	b538      	push	{r3, r4, r5, lr}
 80118ba:	4d07      	ldr	r5, [pc, #28]	; (80118d8 <_write_r+0x20>)
 80118bc:	4604      	mov	r4, r0
 80118be:	4608      	mov	r0, r1
 80118c0:	4611      	mov	r1, r2
 80118c2:	2200      	movs	r2, #0
 80118c4:	602a      	str	r2, [r5, #0]
 80118c6:	461a      	mov	r2, r3
 80118c8:	f7ef f939 	bl	8000b3e <_write>
 80118cc:	1c43      	adds	r3, r0, #1
 80118ce:	d102      	bne.n	80118d6 <_write_r+0x1e>
 80118d0:	682b      	ldr	r3, [r5, #0]
 80118d2:	b103      	cbz	r3, 80118d6 <_write_r+0x1e>
 80118d4:	6023      	str	r3, [r4, #0]
 80118d6:	bd38      	pop	{r3, r4, r5, pc}
 80118d8:	20008848 	.word	0x20008848

080118dc <__swsetup_r>:
 80118dc:	4b32      	ldr	r3, [pc, #200]	; (80119a8 <__swsetup_r+0xcc>)
 80118de:	b570      	push	{r4, r5, r6, lr}
 80118e0:	681d      	ldr	r5, [r3, #0]
 80118e2:	4606      	mov	r6, r0
 80118e4:	460c      	mov	r4, r1
 80118e6:	b125      	cbz	r5, 80118f2 <__swsetup_r+0x16>
 80118e8:	69ab      	ldr	r3, [r5, #24]
 80118ea:	b913      	cbnz	r3, 80118f2 <__swsetup_r+0x16>
 80118ec:	4628      	mov	r0, r5
 80118ee:	f7ff fab5 	bl	8010e5c <__sinit>
 80118f2:	4b2e      	ldr	r3, [pc, #184]	; (80119ac <__swsetup_r+0xd0>)
 80118f4:	429c      	cmp	r4, r3
 80118f6:	d10f      	bne.n	8011918 <__swsetup_r+0x3c>
 80118f8:	686c      	ldr	r4, [r5, #4]
 80118fa:	89a3      	ldrh	r3, [r4, #12]
 80118fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011900:	0719      	lsls	r1, r3, #28
 8011902:	d42c      	bmi.n	801195e <__swsetup_r+0x82>
 8011904:	06dd      	lsls	r5, r3, #27
 8011906:	d411      	bmi.n	801192c <__swsetup_r+0x50>
 8011908:	2309      	movs	r3, #9
 801190a:	6033      	str	r3, [r6, #0]
 801190c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011910:	81a3      	strh	r3, [r4, #12]
 8011912:	f04f 30ff 	mov.w	r0, #4294967295
 8011916:	e03e      	b.n	8011996 <__swsetup_r+0xba>
 8011918:	4b25      	ldr	r3, [pc, #148]	; (80119b0 <__swsetup_r+0xd4>)
 801191a:	429c      	cmp	r4, r3
 801191c:	d101      	bne.n	8011922 <__swsetup_r+0x46>
 801191e:	68ac      	ldr	r4, [r5, #8]
 8011920:	e7eb      	b.n	80118fa <__swsetup_r+0x1e>
 8011922:	4b24      	ldr	r3, [pc, #144]	; (80119b4 <__swsetup_r+0xd8>)
 8011924:	429c      	cmp	r4, r3
 8011926:	bf08      	it	eq
 8011928:	68ec      	ldreq	r4, [r5, #12]
 801192a:	e7e6      	b.n	80118fa <__swsetup_r+0x1e>
 801192c:	0758      	lsls	r0, r3, #29
 801192e:	d512      	bpl.n	8011956 <__swsetup_r+0x7a>
 8011930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011932:	b141      	cbz	r1, 8011946 <__swsetup_r+0x6a>
 8011934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011938:	4299      	cmp	r1, r3
 801193a:	d002      	beq.n	8011942 <__swsetup_r+0x66>
 801193c:	4630      	mov	r0, r6
 801193e:	f7ff fb47 	bl	8010fd0 <_free_r>
 8011942:	2300      	movs	r3, #0
 8011944:	6363      	str	r3, [r4, #52]	; 0x34
 8011946:	89a3      	ldrh	r3, [r4, #12]
 8011948:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801194c:	81a3      	strh	r3, [r4, #12]
 801194e:	2300      	movs	r3, #0
 8011950:	6063      	str	r3, [r4, #4]
 8011952:	6923      	ldr	r3, [r4, #16]
 8011954:	6023      	str	r3, [r4, #0]
 8011956:	89a3      	ldrh	r3, [r4, #12]
 8011958:	f043 0308 	orr.w	r3, r3, #8
 801195c:	81a3      	strh	r3, [r4, #12]
 801195e:	6923      	ldr	r3, [r4, #16]
 8011960:	b94b      	cbnz	r3, 8011976 <__swsetup_r+0x9a>
 8011962:	89a3      	ldrh	r3, [r4, #12]
 8011964:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801196c:	d003      	beq.n	8011976 <__swsetup_r+0x9a>
 801196e:	4621      	mov	r1, r4
 8011970:	4630      	mov	r0, r6
 8011972:	f000 f933 	bl	8011bdc <__smakebuf_r>
 8011976:	89a0      	ldrh	r0, [r4, #12]
 8011978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801197c:	f010 0301 	ands.w	r3, r0, #1
 8011980:	d00a      	beq.n	8011998 <__swsetup_r+0xbc>
 8011982:	2300      	movs	r3, #0
 8011984:	60a3      	str	r3, [r4, #8]
 8011986:	6963      	ldr	r3, [r4, #20]
 8011988:	425b      	negs	r3, r3
 801198a:	61a3      	str	r3, [r4, #24]
 801198c:	6923      	ldr	r3, [r4, #16]
 801198e:	b943      	cbnz	r3, 80119a2 <__swsetup_r+0xc6>
 8011990:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011994:	d1ba      	bne.n	801190c <__swsetup_r+0x30>
 8011996:	bd70      	pop	{r4, r5, r6, pc}
 8011998:	0781      	lsls	r1, r0, #30
 801199a:	bf58      	it	pl
 801199c:	6963      	ldrpl	r3, [r4, #20]
 801199e:	60a3      	str	r3, [r4, #8]
 80119a0:	e7f4      	b.n	801198c <__swsetup_r+0xb0>
 80119a2:	2000      	movs	r0, #0
 80119a4:	e7f7      	b.n	8011996 <__swsetup_r+0xba>
 80119a6:	bf00      	nop
 80119a8:	2000002c 	.word	0x2000002c
 80119ac:	08015150 	.word	0x08015150
 80119b0:	08015170 	.word	0x08015170
 80119b4:	08015130 	.word	0x08015130

080119b8 <abort>:
 80119b8:	b508      	push	{r3, lr}
 80119ba:	2006      	movs	r0, #6
 80119bc:	f000 f994 	bl	8011ce8 <raise>
 80119c0:	2001      	movs	r0, #1
 80119c2:	f7ef f895 	bl	8000af0 <_exit>
	...

080119c8 <_close_r>:
 80119c8:	b538      	push	{r3, r4, r5, lr}
 80119ca:	4d06      	ldr	r5, [pc, #24]	; (80119e4 <_close_r+0x1c>)
 80119cc:	2300      	movs	r3, #0
 80119ce:	4604      	mov	r4, r0
 80119d0:	4608      	mov	r0, r1
 80119d2:	602b      	str	r3, [r5, #0]
 80119d4:	f7ef f8cf 	bl	8000b76 <_close>
 80119d8:	1c43      	adds	r3, r0, #1
 80119da:	d102      	bne.n	80119e2 <_close_r+0x1a>
 80119dc:	682b      	ldr	r3, [r5, #0]
 80119de:	b103      	cbz	r3, 80119e2 <_close_r+0x1a>
 80119e0:	6023      	str	r3, [r4, #0]
 80119e2:	bd38      	pop	{r3, r4, r5, pc}
 80119e4:	20008848 	.word	0x20008848

080119e8 <__sflush_r>:
 80119e8:	898a      	ldrh	r2, [r1, #12]
 80119ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119ee:	4605      	mov	r5, r0
 80119f0:	0710      	lsls	r0, r2, #28
 80119f2:	460c      	mov	r4, r1
 80119f4:	d458      	bmi.n	8011aa8 <__sflush_r+0xc0>
 80119f6:	684b      	ldr	r3, [r1, #4]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	dc05      	bgt.n	8011a08 <__sflush_r+0x20>
 80119fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	dc02      	bgt.n	8011a08 <__sflush_r+0x20>
 8011a02:	2000      	movs	r0, #0
 8011a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a0a:	2e00      	cmp	r6, #0
 8011a0c:	d0f9      	beq.n	8011a02 <__sflush_r+0x1a>
 8011a0e:	2300      	movs	r3, #0
 8011a10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011a14:	682f      	ldr	r7, [r5, #0]
 8011a16:	602b      	str	r3, [r5, #0]
 8011a18:	d032      	beq.n	8011a80 <__sflush_r+0x98>
 8011a1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011a1c:	89a3      	ldrh	r3, [r4, #12]
 8011a1e:	075a      	lsls	r2, r3, #29
 8011a20:	d505      	bpl.n	8011a2e <__sflush_r+0x46>
 8011a22:	6863      	ldr	r3, [r4, #4]
 8011a24:	1ac0      	subs	r0, r0, r3
 8011a26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011a28:	b10b      	cbz	r3, 8011a2e <__sflush_r+0x46>
 8011a2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011a2c:	1ac0      	subs	r0, r0, r3
 8011a2e:	2300      	movs	r3, #0
 8011a30:	4602      	mov	r2, r0
 8011a32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a34:	6a21      	ldr	r1, [r4, #32]
 8011a36:	4628      	mov	r0, r5
 8011a38:	47b0      	blx	r6
 8011a3a:	1c43      	adds	r3, r0, #1
 8011a3c:	89a3      	ldrh	r3, [r4, #12]
 8011a3e:	d106      	bne.n	8011a4e <__sflush_r+0x66>
 8011a40:	6829      	ldr	r1, [r5, #0]
 8011a42:	291d      	cmp	r1, #29
 8011a44:	d82c      	bhi.n	8011aa0 <__sflush_r+0xb8>
 8011a46:	4a2a      	ldr	r2, [pc, #168]	; (8011af0 <__sflush_r+0x108>)
 8011a48:	40ca      	lsrs	r2, r1
 8011a4a:	07d6      	lsls	r6, r2, #31
 8011a4c:	d528      	bpl.n	8011aa0 <__sflush_r+0xb8>
 8011a4e:	2200      	movs	r2, #0
 8011a50:	6062      	str	r2, [r4, #4]
 8011a52:	04d9      	lsls	r1, r3, #19
 8011a54:	6922      	ldr	r2, [r4, #16]
 8011a56:	6022      	str	r2, [r4, #0]
 8011a58:	d504      	bpl.n	8011a64 <__sflush_r+0x7c>
 8011a5a:	1c42      	adds	r2, r0, #1
 8011a5c:	d101      	bne.n	8011a62 <__sflush_r+0x7a>
 8011a5e:	682b      	ldr	r3, [r5, #0]
 8011a60:	b903      	cbnz	r3, 8011a64 <__sflush_r+0x7c>
 8011a62:	6560      	str	r0, [r4, #84]	; 0x54
 8011a64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a66:	602f      	str	r7, [r5, #0]
 8011a68:	2900      	cmp	r1, #0
 8011a6a:	d0ca      	beq.n	8011a02 <__sflush_r+0x1a>
 8011a6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a70:	4299      	cmp	r1, r3
 8011a72:	d002      	beq.n	8011a7a <__sflush_r+0x92>
 8011a74:	4628      	mov	r0, r5
 8011a76:	f7ff faab 	bl	8010fd0 <_free_r>
 8011a7a:	2000      	movs	r0, #0
 8011a7c:	6360      	str	r0, [r4, #52]	; 0x34
 8011a7e:	e7c1      	b.n	8011a04 <__sflush_r+0x1c>
 8011a80:	6a21      	ldr	r1, [r4, #32]
 8011a82:	2301      	movs	r3, #1
 8011a84:	4628      	mov	r0, r5
 8011a86:	47b0      	blx	r6
 8011a88:	1c41      	adds	r1, r0, #1
 8011a8a:	d1c7      	bne.n	8011a1c <__sflush_r+0x34>
 8011a8c:	682b      	ldr	r3, [r5, #0]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d0c4      	beq.n	8011a1c <__sflush_r+0x34>
 8011a92:	2b1d      	cmp	r3, #29
 8011a94:	d001      	beq.n	8011a9a <__sflush_r+0xb2>
 8011a96:	2b16      	cmp	r3, #22
 8011a98:	d101      	bne.n	8011a9e <__sflush_r+0xb6>
 8011a9a:	602f      	str	r7, [r5, #0]
 8011a9c:	e7b1      	b.n	8011a02 <__sflush_r+0x1a>
 8011a9e:	89a3      	ldrh	r3, [r4, #12]
 8011aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011aa4:	81a3      	strh	r3, [r4, #12]
 8011aa6:	e7ad      	b.n	8011a04 <__sflush_r+0x1c>
 8011aa8:	690f      	ldr	r7, [r1, #16]
 8011aaa:	2f00      	cmp	r7, #0
 8011aac:	d0a9      	beq.n	8011a02 <__sflush_r+0x1a>
 8011aae:	0793      	lsls	r3, r2, #30
 8011ab0:	680e      	ldr	r6, [r1, #0]
 8011ab2:	bf08      	it	eq
 8011ab4:	694b      	ldreq	r3, [r1, #20]
 8011ab6:	600f      	str	r7, [r1, #0]
 8011ab8:	bf18      	it	ne
 8011aba:	2300      	movne	r3, #0
 8011abc:	eba6 0807 	sub.w	r8, r6, r7
 8011ac0:	608b      	str	r3, [r1, #8]
 8011ac2:	f1b8 0f00 	cmp.w	r8, #0
 8011ac6:	dd9c      	ble.n	8011a02 <__sflush_r+0x1a>
 8011ac8:	6a21      	ldr	r1, [r4, #32]
 8011aca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011acc:	4643      	mov	r3, r8
 8011ace:	463a      	mov	r2, r7
 8011ad0:	4628      	mov	r0, r5
 8011ad2:	47b0      	blx	r6
 8011ad4:	2800      	cmp	r0, #0
 8011ad6:	dc06      	bgt.n	8011ae6 <__sflush_r+0xfe>
 8011ad8:	89a3      	ldrh	r3, [r4, #12]
 8011ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ade:	81a3      	strh	r3, [r4, #12]
 8011ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ae4:	e78e      	b.n	8011a04 <__sflush_r+0x1c>
 8011ae6:	4407      	add	r7, r0
 8011ae8:	eba8 0800 	sub.w	r8, r8, r0
 8011aec:	e7e9      	b.n	8011ac2 <__sflush_r+0xda>
 8011aee:	bf00      	nop
 8011af0:	20400001 	.word	0x20400001

08011af4 <_fflush_r>:
 8011af4:	b538      	push	{r3, r4, r5, lr}
 8011af6:	690b      	ldr	r3, [r1, #16]
 8011af8:	4605      	mov	r5, r0
 8011afa:	460c      	mov	r4, r1
 8011afc:	b913      	cbnz	r3, 8011b04 <_fflush_r+0x10>
 8011afe:	2500      	movs	r5, #0
 8011b00:	4628      	mov	r0, r5
 8011b02:	bd38      	pop	{r3, r4, r5, pc}
 8011b04:	b118      	cbz	r0, 8011b0e <_fflush_r+0x1a>
 8011b06:	6983      	ldr	r3, [r0, #24]
 8011b08:	b90b      	cbnz	r3, 8011b0e <_fflush_r+0x1a>
 8011b0a:	f7ff f9a7 	bl	8010e5c <__sinit>
 8011b0e:	4b14      	ldr	r3, [pc, #80]	; (8011b60 <_fflush_r+0x6c>)
 8011b10:	429c      	cmp	r4, r3
 8011b12:	d11b      	bne.n	8011b4c <_fflush_r+0x58>
 8011b14:	686c      	ldr	r4, [r5, #4]
 8011b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d0ef      	beq.n	8011afe <_fflush_r+0xa>
 8011b1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011b20:	07d0      	lsls	r0, r2, #31
 8011b22:	d404      	bmi.n	8011b2e <_fflush_r+0x3a>
 8011b24:	0599      	lsls	r1, r3, #22
 8011b26:	d402      	bmi.n	8011b2e <_fflush_r+0x3a>
 8011b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b2a:	f7ff fa47 	bl	8010fbc <__retarget_lock_acquire_recursive>
 8011b2e:	4628      	mov	r0, r5
 8011b30:	4621      	mov	r1, r4
 8011b32:	f7ff ff59 	bl	80119e8 <__sflush_r>
 8011b36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b38:	07da      	lsls	r2, r3, #31
 8011b3a:	4605      	mov	r5, r0
 8011b3c:	d4e0      	bmi.n	8011b00 <_fflush_r+0xc>
 8011b3e:	89a3      	ldrh	r3, [r4, #12]
 8011b40:	059b      	lsls	r3, r3, #22
 8011b42:	d4dd      	bmi.n	8011b00 <_fflush_r+0xc>
 8011b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b46:	f7ff fa3a 	bl	8010fbe <__retarget_lock_release_recursive>
 8011b4a:	e7d9      	b.n	8011b00 <_fflush_r+0xc>
 8011b4c:	4b05      	ldr	r3, [pc, #20]	; (8011b64 <_fflush_r+0x70>)
 8011b4e:	429c      	cmp	r4, r3
 8011b50:	d101      	bne.n	8011b56 <_fflush_r+0x62>
 8011b52:	68ac      	ldr	r4, [r5, #8]
 8011b54:	e7df      	b.n	8011b16 <_fflush_r+0x22>
 8011b56:	4b04      	ldr	r3, [pc, #16]	; (8011b68 <_fflush_r+0x74>)
 8011b58:	429c      	cmp	r4, r3
 8011b5a:	bf08      	it	eq
 8011b5c:	68ec      	ldreq	r4, [r5, #12]
 8011b5e:	e7da      	b.n	8011b16 <_fflush_r+0x22>
 8011b60:	08015150 	.word	0x08015150
 8011b64:	08015170 	.word	0x08015170
 8011b68:	08015130 	.word	0x08015130

08011b6c <_lseek_r>:
 8011b6c:	b538      	push	{r3, r4, r5, lr}
 8011b6e:	4d07      	ldr	r5, [pc, #28]	; (8011b8c <_lseek_r+0x20>)
 8011b70:	4604      	mov	r4, r0
 8011b72:	4608      	mov	r0, r1
 8011b74:	4611      	mov	r1, r2
 8011b76:	2200      	movs	r2, #0
 8011b78:	602a      	str	r2, [r5, #0]
 8011b7a:	461a      	mov	r2, r3
 8011b7c:	f7ef f822 	bl	8000bc4 <_lseek>
 8011b80:	1c43      	adds	r3, r0, #1
 8011b82:	d102      	bne.n	8011b8a <_lseek_r+0x1e>
 8011b84:	682b      	ldr	r3, [r5, #0]
 8011b86:	b103      	cbz	r3, 8011b8a <_lseek_r+0x1e>
 8011b88:	6023      	str	r3, [r4, #0]
 8011b8a:	bd38      	pop	{r3, r4, r5, pc}
 8011b8c:	20008848 	.word	0x20008848

08011b90 <__swhatbuf_r>:
 8011b90:	b570      	push	{r4, r5, r6, lr}
 8011b92:	460e      	mov	r6, r1
 8011b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b98:	2900      	cmp	r1, #0
 8011b9a:	b096      	sub	sp, #88	; 0x58
 8011b9c:	4614      	mov	r4, r2
 8011b9e:	461d      	mov	r5, r3
 8011ba0:	da08      	bge.n	8011bb4 <__swhatbuf_r+0x24>
 8011ba2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	602a      	str	r2, [r5, #0]
 8011baa:	061a      	lsls	r2, r3, #24
 8011bac:	d410      	bmi.n	8011bd0 <__swhatbuf_r+0x40>
 8011bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011bb2:	e00e      	b.n	8011bd2 <__swhatbuf_r+0x42>
 8011bb4:	466a      	mov	r2, sp
 8011bb6:	f000 f8b3 	bl	8011d20 <_fstat_r>
 8011bba:	2800      	cmp	r0, #0
 8011bbc:	dbf1      	blt.n	8011ba2 <__swhatbuf_r+0x12>
 8011bbe:	9a01      	ldr	r2, [sp, #4]
 8011bc0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011bc4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011bc8:	425a      	negs	r2, r3
 8011bca:	415a      	adcs	r2, r3
 8011bcc:	602a      	str	r2, [r5, #0]
 8011bce:	e7ee      	b.n	8011bae <__swhatbuf_r+0x1e>
 8011bd0:	2340      	movs	r3, #64	; 0x40
 8011bd2:	2000      	movs	r0, #0
 8011bd4:	6023      	str	r3, [r4, #0]
 8011bd6:	b016      	add	sp, #88	; 0x58
 8011bd8:	bd70      	pop	{r4, r5, r6, pc}
	...

08011bdc <__smakebuf_r>:
 8011bdc:	898b      	ldrh	r3, [r1, #12]
 8011bde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011be0:	079d      	lsls	r5, r3, #30
 8011be2:	4606      	mov	r6, r0
 8011be4:	460c      	mov	r4, r1
 8011be6:	d507      	bpl.n	8011bf8 <__smakebuf_r+0x1c>
 8011be8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011bec:	6023      	str	r3, [r4, #0]
 8011bee:	6123      	str	r3, [r4, #16]
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	6163      	str	r3, [r4, #20]
 8011bf4:	b002      	add	sp, #8
 8011bf6:	bd70      	pop	{r4, r5, r6, pc}
 8011bf8:	ab01      	add	r3, sp, #4
 8011bfa:	466a      	mov	r2, sp
 8011bfc:	f7ff ffc8 	bl	8011b90 <__swhatbuf_r>
 8011c00:	9900      	ldr	r1, [sp, #0]
 8011c02:	4605      	mov	r5, r0
 8011c04:	4630      	mov	r0, r6
 8011c06:	f7ff fa4f 	bl	80110a8 <_malloc_r>
 8011c0a:	b948      	cbnz	r0, 8011c20 <__smakebuf_r+0x44>
 8011c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c10:	059a      	lsls	r2, r3, #22
 8011c12:	d4ef      	bmi.n	8011bf4 <__smakebuf_r+0x18>
 8011c14:	f023 0303 	bic.w	r3, r3, #3
 8011c18:	f043 0302 	orr.w	r3, r3, #2
 8011c1c:	81a3      	strh	r3, [r4, #12]
 8011c1e:	e7e3      	b.n	8011be8 <__smakebuf_r+0xc>
 8011c20:	4b0d      	ldr	r3, [pc, #52]	; (8011c58 <__smakebuf_r+0x7c>)
 8011c22:	62b3      	str	r3, [r6, #40]	; 0x28
 8011c24:	89a3      	ldrh	r3, [r4, #12]
 8011c26:	6020      	str	r0, [r4, #0]
 8011c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c2c:	81a3      	strh	r3, [r4, #12]
 8011c2e:	9b00      	ldr	r3, [sp, #0]
 8011c30:	6163      	str	r3, [r4, #20]
 8011c32:	9b01      	ldr	r3, [sp, #4]
 8011c34:	6120      	str	r0, [r4, #16]
 8011c36:	b15b      	cbz	r3, 8011c50 <__smakebuf_r+0x74>
 8011c38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c3c:	4630      	mov	r0, r6
 8011c3e:	f000 f881 	bl	8011d44 <_isatty_r>
 8011c42:	b128      	cbz	r0, 8011c50 <__smakebuf_r+0x74>
 8011c44:	89a3      	ldrh	r3, [r4, #12]
 8011c46:	f023 0303 	bic.w	r3, r3, #3
 8011c4a:	f043 0301 	orr.w	r3, r3, #1
 8011c4e:	81a3      	strh	r3, [r4, #12]
 8011c50:	89a0      	ldrh	r0, [r4, #12]
 8011c52:	4305      	orrs	r5, r0
 8011c54:	81a5      	strh	r5, [r4, #12]
 8011c56:	e7cd      	b.n	8011bf4 <__smakebuf_r+0x18>
 8011c58:	08010df5 	.word	0x08010df5

08011c5c <__malloc_lock>:
 8011c5c:	4801      	ldr	r0, [pc, #4]	; (8011c64 <__malloc_lock+0x8>)
 8011c5e:	f7ff b9ad 	b.w	8010fbc <__retarget_lock_acquire_recursive>
 8011c62:	bf00      	nop
 8011c64:	2000884c 	.word	0x2000884c

08011c68 <__malloc_unlock>:
 8011c68:	4801      	ldr	r0, [pc, #4]	; (8011c70 <__malloc_unlock+0x8>)
 8011c6a:	f7ff b9a8 	b.w	8010fbe <__retarget_lock_release_recursive>
 8011c6e:	bf00      	nop
 8011c70:	2000884c 	.word	0x2000884c

08011c74 <_read_r>:
 8011c74:	b538      	push	{r3, r4, r5, lr}
 8011c76:	4d07      	ldr	r5, [pc, #28]	; (8011c94 <_read_r+0x20>)
 8011c78:	4604      	mov	r4, r0
 8011c7a:	4608      	mov	r0, r1
 8011c7c:	4611      	mov	r1, r2
 8011c7e:	2200      	movs	r2, #0
 8011c80:	602a      	str	r2, [r5, #0]
 8011c82:	461a      	mov	r2, r3
 8011c84:	f7ee ff3e 	bl	8000b04 <_read>
 8011c88:	1c43      	adds	r3, r0, #1
 8011c8a:	d102      	bne.n	8011c92 <_read_r+0x1e>
 8011c8c:	682b      	ldr	r3, [r5, #0]
 8011c8e:	b103      	cbz	r3, 8011c92 <_read_r+0x1e>
 8011c90:	6023      	str	r3, [r4, #0]
 8011c92:	bd38      	pop	{r3, r4, r5, pc}
 8011c94:	20008848 	.word	0x20008848

08011c98 <_raise_r>:
 8011c98:	291f      	cmp	r1, #31
 8011c9a:	b538      	push	{r3, r4, r5, lr}
 8011c9c:	4604      	mov	r4, r0
 8011c9e:	460d      	mov	r5, r1
 8011ca0:	d904      	bls.n	8011cac <_raise_r+0x14>
 8011ca2:	2316      	movs	r3, #22
 8011ca4:	6003      	str	r3, [r0, #0]
 8011ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8011caa:	bd38      	pop	{r3, r4, r5, pc}
 8011cac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011cae:	b112      	cbz	r2, 8011cb6 <_raise_r+0x1e>
 8011cb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011cb4:	b94b      	cbnz	r3, 8011cca <_raise_r+0x32>
 8011cb6:	4620      	mov	r0, r4
 8011cb8:	f000 f830 	bl	8011d1c <_getpid_r>
 8011cbc:	462a      	mov	r2, r5
 8011cbe:	4601      	mov	r1, r0
 8011cc0:	4620      	mov	r0, r4
 8011cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cc6:	f000 b817 	b.w	8011cf8 <_kill_r>
 8011cca:	2b01      	cmp	r3, #1
 8011ccc:	d00a      	beq.n	8011ce4 <_raise_r+0x4c>
 8011cce:	1c59      	adds	r1, r3, #1
 8011cd0:	d103      	bne.n	8011cda <_raise_r+0x42>
 8011cd2:	2316      	movs	r3, #22
 8011cd4:	6003      	str	r3, [r0, #0]
 8011cd6:	2001      	movs	r0, #1
 8011cd8:	e7e7      	b.n	8011caa <_raise_r+0x12>
 8011cda:	2400      	movs	r4, #0
 8011cdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011ce0:	4628      	mov	r0, r5
 8011ce2:	4798      	blx	r3
 8011ce4:	2000      	movs	r0, #0
 8011ce6:	e7e0      	b.n	8011caa <_raise_r+0x12>

08011ce8 <raise>:
 8011ce8:	4b02      	ldr	r3, [pc, #8]	; (8011cf4 <raise+0xc>)
 8011cea:	4601      	mov	r1, r0
 8011cec:	6818      	ldr	r0, [r3, #0]
 8011cee:	f7ff bfd3 	b.w	8011c98 <_raise_r>
 8011cf2:	bf00      	nop
 8011cf4:	2000002c 	.word	0x2000002c

08011cf8 <_kill_r>:
 8011cf8:	b538      	push	{r3, r4, r5, lr}
 8011cfa:	4d07      	ldr	r5, [pc, #28]	; (8011d18 <_kill_r+0x20>)
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	4604      	mov	r4, r0
 8011d00:	4608      	mov	r0, r1
 8011d02:	4611      	mov	r1, r2
 8011d04:	602b      	str	r3, [r5, #0]
 8011d06:	f7ee fee1 	bl	8000acc <_kill>
 8011d0a:	1c43      	adds	r3, r0, #1
 8011d0c:	d102      	bne.n	8011d14 <_kill_r+0x1c>
 8011d0e:	682b      	ldr	r3, [r5, #0]
 8011d10:	b103      	cbz	r3, 8011d14 <_kill_r+0x1c>
 8011d12:	6023      	str	r3, [r4, #0]
 8011d14:	bd38      	pop	{r3, r4, r5, pc}
 8011d16:	bf00      	nop
 8011d18:	20008848 	.word	0x20008848

08011d1c <_getpid_r>:
 8011d1c:	f7ee bece 	b.w	8000abc <_getpid>

08011d20 <_fstat_r>:
 8011d20:	b538      	push	{r3, r4, r5, lr}
 8011d22:	4d07      	ldr	r5, [pc, #28]	; (8011d40 <_fstat_r+0x20>)
 8011d24:	2300      	movs	r3, #0
 8011d26:	4604      	mov	r4, r0
 8011d28:	4608      	mov	r0, r1
 8011d2a:	4611      	mov	r1, r2
 8011d2c:	602b      	str	r3, [r5, #0]
 8011d2e:	f7ee ff2e 	bl	8000b8e <_fstat>
 8011d32:	1c43      	adds	r3, r0, #1
 8011d34:	d102      	bne.n	8011d3c <_fstat_r+0x1c>
 8011d36:	682b      	ldr	r3, [r5, #0]
 8011d38:	b103      	cbz	r3, 8011d3c <_fstat_r+0x1c>
 8011d3a:	6023      	str	r3, [r4, #0]
 8011d3c:	bd38      	pop	{r3, r4, r5, pc}
 8011d3e:	bf00      	nop
 8011d40:	20008848 	.word	0x20008848

08011d44 <_isatty_r>:
 8011d44:	b538      	push	{r3, r4, r5, lr}
 8011d46:	4d06      	ldr	r5, [pc, #24]	; (8011d60 <_isatty_r+0x1c>)
 8011d48:	2300      	movs	r3, #0
 8011d4a:	4604      	mov	r4, r0
 8011d4c:	4608      	mov	r0, r1
 8011d4e:	602b      	str	r3, [r5, #0]
 8011d50:	f7ee ff2d 	bl	8000bae <_isatty>
 8011d54:	1c43      	adds	r3, r0, #1
 8011d56:	d102      	bne.n	8011d5e <_isatty_r+0x1a>
 8011d58:	682b      	ldr	r3, [r5, #0]
 8011d5a:	b103      	cbz	r3, 8011d5e <_isatty_r+0x1a>
 8011d5c:	6023      	str	r3, [r4, #0]
 8011d5e:	bd38      	pop	{r3, r4, r5, pc}
 8011d60:	20008848 	.word	0x20008848

08011d64 <_init>:
 8011d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d66:	bf00      	nop
 8011d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d6a:	bc08      	pop	{r3}
 8011d6c:	469e      	mov	lr, r3
 8011d6e:	4770      	bx	lr

08011d70 <_fini>:
 8011d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d72:	bf00      	nop
 8011d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d76:	bc08      	pop	{r3}
 8011d78:	469e      	mov	lr, r3
 8011d7a:	4770      	bx	lr
