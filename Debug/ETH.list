
ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e74  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003460  08012024  08012024  00022024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015484  08015484  000300e0  2**0
                  CONTENTS
  4 .ARM          00000008  08015484  08015484  00025484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801548c  0801548c  000300e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801548c  0801548c  0002548c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015490  08015490  00025490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08015494  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300e0  2**0
                  CONTENTS
 10 .bss          000087d4  200000e0  200000e0  000300e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200088b4  200088b4  000300e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f1ac  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005552  00000000  00000000  0004f2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d0  00000000  00000000  00054810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001520  00000000  00000000  00055de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030f89  00000000  00000000  00057300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000269c1  00000000  00000000  00088289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed4ad  00000000  00000000  000aec4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019c0f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000612c  00000000  00000000  0019c148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000e0 	.word	0x200000e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801200c 	.word	0x0801200c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000e4 	.word	0x200000e4
 80001ec:	0801200c 	.word	0x0801200c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <Continue>:
}

void SetRet(struct sock_filter *filter);

void Continue(struct sock_filter *filter)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
   _index++;
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <Continue+0x20>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	3301      	adds	r3, #1
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <Continue+0x20>)
 80005d6:	701a      	strb	r2, [r3, #0]
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	20000104 	.word	0x20000104

080005e8 <SetRet>:
         //{ BPF_JEQ, Continue, SetRet, 0x1BB},
         { BPF_RET, NULL, NULL, 0x00040000 }
};

void SetRet(struct sock_filter *filter)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
   _index = 10;
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <SetRet+0x1c>)
 80005f2:	220a      	movs	r2, #10
 80005f4:	701a      	strb	r2, [r3, #0]
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20000104 	.word	0x20000104

08000608 <jmp>:

void jmp(uint8_t *pdata, uint32_t k)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
   mypData = pdata;
 8000612:	4a0e      	ldr	r2, [pc, #56]	; (800064c <jmp+0x44>)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6013      	str	r3, [r2, #0]
   mypData += X + k;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <jmp+0x44>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <jmp+0x48>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4619      	mov	r1, r3
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	440b      	add	r3, r1
 8000626:	4413      	add	r3, r2
 8000628:	4a08      	ldr	r2, [pc, #32]	; (800064c <jmp+0x44>)
 800062a:	6013      	str	r3, [r2, #0]
   X = 0;
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <jmp+0x48>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
   _index++;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <jmp+0x4c>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	3301      	adds	r3, #1
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <jmp+0x4c>)
 800063c:	701a      	strb	r2, [r3, #0]
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000100 	.word	0x20000100
 8000650:	20000105 	.word	0x20000105
 8000654:	20000104 	.word	0x20000104

08000658 <ldxb>:


void ldxb(uint32_t k, uint8_t *pdata)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
   mypData = pdata;
 8000662:	4a0c      	ldr	r2, [pc, #48]	; (8000694 <ldxb+0x3c>)
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	6013      	str	r3, [r2, #0]
   mypData += k;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <ldxb+0x3c>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4413      	add	r3, r2
 8000670:	4a08      	ldr	r2, [pc, #32]	; (8000694 <ldxb+0x3c>)
 8000672:	6013      	str	r3, [r2, #0]
   X = 4*(*mypData & 0x0F);
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <ldxb+0x3c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	f003 030f 	and.w	r3, r3, #15
 800067e:	b2db      	uxtb	r3, r3
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <ldxb+0x40>)
 8000686:	701a      	strb	r2, [r3, #0]
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	20000100 	.word	0x20000100
 8000698:	20000105 	.word	0x20000105

0800069c <getKSize>:

uint8_t getKSize(uint32_t k)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
   uint8_t size = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	73fb      	strb	r3, [r7, #15]

   while (k != 0)
 80006a8:	e005      	b.n	80006b6 <getKSize+0x1a>
   {
      size++;
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	3301      	adds	r3, #1
 80006ae:	73fb      	strb	r3, [r7, #15]
      k = k >> 8;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	0a1b      	lsrs	r3, r3, #8
 80006b4:	607b      	str	r3, [r7, #4]
   while (k != 0)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1f6      	bne.n	80006aa <getKSize+0xe>
   }

   return size;
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
	...

080006cc <jset>:

void jset(uint32_t k, struct sock_filter *filter)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
   uint8_t kSize = getKSize(k);
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff ffe0 	bl	800069c <getKSize>
 80006dc:	4603      	mov	r3, r0
 80006de:	72bb      	strb	r3, [r7, #10]
   uint32_t actualData = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]

   for (uint8_t i = 0; i < kSize; i++)
 80006e4:	2300      	movs	r3, #0
 80006e6:	72fb      	strb	r3, [r7, #11]
 80006e8:	e011      	b.n	800070e <jset+0x42>
   {
      actualData = actualData << 8;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	021b      	lsls	r3, r3, #8
 80006ee:	60fb      	str	r3, [r7, #12]
      actualData += *mypData;
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <jset+0x80>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	461a      	mov	r2, r3
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	60fb      	str	r3, [r7, #12]
      mypData++;
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <jset+0x80>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	3301      	adds	r3, #1
 8000704:	4a11      	ldr	r2, [pc, #68]	; (800074c <jset+0x80>)
 8000706:	6013      	str	r3, [r2, #0]
   for (uint8_t i = 0; i < kSize; i++)
 8000708:	7afb      	ldrb	r3, [r7, #11]
 800070a:	3301      	adds	r3, #1
 800070c:	72fb      	strb	r3, [r7, #11]
 800070e:	7afa      	ldrb	r2, [r7, #11]
 8000710:	7abb      	ldrb	r3, [r7, #10]
 8000712:	429a      	cmp	r2, r3
 8000714:	d3e9      	bcc.n	80006ea <jset+0x1e>
   }

   if ((actualData & 0x1FFF) == 0)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800071c:	2b00      	cmp	r3, #0
 800071e:	d108      	bne.n	8000732 <jset+0x66>
      filter[_index].functionTrue(filter);
 8000720:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <jset+0x84>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	011b      	lsls	r3, r3, #4
 8000726:	683a      	ldr	r2, [r7, #0]
 8000728:	4413      	add	r3, r2
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	6838      	ldr	r0, [r7, #0]
 800072e:	4798      	blx	r3
   else
      filter[_index].functionFalse(filter);
}
 8000730:	e007      	b.n	8000742 <jset+0x76>
      filter[_index].functionFalse(filter);
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <jset+0x84>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	011b      	lsls	r3, r3, #4
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	4413      	add	r3, r2
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	6838      	ldr	r0, [r7, #0]
 8000740:	4798      	blx	r3
}
 8000742:	bf00      	nop
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000100 	.word	0x20000100
 8000750:	20000104 	.word	0x20000104

08000754 <jeq>:

void jeq(uint32_t k, struct sock_filter *filter)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
   uint8_t kSize = getKSize(k);
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f7ff ff9c 	bl	800069c <getKSize>
 8000764:	4603      	mov	r3, r0
 8000766:	72bb      	strb	r3, [r7, #10]
   uint32_t actualData = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]

   for (uint8_t i = 0; i < kSize; i++)
 800076c:	2300      	movs	r3, #0
 800076e:	72fb      	strb	r3, [r7, #11]
 8000770:	e011      	b.n	8000796 <jeq+0x42>
   {
      actualData = actualData << 8;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	60fb      	str	r3, [r7, #12]
      actualData += *mypData;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <jeq+0x7c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	461a      	mov	r2, r3
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	4413      	add	r3, r2
 8000784:	60fb      	str	r3, [r7, #12]
      mypData++;
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <jeq+0x7c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	4a10      	ldr	r2, [pc, #64]	; (80007d0 <jeq+0x7c>)
 800078e:	6013      	str	r3, [r2, #0]
   for (uint8_t i = 0; i < kSize; i++)
 8000790:	7afb      	ldrb	r3, [r7, #11]
 8000792:	3301      	adds	r3, #1
 8000794:	72fb      	strb	r3, [r7, #11]
 8000796:	7afa      	ldrb	r2, [r7, #11]
 8000798:	7abb      	ldrb	r3, [r7, #10]
 800079a:	429a      	cmp	r2, r3
 800079c:	d3e9      	bcc.n	8000772 <jeq+0x1e>
   }

   if (actualData == k)
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d108      	bne.n	80007b8 <jeq+0x64>
      filter[_index].functionTrue(filter);
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <jeq+0x80>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	011b      	lsls	r3, r3, #4
 80007ac:	683a      	ldr	r2, [r7, #0]
 80007ae:	4413      	add	r3, r2
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	6838      	ldr	r0, [r7, #0]
 80007b4:	4798      	blx	r3
   else
      filter[_index].functionFalse(filter);
}
 80007b6:	e007      	b.n	80007c8 <jeq+0x74>
      filter[_index].functionFalse(filter);
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <jeq+0x80>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	011b      	lsls	r3, r3, #4
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	4413      	add	r3, r2
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	6838      	ldr	r0, [r7, #0]
 80007c6:	4798      	blx	r3
}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000100 	.word	0x20000100
 80007d4:	20000104 	.word	0x20000104

080007d8 <Filter>:

void Filter(uint8_t *pdata, struct sock_filter *filter)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
   uint16_t size = 10;
 80007e2:	230a      	movs	r3, #10
 80007e4:	81fb      	strh	r3, [r7, #14]
   while (_index < size)
 80007e6:	e050      	b.n	800088a <Filter+0xb2>
   {
      switch(filter[_index].code)
 80007e8:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <Filter+0xcc>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	011b      	lsls	r3, r3, #4
 80007ee:	683a      	ldr	r2, [r7, #0]
 80007f0:	4413      	add	r3, r2
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	2b80      	cmp	r3, #128	; 0x80
 80007f6:	d03a      	beq.n	800086e <Filter+0x96>
 80007f8:	2b80      	cmp	r3, #128	; 0x80
 80007fa:	dc42      	bgt.n	8000882 <Filter+0xaa>
 80007fc:	2b50      	cmp	r3, #80	; 0x50
 80007fe:	d02b      	beq.n	8000858 <Filter+0x80>
 8000800:	2b50      	cmp	r3, #80	; 0x50
 8000802:	dc3e      	bgt.n	8000882 <Filter+0xaa>
 8000804:	2b40      	cmp	r3, #64	; 0x40
 8000806:	d01c      	beq.n	8000842 <Filter+0x6a>
 8000808:	2b40      	cmp	r3, #64	; 0x40
 800080a:	dc3a      	bgt.n	8000882 <Filter+0xaa>
 800080c:	2b00      	cmp	r3, #0
 800080e:	d002      	beq.n	8000816 <Filter+0x3e>
 8000810:	2b10      	cmp	r3, #16
 8000812:	d00b      	beq.n	800082c <Filter+0x54>
 8000814:	e035      	b.n	8000882 <Filter+0xaa>
      {
      case BPF_JMP:
         jmp(pdata, filter[_index].k);
 8000816:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <Filter+0xcc>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	011b      	lsls	r3, r3, #4
 800081c:	683a      	ldr	r2, [r7, #0]
 800081e:	4413      	add	r3, r2
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	4619      	mov	r1, r3
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff feef 	bl	8000608 <jmp>
         break;
 800082a:	e02e      	b.n	800088a <Filter+0xb2>

      case BPF_JEQ:
         jeq(filter[_index].k, filter);
 800082c:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <Filter+0xcc>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	011b      	lsls	r3, r3, #4
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	4413      	add	r3, r2
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	6839      	ldr	r1, [r7, #0]
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff8a 	bl	8000754 <jeq>
         break;
 8000840:	e023      	b.n	800088a <Filter+0xb2>

      case BPF_JSET:
         jset(filter[_index].k, filter);
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <Filter+0xcc>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	011b      	lsls	r3, r3, #4
 8000848:	683a      	ldr	r2, [r7, #0]
 800084a:	4413      	add	r3, r2
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	6839      	ldr	r1, [r7, #0]
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff3b 	bl	80006cc <jset>
         break;
 8000856:	e018      	b.n	800088a <Filter+0xb2>

      case BPF_LDXB:
         ldxb(filter[_index].k, pdata);
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <Filter+0xcc>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	011b      	lsls	r3, r3, #4
 800085e:	683a      	ldr	r2, [r7, #0]
 8000860:	4413      	add	r3, r2
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	6879      	ldr	r1, [r7, #4]
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fef6 	bl	8000658 <ldxb>
         break;
 800086c:	e00d      	b.n	800088a <Filter+0xb2>

      case BPF_RET:
         okCounter++;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <Filter+0xd0>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	b29a      	uxth	r2, r3
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <Filter+0xd0>)
 8000878:	801a      	strh	r2, [r3, #0]
         _index = 10;
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <Filter+0xcc>)
 800087c:	220a      	movs	r2, #10
 800087e:	701a      	strb	r2, [r3, #0]
         break;
 8000880:	e003      	b.n	800088a <Filter+0xb2>

      default:
         _index = 10;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <Filter+0xcc>)
 8000884:	220a      	movs	r2, #10
 8000886:	701a      	strb	r2, [r3, #0]
         break;
 8000888:	bf00      	nop
   while (_index < size)
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <Filter+0xcc>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b29b      	uxth	r3, r3
 8000890:	89fa      	ldrh	r2, [r7, #14]
 8000892:	429a      	cmp	r2, r3
 8000894:	d8a8      	bhi.n	80007e8 <Filter+0x10>
      }
   }
   _index = 0;
 8000896:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <Filter+0xcc>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000104 	.word	0x20000104
 80008a8:	200000fc 	.word	0x200000fc

080008ac <LedCGIHandler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*CGI handler for LEDs*/
const char* LedCGIHandler(int iIndex, int iNumParams, char* pcParam[], char* pcValue[])
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
 80008b8:	603b      	str	r3, [r7, #0]
   uint32_t i = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]

   if (iIndex == 0)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d146      	bne.n	8000952 <LedCGIHandler+0xa6>
   {
     LED2_OFF;
 80008c4:	4b25      	ldr	r3, [pc, #148]	; (800095c <LedCGIHandler+0xb0>)
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	4a24      	ldr	r2, [pc, #144]	; (800095c <LedCGIHandler+0xb0>)
 80008ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80008ce:	6153      	str	r3, [r2, #20]
     LED3_OFF;
 80008d0:	4b22      	ldr	r3, [pc, #136]	; (800095c <LedCGIHandler+0xb0>)
 80008d2:	695b      	ldr	r3, [r3, #20]
 80008d4:	4a21      	ldr	r2, [pc, #132]	; (800095c <LedCGIHandler+0xb0>)
 80008d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008da:	6153      	str	r3, [r2, #20]

      for (i = 0; i < iNumParams; i++)
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	e033      	b.n	800094a <LedCGIHandler+0x9e>
      {
         if (strcmp(pcParam[i], "led") == 0)
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	491c      	ldr	r1, [pc, #112]	; (8000960 <LedCGIHandler+0xb4>)
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fc7e 	bl	80001f0 <strcmp>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d124      	bne.n	8000944 <LedCGIHandler+0x98>
         {
            if (strcmp(pcValue[i], "1") == 0)
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	4413      	add	r3, r2
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4917      	ldr	r1, [pc, #92]	; (8000964 <LedCGIHandler+0xb8>)
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fc72 	bl	80001f0 <strcmp>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d106      	bne.n	8000920 <LedCGIHandler+0x74>
               LED2_ON;
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <LedCGIHandler+0xb0>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	4a11      	ldr	r2, [pc, #68]	; (800095c <LedCGIHandler+0xb0>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091c:	6153      	str	r3, [r2, #20]
 800091e:	e011      	b.n	8000944 <LedCGIHandler+0x98>

            else if (strcmp(pcValue[i], "2") == 0)
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	683a      	ldr	r2, [r7, #0]
 8000926:	4413      	add	r3, r2
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	490f      	ldr	r1, [pc, #60]	; (8000968 <LedCGIHandler+0xbc>)
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fc5f 	bl	80001f0 <strcmp>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d105      	bne.n	8000944 <LedCGIHandler+0x98>
               LED3_ON;
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <LedCGIHandler+0xb0>)
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <LedCGIHandler+0xb0>)
 800093e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000942:	6153      	str	r3, [r2, #20]
      for (i = 0; i < iNumParams; i++)
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	3301      	adds	r3, #1
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	429a      	cmp	r2, r3
 8000950:	d3c7      	bcc.n	80008e2 <LedCGIHandler+0x36>
         }
      }
   }
   return "/index.html";
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <LedCGIHandler+0xc0>)
}
 8000954:	4618      	mov	r0, r3
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40020400 	.word	0x40020400
 8000960:	08012040 	.word	0x08012040
 8000964:	08012044 	.word	0x08012044
 8000968:	08012048 	.word	0x08012048
 800096c:	0801204c 	.word	0x0801204c

08000970 <myCGIInit>:

void myCGIInit(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
   theCGITable[0] = LedCGI;
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <myCGIInit+0x1c>)
 8000976:	4a06      	ldr	r2, [pc, #24]	; (8000990 <myCGIInit+0x20>)
 8000978:	e892 0003 	ldmia.w	r2, {r0, r1}
 800097c:	e883 0003 	stmia.w	r3, {r0, r1}

   http_set_cgi_handlers(theCGITable, 1);
 8000980:	2101      	movs	r1, #1
 8000982:	4802      	ldr	r0, [pc, #8]	; (800098c <myCGIInit+0x1c>)
 8000984:	f005 fddc 	bl	8006540 <http_set_cgi_handlers>
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	2000014c 	.word	0x2000014c
 8000990:	08014d64 	.word	0x08014d64

08000994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000998:	f000 fc6a 	bl	8001270 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099c:	f000 f80e 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a0:	f000 f8a0 	bl	8000ae4 <MX_GPIO_Init>
  MX_LWIP_Init();
 80009a4:	f003 fd4a 	bl	800443c <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  MX_USART3_UART_Init();
 80009a8:	f000 f872 	bl	8000a90 <MX_USART3_UART_Init>
  httpd_init();
 80009ac:	f005 fda8 	bl	8006500 <httpd_init>
  myCGIInit();
 80009b0:	f7ff ffde 	bl	8000970 <myCGIInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
     MX_LWIP_Process();
 80009b4:	f003 fe8e 	bl	80046d4 <MX_LWIP_Process>
 80009b8:	e7fc      	b.n	80009b4 <main+0x20>
	...

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b094      	sub	sp, #80	; 0x50
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 0320 	add.w	r3, r7, #32
 80009c6:	2230      	movs	r2, #48	; 0x30
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f010 faa4 	bl	8010f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <SystemClock_Config+0xcc>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	4a27      	ldr	r2, [pc, #156]	; (8000a88 <SystemClock_Config+0xcc>)
 80009ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ee:	6413      	str	r3, [r2, #64]	; 0x40
 80009f0:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <SystemClock_Config+0xcc>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009fc:	2300      	movs	r3, #0
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <SystemClock_Config+0xd0>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <SystemClock_Config+0xd0>)
 8000a06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <SystemClock_Config+0xd0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a1c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a22:	2302      	movs	r3, #2
 8000a24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a30:	23a8      	movs	r3, #168	; 0xa8
 8000a32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3c:	f107 0320 	add.w	r3, r7, #32
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 f90b 	bl	8002c5c <HAL_RCC_OscConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a4c:	f000 f8f8 	bl	8000c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a50:	230f      	movs	r3, #15
 8000a52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a54:	2302      	movs	r3, #2
 8000a56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2105      	movs	r1, #5
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f002 fb6c 	bl	800314c <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a7a:	f000 f8e1 	bl	8000c40 <Error_Handler>
  }
}
 8000a7e:	bf00      	nop
 8000a80:	3750      	adds	r7, #80	; 0x50
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40007000 	.word	0x40007000

08000a90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_USART3_UART_Init+0x4c>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <MX_USART3_UART_Init+0x50>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <MX_USART3_UART_Init+0x4c>)
 8000a9c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8000aa0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_USART3_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_USART3_UART_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_USART3_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_USART3_UART_Init+0x4c>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <MX_USART3_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_USART3_UART_Init+0x4c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_USART3_UART_Init+0x4c>)
 8000ac8:	f002 fd60 	bl	800358c <HAL_UART_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ad2:	f000 f8b5 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000108 	.word	0x20000108
 8000ae0:	40004800 	.word	0x40004800

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08c      	sub	sp, #48	; 0x30
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
 8000afe:	4b4c      	ldr	r3, [pc, #304]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a4b      	ldr	r2, [pc, #300]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b04:	f043 0304 	orr.w	r3, r3, #4
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b49      	ldr	r3, [pc, #292]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	61bb      	str	r3, [r7, #24]
 8000b14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	4b45      	ldr	r3, [pc, #276]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a44      	ldr	r2, [pc, #272]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b42      	ldr	r3, [pc, #264]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b3e      	ldr	r3, [pc, #248]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a3d      	ldr	r2, [pc, #244]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b3b      	ldr	r3, [pc, #236]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b37      	ldr	r3, [pc, #220]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a36      	ldr	r2, [pc, #216]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b58:	f043 0302 	orr.w	r3, r3, #2
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b34      	ldr	r3, [pc, #208]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	4b30      	ldr	r3, [pc, #192]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a2f      	ldr	r2, [pc, #188]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b74:	f043 0308 	orr.w	r3, r3, #8
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0308 	and.w	r3, r3, #8
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4b29      	ldr	r3, [pc, #164]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a28      	ldr	r2, [pc, #160]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b26      	ldr	r3, [pc, #152]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ba8:	4822      	ldr	r0, [pc, #136]	; (8000c34 <MX_GPIO_Init+0x150>)
 8000baa:	f002 f83d 	bl	8002c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2140      	movs	r1, #64	; 0x40
 8000bb2:	4821      	ldr	r0, [pc, #132]	; (8000c38 <MX_GPIO_Init+0x154>)
 8000bb4:	f002 f838 	bl	8002c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bbe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	481b      	ldr	r0, [pc, #108]	; (8000c3c <MX_GPIO_Init+0x158>)
 8000bd0:	f001 fe7e 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bd4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	4811      	ldr	r0, [pc, #68]	; (8000c34 <MX_GPIO_Init+0x150>)
 8000bee:	f001 fe6f 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bf2:	2340      	movs	r3, #64	; 0x40
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	480b      	ldr	r0, [pc, #44]	; (8000c38 <MX_GPIO_Init+0x154>)
 8000c0a:	f001 fe61 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_GPIO_Init+0x154>)
 8000c22:	f001 fe55 	bl	80028d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c26:	bf00      	nop
 8000c28:	3730      	adds	r7, #48	; 0x30
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020400 	.word	0x40020400
 8000c38:	40021800 	.word	0x40021800
 8000c3c:	40020800 	.word	0x40020800

08000c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
}
 8000c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <Error_Handler+0x8>
	...

08000c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c60:	6453      	str	r3, [r2, #68]	; 0x44
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800

08000c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a1d      	ldr	r2, [pc, #116]	; (8000d30 <HAL_UART_MspInit+0x94>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d134      	bne.n	8000d28 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <HAL_UART_MspInit+0x98>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <HAL_UART_MspInit+0x98>)
 8000cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <HAL_UART_MspInit+0x98>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <HAL_UART_MspInit+0x98>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <HAL_UART_MspInit+0x98>)
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_UART_MspInit+0x98>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0308 	and.w	r3, r3, #8
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d08:	2307      	movs	r3, #7
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	4809      	ldr	r0, [pc, #36]	; (8000d38 <HAL_UART_MspInit+0x9c>)
 8000d14:	f001 fddc 	bl	80028d0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2027      	movs	r0, #39	; 0x27
 8000d1e:	f000 fc18 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d22:	2027      	movs	r0, #39	; 0x27
 8000d24:	f000 fc31 	bl	800158a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	; 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40004800 	.word	0x40004800
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020c00 	.word	0x40020c00

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <NMI_Handler+0x4>

08000d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <HardFault_Handler+0x4>

08000d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <MemManage_Handler+0x4>

08000d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <BusFault_Handler+0x4>

08000d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <UsageFault_Handler+0x4>

08000d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d88:	f000 fac4 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <USART3_IRQHandler+0x10>)
 8000d96:	f002 fc8b 	bl	80036b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000108 	.word	0x20000108

08000da4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return 1;
 8000da8:	2301      	movs	r3, #1
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <_kill>:

int _kill(int pid, int sig)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <_kill+0x20>)
 8000dc0:	2216      	movs	r2, #22
 8000dc2:	601a      	str	r2, [r3, #0]
  return -1;
 8000dc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	200088a4 	.word	0x200088a4

08000dd8 <_exit>:

void _exit (int status)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000de0:	f04f 31ff 	mov.w	r1, #4294967295
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff ffe5 	bl	8000db4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000dea:	e7fe      	b.n	8000dea <_exit+0x12>

08000dec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	e00a      	b.n	8000e14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dfe:	f3af 8000 	nop.w
 8000e02:	4601      	mov	r1, r0
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	1c5a      	adds	r2, r3, #1
 8000e08:	60ba      	str	r2, [r7, #8]
 8000e0a:	b2ca      	uxtb	r2, r1
 8000e0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3301      	adds	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	dbf0      	blt.n	8000dfe <_read+0x12>
  }

  return len;
 8000e1c:	687b      	ldr	r3, [r7, #4]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b086      	sub	sp, #24
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	60f8      	str	r0, [r7, #12]
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	e009      	b.n	8000e4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	1c5a      	adds	r2, r3, #1
 8000e3c:	60ba      	str	r2, [r7, #8]
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	dbf1      	blt.n	8000e38 <_write+0x12>
  }
  return len;
 8000e54:	687b      	ldr	r3, [r7, #4]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <_close>:

int _close(int file)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e86:	605a      	str	r2, [r3, #4]
  return 0;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <_isatty>:

int _isatty(int file)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed0:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <_sbrk+0x5c>)
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <_sbrk+0x60>)
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <_sbrk+0x64>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <_sbrk+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d205      	bcs.n	8000f04 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <_sbrk+0x6c>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	e009      	b.n	8000f18 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <_sbrk+0x64>)
 8000f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f16:	68fb      	ldr	r3, [r7, #12]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	371c      	adds	r7, #28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	20030000 	.word	0x20030000
 8000f28:	00000400 	.word	0x00000400
 8000f2c:	20000154 	.word	0x20000154
 8000f30:	200088b8 	.word	0x200088b8
 8000f34:	200088a4 	.word	0x200088a4

08000f38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <SystemInit+0x20>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <SystemInit+0x20>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f94 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f62:	490e      	ldr	r1, [pc, #56]	; (8000f9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f64:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f68:	e002      	b.n	8000f70 <LoopCopyDataInit>

08000f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6e:	3304      	adds	r3, #4

08000f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f74:	d3f9      	bcc.n	8000f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f76:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f78:	4c0b      	ldr	r4, [pc, #44]	; (8000fa8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f7c:	e001      	b.n	8000f82 <LoopFillZerobss>

08000f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f80:	3204      	adds	r2, #4

08000f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f84:	d3fb      	bcc.n	8000f7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f86:	f7ff ffd7 	bl	8000f38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f00f ff83 	bl	8010e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8e:	f7ff fd01 	bl	8000994 <main>
  bx  lr    
 8000f92:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f94:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f9c:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8000fa0:	08015494 	.word	0x08015494
  ldr r2, =_sbss
 8000fa4:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8000fa8:	200088b4 	.word	0x200088b4

08000fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC_IRQHandler>

08000fae <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d00b      	beq.n	8000fd6 <LAN8742_RegisterBusIO+0x28>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d007      	beq.n	8000fd6 <LAN8742_RegisterBusIO+0x28>
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <LAN8742_RegisterBusIO+0x28>
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d102      	bne.n	8000fdc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	e014      	b.n	8001006 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	68da      	ldr	r2, [r3, #12]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	691a      	ldr	r2, [r3, #16]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d17c      	bne.n	800112c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2220      	movs	r2, #32
 8001044:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	e01c      	b.n	8001086 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	f107 0208 	add.w	r2, r7, #8
 8001054:	2112      	movs	r1, #18
 8001056:	6978      	ldr	r0, [r7, #20]
 8001058:	4798      	blx	r3
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	da03      	bge.n	8001068 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001060:	f06f 0304 	mvn.w	r3, #4
 8001064:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001066:	e00b      	b.n	8001080 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	f003 031f 	and.w	r3, r3, #31
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	429a      	cmp	r2, r3
 8001072:	d105      	bne.n	8001080 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
         break;
 800107e:	e005      	b.n	800108c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3301      	adds	r3, #1
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	2b1f      	cmp	r3, #31
 800108a:	d9df      	bls.n	800104c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b1f      	cmp	r3, #31
 8001092:	d902      	bls.n	800109a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001094:	f06f 0302 	mvn.w	r3, #2
 8001098:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d145      	bne.n	800112c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	6810      	ldr	r0, [r2, #0]
 80010a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010ac:	2100      	movs	r1, #0
 80010ae:	4798      	blx	r3
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	db37      	blt.n	8001126 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	6810      	ldr	r0, [r2, #0]
 80010be:	f107 0208 	add.w	r2, r7, #8
 80010c2:	2100      	movs	r1, #0
 80010c4:	4798      	blx	r3
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	db28      	blt.n	800111e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4798      	blx	r3
 80010d2:	4603      	mov	r3, r0
 80010d4:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80010d6:	e01c      	b.n	8001112 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4798      	blx	r3
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010ea:	d80e      	bhi.n	800110a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	6810      	ldr	r0, [r2, #0]
 80010f4:	f107 0208 	add.w	r2, r7, #8
 80010f8:	2100      	movs	r1, #0
 80010fa:	4798      	blx	r3
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	da07      	bge.n	8001112 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001102:	f06f 0304 	mvn.w	r3, #4
 8001106:	613b      	str	r3, [r7, #16]
                 break;
 8001108:	e010      	b.n	800112c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800110a:	f06f 0301 	mvn.w	r3, #1
 800110e:	613b      	str	r3, [r7, #16]
               break;
 8001110:	e00c      	b.n	800112c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1dd      	bne.n	80010d8 <LAN8742_Init+0xc6>
 800111c:	e006      	b.n	800112c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800111e:	f06f 0304 	mvn.w	r3, #4
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	e002      	b.n	800112c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001126:	f06f 0303 	mvn.w	r3, #3
 800112a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d112      	bne.n	8001158 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	4798      	blx	r3
 8001138:	4603      	mov	r3, r0
 800113a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800113c:	bf00      	nop
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	4798      	blx	r3
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001150:	d9f5      	bls.n	800113e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001158:	693b      	ldr	r3, [r7, #16]
 }
 800115a:	4618      	mov	r0, r3
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	6810      	ldr	r0, [r2, #0]
 8001176:	f107 020c 	add.w	r2, r7, #12
 800117a:	2101      	movs	r1, #1
 800117c:	4798      	blx	r3
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	da02      	bge.n	800118a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001184:	f06f 0304 	mvn.w	r3, #4
 8001188:	e06e      	b.n	8001268 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	6810      	ldr	r0, [r2, #0]
 8001192:	f107 020c 	add.w	r2, r7, #12
 8001196:	2101      	movs	r1, #1
 8001198:	4798      	blx	r3
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	da02      	bge.n	80011a6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80011a0:	f06f 0304 	mvn.w	r3, #4
 80011a4:	e060      	b.n	8001268 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80011b0:	2301      	movs	r3, #1
 80011b2:	e059      	b.n	8001268 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6810      	ldr	r0, [r2, #0]
 80011bc:	f107 020c 	add.w	r2, r7, #12
 80011c0:	2100      	movs	r1, #0
 80011c2:	4798      	blx	r3
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	da02      	bge.n	80011d0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80011ca:	f06f 0304 	mvn.w	r3, #4
 80011ce:	e04b      	b.n	8001268 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d11b      	bne.n	8001212 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d006      	beq.n	80011f2 <LAN8742_GetLinkState+0x90>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80011ee:	2302      	movs	r3, #2
 80011f0:	e03a      	b.n	8001268 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e033      	b.n	8001268 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800120a:	2304      	movs	r3, #4
 800120c:	e02c      	b.n	8001268 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800120e:	2305      	movs	r3, #5
 8001210:	e02a      	b.n	8001268 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	6810      	ldr	r0, [r2, #0]
 800121a:	f107 020c 	add.w	r2, r7, #12
 800121e:	211f      	movs	r1, #31
 8001220:	4798      	blx	r3
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	da02      	bge.n	800122e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001228:	f06f 0304 	mvn.w	r3, #4
 800122c:	e01c      	b.n	8001268 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d101      	bne.n	800123c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001238:	2306      	movs	r3, #6
 800123a:	e015      	b.n	8001268 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 031c 	and.w	r3, r3, #28
 8001242:	2b18      	cmp	r3, #24
 8001244:	d101      	bne.n	800124a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001246:	2302      	movs	r3, #2
 8001248:	e00e      	b.n	8001268 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f003 031c 	and.w	r3, r3, #28
 8001250:	2b08      	cmp	r3, #8
 8001252:	d101      	bne.n	8001258 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001254:	2303      	movs	r3, #3
 8001256:	e007      	b.n	8001268 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 031c 	and.w	r3, r3, #28
 800125e:	2b14      	cmp	r3, #20
 8001260:	d101      	bne.n	8001266 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001262:	2304      	movs	r3, #4
 8001264:	e000      	b.n	8001268 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001266:	2305      	movs	r3, #5
    }				
  }
}
 8001268:	4618      	mov	r0, r3
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <HAL_Init+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <HAL_Init+0x40>)
 800127a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800127e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <HAL_Init+0x40>)
 8001286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800128a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_Init+0x40>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <HAL_Init+0x40>)
 8001292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001296:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001298:	2003      	movs	r0, #3
 800129a:	f000 f94f 	bl	800153c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129e:	2000      	movs	r0, #0
 80012a0:	f000 f808 	bl	80012b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a4:	f7ff fcd2 	bl	8000c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023c00 	.word	0x40023c00

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x54>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_InitTick+0x58>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f967 	bl	80015a6 <HAL_SYSTICK_Config>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e00e      	b.n	8001300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d80a      	bhi.n	80012fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e8:	2200      	movs	r2, #0
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f000 f92f 	bl	8001552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <HAL_InitTick+0x5c>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e000      	b.n	8001300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000050 	.word	0x20000050
 800130c:	20000058 	.word	0x20000058
 8001310:	20000054 	.word	0x20000054

08001314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x20>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_IncTick+0x24>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <HAL_IncTick+0x24>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000058 	.word	0x20000058
 8001338:	20000158 	.word	0x20000158

0800133c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <HAL_GetTick+0x14>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000158 	.word	0x20000158

08001354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff ffee 	bl	800133c <HAL_GetTick>
 8001360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136c:	d005      	beq.n	800137a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_Delay+0x44>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800137a:	bf00      	nop
 800137c:	f7ff ffde 	bl	800133c <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	429a      	cmp	r2, r3
 800138a:	d8f7      	bhi.n	800137c <HAL_Delay+0x28>
  {
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000058 	.word	0x20000058

0800139c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b8:	4013      	ands	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ce:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	60d3      	str	r3, [r2, #12]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <__NVIC_GetPriorityGrouping+0x18>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	f003 0307 	and.w	r3, r3, #7
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db0b      	blt.n	800142a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	f003 021f 	and.w	r2, r3, #31
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <__NVIC_EnableIRQ+0x38>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	095b      	lsrs	r3, r3, #5
 8001420:	2001      	movs	r0, #1
 8001422:	fa00 f202 	lsl.w	r2, r0, r2
 8001426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e100 	.word	0xe000e100

0800143c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db0a      	blt.n	8001466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	490c      	ldr	r1, [pc, #48]	; (8001488 <__NVIC_SetPriority+0x4c>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	0112      	lsls	r2, r2, #4
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	440b      	add	r3, r1
 8001460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001464:	e00a      	b.n	800147c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4908      	ldr	r1, [pc, #32]	; (800148c <__NVIC_SetPriority+0x50>)
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	3b04      	subs	r3, #4
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	440b      	add	r3, r1
 800147a:	761a      	strb	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f1c3 0307 	rsb	r3, r3, #7
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	bf28      	it	cs
 80014ae:	2304      	movcs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3304      	adds	r3, #4
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d902      	bls.n	80014c0 <NVIC_EncodePriority+0x30>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3b03      	subs	r3, #3
 80014be:	e000      	b.n	80014c2 <NVIC_EncodePriority+0x32>
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	4313      	orrs	r3, r2
         );
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001508:	d301      	bcc.n	800150e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2301      	movs	r3, #1
 800150c:	e00f      	b.n	800152e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <SysTick_Config+0x40>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001516:	210f      	movs	r1, #15
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f7ff ff8e 	bl	800143c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <SysTick_Config+0x40>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <SysTick_Config+0x40>)
 8001528:	2207      	movs	r2, #7
 800152a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	e000e010 	.word	0xe000e010

0800153c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff29 	bl	800139c <__NVIC_SetPriorityGrouping>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001564:	f7ff ff3e 	bl	80013e4 <__NVIC_GetPriorityGrouping>
 8001568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	6978      	ldr	r0, [r7, #20]
 8001570:	f7ff ff8e 	bl	8001490 <NVIC_EncodePriority>
 8001574:	4602      	mov	r2, r0
 8001576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff5d 	bl	800143c <__NVIC_SetPriority>
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff31 	bl	8001400 <__NVIC_EnableIRQ>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ffa2 	bl	80014f8 <SysTick_Config>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b084      	sub	sp, #16
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015cc:	f7ff feb6 	bl	800133c <HAL_GetTick>
 80015d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d008      	beq.n	80015f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2280      	movs	r2, #128	; 0x80
 80015e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e052      	b.n	8001696 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0216 	bic.w	r2, r2, #22
 80015fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	695a      	ldr	r2, [r3, #20]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800160e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	2b00      	cmp	r3, #0
 8001616:	d103      	bne.n	8001620 <HAL_DMA_Abort+0x62>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161c:	2b00      	cmp	r3, #0
 800161e:	d007      	beq.n	8001630 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0208 	bic.w	r2, r2, #8
 800162e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0201 	bic.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001640:	e013      	b.n	800166a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001642:	f7ff fe7b 	bl	800133c <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b05      	cmp	r3, #5
 800164e:	d90c      	bls.n	800166a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2220      	movs	r2, #32
 8001654:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2203      	movs	r2, #3
 800165a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e015      	b.n	8001696 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1e4      	bne.n	8001642 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167c:	223f      	movs	r2, #63	; 0x3f
 800167e:	409a      	lsls	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d004      	beq.n	80016bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2280      	movs	r2, #128	; 0x80
 80016b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e00c      	b.n	80016d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2205      	movs	r2, #5
 80016c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0201 	bic.w	r2, r2, #1
 80016d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e06c      	b.n	80017d0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d106      	bne.n	800170e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2223      	movs	r2, #35	; 0x23
 8001704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f003 f9e7 	bl	8004adc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	4b31      	ldr	r3, [pc, #196]	; (80017d8 <HAL_ETH_Init+0xf4>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	4a30      	ldr	r2, [pc, #192]	; (80017d8 <HAL_ETH_Init+0xf4>)
 8001718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171c:	6453      	str	r3, [r2, #68]	; 0x44
 800171e:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <HAL_ETH_Init+0xf4>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800172a:	4b2c      	ldr	r3, [pc, #176]	; (80017dc <HAL_ETH_Init+0xf8>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4a2b      	ldr	r2, [pc, #172]	; (80017dc <HAL_ETH_Init+0xf8>)
 8001730:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001734:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001736:	4b29      	ldr	r3, [pc, #164]	; (80017dc <HAL_ETH_Init+0xf8>)
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	4927      	ldr	r1, [pc, #156]	; (80017dc <HAL_ETH_Init+0xf8>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001744:	4b25      	ldr	r3, [pc, #148]	; (80017dc <HAL_ETH_Init+0xf8>)
 8001746:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800175e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001760:	f7ff fdec 	bl	800133c <HAL_GetTick>
 8001764:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001766:	e011      	b.n	800178c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001768:	f7ff fde8 	bl	800133c <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001776:	d909      	bls.n	800178c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2204      	movs	r2, #4
 800177c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	22e0      	movs	r2, #224	; 0xe0
 8001784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e021      	b.n	80017d0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1e4      	bne.n	8001768 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 fdf0 	bl	8002384 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 fe97 	bl	80024d8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 feed 	bl	800258a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	461a      	mov	r2, r3
 80017b6:	2100      	movs	r1, #0
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 fe55 	bl	8002468 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2210      	movs	r2, #16
 80017ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40013800 	.word	0x40013800

080017e0 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017ee:	2b10      	cmp	r3, #16
 80017f0:	d150      	bne.n	8001894 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2223      	movs	r2, #35	; 0x23
 80017f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2204      	movs	r2, #4
 80017fe:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f9fd 	bl	8001c00 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f042 0208 	orr.w	r2, r2, #8
 8001814:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800181e:	2001      	movs	r0, #1
 8001820:	f7ff fd98 	bl	8001354 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0204 	orr.w	r2, r2, #4
 800183a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001844:	2001      	movs	r0, #1
 8001846:	f7ff fd85 	bl	8001354 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 fc36 	bl	80020c4 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800186a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800186e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	f043 0302 	orr.w	r3, r3, #2
 8001882:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001886:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2223      	movs	r2, #35	; 0x23
 800188c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	e000      	b.n	8001896 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
  }
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018ac:	2b23      	cmp	r3, #35	; 0x23
 80018ae:	d14a      	bne.n	8001946 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2223      	movs	r2, #35	; 0x23
 80018b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018ce:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6812      	ldr	r2, [r2, #0]
 80018de:	f023 0302 	bic.w	r3, r3, #2
 80018e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018e6:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0204 	bic.w	r2, r2, #4
 80018f6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001900:	2001      	movs	r0, #1
 8001902:	f7ff fd27 	bl	8001354 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 fbd8 	bl	80020c4 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0208 	bic.w	r2, r2, #8
 8001922:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800192c:	2001      	movs	r0, #1
 800192e:	f7ff fd11 	bl	8001354 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2210      	movs	r2, #16
 800193e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	e000      	b.n	8001948 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
  }
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001968:	f043 0201 	orr.w	r2, r3, #1
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e07c      	b.n	8001a70 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800197c:	2b23      	cmp	r3, #35	; 0x23
 800197e:	d176      	bne.n	8001a6e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001980:	2200      	movs	r2, #0
 8001982:	68b9      	ldr	r1, [r7, #8]
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 fe6d 	bl	8002664 <ETH_Prepare_Tx_Descriptors>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d009      	beq.n	80019a4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001996:	f043 0202 	orr.w	r2, r3, #2
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e065      	b.n	8001a70 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	3206      	adds	r2, #6
 80019b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	629a      	str	r2, [r3, #40]	; 0x28
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d904      	bls.n	80019d4 <HAL_ETH_Transmit+0x84>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ce:	1f1a      	subs	r2, r3, #4
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	3106      	adds	r1, #6
 80019e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019e8:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80019ea:	f7ff fca7 	bl	800133c <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80019f0:	e037      	b.n	8001a62 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d011      	beq.n	8001a28 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0a:	f043 0208 	orr.w	r2, r3, #8
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a1c:	695a      	ldr	r2, [r3, #20]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e023      	b.n	8001a70 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2e:	d018      	beq.n	8001a62 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a30:	f7ff fc84 	bl	800133c <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d302      	bcc.n	8001a46 <HAL_ETH_Transmit+0xf6>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10d      	bne.n	8001a62 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4c:	f043 0204 	orr.w	r2, r3, #4
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001a5c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e006      	b.n	8001a70 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	dbc3      	blt.n	80019f2 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e000      	b.n	8001a70 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
  }
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d109      	bne.n	8001aa4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a96:	f043 0201 	orr.w	r2, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0a8      	b.n	8001bf6 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aaa:	2b23      	cmp	r3, #35	; 0x23
 8001aac:	d001      	beq.n	8001ab2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e0a1      	b.n	8001bf6 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69fa      	ldr	r2, [r7, #28]
 8001abc:	3212      	adds	r2, #18
 8001abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ac8:	f1c3 0304 	rsb	r3, r3, #4
 8001acc:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ace:	e06a      	b.n	8001ba6 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d007      	beq.n	8001aec <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	699a      	ldr	r2, [r3, #24]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	69da      	ldr	r2, [r3, #28]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d103      	bne.n	8001b00 <HAL_ETH_ReadData+0x88>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d040      	beq.n	8001b82 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00c      	beq.n	8001b44 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	0c1b      	lsrs	r3, r3, #16
 8001b30:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b34:	3b04      	subs	r3, #4
 8001b36:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001b40:	2301      	movs	r3, #1
 8001b42:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	f003 f98b 	bl	8004e7c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	441a      	add	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3301      	adds	r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d902      	bls.n	8001b94 <HAL_ETH_ReadData+0x11c>
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3b04      	subs	r3, #4
 8001b92:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	3212      	adds	r2, #18
 8001b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b9e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	db06      	blt.n	8001bbc <HAL_ETH_ReadData+0x144>
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d202      	bcs.n	8001bbc <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d089      	beq.n	8001ad0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	441a      	add	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f815 	bl	8001c00 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69fa      	ldr	r2, [r7, #28]
 8001bda:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d108      	bne.n	8001bf4 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	e000      	b.n	8001bf6 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3720      	adds	r7, #32
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c14:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69fa      	ldr	r2, [r7, #28]
 8001c1a:	3212      	adds	r2, #18
 8001c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c20:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c26:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001c28:	e040      	b.n	8001cac <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d112      	bne.n	8001c58 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001c32:	f107 030c 	add.w	r3, r7, #12
 8001c36:	4618      	mov	r0, r3
 8001c38:	f003 f8f0 	bl	8004e1c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d102      	bne.n	8001c48 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	74fb      	strb	r3, [r7, #19]
 8001c46:	e007      	b.n	8001c58 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	461a      	mov	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001c58:	7cfb      	ldrb	r3, [r7, #19]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d026      	beq.n	8001cac <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d103      	bne.n	8001c6e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	4a1e      	ldr	r2, [pc, #120]	; (8001ce4 <ETH_UpdateDescriptor+0xe4>)
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	e003      	b.n	8001c76 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001c74:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c76:	f3bf 8f5f 	dmb	sy
}
 8001c7a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d902      	bls.n	8001c9a <ETH_UpdateDescriptor+0x9a>
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	3b04      	subs	r3, #4
 8001c98:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69fa      	ldr	r2, [r7, #28]
 8001c9e:	3212      	adds	r2, #18
 8001ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca4:	617b      	str	r3, [r7, #20]
      desccount--;
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <ETH_UpdateDescriptor+0xb8>
 8001cb2:	7cfb      	ldrb	r3, [r7, #19]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1b8      	bne.n	8001c2a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d00c      	beq.n	8001cdc <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cca:	461a      	mov	r2, r3
 8001ccc:	2300      	movs	r3, #0
 8001cce:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3720      	adds	r7, #32
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	80004600 	.word	0x80004600

08001ce8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f003 031c 	and.w	r3, r3, #28
 8001d04:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	02db      	lsls	r3, r3, #11
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	019b      	lsls	r3, r3, #6
 8001d16:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f023 0302 	bic.w	r3, r3, #2
 8001d26:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001d38:	f7ff fb00 	bl	800133c <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d3e:	e00d      	b.n	8001d5c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001d40:	f7ff fafc 	bl	800133c <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d4e:	d301      	bcc.n	8001d54 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e010      	b.n	8001d76 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1ec      	bne.n	8001d40 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f003 031c 	and.w	r3, r3, #28
 8001d9a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	02db      	lsls	r3, r3, #11
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	019b      	lsls	r3, r3, #6
 8001dac:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dd8:	f7ff fab0 	bl	800133c <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dde:	e00d      	b.n	8001dfc <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001de0:	f7ff faac 	bl	800133c <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dee:	d301      	bcc.n	8001df4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e009      	b.n	8001e08 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1ec      	bne.n	8001de0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0d9      	b.n	8001fd8 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	bf14      	ite	ne
 8001e32:	2301      	movne	r3, #1
 8001e34:	2300      	moveq	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	461a      	mov	r2, r3
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf0c      	ite	eq
 8001e5c:	2301      	moveq	r3, #1
 8001e5e:	2300      	movne	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bf14      	ite	ne
 8001e78:	2301      	movne	r3, #1
 8001e7a:	2300      	moveq	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf0c      	ite	eq
 8001e92:	2301      	moveq	r3, #1
 8001e94:	2300      	movne	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	461a      	mov	r2, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf14      	ite	ne
 8001eac:	2301      	movne	r3, #1
 8001eae:	2300      	moveq	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	bf0c      	ite	eq
 8001ee2:	2301      	moveq	r3, #1
 8001ee4:	2300      	movne	r3, #0
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	461a      	mov	r2, r3
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	bf14      	ite	ne
 8001f16:	2301      	movne	r3, #1
 8001f18:	2300      	moveq	r3, #0
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	bf14      	ite	ne
 8001f3e:	2301      	movne	r3, #1
 8001f40:	2300      	moveq	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	bf14      	ite	ne
 8001f58:	2301      	movne	r3, #1
 8001f5a:	2300      	moveq	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bf0c      	ite	eq
 8001f74:	2301      	moveq	r3, #1
 8001f76:	2300      	movne	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	0c1b      	lsrs	r3, r3, #16
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	bf14      	ite	ne
 8001fac:	2301      	movne	r3, #1
 8001fae:	2300      	moveq	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf14      	ite	ne
 8001fc8:	2301      	movne	r3, #1
 8001fca:	2300      	moveq	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e00b      	b.n	8002010 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ffe:	2b10      	cmp	r3, #16
 8002000:	d105      	bne.n	800200e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002002:	6839      	ldr	r1, [r7, #0]
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f883 	bl	8002110 <ETH_SetMACConfig>

    return HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	e000      	b.n	8002010 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
  }
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f023 031c 	bic.w	r3, r3, #28
 800202e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002030:	f001 fa78 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8002034:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	4a1d      	ldr	r2, [pc, #116]	; (80020b0 <HAL_ETH_SetMDIOClockRange+0x98>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d908      	bls.n	8002050 <HAL_ETH_SetMDIOClockRange+0x38>
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	4a1c      	ldr	r2, [pc, #112]	; (80020b4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d804      	bhi.n	8002050 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f043 0308 	orr.w	r3, r3, #8
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	e027      	b.n	80020a0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4a18      	ldr	r2, [pc, #96]	; (80020b4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d908      	bls.n	800206a <HAL_ETH_SetMDIOClockRange+0x52>
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d204      	bcs.n	800206a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f043 030c 	orr.w	r3, r3, #12
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	e01a      	b.n	80020a0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	4a12      	ldr	r2, [pc, #72]	; (80020b8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d303      	bcc.n	800207a <HAL_ETH_SetMDIOClockRange+0x62>
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	4a11      	ldr	r2, [pc, #68]	; (80020bc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d911      	bls.n	800209e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	4a0f      	ldr	r2, [pc, #60]	; (80020bc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d908      	bls.n	8002094 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	4a0e      	ldr	r2, [pc, #56]	; (80020c0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d804      	bhi.n	8002094 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	e005      	b.n	80020a0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f043 0310 	orr.w	r3, r3, #16
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	e000      	b.n	80020a0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800209e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	611a      	str	r2, [r3, #16]
}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	01312cff 	.word	0x01312cff
 80020b4:	02160ebf 	.word	0x02160ebf
 80020b8:	03938700 	.word	0x03938700
 80020bc:	05f5e0ff 	.word	0x05f5e0ff
 80020c0:	08f0d17f 	.word	0x08f0d17f

080020c4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020e6:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020f4:	2001      	movs	r0, #1
 80020f6:	f7ff f92d 	bl	8001354 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002104:	6193      	str	r3, [r2, #24]
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4b51      	ldr	r3, [pc, #324]	; (800226c <ETH_SetMACConfig+0x15c>)
 8002126:	4013      	ands	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	7c1b      	ldrb	r3, [r3, #16]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d102      	bne.n	8002138 <ETH_SetMACConfig+0x28>
 8002132:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002136:	e000      	b.n	800213a <ETH_SetMACConfig+0x2a>
 8002138:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	7c5b      	ldrb	r3, [r3, #17]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d102      	bne.n	8002148 <ETH_SetMACConfig+0x38>
 8002142:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002146:	e000      	b.n	800214a <ETH_SetMACConfig+0x3a>
 8002148:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800214a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002150:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	7fdb      	ldrb	r3, [r3, #31]
 8002156:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002158:	431a      	orrs	r2, r3
                        macconf->Speed |
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800215e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	7f92      	ldrb	r2, [r2, #30]
 8002164:	2a00      	cmp	r2, #0
 8002166:	d102      	bne.n	800216e <ETH_SetMACConfig+0x5e>
 8002168:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800216c:	e000      	b.n	8002170 <ETH_SetMACConfig+0x60>
 800216e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002170:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	7f1b      	ldrb	r3, [r3, #28]
 8002176:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002178:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800217e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	791b      	ldrb	r3, [r3, #4]
 8002184:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002186:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800218e:	2a00      	cmp	r2, #0
 8002190:	d102      	bne.n	8002198 <ETH_SetMACConfig+0x88>
 8002192:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002196:	e000      	b.n	800219a <ETH_SetMACConfig+0x8a>
 8002198:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800219a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	7bdb      	ldrb	r3, [r3, #15]
 80021a0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021a2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021b0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021b2:	4313      	orrs	r3, r2
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021ca:	2001      	movs	r0, #1
 80021cc:	f7ff f8c2 	bl	8001354 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80021e6:	4013      	ands	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ee:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80021f6:	2a00      	cmp	r2, #0
 80021f8:	d101      	bne.n	80021fe <ETH_SetMACConfig+0xee>
 80021fa:	2280      	movs	r2, #128	; 0x80
 80021fc:	e000      	b.n	8002200 <ETH_SetMACConfig+0xf0>
 80021fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002200:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002206:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800220e:	2a01      	cmp	r2, #1
 8002210:	d101      	bne.n	8002216 <ETH_SetMACConfig+0x106>
 8002212:	2208      	movs	r2, #8
 8002214:	e000      	b.n	8002218 <ETH_SetMACConfig+0x108>
 8002216:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002218:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002220:	2a01      	cmp	r2, #1
 8002222:	d101      	bne.n	8002228 <ETH_SetMACConfig+0x118>
 8002224:	2204      	movs	r2, #4
 8002226:	e000      	b.n	800222a <ETH_SetMACConfig+0x11a>
 8002228:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800222a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002232:	2a01      	cmp	r2, #1
 8002234:	d101      	bne.n	800223a <ETH_SetMACConfig+0x12a>
 8002236:	2202      	movs	r2, #2
 8002238:	e000      	b.n	800223c <ETH_SetMACConfig+0x12c>
 800223a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800223c:	4313      	orrs	r3, r2
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4313      	orrs	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002254:	2001      	movs	r0, #1
 8002256:	f7ff f87d 	bl	8001354 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	619a      	str	r2, [r3, #24]
}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	ff20810f 	.word	0xff20810f

08002270 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4b3d      	ldr	r3, [pc, #244]	; (8002380 <ETH_SetDMAConfig+0x110>)
 800228a:	4013      	ands	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	7b1b      	ldrb	r3, [r3, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d102      	bne.n	800229c <ETH_SetDMAConfig+0x2c>
 8002296:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800229a:	e000      	b.n	800229e <ETH_SetDMAConfig+0x2e>
 800229c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	7b5b      	ldrb	r3, [r3, #13]
 80022a2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022a4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	7f52      	ldrb	r2, [r2, #29]
 80022aa:	2a00      	cmp	r2, #0
 80022ac:	d102      	bne.n	80022b4 <ETH_SetDMAConfig+0x44>
 80022ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022b2:	e000      	b.n	80022b6 <ETH_SetDMAConfig+0x46>
 80022b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	7b9b      	ldrb	r3, [r3, #14]
 80022bc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022be:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	7f1b      	ldrb	r3, [r3, #28]
 80022ca:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80022cc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	7f9b      	ldrb	r3, [r3, #30]
 80022d2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022d4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80022da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022e2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022e4:	4313      	orrs	r3, r2
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f4:	461a      	mov	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002306:	2001      	movs	r0, #1
 8002308:	f7ff f824 	bl	8001354 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002314:	461a      	mov	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	791b      	ldrb	r3, [r3, #4]
 800231e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002324:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800232a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002330:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002338:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800233a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002340:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002342:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002348:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002352:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002356:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002364:	2001      	movs	r0, #1
 8002366:	f7fe fff5 	bl	8001354 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002372:	461a      	mov	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6013      	str	r3, [r2, #0]
}
 8002378:	bf00      	nop
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	f8de3f23 	.word	0xf8de3f23

08002384 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b0a6      	sub	sp, #152	; 0x98
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800238c:	2301      	movs	r3, #1
 800238e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002392:	2301      	movs	r3, #1
 8002394:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002398:	2300      	movs	r3, #0
 800239a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800239c:	2300      	movs	r3, #0
 800239e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80023a2:	2301      	movs	r3, #1
 80023a4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80023ae:	2301      	movs	r3, #1
 80023b0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80023c0:	2300      	movs	r3, #0
 80023c2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80023da:	2300      	movs	r3, #0
 80023dc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80023e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023ea:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80023ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80023f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023fc:	4619      	mov	r1, r3
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff fe86 	bl	8002110 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002404:	2301      	movs	r3, #1
 8002406:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002408:	2301      	movs	r3, #1
 800240a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800240c:	2301      	movs	r3, #1
 800240e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002412:	2301      	movs	r3, #1
 8002414:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800241a:	2300      	movs	r3, #0
 800241c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002426:	2300      	movs	r3, #0
 8002428:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800242a:	2301      	movs	r3, #1
 800242c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002430:	2301      	movs	r3, #1
 8002432:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002438:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800243a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800243e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002444:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002446:	2301      	movs	r3, #1
 8002448:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800244c:	2300      	movs	r3, #0
 800244e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002450:	2300      	movs	r3, #0
 8002452:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002454:	f107 0308 	add.w	r3, r7, #8
 8002458:	4619      	mov	r1, r3
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ff08 	bl	8002270 <ETH_SetDMAConfig>
}
 8002460:	bf00      	nop
 8002462:	3798      	adds	r7, #152	; 0x98
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3305      	adds	r3, #5
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	3204      	adds	r2, #4
 8002480:	7812      	ldrb	r2, [r2, #0]
 8002482:	4313      	orrs	r3, r2
 8002484:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <ETH_MACAddressConfig+0x68>)
 800248a:	4413      	add	r3, r2
 800248c:	461a      	mov	r2, r3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3303      	adds	r3, #3
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	061a      	lsls	r2, r3, #24
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3302      	adds	r3, #2
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	041b      	lsls	r3, r3, #16
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3301      	adds	r3, #1
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	4313      	orrs	r3, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	7812      	ldrb	r2, [r2, #0]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <ETH_MACAddressConfig+0x6c>)
 80024ba:	4413      	add	r3, r2
 80024bc:	461a      	mov	r2, r3
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	6013      	str	r3, [r2, #0]
}
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40028040 	.word	0x40028040
 80024d4:	40028044 	.word	0x40028044

080024d8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	e03e      	b.n	8002564 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68d9      	ldr	r1, [r3, #12]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	440b      	add	r3, r1
 80024f6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2200      	movs	r2, #0
 8002502:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2200      	movs	r2, #0
 800250e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	3206      	adds	r2, #6
 8002518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d80c      	bhi.n	8002548 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68d9      	ldr	r1, [r3, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	440b      	add	r3, r1
 8002540:	461a      	mov	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	e004      	b.n	8002552 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	461a      	mov	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3301      	adds	r3, #1
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b03      	cmp	r3, #3
 8002568:	d9bd      	bls.n	80024e6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800257c:	611a      	str	r2, [r3, #16]
}
 800257e:	bf00      	nop
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800258a:	b480      	push	{r7}
 800258c:	b085      	sub	sp, #20
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	e046      	b.n	8002626 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6919      	ldr	r1, [r3, #16]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4613      	mov	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	440b      	add	r3, r1
 80025a8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2200      	movs	r2, #0
 80025b4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2200      	movs	r2, #0
 80025ba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2200      	movs	r2, #0
 80025c0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2200      	movs	r2, #0
 80025c6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2200      	movs	r2, #0
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80025d4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80025dc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80025ea:	68b9      	ldr	r1, [r7, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	3212      	adds	r2, #18
 80025f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d80c      	bhi.n	8002616 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6919      	ldr	r1, [r3, #16]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	440b      	add	r3, r1
 800260e:	461a      	mov	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	60da      	str	r2, [r3, #12]
 8002614:	e004      	b.n	8002620 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	461a      	mov	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	3301      	adds	r3, #1
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2b03      	cmp	r3, #3
 800262a:	d9b5      	bls.n	8002598 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002656:	60da      	str	r2, [r3, #12]
}
 8002658:	bf00      	nop
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002664:	b480      	push	{r7}
 8002666:	b08d      	sub	sp, #52	; 0x34
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	3318      	adds	r3, #24
 8002674:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800268a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800268e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026a6:	d007      	beq.n	80026b8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	3304      	adds	r3, #4
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80026b8:	2302      	movs	r3, #2
 80026ba:	e103      	b.n	80028c4 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	3301      	adds	r3, #1
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80026d4:	f023 031f 	bic.w	r3, r3, #31
 80026d8:	69fa      	ldr	r2, [r7, #28]
 80026da:	6852      	ldr	r2, [r2, #4]
 80026dc:	431a      	orrs	r2, r3
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d008      	beq.n	8002700 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	431a      	orrs	r2, r3
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	431a      	orrs	r2, r3
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002742:	f3bf 8f5f 	dmb	sy
}
 8002746:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002754:	e084      	b.n	8002860 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d006      	beq.n	8002776 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	e005      	b.n	8002782 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002784:	3301      	adds	r3, #1
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278a:	2b03      	cmp	r3, #3
 800278c:	d902      	bls.n	8002794 <ETH_Prepare_Tx_Descriptors+0x130>
 800278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002790:	3b04      	subs	r3, #4
 8002792:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800279c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027b6:	d007      	beq.n	80027c8 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027bc:	3304      	adds	r3, #4
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d029      	beq.n	800281c <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027da:	e019      	b.n	8002810 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80027dc:	f3bf 8f5f 	dmb	sy
}
 80027e0:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80027ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f0:	3301      	adds	r3, #1
 80027f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d902      	bls.n	8002800 <ETH_Prepare_Tx_Descriptors+0x19c>
 80027fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fc:	3b04      	subs	r3, #4
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002808:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280c:	3301      	adds	r3, #1
 800280e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	429a      	cmp	r2, r3
 8002816:	d3e1      	bcc.n	80027dc <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002818:	2302      	movs	r3, #2
 800281a:	e053      	b.n	80028c4 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	3301      	adds	r3, #1
 8002820:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800283a:	f023 031f 	bic.w	r3, r3, #31
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	6852      	ldr	r2, [r2, #4]
 8002842:	431a      	orrs	r2, r3
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	3301      	adds	r3, #1
 800284c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800284e:	f3bf 8f5f 	dmb	sy
}
 8002852:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	f47f af76 	bne.w	8002756 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d006      	beq.n	800287e <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	e005      	b.n	800288a <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800289a:	6979      	ldr	r1, [r7, #20]
 800289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289e:	3304      	adds	r3, #4
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028aa:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80028ac:	b672      	cpsid	i
}
 80028ae:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	4413      	add	r3, r2
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80028be:	b662      	cpsie	i
}
 80028c0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3734      	adds	r7, #52	; 0x34
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b089      	sub	sp, #36	; 0x24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
 80028ea:	e177      	b.n	8002bdc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028ec:	2201      	movs	r2, #1
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	429a      	cmp	r2, r3
 8002906:	f040 8166 	bne.w	8002bd6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	2b01      	cmp	r3, #1
 8002914:	d005      	beq.n	8002922 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800291e:	2b02      	cmp	r3, #2
 8002920:	d130      	bne.n	8002984 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	2203      	movs	r2, #3
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002958:	2201      	movs	r2, #1
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	f003 0201 	and.w	r2, r3, #1
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	2b03      	cmp	r3, #3
 800298e:	d017      	beq.n	80029c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	2203      	movs	r2, #3
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d123      	bne.n	8002a14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	08da      	lsrs	r2, r3, #3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3208      	adds	r2, #8
 80029d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	220f      	movs	r2, #15
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	08da      	lsrs	r2, r3, #3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3208      	adds	r2, #8
 8002a0e:	69b9      	ldr	r1, [r7, #24]
 8002a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	2203      	movs	r2, #3
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 0203 	and.w	r2, r3, #3
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 80c0 	beq.w	8002bd6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	4b66      	ldr	r3, [pc, #408]	; (8002bf4 <HAL_GPIO_Init+0x324>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	4a65      	ldr	r2, [pc, #404]	; (8002bf4 <HAL_GPIO_Init+0x324>)
 8002a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a64:	6453      	str	r3, [r2, #68]	; 0x44
 8002a66:	4b63      	ldr	r3, [pc, #396]	; (8002bf4 <HAL_GPIO_Init+0x324>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a72:	4a61      	ldr	r2, [pc, #388]	; (8002bf8 <HAL_GPIO_Init+0x328>)
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	089b      	lsrs	r3, r3, #2
 8002a78:	3302      	adds	r3, #2
 8002a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	220f      	movs	r2, #15
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a58      	ldr	r2, [pc, #352]	; (8002bfc <HAL_GPIO_Init+0x32c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d037      	beq.n	8002b0e <HAL_GPIO_Init+0x23e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a57      	ldr	r2, [pc, #348]	; (8002c00 <HAL_GPIO_Init+0x330>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d031      	beq.n	8002b0a <HAL_GPIO_Init+0x23a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a56      	ldr	r2, [pc, #344]	; (8002c04 <HAL_GPIO_Init+0x334>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d02b      	beq.n	8002b06 <HAL_GPIO_Init+0x236>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a55      	ldr	r2, [pc, #340]	; (8002c08 <HAL_GPIO_Init+0x338>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d025      	beq.n	8002b02 <HAL_GPIO_Init+0x232>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a54      	ldr	r2, [pc, #336]	; (8002c0c <HAL_GPIO_Init+0x33c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d01f      	beq.n	8002afe <HAL_GPIO_Init+0x22e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a53      	ldr	r2, [pc, #332]	; (8002c10 <HAL_GPIO_Init+0x340>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d019      	beq.n	8002afa <HAL_GPIO_Init+0x22a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a52      	ldr	r2, [pc, #328]	; (8002c14 <HAL_GPIO_Init+0x344>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d013      	beq.n	8002af6 <HAL_GPIO_Init+0x226>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a51      	ldr	r2, [pc, #324]	; (8002c18 <HAL_GPIO_Init+0x348>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00d      	beq.n	8002af2 <HAL_GPIO_Init+0x222>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a50      	ldr	r2, [pc, #320]	; (8002c1c <HAL_GPIO_Init+0x34c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d007      	beq.n	8002aee <HAL_GPIO_Init+0x21e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a4f      	ldr	r2, [pc, #316]	; (8002c20 <HAL_GPIO_Init+0x350>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d101      	bne.n	8002aea <HAL_GPIO_Init+0x21a>
 8002ae6:	2309      	movs	r3, #9
 8002ae8:	e012      	b.n	8002b10 <HAL_GPIO_Init+0x240>
 8002aea:	230a      	movs	r3, #10
 8002aec:	e010      	b.n	8002b10 <HAL_GPIO_Init+0x240>
 8002aee:	2308      	movs	r3, #8
 8002af0:	e00e      	b.n	8002b10 <HAL_GPIO_Init+0x240>
 8002af2:	2307      	movs	r3, #7
 8002af4:	e00c      	b.n	8002b10 <HAL_GPIO_Init+0x240>
 8002af6:	2306      	movs	r3, #6
 8002af8:	e00a      	b.n	8002b10 <HAL_GPIO_Init+0x240>
 8002afa:	2305      	movs	r3, #5
 8002afc:	e008      	b.n	8002b10 <HAL_GPIO_Init+0x240>
 8002afe:	2304      	movs	r3, #4
 8002b00:	e006      	b.n	8002b10 <HAL_GPIO_Init+0x240>
 8002b02:	2303      	movs	r3, #3
 8002b04:	e004      	b.n	8002b10 <HAL_GPIO_Init+0x240>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e002      	b.n	8002b10 <HAL_GPIO_Init+0x240>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_GPIO_Init+0x240>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	69fa      	ldr	r2, [r7, #28]
 8002b12:	f002 0203 	and.w	r2, r2, #3
 8002b16:	0092      	lsls	r2, r2, #2
 8002b18:	4093      	lsls	r3, r2
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b20:	4935      	ldr	r1, [pc, #212]	; (8002bf8 <HAL_GPIO_Init+0x328>)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	089b      	lsrs	r3, r3, #2
 8002b26:	3302      	adds	r3, #2
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b2e:	4b3d      	ldr	r3, [pc, #244]	; (8002c24 <HAL_GPIO_Init+0x354>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	43db      	mvns	r3, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b52:	4a34      	ldr	r2, [pc, #208]	; (8002c24 <HAL_GPIO_Init+0x354>)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b58:	4b32      	ldr	r3, [pc, #200]	; (8002c24 <HAL_GPIO_Init+0x354>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b7c:	4a29      	ldr	r2, [pc, #164]	; (8002c24 <HAL_GPIO_Init+0x354>)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b82:	4b28      	ldr	r3, [pc, #160]	; (8002c24 <HAL_GPIO_Init+0x354>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ba6:	4a1f      	ldr	r2, [pc, #124]	; (8002c24 <HAL_GPIO_Init+0x354>)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bac:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <HAL_GPIO_Init+0x354>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bd0:	4a14      	ldr	r2, [pc, #80]	; (8002c24 <HAL_GPIO_Init+0x354>)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	61fb      	str	r3, [r7, #28]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	2b0f      	cmp	r3, #15
 8002be0:	f67f ae84 	bls.w	80028ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002be4:	bf00      	nop
 8002be6:	bf00      	nop
 8002be8:	3724      	adds	r7, #36	; 0x24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40013800 	.word	0x40013800
 8002bfc:	40020000 	.word	0x40020000
 8002c00:	40020400 	.word	0x40020400
 8002c04:	40020800 	.word	0x40020800
 8002c08:	40020c00 	.word	0x40020c00
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40021400 	.word	0x40021400
 8002c14:	40021800 	.word	0x40021800
 8002c18:	40021c00 	.word	0x40021c00
 8002c1c:	40022000 	.word	0x40022000
 8002c20:	40022400 	.word	0x40022400
 8002c24:	40013c00 	.word	0x40013c00

08002c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	807b      	strh	r3, [r7, #2]
 8002c34:	4613      	mov	r3, r2
 8002c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c38:	787b      	ldrb	r3, [r7, #1]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c3e:	887a      	ldrh	r2, [r7, #2]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c44:	e003      	b.n	8002c4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c46:	887b      	ldrh	r3, [r7, #2]
 8002c48:	041a      	lsls	r2, r3, #16
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	619a      	str	r2, [r3, #24]
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e267      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d075      	beq.n	8002d66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c7a:	4b88      	ldr	r3, [pc, #544]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d00c      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c86:	4b85      	ldr	r3, [pc, #532]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d112      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c92:	4b82      	ldr	r3, [pc, #520]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c9e:	d10b      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca0:	4b7e      	ldr	r3, [pc, #504]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d05b      	beq.n	8002d64 <HAL_RCC_OscConfig+0x108>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d157      	bne.n	8002d64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e242      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc0:	d106      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x74>
 8002cc2:	4b76      	ldr	r3, [pc, #472]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a75      	ldr	r2, [pc, #468]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	e01d      	b.n	8002d0c <HAL_RCC_OscConfig+0xb0>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x98>
 8002cda:	4b70      	ldr	r3, [pc, #448]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a6f      	ldr	r2, [pc, #444]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	4b6d      	ldr	r3, [pc, #436]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a6c      	ldr	r2, [pc, #432]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	e00b      	b.n	8002d0c <HAL_RCC_OscConfig+0xb0>
 8002cf4:	4b69      	ldr	r3, [pc, #420]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a68      	ldr	r2, [pc, #416]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	4b66      	ldr	r3, [pc, #408]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a65      	ldr	r2, [pc, #404]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d013      	beq.n	8002d3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7fe fb12 	bl	800133c <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d1c:	f7fe fb0e 	bl	800133c <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b64      	cmp	r3, #100	; 0x64
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e207      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2e:	4b5b      	ldr	r3, [pc, #364]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0xc0>
 8002d3a:	e014      	b.n	8002d66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3c:	f7fe fafe 	bl	800133c <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d44:	f7fe fafa 	bl	800133c <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b64      	cmp	r3, #100	; 0x64
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e1f3      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d56:	4b51      	ldr	r3, [pc, #324]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0xe8>
 8002d62:	e000      	b.n	8002d66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d063      	beq.n	8002e3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d72:	4b4a      	ldr	r3, [pc, #296]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00b      	beq.n	8002d96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d7e:	4b47      	ldr	r3, [pc, #284]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d11c      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d8a:	4b44      	ldr	r3, [pc, #272]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d116      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d96:	4b41      	ldr	r3, [pc, #260]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d005      	beq.n	8002dae <HAL_RCC_OscConfig+0x152>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d001      	beq.n	8002dae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e1c7      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dae:	4b3b      	ldr	r3, [pc, #236]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4937      	ldr	r1, [pc, #220]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc2:	e03a      	b.n	8002e3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d020      	beq.n	8002e0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dcc:	4b34      	ldr	r3, [pc, #208]	; (8002ea0 <HAL_RCC_OscConfig+0x244>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd2:	f7fe fab3 	bl	800133c <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dda:	f7fe faaf 	bl	800133c <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e1a8      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dec:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f0      	beq.n	8002dda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df8:	4b28      	ldr	r3, [pc, #160]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	4925      	ldr	r1, [pc, #148]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	600b      	str	r3, [r1, #0]
 8002e0c:	e015      	b.n	8002e3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e0e:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <HAL_RCC_OscConfig+0x244>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe fa92 	bl	800133c <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e1c:	f7fe fa8e 	bl	800133c <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e187      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2e:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d036      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d016      	beq.n	8002e7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e4e:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <HAL_RCC_OscConfig+0x248>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e54:	f7fe fa72 	bl	800133c <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e5c:	f7fe fa6e 	bl	800133c <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e167      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x200>
 8002e7a:	e01b      	b.n	8002eb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e7c:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <HAL_RCC_OscConfig+0x248>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e82:	f7fe fa5b 	bl	800133c <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e88:	e00e      	b.n	8002ea8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8a:	f7fe fa57 	bl	800133c <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d907      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e150      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	42470000 	.word	0x42470000
 8002ea4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea8:	4b88      	ldr	r3, [pc, #544]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 8002eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1ea      	bne.n	8002e8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 8097 	beq.w	8002ff0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ec6:	4b81      	ldr	r3, [pc, #516]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10f      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	4b7d      	ldr	r3, [pc, #500]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	4a7c      	ldr	r2, [pc, #496]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 8002edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee2:	4b7a      	ldr	r3, [pc, #488]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef2:	4b77      	ldr	r3, [pc, #476]	; (80030d0 <HAL_RCC_OscConfig+0x474>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d118      	bne.n	8002f30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002efe:	4b74      	ldr	r3, [pc, #464]	; (80030d0 <HAL_RCC_OscConfig+0x474>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a73      	ldr	r2, [pc, #460]	; (80030d0 <HAL_RCC_OscConfig+0x474>)
 8002f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f0a:	f7fe fa17 	bl	800133c <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f12:	f7fe fa13 	bl	800133c <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e10c      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f24:	4b6a      	ldr	r3, [pc, #424]	; (80030d0 <HAL_RCC_OscConfig+0x474>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0f0      	beq.n	8002f12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d106      	bne.n	8002f46 <HAL_RCC_OscConfig+0x2ea>
 8002f38:	4b64      	ldr	r3, [pc, #400]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3c:	4a63      	ldr	r2, [pc, #396]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	6713      	str	r3, [r2, #112]	; 0x70
 8002f44:	e01c      	b.n	8002f80 <HAL_RCC_OscConfig+0x324>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b05      	cmp	r3, #5
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCC_OscConfig+0x30c>
 8002f4e:	4b5f      	ldr	r3, [pc, #380]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	4a5e      	ldr	r2, [pc, #376]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f54:	f043 0304 	orr.w	r3, r3, #4
 8002f58:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5a:	4b5c      	ldr	r3, [pc, #368]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	4a5b      	ldr	r2, [pc, #364]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6713      	str	r3, [r2, #112]	; 0x70
 8002f66:	e00b      	b.n	8002f80 <HAL_RCC_OscConfig+0x324>
 8002f68:	4b58      	ldr	r3, [pc, #352]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6c:	4a57      	ldr	r2, [pc, #348]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
 8002f72:	6713      	str	r3, [r2, #112]	; 0x70
 8002f74:	4b55      	ldr	r3, [pc, #340]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f78:	4a54      	ldr	r2, [pc, #336]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f7a:	f023 0304 	bic.w	r3, r3, #4
 8002f7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d015      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f88:	f7fe f9d8 	bl	800133c <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8e:	e00a      	b.n	8002fa6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f90:	f7fe f9d4 	bl	800133c <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e0cb      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa6:	4b49      	ldr	r3, [pc, #292]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0ee      	beq.n	8002f90 <HAL_RCC_OscConfig+0x334>
 8002fb2:	e014      	b.n	8002fde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb4:	f7fe f9c2 	bl	800133c <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fba:	e00a      	b.n	8002fd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fbc:	f7fe f9be 	bl	800133c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e0b5      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd2:	4b3e      	ldr	r3, [pc, #248]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1ee      	bne.n	8002fbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fde:	7dfb      	ldrb	r3, [r7, #23]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d105      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe4:	4b39      	ldr	r3, [pc, #228]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	4a38      	ldr	r2, [pc, #224]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 8002fea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80a1 	beq.w	800313c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ffa:	4b34      	ldr	r3, [pc, #208]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b08      	cmp	r3, #8
 8003004:	d05c      	beq.n	80030c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d141      	bne.n	8003092 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300e:	4b31      	ldr	r3, [pc, #196]	; (80030d4 <HAL_RCC_OscConfig+0x478>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7fe f992 	bl	800133c <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301c:	f7fe f98e 	bl	800133c <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e087      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302e:	4b27      	ldr	r3, [pc, #156]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	019b      	lsls	r3, r3, #6
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	085b      	lsrs	r3, r3, #1
 8003052:	3b01      	subs	r3, #1
 8003054:	041b      	lsls	r3, r3, #16
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305c:	061b      	lsls	r3, r3, #24
 800305e:	491b      	ldr	r1, [pc, #108]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003064:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <HAL_RCC_OscConfig+0x478>)
 8003066:	2201      	movs	r2, #1
 8003068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306a:	f7fe f967 	bl	800133c <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003072:	f7fe f963 	bl	800133c <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e05c      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003084:	4b11      	ldr	r3, [pc, #68]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f0      	beq.n	8003072 <HAL_RCC_OscConfig+0x416>
 8003090:	e054      	b.n	800313c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003092:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <HAL_RCC_OscConfig+0x478>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7fe f950 	bl	800133c <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a0:	f7fe f94c 	bl	800133c <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e045      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b2:	4b06      	ldr	r3, [pc, #24]	; (80030cc <HAL_RCC_OscConfig+0x470>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x444>
 80030be:	e03d      	b.n	800313c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d107      	bne.n	80030d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e038      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40007000 	.word	0x40007000
 80030d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030d8:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <HAL_RCC_OscConfig+0x4ec>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d028      	beq.n	8003138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d121      	bne.n	8003138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fe:	429a      	cmp	r2, r3
 8003100:	d11a      	bne.n	8003138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003108:	4013      	ands	r3, r2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800310e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003110:	4293      	cmp	r3, r2
 8003112:	d111      	bne.n	8003138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311e:	085b      	lsrs	r3, r3, #1
 8003120:	3b01      	subs	r3, #1
 8003122:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003124:	429a      	cmp	r2, r3
 8003126:	d107      	bne.n	8003138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40023800 	.word	0x40023800

0800314c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0cc      	b.n	80032fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003160:	4b68      	ldr	r3, [pc, #416]	; (8003304 <HAL_RCC_ClockConfig+0x1b8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 030f 	and.w	r3, r3, #15
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d90c      	bls.n	8003188 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316e:	4b65      	ldr	r3, [pc, #404]	; (8003304 <HAL_RCC_ClockConfig+0x1b8>)
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003176:	4b63      	ldr	r3, [pc, #396]	; (8003304 <HAL_RCC_ClockConfig+0x1b8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e0b8      	b.n	80032fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d020      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031a0:	4b59      	ldr	r3, [pc, #356]	; (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	4a58      	ldr	r2, [pc, #352]	; (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031b8:	4b53      	ldr	r3, [pc, #332]	; (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	4a52      	ldr	r2, [pc, #328]	; (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c4:	4b50      	ldr	r3, [pc, #320]	; (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	494d      	ldr	r1, [pc, #308]	; (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d044      	beq.n	800326c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d107      	bne.n	80031fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ea:	4b47      	ldr	r3, [pc, #284]	; (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d119      	bne.n	800322a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e07f      	b.n	80032fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d003      	beq.n	800320a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003206:	2b03      	cmp	r3, #3
 8003208:	d107      	bne.n	800321a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320a:	4b3f      	ldr	r3, [pc, #252]	; (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d109      	bne.n	800322a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e06f      	b.n	80032fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321a:	4b3b      	ldr	r3, [pc, #236]	; (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e067      	b.n	80032fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800322a:	4b37      	ldr	r3, [pc, #220]	; (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f023 0203 	bic.w	r2, r3, #3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	4934      	ldr	r1, [pc, #208]	; (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	4313      	orrs	r3, r2
 800323a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800323c:	f7fe f87e 	bl	800133c <HAL_GetTick>
 8003240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003242:	e00a      	b.n	800325a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003244:	f7fe f87a 	bl	800133c <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003252:	4293      	cmp	r3, r2
 8003254:	d901      	bls.n	800325a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e04f      	b.n	80032fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325a:	4b2b      	ldr	r3, [pc, #172]	; (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 020c 	and.w	r2, r3, #12
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	429a      	cmp	r2, r3
 800326a:	d1eb      	bne.n	8003244 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800326c:	4b25      	ldr	r3, [pc, #148]	; (8003304 <HAL_RCC_ClockConfig+0x1b8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 030f 	and.w	r3, r3, #15
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d20c      	bcs.n	8003294 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327a:	4b22      	ldr	r3, [pc, #136]	; (8003304 <HAL_RCC_ClockConfig+0x1b8>)
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003282:	4b20      	ldr	r3, [pc, #128]	; (8003304 <HAL_RCC_ClockConfig+0x1b8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d001      	beq.n	8003294 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e032      	b.n	80032fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032a0:	4b19      	ldr	r3, [pc, #100]	; (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4916      	ldr	r1, [pc, #88]	; (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d009      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032be:	4b12      	ldr	r3, [pc, #72]	; (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	490e      	ldr	r1, [pc, #56]	; (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032d2:	f000 f821 	bl	8003318 <HAL_RCC_GetSysClockFreq>
 80032d6:	4602      	mov	r2, r0
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	091b      	lsrs	r3, r3, #4
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	490a      	ldr	r1, [pc, #40]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 80032e4:	5ccb      	ldrb	r3, [r1, r3]
 80032e6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ea:	4a09      	ldr	r2, [pc, #36]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80032ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032ee:	4b09      	ldr	r3, [pc, #36]	; (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fd ffde 	bl	80012b4 <HAL_InitTick>

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40023c00 	.word	0x40023c00
 8003308:	40023800 	.word	0x40023800
 800330c:	08014d6c 	.word	0x08014d6c
 8003310:	20000050 	.word	0x20000050
 8003314:	20000054 	.word	0x20000054

08003318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800331c:	b094      	sub	sp, #80	; 0x50
 800331e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	647b      	str	r3, [r7, #68]	; 0x44
 8003324:	2300      	movs	r3, #0
 8003326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003328:	2300      	movs	r3, #0
 800332a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003330:	4b79      	ldr	r3, [pc, #484]	; (8003518 <HAL_RCC_GetSysClockFreq+0x200>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 030c 	and.w	r3, r3, #12
 8003338:	2b08      	cmp	r3, #8
 800333a:	d00d      	beq.n	8003358 <HAL_RCC_GetSysClockFreq+0x40>
 800333c:	2b08      	cmp	r3, #8
 800333e:	f200 80e1 	bhi.w	8003504 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0x34>
 8003346:	2b04      	cmp	r3, #4
 8003348:	d003      	beq.n	8003352 <HAL_RCC_GetSysClockFreq+0x3a>
 800334a:	e0db      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800334c:	4b73      	ldr	r3, [pc, #460]	; (800351c <HAL_RCC_GetSysClockFreq+0x204>)
 800334e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003350:	e0db      	b.n	800350a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003352:	4b73      	ldr	r3, [pc, #460]	; (8003520 <HAL_RCC_GetSysClockFreq+0x208>)
 8003354:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003356:	e0d8      	b.n	800350a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003358:	4b6f      	ldr	r3, [pc, #444]	; (8003518 <HAL_RCC_GetSysClockFreq+0x200>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003360:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003362:	4b6d      	ldr	r3, [pc, #436]	; (8003518 <HAL_RCC_GetSysClockFreq+0x200>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d063      	beq.n	8003436 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800336e:	4b6a      	ldr	r3, [pc, #424]	; (8003518 <HAL_RCC_GetSysClockFreq+0x200>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	099b      	lsrs	r3, r3, #6
 8003374:	2200      	movs	r2, #0
 8003376:	63bb      	str	r3, [r7, #56]	; 0x38
 8003378:	63fa      	str	r2, [r7, #60]	; 0x3c
 800337a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003380:	633b      	str	r3, [r7, #48]	; 0x30
 8003382:	2300      	movs	r3, #0
 8003384:	637b      	str	r3, [r7, #52]	; 0x34
 8003386:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800338a:	4622      	mov	r2, r4
 800338c:	462b      	mov	r3, r5
 800338e:	f04f 0000 	mov.w	r0, #0
 8003392:	f04f 0100 	mov.w	r1, #0
 8003396:	0159      	lsls	r1, r3, #5
 8003398:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800339c:	0150      	lsls	r0, r2, #5
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4621      	mov	r1, r4
 80033a4:	1a51      	subs	r1, r2, r1
 80033a6:	6139      	str	r1, [r7, #16]
 80033a8:	4629      	mov	r1, r5
 80033aa:	eb63 0301 	sbc.w	r3, r3, r1
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033bc:	4659      	mov	r1, fp
 80033be:	018b      	lsls	r3, r1, #6
 80033c0:	4651      	mov	r1, sl
 80033c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033c6:	4651      	mov	r1, sl
 80033c8:	018a      	lsls	r2, r1, #6
 80033ca:	4651      	mov	r1, sl
 80033cc:	ebb2 0801 	subs.w	r8, r2, r1
 80033d0:	4659      	mov	r1, fp
 80033d2:	eb63 0901 	sbc.w	r9, r3, r1
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ea:	4690      	mov	r8, r2
 80033ec:	4699      	mov	r9, r3
 80033ee:	4623      	mov	r3, r4
 80033f0:	eb18 0303 	adds.w	r3, r8, r3
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	462b      	mov	r3, r5
 80033f8:	eb49 0303 	adc.w	r3, r9, r3
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800340a:	4629      	mov	r1, r5
 800340c:	024b      	lsls	r3, r1, #9
 800340e:	4621      	mov	r1, r4
 8003410:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003414:	4621      	mov	r1, r4
 8003416:	024a      	lsls	r2, r1, #9
 8003418:	4610      	mov	r0, r2
 800341a:	4619      	mov	r1, r3
 800341c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800341e:	2200      	movs	r2, #0
 8003420:	62bb      	str	r3, [r7, #40]	; 0x28
 8003422:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003424:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003428:	f7fc ff4a 	bl	80002c0 <__aeabi_uldivmod>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4613      	mov	r3, r2
 8003432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003434:	e058      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003436:	4b38      	ldr	r3, [pc, #224]	; (8003518 <HAL_RCC_GetSysClockFreq+0x200>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	099b      	lsrs	r3, r3, #6
 800343c:	2200      	movs	r2, #0
 800343e:	4618      	mov	r0, r3
 8003440:	4611      	mov	r1, r2
 8003442:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003446:	623b      	str	r3, [r7, #32]
 8003448:	2300      	movs	r3, #0
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
 800344c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003450:	4642      	mov	r2, r8
 8003452:	464b      	mov	r3, r9
 8003454:	f04f 0000 	mov.w	r0, #0
 8003458:	f04f 0100 	mov.w	r1, #0
 800345c:	0159      	lsls	r1, r3, #5
 800345e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003462:	0150      	lsls	r0, r2, #5
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4641      	mov	r1, r8
 800346a:	ebb2 0a01 	subs.w	sl, r2, r1
 800346e:	4649      	mov	r1, r9
 8003470:	eb63 0b01 	sbc.w	fp, r3, r1
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003480:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003484:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003488:	ebb2 040a 	subs.w	r4, r2, sl
 800348c:	eb63 050b 	sbc.w	r5, r3, fp
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	00eb      	lsls	r3, r5, #3
 800349a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800349e:	00e2      	lsls	r2, r4, #3
 80034a0:	4614      	mov	r4, r2
 80034a2:	461d      	mov	r5, r3
 80034a4:	4643      	mov	r3, r8
 80034a6:	18e3      	adds	r3, r4, r3
 80034a8:	603b      	str	r3, [r7, #0]
 80034aa:	464b      	mov	r3, r9
 80034ac:	eb45 0303 	adc.w	r3, r5, r3
 80034b0:	607b      	str	r3, [r7, #4]
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034be:	4629      	mov	r1, r5
 80034c0:	028b      	lsls	r3, r1, #10
 80034c2:	4621      	mov	r1, r4
 80034c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034c8:	4621      	mov	r1, r4
 80034ca:	028a      	lsls	r2, r1, #10
 80034cc:	4610      	mov	r0, r2
 80034ce:	4619      	mov	r1, r3
 80034d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034d2:	2200      	movs	r2, #0
 80034d4:	61bb      	str	r3, [r7, #24]
 80034d6:	61fa      	str	r2, [r7, #28]
 80034d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034dc:	f7fc fef0 	bl	80002c0 <__aeabi_uldivmod>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4613      	mov	r3, r2
 80034e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_RCC_GetSysClockFreq+0x200>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	0c1b      	lsrs	r3, r3, #16
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	3301      	adds	r3, #1
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80034f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003500:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003502:	e002      	b.n	800350a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <HAL_RCC_GetSysClockFreq+0x204>)
 8003506:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800350a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800350c:	4618      	mov	r0, r3
 800350e:	3750      	adds	r7, #80	; 0x50
 8003510:	46bd      	mov	sp, r7
 8003512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003516:	bf00      	nop
 8003518:	40023800 	.word	0x40023800
 800351c:	00f42400 	.word	0x00f42400
 8003520:	007a1200 	.word	0x007a1200

08003524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003528:	4b03      	ldr	r3, [pc, #12]	; (8003538 <HAL_RCC_GetHCLKFreq+0x14>)
 800352a:	681b      	ldr	r3, [r3, #0]
}
 800352c:	4618      	mov	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	20000050 	.word	0x20000050

0800353c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003540:	f7ff fff0 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8003544:	4602      	mov	r2, r0
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	0a9b      	lsrs	r3, r3, #10
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	4903      	ldr	r1, [pc, #12]	; (8003560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003552:	5ccb      	ldrb	r3, [r1, r3]
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003558:	4618      	mov	r0, r3
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40023800 	.word	0x40023800
 8003560:	08014d7c 	.word	0x08014d7c

08003564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003568:	f7ff ffdc 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 800356c:	4602      	mov	r2, r0
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	0b5b      	lsrs	r3, r3, #13
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	4903      	ldr	r1, [pc, #12]	; (8003588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800357a:	5ccb      	ldrb	r3, [r1, r3]
 800357c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003580:	4618      	mov	r0, r3
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40023800 	.word	0x40023800
 8003588:	08014d7c 	.word	0x08014d7c

0800358c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e03f      	b.n	800361e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fd fb72 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2224      	movs	r2, #36	; 0x24
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 fcbf 	bl	8003f54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695a      	ldr	r2, [r3, #20]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003604:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003626:	b480      	push	{r7}
 8003628:	b085      	sub	sp, #20
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	4613      	mov	r3, r2
 8003632:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b20      	cmp	r3, #32
 800363e:	d130      	bne.n	80036a2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <HAL_UART_Transmit_IT+0x26>
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e029      	b.n	80036a4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_UART_Transmit_IT+0x38>
 800365a:	2302      	movs	r3, #2
 800365c:	e022      	b.n	80036a4 <HAL_UART_Transmit_IT+0x7e>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	88fa      	ldrh	r2, [r7, #6]
 8003670:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	88fa      	ldrh	r2, [r7, #6]
 8003676:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2221      	movs	r2, #33	; 0x21
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800369c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	e000      	b.n	80036a4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80036a2:	2302      	movs	r3, #2
  }
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b0ba      	sub	sp, #232	; 0xe8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80036dc:	2300      	movs	r3, #0
 80036de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80036ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10f      	bne.n	8003716 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d009      	beq.n	8003716 <HAL_UART_IRQHandler+0x66>
 8003702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fb65 	bl	8003dde <UART_Receive_IT>
      return;
 8003714:	e256      	b.n	8003bc4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003716:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 80de 	beq.w	80038dc <HAL_UART_IRQHandler+0x22c>
 8003720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d106      	bne.n	800373a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800372c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003730:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 80d1 	beq.w	80038dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800373a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00b      	beq.n	800375e <HAL_UART_IRQHandler+0xae>
 8003746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800374a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f043 0201 	orr.w	r2, r3, #1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800375e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <HAL_UART_IRQHandler+0xd2>
 800376a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d005      	beq.n	8003782 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f043 0202 	orr.w	r2, r3, #2
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00b      	beq.n	80037a6 <HAL_UART_IRQHandler+0xf6>
 800378e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f043 0204 	orr.w	r2, r3, #4
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d011      	beq.n	80037d6 <HAL_UART_IRQHandler+0x126>
 80037b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d105      	bne.n	80037ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d005      	beq.n	80037d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f043 0208 	orr.w	r2, r3, #8
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 81ed 	beq.w	8003bba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_UART_IRQHandler+0x14e>
 80037ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037f0:	f003 0320 	and.w	r3, r3, #32
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 faf0 	bl	8003dde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003808:	2b40      	cmp	r3, #64	; 0x40
 800380a:	bf0c      	ite	eq
 800380c:	2301      	moveq	r3, #1
 800380e:	2300      	movne	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d103      	bne.n	800382a <HAL_UART_IRQHandler+0x17a>
 8003822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d04f      	beq.n	80038ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f9f8 	bl	8003c20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383a:	2b40      	cmp	r3, #64	; 0x40
 800383c:	d141      	bne.n	80038c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3314      	adds	r3, #20
 8003844:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003848:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800384c:	e853 3f00 	ldrex	r3, [r3]
 8003850:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003854:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800385c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3314      	adds	r3, #20
 8003866:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800386a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800386e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003876:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800387a:	e841 2300 	strex	r3, r2, [r1]
 800387e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003882:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1d9      	bne.n	800383e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388e:	2b00      	cmp	r3, #0
 8003890:	d013      	beq.n	80038ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	4a7d      	ldr	r2, [pc, #500]	; (8003a8c <HAL_UART_IRQHandler+0x3dc>)
 8003898:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fd fefd 	bl	800169e <HAL_DMA_Abort_IT>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d016      	beq.n	80038d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038b4:	4610      	mov	r0, r2
 80038b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b8:	e00e      	b.n	80038d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f99a 	bl	8003bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c0:	e00a      	b.n	80038d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f996 	bl	8003bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c8:	e006      	b.n	80038d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f992 	bl	8003bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80038d6:	e170      	b.n	8003bba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d8:	bf00      	nop
    return;
 80038da:	e16e      	b.n	8003bba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	f040 814a 	bne.w	8003b7a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 8143 	beq.w	8003b7a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 813c 	beq.w	8003b7a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003902:	2300      	movs	r3, #0
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	f040 80b4 	bne.w	8003a90 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003934:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8140 	beq.w	8003bbe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003942:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003946:	429a      	cmp	r2, r3
 8003948:	f080 8139 	bcs.w	8003bbe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003952:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800395e:	f000 8088 	beq.w	8003a72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	330c      	adds	r3, #12
 8003968:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003978:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800397c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003980:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	330c      	adds	r3, #12
 800398a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800398e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003992:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003996:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800399a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800399e:	e841 2300 	strex	r3, r2, [r1]
 80039a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1d9      	bne.n	8003962 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3314      	adds	r3, #20
 80039b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039b8:	e853 3f00 	ldrex	r3, [r3]
 80039bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039c0:	f023 0301 	bic.w	r3, r3, #1
 80039c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3314      	adds	r3, #20
 80039ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1e1      	bne.n	80039ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3314      	adds	r3, #20
 80039f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80039fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3314      	adds	r3, #20
 8003a0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a16:	e841 2300 	strex	r3, r2, [r1]
 8003a1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e3      	bne.n	80039ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	330c      	adds	r3, #12
 8003a36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a3a:	e853 3f00 	ldrex	r3, [r3]
 8003a3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a42:	f023 0310 	bic.w	r3, r3, #16
 8003a46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	330c      	adds	r3, #12
 8003a50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a54:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a56:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a5c:	e841 2300 	strex	r3, r2, [r1]
 8003a60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1e3      	bne.n	8003a30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fd fda6 	bl	80015be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	4619      	mov	r1, r3
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f8c0 	bl	8003c08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a88:	e099      	b.n	8003bbe <HAL_UART_IRQHandler+0x50e>
 8003a8a:	bf00      	nop
 8003a8c:	08003ce7 	.word	0x08003ce7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 808b 	beq.w	8003bc2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003aac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 8086 	beq.w	8003bc2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	330c      	adds	r3, #12
 8003abc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003acc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	330c      	adds	r3, #12
 8003ad6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ada:	647a      	str	r2, [r7, #68]	; 0x44
 8003adc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ade:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ae0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ae2:	e841 2300 	strex	r3, r2, [r1]
 8003ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1e3      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3314      	adds	r3, #20
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	e853 3f00 	ldrex	r3, [r3]
 8003afc:	623b      	str	r3, [r7, #32]
   return(result);
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	f023 0301 	bic.w	r3, r3, #1
 8003b04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3314      	adds	r3, #20
 8003b0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b12:	633a      	str	r2, [r7, #48]	; 0x30
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b1a:	e841 2300 	strex	r3, r2, [r1]
 8003b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1e3      	bne.n	8003aee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	330c      	adds	r3, #12
 8003b3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	e853 3f00 	ldrex	r3, [r3]
 8003b42:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 0310 	bic.w	r3, r3, #16
 8003b4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	330c      	adds	r3, #12
 8003b54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b58:	61fa      	str	r2, [r7, #28]
 8003b5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5c:	69b9      	ldr	r1, [r7, #24]
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	e841 2300 	strex	r3, r2, [r1]
 8003b64:	617b      	str	r3, [r7, #20]
   return(result);
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e3      	bne.n	8003b34 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b70:	4619      	mov	r1, r3
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f848 	bl	8003c08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b78:	e023      	b.n	8003bc2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d009      	beq.n	8003b9a <HAL_UART_IRQHandler+0x4ea>
 8003b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f8bb 	bl	8003d0e <UART_Transmit_IT>
    return;
 8003b98:	e014      	b.n	8003bc4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00e      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x514>
 8003ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d008      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f8fb 	bl	8003dae <UART_EndTransmit_IT>
    return;
 8003bb8:	e004      	b.n	8003bc4 <HAL_UART_IRQHandler+0x514>
    return;
 8003bba:	bf00      	nop
 8003bbc:	e002      	b.n	8003bc4 <HAL_UART_IRQHandler+0x514>
      return;
 8003bbe:	bf00      	nop
 8003bc0:	e000      	b.n	8003bc4 <HAL_UART_IRQHandler+0x514>
      return;
 8003bc2:	bf00      	nop
  }
}
 8003bc4:	37e8      	adds	r7, #232	; 0xe8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop

08003bcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b095      	sub	sp, #84	; 0x54
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	330c      	adds	r3, #12
 8003c2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c32:	e853 3f00 	ldrex	r3, [r3]
 8003c36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	330c      	adds	r3, #12
 8003c46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c48:	643a      	str	r2, [r7, #64]	; 0x40
 8003c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c50:	e841 2300 	strex	r3, r2, [r1]
 8003c54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e5      	bne.n	8003c28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3314      	adds	r3, #20
 8003c62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	e853 3f00 	ldrex	r3, [r3]
 8003c6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f023 0301 	bic.w	r3, r3, #1
 8003c72:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3314      	adds	r3, #20
 8003c7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c84:	e841 2300 	strex	r3, r2, [r1]
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e5      	bne.n	8003c5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d119      	bne.n	8003ccc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	330c      	adds	r3, #12
 8003c9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	e853 3f00 	ldrex	r3, [r3]
 8003ca6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f023 0310 	bic.w	r3, r3, #16
 8003cae:	647b      	str	r3, [r7, #68]	; 0x44
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	330c      	adds	r3, #12
 8003cb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cb8:	61ba      	str	r2, [r7, #24]
 8003cba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbc:	6979      	ldr	r1, [r7, #20]
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	e841 2300 	strex	r3, r2, [r1]
 8003cc4:	613b      	str	r3, [r7, #16]
   return(result);
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1e5      	bne.n	8003c98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003cda:	bf00      	nop
 8003cdc:	3754      	adds	r7, #84	; 0x54
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b084      	sub	sp, #16
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f7ff ff77 	bl	8003bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d06:	bf00      	nop
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b085      	sub	sp, #20
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b21      	cmp	r3, #33	; 0x21
 8003d20:	d13e      	bne.n	8003da0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2a:	d114      	bne.n	8003d56 <UART_Transmit_IT+0x48>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d110      	bne.n	8003d56 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	1c9a      	adds	r2, r3, #2
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	621a      	str	r2, [r3, #32]
 8003d54:	e008      	b.n	8003d68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	1c59      	adds	r1, r3, #1
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6211      	str	r1, [r2, #32]
 8003d60:	781a      	ldrb	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	4619      	mov	r1, r3
 8003d76:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10f      	bne.n	8003d9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e000      	b.n	8003da2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003da0:	2302      	movs	r3, #2
  }
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff fefc 	bl	8003bcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b08c      	sub	sp, #48	; 0x30
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b22      	cmp	r3, #34	; 0x22
 8003df0:	f040 80ab 	bne.w	8003f4a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dfc:	d117      	bne.n	8003e2e <UART_Receive_IT+0x50>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d113      	bne.n	8003e2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e26:	1c9a      	adds	r2, r3, #2
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e2c:	e026      	b.n	8003e7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e40:	d007      	beq.n	8003e52 <UART_Receive_IT+0x74>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <UART_Receive_IT+0x82>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5c:	701a      	strb	r2, [r3, #0]
 8003e5e:	e008      	b.n	8003e72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	4619      	mov	r1, r3
 8003e8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d15a      	bne.n	8003f46 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0220 	bic.w	r2, r2, #32
 8003e9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695a      	ldr	r2, [r3, #20]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0201 	bic.w	r2, r2, #1
 8003ebe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d135      	bne.n	8003f3c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	330c      	adds	r3, #12
 8003edc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f023 0310 	bic.w	r3, r3, #16
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	330c      	adds	r3, #12
 8003ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef6:	623a      	str	r2, [r7, #32]
 8003ef8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	69f9      	ldr	r1, [r7, #28]
 8003efc:	6a3a      	ldr	r2, [r7, #32]
 8003efe:	e841 2300 	strex	r3, r2, [r1]
 8003f02:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1e5      	bne.n	8003ed6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0310 	and.w	r3, r3, #16
 8003f14:	2b10      	cmp	r3, #16
 8003f16:	d10a      	bne.n	8003f2e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f32:	4619      	mov	r1, r3
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff fe67 	bl	8003c08 <HAL_UARTEx_RxEventCallback>
 8003f3a:	e002      	b.n	8003f42 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff fe4f 	bl	8003be0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	e002      	b.n	8003f4c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	e000      	b.n	8003f4c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003f4a:	2302      	movs	r3, #2
  }
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3730      	adds	r7, #48	; 0x30
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f58:	b0c0      	sub	sp, #256	; 0x100
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f70:	68d9      	ldr	r1, [r3, #12]
 8003f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	ea40 0301 	orr.w	r3, r0, r1
 8003f7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	431a      	orrs	r2, r3
 8003f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fac:	f021 010c 	bic.w	r1, r1, #12
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003fba:	430b      	orrs	r3, r1
 8003fbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fce:	6999      	ldr	r1, [r3, #24]
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	ea40 0301 	orr.w	r3, r0, r1
 8003fda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	4b8f      	ldr	r3, [pc, #572]	; (8004220 <UART_SetConfig+0x2cc>)
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d005      	beq.n	8003ff4 <UART_SetConfig+0xa0>
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4b8d      	ldr	r3, [pc, #564]	; (8004224 <UART_SetConfig+0x2d0>)
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d104      	bne.n	8003ffe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ff4:	f7ff fab6 	bl	8003564 <HAL_RCC_GetPCLK2Freq>
 8003ff8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ffc:	e003      	b.n	8004006 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ffe:	f7ff fa9d 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 8004002:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004010:	f040 810c 	bne.w	800422c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004018:	2200      	movs	r2, #0
 800401a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800401e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004022:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004026:	4622      	mov	r2, r4
 8004028:	462b      	mov	r3, r5
 800402a:	1891      	adds	r1, r2, r2
 800402c:	65b9      	str	r1, [r7, #88]	; 0x58
 800402e:	415b      	adcs	r3, r3
 8004030:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004032:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004036:	4621      	mov	r1, r4
 8004038:	eb12 0801 	adds.w	r8, r2, r1
 800403c:	4629      	mov	r1, r5
 800403e:	eb43 0901 	adc.w	r9, r3, r1
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	f04f 0300 	mov.w	r3, #0
 800404a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800404e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004052:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004056:	4690      	mov	r8, r2
 8004058:	4699      	mov	r9, r3
 800405a:	4623      	mov	r3, r4
 800405c:	eb18 0303 	adds.w	r3, r8, r3
 8004060:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004064:	462b      	mov	r3, r5
 8004066:	eb49 0303 	adc.w	r3, r9, r3
 800406a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800407a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800407e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004082:	460b      	mov	r3, r1
 8004084:	18db      	adds	r3, r3, r3
 8004086:	653b      	str	r3, [r7, #80]	; 0x50
 8004088:	4613      	mov	r3, r2
 800408a:	eb42 0303 	adc.w	r3, r2, r3
 800408e:	657b      	str	r3, [r7, #84]	; 0x54
 8004090:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004094:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004098:	f7fc f912 	bl	80002c0 <__aeabi_uldivmod>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4b61      	ldr	r3, [pc, #388]	; (8004228 <UART_SetConfig+0x2d4>)
 80040a2:	fba3 2302 	umull	r2, r3, r3, r2
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	011c      	lsls	r4, r3, #4
 80040aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ae:	2200      	movs	r2, #0
 80040b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040bc:	4642      	mov	r2, r8
 80040be:	464b      	mov	r3, r9
 80040c0:	1891      	adds	r1, r2, r2
 80040c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80040c4:	415b      	adcs	r3, r3
 80040c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040cc:	4641      	mov	r1, r8
 80040ce:	eb12 0a01 	adds.w	sl, r2, r1
 80040d2:	4649      	mov	r1, r9
 80040d4:	eb43 0b01 	adc.w	fp, r3, r1
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040ec:	4692      	mov	sl, r2
 80040ee:	469b      	mov	fp, r3
 80040f0:	4643      	mov	r3, r8
 80040f2:	eb1a 0303 	adds.w	r3, sl, r3
 80040f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040fa:	464b      	mov	r3, r9
 80040fc:	eb4b 0303 	adc.w	r3, fp, r3
 8004100:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004110:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004114:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004118:	460b      	mov	r3, r1
 800411a:	18db      	adds	r3, r3, r3
 800411c:	643b      	str	r3, [r7, #64]	; 0x40
 800411e:	4613      	mov	r3, r2
 8004120:	eb42 0303 	adc.w	r3, r2, r3
 8004124:	647b      	str	r3, [r7, #68]	; 0x44
 8004126:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800412a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800412e:	f7fc f8c7 	bl	80002c0 <__aeabi_uldivmod>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4611      	mov	r1, r2
 8004138:	4b3b      	ldr	r3, [pc, #236]	; (8004228 <UART_SetConfig+0x2d4>)
 800413a:	fba3 2301 	umull	r2, r3, r3, r1
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	2264      	movs	r2, #100	; 0x64
 8004142:	fb02 f303 	mul.w	r3, r2, r3
 8004146:	1acb      	subs	r3, r1, r3
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800414e:	4b36      	ldr	r3, [pc, #216]	; (8004228 <UART_SetConfig+0x2d4>)
 8004150:	fba3 2302 	umull	r2, r3, r3, r2
 8004154:	095b      	lsrs	r3, r3, #5
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800415c:	441c      	add	r4, r3
 800415e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004162:	2200      	movs	r2, #0
 8004164:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004168:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800416c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004170:	4642      	mov	r2, r8
 8004172:	464b      	mov	r3, r9
 8004174:	1891      	adds	r1, r2, r2
 8004176:	63b9      	str	r1, [r7, #56]	; 0x38
 8004178:	415b      	adcs	r3, r3
 800417a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800417c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004180:	4641      	mov	r1, r8
 8004182:	1851      	adds	r1, r2, r1
 8004184:	6339      	str	r1, [r7, #48]	; 0x30
 8004186:	4649      	mov	r1, r9
 8004188:	414b      	adcs	r3, r1
 800418a:	637b      	str	r3, [r7, #52]	; 0x34
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004198:	4659      	mov	r1, fp
 800419a:	00cb      	lsls	r3, r1, #3
 800419c:	4651      	mov	r1, sl
 800419e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041a2:	4651      	mov	r1, sl
 80041a4:	00ca      	lsls	r2, r1, #3
 80041a6:	4610      	mov	r0, r2
 80041a8:	4619      	mov	r1, r3
 80041aa:	4603      	mov	r3, r0
 80041ac:	4642      	mov	r2, r8
 80041ae:	189b      	adds	r3, r3, r2
 80041b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041b4:	464b      	mov	r3, r9
 80041b6:	460a      	mov	r2, r1
 80041b8:	eb42 0303 	adc.w	r3, r2, r3
 80041bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80041d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80041d4:	460b      	mov	r3, r1
 80041d6:	18db      	adds	r3, r3, r3
 80041d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041da:	4613      	mov	r3, r2
 80041dc:	eb42 0303 	adc.w	r3, r2, r3
 80041e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041ea:	f7fc f869 	bl	80002c0 <__aeabi_uldivmod>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4b0d      	ldr	r3, [pc, #52]	; (8004228 <UART_SetConfig+0x2d4>)
 80041f4:	fba3 1302 	umull	r1, r3, r3, r2
 80041f8:	095b      	lsrs	r3, r3, #5
 80041fa:	2164      	movs	r1, #100	; 0x64
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	3332      	adds	r3, #50	; 0x32
 8004206:	4a08      	ldr	r2, [pc, #32]	; (8004228 <UART_SetConfig+0x2d4>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	f003 0207 	and.w	r2, r3, #7
 8004212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4422      	add	r2, r4
 800421a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800421c:	e105      	b.n	800442a <UART_SetConfig+0x4d6>
 800421e:	bf00      	nop
 8004220:	40011000 	.word	0x40011000
 8004224:	40011400 	.word	0x40011400
 8004228:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800422c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004230:	2200      	movs	r2, #0
 8004232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004236:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800423a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800423e:	4642      	mov	r2, r8
 8004240:	464b      	mov	r3, r9
 8004242:	1891      	adds	r1, r2, r2
 8004244:	6239      	str	r1, [r7, #32]
 8004246:	415b      	adcs	r3, r3
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
 800424a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800424e:	4641      	mov	r1, r8
 8004250:	1854      	adds	r4, r2, r1
 8004252:	4649      	mov	r1, r9
 8004254:	eb43 0501 	adc.w	r5, r3, r1
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	00eb      	lsls	r3, r5, #3
 8004262:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004266:	00e2      	lsls	r2, r4, #3
 8004268:	4614      	mov	r4, r2
 800426a:	461d      	mov	r5, r3
 800426c:	4643      	mov	r3, r8
 800426e:	18e3      	adds	r3, r4, r3
 8004270:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004274:	464b      	mov	r3, r9
 8004276:	eb45 0303 	adc.w	r3, r5, r3
 800427a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800427e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800428a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800429a:	4629      	mov	r1, r5
 800429c:	008b      	lsls	r3, r1, #2
 800429e:	4621      	mov	r1, r4
 80042a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042a4:	4621      	mov	r1, r4
 80042a6:	008a      	lsls	r2, r1, #2
 80042a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042ac:	f7fc f808 	bl	80002c0 <__aeabi_uldivmod>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4b60      	ldr	r3, [pc, #384]	; (8004438 <UART_SetConfig+0x4e4>)
 80042b6:	fba3 2302 	umull	r2, r3, r3, r2
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	011c      	lsls	r4, r3, #4
 80042be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80042d0:	4642      	mov	r2, r8
 80042d2:	464b      	mov	r3, r9
 80042d4:	1891      	adds	r1, r2, r2
 80042d6:	61b9      	str	r1, [r7, #24]
 80042d8:	415b      	adcs	r3, r3
 80042da:	61fb      	str	r3, [r7, #28]
 80042dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042e0:	4641      	mov	r1, r8
 80042e2:	1851      	adds	r1, r2, r1
 80042e4:	6139      	str	r1, [r7, #16]
 80042e6:	4649      	mov	r1, r9
 80042e8:	414b      	adcs	r3, r1
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042f8:	4659      	mov	r1, fp
 80042fa:	00cb      	lsls	r3, r1, #3
 80042fc:	4651      	mov	r1, sl
 80042fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004302:	4651      	mov	r1, sl
 8004304:	00ca      	lsls	r2, r1, #3
 8004306:	4610      	mov	r0, r2
 8004308:	4619      	mov	r1, r3
 800430a:	4603      	mov	r3, r0
 800430c:	4642      	mov	r2, r8
 800430e:	189b      	adds	r3, r3, r2
 8004310:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004314:	464b      	mov	r3, r9
 8004316:	460a      	mov	r2, r1
 8004318:	eb42 0303 	adc.w	r3, r2, r3
 800431c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	67bb      	str	r3, [r7, #120]	; 0x78
 800432a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004338:	4649      	mov	r1, r9
 800433a:	008b      	lsls	r3, r1, #2
 800433c:	4641      	mov	r1, r8
 800433e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004342:	4641      	mov	r1, r8
 8004344:	008a      	lsls	r2, r1, #2
 8004346:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800434a:	f7fb ffb9 	bl	80002c0 <__aeabi_uldivmod>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4b39      	ldr	r3, [pc, #228]	; (8004438 <UART_SetConfig+0x4e4>)
 8004354:	fba3 1302 	umull	r1, r3, r3, r2
 8004358:	095b      	lsrs	r3, r3, #5
 800435a:	2164      	movs	r1, #100	; 0x64
 800435c:	fb01 f303 	mul.w	r3, r1, r3
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	3332      	adds	r3, #50	; 0x32
 8004366:	4a34      	ldr	r2, [pc, #208]	; (8004438 <UART_SetConfig+0x4e4>)
 8004368:	fba2 2303 	umull	r2, r3, r2, r3
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004372:	441c      	add	r4, r3
 8004374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004378:	2200      	movs	r2, #0
 800437a:	673b      	str	r3, [r7, #112]	; 0x70
 800437c:	677a      	str	r2, [r7, #116]	; 0x74
 800437e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004382:	4642      	mov	r2, r8
 8004384:	464b      	mov	r3, r9
 8004386:	1891      	adds	r1, r2, r2
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	415b      	adcs	r3, r3
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004392:	4641      	mov	r1, r8
 8004394:	1851      	adds	r1, r2, r1
 8004396:	6039      	str	r1, [r7, #0]
 8004398:	4649      	mov	r1, r9
 800439a:	414b      	adcs	r3, r1
 800439c:	607b      	str	r3, [r7, #4]
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043aa:	4659      	mov	r1, fp
 80043ac:	00cb      	lsls	r3, r1, #3
 80043ae:	4651      	mov	r1, sl
 80043b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043b4:	4651      	mov	r1, sl
 80043b6:	00ca      	lsls	r2, r1, #3
 80043b8:	4610      	mov	r0, r2
 80043ba:	4619      	mov	r1, r3
 80043bc:	4603      	mov	r3, r0
 80043be:	4642      	mov	r2, r8
 80043c0:	189b      	adds	r3, r3, r2
 80043c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80043c4:	464b      	mov	r3, r9
 80043c6:	460a      	mov	r2, r1
 80043c8:	eb42 0303 	adc.w	r3, r2, r3
 80043cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	663b      	str	r3, [r7, #96]	; 0x60
 80043d8:	667a      	str	r2, [r7, #100]	; 0x64
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80043e6:	4649      	mov	r1, r9
 80043e8:	008b      	lsls	r3, r1, #2
 80043ea:	4641      	mov	r1, r8
 80043ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043f0:	4641      	mov	r1, r8
 80043f2:	008a      	lsls	r2, r1, #2
 80043f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043f8:	f7fb ff62 	bl	80002c0 <__aeabi_uldivmod>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4b0d      	ldr	r3, [pc, #52]	; (8004438 <UART_SetConfig+0x4e4>)
 8004402:	fba3 1302 	umull	r1, r3, r3, r2
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	2164      	movs	r1, #100	; 0x64
 800440a:	fb01 f303 	mul.w	r3, r1, r3
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	3332      	adds	r3, #50	; 0x32
 8004414:	4a08      	ldr	r2, [pc, #32]	; (8004438 <UART_SetConfig+0x4e4>)
 8004416:	fba2 2303 	umull	r2, r3, r2, r3
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	f003 020f 	and.w	r2, r3, #15
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4422      	add	r2, r4
 8004428:	609a      	str	r2, [r3, #8]
}
 800442a:	bf00      	nop
 800442c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004430:	46bd      	mov	sp, r7
 8004432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004436:	bf00      	nop
 8004438:	51eb851f 	.word	0x51eb851f

0800443c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8004442:	4b8d      	ldr	r3, [pc, #564]	; (8004678 <MX_LWIP_Init+0x23c>)
 8004444:	220a      	movs	r2, #10
 8004446:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 8004448:	4b8b      	ldr	r3, [pc, #556]	; (8004678 <MX_LWIP_Init+0x23c>)
 800444a:	2200      	movs	r2, #0
 800444c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 800444e:	4b8a      	ldr	r3, [pc, #552]	; (8004678 <MX_LWIP_Init+0x23c>)
 8004450:	2202      	movs	r2, #2
 8004452:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8004454:	4b88      	ldr	r3, [pc, #544]	; (8004678 <MX_LWIP_Init+0x23c>)
 8004456:	220a      	movs	r2, #10
 8004458:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800445a:	4b88      	ldr	r3, [pc, #544]	; (800467c <MX_LWIP_Init+0x240>)
 800445c:	22ff      	movs	r2, #255	; 0xff
 800445e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004460:	4b86      	ldr	r3, [pc, #536]	; (800467c <MX_LWIP_Init+0x240>)
 8004462:	22ff      	movs	r2, #255	; 0xff
 8004464:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004466:	4b85      	ldr	r3, [pc, #532]	; (800467c <MX_LWIP_Init+0x240>)
 8004468:	22ff      	movs	r2, #255	; 0xff
 800446a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800446c:	4b83      	ldr	r3, [pc, #524]	; (800467c <MX_LWIP_Init+0x240>)
 800446e:	2200      	movs	r2, #0
 8004470:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8004472:	4b83      	ldr	r3, [pc, #524]	; (8004680 <MX_LWIP_Init+0x244>)
 8004474:	220a      	movs	r2, #10
 8004476:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8004478:	4b81      	ldr	r3, [pc, #516]	; (8004680 <MX_LWIP_Init+0x244>)
 800447a:	2200      	movs	r2, #0
 800447c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 2;
 800447e:	4b80      	ldr	r3, [pc, #512]	; (8004680 <MX_LWIP_Init+0x244>)
 8004480:	2202      	movs	r2, #2
 8004482:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004484:	4b7e      	ldr	r3, [pc, #504]	; (8004680 <MX_LWIP_Init+0x244>)
 8004486:	2201      	movs	r2, #1
 8004488:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800448a:	f002 f921 	bl	80066d0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800448e:	4b7a      	ldr	r3, [pc, #488]	; (8004678 <MX_LWIP_Init+0x23c>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	061a      	lsls	r2, r3, #24
 8004494:	4b78      	ldr	r3, [pc, #480]	; (8004678 <MX_LWIP_Init+0x23c>)
 8004496:	785b      	ldrb	r3, [r3, #1]
 8004498:	041b      	lsls	r3, r3, #16
 800449a:	431a      	orrs	r2, r3
 800449c:	4b76      	ldr	r3, [pc, #472]	; (8004678 <MX_LWIP_Init+0x23c>)
 800449e:	789b      	ldrb	r3, [r3, #2]
 80044a0:	021b      	lsls	r3, r3, #8
 80044a2:	4313      	orrs	r3, r2
 80044a4:	4a74      	ldr	r2, [pc, #464]	; (8004678 <MX_LWIP_Init+0x23c>)
 80044a6:	78d2      	ldrb	r2, [r2, #3]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	061a      	lsls	r2, r3, #24
 80044ac:	4b72      	ldr	r3, [pc, #456]	; (8004678 <MX_LWIP_Init+0x23c>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	0619      	lsls	r1, r3, #24
 80044b2:	4b71      	ldr	r3, [pc, #452]	; (8004678 <MX_LWIP_Init+0x23c>)
 80044b4:	785b      	ldrb	r3, [r3, #1]
 80044b6:	041b      	lsls	r3, r3, #16
 80044b8:	4319      	orrs	r1, r3
 80044ba:	4b6f      	ldr	r3, [pc, #444]	; (8004678 <MX_LWIP_Init+0x23c>)
 80044bc:	789b      	ldrb	r3, [r3, #2]
 80044be:	021b      	lsls	r3, r3, #8
 80044c0:	430b      	orrs	r3, r1
 80044c2:	496d      	ldr	r1, [pc, #436]	; (8004678 <MX_LWIP_Init+0x23c>)
 80044c4:	78c9      	ldrb	r1, [r1, #3]
 80044c6:	430b      	orrs	r3, r1
 80044c8:	021b      	lsls	r3, r3, #8
 80044ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044ce:	431a      	orrs	r2, r3
 80044d0:	4b69      	ldr	r3, [pc, #420]	; (8004678 <MX_LWIP_Init+0x23c>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	0619      	lsls	r1, r3, #24
 80044d6:	4b68      	ldr	r3, [pc, #416]	; (8004678 <MX_LWIP_Init+0x23c>)
 80044d8:	785b      	ldrb	r3, [r3, #1]
 80044da:	041b      	lsls	r3, r3, #16
 80044dc:	4319      	orrs	r1, r3
 80044de:	4b66      	ldr	r3, [pc, #408]	; (8004678 <MX_LWIP_Init+0x23c>)
 80044e0:	789b      	ldrb	r3, [r3, #2]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	430b      	orrs	r3, r1
 80044e6:	4964      	ldr	r1, [pc, #400]	; (8004678 <MX_LWIP_Init+0x23c>)
 80044e8:	78c9      	ldrb	r1, [r1, #3]
 80044ea:	430b      	orrs	r3, r1
 80044ec:	0a1b      	lsrs	r3, r3, #8
 80044ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80044f2:	431a      	orrs	r2, r3
 80044f4:	4b60      	ldr	r3, [pc, #384]	; (8004678 <MX_LWIP_Init+0x23c>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	0619      	lsls	r1, r3, #24
 80044fa:	4b5f      	ldr	r3, [pc, #380]	; (8004678 <MX_LWIP_Init+0x23c>)
 80044fc:	785b      	ldrb	r3, [r3, #1]
 80044fe:	041b      	lsls	r3, r3, #16
 8004500:	4319      	orrs	r1, r3
 8004502:	4b5d      	ldr	r3, [pc, #372]	; (8004678 <MX_LWIP_Init+0x23c>)
 8004504:	789b      	ldrb	r3, [r3, #2]
 8004506:	021b      	lsls	r3, r3, #8
 8004508:	430b      	orrs	r3, r1
 800450a:	495b      	ldr	r1, [pc, #364]	; (8004678 <MX_LWIP_Init+0x23c>)
 800450c:	78c9      	ldrb	r1, [r1, #3]
 800450e:	430b      	orrs	r3, r1
 8004510:	0e1b      	lsrs	r3, r3, #24
 8004512:	4313      	orrs	r3, r2
 8004514:	4a5b      	ldr	r2, [pc, #364]	; (8004684 <MX_LWIP_Init+0x248>)
 8004516:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004518:	4b58      	ldr	r3, [pc, #352]	; (800467c <MX_LWIP_Init+0x240>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	061a      	lsls	r2, r3, #24
 800451e:	4b57      	ldr	r3, [pc, #348]	; (800467c <MX_LWIP_Init+0x240>)
 8004520:	785b      	ldrb	r3, [r3, #1]
 8004522:	041b      	lsls	r3, r3, #16
 8004524:	431a      	orrs	r2, r3
 8004526:	4b55      	ldr	r3, [pc, #340]	; (800467c <MX_LWIP_Init+0x240>)
 8004528:	789b      	ldrb	r3, [r3, #2]
 800452a:	021b      	lsls	r3, r3, #8
 800452c:	4313      	orrs	r3, r2
 800452e:	4a53      	ldr	r2, [pc, #332]	; (800467c <MX_LWIP_Init+0x240>)
 8004530:	78d2      	ldrb	r2, [r2, #3]
 8004532:	4313      	orrs	r3, r2
 8004534:	061a      	lsls	r2, r3, #24
 8004536:	4b51      	ldr	r3, [pc, #324]	; (800467c <MX_LWIP_Init+0x240>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	0619      	lsls	r1, r3, #24
 800453c:	4b4f      	ldr	r3, [pc, #316]	; (800467c <MX_LWIP_Init+0x240>)
 800453e:	785b      	ldrb	r3, [r3, #1]
 8004540:	041b      	lsls	r3, r3, #16
 8004542:	4319      	orrs	r1, r3
 8004544:	4b4d      	ldr	r3, [pc, #308]	; (800467c <MX_LWIP_Init+0x240>)
 8004546:	789b      	ldrb	r3, [r3, #2]
 8004548:	021b      	lsls	r3, r3, #8
 800454a:	430b      	orrs	r3, r1
 800454c:	494b      	ldr	r1, [pc, #300]	; (800467c <MX_LWIP_Init+0x240>)
 800454e:	78c9      	ldrb	r1, [r1, #3]
 8004550:	430b      	orrs	r3, r1
 8004552:	021b      	lsls	r3, r3, #8
 8004554:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004558:	431a      	orrs	r2, r3
 800455a:	4b48      	ldr	r3, [pc, #288]	; (800467c <MX_LWIP_Init+0x240>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	0619      	lsls	r1, r3, #24
 8004560:	4b46      	ldr	r3, [pc, #280]	; (800467c <MX_LWIP_Init+0x240>)
 8004562:	785b      	ldrb	r3, [r3, #1]
 8004564:	041b      	lsls	r3, r3, #16
 8004566:	4319      	orrs	r1, r3
 8004568:	4b44      	ldr	r3, [pc, #272]	; (800467c <MX_LWIP_Init+0x240>)
 800456a:	789b      	ldrb	r3, [r3, #2]
 800456c:	021b      	lsls	r3, r3, #8
 800456e:	430b      	orrs	r3, r1
 8004570:	4942      	ldr	r1, [pc, #264]	; (800467c <MX_LWIP_Init+0x240>)
 8004572:	78c9      	ldrb	r1, [r1, #3]
 8004574:	430b      	orrs	r3, r1
 8004576:	0a1b      	lsrs	r3, r3, #8
 8004578:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800457c:	431a      	orrs	r2, r3
 800457e:	4b3f      	ldr	r3, [pc, #252]	; (800467c <MX_LWIP_Init+0x240>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	0619      	lsls	r1, r3, #24
 8004584:	4b3d      	ldr	r3, [pc, #244]	; (800467c <MX_LWIP_Init+0x240>)
 8004586:	785b      	ldrb	r3, [r3, #1]
 8004588:	041b      	lsls	r3, r3, #16
 800458a:	4319      	orrs	r1, r3
 800458c:	4b3b      	ldr	r3, [pc, #236]	; (800467c <MX_LWIP_Init+0x240>)
 800458e:	789b      	ldrb	r3, [r3, #2]
 8004590:	021b      	lsls	r3, r3, #8
 8004592:	430b      	orrs	r3, r1
 8004594:	4939      	ldr	r1, [pc, #228]	; (800467c <MX_LWIP_Init+0x240>)
 8004596:	78c9      	ldrb	r1, [r1, #3]
 8004598:	430b      	orrs	r3, r1
 800459a:	0e1b      	lsrs	r3, r3, #24
 800459c:	4313      	orrs	r3, r2
 800459e:	4a3a      	ldr	r2, [pc, #232]	; (8004688 <MX_LWIP_Init+0x24c>)
 80045a0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80045a2:	4b37      	ldr	r3, [pc, #220]	; (8004680 <MX_LWIP_Init+0x244>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	061a      	lsls	r2, r3, #24
 80045a8:	4b35      	ldr	r3, [pc, #212]	; (8004680 <MX_LWIP_Init+0x244>)
 80045aa:	785b      	ldrb	r3, [r3, #1]
 80045ac:	041b      	lsls	r3, r3, #16
 80045ae:	431a      	orrs	r2, r3
 80045b0:	4b33      	ldr	r3, [pc, #204]	; (8004680 <MX_LWIP_Init+0x244>)
 80045b2:	789b      	ldrb	r3, [r3, #2]
 80045b4:	021b      	lsls	r3, r3, #8
 80045b6:	4313      	orrs	r3, r2
 80045b8:	4a31      	ldr	r2, [pc, #196]	; (8004680 <MX_LWIP_Init+0x244>)
 80045ba:	78d2      	ldrb	r2, [r2, #3]
 80045bc:	4313      	orrs	r3, r2
 80045be:	061a      	lsls	r2, r3, #24
 80045c0:	4b2f      	ldr	r3, [pc, #188]	; (8004680 <MX_LWIP_Init+0x244>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	0619      	lsls	r1, r3, #24
 80045c6:	4b2e      	ldr	r3, [pc, #184]	; (8004680 <MX_LWIP_Init+0x244>)
 80045c8:	785b      	ldrb	r3, [r3, #1]
 80045ca:	041b      	lsls	r3, r3, #16
 80045cc:	4319      	orrs	r1, r3
 80045ce:	4b2c      	ldr	r3, [pc, #176]	; (8004680 <MX_LWIP_Init+0x244>)
 80045d0:	789b      	ldrb	r3, [r3, #2]
 80045d2:	021b      	lsls	r3, r3, #8
 80045d4:	430b      	orrs	r3, r1
 80045d6:	492a      	ldr	r1, [pc, #168]	; (8004680 <MX_LWIP_Init+0x244>)
 80045d8:	78c9      	ldrb	r1, [r1, #3]
 80045da:	430b      	orrs	r3, r1
 80045dc:	021b      	lsls	r3, r3, #8
 80045de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045e2:	431a      	orrs	r2, r3
 80045e4:	4b26      	ldr	r3, [pc, #152]	; (8004680 <MX_LWIP_Init+0x244>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	0619      	lsls	r1, r3, #24
 80045ea:	4b25      	ldr	r3, [pc, #148]	; (8004680 <MX_LWIP_Init+0x244>)
 80045ec:	785b      	ldrb	r3, [r3, #1]
 80045ee:	041b      	lsls	r3, r3, #16
 80045f0:	4319      	orrs	r1, r3
 80045f2:	4b23      	ldr	r3, [pc, #140]	; (8004680 <MX_LWIP_Init+0x244>)
 80045f4:	789b      	ldrb	r3, [r3, #2]
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	430b      	orrs	r3, r1
 80045fa:	4921      	ldr	r1, [pc, #132]	; (8004680 <MX_LWIP_Init+0x244>)
 80045fc:	78c9      	ldrb	r1, [r1, #3]
 80045fe:	430b      	orrs	r3, r1
 8004600:	0a1b      	lsrs	r3, r3, #8
 8004602:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004606:	431a      	orrs	r2, r3
 8004608:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <MX_LWIP_Init+0x244>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	0619      	lsls	r1, r3, #24
 800460e:	4b1c      	ldr	r3, [pc, #112]	; (8004680 <MX_LWIP_Init+0x244>)
 8004610:	785b      	ldrb	r3, [r3, #1]
 8004612:	041b      	lsls	r3, r3, #16
 8004614:	4319      	orrs	r1, r3
 8004616:	4b1a      	ldr	r3, [pc, #104]	; (8004680 <MX_LWIP_Init+0x244>)
 8004618:	789b      	ldrb	r3, [r3, #2]
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	430b      	orrs	r3, r1
 800461e:	4918      	ldr	r1, [pc, #96]	; (8004680 <MX_LWIP_Init+0x244>)
 8004620:	78c9      	ldrb	r1, [r1, #3]
 8004622:	430b      	orrs	r3, r1
 8004624:	0e1b      	lsrs	r3, r3, #24
 8004626:	4313      	orrs	r3, r2
 8004628:	4a18      	ldr	r2, [pc, #96]	; (800468c <MX_LWIP_Init+0x250>)
 800462a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800462c:	4b18      	ldr	r3, [pc, #96]	; (8004690 <MX_LWIP_Init+0x254>)
 800462e:	9302      	str	r3, [sp, #8]
 8004630:	4b18      	ldr	r3, [pc, #96]	; (8004694 <MX_LWIP_Init+0x258>)
 8004632:	9301      	str	r3, [sp, #4]
 8004634:	2300      	movs	r3, #0
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	4b14      	ldr	r3, [pc, #80]	; (800468c <MX_LWIP_Init+0x250>)
 800463a:	4a13      	ldr	r2, [pc, #76]	; (8004688 <MX_LWIP_Init+0x24c>)
 800463c:	4911      	ldr	r1, [pc, #68]	; (8004684 <MX_LWIP_Init+0x248>)
 800463e:	4816      	ldr	r0, [pc, #88]	; (8004698 <MX_LWIP_Init+0x25c>)
 8004640:	f002 fd32 	bl	80070a8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004644:	4814      	ldr	r0, [pc, #80]	; (8004698 <MX_LWIP_Init+0x25c>)
 8004646:	f002 fee1 	bl	800740c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800464a:	4b13      	ldr	r3, [pc, #76]	; (8004698 <MX_LWIP_Init+0x25c>)
 800464c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004650:	089b      	lsrs	r3, r3, #2
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800465c:	480e      	ldr	r0, [pc, #56]	; (8004698 <MX_LWIP_Init+0x25c>)
 800465e:	f002 fee5 	bl	800742c <netif_set_up>
 8004662:	e002      	b.n	800466a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004664:	480c      	ldr	r0, [pc, #48]	; (8004698 <MX_LWIP_Init+0x25c>)
 8004666:	f002 ff4d 	bl	8007504 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800466a:	490c      	ldr	r1, [pc, #48]	; (800469c <MX_LWIP_Init+0x260>)
 800466c:	480a      	ldr	r0, [pc, #40]	; (8004698 <MX_LWIP_Init+0x25c>)
 800466e:	f002 ffdf 	bl	8007630 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004672:	bf00      	nop
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	200001a0 	.word	0x200001a0
 800467c:	200001a4 	.word	0x200001a4
 8004680:	200001a8 	.word	0x200001a8
 8004684:	20000194 	.word	0x20000194
 8004688:	20000198 	.word	0x20000198
 800468c:	2000019c 	.word	0x2000019c
 8004690:	08010ce9 	.word	0x08010ce9
 8004694:	08004a3d 	.word	0x08004a3d
 8004698:	20000160 	.word	0x20000160
 800469c:	080046f1 	.word	0x080046f1

080046a0 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80046a8:	f7fc fe48 	bl	800133c <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	4b08      	ldr	r3, [pc, #32]	; (80046d0 <Ethernet_Link_Periodic_Handle+0x30>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b63      	cmp	r3, #99	; 0x63
 80046b6:	d907      	bls.n	80046c8 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80046b8:	f7fc fe40 	bl	800133c <HAL_GetTick>
 80046bc:	4603      	mov	r3, r0
 80046be:	4a04      	ldr	r2, [pc, #16]	; (80046d0 <Ethernet_Link_Periodic_Handle+0x30>)
 80046c0:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 fb1e 	bl	8004d04 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80046c8:	bf00      	nop
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	2000015c 	.word	0x2000015c

080046d4 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80046d8:	4804      	ldr	r0, [pc, #16]	; (80046ec <MX_LWIP_Process+0x18>)
 80046da:	f000 f98f 	bl	80049fc <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80046de:	f009 ff17 	bl	800e510 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80046e2:	4802      	ldr	r0, [pc, #8]	; (80046ec <MX_LWIP_Process+0x18>)
 80046e4:	f7ff ffdc 	bl	80046a0 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80046e8:	bf00      	nop
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	20000160 	.word	0x20000160

080046f0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800470c:	2300      	movs	r3, #0
 800470e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004710:	4b40      	ldr	r3, [pc, #256]	; (8004814 <low_level_init+0x110>)
 8004712:	4a41      	ldr	r2, [pc, #260]	; (8004818 <low_level_init+0x114>)
 8004714:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004716:	2300      	movs	r3, #0
 8004718:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800471a:	2380      	movs	r3, #128	; 0x80
 800471c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800471e:	23e1      	movs	r3, #225	; 0xe1
 8004720:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004722:	2300      	movs	r3, #0
 8004724:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004726:	2300      	movs	r3, #0
 8004728:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800472a:	2300      	movs	r3, #0
 800472c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800472e:	4a39      	ldr	r2, [pc, #228]	; (8004814 <low_level_init+0x110>)
 8004730:	f107 0308 	add.w	r3, r7, #8
 8004734:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004736:	4b37      	ldr	r3, [pc, #220]	; (8004814 <low_level_init+0x110>)
 8004738:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800473c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800473e:	4b35      	ldr	r3, [pc, #212]	; (8004814 <low_level_init+0x110>)
 8004740:	4a36      	ldr	r2, [pc, #216]	; (800481c <low_level_init+0x118>)
 8004742:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004744:	4b33      	ldr	r3, [pc, #204]	; (8004814 <low_level_init+0x110>)
 8004746:	4a36      	ldr	r2, [pc, #216]	; (8004820 <low_level_init+0x11c>)
 8004748:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800474a:	4b32      	ldr	r3, [pc, #200]	; (8004814 <low_level_init+0x110>)
 800474c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004750:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004752:	4830      	ldr	r0, [pc, #192]	; (8004814 <low_level_init+0x110>)
 8004754:	f7fc ffc6 	bl	80016e4 <HAL_ETH_Init>
 8004758:	4603      	mov	r3, r0
 800475a:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800475c:	2238      	movs	r2, #56	; 0x38
 800475e:	2100      	movs	r1, #0
 8004760:	4830      	ldr	r0, [pc, #192]	; (8004824 <low_level_init+0x120>)
 8004762:	f00c fbd9 	bl	8010f18 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004766:	4b2f      	ldr	r3, [pc, #188]	; (8004824 <low_level_init+0x120>)
 8004768:	2221      	movs	r2, #33	; 0x21
 800476a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800476c:	4b2d      	ldr	r3, [pc, #180]	; (8004824 <low_level_init+0x120>)
 800476e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8004772:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004774:	4b2b      	ldr	r3, [pc, #172]	; (8004824 <low_level_init+0x120>)
 8004776:	2200      	movs	r2, #0
 8004778:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800477a:	482b      	ldr	r0, [pc, #172]	; (8004828 <low_level_init+0x124>)
 800477c:	f002 fb5c 	bl	8006e38 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2206      	movs	r2, #6
 8004784:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004788:	4b22      	ldr	r3, [pc, #136]	; (8004814 <low_level_init+0x110>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	781a      	ldrb	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004794:	4b1f      	ldr	r3, [pc, #124]	; (8004814 <low_level_init+0x110>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	785a      	ldrb	r2, [r3, #1]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80047a0:	4b1c      	ldr	r3, [pc, #112]	; (8004814 <low_level_init+0x110>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	789a      	ldrb	r2, [r3, #2]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80047ac:	4b19      	ldr	r3, [pc, #100]	; (8004814 <low_level_init+0x110>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	78da      	ldrb	r2, [r3, #3]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80047b8:	4b16      	ldr	r3, [pc, #88]	; (8004814 <low_level_init+0x110>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	791a      	ldrb	r2, [r3, #4]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80047c4:	4b13      	ldr	r3, [pc, #76]	; (8004814 <low_level_init+0x110>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	795a      	ldrb	r2, [r3, #5]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80047d6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80047de:	f043 030a 	orr.w	r3, r3, #10
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80047ea:	4910      	ldr	r1, [pc, #64]	; (800482c <low_level_init+0x128>)
 80047ec:	4810      	ldr	r0, [pc, #64]	; (8004830 <low_level_init+0x12c>)
 80047ee:	f7fc fbde 	bl	8000fae <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80047f2:	480f      	ldr	r0, [pc, #60]	; (8004830 <low_level_init+0x12c>)
 80047f4:	f7fc fc0d 	bl	8001012 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d103      	bne.n	8004806 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fa80 	bl	8004d04 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004804:	e001      	b.n	800480a <low_level_init+0x106>
    Error_Handler();
 8004806:	f7fc fa1b 	bl	8000c40 <Error_Handler>
}
 800480a:	bf00      	nop
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	20004c78 	.word	0x20004c78
 8004818:	40028000 	.word	0x40028000
 800481c:	20004bd8 	.word	0x20004bd8
 8004820:	20004b38 	.word	0x20004b38
 8004824:	20004d28 	.word	0x20004d28
 8004828:	08014d84 	.word	0x08014d84
 800482c:	2000005c 	.word	0x2000005c
 8004830:	20004d60 	.word	0x20004d60

08004834 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b092      	sub	sp, #72	; 0x48
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004842:	2300      	movs	r3, #0
 8004844:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800484c:	f107 030c 	add.w	r3, r7, #12
 8004850:	2230      	movs	r2, #48	; 0x30
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f00c fb5f 	bl	8010f18 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800485a:	f107 030c 	add.w	r3, r7, #12
 800485e:	2230      	movs	r2, #48	; 0x30
 8004860:	2100      	movs	r1, #0
 8004862:	4618      	mov	r0, r3
 8004864:	f00c fb58 	bl	8010f18 <memset>

  for(q = p; q != NULL; q = q->next)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	643b      	str	r3, [r7, #64]	; 0x40
 800486c:	e045      	b.n	80048fa <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800486e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004870:	2b03      	cmp	r3, #3
 8004872:	d902      	bls.n	800487a <low_level_output+0x46>
      return ERR_IF;
 8004874:	f06f 030b 	mvn.w	r3, #11
 8004878:	e055      	b.n	8004926 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800487a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800487c:	6859      	ldr	r1, [r3, #4]
 800487e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004880:	4613      	mov	r3, r2
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	4413      	add	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	3348      	adds	r3, #72	; 0x48
 800488a:	443b      	add	r3, r7
 800488c:	3b3c      	subs	r3, #60	; 0x3c
 800488e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004892:	895b      	ldrh	r3, [r3, #10]
 8004894:	4619      	mov	r1, r3
 8004896:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004898:	4613      	mov	r3, r2
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	4413      	add	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	3348      	adds	r3, #72	; 0x48
 80048a2:	443b      	add	r3, r7
 80048a4:	3b38      	subs	r3, #56	; 0x38
 80048a6:	6019      	str	r1, [r3, #0]

    if(i>0)
 80048a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d011      	beq.n	80048d2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80048ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048b0:	1e5a      	subs	r2, r3, #1
 80048b2:	f107 000c 	add.w	r0, r7, #12
 80048b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048b8:	460b      	mov	r3, r1
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	440b      	add	r3, r1
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	18c1      	adds	r1, r0, r3
 80048c2:	4613      	mov	r3, r2
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	3348      	adds	r3, #72	; 0x48
 80048cc:	443b      	add	r3, r7
 80048ce:	3b34      	subs	r3, #52	; 0x34
 80048d0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80048d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d109      	bne.n	80048ee <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80048da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048dc:	4613      	mov	r3, r2
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	4413      	add	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	3348      	adds	r3, #72	; 0x48
 80048e6:	443b      	add	r3, r7
 80048e8:	3b34      	subs	r3, #52	; 0x34
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]
    }

    i++;
 80048ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048f0:	3301      	adds	r3, #1
 80048f2:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80048f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	643b      	str	r3, [r7, #64]	; 0x40
 80048fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1b6      	bne.n	800486e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	891b      	ldrh	r3, [r3, #8]
 8004904:	461a      	mov	r2, r3
 8004906:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <low_level_output+0xfc>)
 8004908:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800490a:	4a09      	ldr	r2, [pc, #36]	; (8004930 <low_level_output+0xfc>)
 800490c:	f107 030c 	add.w	r3, r7, #12
 8004910:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004912:	4a07      	ldr	r2, [pc, #28]	; (8004930 <low_level_output+0xfc>)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004918:	2214      	movs	r2, #20
 800491a:	4905      	ldr	r1, [pc, #20]	; (8004930 <low_level_output+0xfc>)
 800491c:	4805      	ldr	r0, [pc, #20]	; (8004934 <low_level_output+0x100>)
 800491e:	f7fd f817 	bl	8001950 <HAL_ETH_Transmit>

  return errval;
 8004922:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004926:	4618      	mov	r0, r3
 8004928:	3748      	adds	r7, #72	; 0x48
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20004d28 	.word	0x20004d28
 8004934:	20004c78 	.word	0x20004c78

08004938 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004940:	2300      	movs	r3, #0
 8004942:	613b      	str	r3, [r7, #16]
  struct pbuf *myp = NULL;
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]

  uint8_t MACAddr[6];

  MACAddr[0] = 0xFF;
 8004948:	23ff      	movs	r3, #255	; 0xff
 800494a:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0xFF;
 800494c:	23ff      	movs	r3, #255	; 0xff
 800494e:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xFF;
 8004950:	23ff      	movs	r3, #255	; 0xff
 8004952:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0xFF;
 8004954:	23ff      	movs	r3, #255	; 0xff
 8004956:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0xFF;
 8004958:	23ff      	movs	r3, #255	; 0xff
 800495a:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0xFF;
 800495c:	23ff      	movs	r3, #255	; 0xff
 800495e:	737b      	strb	r3, [r7, #13]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004960:	4b1e      	ldr	r3, [pc, #120]	; (80049dc <low_level_input+0xa4>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d133      	bne.n	80049d0 <low_level_input+0x98>
  {
    if (HAL_ETH_ReadData(&heth, (void **)&p) == HAL_OK)
 8004968:	f107 0310 	add.w	r3, r7, #16
 800496c:	4619      	mov	r1, r3
 800496e:	481c      	ldr	r0, [pc, #112]	; (80049e0 <low_level_input+0xa8>)
 8004970:	f7fd f882 	bl	8001a78 <HAL_ETH_ReadData>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d12a      	bne.n	80049d0 <low_level_input+0x98>
    {
      LED2_TGL;
 800497a:	4b1a      	ldr	r3, [pc, #104]	; (80049e4 <low_level_input+0xac>)
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	4a19      	ldr	r2, [pc, #100]	; (80049e4 <low_level_input+0xac>)
 8004980:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8004984:	6153      	str	r3, [r2, #20]
      myp = p;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	617b      	str	r3, [r7, #20]
      mypData = p->payload;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	4a16      	ldr	r2, [pc, #88]	; (80049e8 <low_level_input+0xb0>)
 8004990:	6013      	str	r3, [r2, #0]
      okCounter = 0;
 8004992:	4b16      	ldr	r3, [pc, #88]	; (80049ec <low_level_input+0xb4>)
 8004994:	2200      	movs	r2, #0
 8004996:	801a      	strh	r2, [r3, #0]
      _index = 0;
 8004998:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <low_level_input+0xb8>)
 800499a:	2200      	movs	r2, #0
 800499c:	701a      	strb	r2, [r3, #0]

      Filter(p->payload, &INSTRUCTION_IP_UDP[0]);
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	4914      	ldr	r1, [pc, #80]	; (80049f4 <low_level_input+0xbc>)
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fb ff17 	bl	80007d8 <Filter>

      if (okCounter == 1)
 80049aa:	4b10      	ldr	r3, [pc, #64]	; (80049ec <low_level_input+0xb4>)
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d10e      	bne.n	80049d0 <low_level_input+0x98>
      {
         while(myp != NULL)
 80049b2:	e00a      	b.n	80049ca <low_level_input+0x92>
         {
            HAL_UART_Transmit_IT(&huart3, myp->payload, myp->len);
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	6859      	ldr	r1, [r3, #4]
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	895b      	ldrh	r3, [r3, #10]
 80049bc:	461a      	mov	r2, r3
 80049be:	480e      	ldr	r0, [pc, #56]	; (80049f8 <low_level_input+0xc0>)
 80049c0:	f7fe fe31 	bl	8003626 <HAL_UART_Transmit_IT>
               myp = myp->next;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	617b      	str	r3, [r7, #20]
         while(myp != NULL)
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f1      	bne.n	80049b4 <low_level_input+0x7c>
          myp = myp->next;
       }*/
    }
  }

  return p;
 80049d0:	693b      	ldr	r3, [r7, #16]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20004b34 	.word	0x20004b34
 80049e0:	20004c78 	.word	0x20004c78
 80049e4:	40020400 	.word	0x40020400
 80049e8:	20000100 	.word	0x20000100
 80049ec:	200000fc 	.word	0x200000fc
 80049f0:	20000104 	.word	0x20000104
 80049f4:	20000000 	.word	0x20000000
 80049f8:	20000108 	.word	0x20000108

080049fc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7ff ff95 	bl	8004938 <low_level_input>
 8004a0e:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	4798      	blx	r3
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f003 f982 	bl	8007d30 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1ea      	bne.n	8004a08 <ethernetif_input+0xc>
}
 8004a32:	bf00      	nop
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <ethernetif_init+0x1c>
 8004a4a:	4b0e      	ldr	r3, [pc, #56]	; (8004a84 <ethernetif_init+0x48>)
 8004a4c:	f240 12a1 	movw	r2, #417	; 0x1a1
 8004a50:	490d      	ldr	r1, [pc, #52]	; (8004a88 <ethernetif_init+0x4c>)
 8004a52:	480e      	ldr	r0, [pc, #56]	; (8004a8c <ethernetif_init+0x50>)
 8004a54:	f00c fa68 	bl	8010f28 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2273      	movs	r2, #115	; 0x73
 8004a5c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2274      	movs	r2, #116	; 0x74
 8004a64:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a09      	ldr	r2, [pc, #36]	; (8004a90 <ethernetif_init+0x54>)
 8004a6c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a08      	ldr	r2, [pc, #32]	; (8004a94 <ethernetif_init+0x58>)
 8004a72:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7ff fe45 	bl	8004704 <low_level_init>

  return ERR_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	0801206c 	.word	0x0801206c
 8004a88:	08012088 	.word	0x08012088
 8004a8c:	08012098 	.word	0x08012098
 8004a90:	0800f1a1 	.word	0x0800f1a1
 8004a94:	08004835 	.word	0x08004835

08004a98 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004aa4:	68f9      	ldr	r1, [r7, #12]
 8004aa6:	4807      	ldr	r0, [pc, #28]	; (8004ac4 <pbuf_free_custom+0x2c>)
 8004aa8:	f002 faa8 	bl	8006ffc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004aac:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <pbuf_free_custom+0x30>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d102      	bne.n	8004aba <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004ab4:	4b04      	ldr	r3, [pc, #16]	; (8004ac8 <pbuf_free_custom+0x30>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]
  }
}
 8004aba:	bf00      	nop
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	08014d84 	.word	0x08014d84
 8004ac8:	20004b34 	.word	0x20004b34

08004acc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004ad0:	f7fc fc34 	bl	800133c <HAL_GetTick>
 8004ad4:	4603      	mov	r3, r0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08e      	sub	sp, #56	; 0x38
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	605a      	str	r2, [r3, #4]
 8004aee:	609a      	str	r2, [r3, #8]
 8004af0:	60da      	str	r2, [r3, #12]
 8004af2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a55      	ldr	r2, [pc, #340]	; (8004c50 <HAL_ETH_MspInit+0x174>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	f040 80a4 	bne.w	8004c48 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004b00:	2300      	movs	r3, #0
 8004b02:	623b      	str	r3, [r7, #32]
 8004b04:	4b53      	ldr	r3, [pc, #332]	; (8004c54 <HAL_ETH_MspInit+0x178>)
 8004b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b08:	4a52      	ldr	r2, [pc, #328]	; (8004c54 <HAL_ETH_MspInit+0x178>)
 8004b0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8004b10:	4b50      	ldr	r3, [pc, #320]	; (8004c54 <HAL_ETH_MspInit+0x178>)
 8004b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b18:	623b      	str	r3, [r7, #32]
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	61fb      	str	r3, [r7, #28]
 8004b20:	4b4c      	ldr	r3, [pc, #304]	; (8004c54 <HAL_ETH_MspInit+0x178>)
 8004b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b24:	4a4b      	ldr	r2, [pc, #300]	; (8004c54 <HAL_ETH_MspInit+0x178>)
 8004b26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8004b2c:	4b49      	ldr	r3, [pc, #292]	; (8004c54 <HAL_ETH_MspInit+0x178>)
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61bb      	str	r3, [r7, #24]
 8004b3c:	4b45      	ldr	r3, [pc, #276]	; (8004c54 <HAL_ETH_MspInit+0x178>)
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b40:	4a44      	ldr	r2, [pc, #272]	; (8004c54 <HAL_ETH_MspInit+0x178>)
 8004b42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b46:	6313      	str	r3, [r2, #48]	; 0x30
 8004b48:	4b42      	ldr	r3, [pc, #264]	; (8004c54 <HAL_ETH_MspInit+0x178>)
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b50:	61bb      	str	r3, [r7, #24]
 8004b52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	4b3e      	ldr	r3, [pc, #248]	; (8004c54 <HAL_ETH_MspInit+0x178>)
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5c:	4a3d      	ldr	r2, [pc, #244]	; (8004c54 <HAL_ETH_MspInit+0x178>)
 8004b5e:	f043 0304 	orr.w	r3, r3, #4
 8004b62:	6313      	str	r3, [r2, #48]	; 0x30
 8004b64:	4b3b      	ldr	r3, [pc, #236]	; (8004c54 <HAL_ETH_MspInit+0x178>)
 8004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b70:	2300      	movs	r3, #0
 8004b72:	613b      	str	r3, [r7, #16]
 8004b74:	4b37      	ldr	r3, [pc, #220]	; (8004c54 <HAL_ETH_MspInit+0x178>)
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	4a36      	ldr	r2, [pc, #216]	; (8004c54 <HAL_ETH_MspInit+0x178>)
 8004b7a:	f043 0301 	orr.w	r3, r3, #1
 8004b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8004b80:	4b34      	ldr	r3, [pc, #208]	; (8004c54 <HAL_ETH_MspInit+0x178>)
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	4b30      	ldr	r3, [pc, #192]	; (8004c54 <HAL_ETH_MspInit+0x178>)
 8004b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b94:	4a2f      	ldr	r2, [pc, #188]	; (8004c54 <HAL_ETH_MspInit+0x178>)
 8004b96:	f043 0302 	orr.w	r3, r3, #2
 8004b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8004b9c:	4b2d      	ldr	r3, [pc, #180]	; (8004c54 <HAL_ETH_MspInit+0x178>)
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	60fb      	str	r3, [r7, #12]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60bb      	str	r3, [r7, #8]
 8004bac:	4b29      	ldr	r3, [pc, #164]	; (8004c54 <HAL_ETH_MspInit+0x178>)
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb0:	4a28      	ldr	r2, [pc, #160]	; (8004c54 <HAL_ETH_MspInit+0x178>)
 8004bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb8:	4b26      	ldr	r3, [pc, #152]	; (8004c54 <HAL_ETH_MspInit+0x178>)
 8004bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004bc4:	2332      	movs	r3, #50	; 0x32
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc8:	2302      	movs	r3, #2
 8004bca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004bd4:	230b      	movs	r3, #11
 8004bd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bdc:	4619      	mov	r1, r3
 8004bde:	481e      	ldr	r0, [pc, #120]	; (8004c58 <HAL_ETH_MspInit+0x17c>)
 8004be0:	f7fd fe76 	bl	80028d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004be4:	2386      	movs	r3, #134	; 0x86
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be8:	2302      	movs	r3, #2
 8004bea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bec:	2300      	movs	r3, #0
 8004bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004bf4:	230b      	movs	r3, #11
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4817      	ldr	r0, [pc, #92]	; (8004c5c <HAL_ETH_MspInit+0x180>)
 8004c00:	f7fd fe66 	bl	80028d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004c04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c12:	2303      	movs	r3, #3
 8004c14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c16:	230b      	movs	r3, #11
 8004c18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c1e:	4619      	mov	r1, r3
 8004c20:	480f      	ldr	r0, [pc, #60]	; (8004c60 <HAL_ETH_MspInit+0x184>)
 8004c22:	f7fd fe55 	bl	80028d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004c26:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c34:	2303      	movs	r3, #3
 8004c36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c38:	230b      	movs	r3, #11
 8004c3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c40:	4619      	mov	r1, r3
 8004c42:	4808      	ldr	r0, [pc, #32]	; (8004c64 <HAL_ETH_MspInit+0x188>)
 8004c44:	f7fd fe44 	bl	80028d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004c48:	bf00      	nop
 8004c4a:	3738      	adds	r7, #56	; 0x38
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40028000 	.word	0x40028000
 8004c54:	40023800 	.word	0x40023800
 8004c58:	40020800 	.word	0x40020800
 8004c5c:	40020000 	.word	0x40020000
 8004c60:	40020400 	.word	0x40020400
 8004c64:	40021800 	.word	0x40021800

08004c68 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004c6c:	4802      	ldr	r0, [pc, #8]	; (8004c78 <ETH_PHY_IO_Init+0x10>)
 8004c6e:	f7fd f9d3 	bl	8002018 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20004c78 	.word	0x20004c78

08004c7c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
  return 0;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	68f9      	ldr	r1, [r7, #12]
 8004c9e:	4807      	ldr	r0, [pc, #28]	; (8004cbc <ETH_PHY_IO_ReadReg+0x30>)
 8004ca0:	f7fd f822 	bl	8001ce8 <HAL_ETH_ReadPHYRegister>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004caa:	f04f 33ff 	mov.w	r3, #4294967295
 8004cae:	e000      	b.n	8004cb2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20004c78 	.word	0x20004c78

08004cc0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	68f9      	ldr	r1, [r7, #12]
 8004cd2:	4807      	ldr	r0, [pc, #28]	; (8004cf0 <ETH_PHY_IO_WriteReg+0x30>)
 8004cd4:	f7fd f853 	bl	8001d7e <HAL_ETH_WritePHYRegister>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004cde:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce2:	e000      	b.n	8004ce6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	20004c78 	.word	0x20004c78

08004cf4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004cf8:	f7fc fb20 	bl	800133c <HAL_GetTick>
 8004cfc:	4603      	mov	r3, r0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b0a0      	sub	sp, #128	; 0x80
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004d0c:	f107 030c 	add.w	r3, r7, #12
 8004d10:	2264      	movs	r2, #100	; 0x64
 8004d12:	2100      	movs	r1, #0
 8004d14:	4618      	mov	r0, r3
 8004d16:	f00c f8ff 	bl	8010f18 <memset>
  int32_t PHYLinkState = 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d22:	2300      	movs	r3, #0
 8004d24:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d26:	2300      	movs	r3, #0
 8004d28:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004d2a:	483a      	ldr	r0, [pc, #232]	; (8004e14 <ethernet_link_check_state+0x110>)
 8004d2c:	f7fc fa19 	bl	8001162 <LAN8742_GetLinkState>
 8004d30:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d38:	089b      	lsrs	r3, r3, #2
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00c      	beq.n	8004d5e <ethernet_link_check_state+0x5a>
 8004d44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	dc09      	bgt.n	8004d5e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8004d4a:	4833      	ldr	r0, [pc, #204]	; (8004e18 <ethernet_link_check_state+0x114>)
 8004d4c:	f7fc fda7 	bl	800189e <HAL_ETH_Stop>
    netif_set_down(netif);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f002 fbd7 	bl	8007504 <netif_set_down>
    netif_set_link_down(netif);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f002 fc3a 	bl	80075d0 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004d5c:	e055      	b.n	8004e0a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d14e      	bne.n	8004e0a <ethernet_link_check_state+0x106>
 8004d6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	dd4b      	ble.n	8004e0a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004d72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d74:	3b02      	subs	r3, #2
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d82a      	bhi.n	8004dd0 <ethernet_link_check_state+0xcc>
 8004d7a:	a201      	add	r2, pc, #4	; (adr r2, 8004d80 <ethernet_link_check_state+0x7c>)
 8004d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d80:	08004d91 	.word	0x08004d91
 8004d84:	08004da3 	.word	0x08004da3
 8004d88:	08004db3 	.word	0x08004db3
 8004d8c:	08004dc3 	.word	0x08004dc3
      duplex = ETH_FULLDUPLEX_MODE;
 8004d90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d94:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004d96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d9a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004da0:	e017      	b.n	8004dd2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004da2:	2300      	movs	r3, #0
 8004da4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004da6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004daa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004dac:	2301      	movs	r3, #1
 8004dae:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004db0:	e00f      	b.n	8004dd2 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004db2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004db6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004db8:	2300      	movs	r3, #0
 8004dba:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004dc0:	e007      	b.n	8004dd2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004dce:	e000      	b.n	8004dd2 <ethernet_link_check_state+0xce>
      break;
 8004dd0:	bf00      	nop
    if(linkchanged)
 8004dd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d018      	beq.n	8004e0a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004dd8:	f107 030c 	add.w	r3, r7, #12
 8004ddc:	4619      	mov	r1, r3
 8004dde:	480e      	ldr	r0, [pc, #56]	; (8004e18 <ethernet_link_check_state+0x114>)
 8004de0:	f7fd f816 	bl	8001e10 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004de4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8004de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dea:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004dec:	f107 030c 	add.w	r3, r7, #12
 8004df0:	4619      	mov	r1, r3
 8004df2:	4809      	ldr	r0, [pc, #36]	; (8004e18 <ethernet_link_check_state+0x114>)
 8004df4:	f7fd f8f6 	bl	8001fe4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004df8:	4807      	ldr	r0, [pc, #28]	; (8004e18 <ethernet_link_check_state+0x114>)
 8004dfa:	f7fc fcf1 	bl	80017e0 <HAL_ETH_Start>
      netif_set_up(netif);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f002 fb14 	bl	800742c <netif_set_up>
      netif_set_link_up(netif);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f002 fbaf 	bl	8007568 <netif_set_link_up>
}
 8004e0a:	bf00      	nop
 8004e0c:	3780      	adds	r7, #128	; 0x80
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20004d60 	.word	0x20004d60
 8004e18:	20004c78 	.word	0x20004c78

08004e1c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004e24:	4812      	ldr	r0, [pc, #72]	; (8004e70 <HAL_ETH_RxAllocateCallback+0x54>)
 8004e26:	f002 f87b 	bl	8006f20 <memp_malloc_pool>
 8004e2a:	60f8      	str	r0, [r7, #12]
  if (p)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d014      	beq.n	8004e5c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f103 0220 	add.w	r2, r3, #32
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4a0d      	ldr	r2, [pc, #52]	; (8004e74 <HAL_ETH_RxAllocateCallback+0x58>)
 8004e40:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004e4a:	9201      	str	r2, [sp, #4]
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2241      	movs	r2, #65	; 0x41
 8004e52:	2100      	movs	r1, #0
 8004e54:	2000      	movs	r0, #0
 8004e56:	f002 fdb1 	bl	80079bc <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004e5a:	e005      	b.n	8004e68 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004e5c:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004e5e:	2201      	movs	r2, #1
 8004e60:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
}
 8004e68:	bf00      	nop
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	08014d84 	.word	0x08014d84
 8004e74:	08004a99 	.word	0x08004a99
 8004e78:	20004b34 	.word	0x20004b34

08004e7c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b089      	sub	sp, #36	; 0x24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3b20      	subs	r3, #32
 8004e9a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	887a      	ldrh	r2, [r7, #2]
 8004eac:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d103      	bne.n	8004ebe <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	69fa      	ldr	r2, [r7, #28]
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	e003      	b.n	8004ec6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69fa      	ldr	r2, [r7, #28]
 8004ec4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	69fa      	ldr	r2, [r7, #28]
 8004eca:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	61fb      	str	r3, [r7, #28]
 8004ed2:	e009      	b.n	8004ee8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	891a      	ldrh	r2, [r3, #8]
 8004ed8:	887b      	ldrh	r3, [r7, #2]
 8004eda:	4413      	add	r3, r2
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	61fb      	str	r3, [r7, #28]
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f2      	bne.n	8004ed4 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004eee:	bf00      	nop
 8004ef0:	bf00      	nop
 8004ef2:	3724      	adds	r7, #36	; 0x24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <fs_open+0x16>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d102      	bne.n	8004f18 <fs_open+0x1c>
    return ERR_ARG;
 8004f12:	f06f 030f 	mvn.w	r3, #15
 8004f16:	e028      	b.n	8004f6a <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8004f18:	4b16      	ldr	r3, [pc, #88]	; (8004f74 <fs_open+0x78>)
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	e020      	b.n	8004f60 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	4619      	mov	r1, r3
 8004f24:	6838      	ldr	r0, [r7, #0]
 8004f26:	f7fb f963 	bl	80001f0 <strcmp>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d114      	bne.n	8004f5a <fs_open+0x5e>
      file->data = (const char *)f->data;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	7c1a      	ldrb	r2, [r3, #16]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	e007      	b.n	8004f6a <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1db      	bne.n	8004f1e <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8004f66:	f06f 0305 	mvn.w	r3, #5
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	080151f8 	.word	0x080151f8

08004f78 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	1ad3      	subs	r3, r2, r3
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b082      	sub	sp, #8
 8004fae:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8004fb0:	20e8      	movs	r0, #232	; 0xe8
 8004fb2:	f001 fe47 	bl	8006c44 <mem_malloc>
 8004fb6:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d004      	beq.n	8004fc8 <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8004fbe:	22e8      	movs	r2, #232	; 0xe8
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f00b ffa8 	bl	8010f18 <memset>
  }
  return ret;
 8004fc8:	687b      	ldr	r3, [r7, #4]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b082      	sub	sp, #8
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f001 fcc9 	bl	8006978 <mem_free>
  }
}
 8004fe6:	bf00      	nop
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b082      	sub	sp, #8
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8004ff6:	22b0      	movs	r2, #176	; 0xb0
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f00b ff8c 	bl	8010f18 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8005000:	bf00      	nop
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800500e:	20b0      	movs	r0, #176	; 0xb0
 8005010:	f001 fe18 	bl	8006c44 <mem_malloc>
 8005014:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <http_state_alloc+0x1a>
    http_state_init(ret);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff ffe6 	bl	8004fee <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8005022:	687b      	ldr	r3, [r7, #4]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d007      	beq.n	800504c <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff ff99 	bl	8004f78 <fs_close>
    hs->handle = NULL;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005050:	2b00      	cmp	r3, #0
 8005052:	d007      	beq.n	8005064 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	4618      	mov	r0, r3
 800505a:	f7ff ffba 	bl	8004fd2 <http_ssi_state_free>
    hs->ssi = NULL;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d007      	beq.n	800507c <http_state_eof+0x50>
    pbuf_free(hs->req);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	4618      	mov	r0, r3
 8005072:	f002 fe5d 	bl	8007d30 <pbuf_free>
    hs->req = NULL;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800507c:	bf00      	nop
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d005      	beq.n	800509e <http_state_free+0x1a>
    http_state_eof(hs);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff ffca 	bl	800502c <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f001 fc6d 	bl	8006978 <mem_free>
  }
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d106      	bne.n	80050ca <http_write+0x22>
 80050bc:	4b2c      	ldr	r3, [pc, #176]	; (8005170 <http_write+0xc8>)
 80050be:	f240 2219 	movw	r2, #537	; 0x219
 80050c2:	492c      	ldr	r1, [pc, #176]	; (8005174 <http_write+0xcc>)
 80050c4:	482c      	ldr	r0, [pc, #176]	; (8005178 <http_write+0xd0>)
 80050c6:	f00b ff2f 	bl	8010f28 <iprintf>
  len = *length;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 80050d0:	8afb      	ldrh	r3, [r7, #22]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <http_write+0x32>
    return ERR_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	e045      	b.n	8005166 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80050e0:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 80050e2:	8aba      	ldrh	r2, [r7, #20]
 80050e4:	8afb      	ldrh	r3, [r7, #22]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d201      	bcs.n	80050ee <http_write+0x46>
    len = max_len;
 80050ea:	8abb      	ldrh	r3, [r7, #20]
 80050ec:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 80050f6:	8afa      	ldrh	r2, [r7, #22]
 80050f8:	8abb      	ldrh	r3, [r7, #20]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d901      	bls.n	8005102 <http_write+0x5a>
    len = max_len;
 80050fe:	8abb      	ldrh	r3, [r7, #20]
 8005100:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8005102:	78fb      	ldrb	r3, [r7, #3]
 8005104:	8afa      	ldrh	r2, [r7, #22]
 8005106:	68b9      	ldr	r1, [r7, #8]
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f007 fb99 	bl	800c840 <tcp_write>
 800510e:	4603      	mov	r3, r0
 8005110:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8005112:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511a:	d10f      	bne.n	800513c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8005122:	2b00      	cmp	r3, #0
 8005124:	d004      	beq.n	8005130 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800512c:	2b08      	cmp	r3, #8
 800512e:	d902      	bls.n	8005136 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8005130:	2301      	movs	r3, #1
 8005132:	82fb      	strh	r3, [r7, #22]
 8005134:	e002      	b.n	800513c <http_write+0x94>
      } else {
        len /= 2;
 8005136:	8afb      	ldrh	r3, [r7, #22]
 8005138:	085b      	lsrs	r3, r3, #1
 800513a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800513c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005144:	d102      	bne.n	800514c <http_write+0xa4>
 8005146:	8afb      	ldrh	r3, [r7, #22]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d8da      	bhi.n	8005102 <http_write+0x5a>

  if (err == ERR_OK) {
 800514c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d103      	bne.n	800515c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	8afa      	ldrh	r2, [r7, #22]
 8005158:	801a      	strh	r2, [r3, #0]
 800515a:	e002      	b.n	8005162 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8005162:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	0801213c 	.word	0x0801213c
 8005174:	08012174 	.word	0x08012174
 8005178:	08012184 	.word	0x08012184

0800517c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	4613      	mov	r3, r2
 8005188:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800518a:	2100      	movs	r1, #0
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f004 fc15 	bl	80099bc <tcp_arg>
  altcp_recv(pcb, NULL);
 8005192:	2100      	movs	r1, #0
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f004 fc23 	bl	80099e0 <tcp_recv>
  altcp_err(pcb, NULL);
 800519a:	2100      	movs	r1, #0
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f004 fc63 	bl	8009a68 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 80051a2:	2200      	movs	r2, #0
 80051a4:	2100      	movs	r1, #0
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f004 fc98 	bl	8009adc <tcp_poll>
  altcp_sent(pcb, NULL);
 80051ac:	2100      	movs	r1, #0
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f004 fc38 	bl	8009a24 <tcp_sent>
  if (hs != NULL) {
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 80051ba:	68b8      	ldr	r0, [r7, #8]
 80051bc:	f7ff ff62 	bl	8005084 <http_state_free>
  }

  if (abort_conn) {
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d004      	beq.n	80051d0 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f003 fb3a 	bl	8008840 <tcp_abort>
    return ERR_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e00f      	b.n	80051f0 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f003 fa4b 	bl	800866c <tcp_close>
 80051d6:	4603      	mov	r3, r0
 80051d8:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 80051da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d004      	beq.n	80051ec <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80051e2:	2204      	movs	r2, #4
 80051e4:	4904      	ldr	r1, [pc, #16]	; (80051f8 <http_close_or_abort_conn+0x7c>)
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f004 fc78 	bl	8009adc <tcp_poll>
  }
  return err;
 80051ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	08006273 	.word	0x08006273

080051fc <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8005206:	2200      	movs	r2, #0
 8005208:	6839      	ldr	r1, [r7, #0]
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff ffb6 	bl	800517c <http_close_or_abort_conn>
 8005210:	4603      	mov	r3, r0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b082      	sub	sp, #8
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8005224:	6839      	ldr	r1, [r7, #0]
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7ff ffe8 	bl	80051fc <http_close_conn>
  }
}
 800522c:	bf00      	nop
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <extract_uri_parameters+0x18>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <extract_uri_parameters+0x1c>
    return (0);
 800524c:	2300      	movs	r3, #0
 800524e:	e04b      	b.n	80052e8 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8005254:	2300      	movs	r3, #0
 8005256:	613b      	str	r3, [r7, #16]
 8005258:	e03f      	b.n	80052da <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	320c      	adds	r2, #12
 8005260:	6979      	ldr	r1, [r7, #20]
 8005262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800526a:	2126      	movs	r1, #38	; 0x26
 800526c:	6978      	ldr	r0, [r7, #20]
 800526e:	f00b feb1 	bl	8010fd4 <strchr>
 8005272:	6178      	str	r0, [r7, #20]
    if (pair) {
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d006      	beq.n	8005288 <extract_uri_parameters+0x54>
      *pair = '\0';
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2200      	movs	r2, #0
 800527e:	701a      	strb	r2, [r3, #0]
      pair++;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	3301      	adds	r3, #1
 8005284:	617b      	str	r3, [r7, #20]
 8005286:	e00c      	b.n	80052a2 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8005288:	2120      	movs	r1, #32
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f00b fea2 	bl	8010fd4 <strchr>
 8005290:	6178      	str	r0, [r7, #20]
      if (pair) {
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <extract_uri_parameters+0x6a>
        *pair = '\0';
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2200      	movs	r2, #0
 800529c:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 800529e:	2300      	movs	r3, #0
 80052a0:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 80052a2:	213d      	movs	r1, #61	; 0x3d
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f00b fe95 	bl	8010fd4 <strchr>
 80052aa:	60f8      	str	r0, [r7, #12]
    if (equals) {
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <extract_uri_parameters+0x94>
      *equals = '\0';
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	1c59      	adds	r1, r3, #1
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	321c      	adds	r2, #28
 80052c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80052c6:	e005      	b.n	80052d4 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	321c      	adds	r2, #28
 80052ce:	2100      	movs	r1, #0
 80052d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	3301      	adds	r3, #1
 80052d8:	613b      	str	r3, [r7, #16]
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	2b0f      	cmp	r3, #15
 80052de:	dc02      	bgt.n	80052e6 <extract_uri_parameters+0xb2>
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1b9      	bne.n	800525a <extract_uri_parameters+0x26>
    }
  }

  return loop;
 80052e6:	693b      	ldr	r3, [r7, #16]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d106      	bne.n	800530c <get_tag_insert+0x1c>
 80052fe:	4b52      	ldr	r3, [pc, #328]	; (8005448 <get_tag_insert+0x158>)
 8005300:	f44f 7241 	mov.w	r2, #772	; 0x304
 8005304:	4951      	ldr	r1, [pc, #324]	; (800544c <get_tag_insert+0x15c>)
 8005306:	4852      	ldr	r0, [pc, #328]	; (8005450 <get_tag_insert+0x160>)
 8005308:	f00b fe0e 	bl	8010f28 <iprintf>
  ssi = hs->ssi;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005310:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d106      	bne.n	8005326 <get_tag_insert+0x36>
 8005318:	4b4b      	ldr	r3, [pc, #300]	; (8005448 <get_tag_insert+0x158>)
 800531a:	f240 3206 	movw	r2, #774	; 0x306
 800531e:	494d      	ldr	r1, [pc, #308]	; (8005454 <get_tag_insert+0x164>)
 8005320:	484b      	ldr	r0, [pc, #300]	; (8005450 <get_tag_insert+0x160>)
 8005322:	f00b fe01 	bl	8010f28 <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 8005326:	4b4c      	ldr	r3, [pc, #304]	; (8005458 <get_tag_insert+0x168>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d02e      	beq.n	800538c <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 800532e:	4b4b      	ldr	r3, [pc, #300]	; (800545c <get_tag_insert+0x16c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d02a      	beq.n	800538c <get_tag_insert+0x9c>
 8005336:	4b4a      	ldr	r3, [pc, #296]	; (8005460 <get_tag_insert+0x170>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d026      	beq.n	800538c <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800533e:	2300      	movs	r3, #0
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	e01e      	b.n	8005382 <get_tag_insert+0x92>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f103 0012 	add.w	r0, r3, #18
 800534a:	4b44      	ldr	r3, [pc, #272]	; (800545c <get_tag_insert+0x16c>)
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4619      	mov	r1, r3
 8005358:	f7fa ff4a 	bl	80001f0 <strcmp>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10c      	bne.n	800537c <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8005362:	4b3d      	ldr	r3, [pc, #244]	; (8005458 <get_tag_insert+0x168>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	f102 0123 	add.w	r1, r2, #35	; 0x23
 800536c:	22c0      	movs	r2, #192	; 0xc0
 800536e:	6978      	ldr	r0, [r7, #20]
 8005370:	4798      	blx	r3
 8005372:	4603      	mov	r3, r0
 8005374:	461a      	mov	r2, r3
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	81da      	strh	r2, [r3, #14]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 800537a:	e061      	b.n	8005440 <get_tag_insert+0x150>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	3301      	adds	r3, #1
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	4b37      	ldr	r3, [pc, #220]	; (8005460 <get_tag_insert+0x170>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	429a      	cmp	r2, r3
 800538a:	dbdb      	blt.n	8005344 <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	3312      	adds	r3, #18
 8005390:	4618      	mov	r0, r3
 8005392:	f7fa ff37 	bl	8000204 <strlen>
 8005396:	4603      	mov	r3, r0
 8005398:	2ba6      	cmp	r3, #166	; 0xa6
 800539a:	d818      	bhi.n	80053ce <get_tag_insert+0xde>
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	3312      	adds	r3, #18
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fa ff2f 	bl	8000204 <strlen>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b11      	cmp	r3, #17
 80053aa:	d810      	bhi.n	80053ce <get_tag_insert+0xde>
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	3312      	adds	r3, #18
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7fa ff27 	bl	8000204 <strlen>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2ba6      	cmp	r3, #166	; 0xa6
 80053ba:	d806      	bhi.n	80053ca <get_tag_insert+0xda>
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	3312      	adds	r3, #18
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7fa ff1f 	bl	8000204 <strlen>
 80053c6:	4603      	mov	r3, r0
 80053c8:	e002      	b.n	80053d0 <get_tag_insert+0xe0>
 80053ca:	23a7      	movs	r3, #167	; 0xa7
 80053cc:	e000      	b.n	80053d0 <get_tag_insert+0xe0>
 80053ce:	2311      	movs	r3, #17
 80053d0:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	3323      	adds	r3, #35	; 0x23
 80053d6:	2212      	movs	r2, #18
 80053d8:	4922      	ldr	r1, [pc, #136]	; (8005464 <get_tag_insert+0x174>)
 80053da:	4618      	mov	r0, r3
 80053dc:	f00b fd8e 	bl	8010efc <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f103 0035 	add.w	r0, r3, #53	; 0x35
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	3312      	adds	r3, #18
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	4619      	mov	r1, r3
 80053ee:	f00b fd85 	bl	8010efc <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	3312      	adds	r3, #18
 80053f6:	3320      	adds	r3, #32
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	4413      	add	r3, r2
 80053fc:	3303      	adds	r3, #3
 80053fe:	2207      	movs	r2, #7
 8005400:	4919      	ldr	r1, [pc, #100]	; (8005468 <get_tag_insert+0x178>)
 8005402:	4618      	mov	r0, r3
 8005404:	f00b fd7a 	bl	8010efc <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3319      	adds	r3, #25
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	4413      	add	r3, r2
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  len = strlen(ssi->tag_insert);
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	3323      	adds	r3, #35	; 0x23
 800541a:	4618      	mov	r0, r3
 800541c:	f7fa fef2 	bl	8000204 <strlen>
 8005420:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005428:	d306      	bcc.n	8005438 <get_tag_insert+0x148>
 800542a:	4b07      	ldr	r3, [pc, #28]	; (8005448 <get_tag_insert+0x158>)
 800542c:	f240 323f 	movw	r2, #831	; 0x33f
 8005430:	490e      	ldr	r1, [pc, #56]	; (800546c <get_tag_insert+0x17c>)
 8005432:	4807      	ldr	r0, [pc, #28]	; (8005450 <get_tag_insert+0x160>)
 8005434:	f00b fd78 	bl	8010f28 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	b29a      	uxth	r2, r3
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	81da      	strh	r2, [r3, #14]
}
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	0801213c 	.word	0x0801213c
 800544c:	080121ac 	.word	0x080121ac
 8005450:	08012184 	.word	0x08012184
 8005454:	080121b8 	.word	0x080121b8
 8005458:	200051c0 	.word	0x200051c0
 800545c:	200051c8 	.word	0x200051c8
 8005460:	200051c4 	.word	0x200051c4
 8005464:	080121c4 	.word	0x080121c4
 8005468:	080121d8 	.word	0x080121d8
 800546c:	080121e0 	.word	0x080121e0

08005470 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d105      	bne.n	800548e <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8005482:	6839      	ldr	r1, [r7, #0]
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7ff fec8 	bl	800521a <http_eof>
    return 0;
 800548a:	2300      	movs	r3, #0
 800548c:	e016      	b.n	80054bc <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	4618      	mov	r0, r3
 8005494:	f7ff fd7a 	bl	8004f8c <fs_bytes_left>
 8005498:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b00      	cmp	r3, #0
 800549e:	dc05      	bgt.n	80054ac <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80054a0:	6839      	ldr	r1, [r7, #0]
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff feb9 	bl	800521a <http_eof>
    return 0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	e007      	b.n	80054bc <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80054ac:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <http_check_eof+0x54>)
 80054ae:	f240 429d 	movw	r2, #1181	; 0x49d
 80054b2:	4905      	ldr	r1, [pc, #20]	; (80054c8 <http_check_eof+0x58>)
 80054b4:	4805      	ldr	r0, [pc, #20]	; (80054cc <http_check_eof+0x5c>)
 80054b6:	f00b fd37 	bl	8010f28 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 80054ba:	2301      	movs	r3, #1
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	0801213c 	.word	0x0801213c
 80054c8:	080121f0 	.word	0x080121f0
 80054cc:	08012184 	.word	0x08012184

080054d0 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 80054da:	2300      	movs	r3, #0
 80054dc:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d803      	bhi.n	80054f2 <http_send_data_nonssi+0x22>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	e001      	b.n	80054f6 <http_send_data_nonssi+0x26>
 80054f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054f6:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	6999      	ldr	r1, [r3, #24]
 80054fc:	f107 020c 	add.w	r2, r7, #12
 8005500:	2300      	movs	r3, #0
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7ff fdd0 	bl	80050a8 <http_write>
 8005508:	4603      	mov	r3, r0
 800550a:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800550c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10d      	bne.n	8005530 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8005514:	2301      	movs	r3, #1
 8005516:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	89ba      	ldrh	r2, [r7, #12]
 800551e:	441a      	add	r2, r3
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	89ba      	ldrh	r2, [r7, #12]
 800552a:	1a9a      	subs	r2, r3, r2
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8005530:	7bfb      	ldrb	r3, [r7, #15]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800554a:	2300      	movs	r3, #0
 800554c:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005552:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d106      	bne.n	8005568 <http_send_data_ssi+0x2c>
 800555a:	4b87      	ldr	r3, [pc, #540]	; (8005778 <http_send_data_ssi+0x23c>)
 800555c:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8005560:	4986      	ldr	r1, [pc, #536]	; (800577c <http_send_data_ssi+0x240>)
 8005562:	4887      	ldr	r0, [pc, #540]	; (8005780 <http_send_data_ssi+0x244>)
 8005564:	f00b fce0 	bl	8010f28 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800556e:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	429a      	cmp	r2, r3
 800557a:	f240 826f 	bls.w	8005a5c <http_send_data_ssi+0x520>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800558c:	4293      	cmp	r3, r2
 800558e:	dc06      	bgt.n	800559e <http_send_data_ssi+0x62>
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	b29b      	uxth	r3, r3
 800559c:	e001      	b.n	80055a2 <http_send_data_ssi+0x66>
 800559e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055a2:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	6999      	ldr	r1, [r3, #24]
 80055a8:	f107 020e 	add.w	r2, r7, #14
 80055ac:	2300      	movs	r3, #0
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7ff fd7a 	bl	80050a8 <http_write>
 80055b4:	4603      	mov	r3, r0
 80055b6:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80055b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10d      	bne.n	80055dc <http_send_data_ssi+0xa0>
      data_to_send = 1;
 80055c0:	2301      	movs	r3, #1
 80055c2:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	89fa      	ldrh	r2, [r7, #14]
 80055ca:	441a      	add	r2, r3
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	89fa      	ldrh	r2, [r7, #14]
 80055d6:	1a9a      	subs	r2, r3, r2
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f040 823a 	bne.w	8005a5c <http_send_data_ssi+0x520>
      return data_to_send;
 80055e8:	7dbb      	ldrb	r3, [r7, #22]
 80055ea:	e280      	b.n	8005aee <http_send_data_ssi+0x5b2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 80055ec:	89fb      	ldrh	r3, [r7, #14]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <http_send_data_ssi+0xba>
      return data_to_send;
 80055f2:	7dbb      	ldrb	r3, [r7, #22]
 80055f4:	e27b      	b.n	8005aee <http_send_data_ssi+0x5b2>
    }
    switch (ssi->tag_state) {
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	f200 822c 	bhi.w	8005a5a <http_send_data_ssi+0x51e>
 8005602:	a201      	add	r2, pc, #4	; (adr r2, 8005608 <http_send_data_ssi+0xcc>)
 8005604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005608:	0800561d 	.word	0x0800561d
 800560c:	0800566f 	.word	0x0800566f
 8005610:	080056e1 	.word	0x080056e1
 8005614:	08005829 	.word	0x08005829
 8005618:	08005971 	.word	0x08005971
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800561c:	2300      	movs	r3, #0
 800561e:	757b      	strb	r3, [r7, #21]
 8005620:	e017      	b.n	8005652 <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	781a      	ldrb	r2, [r3, #0]
 8005628:	7d7b      	ldrb	r3, [r7, #21]
 800562a:	4956      	ldr	r1, [pc, #344]	; (8005784 <http_send_data_ssi+0x248>)
 800562c:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d10a      	bne.n	800564c <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	7d7a      	ldrb	r2, [r7, #21]
 800563a:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
            ssi->tag_index = 1;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	2201      	movs	r2, #1
 8005648:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800564a:	e005      	b.n	8005658 <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800564c:	7d7b      	ldrb	r3, [r7, #21]
 800564e:	3301      	adds	r3, #1
 8005650:	757b      	strb	r3, [r7, #21]
 8005652:	7d7b      	ldrb	r3, [r7, #21]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d9e4      	bls.n	8005622 <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	1e5a      	subs	r2, r3, #1
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	601a      	str	r2, [r3, #0]
        break;
 800566c:	e1f6      	b.n	8005a5c <http_send_data_ssi+0x520>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	7c1b      	ldrb	r3, [r3, #16]
 8005672:	461a      	mov	r2, r3
 8005674:	4b43      	ldr	r3, [pc, #268]	; (8005784 <http_send_data_ssi+0x248>)
 8005676:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	8992      	ldrh	r2, [r2, #12]
 800567e:	4413      	add	r3, r2
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d107      	bne.n	8005696 <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2200      	movs	r2, #0
 800568a:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8005694:	e1e2      	b.n	8005a5c <http_send_data_ssi+0x520>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	781a      	ldrb	r2, [r3, #0]
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	7c1b      	ldrb	r3, [r3, #16]
 80056a0:	4619      	mov	r1, r3
 80056a2:	4b38      	ldr	r3, [pc, #224]	; (8005784 <http_send_data_ssi+0x248>)
 80056a4:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 80056a8:	6939      	ldr	r1, [r7, #16]
 80056aa:	8989      	ldrh	r1, [r1, #12]
 80056ac:	440b      	add	r3, r1
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d106      	bne.n	80056c2 <http_send_data_ssi+0x186>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	899b      	ldrh	r3, [r3, #12]
 80056b8:	3301      	adds	r3, #1
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	819a      	strh	r2, [r3, #12]
 80056c0:	e003      	b.n	80056ca <http_send_data_ssi+0x18e>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	1e5a      	subs	r2, r3, #1
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	601a      	str	r2, [r3, #0]
        }
        break;
 80056de:	e1bd      	b.n	8005a5c <http_send_data_ssi+0x520>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	899b      	ldrh	r3, [r3, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d11e      	bne.n	8005726 <http_send_data_ssi+0x1ea>
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	2b20      	cmp	r3, #32
 80056f0:	d00e      	beq.n	8005710 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80056f8:	2b09      	cmp	r3, #9
 80056fa:	d009      	beq.n	8005710 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b0a      	cmp	r3, #10
 8005704:	d004      	beq.n	8005710 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800570c:	2b0d      	cmp	r3, #13
 800570e:	d10a      	bne.n	8005726 <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	1e5a      	subs	r2, r3, #1
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	601a      	str	r2, [r3, #0]
          break;
 8005724:	e19a      	b.n	8005a5c <http_send_data_ssi+0x520>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	781a      	ldrb	r2, [r3, #0]
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	7c1b      	ldrb	r3, [r3, #16]
 8005730:	4914      	ldr	r1, [pc, #80]	; (8005784 <http_send_data_ssi+0x248>)
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	440b      	add	r3, r1
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d013      	beq.n	8005766 <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8005744:	2b20      	cmp	r3, #32
 8005746:	d00e      	beq.n	8005766 <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b09      	cmp	r3, #9
 8005750:	d009      	beq.n	8005766 <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8005758:	2b0a      	cmp	r3, #10
 800575a:	d004      	beq.n	8005766 <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b0d      	cmp	r3, #13
 8005764:	d13f      	bne.n	80057e6 <http_send_data_ssi+0x2aa>

          if (ssi->tag_index == 0) {
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	899b      	ldrh	r3, [r3, #12]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10c      	bne.n	8005788 <http_send_data_ssi+0x24c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
          if (ssi->tag_index == 0) {
 8005776:	e04c      	b.n	8005812 <http_send_data_ssi+0x2d6>
 8005778:	0801213c 	.word	0x0801213c
 800577c:	080121b8 	.word	0x080121b8
 8005780:	08012184 	.word	0x08012184
 8005784:	08015248 	.word	0x08015248
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	2203      	movs	r2, #3
 800578c:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	899b      	ldrh	r3, [r3, #12]
 8005794:	2bff      	cmp	r3, #255	; 0xff
 8005796:	d906      	bls.n	80057a6 <http_send_data_ssi+0x26a>
 8005798:	4b93      	ldr	r3, [pc, #588]	; (80059e8 <http_send_data_ssi+0x4ac>)
 800579a:	f240 523a 	movw	r2, #1338	; 0x53a
 800579e:	4993      	ldr	r1, [pc, #588]	; (80059ec <http_send_data_ssi+0x4b0>)
 80057a0:	4893      	ldr	r0, [pc, #588]	; (80059f0 <http_send_data_ssi+0x4b4>)
 80057a2:	f00b fbc1 	bl	8010f28 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	899b      	ldrh	r3, [r3, #12]
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	899b      	ldrh	r3, [r3, #12]
 80057b4:	461a      	mov	r2, r3
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	4413      	add	r3, r2
 80057ba:	2200      	movs	r2, #0
 80057bc:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	781a      	ldrb	r2, [r3, #0]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	7c1b      	ldrb	r3, [r3, #16]
 80057c8:	498a      	ldr	r1, [pc, #552]	; (80059f4 <http_send_data_ssi+0x4b8>)
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	440b      	add	r3, r1
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d103      	bne.n	80057de <http_send_data_ssi+0x2a2>
              ssi->tag_index = 1;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	2201      	movs	r2, #1
 80057da:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 80057dc:	e019      	b.n	8005812 <http_send_data_ssi+0x2d6>
            } else {
              ssi->tag_index = 0;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	2200      	movs	r2, #0
 80057e2:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 80057e4:	e015      	b.n	8005812 <http_send_data_ssi+0x2d6>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	899b      	ldrh	r3, [r3, #12]
 80057ea:	2b0f      	cmp	r3, #15
 80057ec:	d80d      	bhi.n	800580a <http_send_data_ssi+0x2ce>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	899b      	ldrh	r3, [r3, #12]
 80057f6:	1c59      	adds	r1, r3, #1
 80057f8:	b288      	uxth	r0, r1
 80057fa:	6939      	ldr	r1, [r7, #16]
 80057fc:	8188      	strh	r0, [r1, #12]
 80057fe:	4619      	mov	r1, r3
 8005800:	7812      	ldrb	r2, [r2, #0]
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	440b      	add	r3, r1
 8005806:	749a      	strb	r2, [r3, #18]
 8005808:	e003      	b.n	8005812 <http_send_data_ssi+0x2d6>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	1e5a      	subs	r2, r3, #1
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	601a      	str	r2, [r3, #0]

        break;
 8005826:	e119      	b.n	8005a5c <http_send_data_ssi+0x520>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	899b      	ldrh	r3, [r3, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d11e      	bne.n	800586e <http_send_data_ssi+0x332>
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b20      	cmp	r3, #32
 8005838:	d00e      	beq.n	8005858 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8005840:	2b09      	cmp	r3, #9
 8005842:	d009      	beq.n	8005858 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b0a      	cmp	r3, #10
 800584c:	d004      	beq.n	8005858 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\r'))) {
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005854:	2b0d      	cmp	r3, #13
 8005856:	d10a      	bne.n	800586e <http_send_data_ssi+0x332>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	1e5a      	subs	r2, r3, #1
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	601a      	str	r2, [r3, #0]
          break;
 800586c:	e0f6      	b.n	8005a5c <http_send_data_ssi+0x520>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	781a      	ldrb	r2, [r3, #0]
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	7c1b      	ldrb	r3, [r3, #16]
 8005878:	495e      	ldr	r1, [pc, #376]	; (80059f4 <http_send_data_ssi+0x4b8>)
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	440b      	add	r3, r1
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	6939      	ldr	r1, [r7, #16]
 8005882:	8989      	ldrh	r1, [r1, #12]
 8005884:	440b      	add	r3, r1
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	429a      	cmp	r2, r3
 800588a:	d162      	bne.n	8005952 <http_send_data_ssi+0x416>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	1e5a      	subs	r2, r3, #1
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	899b      	ldrh	r3, [r3, #12]
 80058a4:	3301      	adds	r3, #1
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	7c1b      	ldrb	r3, [r3, #16]
 80058b0:	4a50      	ldr	r2, [pc, #320]	; (80059f4 <http_send_data_ssi+0x4b8>)
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	4413      	add	r3, r2
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	8992      	ldrh	r2, [r2, #12]
 80058bc:	4413      	add	r3, r2
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f040 80cb 	bne.w	8005a5c <http_send_data_ssi+0x520>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 80058c6:	6838      	ldr	r0, [r7, #0]
 80058c8:	f7ff fd12 	bl	80052f0 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	2200      	movs	r2, #0
 80058d0:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	2204      	movs	r2, #4
 80058d6:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
            ssi->tag_end = ssi->parsed;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	f240 80b6 	bls.w	8005a5c <http_send_data_ssi+0x520>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80058fe:	4293      	cmp	r3, r2
 8005900:	dc06      	bgt.n	8005910 <http_send_data_ssi+0x3d4>
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	b29b      	uxth	r3, r3
 800590e:	e001      	b.n	8005914 <http_send_data_ssi+0x3d8>
 8005910:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005914:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6999      	ldr	r1, [r3, #24]
 800591a:	f107 020e 	add.w	r2, r7, #14
 800591e:	2300      	movs	r3, #0
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7ff fbc1 	bl	80050a8 <http_write>
 8005926:	4603      	mov	r3, r0
 8005928:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800592a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800592e:	2b00      	cmp	r3, #0
 8005930:	f040 8094 	bne.w	8005a5c <http_send_data_ssi+0x520>
                data_to_send = 1;
 8005934:	2301      	movs	r3, #1
 8005936:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	89fa      	ldrh	r2, [r7, #14]
 800593e:	441a      	add	r2, r3
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	89fa      	ldrh	r2, [r7, #14]
 800594a:	1a9a      	subs	r2, r3, r2
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	625a      	str	r2, [r3, #36]	; 0x24
 8005950:	e084      	b.n	8005a5c <http_send_data_ssi+0x520>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	1e5a      	subs	r2, r3, #1
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	1c5a      	adds	r2, r3, #1
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        }
        break;
 800596e:	e075      	b.n	8005a5c <http_send_data_ssi+0x520>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	429a      	cmp	r2, r3
 800597a:	d93d      	bls.n	80059f8 <http_send_data_ssi+0x4bc>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800598a:	4293      	cmp	r3, r2
 800598c:	dc06      	bgt.n	800599c <http_send_data_ssi+0x460>
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	b29b      	uxth	r3, r3
 800599a:	e001      	b.n	80059a0 <http_send_data_ssi+0x464>
 800599c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059a0:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 80059a2:	89fb      	ldrh	r3, [r7, #14]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <http_send_data_ssi+0x482>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	6999      	ldr	r1, [r3, #24]
 80059ac:	f107 020e 	add.w	r2, r7, #14
 80059b0:	2300      	movs	r3, #0
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7ff fb78 	bl	80050a8 <http_write>
 80059b8:	4603      	mov	r3, r0
 80059ba:	75fb      	strb	r3, [r7, #23]
 80059bc:	e001      	b.n	80059c2 <http_send_data_ssi+0x486>
          } else {
            err = ERR_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 80059c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d148      	bne.n	8005a5c <http_send_data_ssi+0x520>
            data_to_send = 1;
 80059ca:	2301      	movs	r3, #1
 80059cc:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	89fa      	ldrh	r2, [r7, #14]
 80059d4:	441a      	add	r2, r3
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	89fa      	ldrh	r2, [r7, #14]
 80059e0:	1a9a      	subs	r2, r3, r2
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	625a      	str	r2, [r3, #36]	; 0x24
 80059e6:	e039      	b.n	8005a5c <http_send_data_ssi+0x520>
 80059e8:	0801213c 	.word	0x0801213c
 80059ec:	08012228 	.word	0x08012228
 80059f0:	08012184 	.word	0x08012184
 80059f4:	08015248 	.word	0x08015248
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	899a      	ldrh	r2, [r3, #12]
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	89db      	ldrh	r3, [r3, #14]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d222      	bcs.n	8005a4a <http_send_data_ssi+0x50e>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	89da      	ldrh	r2, [r3, #14]
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	899b      	ldrh	r3, [r3, #12]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	899b      	ldrh	r3, [r3, #12]
 8005a16:	3320      	adds	r3, #32
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	1cd9      	adds	r1, r3, #3
 8005a1e:	f107 020e 	add.w	r2, r7, #14
 8005a22:	2301      	movs	r3, #1
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7ff fb3f 	bl	80050a8 <http_write>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8005a2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d112      	bne.n	8005a5c <http_send_data_ssi+0x520>
              data_to_send = 1;
 8005a36:	2301      	movs	r3, #1
 8005a38:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	899a      	ldrh	r2, [r3, #12]
 8005a3e:	89fb      	ldrh	r3, [r7, #14]
 8005a40:	4413      	add	r3, r2
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	819a      	strh	r2, [r3, #12]
 8005a48:	e008      	b.n	8005a5c <http_send_data_ssi+0x520>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8005a58:	e000      	b.n	8005a5c <http_send_data_ssi+0x520>
        default:
          break;
 8005a5a:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d003      	beq.n	8005a6e <http_send_data_ssi+0x532>
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d004      	beq.n	8005a78 <http_send_data_ssi+0x53c>
 8005a6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f43f adba 	beq.w	80055ec <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d034      	beq.n	8005aec <http_send_data_ssi+0x5b0>
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d92e      	bls.n	8005aec <http_send_data_ssi+0x5b0>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	dc06      	bgt.n	8005aae <http_send_data_ssi+0x572>
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	e001      	b.n	8005ab2 <http_send_data_ssi+0x576>
 8005aae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ab2:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	6999      	ldr	r1, [r3, #24]
 8005ab8:	f107 020e 	add.w	r2, r7, #14
 8005abc:	2300      	movs	r3, #0
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7ff faf2 	bl	80050a8 <http_write>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8005ac8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10d      	bne.n	8005aec <http_send_data_ssi+0x5b0>
      data_to_send = 1;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	89fa      	ldrh	r2, [r7, #14]
 8005ada:	441a      	add	r2, r3
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	89fa      	ldrh	r2, [r7, #14]
 8005ae6:	1a9a      	subs	r2, r3, r2
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 8005aec:	7dbb      	ldrb	r3, [r7, #22]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop

08005af8 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8005b02:	2300      	movs	r3, #0
 8005b04:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <http_send+0x18>
    return 0;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	e030      	b.n	8005b72 <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d108      	bne.n	8005b2a <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8005b18:	6839      	ldr	r1, [r7, #0]
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7ff fca8 	bl	8005470 <http_check_eof>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <http_send+0x32>
      return 0;
 8005b26:	2300      	movs	r3, #0
 8005b28:	e023      	b.n	8005b72 <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d006      	beq.n	8005b40 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff fd01 	bl	800553c <http_send_data_ssi>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	73fb      	strb	r3, [r7, #15]
 8005b3e:	e005      	b.n	8005b4c <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8005b40:	6839      	ldr	r1, [r7, #0]
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff fcc4 	bl	80054d0 <http_send_data_nonssi>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10d      	bne.n	8005b70 <http_send+0x78>
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7ff fa17 	bl	8004f8c <fs_bytes_left>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	dc05      	bgt.n	8005b70 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8005b64:	6839      	ldr	r1, [r7, #0]
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7ff fb57 	bl	800521a <http_eof>
    return 0;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e000      	b.n	8005b72 <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8005b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	4a1c      	ldr	r2, [pc, #112]	; (8005bfc <http_get_404_file+0x80>)
 8005b8a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4619      	mov	r1, r3
 8005b94:	4610      	mov	r0, r2
 8005b96:	f7ff f9b1 	bl	8004efc <fs_open>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8005b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d024      	beq.n	8005bf0 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	4a15      	ldr	r2, [pc, #84]	; (8005c00 <http_get_404_file+0x84>)
 8005baa:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	f7ff f9a1 	bl	8004efc <fs_open>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8005bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d014      	beq.n	8005bf0 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	4a0e      	ldr	r2, [pc, #56]	; (8005c04 <http_get_404_file+0x88>)
 8005bca:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	f7ff f991 	bl	8004efc <fs_open>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8005bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d004      	beq.n	8005bf0 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]
        return NULL;
 8005bec:	2300      	movs	r3, #0
 8005bee:	e000      	b.n	8005bf2 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8005bf0:	687b      	ldr	r3, [r7, #4]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	08012240 	.word	0x08012240
 8005c00:	0801224c 	.word	0x0801224c
 8005c04:	08012258 	.word	0x08012258

08005c08 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08e      	sub	sp, #56	; 0x38
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d106      	bne.n	8005c2c <http_parse_request+0x24>
 8005c1e:	4b65      	ldr	r3, [pc, #404]	; (8005db4 <http_parse_request+0x1ac>)
 8005c20:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8005c24:	4964      	ldr	r1, [pc, #400]	; (8005db8 <http_parse_request+0x1b0>)
 8005c26:	4865      	ldr	r0, [pc, #404]	; (8005dbc <http_parse_request+0x1b4>)
 8005c28:	f00b f97e 	bl	8010f28 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d106      	bne.n	8005c40 <http_parse_request+0x38>
 8005c32:	4b60      	ldr	r3, [pc, #384]	; (8005db4 <http_parse_request+0x1ac>)
 8005c34:	f240 72af 	movw	r2, #1967	; 0x7af
 8005c38:	4961      	ldr	r1, [pc, #388]	; (8005dc0 <http_parse_request+0x1b8>)
 8005c3a:	4860      	ldr	r0, [pc, #384]	; (8005dbc <http_parse_request+0x1b4>)
 8005c3c:	f00b f974 	bl	8010f28 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d103      	bne.n	8005c50 <http_parse_request+0x48>
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8005c50:	f06f 0307 	mvn.w	r3, #7
 8005c54:	e0a9      	b.n	8005daa <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d103      	bne.n	8005c66 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c62:	621a      	str	r2, [r3, #32]
 8005c64:	e005      	b.n	8005c72 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f002 f921 	bl	8007eb4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8005c72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c74:	f002 f8fc 	bl	8007e70 <pbuf_ref>

  if (hs->req->next != NULL) {
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d012      	beq.n	8005ca8 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	891b      	ldrh	r3, [r3, #8]
 8005c88:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	bf28      	it	cs
 8005c90:	4613      	movcs	r3, r2
 8005c92:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	6a18      	ldr	r0, [r3, #32]
 8005c98:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	4949      	ldr	r1, [pc, #292]	; (8005dc4 <http_parse_request+0x1bc>)
 8005c9e:	f002 fa31 	bl	8008104 <pbuf_copy_partial>
    data = httpd_req_buf;
 8005ca2:	4b48      	ldr	r3, [pc, #288]	; (8005dc4 <http_parse_request+0x1bc>)
 8005ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ca6:	e005      	b.n	8005cb4 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	895b      	ldrh	r3, [r3, #10]
 8005cb2:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8005cb4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005cb6:	2b06      	cmp	r3, #6
 8005cb8:	d962      	bls.n	8005d80 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8005cba:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	4942      	ldr	r1, [pc, #264]	; (8005dc8 <http_parse_request+0x1c0>)
 8005cc0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005cc2:	f000 fc9b 	bl	80065fc <lwip_strnstr>
 8005cc6:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d058      	beq.n	8005d80 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8005cd2:	2204      	movs	r2, #4
 8005cd4:	493d      	ldr	r1, [pc, #244]	; (8005dcc <http_parse_request+0x1c4>)
 8005cd6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005cd8:	f00b f989 	bl	8010fee <strncmp>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d116      	bne.n	8005d10 <http_parse_request+0x108>
        sp1 = data + 3;
 8005ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce4:	3303      	adds	r3, #3
 8005ce6:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	8b7a      	ldrh	r2, [r7, #26]
 8005cfe:	4934      	ldr	r1, [pc, #208]	; (8005dd0 <http_parse_request+0x1c8>)
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 fc7b 	bl	80065fc <lwip_strnstr>
 8005d06:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8005d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d111      	bne.n	8005d32 <http_parse_request+0x12a>
 8005d0e:	e006      	b.n	8005d1e <http_parse_request+0x116>
        data[4] = 0;
 8005d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d12:	3304      	adds	r3, #4
 8005d14:	2200      	movs	r2, #0
 8005d16:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8005d18:	f06f 030f 	mvn.w	r3, #15
 8005d1c:	e045      	b.n	8005daa <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	3301      	adds	r3, #1
 8005d22:	8b7a      	ldrh	r2, [r7, #26]
 8005d24:	4928      	ldr	r1, [pc, #160]	; (8005dc8 <http_parse_request+0x1c0>)
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fc68 	bl	80065fc <lwip_strnstr>
 8005d2c:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	3301      	adds	r3, #1
 8005d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8005d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01e      	beq.n	8005d80 <http_parse_request+0x178>
 8005d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d91a      	bls.n	8005d80 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8005d4a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	4921      	ldr	r1, [pc, #132]	; (8005dd4 <http_parse_request+0x1cc>)
 8005d50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005d52:	f000 fc53 	bl	80065fc <lwip_strnstr>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d011      	beq.n	8005d80 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	2200      	movs	r2, #0
 8005d66:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8005d68:	8b3b      	ldrh	r3, [r7, #24]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	2200      	movs	r2, #0
 8005d70:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8005d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d74:	6979      	ldr	r1, [r7, #20]
 8005d76:	68b8      	ldr	r0, [r7, #8]
 8005d78:	f000 f880 	bl	8005e7c <http_find_file>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	e014      	b.n	8005daa <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f002 f85b 	bl	8007e40 <pbuf_clen>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	891b      	ldrh	r3, [r3, #8]
 8005d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d98:	d205      	bcs.n	8005da6 <http_parse_request+0x19e>
 8005d9a:	8a7b      	ldrh	r3, [r7, #18]
 8005d9c:	2b05      	cmp	r3, #5
 8005d9e:	d802      	bhi.n	8005da6 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8005da0:	f06f 0304 	mvn.w	r3, #4
 8005da4:	e001      	b.n	8005daa <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8005da6:	f06f 030f 	mvn.w	r3, #15
  }
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3738      	adds	r7, #56	; 0x38
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	0801213c 	.word	0x0801213c
 8005db8:	08012264 	.word	0x08012264
 8005dbc:	08012184 	.word	0x08012184
 8005dc0:	080121ac 	.word	0x080121ac
 8005dc4:	20004d80 	.word	0x20004d80
 8005dc8:	08012270 	.word	0x08012270
 8005dcc:	08012274 	.word	0x08012274
 8005dd0:	0801227c 	.word	0x0801227c
 8005dd4:	08012280 	.word	0x08012280

08005dd8 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b088      	sub	sp, #32
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d040      	beq.n	8005e6e <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 8005dec:	2300      	movs	r3, #0
 8005dee:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 8005df0:	213f      	movs	r1, #63	; 0x3f
 8005df2:	6838      	ldr	r0, [r7, #0]
 8005df4:	f00b f8ee 	bl	8010fd4 <strchr>
 8005df8:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	613b      	str	r3, [r7, #16]
    ext = uri;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8005e0e:	212e      	movs	r1, #46	; 0x2e
 8005e10:	6938      	ldr	r0, [r7, #16]
 8005e12:	f00b f8df 	bl	8010fd4 <strchr>
 8005e16:	6138      	str	r0, [r7, #16]
 8005e18:	e009      	b.n	8005e2e <http_uri_is_ssi+0x56>
      ext = sub;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	617b      	str	r3, [r7, #20]
      sub++;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	3301      	adds	r3, #1
 8005e22:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8005e24:	212e      	movs	r1, #46	; 0x2e
 8005e26:	6938      	ldr	r0, [r7, #16]
 8005e28:	f00b f8d4 	bl	8010fd4 <strchr>
 8005e2c:	6138      	str	r0, [r7, #16]
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1f2      	bne.n	8005e1a <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8005e34:	2300      	movs	r3, #0
 8005e36:	61fb      	str	r3, [r7, #28]
 8005e38:	e010      	b.n	8005e5c <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8005e3a:	4a0f      	ldr	r2, [pc, #60]	; (8005e78 <http_uri_is_ssi+0xa0>)
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e42:	4619      	mov	r1, r3
 8005e44:	6978      	ldr	r0, [r7, #20]
 8005e46:	f000 fc0f 	bl	8006668 <lwip_stricmp>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d102      	bne.n	8005e56 <http_uri_is_ssi+0x7e>
        tag_check = 1;
 8005e50:	2301      	movs	r3, #1
 8005e52:	76fb      	strb	r3, [r7, #27]
        break;
 8005e54:	e005      	b.n	8005e62 <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	61fb      	str	r3, [r7, #28]
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d9eb      	bls.n	8005e3a <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <http_uri_is_ssi+0x96>
      *param = '?';
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	223f      	movs	r2, #63	; 0x3f
 8005e6c:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 8005e6e:	7efb      	ldrb	r3, [r7, #27]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3720      	adds	r7, #32
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	0801520c 	.word	0x0801520c

08005e7c <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8005e7c:	b590      	push	{r4, r7, lr}
 8005e7e:	b093      	sub	sp, #76	; 0x4c
 8005e80:	af02      	add	r7, sp, #8
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8005e90:	2300      	movs	r3, #0
 8005e92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7fa f9b3 	bl	8000204 <strlen>
 8005e9e:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d072      	beq.n	8005f8c <http_find_file+0x110>
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	4413      	add	r3, r2
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	2b2f      	cmp	r3, #47	; 0x2f
 8005eb2:	d16b      	bne.n	8005f8c <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8005eb4:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8005eb6:	4a80      	ldr	r2, [pc, #512]	; (80060b8 <http_find_file+0x23c>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d102      	bne.n	8005ec2 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d164      	bne.n	8005f8c <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	2b3f      	cmp	r3, #63	; 0x3f
 8005ec8:	bf28      	it	cs
 8005eca:	233f      	movcs	r3, #63	; 0x3f
 8005ecc:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00a      	beq.n	8005eea <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	6a3a      	ldr	r2, [r7, #32]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4877      	ldr	r0, [pc, #476]	; (80060b8 <http_find_file+0x23c>)
 8005edc:	f00b f80e 	bl	8010efc <memcpy>
      http_uri_buf[copy_len] = 0;
 8005ee0:	4a75      	ldr	r2, [pc, #468]	; (80060b8 <http_find_file+0x23c>)
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8005eea:	2300      	movs	r3, #0
 8005eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eee:	e04a      	b.n	8005f86 <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d028      	beq.n	8005f48 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8005efc:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d01e      	beq.n	8005f42 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8005f04:	4a6d      	ldr	r2, [pc, #436]	; (80060bc <http_find_file+0x240>)
 8005f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fa f979 	bl	8000204 <strlen>
 8005f12:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	bf28      	it	cs
 8005f1c:	4613      	movcs	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	4a65      	ldr	r2, [pc, #404]	; (80060b8 <http_find_file+0x23c>)
 8005f24:	1898      	adds	r0, r3, r2
 8005f26:	4a65      	ldr	r2, [pc, #404]	; (80060bc <http_find_file+0x240>)
 8005f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f2a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	4619      	mov	r1, r3
 8005f32:	f00a ffe3 	bl	8010efc <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8005f36:	6a3a      	ldr	r2, [r7, #32]
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	4a5e      	ldr	r2, [pc, #376]	; (80060b8 <http_find_file+0x23c>)
 8005f3e:	2100      	movs	r1, #0
 8005f40:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8005f42:	4b5d      	ldr	r3, [pc, #372]	; (80060b8 <http_find_file+0x23c>)
 8005f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f46:	e004      	b.n	8005f52 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8005f48:	4a5c      	ldr	r2, [pc, #368]	; (80060bc <http_find_file+0x240>)
 8005f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f50:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7fe ffd0 	bl	8004efc <fs_open>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 8005f60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10b      	bne.n	8005f80 <http_find_file+0x104>
        uri = file_name;
 8005f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6a:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 8005f70:	4a52      	ldr	r2, [pc, #328]	; (80060bc <http_find_file+0x240>)
 8005f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	4413      	add	r3, r2
 8005f78:	791b      	ldrb	r3, [r3, #4]
 8005f7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 8005f7e:	e005      	b.n	8005f8c <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8005f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f82:	3301      	adds	r3, #1
 8005f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d9b1      	bls.n	8005ef0 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8005f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d176      	bne.n	8006080 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	213f      	movs	r1, #63	; 0x3f
 8005f96:	4618      	mov	r0, r3
 8005f98:	f00b f81c 	bl	8010fd4 <strchr>
 8005f9c:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8005f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8005fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	701a      	strb	r2, [r3, #0]
      params++;
 8005faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fac:	3301      	adds	r3, #1
 8005fae:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8005fb0:	4b43      	ldr	r3, [pc, #268]	; (80060c0 <http_find_file+0x244>)
 8005fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb6:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 8005fb8:	4b42      	ldr	r3, [pc, #264]	; (80060c4 <http_find_file+0x248>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d034      	beq.n	800602a <http_find_file+0x1ae>
 8005fc0:	4b41      	ldr	r3, [pc, #260]	; (80060c8 <http_find_file+0x24c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d030      	beq.n	800602a <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8005fc8:	2300      	movs	r3, #0
 8005fca:	633b      	str	r3, [r7, #48]	; 0x30
 8005fcc:	e028      	b.n	8006020 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8005fce:	68b8      	ldr	r0, [r7, #8]
 8005fd0:	4b3d      	ldr	r3, [pc, #244]	; (80060c8 <http_find_file+0x24c>)
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	4413      	add	r3, r2
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	f7fa f907 	bl	80001f0 <strcmp>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d118      	bne.n	800601a <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 8005fe8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f7ff f922 	bl	8005234 <extract_uri_parameters>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	4a33      	ldr	r2, [pc, #204]	; (80060c0 <http_find_file+0x244>)
 8005ff4:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8005ff6:	4b34      	ldr	r3, [pc, #208]	; (80060c8 <http_find_file+0x24c>)
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	00db      	lsls	r3, r3, #3
 8005ffe:	4413      	add	r3, r2
 8006000:	685c      	ldr	r4, [r3, #4]
 8006002:	4b2f      	ldr	r3, [pc, #188]	; (80060c0 <http_find_file+0x244>)
 8006004:	6819      	ldr	r1, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8006010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006012:	47a0      	blx	r4
 8006014:	4603      	mov	r3, r0
 8006016:	60bb      	str	r3, [r7, #8]
          break;
 8006018:	e007      	b.n	800602a <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800601a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601c:	3301      	adds	r3, #1
 800601e:	633b      	str	r3, [r7, #48]	; 0x30
 8006020:	4b28      	ldr	r3, [pc, #160]	; (80060c4 <http_find_file+0x248>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006026:	429a      	cmp	r2, r3
 8006028:	dbd1      	blt.n	8005fce <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	4611      	mov	r1, r2
 8006030:	4618      	mov	r0, r3
 8006032:	f7fe ff63 	bl	8004efc <fs_open>
 8006036:	4603      	mov	r3, r0
 8006038:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800603a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d102      	bne.n	8006048 <http_find_file+0x1cc>
      file = &hs->file_handle;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	63bb      	str	r3, [r7, #56]	; 0x38
 8006046:	e006      	b.n	8006056 <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 8006048:	f107 0308 	add.w	r3, r7, #8
 800604c:	4619      	mov	r1, r3
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f7ff fd94 	bl	8005b7c <http_get_404_file>
 8006054:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 8006056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006058:	2b00      	cmp	r3, #0
 800605a:	d011      	beq.n	8006080 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800605c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605e:	7c1b      	ldrb	r3, [r3, #16]
 8006060:	f003 0308 	and.w	r3, r3, #8
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <http_find_file+0x1f4>
        tag_check = 1;
 8006068:	2301      	movs	r3, #1
 800606a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800606e:	e007      	b.n	8006080 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	4619      	mov	r1, r3
 8006074:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006076:	f7ff feaf 	bl	8005dd8 <http_uri_is_ssi>
 800607a:	4603      	mov	r3, r0
 800607c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8006080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006082:	2b00      	cmp	r3, #0
 8006084:	d106      	bne.n	8006094 <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8006086:	f107 0308 	add.w	r3, r7, #8
 800608a:	4619      	mov	r1, r3
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f7ff fd75 	bl	8005b7c <http_get_404_file>
 8006092:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006098:	9301      	str	r3, [sp, #4]
 800609a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	4613      	mov	r3, r2
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 f810 	bl	80060cc <http_init_file>
 80060ac:	4603      	mov	r3, r0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3744      	adds	r7, #68	; 0x44
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd90      	pop	{r4, r7, pc}
 80060b6:	bf00      	nop
 80060b8:	20005180 	.word	0x20005180
 80060bc:	08015220 	.word	0x08015220
 80060c0:	200051d4 	.word	0x200051d4
 80060c4:	200051d0 	.word	0x200051d0
 80060c8:	200051cc 	.word	0x200051cc

080060cc <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
 80060d8:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d07d      	beq.n	80061dc <http_init_file+0x110>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d106      	bne.n	80060f6 <http_init_file+0x2a>
 80060e8:	4b45      	ldr	r3, [pc, #276]	; (8006200 <http_init_file+0x134>)
 80060ea:	f640 120b 	movw	r2, #2315	; 0x90b
 80060ee:	4945      	ldr	r1, [pc, #276]	; (8006204 <http_init_file+0x138>)
 80060f0:	4845      	ldr	r0, [pc, #276]	; (8006208 <http_init_file+0x13c>)
 80060f2:	f00a ff19 	bl	8010f28 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 80060f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d01c      	beq.n	8006138 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 80060fe:	f7fe ff54 	bl	8004faa <http_ssi_state_alloc>
 8006102:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d016      	beq.n	8006138 <http_init_file+0x6c>
        ssi->tag_index = 0;
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	2200      	movs	r2, #0
 800610e:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        ssi->parsed = file->data;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	461a      	mov	r2, r3
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	69fa      	ldr	r2, [r7, #28]
 8006136:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	da06      	bge.n	800615c <http_init_file+0x90>
 800614e:	4b2c      	ldr	r3, [pc, #176]	; (8006200 <http_init_file+0x134>)
 8006150:	f640 1234 	movw	r2, #2356	; 0x934
 8006154:	492d      	ldr	r1, [pc, #180]	; (800620c <http_init_file+0x140>)
 8006156:	482c      	ldr	r0, [pc, #176]	; (8006208 <http_init_file+0x13c>)
 8006158:	f00a fee6 	bl	8010f28 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	461a      	mov	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	7c1b      	ldrb	r3, [r3, #16]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d106      	bne.n	800618a <http_init_file+0xbe>
 800617c:	4b20      	ldr	r3, [pc, #128]	; (8006200 <http_init_file+0x134>)
 800617e:	f640 1243 	movw	r2, #2371	; 0x943
 8006182:	4923      	ldr	r1, [pc, #140]	; (8006210 <http_init_file+0x144>)
 8006184:	4820      	ldr	r0, [pc, #128]	; (8006208 <http_init_file+0x13c>)
 8006186:	f00a fecf 	bl	8010f28 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d032      	beq.n	80061f6 <http_init_file+0x12a>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	7c1b      	ldrb	r3, [r3, #16]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d02b      	beq.n	80061f6 <http_init_file+0x12a>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6998      	ldr	r0, [r3, #24]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	461a      	mov	r2, r3
 80061a8:	491a      	ldr	r1, [pc, #104]	; (8006214 <http_init_file+0x148>)
 80061aa:	f000 fa27 	bl	80065fc <lwip_strnstr>
 80061ae:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d01f      	beq.n	80061f6 <http_init_file+0x12a>
        int diff = file_start + 4 - hs->file;
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	1d1a      	adds	r2, r3, #4
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	699a      	ldr	r2, [r3, #24]
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	441a      	add	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	1ad2      	subs	r2, r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	625a      	str	r2, [r3, #36]	; 0x24
 80061da:	e00c      	b.n	80061f6 <http_init_file+0x12a>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3720      	adds	r7, #32
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	0801213c 	.word	0x0801213c
 8006204:	08012288 	.word	0x08012288
 8006208:	08012184 	.word	0x08012184
 800620c:	0801229c 	.word	0x0801229c
 8006210:	080122bc 	.word	0x080122bc
 8006214:	08012280 	.word	0x08012280

08006218 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	460b      	mov	r3, r1
 8006222:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <http_err+0x1c>
    http_state_free(hs);
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f7fe ff28 	bl	8005084 <http_state_free>
  }
}
 8006234:	bf00      	nop
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	4613      	mov	r3, r2
 8006248:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <http_sent+0x1c>
    return ERR_OK;
 8006254:	2300      	movs	r3, #0
 8006256:	e008      	b.n	800626a <http_sent+0x2e>
  }

  hs->retries = 0;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8006260:	6979      	ldr	r1, [r7, #20]
 8006262:	68b8      	ldr	r0, [r7, #8]
 8006264:	f7ff fc48 	bl	8005af8 <http_send>

  return ERR_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b084      	sub	sp, #16
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d107      	bne.n	8006296 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8006286:	2100      	movs	r1, #0
 8006288:	6838      	ldr	r0, [r7, #0]
 800628a:	f7fe ffb7 	bl	80051fc <http_close_conn>
 800628e:	4603      	mov	r3, r0
 8006290:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	e021      	b.n	80062da <http_poll+0x68>
  } else {
    hs->retries++;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800629c:	3301      	adds	r3, #1
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d105      	bne.n	80062bc <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 80062b0:	68f9      	ldr	r1, [r7, #12]
 80062b2:	6838      	ldr	r0, [r7, #0]
 80062b4:	f7fe ffa2 	bl	80051fc <http_close_conn>
      return ERR_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	e00e      	b.n	80062da <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d009      	beq.n	80062d8 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 80062c4:	68f9      	ldr	r1, [r7, #12]
 80062c6:	6838      	ldr	r0, [r7, #0]
 80062c8:	f7ff fc16 	bl	8005af8 <http_send>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d002      	beq.n	80062d8 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 80062d2:	6838      	ldr	r0, [r7, #0]
 80062d4:	f007 f89e 	bl	800d414 <tcp_output>
      }
    }
  }

  return ERR_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
	...

080062e4 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
 80062f0:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80062f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d105      	bne.n	800630a <http_recv+0x26>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <http_recv+0x26>
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d111      	bne.n	800632e <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d008      	beq.n	8006322 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	891b      	ldrh	r3, [r3, #8]
 8006314:	4619      	mov	r1, r3
 8006316:	68b8      	ldr	r0, [r7, #8]
 8006318:	f002 fc6c 	bl	8008bf4 <tcp_recved>
      pbuf_free(p);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f001 fd07 	bl	8007d30 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8006322:	6979      	ldr	r1, [r7, #20]
 8006324:	68b8      	ldr	r0, [r7, #8]
 8006326:	f7fe ff69 	bl	80051fc <http_close_conn>
    return ERR_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	e055      	b.n	80063da <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	891b      	ldrh	r3, [r3, #8]
 8006332:	4619      	mov	r1, r3
 8006334:	68b8      	ldr	r0, [r7, #8]
 8006336:	f002 fc5d 	bl	8008bf4 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d147      	bne.n	80063d2 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	6979      	ldr	r1, [r7, #20]
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7ff fc5e 	bl	8005c08 <http_parse_request>
 800634c:	4603      	mov	r3, r0
 800634e:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8006350:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d015      	beq.n	8006384 <http_recv+0xa0>
 8006358:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800635c:	f113 0f05 	cmn.w	r3, #5
 8006360:	d010      	beq.n	8006384 <http_recv+0xa0>
 8006362:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006366:	f113 0f10 	cmn.w	r3, #16
 800636a:	d00b      	beq.n	8006384 <http_recv+0xa0>
 800636c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006370:	f113 0f08 	cmn.w	r3, #8
 8006374:	d006      	beq.n	8006384 <http_recv+0xa0>
 8006376:	4b1b      	ldr	r3, [pc, #108]	; (80063e4 <http_recv+0x100>)
 8006378:	f640 2204 	movw	r2, #2564	; 0xa04
 800637c:	491a      	ldr	r1, [pc, #104]	; (80063e8 <http_recv+0x104>)
 800637e:	481b      	ldr	r0, [pc, #108]	; (80063ec <http_recv+0x108>)
 8006380:	f00a fdd2 	bl	8010f28 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8006384:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006388:	f113 0f05 	cmn.w	r3, #5
 800638c:	d00b      	beq.n	80063a6 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d007      	beq.n	80063a6 <http_recv+0xc2>
          pbuf_free(hs->req);
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	4618      	mov	r0, r3
 800639c:	f001 fcc8 	bl	8007d30 <pbuf_free>
          hs->req = NULL;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2200      	movs	r2, #0
 80063a4:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f001 fcc2 	bl	8007d30 <pbuf_free>
      if (parsed == ERR_OK) {
 80063ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d104      	bne.n	80063be <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 80063b4:	6979      	ldr	r1, [r7, #20]
 80063b6:	68b8      	ldr	r0, [r7, #8]
 80063b8:	f7ff fb9e 	bl	8005af8 <http_send>
 80063bc:	e00c      	b.n	80063d8 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 80063be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80063c2:	f113 0f10 	cmn.w	r3, #16
 80063c6:	d107      	bne.n	80063d8 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 80063c8:	6979      	ldr	r1, [r7, #20]
 80063ca:	68b8      	ldr	r0, [r7, #8]
 80063cc:	f7fe ff16 	bl	80051fc <http_close_conn>
 80063d0:	e002      	b.n	80063d8 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f001 fcac 	bl	8007d30 <pbuf_free>
    }
  }
  return ERR_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	0801213c 	.word	0x0801213c
 80063e8:	080122e8 	.word	0x080122e8
 80063ec:	08012184 	.word	0x08012184

080063f0 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	4613      	mov	r3, r2
 80063fc:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 80063fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d102      	bne.n	800640c <http_accept+0x1c>
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d102      	bne.n	8006412 <http_accept+0x22>
    return ERR_VAL;
 800640c:	f06f 0305 	mvn.w	r3, #5
 8006410:	e025      	b.n	800645e <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8006412:	2101      	movs	r1, #1
 8006414:	68b8      	ldr	r0, [r7, #8]
 8006416:	f003 f8d1 	bl	80095bc <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800641a:	f7fe fdf5 	bl	8005008 <http_state_alloc>
 800641e:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d102      	bne.n	800642c <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8006426:	f04f 33ff 	mov.w	r3, #4294967295
 800642a:	e018      	b.n	800645e <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8006432:	6979      	ldr	r1, [r7, #20]
 8006434:	68b8      	ldr	r0, [r7, #8]
 8006436:	f003 fac1 	bl	80099bc <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800643a:	490b      	ldr	r1, [pc, #44]	; (8006468 <http_accept+0x78>)
 800643c:	68b8      	ldr	r0, [r7, #8]
 800643e:	f003 facf 	bl	80099e0 <tcp_recv>
  altcp_err(pcb, http_err);
 8006442:	490a      	ldr	r1, [pc, #40]	; (800646c <http_accept+0x7c>)
 8006444:	68b8      	ldr	r0, [r7, #8]
 8006446:	f003 fb0f 	bl	8009a68 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800644a:	2204      	movs	r2, #4
 800644c:	4908      	ldr	r1, [pc, #32]	; (8006470 <http_accept+0x80>)
 800644e:	68b8      	ldr	r0, [r7, #8]
 8006450:	f003 fb44 	bl	8009adc <tcp_poll>
  altcp_sent(pcb, http_sent);
 8006454:	4907      	ldr	r1, [pc, #28]	; (8006474 <http_accept+0x84>)
 8006456:	68b8      	ldr	r0, [r7, #8]
 8006458:	f003 fae4 	bl	8009a24 <tcp_sent>

  return ERR_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	080062e5 	.word	0x080062e5
 800646c:	08006219 	.word	0x08006219
 8006470:	08006273 	.word	0x08006273
 8006474:	0800623d 	.word	0x0800623d

08006478 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d029      	beq.n	80064de <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800648a:	2101      	movs	r1, #1
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f003 f895 	bl	80095bc <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8006492:	887b      	ldrh	r3, [r7, #2]
 8006494:	461a      	mov	r2, r3
 8006496:	4914      	ldr	r1, [pc, #80]	; (80064e8 <httpd_init_pcb+0x70>)
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f002 f9dd 	bl	8008858 <tcp_bind>
 800649e:	4603      	mov	r3, r0
 80064a0:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80064a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d006      	beq.n	80064b8 <httpd_init_pcb+0x40>
 80064aa:	4b10      	ldr	r3, [pc, #64]	; (80064ec <httpd_init_pcb+0x74>)
 80064ac:	f640 2257 	movw	r2, #2647	; 0xa57
 80064b0:	490f      	ldr	r1, [pc, #60]	; (80064f0 <httpd_init_pcb+0x78>)
 80064b2:	4810      	ldr	r0, [pc, #64]	; (80064f4 <httpd_init_pcb+0x7c>)
 80064b4:	f00a fd38 	bl	8010f28 <iprintf>
    pcb = altcp_listen(pcb);
 80064b8:	21ff      	movs	r1, #255	; 0xff
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f002 fa84 	bl	80089c8 <tcp_listen_with_backlog>
 80064c0:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d106      	bne.n	80064d6 <httpd_init_pcb+0x5e>
 80064c8:	4b08      	ldr	r3, [pc, #32]	; (80064ec <httpd_init_pcb+0x74>)
 80064ca:	f640 2259 	movw	r2, #2649	; 0xa59
 80064ce:	490a      	ldr	r1, [pc, #40]	; (80064f8 <httpd_init_pcb+0x80>)
 80064d0:	4808      	ldr	r0, [pc, #32]	; (80064f4 <httpd_init_pcb+0x7c>)
 80064d2:	f00a fd29 	bl	8010f28 <iprintf>
    altcp_accept(pcb, http_accept);
 80064d6:	4909      	ldr	r1, [pc, #36]	; (80064fc <httpd_init_pcb+0x84>)
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f003 fae7 	bl	8009aac <tcp_accept>
  }
}
 80064de:	bf00      	nop
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	08015328 	.word	0x08015328
 80064ec:	0801213c 	.word	0x0801213c
 80064f0:	08012314 	.word	0x08012314
 80064f4:	08012184 	.word	0x08012184
 80064f8:	08012330 	.word	0x08012330
 80064fc:	080063f1 	.word	0x080063f1

08006500 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8006506:	202e      	movs	r0, #46	; 0x2e
 8006508:	f003 fa4a 	bl	80099a0 <tcp_new_ip_type>
 800650c:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d106      	bne.n	8006522 <httpd_init+0x22>
 8006514:	4b07      	ldr	r3, [pc, #28]	; (8006534 <httpd_init+0x34>)
 8006516:	f640 2272 	movw	r2, #2674	; 0xa72
 800651a:	4907      	ldr	r1, [pc, #28]	; (8006538 <httpd_init+0x38>)
 800651c:	4807      	ldr	r0, [pc, #28]	; (800653c <httpd_init+0x3c>)
 800651e:	f00a fd03 	bl	8010f28 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8006522:	2150      	movs	r1, #80	; 0x50
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7ff ffa7 	bl	8006478 <httpd_init_pcb>
}
 800652a:	bf00      	nop
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	0801213c 	.word	0x0801213c
 8006538:	08012350 	.word	0x08012350
 800653c:	08012184 	.word	0x08012184

08006540 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d106      	bne.n	800655e <http_set_cgi_handlers+0x1e>
 8006550:	4b0d      	ldr	r3, [pc, #52]	; (8006588 <http_set_cgi_handlers+0x48>)
 8006552:	f640 22b2 	movw	r2, #2738	; 0xab2
 8006556:	490d      	ldr	r1, [pc, #52]	; (800658c <http_set_cgi_handlers+0x4c>)
 8006558:	480d      	ldr	r0, [pc, #52]	; (8006590 <http_set_cgi_handlers+0x50>)
 800655a:	f00a fce5 	bl	8010f28 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	dc06      	bgt.n	8006572 <http_set_cgi_handlers+0x32>
 8006564:	4b08      	ldr	r3, [pc, #32]	; (8006588 <http_set_cgi_handlers+0x48>)
 8006566:	f640 22b3 	movw	r2, #2739	; 0xab3
 800656a:	490a      	ldr	r1, [pc, #40]	; (8006594 <http_set_cgi_handlers+0x54>)
 800656c:	4808      	ldr	r0, [pc, #32]	; (8006590 <http_set_cgi_handlers+0x50>)
 800656e:	f00a fcdb 	bl	8010f28 <iprintf>

  httpd_cgis = cgis;
 8006572:	4a09      	ldr	r2, [pc, #36]	; (8006598 <http_set_cgi_handlers+0x58>)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 8006578:	4a08      	ldr	r2, [pc, #32]	; (800659c <http_set_cgi_handlers+0x5c>)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	6013      	str	r3, [r2, #0]
}
 800657e:	bf00      	nop
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	0801213c 	.word	0x0801213c
 800658c:	080123ac 	.word	0x080123ac
 8006590:	08012184 	.word	0x08012184
 8006594:	080123bc 	.word	0x080123bc
 8006598:	200051cc 	.word	0x200051cc
 800659c:	200051d0 	.word	0x200051d0

080065a0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	4603      	mov	r3, r0
 80065a8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80065aa:	88fb      	ldrh	r3, [r7, #6]
 80065ac:	021b      	lsls	r3, r3, #8
 80065ae:	b21a      	sxth	r2, r3
 80065b0:	88fb      	ldrh	r3, [r7, #6]
 80065b2:	0a1b      	lsrs	r3, r3, #8
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	b21b      	sxth	r3, r3
 80065b8:	4313      	orrs	r3, r2
 80065ba:	b21b      	sxth	r3, r3
 80065bc:	b29b      	uxth	r3, r3
}
 80065be:	4618      	mov	r0, r3
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b083      	sub	sp, #12
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	061a      	lsls	r2, r3, #24
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	021b      	lsls	r3, r3, #8
 80065da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065de:	431a      	orrs	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	0a1b      	lsrs	r3, r3, #8
 80065e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80065e8:	431a      	orrs	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	0e1b      	lsrs	r3, r3, #24
 80065ee:	4313      	orrs	r3, r2
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8006608:	68b8      	ldr	r0, [r7, #8]
 800660a:	f7f9 fdfb 	bl	8000204 <strlen>
 800660e:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	e022      	b.n	8006660 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	617b      	str	r3, [r7, #20]
 800661e:	e012      	b.n	8006646 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	781a      	ldrb	r2, [r3, #0]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	429a      	cmp	r2, r3
 800662a:	d109      	bne.n	8006640 <lwip_strnstr+0x44>
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	68b9      	ldr	r1, [r7, #8]
 8006630:	6978      	ldr	r0, [r7, #20]
 8006632:	f00a fcdc 	bl	8010fee <strncmp>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	e00f      	b.n	8006660 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	3301      	adds	r3, #1
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d007      	beq.n	800665e <lwip_strnstr+0x62>
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	441a      	add	r2, r3
 8006654:	68f9      	ldr	r1, [r7, #12]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	440b      	add	r3, r1
 800665a:	429a      	cmp	r2, r3
 800665c:	d9e0      	bls.n	8006620 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3718      	adds	r7, #24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	1c5a      	adds	r2, r3, #1
 8006680:	603a      	str	r2, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 8006686:	7bfa      	ldrb	r2, [r7, #15]
 8006688:	7bbb      	ldrb	r3, [r7, #14]
 800668a:	429a      	cmp	r2, r3
 800668c:	d016      	beq.n	80066bc <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	f043 0320 	orr.w	r3, r3, #32
 8006694:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8006696:	7b7b      	ldrb	r3, [r7, #13]
 8006698:	2b60      	cmp	r3, #96	; 0x60
 800669a:	d90c      	bls.n	80066b6 <lwip_stricmp+0x4e>
 800669c:	7b7b      	ldrb	r3, [r7, #13]
 800669e:	2b7a      	cmp	r3, #122	; 0x7a
 80066a0:	d809      	bhi.n	80066b6 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 80066a2:	7bbb      	ldrb	r3, [r7, #14]
 80066a4:	f043 0320 	orr.w	r3, r3, #32
 80066a8:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 80066aa:	7b7a      	ldrb	r2, [r7, #13]
 80066ac:	7b3b      	ldrb	r3, [r7, #12]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d003      	beq.n	80066ba <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e006      	b.n	80066c4 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e004      	b.n	80066c4 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80066ba:	bf00      	nop
      }
    }
  } while (c1 != 0);
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1d7      	bne.n	8006672 <lwip_stricmp+0xa>
  return 0;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80066d6:	2300      	movs	r3, #0
 80066d8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80066da:	f000 f8d5 	bl	8006888 <mem_init>
  memp_init();
 80066de:	f000 fbdb 	bl	8006e98 <memp_init>
  pbuf_init();
  netif_init();
 80066e2:	f000 fcd9 	bl	8007098 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80066e6:	f007 ff55 	bl	800e594 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80066ea:	f001 fdaf 	bl	800824c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80066ee:	f007 fec7 	bl	800e480 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80066f2:	bf00      	nop
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	4603      	mov	r3, r0
 8006704:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006706:	4b05      	ldr	r3, [pc, #20]	; (800671c <ptr_to_mem+0x20>)
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	88fb      	ldrh	r3, [r7, #6]
 800670c:	4413      	add	r3, r2
}
 800670e:	4618      	mov	r0, r3
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	20005844 	.word	0x20005844

08006720 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006728:	4b05      	ldr	r3, [pc, #20]	; (8006740 <mem_to_ptr+0x20>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	b29b      	uxth	r3, r3
}
 8006732:	4618      	mov	r0, r3
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	20005844 	.word	0x20005844

08006744 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006744:	b590      	push	{r4, r7, lr}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800674c:	4b45      	ldr	r3, [pc, #276]	; (8006864 <plug_holes+0x120>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	429a      	cmp	r2, r3
 8006754:	d206      	bcs.n	8006764 <plug_holes+0x20>
 8006756:	4b44      	ldr	r3, [pc, #272]	; (8006868 <plug_holes+0x124>)
 8006758:	f240 12df 	movw	r2, #479	; 0x1df
 800675c:	4943      	ldr	r1, [pc, #268]	; (800686c <plug_holes+0x128>)
 800675e:	4844      	ldr	r0, [pc, #272]	; (8006870 <plug_holes+0x12c>)
 8006760:	f00a fbe2 	bl	8010f28 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006764:	4b43      	ldr	r3, [pc, #268]	; (8006874 <plug_holes+0x130>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	429a      	cmp	r2, r3
 800676c:	d306      	bcc.n	800677c <plug_holes+0x38>
 800676e:	4b3e      	ldr	r3, [pc, #248]	; (8006868 <plug_holes+0x124>)
 8006770:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006774:	4940      	ldr	r1, [pc, #256]	; (8006878 <plug_holes+0x134>)
 8006776:	483e      	ldr	r0, [pc, #248]	; (8006870 <plug_holes+0x12c>)
 8006778:	f00a fbd6 	bl	8010f28 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	791b      	ldrb	r3, [r3, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d006      	beq.n	8006792 <plug_holes+0x4e>
 8006784:	4b38      	ldr	r3, [pc, #224]	; (8006868 <plug_holes+0x124>)
 8006786:	f240 12e1 	movw	r2, #481	; 0x1e1
 800678a:	493c      	ldr	r1, [pc, #240]	; (800687c <plug_holes+0x138>)
 800678c:	4838      	ldr	r0, [pc, #224]	; (8006870 <plug_holes+0x12c>)
 800678e:	f00a fbcb 	bl	8010f28 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800679a:	d906      	bls.n	80067aa <plug_holes+0x66>
 800679c:	4b32      	ldr	r3, [pc, #200]	; (8006868 <plug_holes+0x124>)
 800679e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80067a2:	4937      	ldr	r1, [pc, #220]	; (8006880 <plug_holes+0x13c>)
 80067a4:	4832      	ldr	r0, [pc, #200]	; (8006870 <plug_holes+0x12c>)
 80067a6:	f00a fbbf 	bl	8010f28 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7ff ffa4 	bl	80066fc <ptr_to_mem>
 80067b4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d024      	beq.n	8006808 <plug_holes+0xc4>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	791b      	ldrb	r3, [r3, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d120      	bne.n	8006808 <plug_holes+0xc4>
 80067c6:	4b2b      	ldr	r3, [pc, #172]	; (8006874 <plug_holes+0x130>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d01b      	beq.n	8006808 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80067d0:	4b2c      	ldr	r3, [pc, #176]	; (8006884 <plug_holes+0x140>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d102      	bne.n	80067e0 <plug_holes+0x9c>
      lfree = mem;
 80067da:	4a2a      	ldr	r2, [pc, #168]	; (8006884 <plug_holes+0x140>)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	881a      	ldrh	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80067f0:	d00a      	beq.n	8006808 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff ff80 	bl	80066fc <ptr_to_mem>
 80067fc:	4604      	mov	r4, r0
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7ff ff8e 	bl	8006720 <mem_to_ptr>
 8006804:	4603      	mov	r3, r0
 8006806:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	885b      	ldrh	r3, [r3, #2]
 800680c:	4618      	mov	r0, r3
 800680e:	f7ff ff75 	bl	80066fc <ptr_to_mem>
 8006812:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	429a      	cmp	r2, r3
 800681a:	d01f      	beq.n	800685c <plug_holes+0x118>
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	791b      	ldrb	r3, [r3, #4]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d11b      	bne.n	800685c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006824:	4b17      	ldr	r3, [pc, #92]	; (8006884 <plug_holes+0x140>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	429a      	cmp	r2, r3
 800682c:	d102      	bne.n	8006834 <plug_holes+0xf0>
      lfree = pmem;
 800682e:	4a15      	ldr	r2, [pc, #84]	; (8006884 <plug_holes+0x140>)
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	881a      	ldrh	r2, [r3, #0]
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006844:	d00a      	beq.n	800685c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	4618      	mov	r0, r3
 800684c:	f7ff ff56 	bl	80066fc <ptr_to_mem>
 8006850:	4604      	mov	r4, r0
 8006852:	68b8      	ldr	r0, [r7, #8]
 8006854:	f7ff ff64 	bl	8006720 <mem_to_ptr>
 8006858:	4603      	mov	r3, r0
 800685a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800685c:	bf00      	nop
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	bd90      	pop	{r4, r7, pc}
 8006864:	20005844 	.word	0x20005844
 8006868:	080123d8 	.word	0x080123d8
 800686c:	08012408 	.word	0x08012408
 8006870:	08012420 	.word	0x08012420
 8006874:	20005848 	.word	0x20005848
 8006878:	08012448 	.word	0x08012448
 800687c:	08012464 	.word	0x08012464
 8006880:	08012480 	.word	0x08012480
 8006884:	2000584c 	.word	0x2000584c

08006888 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800688e:	4b18      	ldr	r3, [pc, #96]	; (80068f0 <mem_init+0x68>)
 8006890:	3303      	adds	r3, #3
 8006892:	f023 0303 	bic.w	r3, r3, #3
 8006896:	461a      	mov	r2, r3
 8006898:	4b16      	ldr	r3, [pc, #88]	; (80068f4 <mem_init+0x6c>)
 800689a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800689c:	4b15      	ldr	r3, [pc, #84]	; (80068f4 <mem_init+0x6c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80068a8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80068b6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80068ba:	f7ff ff1f 	bl	80066fc <ptr_to_mem>
 80068be:	4603      	mov	r3, r0
 80068c0:	4a0d      	ldr	r2, [pc, #52]	; (80068f8 <mem_init+0x70>)
 80068c2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80068c4:	4b0c      	ldr	r3, [pc, #48]	; (80068f8 <mem_init+0x70>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2201      	movs	r2, #1
 80068ca:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80068cc:	4b0a      	ldr	r3, [pc, #40]	; (80068f8 <mem_init+0x70>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80068d4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80068d6:	4b08      	ldr	r3, [pc, #32]	; (80068f8 <mem_init+0x70>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80068de:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80068e0:	4b04      	ldr	r3, [pc, #16]	; (80068f4 <mem_init+0x6c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a05      	ldr	r2, [pc, #20]	; (80068fc <mem_init+0x74>)
 80068e6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80068e8:	bf00      	nop
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	200051f0 	.word	0x200051f0
 80068f4:	20005844 	.word	0x20005844
 80068f8:	20005848 	.word	0x20005848
 80068fc:	2000584c 	.word	0x2000584c

08006900 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7ff ff09 	bl	8006720 <mem_to_ptr>
 800690e:	4603      	mov	r3, r0
 8006910:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	4618      	mov	r0, r3
 8006918:	f7ff fef0 	bl	80066fc <ptr_to_mem>
 800691c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	885b      	ldrh	r3, [r3, #2]
 8006922:	4618      	mov	r0, r3
 8006924:	f7ff feea 	bl	80066fc <ptr_to_mem>
 8006928:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006932:	d818      	bhi.n	8006966 <mem_link_valid+0x66>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	885b      	ldrh	r3, [r3, #2]
 8006938:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800693c:	d813      	bhi.n	8006966 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006942:	8afa      	ldrh	r2, [r7, #22]
 8006944:	429a      	cmp	r2, r3
 8006946:	d004      	beq.n	8006952 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	8afa      	ldrh	r2, [r7, #22]
 800694e:	429a      	cmp	r2, r3
 8006950:	d109      	bne.n	8006966 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006952:	4b08      	ldr	r3, [pc, #32]	; (8006974 <mem_link_valid+0x74>)
 8006954:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	429a      	cmp	r2, r3
 800695a:	d006      	beq.n	800696a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	885b      	ldrh	r3, [r3, #2]
 8006960:	8afa      	ldrh	r2, [r7, #22]
 8006962:	429a      	cmp	r2, r3
 8006964:	d001      	beq.n	800696a <mem_link_valid+0x6a>
    return 0;
 8006966:	2300      	movs	r3, #0
 8006968:	e000      	b.n	800696c <mem_link_valid+0x6c>
  }
  return 1;
 800696a:	2301      	movs	r3, #1
}
 800696c:	4618      	mov	r0, r3
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	20005848 	.word	0x20005848

08006978 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d04c      	beq.n	8006a20 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f003 0303 	and.w	r3, r3, #3
 800698c:	2b00      	cmp	r3, #0
 800698e:	d007      	beq.n	80069a0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006990:	4b25      	ldr	r3, [pc, #148]	; (8006a28 <mem_free+0xb0>)
 8006992:	f240 2273 	movw	r2, #627	; 0x273
 8006996:	4925      	ldr	r1, [pc, #148]	; (8006a2c <mem_free+0xb4>)
 8006998:	4825      	ldr	r0, [pc, #148]	; (8006a30 <mem_free+0xb8>)
 800699a:	f00a fac5 	bl	8010f28 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800699e:	e040      	b.n	8006a22 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3b08      	subs	r3, #8
 80069a4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80069a6:	4b23      	ldr	r3, [pc, #140]	; (8006a34 <mem_free+0xbc>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d306      	bcc.n	80069be <mem_free+0x46>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f103 020c 	add.w	r2, r3, #12
 80069b6:	4b20      	ldr	r3, [pc, #128]	; (8006a38 <mem_free+0xc0>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d907      	bls.n	80069ce <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80069be:	4b1a      	ldr	r3, [pc, #104]	; (8006a28 <mem_free+0xb0>)
 80069c0:	f240 227f 	movw	r2, #639	; 0x27f
 80069c4:	491d      	ldr	r1, [pc, #116]	; (8006a3c <mem_free+0xc4>)
 80069c6:	481a      	ldr	r0, [pc, #104]	; (8006a30 <mem_free+0xb8>)
 80069c8:	f00a faae 	bl	8010f28 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80069cc:	e029      	b.n	8006a22 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	791b      	ldrb	r3, [r3, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d107      	bne.n	80069e6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80069d6:	4b14      	ldr	r3, [pc, #80]	; (8006a28 <mem_free+0xb0>)
 80069d8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80069dc:	4918      	ldr	r1, [pc, #96]	; (8006a40 <mem_free+0xc8>)
 80069de:	4814      	ldr	r0, [pc, #80]	; (8006a30 <mem_free+0xb8>)
 80069e0:	f00a faa2 	bl	8010f28 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80069e4:	e01d      	b.n	8006a22 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f7ff ff8a 	bl	8006900 <mem_link_valid>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d107      	bne.n	8006a02 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80069f2:	4b0d      	ldr	r3, [pc, #52]	; (8006a28 <mem_free+0xb0>)
 80069f4:	f240 2295 	movw	r2, #661	; 0x295
 80069f8:	4912      	ldr	r1, [pc, #72]	; (8006a44 <mem_free+0xcc>)
 80069fa:	480d      	ldr	r0, [pc, #52]	; (8006a30 <mem_free+0xb8>)
 80069fc:	f00a fa94 	bl	8010f28 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006a00:	e00f      	b.n	8006a22 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006a08:	4b0f      	ldr	r3, [pc, #60]	; (8006a48 <mem_free+0xd0>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d202      	bcs.n	8006a18 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006a12:	4a0d      	ldr	r2, [pc, #52]	; (8006a48 <mem_free+0xd0>)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f7ff fe93 	bl	8006744 <plug_holes>
 8006a1e:	e000      	b.n	8006a22 <mem_free+0xaa>
    return;
 8006a20:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	080123d8 	.word	0x080123d8
 8006a2c:	080124ac 	.word	0x080124ac
 8006a30:	08012420 	.word	0x08012420
 8006a34:	20005844 	.word	0x20005844
 8006a38:	20005848 	.word	0x20005848
 8006a3c:	080124d0 	.word	0x080124d0
 8006a40:	080124ec 	.word	0x080124ec
 8006a44:	08012514 	.word	0x08012514
 8006a48:	2000584c 	.word	0x2000584c

08006a4c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b088      	sub	sp, #32
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	460b      	mov	r3, r1
 8006a56:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006a58:	887b      	ldrh	r3, [r7, #2]
 8006a5a:	3303      	adds	r3, #3
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	f023 0303 	bic.w	r3, r3, #3
 8006a62:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006a64:	8bfb      	ldrh	r3, [r7, #30]
 8006a66:	2b0b      	cmp	r3, #11
 8006a68:	d801      	bhi.n	8006a6e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8006a6a:	230c      	movs	r3, #12
 8006a6c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006a6e:	8bfb      	ldrh	r3, [r7, #30]
 8006a70:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006a74:	d803      	bhi.n	8006a7e <mem_trim+0x32>
 8006a76:	8bfa      	ldrh	r2, [r7, #30]
 8006a78:	887b      	ldrh	r3, [r7, #2]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d201      	bcs.n	8006a82 <mem_trim+0x36>
    return NULL;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	e0cc      	b.n	8006c1c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006a82:	4b68      	ldr	r3, [pc, #416]	; (8006c24 <mem_trim+0x1d8>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d304      	bcc.n	8006a96 <mem_trim+0x4a>
 8006a8c:	4b66      	ldr	r3, [pc, #408]	; (8006c28 <mem_trim+0x1dc>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d306      	bcc.n	8006aa4 <mem_trim+0x58>
 8006a96:	4b65      	ldr	r3, [pc, #404]	; (8006c2c <mem_trim+0x1e0>)
 8006a98:	f240 22d1 	movw	r2, #721	; 0x2d1
 8006a9c:	4964      	ldr	r1, [pc, #400]	; (8006c30 <mem_trim+0x1e4>)
 8006a9e:	4865      	ldr	r0, [pc, #404]	; (8006c34 <mem_trim+0x1e8>)
 8006aa0:	f00a fa42 	bl	8010f28 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006aa4:	4b5f      	ldr	r3, [pc, #380]	; (8006c24 <mem_trim+0x1d8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d304      	bcc.n	8006ab8 <mem_trim+0x6c>
 8006aae:	4b5e      	ldr	r3, [pc, #376]	; (8006c28 <mem_trim+0x1dc>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d301      	bcc.n	8006abc <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	e0af      	b.n	8006c1c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3b08      	subs	r3, #8
 8006ac0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006ac2:	69b8      	ldr	r0, [r7, #24]
 8006ac4:	f7ff fe2c 	bl	8006720 <mem_to_ptr>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	881a      	ldrh	r2, [r3, #0]
 8006ad0:	8afb      	ldrh	r3, [r7, #22]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	3b08      	subs	r3, #8
 8006ad8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006ada:	8bfa      	ldrh	r2, [r7, #30]
 8006adc:	8abb      	ldrh	r3, [r7, #20]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d906      	bls.n	8006af0 <mem_trim+0xa4>
 8006ae2:	4b52      	ldr	r3, [pc, #328]	; (8006c2c <mem_trim+0x1e0>)
 8006ae4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8006ae8:	4953      	ldr	r1, [pc, #332]	; (8006c38 <mem_trim+0x1ec>)
 8006aea:	4852      	ldr	r0, [pc, #328]	; (8006c34 <mem_trim+0x1e8>)
 8006aec:	f00a fa1c 	bl	8010f28 <iprintf>
  if (newsize > size) {
 8006af0:	8bfa      	ldrh	r2, [r7, #30]
 8006af2:	8abb      	ldrh	r3, [r7, #20]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d901      	bls.n	8006afc <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006af8:	2300      	movs	r3, #0
 8006afa:	e08f      	b.n	8006c1c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006afc:	8bfa      	ldrh	r2, [r7, #30]
 8006afe:	8abb      	ldrh	r3, [r7, #20]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d101      	bne.n	8006b08 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	e089      	b.n	8006c1c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7ff fdf5 	bl	80066fc <ptr_to_mem>
 8006b12:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	791b      	ldrb	r3, [r3, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d13f      	bne.n	8006b9c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	881b      	ldrh	r3, [r3, #0]
 8006b20:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006b24:	d106      	bne.n	8006b34 <mem_trim+0xe8>
 8006b26:	4b41      	ldr	r3, [pc, #260]	; (8006c2c <mem_trim+0x1e0>)
 8006b28:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006b2c:	4943      	ldr	r1, [pc, #268]	; (8006c3c <mem_trim+0x1f0>)
 8006b2e:	4841      	ldr	r0, [pc, #260]	; (8006c34 <mem_trim+0x1e8>)
 8006b30:	f00a f9fa 	bl	8010f28 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006b3a:	8afa      	ldrh	r2, [r7, #22]
 8006b3c:	8bfb      	ldrh	r3, [r7, #30]
 8006b3e:	4413      	add	r3, r2
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	3308      	adds	r3, #8
 8006b44:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8006b46:	4b3e      	ldr	r3, [pc, #248]	; (8006c40 <mem_trim+0x1f4>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d106      	bne.n	8006b5e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8006b50:	89fb      	ldrh	r3, [r7, #14]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7ff fdd2 	bl	80066fc <ptr_to_mem>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	4a39      	ldr	r2, [pc, #228]	; (8006c40 <mem_trim+0x1f4>)
 8006b5c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8006b5e:	89fb      	ldrh	r3, [r7, #14]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7ff fdcb 	bl	80066fc <ptr_to_mem>
 8006b66:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	89ba      	ldrh	r2, [r7, #12]
 8006b72:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	8afa      	ldrh	r2, [r7, #22]
 8006b78:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	89fa      	ldrh	r2, [r7, #14]
 8006b7e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006b88:	d047      	beq.n	8006c1a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7ff fdb4 	bl	80066fc <ptr_to_mem>
 8006b94:	4602      	mov	r2, r0
 8006b96:	89fb      	ldrh	r3, [r7, #14]
 8006b98:	8053      	strh	r3, [r2, #2]
 8006b9a:	e03e      	b.n	8006c1a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006b9c:	8bfb      	ldrh	r3, [r7, #30]
 8006b9e:	f103 0214 	add.w	r2, r3, #20
 8006ba2:	8abb      	ldrh	r3, [r7, #20]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d838      	bhi.n	8006c1a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006ba8:	8afa      	ldrh	r2, [r7, #22]
 8006baa:	8bfb      	ldrh	r3, [r7, #30]
 8006bac:	4413      	add	r3, r2
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	3308      	adds	r3, #8
 8006bb2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006bbc:	d106      	bne.n	8006bcc <mem_trim+0x180>
 8006bbe:	4b1b      	ldr	r3, [pc, #108]	; (8006c2c <mem_trim+0x1e0>)
 8006bc0:	f240 3216 	movw	r2, #790	; 0x316
 8006bc4:	491d      	ldr	r1, [pc, #116]	; (8006c3c <mem_trim+0x1f0>)
 8006bc6:	481b      	ldr	r0, [pc, #108]	; (8006c34 <mem_trim+0x1e8>)
 8006bc8:	f00a f9ae 	bl	8010f28 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006bcc:	89fb      	ldrh	r3, [r7, #14]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7ff fd94 	bl	80066fc <ptr_to_mem>
 8006bd4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8006bd6:	4b1a      	ldr	r3, [pc, #104]	; (8006c40 <mem_trim+0x1f4>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d202      	bcs.n	8006be6 <mem_trim+0x19a>
      lfree = mem2;
 8006be0:	4a17      	ldr	r2, [pc, #92]	; (8006c40 <mem_trim+0x1f4>)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	2200      	movs	r2, #0
 8006bea:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	881a      	ldrh	r2, [r3, #0]
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	8afa      	ldrh	r2, [r7, #22]
 8006bf8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	89fa      	ldrh	r2, [r7, #14]
 8006bfe:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006c08:	d007      	beq.n	8006c1a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7ff fd74 	bl	80066fc <ptr_to_mem>
 8006c14:	4602      	mov	r2, r0
 8006c16:	89fb      	ldrh	r3, [r7, #14]
 8006c18:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006c1a:	687b      	ldr	r3, [r7, #4]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3720      	adds	r7, #32
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	20005844 	.word	0x20005844
 8006c28:	20005848 	.word	0x20005848
 8006c2c:	080123d8 	.word	0x080123d8
 8006c30:	08012548 	.word	0x08012548
 8006c34:	08012420 	.word	0x08012420
 8006c38:	08012560 	.word	0x08012560
 8006c3c:	08012580 	.word	0x08012580
 8006c40:	2000584c 	.word	0x2000584c

08006c44 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006c4e:	88fb      	ldrh	r3, [r7, #6]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <mem_malloc+0x14>
    return NULL;
 8006c54:	2300      	movs	r3, #0
 8006c56:	e0d9      	b.n	8006e0c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006c58:	88fb      	ldrh	r3, [r7, #6]
 8006c5a:	3303      	adds	r3, #3
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	f023 0303 	bic.w	r3, r3, #3
 8006c62:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006c64:	8bbb      	ldrh	r3, [r7, #28]
 8006c66:	2b0b      	cmp	r3, #11
 8006c68:	d801      	bhi.n	8006c6e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006c6a:	230c      	movs	r3, #12
 8006c6c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006c6e:	8bbb      	ldrh	r3, [r7, #28]
 8006c70:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006c74:	d803      	bhi.n	8006c7e <mem_malloc+0x3a>
 8006c76:	8bba      	ldrh	r2, [r7, #28]
 8006c78:	88fb      	ldrh	r3, [r7, #6]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d201      	bcs.n	8006c82 <mem_malloc+0x3e>
    return NULL;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	e0c4      	b.n	8006e0c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006c82:	4b64      	ldr	r3, [pc, #400]	; (8006e14 <mem_malloc+0x1d0>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff fd4a 	bl	8006720 <mem_to_ptr>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	83fb      	strh	r3, [r7, #30]
 8006c90:	e0b4      	b.n	8006dfc <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006c92:	8bfb      	ldrh	r3, [r7, #30]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7ff fd31 	bl	80066fc <ptr_to_mem>
 8006c9a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	791b      	ldrb	r3, [r3, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f040 80a4 	bne.w	8006dee <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	461a      	mov	r2, r3
 8006cac:	8bfb      	ldrh	r3, [r7, #30]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	f1a3 0208 	sub.w	r2, r3, #8
 8006cb4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	f0c0 8099 	bcc.w	8006dee <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	8bfb      	ldrh	r3, [r7, #30]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	f1a3 0208 	sub.w	r2, r3, #8
 8006cca:	8bbb      	ldrh	r3, [r7, #28]
 8006ccc:	3314      	adds	r3, #20
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d333      	bcc.n	8006d3a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006cd2:	8bfa      	ldrh	r2, [r7, #30]
 8006cd4:	8bbb      	ldrh	r3, [r7, #28]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	3308      	adds	r3, #8
 8006cdc:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006cde:	8a7b      	ldrh	r3, [r7, #18]
 8006ce0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006ce4:	d106      	bne.n	8006cf4 <mem_malloc+0xb0>
 8006ce6:	4b4c      	ldr	r3, [pc, #304]	; (8006e18 <mem_malloc+0x1d4>)
 8006ce8:	f240 3287 	movw	r2, #903	; 0x387
 8006cec:	494b      	ldr	r1, [pc, #300]	; (8006e1c <mem_malloc+0x1d8>)
 8006cee:	484c      	ldr	r0, [pc, #304]	; (8006e20 <mem_malloc+0x1dc>)
 8006cf0:	f00a f91a 	bl	8010f28 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006cf4:	8a7b      	ldrh	r3, [r7, #18]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7ff fd00 	bl	80066fc <ptr_to_mem>
 8006cfc:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	881a      	ldrh	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8bfa      	ldrh	r2, [r7, #30]
 8006d10:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	8a7a      	ldrh	r2, [r7, #18]
 8006d16:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006d26:	d00b      	beq.n	8006d40 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7ff fce5 	bl	80066fc <ptr_to_mem>
 8006d32:	4602      	mov	r2, r0
 8006d34:	8a7b      	ldrh	r3, [r7, #18]
 8006d36:	8053      	strh	r3, [r2, #2]
 8006d38:	e002      	b.n	8006d40 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006d40:	4b34      	ldr	r3, [pc, #208]	; (8006e14 <mem_malloc+0x1d0>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d127      	bne.n	8006d9a <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006d4a:	4b32      	ldr	r3, [pc, #200]	; (8006e14 <mem_malloc+0x1d0>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006d50:	e005      	b.n	8006d5e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7ff fcd0 	bl	80066fc <ptr_to_mem>
 8006d5c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	791b      	ldrb	r3, [r3, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d004      	beq.n	8006d70 <mem_malloc+0x12c>
 8006d66:	4b2f      	ldr	r3, [pc, #188]	; (8006e24 <mem_malloc+0x1e0>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	69ba      	ldr	r2, [r7, #24]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d1f0      	bne.n	8006d52 <mem_malloc+0x10e>
          }
          lfree = cur;
 8006d70:	4a28      	ldr	r2, [pc, #160]	; (8006e14 <mem_malloc+0x1d0>)
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006d76:	4b27      	ldr	r3, [pc, #156]	; (8006e14 <mem_malloc+0x1d0>)
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	4b2a      	ldr	r3, [pc, #168]	; (8006e24 <mem_malloc+0x1e0>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d00b      	beq.n	8006d9a <mem_malloc+0x156>
 8006d82:	4b24      	ldr	r3, [pc, #144]	; (8006e14 <mem_malloc+0x1d0>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	791b      	ldrb	r3, [r3, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d006      	beq.n	8006d9a <mem_malloc+0x156>
 8006d8c:	4b22      	ldr	r3, [pc, #136]	; (8006e18 <mem_malloc+0x1d4>)
 8006d8e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006d92:	4925      	ldr	r1, [pc, #148]	; (8006e28 <mem_malloc+0x1e4>)
 8006d94:	4822      	ldr	r0, [pc, #136]	; (8006e20 <mem_malloc+0x1dc>)
 8006d96:	f00a f8c7 	bl	8010f28 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006d9a:	8bba      	ldrh	r2, [r7, #28]
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	4413      	add	r3, r2
 8006da0:	3308      	adds	r3, #8
 8006da2:	4a20      	ldr	r2, [pc, #128]	; (8006e24 <mem_malloc+0x1e0>)
 8006da4:	6812      	ldr	r2, [r2, #0]
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d906      	bls.n	8006db8 <mem_malloc+0x174>
 8006daa:	4b1b      	ldr	r3, [pc, #108]	; (8006e18 <mem_malloc+0x1d4>)
 8006dac:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006db0:	491e      	ldr	r1, [pc, #120]	; (8006e2c <mem_malloc+0x1e8>)
 8006db2:	481b      	ldr	r0, [pc, #108]	; (8006e20 <mem_malloc+0x1dc>)
 8006db4:	f00a f8b8 	bl	8010f28 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d006      	beq.n	8006dd0 <mem_malloc+0x18c>
 8006dc2:	4b15      	ldr	r3, [pc, #84]	; (8006e18 <mem_malloc+0x1d4>)
 8006dc4:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006dc8:	4919      	ldr	r1, [pc, #100]	; (8006e30 <mem_malloc+0x1ec>)
 8006dca:	4815      	ldr	r0, [pc, #84]	; (8006e20 <mem_malloc+0x1dc>)
 8006dcc:	f00a f8ac 	bl	8010f28 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f003 0303 	and.w	r3, r3, #3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d006      	beq.n	8006de8 <mem_malloc+0x1a4>
 8006dda:	4b0f      	ldr	r3, [pc, #60]	; (8006e18 <mem_malloc+0x1d4>)
 8006ddc:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006de0:	4914      	ldr	r1, [pc, #80]	; (8006e34 <mem_malloc+0x1f0>)
 8006de2:	480f      	ldr	r0, [pc, #60]	; (8006e20 <mem_malloc+0x1dc>)
 8006de4:	f00a f8a0 	bl	8010f28 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	3308      	adds	r3, #8
 8006dec:	e00e      	b.n	8006e0c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006dee:	8bfb      	ldrh	r3, [r7, #30]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7ff fc83 	bl	80066fc <ptr_to_mem>
 8006df6:	4603      	mov	r3, r0
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006dfc:	8bfa      	ldrh	r2, [r7, #30]
 8006dfe:	8bbb      	ldrh	r3, [r7, #28]
 8006e00:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006e04:	429a      	cmp	r2, r3
 8006e06:	f4ff af44 	bcc.w	8006c92 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3720      	adds	r7, #32
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	2000584c 	.word	0x2000584c
 8006e18:	080123d8 	.word	0x080123d8
 8006e1c:	08012580 	.word	0x08012580
 8006e20:	08012420 	.word	0x08012420
 8006e24:	20005848 	.word	0x20005848
 8006e28:	08012594 	.word	0x08012594
 8006e2c:	080125b0 	.word	0x080125b0
 8006e30:	080125e0 	.word	0x080125e0
 8006e34:	08012610 	.word	0x08012610

08006e38 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	2200      	movs	r2, #0
 8006e46:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	3303      	adds	r3, #3
 8006e4e:	f023 0303 	bic.w	r3, r3, #3
 8006e52:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]
 8006e58:	e011      	b.n	8006e7e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	461a      	mov	r2, r3
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	4413      	add	r3, r2
 8006e76:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	885b      	ldrh	r3, [r3, #2]
 8006e82:	461a      	mov	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4293      	cmp	r3, r2
 8006e88:	dbe7      	blt.n	8006e5a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006e8a:	bf00      	nop
 8006e8c:	bf00      	nop
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	80fb      	strh	r3, [r7, #6]
 8006ea2:	e009      	b.n	8006eb8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006ea4:	88fb      	ldrh	r3, [r7, #6]
 8006ea6:	4a08      	ldr	r2, [pc, #32]	; (8006ec8 <memp_init+0x30>)
 8006ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7ff ffc3 	bl	8006e38 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006eb2:	88fb      	ldrh	r3, [r7, #6]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	80fb      	strh	r3, [r7, #6]
 8006eb8:	88fb      	ldrh	r3, [r7, #6]
 8006eba:	2b08      	cmp	r3, #8
 8006ebc:	d9f2      	bls.n	8006ea4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006ebe:	bf00      	nop
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	080152c4 	.word	0x080152c4

08006ecc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d012      	beq.n	8006f08 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	6812      	ldr	r2, [r2, #0]
 8006eea:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d006      	beq.n	8006f04 <do_memp_malloc_pool+0x38>
 8006ef6:	4b07      	ldr	r3, [pc, #28]	; (8006f14 <do_memp_malloc_pool+0x48>)
 8006ef8:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006efc:	4906      	ldr	r1, [pc, #24]	; (8006f18 <do_memp_malloc_pool+0x4c>)
 8006efe:	4807      	ldr	r0, [pc, #28]	; (8006f1c <do_memp_malloc_pool+0x50>)
 8006f00:	f00a f812 	bl	8010f28 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	e000      	b.n	8006f0a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	08012634 	.word	0x08012634
 8006f18:	08012664 	.word	0x08012664
 8006f1c:	08012688 	.word	0x08012688

08006f20 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d106      	bne.n	8006f3c <memp_malloc_pool+0x1c>
 8006f2e:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <memp_malloc_pool+0x38>)
 8006f30:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8006f34:	4909      	ldr	r1, [pc, #36]	; (8006f5c <memp_malloc_pool+0x3c>)
 8006f36:	480a      	ldr	r0, [pc, #40]	; (8006f60 <memp_malloc_pool+0x40>)
 8006f38:	f009 fff6 	bl	8010f28 <iprintf>
  if (desc == NULL) {
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <memp_malloc_pool+0x26>
    return NULL;
 8006f42:	2300      	movs	r3, #0
 8006f44:	e003      	b.n	8006f4e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7ff ffc0 	bl	8006ecc <do_memp_malloc_pool>
 8006f4c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	08012634 	.word	0x08012634
 8006f5c:	080126b0 	.word	0x080126b0
 8006f60:	08012688 	.word	0x08012688

08006f64 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006f6e:	79fb      	ldrb	r3, [r7, #7]
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	d908      	bls.n	8006f86 <memp_malloc+0x22>
 8006f74:	4b0a      	ldr	r3, [pc, #40]	; (8006fa0 <memp_malloc+0x3c>)
 8006f76:	f240 1257 	movw	r2, #343	; 0x157
 8006f7a:	490a      	ldr	r1, [pc, #40]	; (8006fa4 <memp_malloc+0x40>)
 8006f7c:	480a      	ldr	r0, [pc, #40]	; (8006fa8 <memp_malloc+0x44>)
 8006f7e:	f009 ffd3 	bl	8010f28 <iprintf>
 8006f82:	2300      	movs	r3, #0
 8006f84:	e008      	b.n	8006f98 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006f86:	79fb      	ldrb	r3, [r7, #7]
 8006f88:	4a08      	ldr	r2, [pc, #32]	; (8006fac <memp_malloc+0x48>)
 8006f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7ff ff9c 	bl	8006ecc <do_memp_malloc_pool>
 8006f94:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006f96:	68fb      	ldr	r3, [r7, #12]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	08012634 	.word	0x08012634
 8006fa4:	080126c4 	.word	0x080126c4
 8006fa8:	08012688 	.word	0x08012688
 8006fac:	080152c4 	.word	0x080152c4

08006fb0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	f003 0303 	and.w	r3, r3, #3
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d006      	beq.n	8006fd2 <do_memp_free_pool+0x22>
 8006fc4:	4b0a      	ldr	r3, [pc, #40]	; (8006ff0 <do_memp_free_pool+0x40>)
 8006fc6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006fca:	490a      	ldr	r1, [pc, #40]	; (8006ff4 <do_memp_free_pool+0x44>)
 8006fcc:	480a      	ldr	r0, [pc, #40]	; (8006ff8 <do_memp_free_pool+0x48>)
 8006fce:	f009 ffab 	bl	8010f28 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006fe8:	bf00      	nop
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	08012634 	.word	0x08012634
 8006ff4:	080126e4 	.word	0x080126e4
 8006ff8:	08012688 	.word	0x08012688

08006ffc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d106      	bne.n	800701a <memp_free_pool+0x1e>
 800700c:	4b0a      	ldr	r3, [pc, #40]	; (8007038 <memp_free_pool+0x3c>)
 800700e:	f240 1295 	movw	r2, #405	; 0x195
 8007012:	490a      	ldr	r1, [pc, #40]	; (800703c <memp_free_pool+0x40>)
 8007014:	480a      	ldr	r0, [pc, #40]	; (8007040 <memp_free_pool+0x44>)
 8007016:	f009 ff87 	bl	8010f28 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d007      	beq.n	8007030 <memp_free_pool+0x34>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d004      	beq.n	8007030 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f7ff ffc1 	bl	8006fb0 <do_memp_free_pool>
 800702e:	e000      	b.n	8007032 <memp_free_pool+0x36>
    return;
 8007030:	bf00      	nop
}
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	08012634 	.word	0x08012634
 800703c:	080126b0 	.word	0x080126b0
 8007040:	08012688 	.word	0x08012688

08007044 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	4603      	mov	r3, r0
 800704c:	6039      	str	r1, [r7, #0]
 800704e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007050:	79fb      	ldrb	r3, [r7, #7]
 8007052:	2b08      	cmp	r3, #8
 8007054:	d907      	bls.n	8007066 <memp_free+0x22>
 8007056:	4b0c      	ldr	r3, [pc, #48]	; (8007088 <memp_free+0x44>)
 8007058:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800705c:	490b      	ldr	r1, [pc, #44]	; (800708c <memp_free+0x48>)
 800705e:	480c      	ldr	r0, [pc, #48]	; (8007090 <memp_free+0x4c>)
 8007060:	f009 ff62 	bl	8010f28 <iprintf>
 8007064:	e00c      	b.n	8007080 <memp_free+0x3c>

  if (mem == NULL) {
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d008      	beq.n	800707e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	4a09      	ldr	r2, [pc, #36]	; (8007094 <memp_free+0x50>)
 8007070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	4618      	mov	r0, r3
 8007078:	f7ff ff9a 	bl	8006fb0 <do_memp_free_pool>
 800707c:	e000      	b.n	8007080 <memp_free+0x3c>
    return;
 800707e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	08012634 	.word	0x08012634
 800708c:	08012704 	.word	0x08012704
 8007090:	08012688 	.word	0x08012688
 8007094:	080152c4 	.word	0x080152c4

08007098 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007098:	b480      	push	{r7}
 800709a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800709c:	bf00      	nop
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
	...

080070a8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
 80070b4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d108      	bne.n	80070ce <netif_add+0x26>
 80070bc:	4b57      	ldr	r3, [pc, #348]	; (800721c <netif_add+0x174>)
 80070be:	f240 1227 	movw	r2, #295	; 0x127
 80070c2:	4957      	ldr	r1, [pc, #348]	; (8007220 <netif_add+0x178>)
 80070c4:	4857      	ldr	r0, [pc, #348]	; (8007224 <netif_add+0x17c>)
 80070c6:	f009 ff2f 	bl	8010f28 <iprintf>
 80070ca:	2300      	movs	r3, #0
 80070cc:	e0a2      	b.n	8007214 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d108      	bne.n	80070e6 <netif_add+0x3e>
 80070d4:	4b51      	ldr	r3, [pc, #324]	; (800721c <netif_add+0x174>)
 80070d6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80070da:	4953      	ldr	r1, [pc, #332]	; (8007228 <netif_add+0x180>)
 80070dc:	4851      	ldr	r0, [pc, #324]	; (8007224 <netif_add+0x17c>)
 80070de:	f009 ff23 	bl	8010f28 <iprintf>
 80070e2:	2300      	movs	r3, #0
 80070e4:	e096      	b.n	8007214 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d101      	bne.n	80070f0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80070ec:	4b4f      	ldr	r3, [pc, #316]	; (800722c <netif_add+0x184>)
 80070ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80070f6:	4b4d      	ldr	r3, [pc, #308]	; (800722c <netif_add+0x184>)
 80070f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007100:	4b4a      	ldr	r3, [pc, #296]	; (800722c <netif_add+0x184>)
 8007102:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4a45      	ldr	r2, [pc, #276]	; (8007230 <netif_add+0x188>)
 800711a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6a3a      	ldr	r2, [r7, #32]
 8007134:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007136:	4b3f      	ldr	r3, [pc, #252]	; (8007234 <netif_add+0x18c>)
 8007138:	781a      	ldrb	r2, [r3, #0]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007144:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	68b9      	ldr	r1, [r7, #8]
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 f913 	bl	8007378 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	4798      	blx	r3
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <netif_add+0xba>
    return NULL;
 800715e:	2300      	movs	r3, #0
 8007160:	e058      	b.n	8007214 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007168:	2bff      	cmp	r3, #255	; 0xff
 800716a:	d103      	bne.n	8007174 <netif_add+0xcc>
        netif->num = 0;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8007174:	2300      	movs	r3, #0
 8007176:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007178:	4b2f      	ldr	r3, [pc, #188]	; (8007238 <netif_add+0x190>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	617b      	str	r3, [r7, #20]
 800717e:	e02b      	b.n	80071d8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	429a      	cmp	r2, r3
 8007186:	d106      	bne.n	8007196 <netif_add+0xee>
 8007188:	4b24      	ldr	r3, [pc, #144]	; (800721c <netif_add+0x174>)
 800718a:	f240 128b 	movw	r2, #395	; 0x18b
 800718e:	492b      	ldr	r1, [pc, #172]	; (800723c <netif_add+0x194>)
 8007190:	4824      	ldr	r0, [pc, #144]	; (8007224 <netif_add+0x17c>)
 8007192:	f009 fec9 	bl	8010f28 <iprintf>
        num_netifs++;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	3301      	adds	r3, #1
 800719a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	2bff      	cmp	r3, #255	; 0xff
 80071a0:	dd06      	ble.n	80071b0 <netif_add+0x108>
 80071a2:	4b1e      	ldr	r3, [pc, #120]	; (800721c <netif_add+0x174>)
 80071a4:	f240 128d 	movw	r2, #397	; 0x18d
 80071a8:	4925      	ldr	r1, [pc, #148]	; (8007240 <netif_add+0x198>)
 80071aa:	481e      	ldr	r0, [pc, #120]	; (8007224 <netif_add+0x17c>)
 80071ac:	f009 febc 	bl	8010f28 <iprintf>
        if (netif2->num == netif->num) {
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071bc:	429a      	cmp	r2, r3
 80071be:	d108      	bne.n	80071d2 <netif_add+0x12a>
          netif->num++;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071c6:	3301      	adds	r3, #1
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80071d0:	e005      	b.n	80071de <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	617b      	str	r3, [r7, #20]
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1d0      	bne.n	8007180 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1be      	bne.n	8007162 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071ea:	2bfe      	cmp	r3, #254	; 0xfe
 80071ec:	d103      	bne.n	80071f6 <netif_add+0x14e>
    netif_num = 0;
 80071ee:	4b11      	ldr	r3, [pc, #68]	; (8007234 <netif_add+0x18c>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	701a      	strb	r2, [r3, #0]
 80071f4:	e006      	b.n	8007204 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071fc:	3301      	adds	r3, #1
 80071fe:	b2da      	uxtb	r2, r3
 8007200:	4b0c      	ldr	r3, [pc, #48]	; (8007234 <netif_add+0x18c>)
 8007202:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007204:	4b0c      	ldr	r3, [pc, #48]	; (8007238 <netif_add+0x190>)
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800720c:	4a0a      	ldr	r2, [pc, #40]	; (8007238 <netif_add+0x190>)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007212:	68fb      	ldr	r3, [r7, #12]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	08012720 	.word	0x08012720
 8007220:	080127b4 	.word	0x080127b4
 8007224:	08012770 	.word	0x08012770
 8007228:	080127d0 	.word	0x080127d0
 800722c:	08015328 	.word	0x08015328
 8007230:	08007653 	.word	0x08007653
 8007234:	20008744 	.word	0x20008744
 8007238:	2000873c 	.word	0x2000873c
 800723c:	080127f4 	.word	0x080127f4
 8007240:	08012808 	.word	0x08012808

08007244 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f002 fde9 	bl	8009e28 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f007 fb25 	bl	800e8a8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800725e:	bf00      	nop
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
	...

08007268 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d106      	bne.n	8007288 <netif_do_set_ipaddr+0x20>
 800727a:	4b1d      	ldr	r3, [pc, #116]	; (80072f0 <netif_do_set_ipaddr+0x88>)
 800727c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007280:	491c      	ldr	r1, [pc, #112]	; (80072f4 <netif_do_set_ipaddr+0x8c>)
 8007282:	481d      	ldr	r0, [pc, #116]	; (80072f8 <netif_do_set_ipaddr+0x90>)
 8007284:	f009 fe50 	bl	8010f28 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d106      	bne.n	800729c <netif_do_set_ipaddr+0x34>
 800728e:	4b18      	ldr	r3, [pc, #96]	; (80072f0 <netif_do_set_ipaddr+0x88>)
 8007290:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8007294:	4917      	ldr	r1, [pc, #92]	; (80072f4 <netif_do_set_ipaddr+0x8c>)
 8007296:	4818      	ldr	r0, [pc, #96]	; (80072f8 <netif_do_set_ipaddr+0x90>)
 8007298:	f009 fe46 	bl	8010f28 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	3304      	adds	r3, #4
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d01c      	beq.n	80072e4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3304      	adds	r3, #4
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80072ba:	f107 0314 	add.w	r3, r7, #20
 80072be:	4619      	mov	r1, r3
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7ff ffbf 	bl	8007244 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d002      	beq.n	80072d2 <netif_do_set_ipaddr+0x6a>
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	e000      	b.n	80072d4 <netif_do_set_ipaddr+0x6c>
 80072d2:	2300      	movs	r3, #0
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80072d8:	2101      	movs	r1, #1
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 f8d2 	bl	8007484 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80072e0:	2301      	movs	r3, #1
 80072e2:	e000      	b.n	80072e6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	08012720 	.word	0x08012720
 80072f4:	08012838 	.word	0x08012838
 80072f8:	08012770 	.word	0x08012770

080072fc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	3308      	adds	r3, #8
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	429a      	cmp	r2, r3
 8007314:	d00a      	beq.n	800732c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d002      	beq.n	8007322 <netif_do_set_netmask+0x26>
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	e000      	b.n	8007324 <netif_do_set_netmask+0x28>
 8007322:	2300      	movs	r3, #0
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007328:	2301      	movs	r3, #1
 800732a:	e000      	b.n	800732e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800733a:	b480      	push	{r7}
 800733c:	b085      	sub	sp, #20
 800733e:	af00      	add	r7, sp, #0
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	330c      	adds	r3, #12
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	429a      	cmp	r2, r3
 8007352:	d00a      	beq.n	800736a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d002      	beq.n	8007360 <netif_do_set_gw+0x26>
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	e000      	b.n	8007362 <netif_do_set_gw+0x28>
 8007360:	2300      	movs	r3, #0
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007366:	2301      	movs	r3, #1
 8007368:	e000      	b.n	800736c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b088      	sub	sp, #32
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
 8007384:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007386:	2300      	movs	r3, #0
 8007388:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800738a:	2300      	movs	r3, #0
 800738c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007394:	4b1c      	ldr	r3, [pc, #112]	; (8007408 <netif_set_addr+0x90>)
 8007396:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800739e:	4b1a      	ldr	r3, [pc, #104]	; (8007408 <netif_set_addr+0x90>)
 80073a0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d101      	bne.n	80073ac <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80073a8:	4b17      	ldr	r3, [pc, #92]	; (8007408 <netif_set_addr+0x90>)
 80073aa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <netif_set_addr+0x42>
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <netif_set_addr+0x46>
 80073ba:	2301      	movs	r3, #1
 80073bc:	e000      	b.n	80073c0 <netif_set_addr+0x48>
 80073be:	2300      	movs	r3, #0
 80073c0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d006      	beq.n	80073d6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80073c8:	f107 0310 	add.w	r3, r7, #16
 80073cc:	461a      	mov	r2, r3
 80073ce:	68b9      	ldr	r1, [r7, #8]
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f7ff ff49 	bl	8007268 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80073d6:	69fa      	ldr	r2, [r7, #28]
 80073d8:	6879      	ldr	r1, [r7, #4]
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f7ff ff8e 	bl	80072fc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80073e0:	69ba      	ldr	r2, [r7, #24]
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f7ff ffa8 	bl	800733a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d106      	bne.n	80073fe <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80073f0:	f107 0310 	add.w	r3, r7, #16
 80073f4:	461a      	mov	r2, r3
 80073f6:	68b9      	ldr	r1, [r7, #8]
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f7ff ff35 	bl	8007268 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80073fe:	bf00      	nop
 8007400:	3720      	adds	r7, #32
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	08015328 	.word	0x08015328

0800740c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007414:	4a04      	ldr	r2, [pc, #16]	; (8007428 <netif_set_default+0x1c>)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800741a:	bf00      	nop
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	20008740 	.word	0x20008740

0800742c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d107      	bne.n	800744a <netif_set_up+0x1e>
 800743a:	4b0f      	ldr	r3, [pc, #60]	; (8007478 <netif_set_up+0x4c>)
 800743c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007440:	490e      	ldr	r1, [pc, #56]	; (800747c <netif_set_up+0x50>)
 8007442:	480f      	ldr	r0, [pc, #60]	; (8007480 <netif_set_up+0x54>)
 8007444:	f009 fd70 	bl	8010f28 <iprintf>
 8007448:	e013      	b.n	8007472 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10c      	bne.n	8007472 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800745e:	f043 0301 	orr.w	r3, r3, #1
 8007462:	b2da      	uxtb	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800746a:	2103      	movs	r1, #3
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f809 	bl	8007484 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	08012720 	.word	0x08012720
 800747c:	080128a8 	.word	0x080128a8
 8007480:	08012770 	.word	0x08012770

08007484 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	460b      	mov	r3, r1
 800748e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d106      	bne.n	80074a4 <netif_issue_reports+0x20>
 8007496:	4b18      	ldr	r3, [pc, #96]	; (80074f8 <netif_issue_reports+0x74>)
 8007498:	f240 326d 	movw	r2, #877	; 0x36d
 800749c:	4917      	ldr	r1, [pc, #92]	; (80074fc <netif_issue_reports+0x78>)
 800749e:	4818      	ldr	r0, [pc, #96]	; (8007500 <netif_issue_reports+0x7c>)
 80074a0:	f009 fd42 	bl	8010f28 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80074aa:	f003 0304 	and.w	r3, r3, #4
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d01e      	beq.n	80074f0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80074b8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d017      	beq.n	80074f0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80074c0:	78fb      	ldrb	r3, [r7, #3]
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d013      	beq.n	80074f2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	3304      	adds	r3, #4
 80074ce:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00e      	beq.n	80074f2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80074da:	f003 0308 	and.w	r3, r3, #8
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d007      	beq.n	80074f2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	3304      	adds	r3, #4
 80074e6:	4619      	mov	r1, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f008 f947 	bl	800f77c <etharp_request>
 80074ee:	e000      	b.n	80074f2 <netif_issue_reports+0x6e>
    return;
 80074f0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	08012720 	.word	0x08012720
 80074fc:	080128c4 	.word	0x080128c4
 8007500:	08012770 	.word	0x08012770

08007504 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d107      	bne.n	8007522 <netif_set_down+0x1e>
 8007512:	4b12      	ldr	r3, [pc, #72]	; (800755c <netif_set_down+0x58>)
 8007514:	f240 329b 	movw	r2, #923	; 0x39b
 8007518:	4911      	ldr	r1, [pc, #68]	; (8007560 <netif_set_down+0x5c>)
 800751a:	4812      	ldr	r0, [pc, #72]	; (8007564 <netif_set_down+0x60>)
 800751c:	f009 fd04 	bl	8010f28 <iprintf>
 8007520:	e019      	b.n	8007556 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	2b00      	cmp	r3, #0
 800752e:	d012      	beq.n	8007556 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007536:	f023 0301 	bic.w	r3, r3, #1
 800753a:	b2da      	uxtb	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007548:	f003 0308 	and.w	r3, r3, #8
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f007 fcd1 	bl	800eef8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	08012720 	.word	0x08012720
 8007560:	080128e8 	.word	0x080128e8
 8007564:	08012770 	.word	0x08012770

08007568 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d107      	bne.n	8007586 <netif_set_link_up+0x1e>
 8007576:	4b13      	ldr	r3, [pc, #76]	; (80075c4 <netif_set_link_up+0x5c>)
 8007578:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800757c:	4912      	ldr	r1, [pc, #72]	; (80075c8 <netif_set_link_up+0x60>)
 800757e:	4813      	ldr	r0, [pc, #76]	; (80075cc <netif_set_link_up+0x64>)
 8007580:	f009 fcd2 	bl	8010f28 <iprintf>
 8007584:	e01b      	b.n	80075be <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800758c:	f003 0304 	and.w	r3, r3, #4
 8007590:	2b00      	cmp	r3, #0
 8007592:	d114      	bne.n	80075be <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800759a:	f043 0304 	orr.w	r3, r3, #4
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80075a6:	2103      	movs	r1, #3
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f7ff ff6b 	bl	8007484 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <netif_set_link_up+0x56>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	08012720 	.word	0x08012720
 80075c8:	08012908 	.word	0x08012908
 80075cc:	08012770 	.word	0x08012770

080075d0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d107      	bne.n	80075ee <netif_set_link_down+0x1e>
 80075de:	4b11      	ldr	r3, [pc, #68]	; (8007624 <netif_set_link_down+0x54>)
 80075e0:	f240 4206 	movw	r2, #1030	; 0x406
 80075e4:	4910      	ldr	r1, [pc, #64]	; (8007628 <netif_set_link_down+0x58>)
 80075e6:	4811      	ldr	r0, [pc, #68]	; (800762c <netif_set_link_down+0x5c>)
 80075e8:	f009 fc9e 	bl	8010f28 <iprintf>
 80075ec:	e017      	b.n	800761e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d010      	beq.n	800761e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007602:	f023 0304 	bic.w	r3, r3, #4
 8007606:	b2da      	uxtb	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d003      	beq.n	800761e <netif_set_link_down+0x4e>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	69db      	ldr	r3, [r3, #28]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	08012720 	.word	0x08012720
 8007628:	0801292c 	.word	0x0801292c
 800762c:	08012770 	.word	0x08012770

08007630 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	61da      	str	r2, [r3, #28]
  }
}
 8007646:	bf00      	nop
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007652:	b480      	push	{r7}
 8007654:	b085      	sub	sp, #20
 8007656:	af00      	add	r7, sp, #0
 8007658:	60f8      	str	r0, [r7, #12]
 800765a:	60b9      	str	r1, [r7, #8]
 800765c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800765e:	f06f 030b 	mvn.w	r3, #11
}
 8007662:	4618      	mov	r0, r3
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
	...

08007670 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	4603      	mov	r3, r0
 8007678:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800767a:	79fb      	ldrb	r3, [r7, #7]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d013      	beq.n	80076a8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007680:	4b0d      	ldr	r3, [pc, #52]	; (80076b8 <netif_get_by_index+0x48>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	60fb      	str	r3, [r7, #12]
 8007686:	e00c      	b.n	80076a2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800768e:	3301      	adds	r3, #1
 8007690:	b2db      	uxtb	r3, r3
 8007692:	79fa      	ldrb	r2, [r7, #7]
 8007694:	429a      	cmp	r2, r3
 8007696:	d101      	bne.n	800769c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	e006      	b.n	80076aa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	60fb      	str	r3, [r7, #12]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1ef      	bne.n	8007688 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	2000873c 	.word	0x2000873c

080076bc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80076c2:	4b0c      	ldr	r3, [pc, #48]	; (80076f4 <pbuf_free_ooseq+0x38>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80076c8:	4b0b      	ldr	r3, [pc, #44]	; (80076f8 <pbuf_free_ooseq+0x3c>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	607b      	str	r3, [r7, #4]
 80076ce:	e00a      	b.n	80076e6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d003      	beq.n	80076e0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f002 fbe3 	bl	8009ea4 <tcp_free_ooseq>
      return;
 80076de:	e005      	b.n	80076ec <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	607b      	str	r3, [r7, #4]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1f1      	bne.n	80076d0 <pbuf_free_ooseq+0x14>
    }
  }
}
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	20008745 	.word	0x20008745
 80076f8:	20008754 	.word	0x20008754

080076fc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80076fc:	b480      	push	{r7}
 80076fe:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007700:	4b03      	ldr	r3, [pc, #12]	; (8007710 <pbuf_pool_is_empty+0x14>)
 8007702:	2201      	movs	r2, #1
 8007704:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007706:	bf00      	nop
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	20008745 	.word	0x20008745

08007714 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	4611      	mov	r1, r2
 8007720:	461a      	mov	r2, r3
 8007722:	460b      	mov	r3, r1
 8007724:	80fb      	strh	r3, [r7, #6]
 8007726:	4613      	mov	r3, r2
 8007728:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	88fa      	ldrh	r2, [r7, #6]
 800773a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	88ba      	ldrh	r2, [r7, #4]
 8007740:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007742:	8b3b      	ldrh	r3, [r7, #24]
 8007744:	b2da      	uxtb	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	7f3a      	ldrb	r2, [r7, #28]
 800774e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2201      	movs	r2, #1
 8007754:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	73da      	strb	r2, [r3, #15]
}
 800775c:	bf00      	nop
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b08c      	sub	sp, #48	; 0x30
 800776c:	af02      	add	r7, sp, #8
 800776e:	4603      	mov	r3, r0
 8007770:	71fb      	strb	r3, [r7, #7]
 8007772:	460b      	mov	r3, r1
 8007774:	80bb      	strh	r3, [r7, #4]
 8007776:	4613      	mov	r3, r2
 8007778:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800777a:	79fb      	ldrb	r3, [r7, #7]
 800777c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800777e:	887b      	ldrh	r3, [r7, #2]
 8007780:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007784:	d07f      	beq.n	8007886 <pbuf_alloc+0x11e>
 8007786:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800778a:	f300 80c8 	bgt.w	800791e <pbuf_alloc+0x1b6>
 800778e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007792:	d010      	beq.n	80077b6 <pbuf_alloc+0x4e>
 8007794:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007798:	f300 80c1 	bgt.w	800791e <pbuf_alloc+0x1b6>
 800779c:	2b01      	cmp	r3, #1
 800779e:	d002      	beq.n	80077a6 <pbuf_alloc+0x3e>
 80077a0:	2b41      	cmp	r3, #65	; 0x41
 80077a2:	f040 80bc 	bne.w	800791e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80077a6:	887a      	ldrh	r2, [r7, #2]
 80077a8:	88bb      	ldrh	r3, [r7, #4]
 80077aa:	4619      	mov	r1, r3
 80077ac:	2000      	movs	r0, #0
 80077ae:	f000 f8d1 	bl	8007954 <pbuf_alloc_reference>
 80077b2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80077b4:	e0bd      	b.n	8007932 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80077ba:	2300      	movs	r3, #0
 80077bc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80077be:	88bb      	ldrh	r3, [r7, #4]
 80077c0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80077c2:	2008      	movs	r0, #8
 80077c4:	f7ff fbce 	bl	8006f64 <memp_malloc>
 80077c8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d109      	bne.n	80077e4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80077d0:	f7ff ff94 	bl	80076fc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <pbuf_alloc+0x78>
            pbuf_free(p);
 80077da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077dc:	f000 faa8 	bl	8007d30 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80077e0:	2300      	movs	r3, #0
 80077e2:	e0a7      	b.n	8007934 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80077e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077e6:	3303      	adds	r3, #3
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	f023 0303 	bic.w	r3, r3, #3
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	8b7a      	ldrh	r2, [r7, #26]
 80077f8:	4293      	cmp	r3, r2
 80077fa:	bf28      	it	cs
 80077fc:	4613      	movcs	r3, r2
 80077fe:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007800:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007802:	3310      	adds	r3, #16
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	4413      	add	r3, r2
 8007808:	3303      	adds	r3, #3
 800780a:	f023 0303 	bic.w	r3, r3, #3
 800780e:	4618      	mov	r0, r3
 8007810:	89f9      	ldrh	r1, [r7, #14]
 8007812:	8b7a      	ldrh	r2, [r7, #26]
 8007814:	2300      	movs	r3, #0
 8007816:	9301      	str	r3, [sp, #4]
 8007818:	887b      	ldrh	r3, [r7, #2]
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	460b      	mov	r3, r1
 800781e:	4601      	mov	r1, r0
 8007820:	6938      	ldr	r0, [r7, #16]
 8007822:	f7ff ff77 	bl	8007714 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f003 0303 	and.w	r3, r3, #3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d006      	beq.n	8007840 <pbuf_alloc+0xd8>
 8007832:	4b42      	ldr	r3, [pc, #264]	; (800793c <pbuf_alloc+0x1d4>)
 8007834:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007838:	4941      	ldr	r1, [pc, #260]	; (8007940 <pbuf_alloc+0x1d8>)
 800783a:	4842      	ldr	r0, [pc, #264]	; (8007944 <pbuf_alloc+0x1dc>)
 800783c:	f009 fb74 	bl	8010f28 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007840:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007842:	3303      	adds	r3, #3
 8007844:	f023 0303 	bic.w	r3, r3, #3
 8007848:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800784c:	d106      	bne.n	800785c <pbuf_alloc+0xf4>
 800784e:	4b3b      	ldr	r3, [pc, #236]	; (800793c <pbuf_alloc+0x1d4>)
 8007850:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007854:	493c      	ldr	r1, [pc, #240]	; (8007948 <pbuf_alloc+0x1e0>)
 8007856:	483b      	ldr	r0, [pc, #236]	; (8007944 <pbuf_alloc+0x1dc>)
 8007858:	f009 fb66 	bl	8010f28 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	2b00      	cmp	r3, #0
 8007860:	d102      	bne.n	8007868 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	627b      	str	r3, [r7, #36]	; 0x24
 8007866:	e002      	b.n	800786e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007872:	8b7a      	ldrh	r2, [r7, #26]
 8007874:	89fb      	ldrh	r3, [r7, #14]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800787a:	2300      	movs	r3, #0
 800787c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800787e:	8b7b      	ldrh	r3, [r7, #26]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d19e      	bne.n	80077c2 <pbuf_alloc+0x5a>
      break;
 8007884:	e055      	b.n	8007932 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007886:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007888:	3303      	adds	r3, #3
 800788a:	b29b      	uxth	r3, r3
 800788c:	f023 0303 	bic.w	r3, r3, #3
 8007890:	b29a      	uxth	r2, r3
 8007892:	88bb      	ldrh	r3, [r7, #4]
 8007894:	3303      	adds	r3, #3
 8007896:	b29b      	uxth	r3, r3
 8007898:	f023 0303 	bic.w	r3, r3, #3
 800789c:	b29b      	uxth	r3, r3
 800789e:	4413      	add	r3, r2
 80078a0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80078a2:	8b3b      	ldrh	r3, [r7, #24]
 80078a4:	3310      	adds	r3, #16
 80078a6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80078a8:	8b3a      	ldrh	r2, [r7, #24]
 80078aa:	88bb      	ldrh	r3, [r7, #4]
 80078ac:	3303      	adds	r3, #3
 80078ae:	f023 0303 	bic.w	r3, r3, #3
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d306      	bcc.n	80078c4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80078b6:	8afa      	ldrh	r2, [r7, #22]
 80078b8:	88bb      	ldrh	r3, [r7, #4]
 80078ba:	3303      	adds	r3, #3
 80078bc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d201      	bcs.n	80078c8 <pbuf_alloc+0x160>
        return NULL;
 80078c4:	2300      	movs	r3, #0
 80078c6:	e035      	b.n	8007934 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80078c8:	8afb      	ldrh	r3, [r7, #22]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7ff f9ba 	bl	8006c44 <mem_malloc>
 80078d0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <pbuf_alloc+0x174>
        return NULL;
 80078d8:	2300      	movs	r3, #0
 80078da:	e02b      	b.n	8007934 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80078dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80078de:	3310      	adds	r3, #16
 80078e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078e2:	4413      	add	r3, r2
 80078e4:	3303      	adds	r3, #3
 80078e6:	f023 0303 	bic.w	r3, r3, #3
 80078ea:	4618      	mov	r0, r3
 80078ec:	88b9      	ldrh	r1, [r7, #4]
 80078ee:	88ba      	ldrh	r2, [r7, #4]
 80078f0:	2300      	movs	r3, #0
 80078f2:	9301      	str	r3, [sp, #4]
 80078f4:	887b      	ldrh	r3, [r7, #2]
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	460b      	mov	r3, r1
 80078fa:	4601      	mov	r1, r0
 80078fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078fe:	f7ff ff09 	bl	8007714 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f003 0303 	and.w	r3, r3, #3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d010      	beq.n	8007930 <pbuf_alloc+0x1c8>
 800790e:	4b0b      	ldr	r3, [pc, #44]	; (800793c <pbuf_alloc+0x1d4>)
 8007910:	f44f 7291 	mov.w	r2, #290	; 0x122
 8007914:	490d      	ldr	r1, [pc, #52]	; (800794c <pbuf_alloc+0x1e4>)
 8007916:	480b      	ldr	r0, [pc, #44]	; (8007944 <pbuf_alloc+0x1dc>)
 8007918:	f009 fb06 	bl	8010f28 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800791c:	e008      	b.n	8007930 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800791e:	4b07      	ldr	r3, [pc, #28]	; (800793c <pbuf_alloc+0x1d4>)
 8007920:	f240 1227 	movw	r2, #295	; 0x127
 8007924:	490a      	ldr	r1, [pc, #40]	; (8007950 <pbuf_alloc+0x1e8>)
 8007926:	4807      	ldr	r0, [pc, #28]	; (8007944 <pbuf_alloc+0x1dc>)
 8007928:	f009 fafe 	bl	8010f28 <iprintf>
      return NULL;
 800792c:	2300      	movs	r3, #0
 800792e:	e001      	b.n	8007934 <pbuf_alloc+0x1cc>
      break;
 8007930:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007934:	4618      	mov	r0, r3
 8007936:	3728      	adds	r7, #40	; 0x28
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	08012950 	.word	0x08012950
 8007940:	08012980 	.word	0x08012980
 8007944:	080129b0 	.word	0x080129b0
 8007948:	080129d8 	.word	0x080129d8
 800794c:	08012a0c 	.word	0x08012a0c
 8007950:	08012a38 	.word	0x08012a38

08007954 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af02      	add	r7, sp, #8
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	460b      	mov	r3, r1
 800795e:	807b      	strh	r3, [r7, #2]
 8007960:	4613      	mov	r3, r2
 8007962:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007964:	883b      	ldrh	r3, [r7, #0]
 8007966:	2b41      	cmp	r3, #65	; 0x41
 8007968:	d009      	beq.n	800797e <pbuf_alloc_reference+0x2a>
 800796a:	883b      	ldrh	r3, [r7, #0]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d006      	beq.n	800797e <pbuf_alloc_reference+0x2a>
 8007970:	4b0f      	ldr	r3, [pc, #60]	; (80079b0 <pbuf_alloc_reference+0x5c>)
 8007972:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8007976:	490f      	ldr	r1, [pc, #60]	; (80079b4 <pbuf_alloc_reference+0x60>)
 8007978:	480f      	ldr	r0, [pc, #60]	; (80079b8 <pbuf_alloc_reference+0x64>)
 800797a:	f009 fad5 	bl	8010f28 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800797e:	2007      	movs	r0, #7
 8007980:	f7ff faf0 	bl	8006f64 <memp_malloc>
 8007984:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d101      	bne.n	8007990 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800798c:	2300      	movs	r3, #0
 800798e:	e00b      	b.n	80079a8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007990:	8879      	ldrh	r1, [r7, #2]
 8007992:	887a      	ldrh	r2, [r7, #2]
 8007994:	2300      	movs	r3, #0
 8007996:	9301      	str	r3, [sp, #4]
 8007998:	883b      	ldrh	r3, [r7, #0]
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	460b      	mov	r3, r1
 800799e:	6879      	ldr	r1, [r7, #4]
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f7ff feb7 	bl	8007714 <pbuf_init_alloced_pbuf>
  return p;
 80079a6:	68fb      	ldr	r3, [r7, #12]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3710      	adds	r7, #16
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	08012950 	.word	0x08012950
 80079b4:	08012a54 	.word	0x08012a54
 80079b8:	080129b0 	.word	0x080129b0

080079bc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b088      	sub	sp, #32
 80079c0:	af02      	add	r7, sp, #8
 80079c2:	607b      	str	r3, [r7, #4]
 80079c4:	4603      	mov	r3, r0
 80079c6:	73fb      	strb	r3, [r7, #15]
 80079c8:	460b      	mov	r3, r1
 80079ca:	81bb      	strh	r3, [r7, #12]
 80079cc:	4613      	mov	r3, r2
 80079ce:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
 80079d2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80079d4:	8a7b      	ldrh	r3, [r7, #18]
 80079d6:	3303      	adds	r3, #3
 80079d8:	f023 0203 	bic.w	r2, r3, #3
 80079dc:	89bb      	ldrh	r3, [r7, #12]
 80079de:	441a      	add	r2, r3
 80079e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d901      	bls.n	80079ea <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	e018      	b.n	8007a1c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d007      	beq.n	8007a00 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80079f0:	8a7b      	ldrh	r3, [r7, #18]
 80079f2:	3303      	adds	r3, #3
 80079f4:	f023 0303 	bic.w	r3, r3, #3
 80079f8:	6a3a      	ldr	r2, [r7, #32]
 80079fa:	4413      	add	r3, r2
 80079fc:	617b      	str	r3, [r7, #20]
 80079fe:	e001      	b.n	8007a04 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007a00:	2300      	movs	r3, #0
 8007a02:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	89b9      	ldrh	r1, [r7, #12]
 8007a08:	89ba      	ldrh	r2, [r7, #12]
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	9301      	str	r3, [sp, #4]
 8007a0e:	897b      	ldrh	r3, [r7, #10]
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	460b      	mov	r3, r1
 8007a14:	6979      	ldr	r1, [r7, #20]
 8007a16:	f7ff fe7d 	bl	8007714 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8007a1a:	687b      	ldr	r3, [r7, #4]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3718      	adds	r7, #24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d106      	bne.n	8007a44 <pbuf_realloc+0x20>
 8007a36:	4b3a      	ldr	r3, [pc, #232]	; (8007b20 <pbuf_realloc+0xfc>)
 8007a38:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007a3c:	4939      	ldr	r1, [pc, #228]	; (8007b24 <pbuf_realloc+0x100>)
 8007a3e:	483a      	ldr	r0, [pc, #232]	; (8007b28 <pbuf_realloc+0x104>)
 8007a40:	f009 fa72 	bl	8010f28 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	891b      	ldrh	r3, [r3, #8]
 8007a48:	887a      	ldrh	r2, [r7, #2]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d263      	bcs.n	8007b16 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	891a      	ldrh	r2, [r3, #8]
 8007a52:	887b      	ldrh	r3, [r7, #2]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007a58:	887b      	ldrh	r3, [r7, #2]
 8007a5a:	817b      	strh	r3, [r7, #10]
  q = p;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007a60:	e018      	b.n	8007a94 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	895b      	ldrh	r3, [r3, #10]
 8007a66:	897a      	ldrh	r2, [r7, #10]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	891a      	ldrh	r2, [r3, #8]
 8007a70:	893b      	ldrh	r3, [r7, #8]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d106      	bne.n	8007a94 <pbuf_realloc+0x70>
 8007a86:	4b26      	ldr	r3, [pc, #152]	; (8007b20 <pbuf_realloc+0xfc>)
 8007a88:	f240 12af 	movw	r2, #431	; 0x1af
 8007a8c:	4927      	ldr	r1, [pc, #156]	; (8007b2c <pbuf_realloc+0x108>)
 8007a8e:	4826      	ldr	r0, [pc, #152]	; (8007b28 <pbuf_realloc+0x104>)
 8007a90:	f009 fa4a 	bl	8010f28 <iprintf>
  while (rem_len > q->len) {
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	895b      	ldrh	r3, [r3, #10]
 8007a98:	897a      	ldrh	r2, [r7, #10]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d8e1      	bhi.n	8007a62 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	7b1b      	ldrb	r3, [r3, #12]
 8007aa2:	f003 030f 	and.w	r3, r3, #15
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d121      	bne.n	8007aee <pbuf_realloc+0xca>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	895b      	ldrh	r3, [r3, #10]
 8007aae:	897a      	ldrh	r2, [r7, #10]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d01c      	beq.n	8007aee <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	7b5b      	ldrb	r3, [r3, #13]
 8007ab8:	f003 0302 	and.w	r3, r3, #2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d116      	bne.n	8007aee <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	897b      	ldrh	r3, [r7, #10]
 8007acc:	4413      	add	r3, r2
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f7fe ffba 	bl	8006a4c <mem_trim>
 8007ad8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d106      	bne.n	8007aee <pbuf_realloc+0xca>
 8007ae0:	4b0f      	ldr	r3, [pc, #60]	; (8007b20 <pbuf_realloc+0xfc>)
 8007ae2:	f240 12bd 	movw	r2, #445	; 0x1bd
 8007ae6:	4912      	ldr	r1, [pc, #72]	; (8007b30 <pbuf_realloc+0x10c>)
 8007ae8:	480f      	ldr	r0, [pc, #60]	; (8007b28 <pbuf_realloc+0x104>)
 8007aea:	f009 fa1d 	bl	8010f28 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	897a      	ldrh	r2, [r7, #10]
 8007af2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	895a      	ldrh	r2, [r3, #10]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d004      	beq.n	8007b0e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f000 f911 	bl	8007d30 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	e000      	b.n	8007b18 <pbuf_realloc+0xf4>
    return;
 8007b16:	bf00      	nop

}
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	08012950 	.word	0x08012950
 8007b24:	08012a68 	.word	0x08012a68
 8007b28:	080129b0 	.word	0x080129b0
 8007b2c:	08012a80 	.word	0x08012a80
 8007b30:	08012a98 	.word	0x08012a98

08007b34 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d106      	bne.n	8007b56 <pbuf_add_header_impl+0x22>
 8007b48:	4b2b      	ldr	r3, [pc, #172]	; (8007bf8 <pbuf_add_header_impl+0xc4>)
 8007b4a:	f240 12df 	movw	r2, #479	; 0x1df
 8007b4e:	492b      	ldr	r1, [pc, #172]	; (8007bfc <pbuf_add_header_impl+0xc8>)
 8007b50:	482b      	ldr	r0, [pc, #172]	; (8007c00 <pbuf_add_header_impl+0xcc>)
 8007b52:	f009 f9e9 	bl	8010f28 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d003      	beq.n	8007b64 <pbuf_add_header_impl+0x30>
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b62:	d301      	bcc.n	8007b68 <pbuf_add_header_impl+0x34>
    return 1;
 8007b64:	2301      	movs	r3, #1
 8007b66:	e043      	b.n	8007bf0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <pbuf_add_header_impl+0x3e>
    return 0;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	e03e      	b.n	8007bf0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	891a      	ldrh	r2, [r3, #8]
 8007b7a:	8a7b      	ldrh	r3, [r7, #18]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	8a7a      	ldrh	r2, [r7, #18]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d901      	bls.n	8007b8a <pbuf_add_header_impl+0x56>
    return 1;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e032      	b.n	8007bf0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	7b1b      	ldrb	r3, [r3, #12]
 8007b8e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007b90:	8a3b      	ldrh	r3, [r7, #16]
 8007b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00c      	beq.n	8007bb4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	685a      	ldr	r2, [r3, #4]
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	425b      	negs	r3, r3
 8007ba2:	4413      	add	r3, r2
 8007ba4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	3310      	adds	r3, #16
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d20d      	bcs.n	8007bcc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e01d      	b.n	8007bf0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007bb4:	79fb      	ldrb	r3, [r7, #7]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d006      	beq.n	8007bc8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	425b      	negs	r3, r3
 8007bc2:	4413      	add	r3, r2
 8007bc4:	617b      	str	r3, [r7, #20]
 8007bc6:	e001      	b.n	8007bcc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e011      	b.n	8007bf0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	895a      	ldrh	r2, [r3, #10]
 8007bd6:	8a7b      	ldrh	r3, [r7, #18]
 8007bd8:	4413      	add	r3, r2
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	891a      	ldrh	r2, [r3, #8]
 8007be4:	8a7b      	ldrh	r3, [r7, #18]
 8007be6:	4413      	add	r3, r2
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	811a      	strh	r2, [r3, #8]


  return 0;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	08012950 	.word	0x08012950
 8007bfc:	08012ab4 	.word	0x08012ab4
 8007c00:	080129b0 	.word	0x080129b0

08007c04 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007c0e:	2200      	movs	r2, #0
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7ff ff8e 	bl	8007b34 <pbuf_add_header_impl>
 8007c18:	4603      	mov	r3, r0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
	...

08007c24 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d106      	bne.n	8007c42 <pbuf_remove_header+0x1e>
 8007c34:	4b20      	ldr	r3, [pc, #128]	; (8007cb8 <pbuf_remove_header+0x94>)
 8007c36:	f240 224b 	movw	r2, #587	; 0x24b
 8007c3a:	4920      	ldr	r1, [pc, #128]	; (8007cbc <pbuf_remove_header+0x98>)
 8007c3c:	4820      	ldr	r0, [pc, #128]	; (8007cc0 <pbuf_remove_header+0x9c>)
 8007c3e:	f009 f973 	bl	8010f28 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d003      	beq.n	8007c50 <pbuf_remove_header+0x2c>
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c4e:	d301      	bcc.n	8007c54 <pbuf_remove_header+0x30>
    return 1;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e02c      	b.n	8007cae <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d101      	bne.n	8007c5e <pbuf_remove_header+0x3a>
    return 0;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	e027      	b.n	8007cae <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	895b      	ldrh	r3, [r3, #10]
 8007c66:	89fa      	ldrh	r2, [r7, #14]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d908      	bls.n	8007c7e <pbuf_remove_header+0x5a>
 8007c6c:	4b12      	ldr	r3, [pc, #72]	; (8007cb8 <pbuf_remove_header+0x94>)
 8007c6e:	f240 2255 	movw	r2, #597	; 0x255
 8007c72:	4914      	ldr	r1, [pc, #80]	; (8007cc4 <pbuf_remove_header+0xa0>)
 8007c74:	4812      	ldr	r0, [pc, #72]	; (8007cc0 <pbuf_remove_header+0x9c>)
 8007c76:	f009 f957 	bl	8010f28 <iprintf>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e017      	b.n	8007cae <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685a      	ldr	r2, [r3, #4]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	441a      	add	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	895a      	ldrh	r2, [r3, #10]
 8007c94:	89fb      	ldrh	r3, [r7, #14]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	891a      	ldrh	r2, [r3, #8]
 8007ca2:	89fb      	ldrh	r3, [r7, #14]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	08012950 	.word	0x08012950
 8007cbc:	08012ab4 	.word	0x08012ab4
 8007cc0:	080129b0 	.word	0x080129b0
 8007cc4:	08012ac0 	.word	0x08012ac0

08007cc8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	807b      	strh	r3, [r7, #2]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007cd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	da08      	bge.n	8007cf2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007ce0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007ce4:	425b      	negs	r3, r3
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f7ff ff9b 	bl	8007c24 <pbuf_remove_header>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	e007      	b.n	8007d02 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007cf2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007cf6:	787a      	ldrb	r2, [r7, #1]
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7ff ff1a 	bl	8007b34 <pbuf_add_header_impl>
 8007d00:	4603      	mov	r3, r0
  }
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b082      	sub	sp, #8
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	460b      	mov	r3, r1
 8007d14:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007d16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7ff ffd2 	bl	8007cc8 <pbuf_header_impl>
 8007d24:	4603      	mov	r3, r0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
	...

08007d30 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10b      	bne.n	8007d56 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d106      	bne.n	8007d52 <pbuf_free+0x22>
 8007d44:	4b38      	ldr	r3, [pc, #224]	; (8007e28 <pbuf_free+0xf8>)
 8007d46:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007d4a:	4938      	ldr	r1, [pc, #224]	; (8007e2c <pbuf_free+0xfc>)
 8007d4c:	4838      	ldr	r0, [pc, #224]	; (8007e30 <pbuf_free+0x100>)
 8007d4e:	f009 f8eb 	bl	8010f28 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	e063      	b.n	8007e1e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007d56:	2300      	movs	r3, #0
 8007d58:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007d5a:	e05c      	b.n	8007e16 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	7b9b      	ldrb	r3, [r3, #14]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d106      	bne.n	8007d72 <pbuf_free+0x42>
 8007d64:	4b30      	ldr	r3, [pc, #192]	; (8007e28 <pbuf_free+0xf8>)
 8007d66:	f240 22f1 	movw	r2, #753	; 0x2f1
 8007d6a:	4932      	ldr	r1, [pc, #200]	; (8007e34 <pbuf_free+0x104>)
 8007d6c:	4830      	ldr	r0, [pc, #192]	; (8007e30 <pbuf_free+0x100>)
 8007d6e:	f009 f8db 	bl	8010f28 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	7b9b      	ldrb	r3, [r3, #14]
 8007d76:	3b01      	subs	r3, #1
 8007d78:	b2da      	uxtb	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	739a      	strb	r2, [r3, #14]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	7b9b      	ldrb	r3, [r3, #14]
 8007d82:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007d84:	7dbb      	ldrb	r3, [r7, #22]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d143      	bne.n	8007e12 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	7b1b      	ldrb	r3, [r3, #12]
 8007d94:	f003 030f 	and.w	r3, r3, #15
 8007d98:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	7b5b      	ldrb	r3, [r3, #13]
 8007d9e:	f003 0302 	and.w	r3, r3, #2
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d011      	beq.n	8007dca <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d106      	bne.n	8007dc0 <pbuf_free+0x90>
 8007db2:	4b1d      	ldr	r3, [pc, #116]	; (8007e28 <pbuf_free+0xf8>)
 8007db4:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007db8:	491f      	ldr	r1, [pc, #124]	; (8007e38 <pbuf_free+0x108>)
 8007dba:	481d      	ldr	r0, [pc, #116]	; (8007e30 <pbuf_free+0x100>)
 8007dbc:	f009 f8b4 	bl	8010f28 <iprintf>
        pc->custom_free_function(p);
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	4798      	blx	r3
 8007dc8:	e01d      	b.n	8007e06 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d104      	bne.n	8007dda <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007dd0:	6879      	ldr	r1, [r7, #4]
 8007dd2:	2008      	movs	r0, #8
 8007dd4:	f7ff f936 	bl	8007044 <memp_free>
 8007dd8:	e015      	b.n	8007e06 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007dda:	7bfb      	ldrb	r3, [r7, #15]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d104      	bne.n	8007dea <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007de0:	6879      	ldr	r1, [r7, #4]
 8007de2:	2007      	movs	r0, #7
 8007de4:	f7ff f92e 	bl	8007044 <memp_free>
 8007de8:	e00d      	b.n	8007e06 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d103      	bne.n	8007df8 <pbuf_free+0xc8>
          mem_free(p);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7fe fdc1 	bl	8006978 <mem_free>
 8007df6:	e006      	b.n	8007e06 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007df8:	4b0b      	ldr	r3, [pc, #44]	; (8007e28 <pbuf_free+0xf8>)
 8007dfa:	f240 320f 	movw	r2, #783	; 0x30f
 8007dfe:	490f      	ldr	r1, [pc, #60]	; (8007e3c <pbuf_free+0x10c>)
 8007e00:	480b      	ldr	r0, [pc, #44]	; (8007e30 <pbuf_free+0x100>)
 8007e02:	f009 f891 	bl	8010f28 <iprintf>
        }
      }
      count++;
 8007e06:	7dfb      	ldrb	r3, [r7, #23]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	607b      	str	r3, [r7, #4]
 8007e10:	e001      	b.n	8007e16 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007e12:	2300      	movs	r3, #0
 8007e14:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d19f      	bne.n	8007d5c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3718      	adds	r7, #24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	08012950 	.word	0x08012950
 8007e2c:	08012ab4 	.word	0x08012ab4
 8007e30:	080129b0 	.word	0x080129b0
 8007e34:	08012ae0 	.word	0x08012ae0
 8007e38:	08012af8 	.word	0x08012af8
 8007e3c:	08012b1c 	.word	0x08012b1c

08007e40 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007e4c:	e005      	b.n	8007e5a <pbuf_clen+0x1a>
    ++len;
 8007e4e:	89fb      	ldrh	r3, [r7, #14]
 8007e50:	3301      	adds	r3, #1
 8007e52:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1f6      	bne.n	8007e4e <pbuf_clen+0xe>
  }
  return len;
 8007e60:	89fb      	ldrh	r3, [r7, #14]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3714      	adds	r7, #20
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
	...

08007e70 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d010      	beq.n	8007ea0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	7b9b      	ldrb	r3, [r3, #14]
 8007e82:	3301      	adds	r3, #1
 8007e84:	b2da      	uxtb	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	7b9b      	ldrb	r3, [r3, #14]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d106      	bne.n	8007ea0 <pbuf_ref+0x30>
 8007e92:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <pbuf_ref+0x38>)
 8007e94:	f240 3242 	movw	r2, #834	; 0x342
 8007e98:	4904      	ldr	r1, [pc, #16]	; (8007eac <pbuf_ref+0x3c>)
 8007e9a:	4805      	ldr	r0, [pc, #20]	; (8007eb0 <pbuf_ref+0x40>)
 8007e9c:	f009 f844 	bl	8010f28 <iprintf>
  }
}
 8007ea0:	bf00      	nop
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	08012950 	.word	0x08012950
 8007eac:	08012b30 	.word	0x08012b30
 8007eb0:	080129b0 	.word	0x080129b0

08007eb4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d002      	beq.n	8007eca <pbuf_cat+0x16>
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d107      	bne.n	8007eda <pbuf_cat+0x26>
 8007eca:	4b20      	ldr	r3, [pc, #128]	; (8007f4c <pbuf_cat+0x98>)
 8007ecc:	f240 3259 	movw	r2, #857	; 0x359
 8007ed0:	491f      	ldr	r1, [pc, #124]	; (8007f50 <pbuf_cat+0x9c>)
 8007ed2:	4820      	ldr	r0, [pc, #128]	; (8007f54 <pbuf_cat+0xa0>)
 8007ed4:	f009 f828 	bl	8010f28 <iprintf>
 8007ed8:	e034      	b.n	8007f44 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	60fb      	str	r3, [r7, #12]
 8007ede:	e00a      	b.n	8007ef6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	891a      	ldrh	r2, [r3, #8]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	891b      	ldrh	r3, [r3, #8]
 8007ee8:	4413      	add	r3, r2
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	60fb      	str	r3, [r7, #12]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1f0      	bne.n	8007ee0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	891a      	ldrh	r2, [r3, #8]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	895b      	ldrh	r3, [r3, #10]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d006      	beq.n	8007f18 <pbuf_cat+0x64>
 8007f0a:	4b10      	ldr	r3, [pc, #64]	; (8007f4c <pbuf_cat+0x98>)
 8007f0c:	f240 3262 	movw	r2, #866	; 0x362
 8007f10:	4911      	ldr	r1, [pc, #68]	; (8007f58 <pbuf_cat+0xa4>)
 8007f12:	4810      	ldr	r0, [pc, #64]	; (8007f54 <pbuf_cat+0xa0>)
 8007f14:	f009 f808 	bl	8010f28 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d006      	beq.n	8007f2e <pbuf_cat+0x7a>
 8007f20:	4b0a      	ldr	r3, [pc, #40]	; (8007f4c <pbuf_cat+0x98>)
 8007f22:	f240 3263 	movw	r2, #867	; 0x363
 8007f26:	490d      	ldr	r1, [pc, #52]	; (8007f5c <pbuf_cat+0xa8>)
 8007f28:	480a      	ldr	r0, [pc, #40]	; (8007f54 <pbuf_cat+0xa0>)
 8007f2a:	f008 fffd 	bl	8010f28 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	891a      	ldrh	r2, [r3, #8]
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	891b      	ldrh	r3, [r3, #8]
 8007f36:	4413      	add	r3, r2
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	08012950 	.word	0x08012950
 8007f50:	08012b44 	.word	0x08012b44
 8007f54:	080129b0 	.word	0x080129b0
 8007f58:	08012b7c 	.word	0x08012b7c
 8007f5c:	08012bac 	.word	0x08012bac

08007f60 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	617b      	str	r3, [r7, #20]
 8007f6e:	2300      	movs	r3, #0
 8007f70:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d008      	beq.n	8007f8a <pbuf_copy+0x2a>
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d005      	beq.n	8007f8a <pbuf_copy+0x2a>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	891a      	ldrh	r2, [r3, #8]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	891b      	ldrh	r3, [r3, #8]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d209      	bcs.n	8007f9e <pbuf_copy+0x3e>
 8007f8a:	4b57      	ldr	r3, [pc, #348]	; (80080e8 <pbuf_copy+0x188>)
 8007f8c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007f90:	4956      	ldr	r1, [pc, #344]	; (80080ec <pbuf_copy+0x18c>)
 8007f92:	4857      	ldr	r0, [pc, #348]	; (80080f0 <pbuf_copy+0x190>)
 8007f94:	f008 ffc8 	bl	8010f28 <iprintf>
 8007f98:	f06f 030f 	mvn.w	r3, #15
 8007f9c:	e09f      	b.n	80080de <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	895b      	ldrh	r3, [r3, #10]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	1ad2      	subs	r2, r2, r3
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	895b      	ldrh	r3, [r3, #10]
 8007fac:	4619      	mov	r1, r3
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	1acb      	subs	r3, r1, r3
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d306      	bcc.n	8007fc4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	895b      	ldrh	r3, [r3, #10]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	60fb      	str	r3, [r7, #12]
 8007fc2:	e005      	b.n	8007fd0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	895b      	ldrh	r3, [r3, #10]
 8007fc8:	461a      	mov	r2, r3
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685a      	ldr	r2, [r3, #4]
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	18d0      	adds	r0, r2, r3
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	685a      	ldr	r2, [r3, #4]
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	4413      	add	r3, r2
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	f008 ff8a 	bl	8010efc <memcpy>
    offset_to += len;
 8007fe8:	697a      	ldr	r2, [r7, #20]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	4413      	add	r3, r2
 8007fee:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	895b      	ldrh	r3, [r3, #10]
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	4293      	cmp	r3, r2
 8008002:	d906      	bls.n	8008012 <pbuf_copy+0xb2>
 8008004:	4b38      	ldr	r3, [pc, #224]	; (80080e8 <pbuf_copy+0x188>)
 8008006:	f240 32d9 	movw	r2, #985	; 0x3d9
 800800a:	493a      	ldr	r1, [pc, #232]	; (80080f4 <pbuf_copy+0x194>)
 800800c:	4838      	ldr	r0, [pc, #224]	; (80080f0 <pbuf_copy+0x190>)
 800800e:	f008 ff8b 	bl	8010f28 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	895b      	ldrh	r3, [r3, #10]
 8008016:	461a      	mov	r2, r3
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	4293      	cmp	r3, r2
 800801c:	d906      	bls.n	800802c <pbuf_copy+0xcc>
 800801e:	4b32      	ldr	r3, [pc, #200]	; (80080e8 <pbuf_copy+0x188>)
 8008020:	f240 32da 	movw	r2, #986	; 0x3da
 8008024:	4934      	ldr	r1, [pc, #208]	; (80080f8 <pbuf_copy+0x198>)
 8008026:	4832      	ldr	r0, [pc, #200]	; (80080f0 <pbuf_copy+0x190>)
 8008028:	f008 ff7e 	bl	8010f28 <iprintf>
    if (offset_from >= p_from->len) {
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	895b      	ldrh	r3, [r3, #10]
 8008030:	461a      	mov	r2, r3
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	4293      	cmp	r3, r2
 8008036:	d304      	bcc.n	8008042 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008038:	2300      	movs	r3, #0
 800803a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	895b      	ldrh	r3, [r3, #10]
 8008046:	461a      	mov	r2, r3
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	4293      	cmp	r3, r2
 800804c:	d114      	bne.n	8008078 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800804e:	2300      	movs	r3, #0
 8008050:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d10c      	bne.n	8008078 <pbuf_copy+0x118>
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d009      	beq.n	8008078 <pbuf_copy+0x118>
 8008064:	4b20      	ldr	r3, [pc, #128]	; (80080e8 <pbuf_copy+0x188>)
 8008066:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800806a:	4924      	ldr	r1, [pc, #144]	; (80080fc <pbuf_copy+0x19c>)
 800806c:	4820      	ldr	r0, [pc, #128]	; (80080f0 <pbuf_copy+0x190>)
 800806e:	f008 ff5b 	bl	8010f28 <iprintf>
 8008072:	f06f 030f 	mvn.w	r3, #15
 8008076:	e032      	b.n	80080de <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d013      	beq.n	80080a6 <pbuf_copy+0x146>
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	895a      	ldrh	r2, [r3, #10]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	891b      	ldrh	r3, [r3, #8]
 8008086:	429a      	cmp	r2, r3
 8008088:	d10d      	bne.n	80080a6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d009      	beq.n	80080a6 <pbuf_copy+0x146>
 8008092:	4b15      	ldr	r3, [pc, #84]	; (80080e8 <pbuf_copy+0x188>)
 8008094:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008098:	4919      	ldr	r1, [pc, #100]	; (8008100 <pbuf_copy+0x1a0>)
 800809a:	4815      	ldr	r0, [pc, #84]	; (80080f0 <pbuf_copy+0x190>)
 800809c:	f008 ff44 	bl	8010f28 <iprintf>
 80080a0:	f06f 0305 	mvn.w	r3, #5
 80080a4:	e01b      	b.n	80080de <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d013      	beq.n	80080d4 <pbuf_copy+0x174>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	895a      	ldrh	r2, [r3, #10]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	891b      	ldrh	r3, [r3, #8]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d10d      	bne.n	80080d4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d009      	beq.n	80080d4 <pbuf_copy+0x174>
 80080c0:	4b09      	ldr	r3, [pc, #36]	; (80080e8 <pbuf_copy+0x188>)
 80080c2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80080c6:	490e      	ldr	r1, [pc, #56]	; (8008100 <pbuf_copy+0x1a0>)
 80080c8:	4809      	ldr	r0, [pc, #36]	; (80080f0 <pbuf_copy+0x190>)
 80080ca:	f008 ff2d 	bl	8010f28 <iprintf>
 80080ce:	f06f 0305 	mvn.w	r3, #5
 80080d2:	e004      	b.n	80080de <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f47f af61 	bne.w	8007f9e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	08012950 	.word	0x08012950
 80080ec:	08012bf8 	.word	0x08012bf8
 80080f0:	080129b0 	.word	0x080129b0
 80080f4:	08012c28 	.word	0x08012c28
 80080f8:	08012c40 	.word	0x08012c40
 80080fc:	08012c5c 	.word	0x08012c5c
 8008100:	08012c6c 	.word	0x08012c6c

08008104 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b088      	sub	sp, #32
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	4611      	mov	r1, r2
 8008110:	461a      	mov	r2, r3
 8008112:	460b      	mov	r3, r1
 8008114:	80fb      	strh	r3, [r7, #6]
 8008116:	4613      	mov	r3, r2
 8008118:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800811a:	2300      	movs	r3, #0
 800811c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800811e:	2300      	movs	r3, #0
 8008120:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d108      	bne.n	800813a <pbuf_copy_partial+0x36>
 8008128:	4b2b      	ldr	r3, [pc, #172]	; (80081d8 <pbuf_copy_partial+0xd4>)
 800812a:	f240 420a 	movw	r2, #1034	; 0x40a
 800812e:	492b      	ldr	r1, [pc, #172]	; (80081dc <pbuf_copy_partial+0xd8>)
 8008130:	482b      	ldr	r0, [pc, #172]	; (80081e0 <pbuf_copy_partial+0xdc>)
 8008132:	f008 fef9 	bl	8010f28 <iprintf>
 8008136:	2300      	movs	r3, #0
 8008138:	e04a      	b.n	80081d0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d108      	bne.n	8008152 <pbuf_copy_partial+0x4e>
 8008140:	4b25      	ldr	r3, [pc, #148]	; (80081d8 <pbuf_copy_partial+0xd4>)
 8008142:	f240 420b 	movw	r2, #1035	; 0x40b
 8008146:	4927      	ldr	r1, [pc, #156]	; (80081e4 <pbuf_copy_partial+0xe0>)
 8008148:	4825      	ldr	r0, [pc, #148]	; (80081e0 <pbuf_copy_partial+0xdc>)
 800814a:	f008 feed 	bl	8010f28 <iprintf>
 800814e:	2300      	movs	r3, #0
 8008150:	e03e      	b.n	80081d0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	61fb      	str	r3, [r7, #28]
 8008156:	e034      	b.n	80081c2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008158:	88bb      	ldrh	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00a      	beq.n	8008174 <pbuf_copy_partial+0x70>
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	895b      	ldrh	r3, [r3, #10]
 8008162:	88ba      	ldrh	r2, [r7, #4]
 8008164:	429a      	cmp	r2, r3
 8008166:	d305      	bcc.n	8008174 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	895b      	ldrh	r3, [r3, #10]
 800816c:	88ba      	ldrh	r2, [r7, #4]
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	80bb      	strh	r3, [r7, #4]
 8008172:	e023      	b.n	80081bc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	895a      	ldrh	r2, [r3, #10]
 8008178:	88bb      	ldrh	r3, [r7, #4]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800817e:	8b3a      	ldrh	r2, [r7, #24]
 8008180:	88fb      	ldrh	r3, [r7, #6]
 8008182:	429a      	cmp	r2, r3
 8008184:	d901      	bls.n	800818a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008186:	88fb      	ldrh	r3, [r7, #6]
 8008188:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800818a:	8b7b      	ldrh	r3, [r7, #26]
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	18d0      	adds	r0, r2, r3
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	88bb      	ldrh	r3, [r7, #4]
 8008196:	4413      	add	r3, r2
 8008198:	8b3a      	ldrh	r2, [r7, #24]
 800819a:	4619      	mov	r1, r3
 800819c:	f008 feae 	bl	8010efc <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80081a0:	8afa      	ldrh	r2, [r7, #22]
 80081a2:	8b3b      	ldrh	r3, [r7, #24]
 80081a4:	4413      	add	r3, r2
 80081a6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80081a8:	8b7a      	ldrh	r2, [r7, #26]
 80081aa:	8b3b      	ldrh	r3, [r7, #24]
 80081ac:	4413      	add	r3, r2
 80081ae:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80081b0:	88fa      	ldrh	r2, [r7, #6]
 80081b2:	8b3b      	ldrh	r3, [r7, #24]
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	61fb      	str	r3, [r7, #28]
 80081c2:	88fb      	ldrh	r3, [r7, #6]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d002      	beq.n	80081ce <pbuf_copy_partial+0xca>
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1c4      	bne.n	8008158 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80081ce:	8afb      	ldrh	r3, [r7, #22]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3720      	adds	r7, #32
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	08012950 	.word	0x08012950
 80081dc:	08012c98 	.word	0x08012c98
 80081e0:	080129b0 	.word	0x080129b0
 80081e4:	08012cb8 	.word	0x08012cb8

080081e8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	4603      	mov	r3, r0
 80081f0:	603a      	str	r2, [r7, #0]
 80081f2:	71fb      	strb	r3, [r7, #7]
 80081f4:	460b      	mov	r3, r1
 80081f6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	8919      	ldrh	r1, [r3, #8]
 80081fc:	88ba      	ldrh	r2, [r7, #4]
 80081fe:	79fb      	ldrb	r3, [r7, #7]
 8008200:	4618      	mov	r0, r3
 8008202:	f7ff fab1 	bl	8007768 <pbuf_alloc>
 8008206:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <pbuf_clone+0x2a>
    return NULL;
 800820e:	2300      	movs	r3, #0
 8008210:	e011      	b.n	8008236 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f7ff fea3 	bl	8007f60 <pbuf_copy>
 800821a:	4603      	mov	r3, r0
 800821c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800821e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d006      	beq.n	8008234 <pbuf_clone+0x4c>
 8008226:	4b06      	ldr	r3, [pc, #24]	; (8008240 <pbuf_clone+0x58>)
 8008228:	f240 5224 	movw	r2, #1316	; 0x524
 800822c:	4905      	ldr	r1, [pc, #20]	; (8008244 <pbuf_clone+0x5c>)
 800822e:	4806      	ldr	r0, [pc, #24]	; (8008248 <pbuf_clone+0x60>)
 8008230:	f008 fe7a 	bl	8010f28 <iprintf>
  return q;
 8008234:	68fb      	ldr	r3, [r7, #12]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	08012950 	.word	0x08012950
 8008244:	08012dc4 	.word	0x08012dc4
 8008248:	080129b0 	.word	0x080129b0

0800824c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008250:	f008 fe82 	bl	8010f58 <rand>
 8008254:	4603      	mov	r3, r0
 8008256:	b29b      	uxth	r3, r3
 8008258:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800825c:	b29b      	uxth	r3, r3
 800825e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8008262:	b29a      	uxth	r2, r3
 8008264:	4b01      	ldr	r3, [pc, #4]	; (800826c <tcp_init+0x20>)
 8008266:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008268:	bf00      	nop
 800826a:	bd80      	pop	{r7, pc}
 800826c:	20000070 	.word	0x20000070

08008270 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	7d1b      	ldrb	r3, [r3, #20]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d105      	bne.n	800828c <tcp_free+0x1c>
 8008280:	4b06      	ldr	r3, [pc, #24]	; (800829c <tcp_free+0x2c>)
 8008282:	22d4      	movs	r2, #212	; 0xd4
 8008284:	4906      	ldr	r1, [pc, #24]	; (80082a0 <tcp_free+0x30>)
 8008286:	4807      	ldr	r0, [pc, #28]	; (80082a4 <tcp_free+0x34>)
 8008288:	f008 fe4e 	bl	8010f28 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800828c:	6879      	ldr	r1, [r7, #4]
 800828e:	2001      	movs	r0, #1
 8008290:	f7fe fed8 	bl	8007044 <memp_free>
}
 8008294:	bf00      	nop
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	08012e50 	.word	0x08012e50
 80082a0:	08012e80 	.word	0x08012e80
 80082a4:	08012e94 	.word	0x08012e94

080082a8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	7d1b      	ldrb	r3, [r3, #20]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d105      	bne.n	80082c4 <tcp_free_listen+0x1c>
 80082b8:	4b06      	ldr	r3, [pc, #24]	; (80082d4 <tcp_free_listen+0x2c>)
 80082ba:	22df      	movs	r2, #223	; 0xdf
 80082bc:	4906      	ldr	r1, [pc, #24]	; (80082d8 <tcp_free_listen+0x30>)
 80082be:	4807      	ldr	r0, [pc, #28]	; (80082dc <tcp_free_listen+0x34>)
 80082c0:	f008 fe32 	bl	8010f28 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80082c4:	6879      	ldr	r1, [r7, #4]
 80082c6:	2002      	movs	r0, #2
 80082c8:	f7fe febc 	bl	8007044 <memp_free>
}
 80082cc:	bf00      	nop
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	08012e50 	.word	0x08012e50
 80082d8:	08012ebc 	.word	0x08012ebc
 80082dc:	08012e94 	.word	0x08012e94

080082e0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80082e4:	f001 f85c 	bl	80093a0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80082e8:	4b07      	ldr	r3, [pc, #28]	; (8008308 <tcp_tmr+0x28>)
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	3301      	adds	r3, #1
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	4b05      	ldr	r3, [pc, #20]	; (8008308 <tcp_tmr+0x28>)
 80082f2:	701a      	strb	r2, [r3, #0]
 80082f4:	4b04      	ldr	r3, [pc, #16]	; (8008308 <tcp_tmr+0x28>)
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008300:	f000 fd0e 	bl	8008d20 <tcp_slowtmr>
  }
}
 8008304:	bf00      	nop
 8008306:	bd80      	pop	{r7, pc}
 8008308:	2000875d 	.word	0x2000875d

0800830c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d105      	bne.n	8008328 <tcp_remove_listener+0x1c>
 800831c:	4b0d      	ldr	r3, [pc, #52]	; (8008354 <tcp_remove_listener+0x48>)
 800831e:	22ff      	movs	r2, #255	; 0xff
 8008320:	490d      	ldr	r1, [pc, #52]	; (8008358 <tcp_remove_listener+0x4c>)
 8008322:	480e      	ldr	r0, [pc, #56]	; (800835c <tcp_remove_listener+0x50>)
 8008324:	f008 fe00 	bl	8010f28 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	60fb      	str	r3, [r7, #12]
 800832c:	e00a      	b.n	8008344 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	429a      	cmp	r2, r3
 8008336:	d102      	bne.n	800833e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	60fb      	str	r3, [r7, #12]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1f1      	bne.n	800832e <tcp_remove_listener+0x22>
    }
  }
}
 800834a:	bf00      	nop
 800834c:	bf00      	nop
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	08012e50 	.word	0x08012e50
 8008358:	08012ed8 	.word	0x08012ed8
 800835c:	08012e94 	.word	0x08012e94

08008360 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d106      	bne.n	800837c <tcp_listen_closed+0x1c>
 800836e:	4b14      	ldr	r3, [pc, #80]	; (80083c0 <tcp_listen_closed+0x60>)
 8008370:	f240 1211 	movw	r2, #273	; 0x111
 8008374:	4913      	ldr	r1, [pc, #76]	; (80083c4 <tcp_listen_closed+0x64>)
 8008376:	4814      	ldr	r0, [pc, #80]	; (80083c8 <tcp_listen_closed+0x68>)
 8008378:	f008 fdd6 	bl	8010f28 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	7d1b      	ldrb	r3, [r3, #20]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d006      	beq.n	8008392 <tcp_listen_closed+0x32>
 8008384:	4b0e      	ldr	r3, [pc, #56]	; (80083c0 <tcp_listen_closed+0x60>)
 8008386:	f44f 7289 	mov.w	r2, #274	; 0x112
 800838a:	4910      	ldr	r1, [pc, #64]	; (80083cc <tcp_listen_closed+0x6c>)
 800838c:	480e      	ldr	r0, [pc, #56]	; (80083c8 <tcp_listen_closed+0x68>)
 800838e:	f008 fdcb 	bl	8010f28 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008392:	2301      	movs	r3, #1
 8008394:	60fb      	str	r3, [r7, #12]
 8008396:	e00b      	b.n	80083b0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008398:	4a0d      	ldr	r2, [pc, #52]	; (80083d0 <tcp_listen_closed+0x70>)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6879      	ldr	r1, [r7, #4]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7ff ffb1 	bl	800830c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3301      	adds	r3, #1
 80083ae:	60fb      	str	r3, [r7, #12]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d9f0      	bls.n	8008398 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80083b6:	bf00      	nop
 80083b8:	bf00      	nop
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	08012e50 	.word	0x08012e50
 80083c4:	08012f00 	.word	0x08012f00
 80083c8:	08012e94 	.word	0x08012e94
 80083cc:	08012f0c 	.word	0x08012f0c
 80083d0:	08015300 	.word	0x08015300

080083d4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80083d4:	b5b0      	push	{r4, r5, r7, lr}
 80083d6:	b088      	sub	sp, #32
 80083d8:	af04      	add	r7, sp, #16
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	460b      	mov	r3, r1
 80083de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d106      	bne.n	80083f4 <tcp_close_shutdown+0x20>
 80083e6:	4b63      	ldr	r3, [pc, #396]	; (8008574 <tcp_close_shutdown+0x1a0>)
 80083e8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80083ec:	4962      	ldr	r1, [pc, #392]	; (8008578 <tcp_close_shutdown+0x1a4>)
 80083ee:	4863      	ldr	r0, [pc, #396]	; (800857c <tcp_close_shutdown+0x1a8>)
 80083f0:	f008 fd9a 	bl	8010f28 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80083f4:	78fb      	ldrb	r3, [r7, #3]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d066      	beq.n	80084c8 <tcp_close_shutdown+0xf4>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	7d1b      	ldrb	r3, [r3, #20]
 80083fe:	2b04      	cmp	r3, #4
 8008400:	d003      	beq.n	800840a <tcp_close_shutdown+0x36>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	7d1b      	ldrb	r3, [r3, #20]
 8008406:	2b07      	cmp	r3, #7
 8008408:	d15e      	bne.n	80084c8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800840e:	2b00      	cmp	r3, #0
 8008410:	d104      	bne.n	800841c <tcp_close_shutdown+0x48>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008416:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800841a:	d055      	beq.n	80084c8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	8b5b      	ldrh	r3, [r3, #26]
 8008420:	f003 0310 	and.w	r3, r3, #16
 8008424:	2b00      	cmp	r3, #0
 8008426:	d106      	bne.n	8008436 <tcp_close_shutdown+0x62>
 8008428:	4b52      	ldr	r3, [pc, #328]	; (8008574 <tcp_close_shutdown+0x1a0>)
 800842a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800842e:	4954      	ldr	r1, [pc, #336]	; (8008580 <tcp_close_shutdown+0x1ac>)
 8008430:	4852      	ldr	r0, [pc, #328]	; (800857c <tcp_close_shutdown+0x1a8>)
 8008432:	f008 fd79 	bl	8010f28 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800843e:	687d      	ldr	r5, [r7, #4]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	3304      	adds	r3, #4
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	8ad2      	ldrh	r2, [r2, #22]
 8008448:	6879      	ldr	r1, [r7, #4]
 800844a:	8b09      	ldrh	r1, [r1, #24]
 800844c:	9102      	str	r1, [sp, #8]
 800844e:	9201      	str	r2, [sp, #4]
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	462b      	mov	r3, r5
 8008454:	4622      	mov	r2, r4
 8008456:	4601      	mov	r1, r0
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f005 fd8f 	bl	800df7c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f001 fb6c 	bl	8009b3c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008464:	4b47      	ldr	r3, [pc, #284]	; (8008584 <tcp_close_shutdown+0x1b0>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	429a      	cmp	r2, r3
 800846c:	d105      	bne.n	800847a <tcp_close_shutdown+0xa6>
 800846e:	4b45      	ldr	r3, [pc, #276]	; (8008584 <tcp_close_shutdown+0x1b0>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	4a43      	ldr	r2, [pc, #268]	; (8008584 <tcp_close_shutdown+0x1b0>)
 8008476:	6013      	str	r3, [r2, #0]
 8008478:	e013      	b.n	80084a2 <tcp_close_shutdown+0xce>
 800847a:	4b42      	ldr	r3, [pc, #264]	; (8008584 <tcp_close_shutdown+0x1b0>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	60fb      	str	r3, [r7, #12]
 8008480:	e00c      	b.n	800849c <tcp_close_shutdown+0xc8>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	429a      	cmp	r2, r3
 800848a:	d104      	bne.n	8008496 <tcp_close_shutdown+0xc2>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68da      	ldr	r2, [r3, #12]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	60da      	str	r2, [r3, #12]
 8008494:	e005      	b.n	80084a2 <tcp_close_shutdown+0xce>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1ef      	bne.n	8008482 <tcp_close_shutdown+0xae>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	60da      	str	r2, [r3, #12]
 80084a8:	4b37      	ldr	r3, [pc, #220]	; (8008588 <tcp_close_shutdown+0x1b4>)
 80084aa:	2201      	movs	r2, #1
 80084ac:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80084ae:	4b37      	ldr	r3, [pc, #220]	; (800858c <tcp_close_shutdown+0x1b8>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d102      	bne.n	80084be <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80084b8:	f004 f804 	bl	800c4c4 <tcp_trigger_input_pcb_close>
 80084bc:	e002      	b.n	80084c4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7ff fed6 	bl	8008270 <tcp_free>
      }
      return ERR_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	e050      	b.n	800856a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	7d1b      	ldrb	r3, [r3, #20]
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d03b      	beq.n	8008548 <tcp_close_shutdown+0x174>
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	dc44      	bgt.n	800855e <tcp_close_shutdown+0x18a>
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d002      	beq.n	80084de <tcp_close_shutdown+0x10a>
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d02a      	beq.n	8008532 <tcp_close_shutdown+0x15e>
 80084dc:	e03f      	b.n	800855e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	8adb      	ldrh	r3, [r3, #22]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d021      	beq.n	800852a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80084e6:	4b2a      	ldr	r3, [pc, #168]	; (8008590 <tcp_close_shutdown+0x1bc>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d105      	bne.n	80084fc <tcp_close_shutdown+0x128>
 80084f0:	4b27      	ldr	r3, [pc, #156]	; (8008590 <tcp_close_shutdown+0x1bc>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	4a26      	ldr	r2, [pc, #152]	; (8008590 <tcp_close_shutdown+0x1bc>)
 80084f8:	6013      	str	r3, [r2, #0]
 80084fa:	e013      	b.n	8008524 <tcp_close_shutdown+0x150>
 80084fc:	4b24      	ldr	r3, [pc, #144]	; (8008590 <tcp_close_shutdown+0x1bc>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	60bb      	str	r3, [r7, #8]
 8008502:	e00c      	b.n	800851e <tcp_close_shutdown+0x14a>
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	429a      	cmp	r2, r3
 800850c:	d104      	bne.n	8008518 <tcp_close_shutdown+0x144>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	68da      	ldr	r2, [r3, #12]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	60da      	str	r2, [r3, #12]
 8008516:	e005      	b.n	8008524 <tcp_close_shutdown+0x150>
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	60bb      	str	r3, [r7, #8]
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1ef      	bne.n	8008504 <tcp_close_shutdown+0x130>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7ff fea0 	bl	8008270 <tcp_free>
      break;
 8008530:	e01a      	b.n	8008568 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7ff ff14 	bl	8008360 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008538:	6879      	ldr	r1, [r7, #4]
 800853a:	4816      	ldr	r0, [pc, #88]	; (8008594 <tcp_close_shutdown+0x1c0>)
 800853c:	f001 fb4e 	bl	8009bdc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7ff feb1 	bl	80082a8 <tcp_free_listen>
      break;
 8008546:	e00f      	b.n	8008568 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008548:	6879      	ldr	r1, [r7, #4]
 800854a:	480e      	ldr	r0, [pc, #56]	; (8008584 <tcp_close_shutdown+0x1b0>)
 800854c:	f001 fb46 	bl	8009bdc <tcp_pcb_remove>
 8008550:	4b0d      	ldr	r3, [pc, #52]	; (8008588 <tcp_close_shutdown+0x1b4>)
 8008552:	2201      	movs	r2, #1
 8008554:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7ff fe8a 	bl	8008270 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800855c:	e004      	b.n	8008568 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f81a 	bl	8008598 <tcp_close_shutdown_fin>
 8008564:	4603      	mov	r3, r0
 8008566:	e000      	b.n	800856a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bdb0      	pop	{r4, r5, r7, pc}
 8008572:	bf00      	nop
 8008574:	08012e50 	.word	0x08012e50
 8008578:	08012f24 	.word	0x08012f24
 800857c:	08012e94 	.word	0x08012e94
 8008580:	08012f44 	.word	0x08012f44
 8008584:	20008754 	.word	0x20008754
 8008588:	2000875c 	.word	0x2000875c
 800858c:	20008794 	.word	0x20008794
 8008590:	2000874c 	.word	0x2000874c
 8008594:	20008750 	.word	0x20008750

08008598 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d106      	bne.n	80085b4 <tcp_close_shutdown_fin+0x1c>
 80085a6:	4b2e      	ldr	r3, [pc, #184]	; (8008660 <tcp_close_shutdown_fin+0xc8>)
 80085a8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80085ac:	492d      	ldr	r1, [pc, #180]	; (8008664 <tcp_close_shutdown_fin+0xcc>)
 80085ae:	482e      	ldr	r0, [pc, #184]	; (8008668 <tcp_close_shutdown_fin+0xd0>)
 80085b0:	f008 fcba 	bl	8010f28 <iprintf>

  switch (pcb->state) {
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	7d1b      	ldrb	r3, [r3, #20]
 80085b8:	2b07      	cmp	r3, #7
 80085ba:	d020      	beq.n	80085fe <tcp_close_shutdown_fin+0x66>
 80085bc:	2b07      	cmp	r3, #7
 80085be:	dc2b      	bgt.n	8008618 <tcp_close_shutdown_fin+0x80>
 80085c0:	2b03      	cmp	r3, #3
 80085c2:	d002      	beq.n	80085ca <tcp_close_shutdown_fin+0x32>
 80085c4:	2b04      	cmp	r3, #4
 80085c6:	d00d      	beq.n	80085e4 <tcp_close_shutdown_fin+0x4c>
 80085c8:	e026      	b.n	8008618 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f004 fde4 	bl	800d198 <tcp_send_fin>
 80085d0:	4603      	mov	r3, r0
 80085d2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80085d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d11f      	bne.n	800861c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2205      	movs	r2, #5
 80085e0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80085e2:	e01b      	b.n	800861c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f004 fdd7 	bl	800d198 <tcp_send_fin>
 80085ea:	4603      	mov	r3, r0
 80085ec:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80085ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d114      	bne.n	8008620 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2205      	movs	r2, #5
 80085fa:	751a      	strb	r2, [r3, #20]
      }
      break;
 80085fc:	e010      	b.n	8008620 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f004 fdca 	bl	800d198 <tcp_send_fin>
 8008604:	4603      	mov	r3, r0
 8008606:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d109      	bne.n	8008624 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2209      	movs	r2, #9
 8008614:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008616:	e005      	b.n	8008624 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	e01c      	b.n	8008656 <tcp_close_shutdown_fin+0xbe>
      break;
 800861c:	bf00      	nop
 800861e:	e002      	b.n	8008626 <tcp_close_shutdown_fin+0x8e>
      break;
 8008620:	bf00      	nop
 8008622:	e000      	b.n	8008626 <tcp_close_shutdown_fin+0x8e>
      break;
 8008624:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d103      	bne.n	8008636 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f004 fef0 	bl	800d414 <tcp_output>
 8008634:	e00d      	b.n	8008652 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800863a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800863e:	d108      	bne.n	8008652 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	8b5b      	ldrh	r3, [r3, #26]
 8008644:	f043 0308 	orr.w	r3, r3, #8
 8008648:	b29a      	uxth	r2, r3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800864e:	2300      	movs	r3, #0
 8008650:	e001      	b.n	8008656 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008652:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	08012e50 	.word	0x08012e50
 8008664:	08012f00 	.word	0x08012f00
 8008668:	08012e94 	.word	0x08012e94

0800866c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d109      	bne.n	800868e <tcp_close+0x22>
 800867a:	4b0f      	ldr	r3, [pc, #60]	; (80086b8 <tcp_close+0x4c>)
 800867c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8008680:	490e      	ldr	r1, [pc, #56]	; (80086bc <tcp_close+0x50>)
 8008682:	480f      	ldr	r0, [pc, #60]	; (80086c0 <tcp_close+0x54>)
 8008684:	f008 fc50 	bl	8010f28 <iprintf>
 8008688:	f06f 030f 	mvn.w	r3, #15
 800868c:	e00f      	b.n	80086ae <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	7d1b      	ldrb	r3, [r3, #20]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d006      	beq.n	80086a4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	8b5b      	ldrh	r3, [r3, #26]
 800869a:	f043 0310 	orr.w	r3, r3, #16
 800869e:	b29a      	uxth	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80086a4:	2101      	movs	r1, #1
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f7ff fe94 	bl	80083d4 <tcp_close_shutdown>
 80086ac:	4603      	mov	r3, r0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	08012e50 	.word	0x08012e50
 80086bc:	08012f60 	.word	0x08012f60
 80086c0:	08012e94 	.word	0x08012e94

080086c4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b08e      	sub	sp, #56	; 0x38
 80086c8:	af04      	add	r7, sp, #16
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d107      	bne.n	80086e4 <tcp_abandon+0x20>
 80086d4:	4b52      	ldr	r3, [pc, #328]	; (8008820 <tcp_abandon+0x15c>)
 80086d6:	f240 223d 	movw	r2, #573	; 0x23d
 80086da:	4952      	ldr	r1, [pc, #328]	; (8008824 <tcp_abandon+0x160>)
 80086dc:	4852      	ldr	r0, [pc, #328]	; (8008828 <tcp_abandon+0x164>)
 80086de:	f008 fc23 	bl	8010f28 <iprintf>
 80086e2:	e099      	b.n	8008818 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	7d1b      	ldrb	r3, [r3, #20]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d106      	bne.n	80086fa <tcp_abandon+0x36>
 80086ec:	4b4c      	ldr	r3, [pc, #304]	; (8008820 <tcp_abandon+0x15c>)
 80086ee:	f44f 7210 	mov.w	r2, #576	; 0x240
 80086f2:	494e      	ldr	r1, [pc, #312]	; (800882c <tcp_abandon+0x168>)
 80086f4:	484c      	ldr	r0, [pc, #304]	; (8008828 <tcp_abandon+0x164>)
 80086f6:	f008 fc17 	bl	8010f28 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	7d1b      	ldrb	r3, [r3, #20]
 80086fe:	2b0a      	cmp	r3, #10
 8008700:	d107      	bne.n	8008712 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008702:	6879      	ldr	r1, [r7, #4]
 8008704:	484a      	ldr	r0, [pc, #296]	; (8008830 <tcp_abandon+0x16c>)
 8008706:	f001 fa69 	bl	8009bdc <tcp_pcb_remove>
    tcp_free(pcb);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7ff fdb0 	bl	8008270 <tcp_free>
 8008710:	e082      	b.n	8008818 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8008712:	2300      	movs	r3, #0
 8008714:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8008716:	2300      	movs	r3, #0
 8008718:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800871e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008724:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800872c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	7d1b      	ldrb	r3, [r3, #20]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d126      	bne.n	800878a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	8adb      	ldrh	r3, [r3, #22]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d02e      	beq.n	80087a2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008744:	4b3b      	ldr	r3, [pc, #236]	; (8008834 <tcp_abandon+0x170>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	429a      	cmp	r2, r3
 800874c:	d105      	bne.n	800875a <tcp_abandon+0x96>
 800874e:	4b39      	ldr	r3, [pc, #228]	; (8008834 <tcp_abandon+0x170>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	4a37      	ldr	r2, [pc, #220]	; (8008834 <tcp_abandon+0x170>)
 8008756:	6013      	str	r3, [r2, #0]
 8008758:	e013      	b.n	8008782 <tcp_abandon+0xbe>
 800875a:	4b36      	ldr	r3, [pc, #216]	; (8008834 <tcp_abandon+0x170>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	61fb      	str	r3, [r7, #28]
 8008760:	e00c      	b.n	800877c <tcp_abandon+0xb8>
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	429a      	cmp	r2, r3
 800876a:	d104      	bne.n	8008776 <tcp_abandon+0xb2>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	68da      	ldr	r2, [r3, #12]
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	60da      	str	r2, [r3, #12]
 8008774:	e005      	b.n	8008782 <tcp_abandon+0xbe>
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	61fb      	str	r3, [r7, #28]
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1ef      	bne.n	8008762 <tcp_abandon+0x9e>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	60da      	str	r2, [r3, #12]
 8008788:	e00b      	b.n	80087a2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	8adb      	ldrh	r3, [r3, #22]
 8008792:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008794:	6879      	ldr	r1, [r7, #4]
 8008796:	4828      	ldr	r0, [pc, #160]	; (8008838 <tcp_abandon+0x174>)
 8008798:	f001 fa20 	bl	8009bdc <tcp_pcb_remove>
 800879c:	4b27      	ldr	r3, [pc, #156]	; (800883c <tcp_abandon+0x178>)
 800879e:	2201      	movs	r2, #1
 80087a0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d004      	beq.n	80087b4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 fed6 	bl	8009560 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d004      	beq.n	80087c6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 fecd 	bl	8009560 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d004      	beq.n	80087d8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 fec4 	bl	8009560 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00e      	beq.n	80087fc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80087de:	6879      	ldr	r1, [r7, #4]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	3304      	adds	r3, #4
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	8b12      	ldrh	r2, [r2, #24]
 80087e8:	9202      	str	r2, [sp, #8]
 80087ea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80087ec:	9201      	str	r2, [sp, #4]
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	460b      	mov	r3, r1
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	69b9      	ldr	r1, [r7, #24]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f005 fbc0 	bl	800df7c <tcp_rst>
    }
    last_state = pcb->state;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	7d1b      	ldrb	r3, [r3, #20]
 8008800:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7ff fd34 	bl	8008270 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d004      	beq.n	8008818 <tcp_abandon+0x154>
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	f06f 010c 	mvn.w	r1, #12
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	4798      	blx	r3
  }
}
 8008818:	3728      	adds	r7, #40	; 0x28
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	08012e50 	.word	0x08012e50
 8008824:	08012f94 	.word	0x08012f94
 8008828:	08012e94 	.word	0x08012e94
 800882c:	08012fb0 	.word	0x08012fb0
 8008830:	20008758 	.word	0x20008758
 8008834:	2000874c 	.word	0x2000874c
 8008838:	20008754 	.word	0x20008754
 800883c:	2000875c 	.word	0x2000875c

08008840 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008848:	2101      	movs	r1, #1
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7ff ff3a 	bl	80086c4 <tcp_abandon>
}
 8008850:	bf00      	nop
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b088      	sub	sp, #32
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	4613      	mov	r3, r2
 8008864:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8008866:	2304      	movs	r3, #4
 8008868:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d101      	bne.n	8008874 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8008870:	4b3e      	ldr	r3, [pc, #248]	; (800896c <tcp_bind+0x114>)
 8008872:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d109      	bne.n	800888e <tcp_bind+0x36>
 800887a:	4b3d      	ldr	r3, [pc, #244]	; (8008970 <tcp_bind+0x118>)
 800887c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8008880:	493c      	ldr	r1, [pc, #240]	; (8008974 <tcp_bind+0x11c>)
 8008882:	483d      	ldr	r0, [pc, #244]	; (8008978 <tcp_bind+0x120>)
 8008884:	f008 fb50 	bl	8010f28 <iprintf>
 8008888:	f06f 030f 	mvn.w	r3, #15
 800888c:	e06a      	b.n	8008964 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	7d1b      	ldrb	r3, [r3, #20]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d009      	beq.n	80088aa <tcp_bind+0x52>
 8008896:	4b36      	ldr	r3, [pc, #216]	; (8008970 <tcp_bind+0x118>)
 8008898:	f240 22ab 	movw	r2, #683	; 0x2ab
 800889c:	4937      	ldr	r1, [pc, #220]	; (800897c <tcp_bind+0x124>)
 800889e:	4836      	ldr	r0, [pc, #216]	; (8008978 <tcp_bind+0x120>)
 80088a0:	f008 fb42 	bl	8010f28 <iprintf>
 80088a4:	f06f 0305 	mvn.w	r3, #5
 80088a8:	e05c      	b.n	8008964 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80088aa:	88fb      	ldrh	r3, [r7, #6]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d109      	bne.n	80088c4 <tcp_bind+0x6c>
    port = tcp_new_port();
 80088b0:	f000 f9f0 	bl	8008c94 <tcp_new_port>
 80088b4:	4603      	mov	r3, r0
 80088b6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80088b8:	88fb      	ldrh	r3, [r7, #6]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d135      	bne.n	800892a <tcp_bind+0xd2>
      return ERR_BUF;
 80088be:	f06f 0301 	mvn.w	r3, #1
 80088c2:	e04f      	b.n	8008964 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80088c4:	2300      	movs	r3, #0
 80088c6:	61fb      	str	r3, [r7, #28]
 80088c8:	e02b      	b.n	8008922 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80088ca:	4a2d      	ldr	r2, [pc, #180]	; (8008980 <tcp_bind+0x128>)
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	61bb      	str	r3, [r7, #24]
 80088d6:	e01e      	b.n	8008916 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	8adb      	ldrh	r3, [r3, #22]
 80088dc:	88fa      	ldrh	r2, [r7, #6]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d116      	bne.n	8008910 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80088e2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d010      	beq.n	800890a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00c      	beq.n	800890a <tcp_bind+0xb2>
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d009      	beq.n	800890a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d005      	beq.n	800890a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008906:	429a      	cmp	r2, r3
 8008908:	d102      	bne.n	8008910 <tcp_bind+0xb8>
              return ERR_USE;
 800890a:	f06f 0307 	mvn.w	r3, #7
 800890e:	e029      	b.n	8008964 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	61bb      	str	r3, [r7, #24]
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1dd      	bne.n	80088d8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	3301      	adds	r3, #1
 8008920:	61fb      	str	r3, [r7, #28]
 8008922:	69fa      	ldr	r2, [r7, #28]
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	429a      	cmp	r2, r3
 8008928:	dbcf      	blt.n	80088ca <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00c      	beq.n	800894a <tcp_bind+0xf2>
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d008      	beq.n	800894a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d002      	beq.n	8008944 <tcp_bind+0xec>
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	e000      	b.n	8008946 <tcp_bind+0xee>
 8008944:	2300      	movs	r3, #0
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	88fa      	ldrh	r2, [r7, #6]
 800894e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008950:	4b0c      	ldr	r3, [pc, #48]	; (8008984 <tcp_bind+0x12c>)
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	60da      	str	r2, [r3, #12]
 8008958:	4a0a      	ldr	r2, [pc, #40]	; (8008984 <tcp_bind+0x12c>)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6013      	str	r3, [r2, #0]
 800895e:	f005 fccf 	bl	800e300 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3720      	adds	r7, #32
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	08015328 	.word	0x08015328
 8008970:	08012e50 	.word	0x08012e50
 8008974:	08012fe4 	.word	0x08012fe4
 8008978:	08012e94 	.word	0x08012e94
 800897c:	08012ffc 	.word	0x08012ffc
 8008980:	08015300 	.word	0x08015300
 8008984:	2000874c 	.word	0x2000874c

08008988 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	4613      	mov	r3, r2
 8008994:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d106      	bne.n	80089aa <tcp_accept_null+0x22>
 800899c:	4b07      	ldr	r3, [pc, #28]	; (80089bc <tcp_accept_null+0x34>)
 800899e:	f240 320f 	movw	r2, #783	; 0x30f
 80089a2:	4907      	ldr	r1, [pc, #28]	; (80089c0 <tcp_accept_null+0x38>)
 80089a4:	4807      	ldr	r0, [pc, #28]	; (80089c4 <tcp_accept_null+0x3c>)
 80089a6:	f008 fabf 	bl	8010f28 <iprintf>

  tcp_abort(pcb);
 80089aa:	68b8      	ldr	r0, [r7, #8]
 80089ac:	f7ff ff48 	bl	8008840 <tcp_abort>

  return ERR_ABRT;
 80089b0:	f06f 030c 	mvn.w	r3, #12
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	08012e50 	.word	0x08012e50
 80089c0:	08013024 	.word	0x08013024
 80089c4:	08012e94 	.word	0x08012e94

080089c8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	460b      	mov	r3, r1
 80089d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80089d4:	78fb      	ldrb	r3, [r7, #3]
 80089d6:	2200      	movs	r2, #0
 80089d8:	4619      	mov	r1, r3
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 f806 	bl	80089ec <tcp_listen_with_backlog_and_err>
 80089e0:	4603      	mov	r3, r0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
	...

080089ec <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b088      	sub	sp, #32
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	460b      	mov	r3, r1
 80089f6:	607a      	str	r2, [r7, #4]
 80089f8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80089fa:	2300      	movs	r3, #0
 80089fc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d109      	bne.n	8008a18 <tcp_listen_with_backlog_and_err+0x2c>
 8008a04:	4b47      	ldr	r3, [pc, #284]	; (8008b24 <tcp_listen_with_backlog_and_err+0x138>)
 8008a06:	f240 3259 	movw	r2, #857	; 0x359
 8008a0a:	4947      	ldr	r1, [pc, #284]	; (8008b28 <tcp_listen_with_backlog_and_err+0x13c>)
 8008a0c:	4847      	ldr	r0, [pc, #284]	; (8008b2c <tcp_listen_with_backlog_and_err+0x140>)
 8008a0e:	f008 fa8b 	bl	8010f28 <iprintf>
 8008a12:	23f0      	movs	r3, #240	; 0xf0
 8008a14:	76fb      	strb	r3, [r7, #27]
 8008a16:	e079      	b.n	8008b0c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	7d1b      	ldrb	r3, [r3, #20]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d009      	beq.n	8008a34 <tcp_listen_with_backlog_and_err+0x48>
 8008a20:	4b40      	ldr	r3, [pc, #256]	; (8008b24 <tcp_listen_with_backlog_and_err+0x138>)
 8008a22:	f240 325a 	movw	r2, #858	; 0x35a
 8008a26:	4942      	ldr	r1, [pc, #264]	; (8008b30 <tcp_listen_with_backlog_and_err+0x144>)
 8008a28:	4840      	ldr	r0, [pc, #256]	; (8008b2c <tcp_listen_with_backlog_and_err+0x140>)
 8008a2a:	f008 fa7d 	bl	8010f28 <iprintf>
 8008a2e:	23f1      	movs	r3, #241	; 0xf1
 8008a30:	76fb      	strb	r3, [r7, #27]
 8008a32:	e06b      	b.n	8008b0c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	7d1b      	ldrb	r3, [r3, #20]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d104      	bne.n	8008a46 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8008a40:	23f7      	movs	r3, #247	; 0xf7
 8008a42:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008a44:	e062      	b.n	8008b0c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008a46:	2002      	movs	r0, #2
 8008a48:	f7fe fa8c 	bl	8006f64 <memp_malloc>
 8008a4c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d102      	bne.n	8008a5a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8008a54:	23ff      	movs	r3, #255	; 0xff
 8008a56:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008a58:	e058      	b.n	8008b0c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	691a      	ldr	r2, [r3, #16]
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	8ada      	ldrh	r2, [r3, #22]
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	7d5a      	ldrb	r2, [r3, #21]
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	7a5a      	ldrb	r2, [r3, #9]
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	2200      	movs	r2, #0
 8008a84:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	7ada      	ldrb	r2, [r3, #11]
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	7a9a      	ldrb	r2, [r3, #10]
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	8adb      	ldrh	r3, [r3, #22]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d021      	beq.n	8008aea <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008aa6:	4b23      	ldr	r3, [pc, #140]	; (8008b34 <tcp_listen_with_backlog_and_err+0x148>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d105      	bne.n	8008abc <tcp_listen_with_backlog_and_err+0xd0>
 8008ab0:	4b20      	ldr	r3, [pc, #128]	; (8008b34 <tcp_listen_with_backlog_and_err+0x148>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	4a1f      	ldr	r2, [pc, #124]	; (8008b34 <tcp_listen_with_backlog_and_err+0x148>)
 8008ab8:	6013      	str	r3, [r2, #0]
 8008aba:	e013      	b.n	8008ae4 <tcp_listen_with_backlog_and_err+0xf8>
 8008abc:	4b1d      	ldr	r3, [pc, #116]	; (8008b34 <tcp_listen_with_backlog_and_err+0x148>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	617b      	str	r3, [r7, #20]
 8008ac2:	e00c      	b.n	8008ade <tcp_listen_with_backlog_and_err+0xf2>
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d104      	bne.n	8008ad8 <tcp_listen_with_backlog_and_err+0xec>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	68da      	ldr	r2, [r3, #12]
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	60da      	str	r2, [r3, #12]
 8008ad6:	e005      	b.n	8008ae4 <tcp_listen_with_backlog_and_err+0xf8>
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	617b      	str	r3, [r7, #20]
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1ef      	bne.n	8008ac4 <tcp_listen_with_backlog_and_err+0xd8>
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f7ff fbc0 	bl	8008270 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	4a11      	ldr	r2, [pc, #68]	; (8008b38 <tcp_listen_with_backlog_and_err+0x14c>)
 8008af4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008af6:	4b11      	ldr	r3, [pc, #68]	; (8008b3c <tcp_listen_with_backlog_and_err+0x150>)
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	60da      	str	r2, [r3, #12]
 8008afe:	4a0f      	ldr	r2, [pc, #60]	; (8008b3c <tcp_listen_with_backlog_and_err+0x150>)
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	6013      	str	r3, [r2, #0]
 8008b04:	f005 fbfc 	bl	800e300 <tcp_timer_needed>
  res = ERR_OK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d002      	beq.n	8008b18 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	7efa      	ldrb	r2, [r7, #27]
 8008b16:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8008b18:	69fb      	ldr	r3, [r7, #28]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3720      	adds	r7, #32
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	08012e50 	.word	0x08012e50
 8008b28:	08013044 	.word	0x08013044
 8008b2c:	08012e94 	.word	0x08012e94
 8008b30:	08013074 	.word	0x08013074
 8008b34:	2000874c 	.word	0x2000874c
 8008b38:	08008989 	.word	0x08008989
 8008b3c:	20008750 	.word	0x20008750

08008b40 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d106      	bne.n	8008b5c <tcp_update_rcv_ann_wnd+0x1c>
 8008b4e:	4b25      	ldr	r3, [pc, #148]	; (8008be4 <tcp_update_rcv_ann_wnd+0xa4>)
 8008b50:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008b54:	4924      	ldr	r1, [pc, #144]	; (8008be8 <tcp_update_rcv_ann_wnd+0xa8>)
 8008b56:	4825      	ldr	r0, [pc, #148]	; (8008bec <tcp_update_rcv_ann_wnd+0xac>)
 8008b58:	f008 f9e6 	bl	8010f28 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008b64:	4413      	add	r3, r2
 8008b66:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008b70:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8008b74:	bf28      	it	cs
 8008b76:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8008b7a:	b292      	uxth	r2, r2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	db08      	blt.n	8008b98 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	e020      	b.n	8008bda <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	dd03      	ble.n	8008bae <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008bac:	e014      	b.n	8008bd8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bc0:	d306      	bcc.n	8008bd0 <tcp_update_rcv_ann_wnd+0x90>
 8008bc2:	4b08      	ldr	r3, [pc, #32]	; (8008be4 <tcp_update_rcv_ann_wnd+0xa4>)
 8008bc4:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008bc8:	4909      	ldr	r1, [pc, #36]	; (8008bf0 <tcp_update_rcv_ann_wnd+0xb0>)
 8008bca:	4808      	ldr	r0, [pc, #32]	; (8008bec <tcp_update_rcv_ann_wnd+0xac>)
 8008bcc:	f008 f9ac 	bl	8010f28 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8008bd8:	2300      	movs	r3, #0
  }
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	08012e50 	.word	0x08012e50
 8008be8:	080130ac 	.word	0x080130ac
 8008bec:	08012e94 	.word	0x08012e94
 8008bf0:	080130d0 	.word	0x080130d0

08008bf4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d107      	bne.n	8008c16 <tcp_recved+0x22>
 8008c06:	4b1f      	ldr	r3, [pc, #124]	; (8008c84 <tcp_recved+0x90>)
 8008c08:	f240 32cf 	movw	r2, #975	; 0x3cf
 8008c0c:	491e      	ldr	r1, [pc, #120]	; (8008c88 <tcp_recved+0x94>)
 8008c0e:	481f      	ldr	r0, [pc, #124]	; (8008c8c <tcp_recved+0x98>)
 8008c10:	f008 f98a 	bl	8010f28 <iprintf>
 8008c14:	e032      	b.n	8008c7c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	7d1b      	ldrb	r3, [r3, #20]
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d106      	bne.n	8008c2c <tcp_recved+0x38>
 8008c1e:	4b19      	ldr	r3, [pc, #100]	; (8008c84 <tcp_recved+0x90>)
 8008c20:	f240 32d2 	movw	r2, #978	; 0x3d2
 8008c24:	491a      	ldr	r1, [pc, #104]	; (8008c90 <tcp_recved+0x9c>)
 8008c26:	4819      	ldr	r0, [pc, #100]	; (8008c8c <tcp_recved+0x98>)
 8008c28:	f008 f97e 	bl	8010f28 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008c30:	887b      	ldrh	r3, [r7, #2]
 8008c32:	4413      	add	r3, r2
 8008c34:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008c36:	89fb      	ldrh	r3, [r7, #14]
 8008c38:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008c3c:	d804      	bhi.n	8008c48 <tcp_recved+0x54>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c42:	89fa      	ldrh	r2, [r7, #14]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d204      	bcs.n	8008c52 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008c4e:	851a      	strh	r2, [r3, #40]	; 0x28
 8008c50:	e002      	b.n	8008c58 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	89fa      	ldrh	r2, [r7, #14]
 8008c56:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7ff ff71 	bl	8008b40 <tcp_update_rcv_ann_wnd>
 8008c5e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008c66:	d309      	bcc.n	8008c7c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	8b5b      	ldrh	r3, [r3, #26]
 8008c6c:	f043 0302 	orr.w	r3, r3, #2
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f004 fbcc 	bl	800d414 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	08012e50 	.word	0x08012e50
 8008c88:	080130ec 	.word	0x080130ec
 8008c8c:	08012e94 	.word	0x08012e94
 8008c90:	08013104 	.word	0x08013104

08008c94 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8008c9e:	4b1e      	ldr	r3, [pc, #120]	; (8008d18 <tcp_new_port+0x84>)
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	4b1c      	ldr	r3, [pc, #112]	; (8008d18 <tcp_new_port+0x84>)
 8008ca8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8008caa:	4b1b      	ldr	r3, [pc, #108]	; (8008d18 <tcp_new_port+0x84>)
 8008cac:	881b      	ldrh	r3, [r3, #0]
 8008cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d103      	bne.n	8008cbe <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008cb6:	4b18      	ldr	r3, [pc, #96]	; (8008d18 <tcp_new_port+0x84>)
 8008cb8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8008cbc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	71fb      	strb	r3, [r7, #7]
 8008cc2:	e01e      	b.n	8008d02 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008cc4:	79fb      	ldrb	r3, [r7, #7]
 8008cc6:	4a15      	ldr	r2, [pc, #84]	; (8008d1c <tcp_new_port+0x88>)
 8008cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	603b      	str	r3, [r7, #0]
 8008cd0:	e011      	b.n	8008cf6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	8ada      	ldrh	r2, [r3, #22]
 8008cd6:	4b10      	ldr	r3, [pc, #64]	; (8008d18 <tcp_new_port+0x84>)
 8008cd8:	881b      	ldrh	r3, [r3, #0]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d108      	bne.n	8008cf0 <tcp_new_port+0x5c>
        n++;
 8008cde:	88bb      	ldrh	r3, [r7, #4]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008ce4:	88bb      	ldrh	r3, [r7, #4]
 8008ce6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cea:	d3d8      	bcc.n	8008c9e <tcp_new_port+0xa>
          return 0;
 8008cec:	2300      	movs	r3, #0
 8008cee:	e00d      	b.n	8008d0c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	603b      	str	r3, [r7, #0]
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1ea      	bne.n	8008cd2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008cfc:	79fb      	ldrb	r3, [r7, #7]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	71fb      	strb	r3, [r7, #7]
 8008d02:	79fb      	ldrb	r3, [r7, #7]
 8008d04:	2b03      	cmp	r3, #3
 8008d06:	d9dd      	bls.n	8008cc4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008d08:	4b03      	ldr	r3, [pc, #12]	; (8008d18 <tcp_new_port+0x84>)
 8008d0a:	881b      	ldrh	r3, [r3, #0]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr
 8008d18:	20000070 	.word	0x20000070
 8008d1c:	08015300 	.word	0x08015300

08008d20 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008d20:	b5b0      	push	{r4, r5, r7, lr}
 8008d22:	b090      	sub	sp, #64	; 0x40
 8008d24:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8008d2c:	4b94      	ldr	r3, [pc, #592]	; (8008f80 <tcp_slowtmr+0x260>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3301      	adds	r3, #1
 8008d32:	4a93      	ldr	r2, [pc, #588]	; (8008f80 <tcp_slowtmr+0x260>)
 8008d34:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008d36:	4b93      	ldr	r3, [pc, #588]	; (8008f84 <tcp_slowtmr+0x264>)
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	b2da      	uxtb	r2, r3
 8008d3e:	4b91      	ldr	r3, [pc, #580]	; (8008f84 <tcp_slowtmr+0x264>)
 8008d40:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008d42:	2300      	movs	r3, #0
 8008d44:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8008d46:	4b90      	ldr	r3, [pc, #576]	; (8008f88 <tcp_slowtmr+0x268>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8008d4c:	e29f      	b.n	800928e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d50:	7d1b      	ldrb	r3, [r3, #20]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d106      	bne.n	8008d64 <tcp_slowtmr+0x44>
 8008d56:	4b8d      	ldr	r3, [pc, #564]	; (8008f8c <tcp_slowtmr+0x26c>)
 8008d58:	f240 42be 	movw	r2, #1214	; 0x4be
 8008d5c:	498c      	ldr	r1, [pc, #560]	; (8008f90 <tcp_slowtmr+0x270>)
 8008d5e:	488d      	ldr	r0, [pc, #564]	; (8008f94 <tcp_slowtmr+0x274>)
 8008d60:	f008 f8e2 	bl	8010f28 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d66:	7d1b      	ldrb	r3, [r3, #20]
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d106      	bne.n	8008d7a <tcp_slowtmr+0x5a>
 8008d6c:	4b87      	ldr	r3, [pc, #540]	; (8008f8c <tcp_slowtmr+0x26c>)
 8008d6e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8008d72:	4989      	ldr	r1, [pc, #548]	; (8008f98 <tcp_slowtmr+0x278>)
 8008d74:	4887      	ldr	r0, [pc, #540]	; (8008f94 <tcp_slowtmr+0x274>)
 8008d76:	f008 f8d7 	bl	8010f28 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7c:	7d1b      	ldrb	r3, [r3, #20]
 8008d7e:	2b0a      	cmp	r3, #10
 8008d80:	d106      	bne.n	8008d90 <tcp_slowtmr+0x70>
 8008d82:	4b82      	ldr	r3, [pc, #520]	; (8008f8c <tcp_slowtmr+0x26c>)
 8008d84:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8008d88:	4984      	ldr	r1, [pc, #528]	; (8008f9c <tcp_slowtmr+0x27c>)
 8008d8a:	4882      	ldr	r0, [pc, #520]	; (8008f94 <tcp_slowtmr+0x274>)
 8008d8c:	f008 f8cc 	bl	8010f28 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d92:	7f9a      	ldrb	r2, [r3, #30]
 8008d94:	4b7b      	ldr	r3, [pc, #492]	; (8008f84 <tcp_slowtmr+0x264>)
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d105      	bne.n	8008da8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8008d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8008da6:	e272      	b.n	800928e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008da8:	4b76      	ldr	r3, [pc, #472]	; (8008f84 <tcp_slowtmr+0x264>)
 8008daa:	781a      	ldrb	r2, [r3, #0]
 8008dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dae:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8008db0:	2300      	movs	r3, #0
 8008db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbe:	7d1b      	ldrb	r3, [r3, #20]
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d10a      	bne.n	8008dda <tcp_slowtmr+0xba>
 8008dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008dca:	2b05      	cmp	r3, #5
 8008dcc:	d905      	bls.n	8008dda <tcp_slowtmr+0xba>
      ++pcb_remove;
 8008dce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008dd8:	e11e      	b.n	8009018 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ddc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008de0:	2b0b      	cmp	r3, #11
 8008de2:	d905      	bls.n	8008df0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8008de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008de8:	3301      	adds	r3, #1
 8008dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008dee:	e113      	b.n	8009018 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8008df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d075      	beq.n	8008ee6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d006      	beq.n	8008e10 <tcp_slowtmr+0xf0>
 8008e02:	4b62      	ldr	r3, [pc, #392]	; (8008f8c <tcp_slowtmr+0x26c>)
 8008e04:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008e08:	4965      	ldr	r1, [pc, #404]	; (8008fa0 <tcp_slowtmr+0x280>)
 8008e0a:	4862      	ldr	r0, [pc, #392]	; (8008f94 <tcp_slowtmr+0x274>)
 8008e0c:	f008 f88c 	bl	8010f28 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d106      	bne.n	8008e26 <tcp_slowtmr+0x106>
 8008e18:	4b5c      	ldr	r3, [pc, #368]	; (8008f8c <tcp_slowtmr+0x26c>)
 8008e1a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008e1e:	4961      	ldr	r1, [pc, #388]	; (8008fa4 <tcp_slowtmr+0x284>)
 8008e20:	485c      	ldr	r0, [pc, #368]	; (8008f94 <tcp_slowtmr+0x274>)
 8008e22:	f008 f881 	bl	8010f28 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e28:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8008e2c:	2b0b      	cmp	r3, #11
 8008e2e:	d905      	bls.n	8008e3c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8008e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e34:	3301      	adds	r3, #1
 8008e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e3a:	e0ed      	b.n	8009018 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008e42:	3b01      	subs	r3, #1
 8008e44:	4a58      	ldr	r2, [pc, #352]	; (8008fa8 <tcp_slowtmr+0x288>)
 8008e46:	5cd3      	ldrb	r3, [r2, r3]
 8008e48:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8008e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008e50:	7c7a      	ldrb	r2, [r7, #17]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d907      	bls.n	8008e66 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8008e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e58:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	b2da      	uxtb	r2, r3
 8008e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e62:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8008e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008e6c:	7c7a      	ldrb	r2, [r7, #17]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	f200 80d2 	bhi.w	8009018 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8008e74:	2301      	movs	r3, #1
 8008e76:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8008e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d108      	bne.n	8008e94 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008e82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e84:	f005 f96e 	bl	800e164 <tcp_zero_window_probe>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d014      	beq.n	8008eb8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8008e8e:	2300      	movs	r3, #0
 8008e90:	623b      	str	r3, [r7, #32]
 8008e92:	e011      	b.n	8008eb8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e9e:	f004 f833 	bl	800cf08 <tcp_split_unsent_seg>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d107      	bne.n	8008eb8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8008ea8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008eaa:	f004 fab3 	bl	800d414 <tcp_output>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d101      	bne.n	8008eb8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8008eb8:	6a3b      	ldr	r3, [r7, #32]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f000 80ac 	beq.w	8009018 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8008ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008ece:	2b06      	cmp	r3, #6
 8008ed0:	f200 80a2 	bhi.w	8009018 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8008ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008eda:	3301      	adds	r3, #1
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8008ee4:	e098      	b.n	8009018 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	db0f      	blt.n	8008f10 <tcp_slowtmr+0x1f0>
 8008ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008ef6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d008      	beq.n	8008f10 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8008efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	3301      	adds	r3, #1
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	b21a      	sxth	r2, r3
 8008f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8008f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f12:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f18:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	db7b      	blt.n	8009018 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008f20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f22:	f004 fd69 	bl	800d9f8 <tcp_rexmit_rto_prepare>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d007      	beq.n	8008f3c <tcp_slowtmr+0x21c>
 8008f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d171      	bne.n	8009018 <tcp_slowtmr+0x2f8>
 8008f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d06d      	beq.n	8009018 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3e:	7d1b      	ldrb	r3, [r3, #20]
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d03a      	beq.n	8008fba <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f4a:	2b0c      	cmp	r3, #12
 8008f4c:	bf28      	it	cs
 8008f4e:	230c      	movcs	r3, #12
 8008f50:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f54:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008f58:	10db      	asrs	r3, r3, #3
 8008f5a:	b21b      	sxth	r3, r3
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f60:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008f64:	4413      	add	r3, r2
 8008f66:	7efa      	ldrb	r2, [r7, #27]
 8008f68:	4910      	ldr	r1, [pc, #64]	; (8008fac <tcp_slowtmr+0x28c>)
 8008f6a:	5c8a      	ldrb	r2, [r1, r2]
 8008f6c:	4093      	lsls	r3, r2
 8008f6e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008f76:	4293      	cmp	r3, r2
 8008f78:	dc1a      	bgt.n	8008fb0 <tcp_slowtmr+0x290>
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	b21a      	sxth	r2, r3
 8008f7e:	e019      	b.n	8008fb4 <tcp_slowtmr+0x294>
 8008f80:	20008748 	.word	0x20008748
 8008f84:	2000875e 	.word	0x2000875e
 8008f88:	20008754 	.word	0x20008754
 8008f8c:	08012e50 	.word	0x08012e50
 8008f90:	08013194 	.word	0x08013194
 8008f94:	08012e94 	.word	0x08012e94
 8008f98:	080131c0 	.word	0x080131c0
 8008f9c:	080131ec 	.word	0x080131ec
 8008fa0:	0801321c 	.word	0x0801321c
 8008fa4:	08013250 	.word	0x08013250
 8008fa8:	080152f8 	.word	0x080152f8
 8008fac:	080152e8 	.word	0x080152e8
 8008fb0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	bf28      	it	cs
 8008fd0:	4613      	movcs	r3, r2
 8008fd2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008fd4:	8a7b      	ldrh	r3, [r7, #18]
 8008fd6:	085b      	lsrs	r3, r3, #1
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fdc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008fea:	005b      	lsls	r3, r3, #1
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d206      	bcs.n	8009000 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ff6:	005b      	lsls	r3, r3, #1
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ffc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8009000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009002:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009006:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800900a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900c:	2200      	movs	r2, #0
 800900e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8009012:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009014:	f004 fd60 	bl	800dad8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901a:	7d1b      	ldrb	r3, [r3, #20]
 800901c:	2b06      	cmp	r3, #6
 800901e:	d111      	bne.n	8009044 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8009020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009022:	8b5b      	ldrh	r3, [r3, #26]
 8009024:	f003 0310 	and.w	r3, r3, #16
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00b      	beq.n	8009044 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800902c:	4b9d      	ldr	r3, [pc, #628]	; (80092a4 <tcp_slowtmr+0x584>)
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009032:	6a1b      	ldr	r3, [r3, #32]
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	2b28      	cmp	r3, #40	; 0x28
 8009038:	d904      	bls.n	8009044 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800903a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800903e:	3301      	adds	r3, #1
 8009040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009046:	7a5b      	ldrb	r3, [r3, #9]
 8009048:	f003 0308 	and.w	r3, r3, #8
 800904c:	2b00      	cmp	r3, #0
 800904e:	d04c      	beq.n	80090ea <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8009050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009052:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009054:	2b04      	cmp	r3, #4
 8009056:	d003      	beq.n	8009060 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8009058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800905c:	2b07      	cmp	r3, #7
 800905e:	d144      	bne.n	80090ea <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009060:	4b90      	ldr	r3, [pc, #576]	; (80092a4 <tcp_slowtmr+0x584>)
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009066:	6a1b      	ldr	r3, [r3, #32]
 8009068:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800906a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009070:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8009074:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8009078:	498b      	ldr	r1, [pc, #556]	; (80092a8 <tcp_slowtmr+0x588>)
 800907a:	fba1 1303 	umull	r1, r3, r1, r3
 800907e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009080:	429a      	cmp	r2, r3
 8009082:	d90a      	bls.n	800909a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009088:	3301      	adds	r3, #1
 800908a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800908e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009092:	3301      	adds	r3, #1
 8009094:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009098:	e027      	b.n	80090ea <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800909a:	4b82      	ldr	r3, [pc, #520]	; (80092a4 <tcp_slowtmr+0x584>)
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a0:	6a1b      	ldr	r3, [r3, #32]
 80090a2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80090a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80090aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ac:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80090b0:	4618      	mov	r0, r3
 80090b2:	4b7e      	ldr	r3, [pc, #504]	; (80092ac <tcp_slowtmr+0x58c>)
 80090b4:	fb00 f303 	mul.w	r3, r0, r3
 80090b8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80090ba:	497b      	ldr	r1, [pc, #492]	; (80092a8 <tcp_slowtmr+0x588>)
 80090bc:	fba1 1303 	umull	r1, r3, r1, r3
 80090c0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d911      	bls.n	80090ea <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80090c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090c8:	f005 f80c 	bl	800e0e4 <tcp_keepalive>
 80090cc:	4603      	mov	r3, r0
 80090ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80090d2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d107      	bne.n	80090ea <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80090da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090dc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80090e0:	3301      	adds	r3, #1
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80090ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d011      	beq.n	8009116 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80090f2:	4b6c      	ldr	r3, [pc, #432]	; (80092a4 <tcp_slowtmr+0x584>)
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f8:	6a1b      	ldr	r3, [r3, #32]
 80090fa:	1ad2      	subs	r2, r2, r3
 80090fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009102:	4619      	mov	r1, r3
 8009104:	460b      	mov	r3, r1
 8009106:	005b      	lsls	r3, r3, #1
 8009108:	440b      	add	r3, r1
 800910a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800910c:	429a      	cmp	r2, r3
 800910e:	d302      	bcc.n	8009116 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8009110:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009112:	f000 fec7 	bl	8009ea4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8009116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009118:	7d1b      	ldrb	r3, [r3, #20]
 800911a:	2b03      	cmp	r3, #3
 800911c:	d10b      	bne.n	8009136 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800911e:	4b61      	ldr	r3, [pc, #388]	; (80092a4 <tcp_slowtmr+0x584>)
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009124:	6a1b      	ldr	r3, [r3, #32]
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	2b28      	cmp	r3, #40	; 0x28
 800912a:	d904      	bls.n	8009136 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800912c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009130:	3301      	adds	r3, #1
 8009132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009138:	7d1b      	ldrb	r3, [r3, #20]
 800913a:	2b09      	cmp	r3, #9
 800913c:	d10b      	bne.n	8009156 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800913e:	4b59      	ldr	r3, [pc, #356]	; (80092a4 <tcp_slowtmr+0x584>)
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	2bf0      	cmp	r3, #240	; 0xf0
 800914a:	d904      	bls.n	8009156 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800914c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009150:	3301      	adds	r3, #1
 8009152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009156:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800915a:	2b00      	cmp	r3, #0
 800915c:	d060      	beq.n	8009220 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800915e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009164:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8009166:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009168:	f000 fce8 	bl	8009b3c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800916c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916e:	2b00      	cmp	r3, #0
 8009170:	d010      	beq.n	8009194 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009172:	4b4f      	ldr	r3, [pc, #316]	; (80092b0 <tcp_slowtmr+0x590>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009178:	429a      	cmp	r2, r3
 800917a:	d106      	bne.n	800918a <tcp_slowtmr+0x46a>
 800917c:	4b4d      	ldr	r3, [pc, #308]	; (80092b4 <tcp_slowtmr+0x594>)
 800917e:	f240 526d 	movw	r2, #1389	; 0x56d
 8009182:	494d      	ldr	r1, [pc, #308]	; (80092b8 <tcp_slowtmr+0x598>)
 8009184:	484d      	ldr	r0, [pc, #308]	; (80092bc <tcp_slowtmr+0x59c>)
 8009186:	f007 fecf 	bl	8010f28 <iprintf>
        prev->next = pcb->next;
 800918a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918c:	68da      	ldr	r2, [r3, #12]
 800918e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009190:	60da      	str	r2, [r3, #12]
 8009192:	e00f      	b.n	80091b4 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009194:	4b46      	ldr	r3, [pc, #280]	; (80092b0 <tcp_slowtmr+0x590>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800919a:	429a      	cmp	r2, r3
 800919c:	d006      	beq.n	80091ac <tcp_slowtmr+0x48c>
 800919e:	4b45      	ldr	r3, [pc, #276]	; (80092b4 <tcp_slowtmr+0x594>)
 80091a0:	f240 5271 	movw	r2, #1393	; 0x571
 80091a4:	4946      	ldr	r1, [pc, #280]	; (80092c0 <tcp_slowtmr+0x5a0>)
 80091a6:	4845      	ldr	r0, [pc, #276]	; (80092bc <tcp_slowtmr+0x59c>)
 80091a8:	f007 febe 	bl	8010f28 <iprintf>
        tcp_active_pcbs = pcb->next;
 80091ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	4a3f      	ldr	r2, [pc, #252]	; (80092b0 <tcp_slowtmr+0x590>)
 80091b2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80091b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d013      	beq.n	80091e4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80091bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091be:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80091c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80091c4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80091c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c8:	3304      	adds	r3, #4
 80091ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091cc:	8ad2      	ldrh	r2, [r2, #22]
 80091ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091d0:	8b09      	ldrh	r1, [r1, #24]
 80091d2:	9102      	str	r1, [sp, #8]
 80091d4:	9201      	str	r2, [sp, #4]
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	462b      	mov	r3, r5
 80091da:	4622      	mov	r2, r4
 80091dc:	4601      	mov	r1, r0
 80091de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091e0:	f004 fecc 	bl	800df7c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80091e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80091ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ec:	7d1b      	ldrb	r3, [r3, #20]
 80091ee:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80091f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80091f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80091fa:	6838      	ldr	r0, [r7, #0]
 80091fc:	f7ff f838 	bl	8008270 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8009200:	4b30      	ldr	r3, [pc, #192]	; (80092c4 <tcp_slowtmr+0x5a4>)
 8009202:	2200      	movs	r2, #0
 8009204:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d004      	beq.n	8009216 <tcp_slowtmr+0x4f6>
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f06f 010c 	mvn.w	r1, #12
 8009212:	68b8      	ldr	r0, [r7, #8]
 8009214:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009216:	4b2b      	ldr	r3, [pc, #172]	; (80092c4 <tcp_slowtmr+0x5a4>)
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d037      	beq.n	800928e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800921e:	e590      	b.n	8008d42 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009222:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800922a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922c:	7f1b      	ldrb	r3, [r3, #28]
 800922e:	3301      	adds	r3, #1
 8009230:	b2da      	uxtb	r2, r3
 8009232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009234:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009238:	7f1a      	ldrb	r2, [r3, #28]
 800923a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923c:	7f5b      	ldrb	r3, [r3, #29]
 800923e:	429a      	cmp	r2, r3
 8009240:	d325      	bcc.n	800928e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8009242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009244:	2200      	movs	r2, #0
 8009246:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8009248:	4b1e      	ldr	r3, [pc, #120]	; (80092c4 <tcp_slowtmr+0x5a4>)
 800924a:	2200      	movs	r2, #0
 800924c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00b      	beq.n	8009270 <tcp_slowtmr+0x550>
 8009258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800925e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009260:	6912      	ldr	r2, [r2, #16]
 8009262:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009264:	4610      	mov	r0, r2
 8009266:	4798      	blx	r3
 8009268:	4603      	mov	r3, r0
 800926a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800926e:	e002      	b.n	8009276 <tcp_slowtmr+0x556>
 8009270:	2300      	movs	r3, #0
 8009272:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8009276:	4b13      	ldr	r3, [pc, #76]	; (80092c4 <tcp_slowtmr+0x5a4>)
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d000      	beq.n	8009280 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800927e:	e560      	b.n	8008d42 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009280:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009284:	2b00      	cmp	r3, #0
 8009286:	d102      	bne.n	800928e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8009288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800928a:	f004 f8c3 	bl	800d414 <tcp_output>
  while (pcb != NULL) {
 800928e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009290:	2b00      	cmp	r3, #0
 8009292:	f47f ad5c 	bne.w	8008d4e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009296:	2300      	movs	r3, #0
 8009298:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800929a:	4b0b      	ldr	r3, [pc, #44]	; (80092c8 <tcp_slowtmr+0x5a8>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80092a0:	e067      	b.n	8009372 <tcp_slowtmr+0x652>
 80092a2:	bf00      	nop
 80092a4:	20008748 	.word	0x20008748
 80092a8:	10624dd3 	.word	0x10624dd3
 80092ac:	000124f8 	.word	0x000124f8
 80092b0:	20008754 	.word	0x20008754
 80092b4:	08012e50 	.word	0x08012e50
 80092b8:	08013288 	.word	0x08013288
 80092bc:	08012e94 	.word	0x08012e94
 80092c0:	080132b4 	.word	0x080132b4
 80092c4:	2000875c 	.word	0x2000875c
 80092c8:	20008758 	.word	0x20008758
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80092cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ce:	7d1b      	ldrb	r3, [r3, #20]
 80092d0:	2b0a      	cmp	r3, #10
 80092d2:	d006      	beq.n	80092e2 <tcp_slowtmr+0x5c2>
 80092d4:	4b2b      	ldr	r3, [pc, #172]	; (8009384 <tcp_slowtmr+0x664>)
 80092d6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80092da:	492b      	ldr	r1, [pc, #172]	; (8009388 <tcp_slowtmr+0x668>)
 80092dc:	482b      	ldr	r0, [pc, #172]	; (800938c <tcp_slowtmr+0x66c>)
 80092de:	f007 fe23 	bl	8010f28 <iprintf>
    pcb_remove = 0;
 80092e2:	2300      	movs	r3, #0
 80092e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80092e8:	4b29      	ldr	r3, [pc, #164]	; (8009390 <tcp_slowtmr+0x670>)
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ee:	6a1b      	ldr	r3, [r3, #32]
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	2bf0      	cmp	r3, #240	; 0xf0
 80092f4:	d904      	bls.n	8009300 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80092f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092fa:	3301      	adds	r3, #1
 80092fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009304:	2b00      	cmp	r3, #0
 8009306:	d02f      	beq.n	8009368 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009308:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800930a:	f000 fc17 	bl	8009b3c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800930e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009310:	2b00      	cmp	r3, #0
 8009312:	d010      	beq.n	8009336 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009314:	4b1f      	ldr	r3, [pc, #124]	; (8009394 <tcp_slowtmr+0x674>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800931a:	429a      	cmp	r2, r3
 800931c:	d106      	bne.n	800932c <tcp_slowtmr+0x60c>
 800931e:	4b19      	ldr	r3, [pc, #100]	; (8009384 <tcp_slowtmr+0x664>)
 8009320:	f240 52af 	movw	r2, #1455	; 0x5af
 8009324:	491c      	ldr	r1, [pc, #112]	; (8009398 <tcp_slowtmr+0x678>)
 8009326:	4819      	ldr	r0, [pc, #100]	; (800938c <tcp_slowtmr+0x66c>)
 8009328:	f007 fdfe 	bl	8010f28 <iprintf>
        prev->next = pcb->next;
 800932c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932e:	68da      	ldr	r2, [r3, #12]
 8009330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009332:	60da      	str	r2, [r3, #12]
 8009334:	e00f      	b.n	8009356 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009336:	4b17      	ldr	r3, [pc, #92]	; (8009394 <tcp_slowtmr+0x674>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800933c:	429a      	cmp	r2, r3
 800933e:	d006      	beq.n	800934e <tcp_slowtmr+0x62e>
 8009340:	4b10      	ldr	r3, [pc, #64]	; (8009384 <tcp_slowtmr+0x664>)
 8009342:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009346:	4915      	ldr	r1, [pc, #84]	; (800939c <tcp_slowtmr+0x67c>)
 8009348:	4810      	ldr	r0, [pc, #64]	; (800938c <tcp_slowtmr+0x66c>)
 800934a:	f007 fded 	bl	8010f28 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800934e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	4a10      	ldr	r2, [pc, #64]	; (8009394 <tcp_slowtmr+0x674>)
 8009354:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009358:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800935a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009360:	69f8      	ldr	r0, [r7, #28]
 8009362:	f7fe ff85 	bl	8008270 <tcp_free>
 8009366:	e004      	b.n	8009372 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8009368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800936c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1a9      	bne.n	80092cc <tcp_slowtmr+0x5ac>
    }
  }
}
 8009378:	bf00      	nop
 800937a:	bf00      	nop
 800937c:	3730      	adds	r7, #48	; 0x30
 800937e:	46bd      	mov	sp, r7
 8009380:	bdb0      	pop	{r4, r5, r7, pc}
 8009382:	bf00      	nop
 8009384:	08012e50 	.word	0x08012e50
 8009388:	080132e0 	.word	0x080132e0
 800938c:	08012e94 	.word	0x08012e94
 8009390:	20008748 	.word	0x20008748
 8009394:	20008758 	.word	0x20008758
 8009398:	08013310 	.word	0x08013310
 800939c:	08013338 	.word	0x08013338

080093a0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80093a6:	4b2d      	ldr	r3, [pc, #180]	; (800945c <tcp_fasttmr+0xbc>)
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	3301      	adds	r3, #1
 80093ac:	b2da      	uxtb	r2, r3
 80093ae:	4b2b      	ldr	r3, [pc, #172]	; (800945c <tcp_fasttmr+0xbc>)
 80093b0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80093b2:	4b2b      	ldr	r3, [pc, #172]	; (8009460 <tcp_fasttmr+0xc0>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80093b8:	e048      	b.n	800944c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	7f9a      	ldrb	r2, [r3, #30]
 80093be:	4b27      	ldr	r3, [pc, #156]	; (800945c <tcp_fasttmr+0xbc>)
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d03f      	beq.n	8009446 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80093c6:	4b25      	ldr	r3, [pc, #148]	; (800945c <tcp_fasttmr+0xbc>)
 80093c8:	781a      	ldrb	r2, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	8b5b      	ldrh	r3, [r3, #26]
 80093d2:	f003 0301 	and.w	r3, r3, #1
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d010      	beq.n	80093fc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	8b5b      	ldrh	r3, [r3, #26]
 80093de:	f043 0302 	orr.w	r3, r3, #2
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f004 f813 	bl	800d414 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	8b5b      	ldrh	r3, [r3, #26]
 80093f2:	f023 0303 	bic.w	r3, r3, #3
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	8b5b      	ldrh	r3, [r3, #26]
 8009400:	f003 0308 	and.w	r3, r3, #8
 8009404:	2b00      	cmp	r3, #0
 8009406:	d009      	beq.n	800941c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	8b5b      	ldrh	r3, [r3, #26]
 800940c:	f023 0308 	bic.w	r3, r3, #8
 8009410:	b29a      	uxth	r2, r3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f7ff f8be 	bl	8008598 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00a      	beq.n	8009440 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800942a:	4b0e      	ldr	r3, [pc, #56]	; (8009464 <tcp_fasttmr+0xc4>)
 800942c:	2200      	movs	r2, #0
 800942e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f819 	bl	8009468 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009436:	4b0b      	ldr	r3, [pc, #44]	; (8009464 <tcp_fasttmr+0xc4>)
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d000      	beq.n	8009440 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800943e:	e7b8      	b.n	80093b2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	607b      	str	r3, [r7, #4]
 8009444:	e002      	b.n	800944c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1b3      	bne.n	80093ba <tcp_fasttmr+0x1a>
    }
  }
}
 8009452:	bf00      	nop
 8009454:	bf00      	nop
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	2000875e 	.word	0x2000875e
 8009460:	20008754 	.word	0x20008754
 8009464:	2000875c 	.word	0x2000875c

08009468 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009468:	b590      	push	{r4, r7, lr}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d109      	bne.n	800948a <tcp_process_refused_data+0x22>
 8009476:	4b37      	ldr	r3, [pc, #220]	; (8009554 <tcp_process_refused_data+0xec>)
 8009478:	f240 6209 	movw	r2, #1545	; 0x609
 800947c:	4936      	ldr	r1, [pc, #216]	; (8009558 <tcp_process_refused_data+0xf0>)
 800947e:	4837      	ldr	r0, [pc, #220]	; (800955c <tcp_process_refused_data+0xf4>)
 8009480:	f007 fd52 	bl	8010f28 <iprintf>
 8009484:	f06f 030f 	mvn.w	r3, #15
 8009488:	e060      	b.n	800954c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800948e:	7b5b      	ldrb	r3, [r3, #13]
 8009490:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009496:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00b      	beq.n	80094c0 <tcp_process_refused_data+0x58>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6918      	ldr	r0, [r3, #16]
 80094b2:	2300      	movs	r3, #0
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	6879      	ldr	r1, [r7, #4]
 80094b8:	47a0      	blx	r4
 80094ba:	4603      	mov	r3, r0
 80094bc:	73fb      	strb	r3, [r7, #15]
 80094be:	e007      	b.n	80094d0 <tcp_process_refused_data+0x68>
 80094c0:	2300      	movs	r3, #0
 80094c2:	68ba      	ldr	r2, [r7, #8]
 80094c4:	6879      	ldr	r1, [r7, #4]
 80094c6:	2000      	movs	r0, #0
 80094c8:	f000 f8c2 	bl	8009650 <tcp_recv_null>
 80094cc:	4603      	mov	r3, r0
 80094ce:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80094d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d12a      	bne.n	800952e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80094d8:	7bbb      	ldrb	r3, [r7, #14]
 80094da:	f003 0320 	and.w	r3, r3, #32
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d033      	beq.n	800954a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094e6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80094ea:	d005      	beq.n	80094f8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094f0:	3301      	adds	r3, #1
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00b      	beq.n	800951a <tcp_process_refused_data+0xb2>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6918      	ldr	r0, [r3, #16]
 800950c:	2300      	movs	r3, #0
 800950e:	2200      	movs	r2, #0
 8009510:	6879      	ldr	r1, [r7, #4]
 8009512:	47a0      	blx	r4
 8009514:	4603      	mov	r3, r0
 8009516:	73fb      	strb	r3, [r7, #15]
 8009518:	e001      	b.n	800951e <tcp_process_refused_data+0xb6>
 800951a:	2300      	movs	r3, #0
 800951c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800951e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009522:	f113 0f0d 	cmn.w	r3, #13
 8009526:	d110      	bne.n	800954a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009528:	f06f 030c 	mvn.w	r3, #12
 800952c:	e00e      	b.n	800954c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800952e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009532:	f113 0f0d 	cmn.w	r3, #13
 8009536:	d102      	bne.n	800953e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009538:	f06f 030c 	mvn.w	r3, #12
 800953c:	e006      	b.n	800954c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009544:	f06f 0304 	mvn.w	r3, #4
 8009548:	e000      	b.n	800954c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3714      	adds	r7, #20
 8009550:	46bd      	mov	sp, r7
 8009552:	bd90      	pop	{r4, r7, pc}
 8009554:	08012e50 	.word	0x08012e50
 8009558:	08013360 	.word	0x08013360
 800955c:	08012e94 	.word	0x08012e94

08009560 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009568:	e007      	b.n	800957a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 f80a 	bl	800958a <tcp_seg_free>
    seg = next;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1f4      	bne.n	800956a <tcp_segs_free+0xa>
  }
}
 8009580:	bf00      	nop
 8009582:	bf00      	nop
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b082      	sub	sp, #8
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d00c      	beq.n	80095b2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d004      	beq.n	80095aa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7fe fbc3 	bl	8007d30 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80095aa:	6879      	ldr	r1, [r7, #4]
 80095ac:	2003      	movs	r0, #3
 80095ae:	f7fd fd49 	bl	8007044 <memp_free>
  }
}
 80095b2:	bf00      	nop
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
	...

080095bc <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	460b      	mov	r3, r1
 80095c6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d107      	bne.n	80095de <tcp_setprio+0x22>
 80095ce:	4b07      	ldr	r3, [pc, #28]	; (80095ec <tcp_setprio+0x30>)
 80095d0:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 80095d4:	4906      	ldr	r1, [pc, #24]	; (80095f0 <tcp_setprio+0x34>)
 80095d6:	4807      	ldr	r0, [pc, #28]	; (80095f4 <tcp_setprio+0x38>)
 80095d8:	f007 fca6 	bl	8010f28 <iprintf>
 80095dc:	e002      	b.n	80095e4 <tcp_setprio+0x28>

  pcb->prio = prio;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	78fa      	ldrb	r2, [r7, #3]
 80095e2:	755a      	strb	r2, [r3, #21]
}
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	08012e50 	.word	0x08012e50
 80095f0:	08013388 	.word	0x08013388
 80095f4:	08012e94 	.word	0x08012e94

080095f8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d106      	bne.n	8009614 <tcp_seg_copy+0x1c>
 8009606:	4b0f      	ldr	r3, [pc, #60]	; (8009644 <tcp_seg_copy+0x4c>)
 8009608:	f240 6282 	movw	r2, #1666	; 0x682
 800960c:	490e      	ldr	r1, [pc, #56]	; (8009648 <tcp_seg_copy+0x50>)
 800960e:	480f      	ldr	r0, [pc, #60]	; (800964c <tcp_seg_copy+0x54>)
 8009610:	f007 fc8a 	bl	8010f28 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009614:	2003      	movs	r0, #3
 8009616:	f7fd fca5 	bl	8006f64 <memp_malloc>
 800961a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d101      	bne.n	8009626 <tcp_seg_copy+0x2e>
    return NULL;
 8009622:	2300      	movs	r3, #0
 8009624:	e00a      	b.n	800963c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009626:	2210      	movs	r2, #16
 8009628:	6879      	ldr	r1, [r7, #4]
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f007 fc66 	bl	8010efc <memcpy>
  pbuf_ref(cseg->p);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	4618      	mov	r0, r3
 8009636:	f7fe fc1b 	bl	8007e70 <pbuf_ref>
  return cseg;
 800963a:	68fb      	ldr	r3, [r7, #12]
}
 800963c:	4618      	mov	r0, r3
 800963e:	3710      	adds	r7, #16
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	08012e50 	.word	0x08012e50
 8009648:	080133a4 	.word	0x080133a4
 800964c:	08012e94 	.word	0x08012e94

08009650 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	607a      	str	r2, [r7, #4]
 800965c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d109      	bne.n	8009678 <tcp_recv_null+0x28>
 8009664:	4b12      	ldr	r3, [pc, #72]	; (80096b0 <tcp_recv_null+0x60>)
 8009666:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800966a:	4912      	ldr	r1, [pc, #72]	; (80096b4 <tcp_recv_null+0x64>)
 800966c:	4812      	ldr	r0, [pc, #72]	; (80096b8 <tcp_recv_null+0x68>)
 800966e:	f007 fc5b 	bl	8010f28 <iprintf>
 8009672:	f06f 030f 	mvn.w	r3, #15
 8009676:	e016      	b.n	80096a6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d009      	beq.n	8009692 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	891b      	ldrh	r3, [r3, #8]
 8009682:	4619      	mov	r1, r3
 8009684:	68b8      	ldr	r0, [r7, #8]
 8009686:	f7ff fab5 	bl	8008bf4 <tcp_recved>
    pbuf_free(p);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f7fe fb50 	bl	8007d30 <pbuf_free>
 8009690:	e008      	b.n	80096a4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009692:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d104      	bne.n	80096a4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800969a:	68b8      	ldr	r0, [r7, #8]
 800969c:	f7fe ffe6 	bl	800866c <tcp_close>
 80096a0:	4603      	mov	r3, r0
 80096a2:	e000      	b.n	80096a6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	08012e50 	.word	0x08012e50
 80096b4:	080133c0 	.word	0x080133c0
 80096b8:	08012e94 	.word	0x08012e94

080096bc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b086      	sub	sp, #24
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	4603      	mov	r3, r0
 80096c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80096c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	db01      	blt.n	80096d2 <tcp_kill_prio+0x16>
 80096ce:	79fb      	ldrb	r3, [r7, #7]
 80096d0:	e000      	b.n	80096d4 <tcp_kill_prio+0x18>
 80096d2:	237f      	movs	r3, #127	; 0x7f
 80096d4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80096d6:	7afb      	ldrb	r3, [r7, #11]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d034      	beq.n	8009746 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80096dc:	7afb      	ldrb	r3, [r7, #11]
 80096de:	3b01      	subs	r3, #1
 80096e0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80096e6:	2300      	movs	r3, #0
 80096e8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80096ea:	4b19      	ldr	r3, [pc, #100]	; (8009750 <tcp_kill_prio+0x94>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	617b      	str	r3, [r7, #20]
 80096f0:	e01f      	b.n	8009732 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	7d5b      	ldrb	r3, [r3, #21]
 80096f6:	7afa      	ldrb	r2, [r7, #11]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d80c      	bhi.n	8009716 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009700:	7afa      	ldrb	r2, [r7, #11]
 8009702:	429a      	cmp	r2, r3
 8009704:	d112      	bne.n	800972c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009706:	4b13      	ldr	r3, [pc, #76]	; (8009754 <tcp_kill_prio+0x98>)
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	6a1b      	ldr	r3, [r3, #32]
 800970e:	1ad3      	subs	r3, r2, r3
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	429a      	cmp	r2, r3
 8009714:	d80a      	bhi.n	800972c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009716:	4b0f      	ldr	r3, [pc, #60]	; (8009754 <tcp_kill_prio+0x98>)
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	7d5b      	ldrb	r3, [r3, #21]
 800972a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	617b      	str	r3, [r7, #20]
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1dc      	bne.n	80096f2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d004      	beq.n	8009748 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800973e:	6938      	ldr	r0, [r7, #16]
 8009740:	f7ff f87e 	bl	8008840 <tcp_abort>
 8009744:	e000      	b.n	8009748 <tcp_kill_prio+0x8c>
    return;
 8009746:	bf00      	nop
  }
}
 8009748:	3718      	adds	r7, #24
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	20008754 	.word	0x20008754
 8009754:	20008748 	.word	0x20008748

08009758 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b086      	sub	sp, #24
 800975c:	af00      	add	r7, sp, #0
 800975e:	4603      	mov	r3, r0
 8009760:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009762:	79fb      	ldrb	r3, [r7, #7]
 8009764:	2b08      	cmp	r3, #8
 8009766:	d009      	beq.n	800977c <tcp_kill_state+0x24>
 8009768:	79fb      	ldrb	r3, [r7, #7]
 800976a:	2b09      	cmp	r3, #9
 800976c:	d006      	beq.n	800977c <tcp_kill_state+0x24>
 800976e:	4b1a      	ldr	r3, [pc, #104]	; (80097d8 <tcp_kill_state+0x80>)
 8009770:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009774:	4919      	ldr	r1, [pc, #100]	; (80097dc <tcp_kill_state+0x84>)
 8009776:	481a      	ldr	r0, [pc, #104]	; (80097e0 <tcp_kill_state+0x88>)
 8009778:	f007 fbd6 	bl	8010f28 <iprintf>

  inactivity = 0;
 800977c:	2300      	movs	r3, #0
 800977e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009780:	2300      	movs	r3, #0
 8009782:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009784:	4b17      	ldr	r3, [pc, #92]	; (80097e4 <tcp_kill_state+0x8c>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	617b      	str	r3, [r7, #20]
 800978a:	e017      	b.n	80097bc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	7d1b      	ldrb	r3, [r3, #20]
 8009790:	79fa      	ldrb	r2, [r7, #7]
 8009792:	429a      	cmp	r2, r3
 8009794:	d10f      	bne.n	80097b6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009796:	4b14      	ldr	r3, [pc, #80]	; (80097e8 <tcp_kill_state+0x90>)
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	6a1b      	ldr	r3, [r3, #32]
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d807      	bhi.n	80097b6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80097a6:	4b10      	ldr	r3, [pc, #64]	; (80097e8 <tcp_kill_state+0x90>)
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	617b      	str	r3, [r7, #20]
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1e4      	bne.n	800978c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d003      	beq.n	80097d0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80097c8:	2100      	movs	r1, #0
 80097ca:	6938      	ldr	r0, [r7, #16]
 80097cc:	f7fe ff7a 	bl	80086c4 <tcp_abandon>
  }
}
 80097d0:	bf00      	nop
 80097d2:	3718      	adds	r7, #24
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	08012e50 	.word	0x08012e50
 80097dc:	080133dc 	.word	0x080133dc
 80097e0:	08012e94 	.word	0x08012e94
 80097e4:	20008754 	.word	0x20008754
 80097e8:	20008748 	.word	0x20008748

080097ec <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80097f2:	2300      	movs	r3, #0
 80097f4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80097f6:	2300      	movs	r3, #0
 80097f8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80097fa:	4b12      	ldr	r3, [pc, #72]	; (8009844 <tcp_kill_timewait+0x58>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	60fb      	str	r3, [r7, #12]
 8009800:	e012      	b.n	8009828 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009802:	4b11      	ldr	r3, [pc, #68]	; (8009848 <tcp_kill_timewait+0x5c>)
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	429a      	cmp	r2, r3
 8009810:	d807      	bhi.n	8009822 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009812:	4b0d      	ldr	r3, [pc, #52]	; (8009848 <tcp_kill_timewait+0x5c>)
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6a1b      	ldr	r3, [r3, #32]
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	60fb      	str	r3, [r7, #12]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1e9      	bne.n	8009802 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d002      	beq.n	800983a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009834:	68b8      	ldr	r0, [r7, #8]
 8009836:	f7ff f803 	bl	8008840 <tcp_abort>
  }
}
 800983a:	bf00      	nop
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	20008758 	.word	0x20008758
 8009848:	20008748 	.word	0x20008748

0800984c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009852:	4b10      	ldr	r3, [pc, #64]	; (8009894 <tcp_handle_closepend+0x48>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009858:	e014      	b.n	8009884 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	8b5b      	ldrh	r3, [r3, #26]
 8009864:	f003 0308 	and.w	r3, r3, #8
 8009868:	2b00      	cmp	r3, #0
 800986a:	d009      	beq.n	8009880 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	8b5b      	ldrh	r3, [r3, #26]
 8009870:	f023 0308 	bic.w	r3, r3, #8
 8009874:	b29a      	uxth	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f7fe fe8c 	bl	8008598 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1e7      	bne.n	800985a <tcp_handle_closepend+0xe>
  }
}
 800988a:	bf00      	nop
 800988c:	bf00      	nop
 800988e:	3708      	adds	r7, #8
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	20008754 	.word	0x20008754

08009898 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	4603      	mov	r3, r0
 80098a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80098a2:	2001      	movs	r0, #1
 80098a4:	f7fd fb5e 	bl	8006f64 <memp_malloc>
 80098a8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d126      	bne.n	80098fe <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80098b0:	f7ff ffcc 	bl	800984c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80098b4:	f7ff ff9a 	bl	80097ec <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80098b8:	2001      	movs	r0, #1
 80098ba:	f7fd fb53 	bl	8006f64 <memp_malloc>
 80098be:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d11b      	bne.n	80098fe <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80098c6:	2009      	movs	r0, #9
 80098c8:	f7ff ff46 	bl	8009758 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80098cc:	2001      	movs	r0, #1
 80098ce:	f7fd fb49 	bl	8006f64 <memp_malloc>
 80098d2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d111      	bne.n	80098fe <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80098da:	2008      	movs	r0, #8
 80098dc:	f7ff ff3c 	bl	8009758 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80098e0:	2001      	movs	r0, #1
 80098e2:	f7fd fb3f 	bl	8006f64 <memp_malloc>
 80098e6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d107      	bne.n	80098fe <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80098ee:	79fb      	ldrb	r3, [r7, #7]
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7ff fee3 	bl	80096bc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80098f6:	2001      	movs	r0, #1
 80098f8:	f7fd fb34 	bl	8006f64 <memp_malloc>
 80098fc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d03f      	beq.n	8009984 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009904:	229c      	movs	r2, #156	; 0x9c
 8009906:	2100      	movs	r1, #0
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f007 fb05 	bl	8010f18 <memset>
    pcb->prio = prio;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	79fa      	ldrb	r2, [r7, #7]
 8009912:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800991a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009924:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	22ff      	movs	r2, #255	; 0xff
 8009932:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f44f 7206 	mov.w	r2, #536	; 0x218
 800993a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2206      	movs	r2, #6
 8009940:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2206      	movs	r2, #6
 8009948:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009950:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2201      	movs	r2, #1
 8009956:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800995a:	4b0d      	ldr	r3, [pc, #52]	; (8009990 <tcp_alloc+0xf8>)
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009962:	4b0c      	ldr	r3, [pc, #48]	; (8009994 <tcp_alloc+0xfc>)
 8009964:	781a      	ldrb	r2, [r3, #0]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009970:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	4a08      	ldr	r2, [pc, #32]	; (8009998 <tcp_alloc+0x100>)
 8009978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	4a07      	ldr	r2, [pc, #28]	; (800999c <tcp_alloc+0x104>)
 8009980:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009984:	68fb      	ldr	r3, [r7, #12]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	20008748 	.word	0x20008748
 8009994:	2000875e 	.word	0x2000875e
 8009998:	08009651 	.word	0x08009651
 800999c:	006ddd00 	.word	0x006ddd00

080099a0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	4603      	mov	r3, r0
 80099a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80099aa:	2040      	movs	r0, #64	; 0x40
 80099ac:	f7ff ff74 	bl	8009898 <tcp_alloc>
 80099b0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80099b2:	68fb      	ldr	r3, [r7, #12]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d002      	beq.n	80099d2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	683a      	ldr	r2, [r7, #0]
 80099d0:	611a      	str	r2, [r3, #16]
  }
}
 80099d2:	bf00      	nop
 80099d4:	370c      	adds	r7, #12
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
	...

080099e0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00e      	beq.n	8009a0e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	7d1b      	ldrb	r3, [r3, #20]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d106      	bne.n	8009a06 <tcp_recv+0x26>
 80099f8:	4b07      	ldr	r3, [pc, #28]	; (8009a18 <tcp_recv+0x38>)
 80099fa:	f240 72df 	movw	r2, #2015	; 0x7df
 80099fe:	4907      	ldr	r1, [pc, #28]	; (8009a1c <tcp_recv+0x3c>)
 8009a00:	4807      	ldr	r0, [pc, #28]	; (8009a20 <tcp_recv+0x40>)
 8009a02:	f007 fa91 	bl	8010f28 <iprintf>
    pcb->recv = recv;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	683a      	ldr	r2, [r7, #0]
 8009a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8009a0e:	bf00      	nop
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	08012e50 	.word	0x08012e50
 8009a1c:	080133ec 	.word	0x080133ec
 8009a20:	08012e94 	.word	0x08012e94

08009a24 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00e      	beq.n	8009a52 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	7d1b      	ldrb	r3, [r3, #20]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d106      	bne.n	8009a4a <tcp_sent+0x26>
 8009a3c:	4b07      	ldr	r3, [pc, #28]	; (8009a5c <tcp_sent+0x38>)
 8009a3e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8009a42:	4907      	ldr	r1, [pc, #28]	; (8009a60 <tcp_sent+0x3c>)
 8009a44:	4807      	ldr	r0, [pc, #28]	; (8009a64 <tcp_sent+0x40>)
 8009a46:	f007 fa6f 	bl	8010f28 <iprintf>
    pcb->sent = sent;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	683a      	ldr	r2, [r7, #0]
 8009a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8009a52:	bf00      	nop
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	08012e50 	.word	0x08012e50
 8009a60:	08013414 	.word	0x08013414
 8009a64:	08012e94 	.word	0x08012e94

08009a68 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00e      	beq.n	8009a96 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	7d1b      	ldrb	r3, [r3, #20]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d106      	bne.n	8009a8e <tcp_err+0x26>
 8009a80:	4b07      	ldr	r3, [pc, #28]	; (8009aa0 <tcp_err+0x38>)
 8009a82:	f640 020d 	movw	r2, #2061	; 0x80d
 8009a86:	4907      	ldr	r1, [pc, #28]	; (8009aa4 <tcp_err+0x3c>)
 8009a88:	4807      	ldr	r0, [pc, #28]	; (8009aa8 <tcp_err+0x40>)
 8009a8a:	f007 fa4d 	bl	8010f28 <iprintf>
    pcb->errf = err;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	683a      	ldr	r2, [r7, #0]
 8009a92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8009a96:	bf00      	nop
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	08012e50 	.word	0x08012e50
 8009aa4:	0801343c 	.word	0x0801343c
 8009aa8:	08012e94 	.word	0x08012e94

08009aac <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d008      	beq.n	8009ace <tcp_accept+0x22>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	7d1b      	ldrb	r3, [r3, #20]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d104      	bne.n	8009ace <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	619a      	str	r2, [r3, #24]
  }
}
 8009ace:	bf00      	nop
 8009ad0:	3714      	adds	r7, #20
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr
	...

08009adc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d107      	bne.n	8009b00 <tcp_poll+0x24>
 8009af0:	4b0e      	ldr	r3, [pc, #56]	; (8009b2c <tcp_poll+0x50>)
 8009af2:	f640 023d 	movw	r2, #2109	; 0x83d
 8009af6:	490e      	ldr	r1, [pc, #56]	; (8009b30 <tcp_poll+0x54>)
 8009af8:	480e      	ldr	r0, [pc, #56]	; (8009b34 <tcp_poll+0x58>)
 8009afa:	f007 fa15 	bl	8010f28 <iprintf>
 8009afe:	e011      	b.n	8009b24 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	7d1b      	ldrb	r3, [r3, #20]
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d106      	bne.n	8009b16 <tcp_poll+0x3a>
 8009b08:	4b08      	ldr	r3, [pc, #32]	; (8009b2c <tcp_poll+0x50>)
 8009b0a:	f640 023e 	movw	r2, #2110	; 0x83e
 8009b0e:	490a      	ldr	r1, [pc, #40]	; (8009b38 <tcp_poll+0x5c>)
 8009b10:	4808      	ldr	r0, [pc, #32]	; (8009b34 <tcp_poll+0x58>)
 8009b12:	f007 fa09 	bl	8010f28 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	79fa      	ldrb	r2, [r7, #7]
 8009b22:	775a      	strb	r2, [r3, #29]
}
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	08012e50 	.word	0x08012e50
 8009b30:	08013464 	.word	0x08013464
 8009b34:	08012e94 	.word	0x08012e94
 8009b38:	0801347c 	.word	0x0801347c

08009b3c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d107      	bne.n	8009b5a <tcp_pcb_purge+0x1e>
 8009b4a:	4b21      	ldr	r3, [pc, #132]	; (8009bd0 <tcp_pcb_purge+0x94>)
 8009b4c:	f640 0251 	movw	r2, #2129	; 0x851
 8009b50:	4920      	ldr	r1, [pc, #128]	; (8009bd4 <tcp_pcb_purge+0x98>)
 8009b52:	4821      	ldr	r0, [pc, #132]	; (8009bd8 <tcp_pcb_purge+0x9c>)
 8009b54:	f007 f9e8 	bl	8010f28 <iprintf>
 8009b58:	e037      	b.n	8009bca <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	7d1b      	ldrb	r3, [r3, #20]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d033      	beq.n	8009bca <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009b66:	2b0a      	cmp	r3, #10
 8009b68:	d02f      	beq.n	8009bca <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d02b      	beq.n	8009bca <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d007      	beq.n	8009b8a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fe f8d6 	bl	8007d30 <pbuf_free>
      pcb->refused_data = NULL;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d002      	beq.n	8009b98 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 f986 	bl	8009ea4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b9e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7ff fcdb 	bl	8009560 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7ff fcd6 	bl	8009560 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	66da      	str	r2, [r3, #108]	; 0x6c
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	08012e50 	.word	0x08012e50
 8009bd4:	0801349c 	.word	0x0801349c
 8009bd8:	08012e94 	.word	0x08012e94

08009bdc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d106      	bne.n	8009bfa <tcp_pcb_remove+0x1e>
 8009bec:	4b3e      	ldr	r3, [pc, #248]	; (8009ce8 <tcp_pcb_remove+0x10c>)
 8009bee:	f640 0283 	movw	r2, #2179	; 0x883
 8009bf2:	493e      	ldr	r1, [pc, #248]	; (8009cec <tcp_pcb_remove+0x110>)
 8009bf4:	483e      	ldr	r0, [pc, #248]	; (8009cf0 <tcp_pcb_remove+0x114>)
 8009bf6:	f007 f997 	bl	8010f28 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d106      	bne.n	8009c0e <tcp_pcb_remove+0x32>
 8009c00:	4b39      	ldr	r3, [pc, #228]	; (8009ce8 <tcp_pcb_remove+0x10c>)
 8009c02:	f640 0284 	movw	r2, #2180	; 0x884
 8009c06:	493b      	ldr	r1, [pc, #236]	; (8009cf4 <tcp_pcb_remove+0x118>)
 8009c08:	4839      	ldr	r0, [pc, #228]	; (8009cf0 <tcp_pcb_remove+0x114>)
 8009c0a:	f007 f98d 	bl	8010f28 <iprintf>

  TCP_RMV(pcblist, pcb);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	683a      	ldr	r2, [r7, #0]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d105      	bne.n	8009c24 <tcp_pcb_remove+0x48>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68da      	ldr	r2, [r3, #12]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	601a      	str	r2, [r3, #0]
 8009c22:	e013      	b.n	8009c4c <tcp_pcb_remove+0x70>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	60fb      	str	r3, [r7, #12]
 8009c2a:	e00c      	b.n	8009c46 <tcp_pcb_remove+0x6a>
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	683a      	ldr	r2, [r7, #0]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d104      	bne.n	8009c40 <tcp_pcb_remove+0x64>
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	68da      	ldr	r2, [r3, #12]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	60da      	str	r2, [r3, #12]
 8009c3e:	e005      	b.n	8009c4c <tcp_pcb_remove+0x70>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	60fb      	str	r3, [r7, #12]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1ef      	bne.n	8009c2c <tcp_pcb_remove+0x50>
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009c52:	6838      	ldr	r0, [r7, #0]
 8009c54:	f7ff ff72 	bl	8009b3c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	7d1b      	ldrb	r3, [r3, #20]
 8009c5c:	2b0a      	cmp	r3, #10
 8009c5e:	d013      	beq.n	8009c88 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d00f      	beq.n	8009c88 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	8b5b      	ldrh	r3, [r3, #26]
 8009c6c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d009      	beq.n	8009c88 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	8b5b      	ldrh	r3, [r3, #26]
 8009c78:	f043 0302 	orr.w	r3, r3, #2
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009c82:	6838      	ldr	r0, [r7, #0]
 8009c84:	f003 fbc6 	bl	800d414 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	7d1b      	ldrb	r3, [r3, #20]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d020      	beq.n	8009cd2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d006      	beq.n	8009ca6 <tcp_pcb_remove+0xca>
 8009c98:	4b13      	ldr	r3, [pc, #76]	; (8009ce8 <tcp_pcb_remove+0x10c>)
 8009c9a:	f640 0293 	movw	r2, #2195	; 0x893
 8009c9e:	4916      	ldr	r1, [pc, #88]	; (8009cf8 <tcp_pcb_remove+0x11c>)
 8009ca0:	4813      	ldr	r0, [pc, #76]	; (8009cf0 <tcp_pcb_remove+0x114>)
 8009ca2:	f007 f941 	bl	8010f28 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d006      	beq.n	8009cbc <tcp_pcb_remove+0xe0>
 8009cae:	4b0e      	ldr	r3, [pc, #56]	; (8009ce8 <tcp_pcb_remove+0x10c>)
 8009cb0:	f640 0294 	movw	r2, #2196	; 0x894
 8009cb4:	4911      	ldr	r1, [pc, #68]	; (8009cfc <tcp_pcb_remove+0x120>)
 8009cb6:	480e      	ldr	r0, [pc, #56]	; (8009cf0 <tcp_pcb_remove+0x114>)
 8009cb8:	f007 f936 	bl	8010f28 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d006      	beq.n	8009cd2 <tcp_pcb_remove+0xf6>
 8009cc4:	4b08      	ldr	r3, [pc, #32]	; (8009ce8 <tcp_pcb_remove+0x10c>)
 8009cc6:	f640 0296 	movw	r2, #2198	; 0x896
 8009cca:	490d      	ldr	r1, [pc, #52]	; (8009d00 <tcp_pcb_remove+0x124>)
 8009ccc:	4808      	ldr	r0, [pc, #32]	; (8009cf0 <tcp_pcb_remove+0x114>)
 8009cce:	f007 f92b 	bl	8010f28 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009cde:	bf00      	nop
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	08012e50 	.word	0x08012e50
 8009cec:	080134b8 	.word	0x080134b8
 8009cf0:	08012e94 	.word	0x08012e94
 8009cf4:	080134d4 	.word	0x080134d4
 8009cf8:	080134f4 	.word	0x080134f4
 8009cfc:	0801350c 	.word	0x0801350c
 8009d00:	08013528 	.word	0x08013528

08009d04 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d106      	bne.n	8009d20 <tcp_next_iss+0x1c>
 8009d12:	4b0a      	ldr	r3, [pc, #40]	; (8009d3c <tcp_next_iss+0x38>)
 8009d14:	f640 02af 	movw	r2, #2223	; 0x8af
 8009d18:	4909      	ldr	r1, [pc, #36]	; (8009d40 <tcp_next_iss+0x3c>)
 8009d1a:	480a      	ldr	r0, [pc, #40]	; (8009d44 <tcp_next_iss+0x40>)
 8009d1c:	f007 f904 	bl	8010f28 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009d20:	4b09      	ldr	r3, [pc, #36]	; (8009d48 <tcp_next_iss+0x44>)
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	4b09      	ldr	r3, [pc, #36]	; (8009d4c <tcp_next_iss+0x48>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4413      	add	r3, r2
 8009d2a:	4a07      	ldr	r2, [pc, #28]	; (8009d48 <tcp_next_iss+0x44>)
 8009d2c:	6013      	str	r3, [r2, #0]
  return iss;
 8009d2e:	4b06      	ldr	r3, [pc, #24]	; (8009d48 <tcp_next_iss+0x44>)
 8009d30:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3708      	adds	r7, #8
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	08012e50 	.word	0x08012e50
 8009d40:	08013540 	.word	0x08013540
 8009d44:	08012e94 	.word	0x08012e94
 8009d48:	20000074 	.word	0x20000074
 8009d4c:	20008748 	.word	0x20008748

08009d50 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b086      	sub	sp, #24
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	4603      	mov	r3, r0
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
 8009d5c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d106      	bne.n	8009d72 <tcp_eff_send_mss_netif+0x22>
 8009d64:	4b14      	ldr	r3, [pc, #80]	; (8009db8 <tcp_eff_send_mss_netif+0x68>)
 8009d66:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009d6a:	4914      	ldr	r1, [pc, #80]	; (8009dbc <tcp_eff_send_mss_netif+0x6c>)
 8009d6c:	4814      	ldr	r0, [pc, #80]	; (8009dc0 <tcp_eff_send_mss_netif+0x70>)
 8009d6e:	f007 f8db 	bl	8010f28 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d101      	bne.n	8009d7c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009d78:	89fb      	ldrh	r3, [r7, #14]
 8009d7a:	e019      	b.n	8009db0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009d80:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009d82:	8afb      	ldrh	r3, [r7, #22]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d012      	beq.n	8009dae <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009d88:	2328      	movs	r3, #40	; 0x28
 8009d8a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009d8c:	8afa      	ldrh	r2, [r7, #22]
 8009d8e:	8abb      	ldrh	r3, [r7, #20]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d904      	bls.n	8009d9e <tcp_eff_send_mss_netif+0x4e>
 8009d94:	8afa      	ldrh	r2, [r7, #22]
 8009d96:	8abb      	ldrh	r3, [r7, #20]
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	e000      	b.n	8009da0 <tcp_eff_send_mss_netif+0x50>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009da2:	8a7a      	ldrh	r2, [r7, #18]
 8009da4:	89fb      	ldrh	r3, [r7, #14]
 8009da6:	4293      	cmp	r3, r2
 8009da8:	bf28      	it	cs
 8009daa:	4613      	movcs	r3, r2
 8009dac:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009dae:	89fb      	ldrh	r3, [r7, #14]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3718      	adds	r7, #24
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	08012e50 	.word	0x08012e50
 8009dbc:	0801355c 	.word	0x0801355c
 8009dc0:	08012e94 	.word	0x08012e94

08009dc4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d119      	bne.n	8009e0c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009dd8:	4b10      	ldr	r3, [pc, #64]	; (8009e1c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8009dda:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009dde:	4910      	ldr	r1, [pc, #64]	; (8009e20 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009de0:	4810      	ldr	r0, [pc, #64]	; (8009e24 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8009de2:	f007 f8a1 	bl	8010f28 <iprintf>

  while (pcb != NULL) {
 8009de6:	e011      	b.n	8009e0c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d108      	bne.n	8009e06 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f7fe fd20 	bl	8008840 <tcp_abort>
      pcb = next;
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	60fb      	str	r3, [r7, #12]
 8009e04:	e002      	b.n	8009e0c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1ea      	bne.n	8009de8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8009e12:	bf00      	nop
 8009e14:	bf00      	nop
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	08012e50 	.word	0x08012e50
 8009e20:	08013584 	.word	0x08013584
 8009e24:	08012e94 	.word	0x08012e94

08009e28 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d02a      	beq.n	8009e8e <tcp_netif_ip_addr_changed+0x66>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d026      	beq.n	8009e8e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009e40:	4b15      	ldr	r3, [pc, #84]	; (8009e98 <tcp_netif_ip_addr_changed+0x70>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4619      	mov	r1, r3
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f7ff ffbc 	bl	8009dc4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009e4c:	4b13      	ldr	r3, [pc, #76]	; (8009e9c <tcp_netif_ip_addr_changed+0x74>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4619      	mov	r1, r3
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f7ff ffb6 	bl	8009dc4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d017      	beq.n	8009e8e <tcp_netif_ip_addr_changed+0x66>
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d013      	beq.n	8009e8e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009e66:	4b0e      	ldr	r3, [pc, #56]	; (8009ea0 <tcp_netif_ip_addr_changed+0x78>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	60fb      	str	r3, [r7, #12]
 8009e6c:	e00c      	b.n	8009e88 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d103      	bne.n	8009e82 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	60fb      	str	r3, [r7, #12]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1ef      	bne.n	8009e6e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009e8e:	bf00      	nop
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	20008754 	.word	0x20008754
 8009e9c:	2000874c 	.word	0x2000874c
 8009ea0:	20008750 	.word	0x20008750

08009ea4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d007      	beq.n	8009ec4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7ff fb51 	bl	8009560 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009ec4:	bf00      	nop
 8009ec6:	3708      	adds	r7, #8
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009ecc:	b590      	push	{r4, r7, lr}
 8009ece:	b08d      	sub	sp, #52	; 0x34
 8009ed0:	af04      	add	r7, sp, #16
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d105      	bne.n	8009ee8 <tcp_input+0x1c>
 8009edc:	4b9b      	ldr	r3, [pc, #620]	; (800a14c <tcp_input+0x280>)
 8009ede:	2283      	movs	r2, #131	; 0x83
 8009ee0:	499b      	ldr	r1, [pc, #620]	; (800a150 <tcp_input+0x284>)
 8009ee2:	489c      	ldr	r0, [pc, #624]	; (800a154 <tcp_input+0x288>)
 8009ee4:	f007 f820 	bl	8010f28 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	4a9a      	ldr	r2, [pc, #616]	; (800a158 <tcp_input+0x28c>)
 8009eee:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	895b      	ldrh	r3, [r3, #10]
 8009ef4:	2b13      	cmp	r3, #19
 8009ef6:	f240 83d1 	bls.w	800a69c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009efa:	4b98      	ldr	r3, [pc, #608]	; (800a15c <tcp_input+0x290>)
 8009efc:	695b      	ldr	r3, [r3, #20]
 8009efe:	4a97      	ldr	r2, [pc, #604]	; (800a15c <tcp_input+0x290>)
 8009f00:	6812      	ldr	r2, [r2, #0]
 8009f02:	4611      	mov	r1, r2
 8009f04:	4618      	mov	r0, r3
 8009f06:	f006 f86f 	bl	800ffe8 <ip4_addr_isbroadcast_u32>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f040 83c7 	bne.w	800a6a0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009f12:	4b92      	ldr	r3, [pc, #584]	; (800a15c <tcp_input+0x290>)
 8009f14:	695b      	ldr	r3, [r3, #20]
 8009f16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009f1a:	2be0      	cmp	r3, #224	; 0xe0
 8009f1c:	f000 83c0 	beq.w	800a6a0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009f20:	4b8d      	ldr	r3, [pc, #564]	; (800a158 <tcp_input+0x28c>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	899b      	ldrh	r3, [r3, #12]
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7fc fb39 	bl	80065a0 <lwip_htons>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	0b1b      	lsrs	r3, r3, #12
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009f3a:	7cbb      	ldrb	r3, [r7, #18]
 8009f3c:	2b13      	cmp	r3, #19
 8009f3e:	f240 83b1 	bls.w	800a6a4 <tcp_input+0x7d8>
 8009f42:	7cbb      	ldrb	r3, [r7, #18]
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	891b      	ldrh	r3, [r3, #8]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	f200 83aa 	bhi.w	800a6a4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009f50:	7cbb      	ldrb	r3, [r7, #18]
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	3b14      	subs	r3, #20
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	4b81      	ldr	r3, [pc, #516]	; (800a160 <tcp_input+0x294>)
 8009f5a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009f5c:	4b81      	ldr	r3, [pc, #516]	; (800a164 <tcp_input+0x298>)
 8009f5e:	2200      	movs	r2, #0
 8009f60:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	895a      	ldrh	r2, [r3, #10]
 8009f66:	7cbb      	ldrb	r3, [r7, #18]
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d309      	bcc.n	8009f82 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009f6e:	4b7c      	ldr	r3, [pc, #496]	; (800a160 <tcp_input+0x294>)
 8009f70:	881a      	ldrh	r2, [r3, #0]
 8009f72:	4b7d      	ldr	r3, [pc, #500]	; (800a168 <tcp_input+0x29c>)
 8009f74:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009f76:	7cbb      	ldrb	r3, [r7, #18]
 8009f78:	4619      	mov	r1, r3
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f7fd fe52 	bl	8007c24 <pbuf_remove_header>
 8009f80:	e04e      	b.n	800a020 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d105      	bne.n	8009f96 <tcp_input+0xca>
 8009f8a:	4b70      	ldr	r3, [pc, #448]	; (800a14c <tcp_input+0x280>)
 8009f8c:	22c2      	movs	r2, #194	; 0xc2
 8009f8e:	4977      	ldr	r1, [pc, #476]	; (800a16c <tcp_input+0x2a0>)
 8009f90:	4870      	ldr	r0, [pc, #448]	; (800a154 <tcp_input+0x288>)
 8009f92:	f006 ffc9 	bl	8010f28 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009f96:	2114      	movs	r1, #20
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f7fd fe43 	bl	8007c24 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	895a      	ldrh	r2, [r3, #10]
 8009fa2:	4b71      	ldr	r3, [pc, #452]	; (800a168 <tcp_input+0x29c>)
 8009fa4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009fa6:	4b6e      	ldr	r3, [pc, #440]	; (800a160 <tcp_input+0x294>)
 8009fa8:	881a      	ldrh	r2, [r3, #0]
 8009faa:	4b6f      	ldr	r3, [pc, #444]	; (800a168 <tcp_input+0x29c>)
 8009fac:	881b      	ldrh	r3, [r3, #0]
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009fb2:	4b6d      	ldr	r3, [pc, #436]	; (800a168 <tcp_input+0x29c>)
 8009fb4:	881b      	ldrh	r3, [r3, #0]
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f7fd fe33 	bl	8007c24 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	895b      	ldrh	r3, [r3, #10]
 8009fc4:	8a3a      	ldrh	r2, [r7, #16]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	f200 836e 	bhi.w	800a6a8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	4a64      	ldr	r2, [pc, #400]	; (800a164 <tcp_input+0x298>)
 8009fd4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	8a3a      	ldrh	r2, [r7, #16]
 8009fdc:	4611      	mov	r1, r2
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7fd fe20 	bl	8007c24 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	891a      	ldrh	r2, [r3, #8]
 8009fe8:	8a3b      	ldrh	r3, [r7, #16]
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	895b      	ldrh	r3, [r3, #10]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d005      	beq.n	800a006 <tcp_input+0x13a>
 8009ffa:	4b54      	ldr	r3, [pc, #336]	; (800a14c <tcp_input+0x280>)
 8009ffc:	22df      	movs	r2, #223	; 0xdf
 8009ffe:	495c      	ldr	r1, [pc, #368]	; (800a170 <tcp_input+0x2a4>)
 800a000:	4854      	ldr	r0, [pc, #336]	; (800a154 <tcp_input+0x288>)
 800a002:	f006 ff91 	bl	8010f28 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	891a      	ldrh	r2, [r3, #8]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	891b      	ldrh	r3, [r3, #8]
 800a010:	429a      	cmp	r2, r3
 800a012:	d005      	beq.n	800a020 <tcp_input+0x154>
 800a014:	4b4d      	ldr	r3, [pc, #308]	; (800a14c <tcp_input+0x280>)
 800a016:	22e0      	movs	r2, #224	; 0xe0
 800a018:	4956      	ldr	r1, [pc, #344]	; (800a174 <tcp_input+0x2a8>)
 800a01a:	484e      	ldr	r0, [pc, #312]	; (800a154 <tcp_input+0x288>)
 800a01c:	f006 ff84 	bl	8010f28 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a020:	4b4d      	ldr	r3, [pc, #308]	; (800a158 <tcp_input+0x28c>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	881b      	ldrh	r3, [r3, #0]
 800a026:	b29b      	uxth	r3, r3
 800a028:	4a4b      	ldr	r2, [pc, #300]	; (800a158 <tcp_input+0x28c>)
 800a02a:	6814      	ldr	r4, [r2, #0]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7fc fab7 	bl	80065a0 <lwip_htons>
 800a032:	4603      	mov	r3, r0
 800a034:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a036:	4b48      	ldr	r3, [pc, #288]	; (800a158 <tcp_input+0x28c>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	885b      	ldrh	r3, [r3, #2]
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	4a46      	ldr	r2, [pc, #280]	; (800a158 <tcp_input+0x28c>)
 800a040:	6814      	ldr	r4, [r2, #0]
 800a042:	4618      	mov	r0, r3
 800a044:	f7fc faac 	bl	80065a0 <lwip_htons>
 800a048:	4603      	mov	r3, r0
 800a04a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a04c:	4b42      	ldr	r3, [pc, #264]	; (800a158 <tcp_input+0x28c>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	4a41      	ldr	r2, [pc, #260]	; (800a158 <tcp_input+0x28c>)
 800a054:	6814      	ldr	r4, [r2, #0]
 800a056:	4618      	mov	r0, r3
 800a058:	f7fc fab7 	bl	80065ca <lwip_htonl>
 800a05c:	4603      	mov	r3, r0
 800a05e:	6063      	str	r3, [r4, #4]
 800a060:	6863      	ldr	r3, [r4, #4]
 800a062:	4a45      	ldr	r2, [pc, #276]	; (800a178 <tcp_input+0x2ac>)
 800a064:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a066:	4b3c      	ldr	r3, [pc, #240]	; (800a158 <tcp_input+0x28c>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	4a3a      	ldr	r2, [pc, #232]	; (800a158 <tcp_input+0x28c>)
 800a06e:	6814      	ldr	r4, [r2, #0]
 800a070:	4618      	mov	r0, r3
 800a072:	f7fc faaa 	bl	80065ca <lwip_htonl>
 800a076:	4603      	mov	r3, r0
 800a078:	60a3      	str	r3, [r4, #8]
 800a07a:	68a3      	ldr	r3, [r4, #8]
 800a07c:	4a3f      	ldr	r2, [pc, #252]	; (800a17c <tcp_input+0x2b0>)
 800a07e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a080:	4b35      	ldr	r3, [pc, #212]	; (800a158 <tcp_input+0x28c>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	89db      	ldrh	r3, [r3, #14]
 800a086:	b29b      	uxth	r3, r3
 800a088:	4a33      	ldr	r2, [pc, #204]	; (800a158 <tcp_input+0x28c>)
 800a08a:	6814      	ldr	r4, [r2, #0]
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fc fa87 	bl	80065a0 <lwip_htons>
 800a092:	4603      	mov	r3, r0
 800a094:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a096:	4b30      	ldr	r3, [pc, #192]	; (800a158 <tcp_input+0x28c>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	899b      	ldrh	r3, [r3, #12]
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7fc fa7e 	bl	80065a0 <lwip_htons>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0ac:	b2da      	uxtb	r2, r3
 800a0ae:	4b34      	ldr	r3, [pc, #208]	; (800a180 <tcp_input+0x2b4>)
 800a0b0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	891a      	ldrh	r2, [r3, #8]
 800a0b6:	4b33      	ldr	r3, [pc, #204]	; (800a184 <tcp_input+0x2b8>)
 800a0b8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a0ba:	4b31      	ldr	r3, [pc, #196]	; (800a180 <tcp_input+0x2b4>)
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	f003 0303 	and.w	r3, r3, #3
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d00c      	beq.n	800a0e0 <tcp_input+0x214>
    tcplen++;
 800a0c6:	4b2f      	ldr	r3, [pc, #188]	; (800a184 <tcp_input+0x2b8>)
 800a0c8:	881b      	ldrh	r3, [r3, #0]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	4b2d      	ldr	r3, [pc, #180]	; (800a184 <tcp_input+0x2b8>)
 800a0d0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	891a      	ldrh	r2, [r3, #8]
 800a0d6:	4b2b      	ldr	r3, [pc, #172]	; (800a184 <tcp_input+0x2b8>)
 800a0d8:	881b      	ldrh	r3, [r3, #0]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	f200 82e6 	bhi.w	800a6ac <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0e4:	4b28      	ldr	r3, [pc, #160]	; (800a188 <tcp_input+0x2bc>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	61fb      	str	r3, [r7, #28]
 800a0ea:	e09d      	b.n	800a228 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	7d1b      	ldrb	r3, [r3, #20]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d105      	bne.n	800a100 <tcp_input+0x234>
 800a0f4:	4b15      	ldr	r3, [pc, #84]	; (800a14c <tcp_input+0x280>)
 800a0f6:	22fb      	movs	r2, #251	; 0xfb
 800a0f8:	4924      	ldr	r1, [pc, #144]	; (800a18c <tcp_input+0x2c0>)
 800a0fa:	4816      	ldr	r0, [pc, #88]	; (800a154 <tcp_input+0x288>)
 800a0fc:	f006 ff14 	bl	8010f28 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	7d1b      	ldrb	r3, [r3, #20]
 800a104:	2b0a      	cmp	r3, #10
 800a106:	d105      	bne.n	800a114 <tcp_input+0x248>
 800a108:	4b10      	ldr	r3, [pc, #64]	; (800a14c <tcp_input+0x280>)
 800a10a:	22fc      	movs	r2, #252	; 0xfc
 800a10c:	4920      	ldr	r1, [pc, #128]	; (800a190 <tcp_input+0x2c4>)
 800a10e:	4811      	ldr	r0, [pc, #68]	; (800a154 <tcp_input+0x288>)
 800a110:	f006 ff0a 	bl	8010f28 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	7d1b      	ldrb	r3, [r3, #20]
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d105      	bne.n	800a128 <tcp_input+0x25c>
 800a11c:	4b0b      	ldr	r3, [pc, #44]	; (800a14c <tcp_input+0x280>)
 800a11e:	22fd      	movs	r2, #253	; 0xfd
 800a120:	491c      	ldr	r1, [pc, #112]	; (800a194 <tcp_input+0x2c8>)
 800a122:	480c      	ldr	r0, [pc, #48]	; (800a154 <tcp_input+0x288>)
 800a124:	f006 ff00 	bl	8010f28 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	7a1b      	ldrb	r3, [r3, #8]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d033      	beq.n	800a198 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	7a1a      	ldrb	r2, [r3, #8]
 800a134:	4b09      	ldr	r3, [pc, #36]	; (800a15c <tcp_input+0x290>)
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a13c:	3301      	adds	r3, #1
 800a13e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a140:	429a      	cmp	r2, r3
 800a142:	d029      	beq.n	800a198 <tcp_input+0x2cc>
      prev = pcb;
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	61bb      	str	r3, [r7, #24]
      continue;
 800a148:	e06b      	b.n	800a222 <tcp_input+0x356>
 800a14a:	bf00      	nop
 800a14c:	080135b8 	.word	0x080135b8
 800a150:	080135ec 	.word	0x080135ec
 800a154:	08013604 	.word	0x08013604
 800a158:	20008770 	.word	0x20008770
 800a15c:	200051d8 	.word	0x200051d8
 800a160:	20008774 	.word	0x20008774
 800a164:	20008778 	.word	0x20008778
 800a168:	20008776 	.word	0x20008776
 800a16c:	0801362c 	.word	0x0801362c
 800a170:	0801363c 	.word	0x0801363c
 800a174:	08013648 	.word	0x08013648
 800a178:	20008780 	.word	0x20008780
 800a17c:	20008784 	.word	0x20008784
 800a180:	2000878c 	.word	0x2000878c
 800a184:	2000878a 	.word	0x2000878a
 800a188:	20008754 	.word	0x20008754
 800a18c:	08013668 	.word	0x08013668
 800a190:	08013690 	.word	0x08013690
 800a194:	080136bc 	.word	0x080136bc
    }

    if (pcb->remote_port == tcphdr->src &&
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	8b1a      	ldrh	r2, [r3, #24]
 800a19c:	4b72      	ldr	r3, [pc, #456]	; (800a368 <tcp_input+0x49c>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	881b      	ldrh	r3, [r3, #0]
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d13a      	bne.n	800a21e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	8ada      	ldrh	r2, [r3, #22]
 800a1ac:	4b6e      	ldr	r3, [pc, #440]	; (800a368 <tcp_input+0x49c>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	885b      	ldrh	r3, [r3, #2]
 800a1b2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d132      	bne.n	800a21e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	685a      	ldr	r2, [r3, #4]
 800a1bc:	4b6b      	ldr	r3, [pc, #428]	; (800a36c <tcp_input+0x4a0>)
 800a1be:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d12c      	bne.n	800a21e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	4b68      	ldr	r3, [pc, #416]	; (800a36c <tcp_input+0x4a0>)
 800a1ca:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d126      	bne.n	800a21e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	69fa      	ldr	r2, [r7, #28]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d106      	bne.n	800a1e8 <tcp_input+0x31c>
 800a1da:	4b65      	ldr	r3, [pc, #404]	; (800a370 <tcp_input+0x4a4>)
 800a1dc:	f240 120d 	movw	r2, #269	; 0x10d
 800a1e0:	4964      	ldr	r1, [pc, #400]	; (800a374 <tcp_input+0x4a8>)
 800a1e2:	4865      	ldr	r0, [pc, #404]	; (800a378 <tcp_input+0x4ac>)
 800a1e4:	f006 fea0 	bl	8010f28 <iprintf>
      if (prev != NULL) {
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00a      	beq.n	800a204 <tcp_input+0x338>
        prev->next = pcb->next;
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	68da      	ldr	r2, [r3, #12]
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a1f6:	4b61      	ldr	r3, [pc, #388]	; (800a37c <tcp_input+0x4b0>)
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a1fe:	4a5f      	ldr	r2, [pc, #380]	; (800a37c <tcp_input+0x4b0>)
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	69fa      	ldr	r2, [r7, #28]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d111      	bne.n	800a232 <tcp_input+0x366>
 800a20e:	4b58      	ldr	r3, [pc, #352]	; (800a370 <tcp_input+0x4a4>)
 800a210:	f240 1215 	movw	r2, #277	; 0x115
 800a214:	495a      	ldr	r1, [pc, #360]	; (800a380 <tcp_input+0x4b4>)
 800a216:	4858      	ldr	r0, [pc, #352]	; (800a378 <tcp_input+0x4ac>)
 800a218:	f006 fe86 	bl	8010f28 <iprintf>
      break;
 800a21c:	e009      	b.n	800a232 <tcp_input+0x366>
    }
    prev = pcb;
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	61fb      	str	r3, [r7, #28]
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f47f af5e 	bne.w	800a0ec <tcp_input+0x220>
 800a230:	e000      	b.n	800a234 <tcp_input+0x368>
      break;
 800a232:	bf00      	nop
  }

  if (pcb == NULL) {
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	2b00      	cmp	r3, #0
 800a238:	f040 80aa 	bne.w	800a390 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a23c:	4b51      	ldr	r3, [pc, #324]	; (800a384 <tcp_input+0x4b8>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	61fb      	str	r3, [r7, #28]
 800a242:	e03f      	b.n	800a2c4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	7d1b      	ldrb	r3, [r3, #20]
 800a248:	2b0a      	cmp	r3, #10
 800a24a:	d006      	beq.n	800a25a <tcp_input+0x38e>
 800a24c:	4b48      	ldr	r3, [pc, #288]	; (800a370 <tcp_input+0x4a4>)
 800a24e:	f240 121f 	movw	r2, #287	; 0x11f
 800a252:	494d      	ldr	r1, [pc, #308]	; (800a388 <tcp_input+0x4bc>)
 800a254:	4848      	ldr	r0, [pc, #288]	; (800a378 <tcp_input+0x4ac>)
 800a256:	f006 fe67 	bl	8010f28 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	7a1b      	ldrb	r3, [r3, #8]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d009      	beq.n	800a276 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	7a1a      	ldrb	r2, [r3, #8]
 800a266:	4b41      	ldr	r3, [pc, #260]	; (800a36c <tcp_input+0x4a0>)
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a26e:	3301      	adds	r3, #1
 800a270:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a272:	429a      	cmp	r2, r3
 800a274:	d122      	bne.n	800a2bc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	8b1a      	ldrh	r2, [r3, #24]
 800a27a:	4b3b      	ldr	r3, [pc, #236]	; (800a368 <tcp_input+0x49c>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	881b      	ldrh	r3, [r3, #0]
 800a280:	b29b      	uxth	r3, r3
 800a282:	429a      	cmp	r2, r3
 800a284:	d11b      	bne.n	800a2be <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	8ada      	ldrh	r2, [r3, #22]
 800a28a:	4b37      	ldr	r3, [pc, #220]	; (800a368 <tcp_input+0x49c>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	885b      	ldrh	r3, [r3, #2]
 800a290:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a292:	429a      	cmp	r2, r3
 800a294:	d113      	bne.n	800a2be <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	685a      	ldr	r2, [r3, #4]
 800a29a:	4b34      	ldr	r3, [pc, #208]	; (800a36c <tcp_input+0x4a0>)
 800a29c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d10d      	bne.n	800a2be <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	4b31      	ldr	r3, [pc, #196]	; (800a36c <tcp_input+0x4a0>)
 800a2a8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d107      	bne.n	800a2be <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a2ae:	69f8      	ldr	r0, [r7, #28]
 800a2b0:	f000 fb56 	bl	800a960 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f7fd fd3b 	bl	8007d30 <pbuf_free>
        return;
 800a2ba:	e1fd      	b.n	800a6b8 <tcp_input+0x7ec>
        continue;
 800a2bc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	61fb      	str	r3, [r7, #28]
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1bc      	bne.n	800a244 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a2ce:	4b2f      	ldr	r3, [pc, #188]	; (800a38c <tcp_input+0x4c0>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	617b      	str	r3, [r7, #20]
 800a2d4:	e02a      	b.n	800a32c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	7a1b      	ldrb	r3, [r3, #8]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00c      	beq.n	800a2f8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	7a1a      	ldrb	r2, [r3, #8]
 800a2e2:	4b22      	ldr	r3, [pc, #136]	; (800a36c <tcp_input+0x4a0>)
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d002      	beq.n	800a2f8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	61bb      	str	r3, [r7, #24]
        continue;
 800a2f6:	e016      	b.n	800a326 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	8ada      	ldrh	r2, [r3, #22]
 800a2fc:	4b1a      	ldr	r3, [pc, #104]	; (800a368 <tcp_input+0x49c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	885b      	ldrh	r3, [r3, #2]
 800a302:	b29b      	uxth	r3, r3
 800a304:	429a      	cmp	r2, r3
 800a306:	d10c      	bne.n	800a322 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	4b17      	ldr	r3, [pc, #92]	; (800a36c <tcp_input+0x4a0>)
 800a30e:	695b      	ldr	r3, [r3, #20]
 800a310:	429a      	cmp	r2, r3
 800a312:	d00f      	beq.n	800a334 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00d      	beq.n	800a336 <tcp_input+0x46a>
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d009      	beq.n	800a336 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	617b      	str	r3, [r7, #20]
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1d1      	bne.n	800a2d6 <tcp_input+0x40a>
 800a332:	e000      	b.n	800a336 <tcp_input+0x46a>
            break;
 800a334:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d029      	beq.n	800a390 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00a      	beq.n	800a358 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	68da      	ldr	r2, [r3, #12]
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a34a:	4b10      	ldr	r3, [pc, #64]	; (800a38c <tcp_input+0x4c0>)
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a352:	4a0e      	ldr	r2, [pc, #56]	; (800a38c <tcp_input+0x4c0>)
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a358:	6978      	ldr	r0, [r7, #20]
 800a35a:	f000 fa03 	bl	800a764 <tcp_listen_input>
      }
      pbuf_free(p);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f7fd fce6 	bl	8007d30 <pbuf_free>
      return;
 800a364:	e1a8      	b.n	800a6b8 <tcp_input+0x7ec>
 800a366:	bf00      	nop
 800a368:	20008770 	.word	0x20008770
 800a36c:	200051d8 	.word	0x200051d8
 800a370:	080135b8 	.word	0x080135b8
 800a374:	080136e4 	.word	0x080136e4
 800a378:	08013604 	.word	0x08013604
 800a37c:	20008754 	.word	0x20008754
 800a380:	08013710 	.word	0x08013710
 800a384:	20008758 	.word	0x20008758
 800a388:	0801373c 	.word	0x0801373c
 800a38c:	20008750 	.word	0x20008750
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	2b00      	cmp	r3, #0
 800a394:	f000 8158 	beq.w	800a648 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a398:	4b95      	ldr	r3, [pc, #596]	; (800a5f0 <tcp_input+0x724>)
 800a39a:	2200      	movs	r2, #0
 800a39c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	891a      	ldrh	r2, [r3, #8]
 800a3a2:	4b93      	ldr	r3, [pc, #588]	; (800a5f0 <tcp_input+0x724>)
 800a3a4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a3a6:	4a92      	ldr	r2, [pc, #584]	; (800a5f0 <tcp_input+0x724>)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a3ac:	4b91      	ldr	r3, [pc, #580]	; (800a5f4 <tcp_input+0x728>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a8f      	ldr	r2, [pc, #572]	; (800a5f0 <tcp_input+0x724>)
 800a3b2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a3b4:	4b90      	ldr	r3, [pc, #576]	; (800a5f8 <tcp_input+0x72c>)
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a3ba:	4b90      	ldr	r3, [pc, #576]	; (800a5fc <tcp_input+0x730>)
 800a3bc:	2200      	movs	r2, #0
 800a3be:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a3c0:	4b8f      	ldr	r3, [pc, #572]	; (800a600 <tcp_input+0x734>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a3c6:	4b8f      	ldr	r3, [pc, #572]	; (800a604 <tcp_input+0x738>)
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	f003 0308 	and.w	r3, r3, #8
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d006      	beq.n	800a3e0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	7b5b      	ldrb	r3, [r3, #13]
 800a3d6:	f043 0301 	orr.w	r3, r3, #1
 800a3da:	b2da      	uxtb	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d017      	beq.n	800a418 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a3e8:	69f8      	ldr	r0, [r7, #28]
 800a3ea:	f7ff f83d 	bl	8009468 <tcp_process_refused_data>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	f113 0f0d 	cmn.w	r3, #13
 800a3f4:	d007      	beq.n	800a406 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00c      	beq.n	800a418 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a3fe:	4b82      	ldr	r3, [pc, #520]	; (800a608 <tcp_input+0x73c>)
 800a400:	881b      	ldrh	r3, [r3, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d008      	beq.n	800a418 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	f040 80e3 	bne.w	800a5d6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a410:	69f8      	ldr	r0, [r7, #28]
 800a412:	f003 fe05 	bl	800e020 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a416:	e0de      	b.n	800a5d6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800a418:	4a7c      	ldr	r2, [pc, #496]	; (800a60c <tcp_input+0x740>)
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a41e:	69f8      	ldr	r0, [r7, #28]
 800a420:	f000 fb18 	bl	800aa54 <tcp_process>
 800a424:	4603      	mov	r3, r0
 800a426:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a428:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a42c:	f113 0f0d 	cmn.w	r3, #13
 800a430:	f000 80d3 	beq.w	800a5da <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800a434:	4b71      	ldr	r3, [pc, #452]	; (800a5fc <tcp_input+0x730>)
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	f003 0308 	and.w	r3, r3, #8
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d015      	beq.n	800a46c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a446:	2b00      	cmp	r3, #0
 800a448:	d008      	beq.n	800a45c <tcp_input+0x590>
 800a44a:	69fb      	ldr	r3, [r7, #28]
 800a44c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a450:	69fa      	ldr	r2, [r7, #28]
 800a452:	6912      	ldr	r2, [r2, #16]
 800a454:	f06f 010d 	mvn.w	r1, #13
 800a458:	4610      	mov	r0, r2
 800a45a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a45c:	69f9      	ldr	r1, [r7, #28]
 800a45e:	486c      	ldr	r0, [pc, #432]	; (800a610 <tcp_input+0x744>)
 800a460:	f7ff fbbc 	bl	8009bdc <tcp_pcb_remove>
        tcp_free(pcb);
 800a464:	69f8      	ldr	r0, [r7, #28]
 800a466:	f7fd ff03 	bl	8008270 <tcp_free>
 800a46a:	e0da      	b.n	800a622 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800a46c:	2300      	movs	r3, #0
 800a46e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a470:	4b63      	ldr	r3, [pc, #396]	; (800a600 <tcp_input+0x734>)
 800a472:	881b      	ldrh	r3, [r3, #0]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d01d      	beq.n	800a4b4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a478:	4b61      	ldr	r3, [pc, #388]	; (800a600 <tcp_input+0x734>)
 800a47a:	881b      	ldrh	r3, [r3, #0]
 800a47c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a47e:	69fb      	ldr	r3, [r7, #28]
 800a480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a484:	2b00      	cmp	r3, #0
 800a486:	d00a      	beq.n	800a49e <tcp_input+0x5d2>
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a48e:	69fa      	ldr	r2, [r7, #28]
 800a490:	6910      	ldr	r0, [r2, #16]
 800a492:	89fa      	ldrh	r2, [r7, #14]
 800a494:	69f9      	ldr	r1, [r7, #28]
 800a496:	4798      	blx	r3
 800a498:	4603      	mov	r3, r0
 800a49a:	74fb      	strb	r3, [r7, #19]
 800a49c:	e001      	b.n	800a4a2 <tcp_input+0x5d6>
 800a49e:	2300      	movs	r3, #0
 800a4a0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a4a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a4a6:	f113 0f0d 	cmn.w	r3, #13
 800a4aa:	f000 8098 	beq.w	800a5de <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a4ae:	4b54      	ldr	r3, [pc, #336]	; (800a600 <tcp_input+0x734>)
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a4b4:	69f8      	ldr	r0, [r7, #28]
 800a4b6:	f000 f915 	bl	800a6e4 <tcp_input_delayed_close>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	f040 8090 	bne.w	800a5e2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a4c2:	4b4d      	ldr	r3, [pc, #308]	; (800a5f8 <tcp_input+0x72c>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d041      	beq.n	800a54e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d006      	beq.n	800a4e0 <tcp_input+0x614>
 800a4d2:	4b50      	ldr	r3, [pc, #320]	; (800a614 <tcp_input+0x748>)
 800a4d4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a4d8:	494f      	ldr	r1, [pc, #316]	; (800a618 <tcp_input+0x74c>)
 800a4da:	4850      	ldr	r0, [pc, #320]	; (800a61c <tcp_input+0x750>)
 800a4dc:	f006 fd24 	bl	8010f28 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	8b5b      	ldrh	r3, [r3, #26]
 800a4e4:	f003 0310 	and.w	r3, r3, #16
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d008      	beq.n	800a4fe <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a4ec:	4b42      	ldr	r3, [pc, #264]	; (800a5f8 <tcp_input+0x72c>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7fd fc1d 	bl	8007d30 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a4f6:	69f8      	ldr	r0, [r7, #28]
 800a4f8:	f7fe f9a2 	bl	8008840 <tcp_abort>
            goto aborted;
 800a4fc:	e091      	b.n	800a622 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a504:	2b00      	cmp	r3, #0
 800a506:	d00c      	beq.n	800a522 <tcp_input+0x656>
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	6918      	ldr	r0, [r3, #16]
 800a512:	4b39      	ldr	r3, [pc, #228]	; (800a5f8 <tcp_input+0x72c>)
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	2300      	movs	r3, #0
 800a518:	69f9      	ldr	r1, [r7, #28]
 800a51a:	47a0      	blx	r4
 800a51c:	4603      	mov	r3, r0
 800a51e:	74fb      	strb	r3, [r7, #19]
 800a520:	e008      	b.n	800a534 <tcp_input+0x668>
 800a522:	4b35      	ldr	r3, [pc, #212]	; (800a5f8 <tcp_input+0x72c>)
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	2300      	movs	r3, #0
 800a528:	69f9      	ldr	r1, [r7, #28]
 800a52a:	2000      	movs	r0, #0
 800a52c:	f7ff f890 	bl	8009650 <tcp_recv_null>
 800a530:	4603      	mov	r3, r0
 800a532:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a534:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a538:	f113 0f0d 	cmn.w	r3, #13
 800a53c:	d053      	beq.n	800a5e6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a53e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d003      	beq.n	800a54e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a546:	4b2c      	ldr	r3, [pc, #176]	; (800a5f8 <tcp_input+0x72c>)
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a54e:	4b2b      	ldr	r3, [pc, #172]	; (800a5fc <tcp_input+0x730>)
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	f003 0320 	and.w	r3, r3, #32
 800a556:	2b00      	cmp	r3, #0
 800a558:	d030      	beq.n	800a5bc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d009      	beq.n	800a576 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a566:	7b5a      	ldrb	r2, [r3, #13]
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a56c:	f042 0220 	orr.w	r2, r2, #32
 800a570:	b2d2      	uxtb	r2, r2
 800a572:	735a      	strb	r2, [r3, #13]
 800a574:	e022      	b.n	800a5bc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a57a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a57e:	d005      	beq.n	800a58c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a584:	3301      	adds	r3, #1
 800a586:	b29a      	uxth	r2, r3
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00b      	beq.n	800a5ae <tcp_input+0x6e2>
 800a596:	69fb      	ldr	r3, [r7, #28]
 800a598:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	6918      	ldr	r0, [r3, #16]
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	69f9      	ldr	r1, [r7, #28]
 800a5a6:	47a0      	blx	r4
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	74fb      	strb	r3, [r7, #19]
 800a5ac:	e001      	b.n	800a5b2 <tcp_input+0x6e6>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a5b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a5b6:	f113 0f0d 	cmn.w	r3, #13
 800a5ba:	d016      	beq.n	800a5ea <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a5bc:	4b13      	ldr	r3, [pc, #76]	; (800a60c <tcp_input+0x740>)
 800a5be:	2200      	movs	r2, #0
 800a5c0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a5c2:	69f8      	ldr	r0, [r7, #28]
 800a5c4:	f000 f88e 	bl	800a6e4 <tcp_input_delayed_close>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d128      	bne.n	800a620 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a5ce:	69f8      	ldr	r0, [r7, #28]
 800a5d0:	f002 ff20 	bl	800d414 <tcp_output>
 800a5d4:	e025      	b.n	800a622 <tcp_input+0x756>
        goto aborted;
 800a5d6:	bf00      	nop
 800a5d8:	e023      	b.n	800a622 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a5da:	bf00      	nop
 800a5dc:	e021      	b.n	800a622 <tcp_input+0x756>
              goto aborted;
 800a5de:	bf00      	nop
 800a5e0:	e01f      	b.n	800a622 <tcp_input+0x756>
          goto aborted;
 800a5e2:	bf00      	nop
 800a5e4:	e01d      	b.n	800a622 <tcp_input+0x756>
            goto aborted;
 800a5e6:	bf00      	nop
 800a5e8:	e01b      	b.n	800a622 <tcp_input+0x756>
              goto aborted;
 800a5ea:	bf00      	nop
 800a5ec:	e019      	b.n	800a622 <tcp_input+0x756>
 800a5ee:	bf00      	nop
 800a5f0:	20008760 	.word	0x20008760
 800a5f4:	20008770 	.word	0x20008770
 800a5f8:	20008790 	.word	0x20008790
 800a5fc:	2000878d 	.word	0x2000878d
 800a600:	20008788 	.word	0x20008788
 800a604:	2000878c 	.word	0x2000878c
 800a608:	2000878a 	.word	0x2000878a
 800a60c:	20008794 	.word	0x20008794
 800a610:	20008754 	.word	0x20008754
 800a614:	080135b8 	.word	0x080135b8
 800a618:	0801376c 	.word	0x0801376c
 800a61c:	08013604 	.word	0x08013604
          goto aborted;
 800a620:	bf00      	nop
    tcp_input_pcb = NULL;
 800a622:	4b27      	ldr	r3, [pc, #156]	; (800a6c0 <tcp_input+0x7f4>)
 800a624:	2200      	movs	r2, #0
 800a626:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a628:	4b26      	ldr	r3, [pc, #152]	; (800a6c4 <tcp_input+0x7f8>)
 800a62a:	2200      	movs	r2, #0
 800a62c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a62e:	4b26      	ldr	r3, [pc, #152]	; (800a6c8 <tcp_input+0x7fc>)
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d03f      	beq.n	800a6b6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800a636:	4b24      	ldr	r3, [pc, #144]	; (800a6c8 <tcp_input+0x7fc>)
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7fd fb78 	bl	8007d30 <pbuf_free>
      inseg.p = NULL;
 800a640:	4b21      	ldr	r3, [pc, #132]	; (800a6c8 <tcp_input+0x7fc>)
 800a642:	2200      	movs	r2, #0
 800a644:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a646:	e036      	b.n	800a6b6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a648:	4b20      	ldr	r3, [pc, #128]	; (800a6cc <tcp_input+0x800>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	899b      	ldrh	r3, [r3, #12]
 800a64e:	b29b      	uxth	r3, r3
 800a650:	4618      	mov	r0, r3
 800a652:	f7fb ffa5 	bl	80065a0 <lwip_htons>
 800a656:	4603      	mov	r3, r0
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	f003 0304 	and.w	r3, r3, #4
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d118      	bne.n	800a694 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a662:	4b1b      	ldr	r3, [pc, #108]	; (800a6d0 <tcp_input+0x804>)
 800a664:	6819      	ldr	r1, [r3, #0]
 800a666:	4b1b      	ldr	r3, [pc, #108]	; (800a6d4 <tcp_input+0x808>)
 800a668:	881b      	ldrh	r3, [r3, #0]
 800a66a:	461a      	mov	r2, r3
 800a66c:	4b1a      	ldr	r3, [pc, #104]	; (800a6d8 <tcp_input+0x80c>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a672:	4b16      	ldr	r3, [pc, #88]	; (800a6cc <tcp_input+0x800>)
 800a674:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a676:	885b      	ldrh	r3, [r3, #2]
 800a678:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a67a:	4a14      	ldr	r2, [pc, #80]	; (800a6cc <tcp_input+0x800>)
 800a67c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a67e:	8812      	ldrh	r2, [r2, #0]
 800a680:	b292      	uxth	r2, r2
 800a682:	9202      	str	r2, [sp, #8]
 800a684:	9301      	str	r3, [sp, #4]
 800a686:	4b15      	ldr	r3, [pc, #84]	; (800a6dc <tcp_input+0x810>)
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	4b15      	ldr	r3, [pc, #84]	; (800a6e0 <tcp_input+0x814>)
 800a68c:	4602      	mov	r2, r0
 800a68e:	2000      	movs	r0, #0
 800a690:	f003 fc74 	bl	800df7c <tcp_rst>
    pbuf_free(p);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f7fd fb4b 	bl	8007d30 <pbuf_free>
  return;
 800a69a:	e00c      	b.n	800a6b6 <tcp_input+0x7ea>
    goto dropped;
 800a69c:	bf00      	nop
 800a69e:	e006      	b.n	800a6ae <tcp_input+0x7e2>
    goto dropped;
 800a6a0:	bf00      	nop
 800a6a2:	e004      	b.n	800a6ae <tcp_input+0x7e2>
    goto dropped;
 800a6a4:	bf00      	nop
 800a6a6:	e002      	b.n	800a6ae <tcp_input+0x7e2>
      goto dropped;
 800a6a8:	bf00      	nop
 800a6aa:	e000      	b.n	800a6ae <tcp_input+0x7e2>
      goto dropped;
 800a6ac:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7fd fb3e 	bl	8007d30 <pbuf_free>
 800a6b4:	e000      	b.n	800a6b8 <tcp_input+0x7ec>
  return;
 800a6b6:	bf00      	nop
}
 800a6b8:	3724      	adds	r7, #36	; 0x24
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd90      	pop	{r4, r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	20008794 	.word	0x20008794
 800a6c4:	20008790 	.word	0x20008790
 800a6c8:	20008760 	.word	0x20008760
 800a6cc:	20008770 	.word	0x20008770
 800a6d0:	20008784 	.word	0x20008784
 800a6d4:	2000878a 	.word	0x2000878a
 800a6d8:	20008780 	.word	0x20008780
 800a6dc:	200051e8 	.word	0x200051e8
 800a6e0:	200051ec 	.word	0x200051ec

0800a6e4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d106      	bne.n	800a700 <tcp_input_delayed_close+0x1c>
 800a6f2:	4b17      	ldr	r3, [pc, #92]	; (800a750 <tcp_input_delayed_close+0x6c>)
 800a6f4:	f240 225a 	movw	r2, #602	; 0x25a
 800a6f8:	4916      	ldr	r1, [pc, #88]	; (800a754 <tcp_input_delayed_close+0x70>)
 800a6fa:	4817      	ldr	r0, [pc, #92]	; (800a758 <tcp_input_delayed_close+0x74>)
 800a6fc:	f006 fc14 	bl	8010f28 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a700:	4b16      	ldr	r3, [pc, #88]	; (800a75c <tcp_input_delayed_close+0x78>)
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	f003 0310 	and.w	r3, r3, #16
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d01c      	beq.n	800a746 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	8b5b      	ldrh	r3, [r3, #26]
 800a710:	f003 0310 	and.w	r3, r3, #16
 800a714:	2b00      	cmp	r3, #0
 800a716:	d10d      	bne.n	800a734 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d008      	beq.n	800a734 <tcp_input_delayed_close+0x50>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	6912      	ldr	r2, [r2, #16]
 800a72c:	f06f 010e 	mvn.w	r1, #14
 800a730:	4610      	mov	r0, r2
 800a732:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a734:	6879      	ldr	r1, [r7, #4]
 800a736:	480a      	ldr	r0, [pc, #40]	; (800a760 <tcp_input_delayed_close+0x7c>)
 800a738:	f7ff fa50 	bl	8009bdc <tcp_pcb_remove>
    tcp_free(pcb);
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f7fd fd97 	bl	8008270 <tcp_free>
    return 1;
 800a742:	2301      	movs	r3, #1
 800a744:	e000      	b.n	800a748 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	080135b8 	.word	0x080135b8
 800a754:	08013788 	.word	0x08013788
 800a758:	08013604 	.word	0x08013604
 800a75c:	2000878d 	.word	0x2000878d
 800a760:	20008754 	.word	0x20008754

0800a764 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a764:	b590      	push	{r4, r7, lr}
 800a766:	b08b      	sub	sp, #44	; 0x2c
 800a768:	af04      	add	r7, sp, #16
 800a76a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a76c:	4b6f      	ldr	r3, [pc, #444]	; (800a92c <tcp_listen_input+0x1c8>)
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	f003 0304 	and.w	r3, r3, #4
 800a774:	2b00      	cmp	r3, #0
 800a776:	f040 80d2 	bne.w	800a91e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d106      	bne.n	800a78e <tcp_listen_input+0x2a>
 800a780:	4b6b      	ldr	r3, [pc, #428]	; (800a930 <tcp_listen_input+0x1cc>)
 800a782:	f240 2281 	movw	r2, #641	; 0x281
 800a786:	496b      	ldr	r1, [pc, #428]	; (800a934 <tcp_listen_input+0x1d0>)
 800a788:	486b      	ldr	r0, [pc, #428]	; (800a938 <tcp_listen_input+0x1d4>)
 800a78a:	f006 fbcd 	bl	8010f28 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a78e:	4b67      	ldr	r3, [pc, #412]	; (800a92c <tcp_listen_input+0x1c8>)
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	f003 0310 	and.w	r3, r3, #16
 800a796:	2b00      	cmp	r3, #0
 800a798:	d019      	beq.n	800a7ce <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a79a:	4b68      	ldr	r3, [pc, #416]	; (800a93c <tcp_listen_input+0x1d8>)
 800a79c:	6819      	ldr	r1, [r3, #0]
 800a79e:	4b68      	ldr	r3, [pc, #416]	; (800a940 <tcp_listen_input+0x1dc>)
 800a7a0:	881b      	ldrh	r3, [r3, #0]
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	4b67      	ldr	r3, [pc, #412]	; (800a944 <tcp_listen_input+0x1e0>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a7aa:	4b67      	ldr	r3, [pc, #412]	; (800a948 <tcp_listen_input+0x1e4>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a7ae:	885b      	ldrh	r3, [r3, #2]
 800a7b0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a7b2:	4a65      	ldr	r2, [pc, #404]	; (800a948 <tcp_listen_input+0x1e4>)
 800a7b4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a7b6:	8812      	ldrh	r2, [r2, #0]
 800a7b8:	b292      	uxth	r2, r2
 800a7ba:	9202      	str	r2, [sp, #8]
 800a7bc:	9301      	str	r3, [sp, #4]
 800a7be:	4b63      	ldr	r3, [pc, #396]	; (800a94c <tcp_listen_input+0x1e8>)
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	4b63      	ldr	r3, [pc, #396]	; (800a950 <tcp_listen_input+0x1ec>)
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f003 fbd8 	bl	800df7c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a7cc:	e0a9      	b.n	800a922 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a7ce:	4b57      	ldr	r3, [pc, #348]	; (800a92c <tcp_listen_input+0x1c8>)
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	f003 0302 	and.w	r3, r3, #2
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	f000 80a3 	beq.w	800a922 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	7d5b      	ldrb	r3, [r3, #21]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7ff f859 	bl	8009898 <tcp_alloc>
 800a7e6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d111      	bne.n	800a812 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	699b      	ldr	r3, [r3, #24]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d00a      	beq.n	800a80c <tcp_listen_input+0xa8>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	699b      	ldr	r3, [r3, #24]
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	6910      	ldr	r0, [r2, #16]
 800a7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a802:	2100      	movs	r1, #0
 800a804:	4798      	blx	r3
 800a806:	4603      	mov	r3, r0
 800a808:	73bb      	strb	r3, [r7, #14]
      return;
 800a80a:	e08b      	b.n	800a924 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a80c:	23f0      	movs	r3, #240	; 0xf0
 800a80e:	73bb      	strb	r3, [r7, #14]
      return;
 800a810:	e088      	b.n	800a924 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a812:	4b50      	ldr	r3, [pc, #320]	; (800a954 <tcp_listen_input+0x1f0>)
 800a814:	695a      	ldr	r2, [r3, #20]
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a81a:	4b4e      	ldr	r3, [pc, #312]	; (800a954 <tcp_listen_input+0x1f0>)
 800a81c:	691a      	ldr	r2, [r3, #16]
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	8ada      	ldrh	r2, [r3, #22]
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a82a:	4b47      	ldr	r3, [pc, #284]	; (800a948 <tcp_listen_input+0x1e4>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	881b      	ldrh	r3, [r3, #0]
 800a830:	b29a      	uxth	r2, r3
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	2203      	movs	r2, #3
 800a83a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a83c:	4b41      	ldr	r3, [pc, #260]	; (800a944 <tcp_listen_input+0x1e0>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	1c5a      	adds	r2, r3, #1
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a84e:	6978      	ldr	r0, [r7, #20]
 800a850:	f7ff fa58 	bl	8009d04 <tcp_next_iss>
 800a854:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	693a      	ldr	r2, [r7, #16]
 800a85a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	693a      	ldr	r2, [r7, #16]
 800a860:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	693a      	ldr	r2, [r7, #16]
 800a866:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	693a      	ldr	r2, [r7, #16]
 800a86c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a86e:	4b35      	ldr	r3, [pc, #212]	; (800a944 <tcp_listen_input+0x1e0>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	1e5a      	subs	r2, r3, #1
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	691a      	ldr	r2, [r3, #16]
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	7a5b      	ldrb	r3, [r3, #9]
 800a88a:	f003 030c 	and.w	r3, r3, #12
 800a88e:	b2da      	uxtb	r2, r3
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	7a1a      	ldrb	r2, [r3, #8]
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a89c:	4b2e      	ldr	r3, [pc, #184]	; (800a958 <tcp_listen_input+0x1f4>)
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	60da      	str	r2, [r3, #12]
 800a8a4:	4a2c      	ldr	r2, [pc, #176]	; (800a958 <tcp_listen_input+0x1f4>)
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	6013      	str	r3, [r2, #0]
 800a8aa:	f003 fd29 	bl	800e300 <tcp_timer_needed>
 800a8ae:	4b2b      	ldr	r3, [pc, #172]	; (800a95c <tcp_listen_input+0x1f8>)
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a8b4:	6978      	ldr	r0, [r7, #20]
 800a8b6:	f001 fd8f 	bl	800c3d8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a8ba:	4b23      	ldr	r3, [pc, #140]	; (800a948 <tcp_listen_input+0x1e4>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	89db      	ldrh	r3, [r3, #14]
 800a8c0:	b29a      	uxth	r2, r3
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	3304      	adds	r3, #4
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f005 f8ed 	bl	800fabc <ip4_route>
 800a8e2:	4601      	mov	r1, r0
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	3304      	adds	r3, #4
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f7ff fa30 	bl	8009d50 <tcp_eff_send_mss_netif>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a8f8:	2112      	movs	r1, #18
 800a8fa:	6978      	ldr	r0, [r7, #20]
 800a8fc:	f002 fc9c 	bl	800d238 <tcp_enqueue_flags>
 800a900:	4603      	mov	r3, r0
 800a902:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a904:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d004      	beq.n	800a916 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a90c:	2100      	movs	r1, #0
 800a90e:	6978      	ldr	r0, [r7, #20]
 800a910:	f7fd fed8 	bl	80086c4 <tcp_abandon>
      return;
 800a914:	e006      	b.n	800a924 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a916:	6978      	ldr	r0, [r7, #20]
 800a918:	f002 fd7c 	bl	800d414 <tcp_output>
  return;
 800a91c:	e001      	b.n	800a922 <tcp_listen_input+0x1be>
    return;
 800a91e:	bf00      	nop
 800a920:	e000      	b.n	800a924 <tcp_listen_input+0x1c0>
  return;
 800a922:	bf00      	nop
}
 800a924:	371c      	adds	r7, #28
 800a926:	46bd      	mov	sp, r7
 800a928:	bd90      	pop	{r4, r7, pc}
 800a92a:	bf00      	nop
 800a92c:	2000878c 	.word	0x2000878c
 800a930:	080135b8 	.word	0x080135b8
 800a934:	080137b0 	.word	0x080137b0
 800a938:	08013604 	.word	0x08013604
 800a93c:	20008784 	.word	0x20008784
 800a940:	2000878a 	.word	0x2000878a
 800a944:	20008780 	.word	0x20008780
 800a948:	20008770 	.word	0x20008770
 800a94c:	200051e8 	.word	0x200051e8
 800a950:	200051ec 	.word	0x200051ec
 800a954:	200051d8 	.word	0x200051d8
 800a958:	20008754 	.word	0x20008754
 800a95c:	2000875c 	.word	0x2000875c

0800a960 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b086      	sub	sp, #24
 800a964:	af04      	add	r7, sp, #16
 800a966:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a968:	4b2f      	ldr	r3, [pc, #188]	; (800aa28 <tcp_timewait_input+0xc8>)
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	f003 0304 	and.w	r3, r3, #4
 800a970:	2b00      	cmp	r3, #0
 800a972:	d153      	bne.n	800aa1c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d106      	bne.n	800a988 <tcp_timewait_input+0x28>
 800a97a:	4b2c      	ldr	r3, [pc, #176]	; (800aa2c <tcp_timewait_input+0xcc>)
 800a97c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a980:	492b      	ldr	r1, [pc, #172]	; (800aa30 <tcp_timewait_input+0xd0>)
 800a982:	482c      	ldr	r0, [pc, #176]	; (800aa34 <tcp_timewait_input+0xd4>)
 800a984:	f006 fad0 	bl	8010f28 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a988:	4b27      	ldr	r3, [pc, #156]	; (800aa28 <tcp_timewait_input+0xc8>)
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	f003 0302 	and.w	r3, r3, #2
 800a990:	2b00      	cmp	r3, #0
 800a992:	d02a      	beq.n	800a9ea <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a994:	4b28      	ldr	r3, [pc, #160]	; (800aa38 <tcp_timewait_input+0xd8>)
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99c:	1ad3      	subs	r3, r2, r3
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	db2d      	blt.n	800a9fe <tcp_timewait_input+0x9e>
 800a9a2:	4b25      	ldr	r3, [pc, #148]	; (800aa38 <tcp_timewait_input+0xd8>)
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9aa:	6879      	ldr	r1, [r7, #4]
 800a9ac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a9ae:	440b      	add	r3, r1
 800a9b0:	1ad3      	subs	r3, r2, r3
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	dc23      	bgt.n	800a9fe <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9b6:	4b21      	ldr	r3, [pc, #132]	; (800aa3c <tcp_timewait_input+0xdc>)
 800a9b8:	6819      	ldr	r1, [r3, #0]
 800a9ba:	4b21      	ldr	r3, [pc, #132]	; (800aa40 <tcp_timewait_input+0xe0>)
 800a9bc:	881b      	ldrh	r3, [r3, #0]
 800a9be:	461a      	mov	r2, r3
 800a9c0:	4b1d      	ldr	r3, [pc, #116]	; (800aa38 <tcp_timewait_input+0xd8>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9c6:	4b1f      	ldr	r3, [pc, #124]	; (800aa44 <tcp_timewait_input+0xe4>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9ca:	885b      	ldrh	r3, [r3, #2]
 800a9cc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9ce:	4a1d      	ldr	r2, [pc, #116]	; (800aa44 <tcp_timewait_input+0xe4>)
 800a9d0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9d2:	8812      	ldrh	r2, [r2, #0]
 800a9d4:	b292      	uxth	r2, r2
 800a9d6:	9202      	str	r2, [sp, #8]
 800a9d8:	9301      	str	r3, [sp, #4]
 800a9da:	4b1b      	ldr	r3, [pc, #108]	; (800aa48 <tcp_timewait_input+0xe8>)
 800a9dc:	9300      	str	r3, [sp, #0]
 800a9de:	4b1b      	ldr	r3, [pc, #108]	; (800aa4c <tcp_timewait_input+0xec>)
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f003 faca 	bl	800df7c <tcp_rst>
      return;
 800a9e8:	e01b      	b.n	800aa22 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a9ea:	4b0f      	ldr	r3, [pc, #60]	; (800aa28 <tcp_timewait_input+0xc8>)
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	f003 0301 	and.w	r3, r3, #1
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d003      	beq.n	800a9fe <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a9f6:	4b16      	ldr	r3, [pc, #88]	; (800aa50 <tcp_timewait_input+0xf0>)
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a9fe:	4b10      	ldr	r3, [pc, #64]	; (800aa40 <tcp_timewait_input+0xe0>)
 800aa00:	881b      	ldrh	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d00c      	beq.n	800aa20 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	8b5b      	ldrh	r3, [r3, #26]
 800aa0a:	f043 0302 	orr.w	r3, r3, #2
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f002 fcfd 	bl	800d414 <tcp_output>
  }
  return;
 800aa1a:	e001      	b.n	800aa20 <tcp_timewait_input+0xc0>
    return;
 800aa1c:	bf00      	nop
 800aa1e:	e000      	b.n	800aa22 <tcp_timewait_input+0xc2>
  return;
 800aa20:	bf00      	nop
}
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	2000878c 	.word	0x2000878c
 800aa2c:	080135b8 	.word	0x080135b8
 800aa30:	080137d0 	.word	0x080137d0
 800aa34:	08013604 	.word	0x08013604
 800aa38:	20008780 	.word	0x20008780
 800aa3c:	20008784 	.word	0x20008784
 800aa40:	2000878a 	.word	0x2000878a
 800aa44:	20008770 	.word	0x20008770
 800aa48:	200051e8 	.word	0x200051e8
 800aa4c:	200051ec 	.word	0x200051ec
 800aa50:	20008748 	.word	0x20008748

0800aa54 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800aa54:	b590      	push	{r4, r7, lr}
 800aa56:	b08d      	sub	sp, #52	; 0x34
 800aa58:	af04      	add	r7, sp, #16
 800aa5a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800aa60:	2300      	movs	r3, #0
 800aa62:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d106      	bne.n	800aa78 <tcp_process+0x24>
 800aa6a:	4b9d      	ldr	r3, [pc, #628]	; (800ace0 <tcp_process+0x28c>)
 800aa6c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800aa70:	499c      	ldr	r1, [pc, #624]	; (800ace4 <tcp_process+0x290>)
 800aa72:	489d      	ldr	r0, [pc, #628]	; (800ace8 <tcp_process+0x294>)
 800aa74:	f006 fa58 	bl	8010f28 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800aa78:	4b9c      	ldr	r3, [pc, #624]	; (800acec <tcp_process+0x298>)
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	f003 0304 	and.w	r3, r3, #4
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d04e      	beq.n	800ab22 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	7d1b      	ldrb	r3, [r3, #20]
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	d108      	bne.n	800aa9e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa90:	4b97      	ldr	r3, [pc, #604]	; (800acf0 <tcp_process+0x29c>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d123      	bne.n	800aae0 <tcp_process+0x8c>
        acceptable = 1;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	76fb      	strb	r3, [r7, #27]
 800aa9c:	e020      	b.n	800aae0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aaa2:	4b94      	ldr	r3, [pc, #592]	; (800acf4 <tcp_process+0x2a0>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d102      	bne.n	800aab0 <tcp_process+0x5c>
        acceptable = 1;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	76fb      	strb	r3, [r7, #27]
 800aaae:	e017      	b.n	800aae0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800aab0:	4b90      	ldr	r3, [pc, #576]	; (800acf4 <tcp_process+0x2a0>)
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab8:	1ad3      	subs	r3, r2, r3
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	db10      	blt.n	800aae0 <tcp_process+0x8c>
 800aabe:	4b8d      	ldr	r3, [pc, #564]	; (800acf4 <tcp_process+0x2a0>)
 800aac0:	681a      	ldr	r2, [r3, #0]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac6:	6879      	ldr	r1, [r7, #4]
 800aac8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800aaca:	440b      	add	r3, r1
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	2b00      	cmp	r3, #0
 800aad0:	dc06      	bgt.n	800aae0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	8b5b      	ldrh	r3, [r3, #26]
 800aad6:	f043 0302 	orr.w	r3, r3, #2
 800aada:	b29a      	uxth	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800aae0:	7efb      	ldrb	r3, [r7, #27]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d01b      	beq.n	800ab1e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	7d1b      	ldrb	r3, [r3, #20]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d106      	bne.n	800aafc <tcp_process+0xa8>
 800aaee:	4b7c      	ldr	r3, [pc, #496]	; (800ace0 <tcp_process+0x28c>)
 800aaf0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800aaf4:	4980      	ldr	r1, [pc, #512]	; (800acf8 <tcp_process+0x2a4>)
 800aaf6:	487c      	ldr	r0, [pc, #496]	; (800ace8 <tcp_process+0x294>)
 800aaf8:	f006 fa16 	bl	8010f28 <iprintf>
      recv_flags |= TF_RESET;
 800aafc:	4b7f      	ldr	r3, [pc, #508]	; (800acfc <tcp_process+0x2a8>)
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	f043 0308 	orr.w	r3, r3, #8
 800ab04:	b2da      	uxtb	r2, r3
 800ab06:	4b7d      	ldr	r3, [pc, #500]	; (800acfc <tcp_process+0x2a8>)
 800ab08:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	8b5b      	ldrh	r3, [r3, #26]
 800ab0e:	f023 0301 	bic.w	r3, r3, #1
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ab18:	f06f 030d 	mvn.w	r3, #13
 800ab1c:	e37a      	b.n	800b214 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	e378      	b.n	800b214 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ab22:	4b72      	ldr	r3, [pc, #456]	; (800acec <tcp_process+0x298>)
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	f003 0302 	and.w	r3, r3, #2
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d010      	beq.n	800ab50 <tcp_process+0xfc>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	7d1b      	ldrb	r3, [r3, #20]
 800ab32:	2b02      	cmp	r3, #2
 800ab34:	d00c      	beq.n	800ab50 <tcp_process+0xfc>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	7d1b      	ldrb	r3, [r3, #20]
 800ab3a:	2b03      	cmp	r3, #3
 800ab3c:	d008      	beq.n	800ab50 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	8b5b      	ldrh	r3, [r3, #26]
 800ab42:	f043 0302 	orr.w	r3, r3, #2
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	e361      	b.n	800b214 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	8b5b      	ldrh	r3, [r3, #26]
 800ab54:	f003 0310 	and.w	r3, r3, #16
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d103      	bne.n	800ab64 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ab5c:	4b68      	ldr	r3, [pc, #416]	; (800ad00 <tcp_process+0x2ac>)
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f001 fc2f 	bl	800c3d8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	7d1b      	ldrb	r3, [r3, #20]
 800ab7e:	3b02      	subs	r3, #2
 800ab80:	2b07      	cmp	r3, #7
 800ab82:	f200 8337 	bhi.w	800b1f4 <tcp_process+0x7a0>
 800ab86:	a201      	add	r2, pc, #4	; (adr r2, 800ab8c <tcp_process+0x138>)
 800ab88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab8c:	0800abad 	.word	0x0800abad
 800ab90:	0800addd 	.word	0x0800addd
 800ab94:	0800af55 	.word	0x0800af55
 800ab98:	0800af7f 	.word	0x0800af7f
 800ab9c:	0800b0a3 	.word	0x0800b0a3
 800aba0:	0800af55 	.word	0x0800af55
 800aba4:	0800b12f 	.word	0x0800b12f
 800aba8:	0800b1bf 	.word	0x0800b1bf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800abac:	4b4f      	ldr	r3, [pc, #316]	; (800acec <tcp_process+0x298>)
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	f003 0310 	and.w	r3, r3, #16
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f000 80e4 	beq.w	800ad82 <tcp_process+0x32e>
 800abba:	4b4c      	ldr	r3, [pc, #304]	; (800acec <tcp_process+0x298>)
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	f003 0302 	and.w	r3, r3, #2
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	f000 80dd 	beq.w	800ad82 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abcc:	1c5a      	adds	r2, r3, #1
 800abce:	4b48      	ldr	r3, [pc, #288]	; (800acf0 <tcp_process+0x29c>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	f040 80d5 	bne.w	800ad82 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800abd8:	4b46      	ldr	r3, [pc, #280]	; (800acf4 <tcp_process+0x2a0>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	1c5a      	adds	r2, r3, #1
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800abea:	4b41      	ldr	r3, [pc, #260]	; (800acf0 <tcp_process+0x29c>)
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800abf2:	4b44      	ldr	r3, [pc, #272]	; (800ad04 <tcp_process+0x2b0>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	89db      	ldrh	r3, [r3, #14]
 800abf8:	b29a      	uxth	r2, r3
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ac0c:	4b39      	ldr	r3, [pc, #228]	; (800acf4 <tcp_process+0x2a0>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	1e5a      	subs	r2, r3, #1
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2204      	movs	r2, #4
 800ac1a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	3304      	adds	r3, #4
 800ac24:	4618      	mov	r0, r3
 800ac26:	f004 ff49 	bl	800fabc <ip4_route>
 800ac2a:	4601      	mov	r1, r0
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	3304      	adds	r3, #4
 800ac30:	461a      	mov	r2, r3
 800ac32:	4620      	mov	r0, r4
 800ac34:	f7ff f88c 	bl	8009d50 <tcp_eff_send_mss_netif>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac44:	009a      	lsls	r2, r3, #2
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac4a:	005b      	lsls	r3, r3, #1
 800ac4c:	f241 111c 	movw	r1, #4380	; 0x111c
 800ac50:	428b      	cmp	r3, r1
 800ac52:	bf38      	it	cc
 800ac54:	460b      	movcc	r3, r1
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d204      	bcs.n	800ac64 <tcp_process+0x210>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	e00d      	b.n	800ac80 <tcp_process+0x22c>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac68:	005b      	lsls	r3, r3, #1
 800ac6a:	f241 121c 	movw	r2, #4380	; 0x111c
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d904      	bls.n	800ac7c <tcp_process+0x228>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac76:	005b      	lsls	r3, r3, #1
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	e001      	b.n	800ac80 <tcp_process+0x22c>
 800ac7c:	f241 131c 	movw	r3, #4380	; 0x111c
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d106      	bne.n	800ac9e <tcp_process+0x24a>
 800ac90:	4b13      	ldr	r3, [pc, #76]	; (800ace0 <tcp_process+0x28c>)
 800ac92:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ac96:	491c      	ldr	r1, [pc, #112]	; (800ad08 <tcp_process+0x2b4>)
 800ac98:	4813      	ldr	r0, [pc, #76]	; (800ace8 <tcp_process+0x294>)
 800ac9a:	f006 f945 	bl	8010f28 <iprintf>
        --pcb->snd_queuelen;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aca4:	3b01      	subs	r3, #1
 800aca6:	b29a      	uxth	r2, r3
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acb2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d12a      	bne.n	800ad10 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acbe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d106      	bne.n	800acd4 <tcp_process+0x280>
 800acc6:	4b06      	ldr	r3, [pc, #24]	; (800ace0 <tcp_process+0x28c>)
 800acc8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800accc:	490f      	ldr	r1, [pc, #60]	; (800ad0c <tcp_process+0x2b8>)
 800acce:	4806      	ldr	r0, [pc, #24]	; (800ace8 <tcp_process+0x294>)
 800acd0:	f006 f92a 	bl	8010f28 <iprintf>
          pcb->unsent = rseg->next;
 800acd4:	69fb      	ldr	r3, [r7, #28]
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	66da      	str	r2, [r3, #108]	; 0x6c
 800acdc:	e01c      	b.n	800ad18 <tcp_process+0x2c4>
 800acde:	bf00      	nop
 800ace0:	080135b8 	.word	0x080135b8
 800ace4:	080137f0 	.word	0x080137f0
 800ace8:	08013604 	.word	0x08013604
 800acec:	2000878c 	.word	0x2000878c
 800acf0:	20008784 	.word	0x20008784
 800acf4:	20008780 	.word	0x20008780
 800acf8:	0801380c 	.word	0x0801380c
 800acfc:	2000878d 	.word	0x2000878d
 800ad00:	20008748 	.word	0x20008748
 800ad04:	20008770 	.word	0x20008770
 800ad08:	0801382c 	.word	0x0801382c
 800ad0c:	08013844 	.word	0x08013844
        } else {
          pcb->unacked = rseg->next;
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800ad18:	69f8      	ldr	r0, [r7, #28]
 800ad1a:	f7fe fc36 	bl	800958a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d104      	bne.n	800ad30 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad2c:	861a      	strh	r2, [r3, #48]	; 0x30
 800ad2e:	e006      	b.n	800ad3e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d00a      	beq.n	800ad5e <tcp_process+0x30a>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	6910      	ldr	r0, [r2, #16]
 800ad52:	2200      	movs	r2, #0
 800ad54:	6879      	ldr	r1, [r7, #4]
 800ad56:	4798      	blx	r3
 800ad58:	4603      	mov	r3, r0
 800ad5a:	76bb      	strb	r3, [r7, #26]
 800ad5c:	e001      	b.n	800ad62 <tcp_process+0x30e>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ad62:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ad66:	f113 0f0d 	cmn.w	r3, #13
 800ad6a:	d102      	bne.n	800ad72 <tcp_process+0x31e>
          return ERR_ABRT;
 800ad6c:	f06f 030c 	mvn.w	r3, #12
 800ad70:	e250      	b.n	800b214 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	8b5b      	ldrh	r3, [r3, #26]
 800ad76:	f043 0302 	orr.w	r3, r3, #2
 800ad7a:	b29a      	uxth	r2, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ad80:	e23a      	b.n	800b1f8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ad82:	4b98      	ldr	r3, [pc, #608]	; (800afe4 <tcp_process+0x590>)
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	f003 0310 	and.w	r3, r3, #16
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f000 8234 	beq.w	800b1f8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad90:	4b95      	ldr	r3, [pc, #596]	; (800afe8 <tcp_process+0x594>)
 800ad92:	6819      	ldr	r1, [r3, #0]
 800ad94:	4b95      	ldr	r3, [pc, #596]	; (800afec <tcp_process+0x598>)
 800ad96:	881b      	ldrh	r3, [r3, #0]
 800ad98:	461a      	mov	r2, r3
 800ad9a:	4b95      	ldr	r3, [pc, #596]	; (800aff0 <tcp_process+0x59c>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ada0:	4b94      	ldr	r3, [pc, #592]	; (800aff4 <tcp_process+0x5a0>)
 800ada2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ada4:	885b      	ldrh	r3, [r3, #2]
 800ada6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ada8:	4a92      	ldr	r2, [pc, #584]	; (800aff4 <tcp_process+0x5a0>)
 800adaa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adac:	8812      	ldrh	r2, [r2, #0]
 800adae:	b292      	uxth	r2, r2
 800adb0:	9202      	str	r2, [sp, #8]
 800adb2:	9301      	str	r3, [sp, #4]
 800adb4:	4b90      	ldr	r3, [pc, #576]	; (800aff8 <tcp_process+0x5a4>)
 800adb6:	9300      	str	r3, [sp, #0]
 800adb8:	4b90      	ldr	r3, [pc, #576]	; (800affc <tcp_process+0x5a8>)
 800adba:	4602      	mov	r2, r0
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f003 f8dd 	bl	800df7c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800adc8:	2b05      	cmp	r3, #5
 800adca:	f200 8215 	bhi.w	800b1f8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f002 fea7 	bl	800db28 <tcp_rexmit_rto>
      break;
 800adda:	e20d      	b.n	800b1f8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800addc:	4b81      	ldr	r3, [pc, #516]	; (800afe4 <tcp_process+0x590>)
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	f003 0310 	and.w	r3, r3, #16
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f000 80a1 	beq.w	800af2c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800adea:	4b7f      	ldr	r3, [pc, #508]	; (800afe8 <tcp_process+0x594>)
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adf2:	1ad3      	subs	r3, r2, r3
 800adf4:	3b01      	subs	r3, #1
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	db7e      	blt.n	800aef8 <tcp_process+0x4a4>
 800adfa:	4b7b      	ldr	r3, [pc, #492]	; (800afe8 <tcp_process+0x594>)
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae02:	1ad3      	subs	r3, r2, r3
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	dc77      	bgt.n	800aef8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2204      	movs	r2, #4
 800ae0c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d102      	bne.n	800ae1c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ae16:	23fa      	movs	r3, #250	; 0xfa
 800ae18:	76bb      	strb	r3, [r7, #26]
 800ae1a:	e01d      	b.n	800ae58 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae20:	699b      	ldr	r3, [r3, #24]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d106      	bne.n	800ae34 <tcp_process+0x3e0>
 800ae26:	4b76      	ldr	r3, [pc, #472]	; (800b000 <tcp_process+0x5ac>)
 800ae28:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ae2c:	4975      	ldr	r1, [pc, #468]	; (800b004 <tcp_process+0x5b0>)
 800ae2e:	4876      	ldr	r0, [pc, #472]	; (800b008 <tcp_process+0x5b4>)
 800ae30:	f006 f87a 	bl	8010f28 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae38:	699b      	ldr	r3, [r3, #24]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d00a      	beq.n	800ae54 <tcp_process+0x400>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae42:	699b      	ldr	r3, [r3, #24]
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	6910      	ldr	r0, [r2, #16]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	6879      	ldr	r1, [r7, #4]
 800ae4c:	4798      	blx	r3
 800ae4e:	4603      	mov	r3, r0
 800ae50:	76bb      	strb	r3, [r7, #26]
 800ae52:	e001      	b.n	800ae58 <tcp_process+0x404>
 800ae54:	23f0      	movs	r3, #240	; 0xf0
 800ae56:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ae58:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d00a      	beq.n	800ae76 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ae60:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ae64:	f113 0f0d 	cmn.w	r3, #13
 800ae68:	d002      	beq.n	800ae70 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f7fd fce8 	bl	8008840 <tcp_abort>
            }
            return ERR_ABRT;
 800ae70:	f06f 030c 	mvn.w	r3, #12
 800ae74:	e1ce      	b.n	800b214 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fae0 	bl	800b43c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ae7c:	4b63      	ldr	r3, [pc, #396]	; (800b00c <tcp_process+0x5b8>)
 800ae7e:	881b      	ldrh	r3, [r3, #0]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d005      	beq.n	800ae90 <tcp_process+0x43c>
            recv_acked--;
 800ae84:	4b61      	ldr	r3, [pc, #388]	; (800b00c <tcp_process+0x5b8>)
 800ae86:	881b      	ldrh	r3, [r3, #0]
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	4b5f      	ldr	r3, [pc, #380]	; (800b00c <tcp_process+0x5b8>)
 800ae8e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae94:	009a      	lsls	r2, r3, #2
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae9a:	005b      	lsls	r3, r3, #1
 800ae9c:	f241 111c 	movw	r1, #4380	; 0x111c
 800aea0:	428b      	cmp	r3, r1
 800aea2:	bf38      	it	cc
 800aea4:	460b      	movcc	r3, r1
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d204      	bcs.n	800aeb4 <tcp_process+0x460>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	e00d      	b.n	800aed0 <tcp_process+0x47c>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aeb8:	005b      	lsls	r3, r3, #1
 800aeba:	f241 121c 	movw	r2, #4380	; 0x111c
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d904      	bls.n	800aecc <tcp_process+0x478>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aec6:	005b      	lsls	r3, r3, #1
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	e001      	b.n	800aed0 <tcp_process+0x47c>
 800aecc:	f241 131c 	movw	r3, #4380	; 0x111c
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800aed6:	4b4e      	ldr	r3, [pc, #312]	; (800b010 <tcp_process+0x5bc>)
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	f003 0320 	and.w	r3, r3, #32
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d037      	beq.n	800af52 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	8b5b      	ldrh	r3, [r3, #26]
 800aee6:	f043 0302 	orr.w	r3, r3, #2
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2207      	movs	r2, #7
 800aef4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800aef6:	e02c      	b.n	800af52 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aef8:	4b3b      	ldr	r3, [pc, #236]	; (800afe8 <tcp_process+0x594>)
 800aefa:	6819      	ldr	r1, [r3, #0]
 800aefc:	4b3b      	ldr	r3, [pc, #236]	; (800afec <tcp_process+0x598>)
 800aefe:	881b      	ldrh	r3, [r3, #0]
 800af00:	461a      	mov	r2, r3
 800af02:	4b3b      	ldr	r3, [pc, #236]	; (800aff0 <tcp_process+0x59c>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800af08:	4b3a      	ldr	r3, [pc, #232]	; (800aff4 <tcp_process+0x5a0>)
 800af0a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af0c:	885b      	ldrh	r3, [r3, #2]
 800af0e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800af10:	4a38      	ldr	r2, [pc, #224]	; (800aff4 <tcp_process+0x5a0>)
 800af12:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af14:	8812      	ldrh	r2, [r2, #0]
 800af16:	b292      	uxth	r2, r2
 800af18:	9202      	str	r2, [sp, #8]
 800af1a:	9301      	str	r3, [sp, #4]
 800af1c:	4b36      	ldr	r3, [pc, #216]	; (800aff8 <tcp_process+0x5a4>)
 800af1e:	9300      	str	r3, [sp, #0]
 800af20:	4b36      	ldr	r3, [pc, #216]	; (800affc <tcp_process+0x5a8>)
 800af22:	4602      	mov	r2, r0
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f003 f829 	bl	800df7c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800af2a:	e167      	b.n	800b1fc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800af2c:	4b2d      	ldr	r3, [pc, #180]	; (800afe4 <tcp_process+0x590>)
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	f003 0302 	and.w	r3, r3, #2
 800af34:	2b00      	cmp	r3, #0
 800af36:	f000 8161 	beq.w	800b1fc <tcp_process+0x7a8>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3e:	1e5a      	subs	r2, r3, #1
 800af40:	4b2b      	ldr	r3, [pc, #172]	; (800aff0 <tcp_process+0x59c>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	429a      	cmp	r2, r3
 800af46:	f040 8159 	bne.w	800b1fc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f002 fe0e 	bl	800db6c <tcp_rexmit>
      break;
 800af50:	e154      	b.n	800b1fc <tcp_process+0x7a8>
 800af52:	e153      	b.n	800b1fc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 fa71 	bl	800b43c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800af5a:	4b2d      	ldr	r3, [pc, #180]	; (800b010 <tcp_process+0x5bc>)
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	f003 0320 	and.w	r3, r3, #32
 800af62:	2b00      	cmp	r3, #0
 800af64:	f000 814c 	beq.w	800b200 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	8b5b      	ldrh	r3, [r3, #26]
 800af6c:	f043 0302 	orr.w	r3, r3, #2
 800af70:	b29a      	uxth	r2, r3
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2207      	movs	r2, #7
 800af7a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800af7c:	e140      	b.n	800b200 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 fa5c 	bl	800b43c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800af84:	4b22      	ldr	r3, [pc, #136]	; (800b010 <tcp_process+0x5bc>)
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	f003 0320 	and.w	r3, r3, #32
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d071      	beq.n	800b074 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800af90:	4b14      	ldr	r3, [pc, #80]	; (800afe4 <tcp_process+0x590>)
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	f003 0310 	and.w	r3, r3, #16
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d060      	beq.n	800b05e <tcp_process+0x60a>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800afa0:	4b11      	ldr	r3, [pc, #68]	; (800afe8 <tcp_process+0x594>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d15a      	bne.n	800b05e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800afac:	2b00      	cmp	r3, #0
 800afae:	d156      	bne.n	800b05e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	8b5b      	ldrh	r3, [r3, #26]
 800afb4:	f043 0302 	orr.w	r3, r3, #2
 800afb8:	b29a      	uxth	r2, r3
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7fe fdbc 	bl	8009b3c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800afc4:	4b13      	ldr	r3, [pc, #76]	; (800b014 <tcp_process+0x5c0>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d105      	bne.n	800afda <tcp_process+0x586>
 800afce:	4b11      	ldr	r3, [pc, #68]	; (800b014 <tcp_process+0x5c0>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	4a0f      	ldr	r2, [pc, #60]	; (800b014 <tcp_process+0x5c0>)
 800afd6:	6013      	str	r3, [r2, #0]
 800afd8:	e02e      	b.n	800b038 <tcp_process+0x5e4>
 800afda:	4b0e      	ldr	r3, [pc, #56]	; (800b014 <tcp_process+0x5c0>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	617b      	str	r3, [r7, #20]
 800afe0:	e027      	b.n	800b032 <tcp_process+0x5de>
 800afe2:	bf00      	nop
 800afe4:	2000878c 	.word	0x2000878c
 800afe8:	20008784 	.word	0x20008784
 800afec:	2000878a 	.word	0x2000878a
 800aff0:	20008780 	.word	0x20008780
 800aff4:	20008770 	.word	0x20008770
 800aff8:	200051e8 	.word	0x200051e8
 800affc:	200051ec 	.word	0x200051ec
 800b000:	080135b8 	.word	0x080135b8
 800b004:	08013858 	.word	0x08013858
 800b008:	08013604 	.word	0x08013604
 800b00c:	20008788 	.word	0x20008788
 800b010:	2000878d 	.word	0x2000878d
 800b014:	20008754 	.word	0x20008754
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d104      	bne.n	800b02c <tcp_process+0x5d8>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	68da      	ldr	r2, [r3, #12]
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	60da      	str	r2, [r3, #12]
 800b02a:	e005      	b.n	800b038 <tcp_process+0x5e4>
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	68db      	ldr	r3, [r3, #12]
 800b030:	617b      	str	r3, [r7, #20]
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d1ef      	bne.n	800b018 <tcp_process+0x5c4>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	60da      	str	r2, [r3, #12]
 800b03e:	4b77      	ldr	r3, [pc, #476]	; (800b21c <tcp_process+0x7c8>)
 800b040:	2201      	movs	r2, #1
 800b042:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	220a      	movs	r2, #10
 800b048:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b04a:	4b75      	ldr	r3, [pc, #468]	; (800b220 <tcp_process+0x7cc>)
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	60da      	str	r2, [r3, #12]
 800b052:	4a73      	ldr	r2, [pc, #460]	; (800b220 <tcp_process+0x7cc>)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6013      	str	r3, [r2, #0]
 800b058:	f003 f952 	bl	800e300 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b05c:	e0d2      	b.n	800b204 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	8b5b      	ldrh	r3, [r3, #26]
 800b062:	f043 0302 	orr.w	r3, r3, #2
 800b066:	b29a      	uxth	r2, r3
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2208      	movs	r2, #8
 800b070:	751a      	strb	r2, [r3, #20]
      break;
 800b072:	e0c7      	b.n	800b204 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b074:	4b6b      	ldr	r3, [pc, #428]	; (800b224 <tcp_process+0x7d0>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	f003 0310 	and.w	r3, r3, #16
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f000 80c1 	beq.w	800b204 <tcp_process+0x7b0>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b086:	4b68      	ldr	r3, [pc, #416]	; (800b228 <tcp_process+0x7d4>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	f040 80ba 	bne.w	800b204 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b094:	2b00      	cmp	r3, #0
 800b096:	f040 80b5 	bne.w	800b204 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2206      	movs	r2, #6
 800b09e:	751a      	strb	r2, [r3, #20]
      break;
 800b0a0:	e0b0      	b.n	800b204 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 f9ca 	bl	800b43c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b0a8:	4b60      	ldr	r3, [pc, #384]	; (800b22c <tcp_process+0x7d8>)
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	f003 0320 	and.w	r3, r3, #32
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f000 80a9 	beq.w	800b208 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	8b5b      	ldrh	r3, [r3, #26]
 800b0ba:	f043 0302 	orr.w	r3, r3, #2
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f7fe fd39 	bl	8009b3c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b0ca:	4b59      	ldr	r3, [pc, #356]	; (800b230 <tcp_process+0x7dc>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d105      	bne.n	800b0e0 <tcp_process+0x68c>
 800b0d4:	4b56      	ldr	r3, [pc, #344]	; (800b230 <tcp_process+0x7dc>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	4a55      	ldr	r2, [pc, #340]	; (800b230 <tcp_process+0x7dc>)
 800b0dc:	6013      	str	r3, [r2, #0]
 800b0de:	e013      	b.n	800b108 <tcp_process+0x6b4>
 800b0e0:	4b53      	ldr	r3, [pc, #332]	; (800b230 <tcp_process+0x7dc>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	613b      	str	r3, [r7, #16]
 800b0e6:	e00c      	b.n	800b102 <tcp_process+0x6ae>
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	68db      	ldr	r3, [r3, #12]
 800b0ec:	687a      	ldr	r2, [r7, #4]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d104      	bne.n	800b0fc <tcp_process+0x6a8>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	68da      	ldr	r2, [r3, #12]
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	60da      	str	r2, [r3, #12]
 800b0fa:	e005      	b.n	800b108 <tcp_process+0x6b4>
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	613b      	str	r3, [r7, #16]
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d1ef      	bne.n	800b0e8 <tcp_process+0x694>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2200      	movs	r2, #0
 800b10c:	60da      	str	r2, [r3, #12]
 800b10e:	4b43      	ldr	r3, [pc, #268]	; (800b21c <tcp_process+0x7c8>)
 800b110:	2201      	movs	r2, #1
 800b112:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	220a      	movs	r2, #10
 800b118:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b11a:	4b41      	ldr	r3, [pc, #260]	; (800b220 <tcp_process+0x7cc>)
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	60da      	str	r2, [r3, #12]
 800b122:	4a3f      	ldr	r2, [pc, #252]	; (800b220 <tcp_process+0x7cc>)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6013      	str	r3, [r2, #0]
 800b128:	f003 f8ea 	bl	800e300 <tcp_timer_needed>
      }
      break;
 800b12c:	e06c      	b.n	800b208 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f984 	bl	800b43c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b134:	4b3b      	ldr	r3, [pc, #236]	; (800b224 <tcp_process+0x7d0>)
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	f003 0310 	and.w	r3, r3, #16
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d065      	beq.n	800b20c <tcp_process+0x7b8>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b144:	4b38      	ldr	r3, [pc, #224]	; (800b228 <tcp_process+0x7d4>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d15f      	bne.n	800b20c <tcp_process+0x7b8>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b150:	2b00      	cmp	r3, #0
 800b152:	d15b      	bne.n	800b20c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f7fe fcf1 	bl	8009b3c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b15a:	4b35      	ldr	r3, [pc, #212]	; (800b230 <tcp_process+0x7dc>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	429a      	cmp	r2, r3
 800b162:	d105      	bne.n	800b170 <tcp_process+0x71c>
 800b164:	4b32      	ldr	r3, [pc, #200]	; (800b230 <tcp_process+0x7dc>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	4a31      	ldr	r2, [pc, #196]	; (800b230 <tcp_process+0x7dc>)
 800b16c:	6013      	str	r3, [r2, #0]
 800b16e:	e013      	b.n	800b198 <tcp_process+0x744>
 800b170:	4b2f      	ldr	r3, [pc, #188]	; (800b230 <tcp_process+0x7dc>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	60fb      	str	r3, [r7, #12]
 800b176:	e00c      	b.n	800b192 <tcp_process+0x73e>
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d104      	bne.n	800b18c <tcp_process+0x738>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	68da      	ldr	r2, [r3, #12]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	60da      	str	r2, [r3, #12]
 800b18a:	e005      	b.n	800b198 <tcp_process+0x744>
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	60fb      	str	r3, [r7, #12]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1ef      	bne.n	800b178 <tcp_process+0x724>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2200      	movs	r2, #0
 800b19c:	60da      	str	r2, [r3, #12]
 800b19e:	4b1f      	ldr	r3, [pc, #124]	; (800b21c <tcp_process+0x7c8>)
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	220a      	movs	r2, #10
 800b1a8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b1aa:	4b1d      	ldr	r3, [pc, #116]	; (800b220 <tcp_process+0x7cc>)
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	60da      	str	r2, [r3, #12]
 800b1b2:	4a1b      	ldr	r2, [pc, #108]	; (800b220 <tcp_process+0x7cc>)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6013      	str	r3, [r2, #0]
 800b1b8:	f003 f8a2 	bl	800e300 <tcp_timer_needed>
      }
      break;
 800b1bc:	e026      	b.n	800b20c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 f93c 	bl	800b43c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b1c4:	4b17      	ldr	r3, [pc, #92]	; (800b224 <tcp_process+0x7d0>)
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	f003 0310 	and.w	r3, r3, #16
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d01f      	beq.n	800b210 <tcp_process+0x7bc>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1d4:	4b14      	ldr	r3, [pc, #80]	; (800b228 <tcp_process+0x7d4>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d119      	bne.n	800b210 <tcp_process+0x7bc>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d115      	bne.n	800b210 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b1e4:	4b11      	ldr	r3, [pc, #68]	; (800b22c <tcp_process+0x7d8>)
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	f043 0310 	orr.w	r3, r3, #16
 800b1ec:	b2da      	uxtb	r2, r3
 800b1ee:	4b0f      	ldr	r3, [pc, #60]	; (800b22c <tcp_process+0x7d8>)
 800b1f0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b1f2:	e00d      	b.n	800b210 <tcp_process+0x7bc>
    default:
      break;
 800b1f4:	bf00      	nop
 800b1f6:	e00c      	b.n	800b212 <tcp_process+0x7be>
      break;
 800b1f8:	bf00      	nop
 800b1fa:	e00a      	b.n	800b212 <tcp_process+0x7be>
      break;
 800b1fc:	bf00      	nop
 800b1fe:	e008      	b.n	800b212 <tcp_process+0x7be>
      break;
 800b200:	bf00      	nop
 800b202:	e006      	b.n	800b212 <tcp_process+0x7be>
      break;
 800b204:	bf00      	nop
 800b206:	e004      	b.n	800b212 <tcp_process+0x7be>
      break;
 800b208:	bf00      	nop
 800b20a:	e002      	b.n	800b212 <tcp_process+0x7be>
      break;
 800b20c:	bf00      	nop
 800b20e:	e000      	b.n	800b212 <tcp_process+0x7be>
      break;
 800b210:	bf00      	nop
  }
  return ERR_OK;
 800b212:	2300      	movs	r3, #0
}
 800b214:	4618      	mov	r0, r3
 800b216:	3724      	adds	r7, #36	; 0x24
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd90      	pop	{r4, r7, pc}
 800b21c:	2000875c 	.word	0x2000875c
 800b220:	20008758 	.word	0x20008758
 800b224:	2000878c 	.word	0x2000878c
 800b228:	20008784 	.word	0x20008784
 800b22c:	2000878d 	.word	0x2000878d
 800b230:	20008754 	.word	0x20008754

0800b234 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b234:	b590      	push	{r4, r7, lr}
 800b236:	b085      	sub	sp, #20
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d106      	bne.n	800b252 <tcp_oos_insert_segment+0x1e>
 800b244:	4b3b      	ldr	r3, [pc, #236]	; (800b334 <tcp_oos_insert_segment+0x100>)
 800b246:	f240 421f 	movw	r2, #1055	; 0x41f
 800b24a:	493b      	ldr	r1, [pc, #236]	; (800b338 <tcp_oos_insert_segment+0x104>)
 800b24c:	483b      	ldr	r0, [pc, #236]	; (800b33c <tcp_oos_insert_segment+0x108>)
 800b24e:	f005 fe6b 	bl	8010f28 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	68db      	ldr	r3, [r3, #12]
 800b256:	899b      	ldrh	r3, [r3, #12]
 800b258:	b29b      	uxth	r3, r3
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fb f9a0 	bl	80065a0 <lwip_htons>
 800b260:	4603      	mov	r3, r0
 800b262:	b2db      	uxtb	r3, r3
 800b264:	f003 0301 	and.w	r3, r3, #1
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d028      	beq.n	800b2be <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b26c:	6838      	ldr	r0, [r7, #0]
 800b26e:	f7fe f977 	bl	8009560 <tcp_segs_free>
    next = NULL;
 800b272:	2300      	movs	r3, #0
 800b274:	603b      	str	r3, [r7, #0]
 800b276:	e056      	b.n	800b326 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	68db      	ldr	r3, [r3, #12]
 800b27c:	899b      	ldrh	r3, [r3, #12]
 800b27e:	b29b      	uxth	r3, r3
 800b280:	4618      	mov	r0, r3
 800b282:	f7fb f98d 	bl	80065a0 <lwip_htons>
 800b286:	4603      	mov	r3, r0
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	f003 0301 	and.w	r3, r3, #1
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d00d      	beq.n	800b2ae <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	899b      	ldrh	r3, [r3, #12]
 800b298:	b29c      	uxth	r4, r3
 800b29a:	2001      	movs	r0, #1
 800b29c:	f7fb f980 	bl	80065a0 <lwip_htons>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	4322      	orrs	r2, r4
 800b2aa:	b292      	uxth	r2, r2
 800b2ac:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b2b8:	68f8      	ldr	r0, [r7, #12]
 800b2ba:	f7fe f966 	bl	800958a <tcp_seg_free>
    while (next &&
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d00e      	beq.n	800b2e2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	891b      	ldrh	r3, [r3, #8]
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	4b1d      	ldr	r3, [pc, #116]	; (800b340 <tcp_oos_insert_segment+0x10c>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	441a      	add	r2, r3
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	6839      	ldr	r1, [r7, #0]
 800b2d8:	8909      	ldrh	r1, [r1, #8]
 800b2da:	440b      	add	r3, r1
 800b2dc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	daca      	bge.n	800b278 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d01e      	beq.n	800b326 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	891b      	ldrh	r3, [r3, #8]
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	4b14      	ldr	r3, [pc, #80]	; (800b340 <tcp_oos_insert_segment+0x10c>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	441a      	add	r2, r3
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	dd12      	ble.n	800b326 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	b29a      	uxth	r2, r3
 800b308:	4b0d      	ldr	r3, [pc, #52]	; (800b340 <tcp_oos_insert_segment+0x10c>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	1ad3      	subs	r3, r2, r3
 800b310:	b29a      	uxth	r2, r3
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	685a      	ldr	r2, [r3, #4]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	891b      	ldrh	r3, [r3, #8]
 800b31e:	4619      	mov	r1, r3
 800b320:	4610      	mov	r0, r2
 800b322:	f7fc fb7f 	bl	8007a24 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	683a      	ldr	r2, [r7, #0]
 800b32a:	601a      	str	r2, [r3, #0]
}
 800b32c:	bf00      	nop
 800b32e:	3714      	adds	r7, #20
 800b330:	46bd      	mov	sp, r7
 800b332:	bd90      	pop	{r4, r7, pc}
 800b334:	080135b8 	.word	0x080135b8
 800b338:	08013878 	.word	0x08013878
 800b33c:	08013604 	.word	0x08013604
 800b340:	20008780 	.word	0x20008780

0800b344 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b344:	b5b0      	push	{r4, r5, r7, lr}
 800b346:	b086      	sub	sp, #24
 800b348:	af00      	add	r7, sp, #0
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	607a      	str	r2, [r7, #4]
 800b350:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b352:	e03e      	b.n	800b3d2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	4618      	mov	r0, r3
 800b364:	f7fc fd6c 	bl	8007e40 <pbuf_clen>
 800b368:	4603      	mov	r3, r0
 800b36a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b372:	8a7a      	ldrh	r2, [r7, #18]
 800b374:	429a      	cmp	r2, r3
 800b376:	d906      	bls.n	800b386 <tcp_free_acked_segments+0x42>
 800b378:	4b2a      	ldr	r3, [pc, #168]	; (800b424 <tcp_free_acked_segments+0xe0>)
 800b37a:	f240 4257 	movw	r2, #1111	; 0x457
 800b37e:	492a      	ldr	r1, [pc, #168]	; (800b428 <tcp_free_acked_segments+0xe4>)
 800b380:	482a      	ldr	r0, [pc, #168]	; (800b42c <tcp_free_acked_segments+0xe8>)
 800b382:	f005 fdd1 	bl	8010f28 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b38c:	8a7b      	ldrh	r3, [r7, #18]
 800b38e:	1ad3      	subs	r3, r2, r3
 800b390:	b29a      	uxth	r2, r3
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	891a      	ldrh	r2, [r3, #8]
 800b39c:	4b24      	ldr	r3, [pc, #144]	; (800b430 <tcp_free_acked_segments+0xec>)
 800b39e:	881b      	ldrh	r3, [r3, #0]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	b29a      	uxth	r2, r3
 800b3a4:	4b22      	ldr	r3, [pc, #136]	; (800b430 <tcp_free_acked_segments+0xec>)
 800b3a6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b3a8:	6978      	ldr	r0, [r7, #20]
 800b3aa:	f7fe f8ee 	bl	800958a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00c      	beq.n	800b3d2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d109      	bne.n	800b3d2 <tcp_free_acked_segments+0x8e>
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d106      	bne.n	800b3d2 <tcp_free_acked_segments+0x8e>
 800b3c4:	4b17      	ldr	r3, [pc, #92]	; (800b424 <tcp_free_acked_segments+0xe0>)
 800b3c6:	f240 4261 	movw	r2, #1121	; 0x461
 800b3ca:	491a      	ldr	r1, [pc, #104]	; (800b434 <tcp_free_acked_segments+0xf0>)
 800b3cc:	4817      	ldr	r0, [pc, #92]	; (800b42c <tcp_free_acked_segments+0xe8>)
 800b3ce:	f005 fdab 	bl	8010f28 <iprintf>
  while (seg_list != NULL &&
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d020      	beq.n	800b41a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7fb f8f3 	bl	80065ca <lwip_htonl>
 800b3e4:	4604      	mov	r4, r0
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	891b      	ldrh	r3, [r3, #8]
 800b3ea:	461d      	mov	r5, r3
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	899b      	ldrh	r3, [r3, #12]
 800b3f2:	b29b      	uxth	r3, r3
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f7fb f8d3 	bl	80065a0 <lwip_htons>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	f003 0303 	and.w	r3, r3, #3
 800b402:	2b00      	cmp	r3, #0
 800b404:	d001      	beq.n	800b40a <tcp_free_acked_segments+0xc6>
 800b406:	2301      	movs	r3, #1
 800b408:	e000      	b.n	800b40c <tcp_free_acked_segments+0xc8>
 800b40a:	2300      	movs	r3, #0
 800b40c:	442b      	add	r3, r5
 800b40e:	18e2      	adds	r2, r4, r3
 800b410:	4b09      	ldr	r3, [pc, #36]	; (800b438 <tcp_free_acked_segments+0xf4>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b416:	2b00      	cmp	r3, #0
 800b418:	dd9c      	ble.n	800b354 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b41a:	68bb      	ldr	r3, [r7, #8]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3718      	adds	r7, #24
 800b420:	46bd      	mov	sp, r7
 800b422:	bdb0      	pop	{r4, r5, r7, pc}
 800b424:	080135b8 	.word	0x080135b8
 800b428:	080138a0 	.word	0x080138a0
 800b42c:	08013604 	.word	0x08013604
 800b430:	20008788 	.word	0x20008788
 800b434:	080138c8 	.word	0x080138c8
 800b438:	20008784 	.word	0x20008784

0800b43c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b43c:	b5b0      	push	{r4, r5, r7, lr}
 800b43e:	b094      	sub	sp, #80	; 0x50
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b444:	2300      	movs	r3, #0
 800b446:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d106      	bne.n	800b45c <tcp_receive+0x20>
 800b44e:	4b91      	ldr	r3, [pc, #580]	; (800b694 <tcp_receive+0x258>)
 800b450:	f240 427b 	movw	r2, #1147	; 0x47b
 800b454:	4990      	ldr	r1, [pc, #576]	; (800b698 <tcp_receive+0x25c>)
 800b456:	4891      	ldr	r0, [pc, #580]	; (800b69c <tcp_receive+0x260>)
 800b458:	f005 fd66 	bl	8010f28 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	7d1b      	ldrb	r3, [r3, #20]
 800b460:	2b03      	cmp	r3, #3
 800b462:	d806      	bhi.n	800b472 <tcp_receive+0x36>
 800b464:	4b8b      	ldr	r3, [pc, #556]	; (800b694 <tcp_receive+0x258>)
 800b466:	f240 427c 	movw	r2, #1148	; 0x47c
 800b46a:	498d      	ldr	r1, [pc, #564]	; (800b6a0 <tcp_receive+0x264>)
 800b46c:	488b      	ldr	r0, [pc, #556]	; (800b69c <tcp_receive+0x260>)
 800b46e:	f005 fd5b 	bl	8010f28 <iprintf>

  if (flags & TCP_ACK) {
 800b472:	4b8c      	ldr	r3, [pc, #560]	; (800b6a4 <tcp_receive+0x268>)
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	f003 0310 	and.w	r3, r3, #16
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	f000 8264 	beq.w	800b948 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b486:	461a      	mov	r2, r3
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b48c:	4413      	add	r3, r2
 800b48e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b494:	4b84      	ldr	r3, [pc, #528]	; (800b6a8 <tcp_receive+0x26c>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	1ad3      	subs	r3, r2, r3
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	db1b      	blt.n	800b4d6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b4a2:	4b81      	ldr	r3, [pc, #516]	; (800b6a8 <tcp_receive+0x26c>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d106      	bne.n	800b4b8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b4ae:	4b7f      	ldr	r3, [pc, #508]	; (800b6ac <tcp_receive+0x270>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	1ad3      	subs	r3, r2, r3
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	db0e      	blt.n	800b4d6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b4bc:	4b7b      	ldr	r3, [pc, #492]	; (800b6ac <tcp_receive+0x270>)
 800b4be:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d125      	bne.n	800b510 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b4c4:	4b7a      	ldr	r3, [pc, #488]	; (800b6b0 <tcp_receive+0x274>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	89db      	ldrh	r3, [r3, #14]
 800b4ca:	b29a      	uxth	r2, r3
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d91c      	bls.n	800b510 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b4d6:	4b76      	ldr	r3, [pc, #472]	; (800b6b0 <tcp_receive+0x274>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	89db      	ldrh	r3, [r3, #14]
 800b4dc:	b29a      	uxth	r2, r3
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d205      	bcs.n	800b500 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800b500:	4b69      	ldr	r3, [pc, #420]	; (800b6a8 <tcp_receive+0x26c>)
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800b508:	4b68      	ldr	r3, [pc, #416]	; (800b6ac <tcp_receive+0x270>)
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b510:	4b66      	ldr	r3, [pc, #408]	; (800b6ac <tcp_receive+0x270>)
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b518:	1ad3      	subs	r3, r2, r3
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	dc58      	bgt.n	800b5d0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b51e:	4b65      	ldr	r3, [pc, #404]	; (800b6b4 <tcp_receive+0x278>)
 800b520:	881b      	ldrh	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d14b      	bne.n	800b5be <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800b530:	4413      	add	r3, r2
 800b532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b534:	429a      	cmp	r2, r3
 800b536:	d142      	bne.n	800b5be <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b53e:	2b00      	cmp	r3, #0
 800b540:	db3d      	blt.n	800b5be <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b546:	4b59      	ldr	r3, [pc, #356]	; (800b6ac <tcp_receive+0x270>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d137      	bne.n	800b5be <tcp_receive+0x182>
              found_dupack = 1;
 800b54e:	2301      	movs	r3, #1
 800b550:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b558:	2bff      	cmp	r3, #255	; 0xff
 800b55a:	d007      	beq.n	800b56c <tcp_receive+0x130>
                ++pcb->dupacks;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b562:	3301      	adds	r3, #1
 800b564:	b2da      	uxtb	r2, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b572:	2b03      	cmp	r3, #3
 800b574:	d91b      	bls.n	800b5ae <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b580:	4413      	add	r3, r2
 800b582:	b29a      	uxth	r2, r3
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d30a      	bcc.n	800b5a4 <tcp_receive+0x168>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b598:	4413      	add	r3, r2
 800b59a:	b29a      	uxth	r2, r3
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b5a2:	e004      	b.n	800b5ae <tcp_receive+0x172>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b5b4:	2b02      	cmp	r3, #2
 800b5b6:	d902      	bls.n	800b5be <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f002 fb43 	bl	800dc44 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b5be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f040 8161 	bne.w	800b888 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b5ce:	e15b      	b.n	800b888 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b5d0:	4b36      	ldr	r3, [pc, #216]	; (800b6ac <tcp_receive+0x270>)
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5d8:	1ad3      	subs	r3, r2, r3
 800b5da:	3b01      	subs	r3, #1
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f2c0 814e 	blt.w	800b87e <tcp_receive+0x442>
 800b5e2:	4b32      	ldr	r3, [pc, #200]	; (800b6ac <tcp_receive+0x270>)
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5ea:	1ad3      	subs	r3, r2, r3
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f300 8146 	bgt.w	800b87e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	8b5b      	ldrh	r3, [r3, #26]
 800b5f6:	f003 0304 	and.w	r3, r3, #4
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d010      	beq.n	800b620 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	8b5b      	ldrh	r3, [r3, #26]
 800b602:	f023 0304 	bic.w	r3, r3, #4
 800b606:	b29a      	uxth	r2, r3
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b62e:	10db      	asrs	r3, r3, #3
 800b630:	b21b      	sxth	r3, r3
 800b632:	b29a      	uxth	r2, r3
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	4413      	add	r3, r2
 800b63e:	b29b      	uxth	r3, r3
 800b640:	b21a      	sxth	r2, r3
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b648:	4b18      	ldr	r3, [pc, #96]	; (800b6ac <tcp_receive+0x270>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	b29a      	uxth	r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b652:	b29b      	uxth	r3, r3
 800b654:	1ad3      	subs	r3, r2, r3
 800b656:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b660:	4b12      	ldr	r3, [pc, #72]	; (800b6ac <tcp_receive+0x270>)
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	7d1b      	ldrb	r3, [r3, #20]
 800b66c:	2b03      	cmp	r3, #3
 800b66e:	f240 8097 	bls.w	800b7a0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b67e:	429a      	cmp	r2, r3
 800b680:	d245      	bcs.n	800b70e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	8b5b      	ldrh	r3, [r3, #26]
 800b686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d014      	beq.n	800b6b8 <tcp_receive+0x27c>
 800b68e:	2301      	movs	r3, #1
 800b690:	e013      	b.n	800b6ba <tcp_receive+0x27e>
 800b692:	bf00      	nop
 800b694:	080135b8 	.word	0x080135b8
 800b698:	080138e8 	.word	0x080138e8
 800b69c:	08013604 	.word	0x08013604
 800b6a0:	08013904 	.word	0x08013904
 800b6a4:	2000878c 	.word	0x2000878c
 800b6a8:	20008780 	.word	0x20008780
 800b6ac:	20008784 	.word	0x20008784
 800b6b0:	20008770 	.word	0x20008770
 800b6b4:	2000878a 	.word	0x2000878a
 800b6b8:	2302      	movs	r3, #2
 800b6ba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b6be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b6c2:	b29a      	uxth	r2, r3
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b6c8:	fb12 f303 	smulbb	r3, r2, r3
 800b6cc:	b29b      	uxth	r3, r3
 800b6ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	bf28      	it	cs
 800b6d4:	4613      	movcs	r3, r2
 800b6d6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b6de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b6e0:	4413      	add	r3, r2
 800b6e2:	b29a      	uxth	r2, r3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d309      	bcc.n	800b702 <tcp_receive+0x2c6>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b6f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b6f6:	4413      	add	r3, r2
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b700:	e04e      	b.n	800b7a0 <tcp_receive+0x364>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b708:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b70c:	e048      	b.n	800b7a0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b714:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b716:	4413      	add	r3, r2
 800b718:	b29a      	uxth	r2, r3
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b720:	429a      	cmp	r2, r3
 800b722:	d309      	bcc.n	800b738 <tcp_receive+0x2fc>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b72a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b72c:	4413      	add	r3, r2
 800b72e:	b29a      	uxth	r2, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b736:	e004      	b.n	800b742 <tcp_receive+0x306>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b73e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b74e:	429a      	cmp	r2, r3
 800b750:	d326      	bcc.n	800b7a0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b75e:	1ad3      	subs	r3, r2, r3
 800b760:	b29a      	uxth	r2, r3
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b772:	4413      	add	r3, r2
 800b774:	b29a      	uxth	r2, r3
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d30a      	bcc.n	800b796 <tcp_receive+0x35a>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b78a:	4413      	add	r3, r2
 800b78c:	b29a      	uxth	r2, r3
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b794:	e004      	b.n	800b7a0 <tcp_receive+0x364>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b79c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7a8:	4a98      	ldr	r2, [pc, #608]	; (800ba0c <tcp_receive+0x5d0>)
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f7ff fdca 	bl	800b344 <tcp_free_acked_segments>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7be:	4a94      	ldr	r2, [pc, #592]	; (800ba10 <tcp_receive+0x5d4>)
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f7ff fdbf 	bl	800b344 <tcp_free_acked_segments>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d104      	bne.n	800b7de <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7da:	861a      	strh	r2, [r3, #48]	; 0x30
 800b7dc:	e002      	b.n	800b7e4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d103      	bne.n	800b7fa <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b800:	4b84      	ldr	r3, [pc, #528]	; (800ba14 <tcp_receive+0x5d8>)
 800b802:	881b      	ldrh	r3, [r3, #0]
 800b804:	4413      	add	r3, r2
 800b806:	b29a      	uxth	r2, r3
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	8b5b      	ldrh	r3, [r3, #26]
 800b812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b816:	2b00      	cmp	r3, #0
 800b818:	d035      	beq.n	800b886 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d118      	bne.n	800b854 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00c      	beq.n	800b844 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b832:	68db      	ldr	r3, [r3, #12]
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	4618      	mov	r0, r3
 800b838:	f7fa fec7 	bl	80065ca <lwip_htonl>
 800b83c:	4603      	mov	r3, r0
 800b83e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b840:	2b00      	cmp	r3, #0
 800b842:	dc20      	bgt.n	800b886 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	8b5b      	ldrh	r3, [r3, #26]
 800b848:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b84c:	b29a      	uxth	r2, r3
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b852:	e018      	b.n	800b886 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	4618      	mov	r0, r3
 800b862:	f7fa feb2 	bl	80065ca <lwip_htonl>
 800b866:	4603      	mov	r3, r0
 800b868:	1ae3      	subs	r3, r4, r3
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	dc0b      	bgt.n	800b886 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	8b5b      	ldrh	r3, [r3, #26]
 800b872:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b876:	b29a      	uxth	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b87c:	e003      	b.n	800b886 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f002 fbce 	bl	800e020 <tcp_send_empty_ack>
 800b884:	e000      	b.n	800b888 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b886:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d05b      	beq.n	800b948 <tcp_receive+0x50c>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b894:	4b60      	ldr	r3, [pc, #384]	; (800ba18 <tcp_receive+0x5dc>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	1ad3      	subs	r3, r2, r3
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	da54      	bge.n	800b948 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b89e:	4b5f      	ldr	r3, [pc, #380]	; (800ba1c <tcp_receive+0x5e0>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	b29a      	uxth	r2, r3
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	1ad3      	subs	r3, r2, r3
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b8b2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b8bc:	10db      	asrs	r3, r3, #3
 800b8be:	b21b      	sxth	r3, r3
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b8d0:	b29a      	uxth	r2, r3
 800b8d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b8d6:	4413      	add	r3, r2
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	b21a      	sxth	r2, r3
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800b8e0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	da05      	bge.n	800b8f4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800b8e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b8ec:	425b      	negs	r3, r3
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b8f4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b8fe:	109b      	asrs	r3, r3, #2
 800b900:	b21b      	sxth	r3, r3
 800b902:	b29b      	uxth	r3, r3
 800b904:	1ad3      	subs	r3, r2, r3
 800b906:	b29b      	uxth	r3, r3
 800b908:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b912:	b29a      	uxth	r2, r3
 800b914:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b918:	4413      	add	r3, r2
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	b21a      	sxth	r2, r3
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b928:	10db      	asrs	r3, r3, #3
 800b92a:	b21b      	sxth	r3, r3
 800b92c:	b29a      	uxth	r2, r3
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b934:	b29b      	uxth	r3, r3
 800b936:	4413      	add	r3, r2
 800b938:	b29b      	uxth	r3, r3
 800b93a:	b21a      	sxth	r2, r3
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2200      	movs	r2, #0
 800b946:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b948:	4b35      	ldr	r3, [pc, #212]	; (800ba20 <tcp_receive+0x5e4>)
 800b94a:	881b      	ldrh	r3, [r3, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f000 84e2 	beq.w	800c316 <tcp_receive+0xeda>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	7d1b      	ldrb	r3, [r3, #20]
 800b956:	2b06      	cmp	r3, #6
 800b958:	f200 84dd 	bhi.w	800c316 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b960:	4b30      	ldr	r3, [pc, #192]	; (800ba24 <tcp_receive+0x5e8>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	1ad3      	subs	r3, r2, r3
 800b966:	3b01      	subs	r3, #1
 800b968:	2b00      	cmp	r3, #0
 800b96a:	f2c0 808f 	blt.w	800ba8c <tcp_receive+0x650>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b972:	4b2b      	ldr	r3, [pc, #172]	; (800ba20 <tcp_receive+0x5e4>)
 800b974:	881b      	ldrh	r3, [r3, #0]
 800b976:	4619      	mov	r1, r3
 800b978:	4b2a      	ldr	r3, [pc, #168]	; (800ba24 <tcp_receive+0x5e8>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	440b      	add	r3, r1
 800b97e:	1ad3      	subs	r3, r2, r3
 800b980:	3301      	adds	r3, #1
 800b982:	2b00      	cmp	r3, #0
 800b984:	f300 8082 	bgt.w	800ba8c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b988:	4b27      	ldr	r3, [pc, #156]	; (800ba28 <tcp_receive+0x5ec>)
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b992:	4b24      	ldr	r3, [pc, #144]	; (800ba24 <tcp_receive+0x5e8>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	1ad3      	subs	r3, r2, r3
 800b998:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b99a:	4b23      	ldr	r3, [pc, #140]	; (800ba28 <tcp_receive+0x5ec>)
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d106      	bne.n	800b9b0 <tcp_receive+0x574>
 800b9a2:	4b22      	ldr	r3, [pc, #136]	; (800ba2c <tcp_receive+0x5f0>)
 800b9a4:	f240 5294 	movw	r2, #1428	; 0x594
 800b9a8:	4921      	ldr	r1, [pc, #132]	; (800ba30 <tcp_receive+0x5f4>)
 800b9aa:	4822      	ldr	r0, [pc, #136]	; (800ba34 <tcp_receive+0x5f8>)
 800b9ac:	f005 fabc 	bl	8010f28 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d906      	bls.n	800b9c8 <tcp_receive+0x58c>
 800b9ba:	4b1c      	ldr	r3, [pc, #112]	; (800ba2c <tcp_receive+0x5f0>)
 800b9bc:	f240 5295 	movw	r2, #1429	; 0x595
 800b9c0:	491d      	ldr	r1, [pc, #116]	; (800ba38 <tcp_receive+0x5fc>)
 800b9c2:	481c      	ldr	r0, [pc, #112]	; (800ba34 <tcp_receive+0x5f8>)
 800b9c4:	f005 fab0 	bl	8010f28 <iprintf>
      off = (u16_t)off32;
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b9ce:	4b16      	ldr	r3, [pc, #88]	; (800ba28 <tcp_receive+0x5ec>)
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	891b      	ldrh	r3, [r3, #8]
 800b9d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d906      	bls.n	800b9ea <tcp_receive+0x5ae>
 800b9dc:	4b13      	ldr	r3, [pc, #76]	; (800ba2c <tcp_receive+0x5f0>)
 800b9de:	f240 5297 	movw	r2, #1431	; 0x597
 800b9e2:	4916      	ldr	r1, [pc, #88]	; (800ba3c <tcp_receive+0x600>)
 800b9e4:	4813      	ldr	r0, [pc, #76]	; (800ba34 <tcp_receive+0x5f8>)
 800b9e6:	f005 fa9f 	bl	8010f28 <iprintf>
      inseg.len -= off;
 800b9ea:	4b0f      	ldr	r3, [pc, #60]	; (800ba28 <tcp_receive+0x5ec>)
 800b9ec:	891a      	ldrh	r2, [r3, #8]
 800b9ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b9f2:	1ad3      	subs	r3, r2, r3
 800b9f4:	b29a      	uxth	r2, r3
 800b9f6:	4b0c      	ldr	r3, [pc, #48]	; (800ba28 <tcp_receive+0x5ec>)
 800b9f8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b9fa:	4b0b      	ldr	r3, [pc, #44]	; (800ba28 <tcp_receive+0x5ec>)
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	891a      	ldrh	r2, [r3, #8]
 800ba00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ba04:	1ad3      	subs	r3, r2, r3
 800ba06:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ba08:	e02a      	b.n	800ba60 <tcp_receive+0x624>
 800ba0a:	bf00      	nop
 800ba0c:	08013920 	.word	0x08013920
 800ba10:	08013928 	.word	0x08013928
 800ba14:	20008788 	.word	0x20008788
 800ba18:	20008784 	.word	0x20008784
 800ba1c:	20008748 	.word	0x20008748
 800ba20:	2000878a 	.word	0x2000878a
 800ba24:	20008780 	.word	0x20008780
 800ba28:	20008760 	.word	0x20008760
 800ba2c:	080135b8 	.word	0x080135b8
 800ba30:	08013930 	.word	0x08013930
 800ba34:	08013604 	.word	0x08013604
 800ba38:	08013940 	.word	0x08013940
 800ba3c:	08013950 	.word	0x08013950
        off -= p->len;
 800ba40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba42:	895b      	ldrh	r3, [r3, #10]
 800ba44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ba48:	1ad3      	subs	r3, r2, r3
 800ba4a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ba4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba50:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ba52:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ba54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba56:	2200      	movs	r2, #0
 800ba58:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ba5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ba60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba62:	895b      	ldrh	r3, [r3, #10]
 800ba64:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d8e9      	bhi.n	800ba40 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ba6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ba70:	4619      	mov	r1, r3
 800ba72:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ba74:	f7fc f8d6 	bl	8007c24 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7c:	4a91      	ldr	r2, [pc, #580]	; (800bcc4 <tcp_receive+0x888>)
 800ba7e:	6013      	str	r3, [r2, #0]
 800ba80:	4b91      	ldr	r3, [pc, #580]	; (800bcc8 <tcp_receive+0x88c>)
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	4a8f      	ldr	r2, [pc, #572]	; (800bcc4 <tcp_receive+0x888>)
 800ba86:	6812      	ldr	r2, [r2, #0]
 800ba88:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ba8a:	e00d      	b.n	800baa8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ba8c:	4b8d      	ldr	r3, [pc, #564]	; (800bcc4 <tcp_receive+0x888>)
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba94:	1ad3      	subs	r3, r2, r3
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	da06      	bge.n	800baa8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	8b5b      	ldrh	r3, [r3, #26]
 800ba9e:	f043 0302 	orr.w	r3, r3, #2
 800baa2:	b29a      	uxth	r2, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800baa8:	4b86      	ldr	r3, [pc, #536]	; (800bcc4 <tcp_receive+0x888>)
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab0:	1ad3      	subs	r3, r2, r3
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	f2c0 842a 	blt.w	800c30c <tcp_receive+0xed0>
 800bab8:	4b82      	ldr	r3, [pc, #520]	; (800bcc4 <tcp_receive+0x888>)
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac0:	6879      	ldr	r1, [r7, #4]
 800bac2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bac4:	440b      	add	r3, r1
 800bac6:	1ad3      	subs	r3, r2, r3
 800bac8:	3301      	adds	r3, #1
 800baca:	2b00      	cmp	r3, #0
 800bacc:	f300 841e 	bgt.w	800c30c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bad4:	4b7b      	ldr	r3, [pc, #492]	; (800bcc4 <tcp_receive+0x888>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	429a      	cmp	r2, r3
 800bada:	f040 829a 	bne.w	800c012 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800bade:	4b7a      	ldr	r3, [pc, #488]	; (800bcc8 <tcp_receive+0x88c>)
 800bae0:	891c      	ldrh	r4, [r3, #8]
 800bae2:	4b79      	ldr	r3, [pc, #484]	; (800bcc8 <tcp_receive+0x88c>)
 800bae4:	68db      	ldr	r3, [r3, #12]
 800bae6:	899b      	ldrh	r3, [r3, #12]
 800bae8:	b29b      	uxth	r3, r3
 800baea:	4618      	mov	r0, r3
 800baec:	f7fa fd58 	bl	80065a0 <lwip_htons>
 800baf0:	4603      	mov	r3, r0
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	f003 0303 	and.w	r3, r3, #3
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d001      	beq.n	800bb00 <tcp_receive+0x6c4>
 800bafc:	2301      	movs	r3, #1
 800bafe:	e000      	b.n	800bb02 <tcp_receive+0x6c6>
 800bb00:	2300      	movs	r3, #0
 800bb02:	4423      	add	r3, r4
 800bb04:	b29a      	uxth	r2, r3
 800bb06:	4b71      	ldr	r3, [pc, #452]	; (800bccc <tcp_receive+0x890>)
 800bb08:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bb0e:	4b6f      	ldr	r3, [pc, #444]	; (800bccc <tcp_receive+0x890>)
 800bb10:	881b      	ldrh	r3, [r3, #0]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d275      	bcs.n	800bc02 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bb16:	4b6c      	ldr	r3, [pc, #432]	; (800bcc8 <tcp_receive+0x88c>)
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	899b      	ldrh	r3, [r3, #12]
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7fa fd3e 	bl	80065a0 <lwip_htons>
 800bb24:	4603      	mov	r3, r0
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	f003 0301 	and.w	r3, r3, #1
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d01f      	beq.n	800bb70 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800bb30:	4b65      	ldr	r3, [pc, #404]	; (800bcc8 <tcp_receive+0x88c>)
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	899b      	ldrh	r3, [r3, #12]
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	b21b      	sxth	r3, r3
 800bb3a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bb3e:	b21c      	sxth	r4, r3
 800bb40:	4b61      	ldr	r3, [pc, #388]	; (800bcc8 <tcp_receive+0x88c>)
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	899b      	ldrh	r3, [r3, #12]
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7fa fd29 	bl	80065a0 <lwip_htons>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7fa fd20 	bl	80065a0 <lwip_htons>
 800bb60:	4603      	mov	r3, r0
 800bb62:	b21b      	sxth	r3, r3
 800bb64:	4323      	orrs	r3, r4
 800bb66:	b21a      	sxth	r2, r3
 800bb68:	4b57      	ldr	r3, [pc, #348]	; (800bcc8 <tcp_receive+0x88c>)
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	b292      	uxth	r2, r2
 800bb6e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bb74:	4b54      	ldr	r3, [pc, #336]	; (800bcc8 <tcp_receive+0x88c>)
 800bb76:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bb78:	4b53      	ldr	r3, [pc, #332]	; (800bcc8 <tcp_receive+0x88c>)
 800bb7a:	68db      	ldr	r3, [r3, #12]
 800bb7c:	899b      	ldrh	r3, [r3, #12]
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7fa fd0d 	bl	80065a0 <lwip_htons>
 800bb86:	4603      	mov	r3, r0
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	f003 0302 	and.w	r3, r3, #2
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d005      	beq.n	800bb9e <tcp_receive+0x762>
            inseg.len -= 1;
 800bb92:	4b4d      	ldr	r3, [pc, #308]	; (800bcc8 <tcp_receive+0x88c>)
 800bb94:	891b      	ldrh	r3, [r3, #8]
 800bb96:	3b01      	subs	r3, #1
 800bb98:	b29a      	uxth	r2, r3
 800bb9a:	4b4b      	ldr	r3, [pc, #300]	; (800bcc8 <tcp_receive+0x88c>)
 800bb9c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800bb9e:	4b4a      	ldr	r3, [pc, #296]	; (800bcc8 <tcp_receive+0x88c>)
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	4a49      	ldr	r2, [pc, #292]	; (800bcc8 <tcp_receive+0x88c>)
 800bba4:	8912      	ldrh	r2, [r2, #8]
 800bba6:	4611      	mov	r1, r2
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f7fb ff3b 	bl	8007a24 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800bbae:	4b46      	ldr	r3, [pc, #280]	; (800bcc8 <tcp_receive+0x88c>)
 800bbb0:	891c      	ldrh	r4, [r3, #8]
 800bbb2:	4b45      	ldr	r3, [pc, #276]	; (800bcc8 <tcp_receive+0x88c>)
 800bbb4:	68db      	ldr	r3, [r3, #12]
 800bbb6:	899b      	ldrh	r3, [r3, #12]
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7fa fcf0 	bl	80065a0 <lwip_htons>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	f003 0303 	and.w	r3, r3, #3
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d001      	beq.n	800bbd0 <tcp_receive+0x794>
 800bbcc:	2301      	movs	r3, #1
 800bbce:	e000      	b.n	800bbd2 <tcp_receive+0x796>
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	4423      	add	r3, r4
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	4b3d      	ldr	r3, [pc, #244]	; (800bccc <tcp_receive+0x890>)
 800bbd8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bbda:	4b3c      	ldr	r3, [pc, #240]	; (800bccc <tcp_receive+0x890>)
 800bbdc:	881b      	ldrh	r3, [r3, #0]
 800bbde:	461a      	mov	r2, r3
 800bbe0:	4b38      	ldr	r3, [pc, #224]	; (800bcc4 <tcp_receive+0x888>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	441a      	add	r2, r3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbea:	6879      	ldr	r1, [r7, #4]
 800bbec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bbee:	440b      	add	r3, r1
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d006      	beq.n	800bc02 <tcp_receive+0x7c6>
 800bbf4:	4b36      	ldr	r3, [pc, #216]	; (800bcd0 <tcp_receive+0x894>)
 800bbf6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800bbfa:	4936      	ldr	r1, [pc, #216]	; (800bcd4 <tcp_receive+0x898>)
 800bbfc:	4836      	ldr	r0, [pc, #216]	; (800bcd8 <tcp_receive+0x89c>)
 800bbfe:	f005 f993 	bl	8010f28 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	f000 80e7 	beq.w	800bdda <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bc0c:	4b2e      	ldr	r3, [pc, #184]	; (800bcc8 <tcp_receive+0x88c>)
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	899b      	ldrh	r3, [r3, #12]
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7fa fcc3 	bl	80065a0 <lwip_htons>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	f003 0301 	and.w	r3, r3, #1
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d010      	beq.n	800bc48 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800bc26:	e00a      	b.n	800bc3e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc2c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800bc38:	68f8      	ldr	r0, [r7, #12]
 800bc3a:	f7fd fca6 	bl	800958a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d1f0      	bne.n	800bc28 <tcp_receive+0x7ec>
 800bc46:	e0c8      	b.n	800bdda <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800bc4e:	e052      	b.n	800bcf6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bc50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	899b      	ldrh	r3, [r3, #12]
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7fa fca1 	bl	80065a0 <lwip_htons>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	f003 0301 	and.w	r3, r3, #1
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d03d      	beq.n	800bce6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800bc6a:	4b17      	ldr	r3, [pc, #92]	; (800bcc8 <tcp_receive+0x88c>)
 800bc6c:	68db      	ldr	r3, [r3, #12]
 800bc6e:	899b      	ldrh	r3, [r3, #12]
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7fa fc94 	bl	80065a0 <lwip_htons>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d130      	bne.n	800bce6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800bc84:	4b10      	ldr	r3, [pc, #64]	; (800bcc8 <tcp_receive+0x88c>)
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	899b      	ldrh	r3, [r3, #12]
 800bc8a:	b29c      	uxth	r4, r3
 800bc8c:	2001      	movs	r0, #1
 800bc8e:	f7fa fc87 	bl	80065a0 <lwip_htons>
 800bc92:	4603      	mov	r3, r0
 800bc94:	461a      	mov	r2, r3
 800bc96:	4b0c      	ldr	r3, [pc, #48]	; (800bcc8 <tcp_receive+0x88c>)
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	4322      	orrs	r2, r4
 800bc9c:	b292      	uxth	r2, r2
 800bc9e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800bca0:	4b09      	ldr	r3, [pc, #36]	; (800bcc8 <tcp_receive+0x88c>)
 800bca2:	891c      	ldrh	r4, [r3, #8]
 800bca4:	4b08      	ldr	r3, [pc, #32]	; (800bcc8 <tcp_receive+0x88c>)
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	899b      	ldrh	r3, [r3, #12]
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	4618      	mov	r0, r3
 800bcae:	f7fa fc77 	bl	80065a0 <lwip_htons>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	f003 0303 	and.w	r3, r3, #3
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00e      	beq.n	800bcdc <tcp_receive+0x8a0>
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	e00d      	b.n	800bcde <tcp_receive+0x8a2>
 800bcc2:	bf00      	nop
 800bcc4:	20008780 	.word	0x20008780
 800bcc8:	20008760 	.word	0x20008760
 800bccc:	2000878a 	.word	0x2000878a
 800bcd0:	080135b8 	.word	0x080135b8
 800bcd4:	08013960 	.word	0x08013960
 800bcd8:	08013604 	.word	0x08013604
 800bcdc:	2300      	movs	r3, #0
 800bcde:	4423      	add	r3, r4
 800bce0:	b29a      	uxth	r2, r3
 800bce2:	4b98      	ldr	r3, [pc, #608]	; (800bf44 <tcp_receive+0xb08>)
 800bce4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800bce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bce8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800bcea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800bcf0:	6938      	ldr	r0, [r7, #16]
 800bcf2:	f7fd fc4a 	bl	800958a <tcp_seg_free>
            while (next &&
 800bcf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d00e      	beq.n	800bd1a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800bcfc:	4b91      	ldr	r3, [pc, #580]	; (800bf44 <tcp_receive+0xb08>)
 800bcfe:	881b      	ldrh	r3, [r3, #0]
 800bd00:	461a      	mov	r2, r3
 800bd02:	4b91      	ldr	r3, [pc, #580]	; (800bf48 <tcp_receive+0xb0c>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	441a      	add	r2, r3
 800bd08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd10:	8909      	ldrh	r1, [r1, #8]
 800bd12:	440b      	add	r3, r1
 800bd14:	1ad3      	subs	r3, r2, r3
            while (next &&
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	da9a      	bge.n	800bc50 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800bd1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d059      	beq.n	800bdd4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800bd20:	4b88      	ldr	r3, [pc, #544]	; (800bf44 <tcp_receive+0xb08>)
 800bd22:	881b      	ldrh	r3, [r3, #0]
 800bd24:	461a      	mov	r2, r3
 800bd26:	4b88      	ldr	r3, [pc, #544]	; (800bf48 <tcp_receive+0xb0c>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	441a      	add	r2, r3
 800bd2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd2e:	68db      	ldr	r3, [r3, #12]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	1ad3      	subs	r3, r2, r3
            if (next &&
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	dd4d      	ble.n	800bdd4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800bd38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	b29a      	uxth	r2, r3
 800bd40:	4b81      	ldr	r3, [pc, #516]	; (800bf48 <tcp_receive+0xb0c>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	1ad3      	subs	r3, r2, r3
 800bd48:	b29a      	uxth	r2, r3
 800bd4a:	4b80      	ldr	r3, [pc, #512]	; (800bf4c <tcp_receive+0xb10>)
 800bd4c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bd4e:	4b7f      	ldr	r3, [pc, #508]	; (800bf4c <tcp_receive+0xb10>)
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	899b      	ldrh	r3, [r3, #12]
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7fa fc22 	bl	80065a0 <lwip_htons>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	f003 0302 	and.w	r3, r3, #2
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d005      	beq.n	800bd74 <tcp_receive+0x938>
                inseg.len -= 1;
 800bd68:	4b78      	ldr	r3, [pc, #480]	; (800bf4c <tcp_receive+0xb10>)
 800bd6a:	891b      	ldrh	r3, [r3, #8]
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	b29a      	uxth	r2, r3
 800bd70:	4b76      	ldr	r3, [pc, #472]	; (800bf4c <tcp_receive+0xb10>)
 800bd72:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800bd74:	4b75      	ldr	r3, [pc, #468]	; (800bf4c <tcp_receive+0xb10>)
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	4a74      	ldr	r2, [pc, #464]	; (800bf4c <tcp_receive+0xb10>)
 800bd7a:	8912      	ldrh	r2, [r2, #8]
 800bd7c:	4611      	mov	r1, r2
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7fb fe50 	bl	8007a24 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800bd84:	4b71      	ldr	r3, [pc, #452]	; (800bf4c <tcp_receive+0xb10>)
 800bd86:	891c      	ldrh	r4, [r3, #8]
 800bd88:	4b70      	ldr	r3, [pc, #448]	; (800bf4c <tcp_receive+0xb10>)
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	899b      	ldrh	r3, [r3, #12]
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7fa fc05 	bl	80065a0 <lwip_htons>
 800bd96:	4603      	mov	r3, r0
 800bd98:	b2db      	uxtb	r3, r3
 800bd9a:	f003 0303 	and.w	r3, r3, #3
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d001      	beq.n	800bda6 <tcp_receive+0x96a>
 800bda2:	2301      	movs	r3, #1
 800bda4:	e000      	b.n	800bda8 <tcp_receive+0x96c>
 800bda6:	2300      	movs	r3, #0
 800bda8:	4423      	add	r3, r4
 800bdaa:	b29a      	uxth	r2, r3
 800bdac:	4b65      	ldr	r3, [pc, #404]	; (800bf44 <tcp_receive+0xb08>)
 800bdae:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800bdb0:	4b64      	ldr	r3, [pc, #400]	; (800bf44 <tcp_receive+0xb08>)
 800bdb2:	881b      	ldrh	r3, [r3, #0]
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	4b64      	ldr	r3, [pc, #400]	; (800bf48 <tcp_receive+0xb0c>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	441a      	add	r2, r3
 800bdbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d006      	beq.n	800bdd4 <tcp_receive+0x998>
 800bdc6:	4b62      	ldr	r3, [pc, #392]	; (800bf50 <tcp_receive+0xb14>)
 800bdc8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800bdcc:	4961      	ldr	r1, [pc, #388]	; (800bf54 <tcp_receive+0xb18>)
 800bdce:	4862      	ldr	r0, [pc, #392]	; (800bf58 <tcp_receive+0xb1c>)
 800bdd0:	f005 f8aa 	bl	8010f28 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bdd8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800bdda:	4b5a      	ldr	r3, [pc, #360]	; (800bf44 <tcp_receive+0xb08>)
 800bddc:	881b      	ldrh	r3, [r3, #0]
 800bdde:	461a      	mov	r2, r3
 800bde0:	4b59      	ldr	r3, [pc, #356]	; (800bf48 <tcp_receive+0xb0c>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	441a      	add	r2, r3
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bdee:	4b55      	ldr	r3, [pc, #340]	; (800bf44 <tcp_receive+0xb08>)
 800bdf0:	881b      	ldrh	r3, [r3, #0]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d206      	bcs.n	800be04 <tcp_receive+0x9c8>
 800bdf6:	4b56      	ldr	r3, [pc, #344]	; (800bf50 <tcp_receive+0xb14>)
 800bdf8:	f240 6207 	movw	r2, #1543	; 0x607
 800bdfc:	4957      	ldr	r1, [pc, #348]	; (800bf5c <tcp_receive+0xb20>)
 800bdfe:	4856      	ldr	r0, [pc, #344]	; (800bf58 <tcp_receive+0xb1c>)
 800be00:	f005 f892 	bl	8010f28 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800be08:	4b4e      	ldr	r3, [pc, #312]	; (800bf44 <tcp_receive+0xb08>)
 800be0a:	881b      	ldrh	r3, [r3, #0]
 800be0c:	1ad3      	subs	r3, r2, r3
 800be0e:	b29a      	uxth	r2, r3
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f7fc fe93 	bl	8008b40 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800be1a:	4b4c      	ldr	r3, [pc, #304]	; (800bf4c <tcp_receive+0xb10>)
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	891b      	ldrh	r3, [r3, #8]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d006      	beq.n	800be32 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800be24:	4b49      	ldr	r3, [pc, #292]	; (800bf4c <tcp_receive+0xb10>)
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	4a4d      	ldr	r2, [pc, #308]	; (800bf60 <tcp_receive+0xb24>)
 800be2a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800be2c:	4b47      	ldr	r3, [pc, #284]	; (800bf4c <tcp_receive+0xb10>)
 800be2e:	2200      	movs	r2, #0
 800be30:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800be32:	4b46      	ldr	r3, [pc, #280]	; (800bf4c <tcp_receive+0xb10>)
 800be34:	68db      	ldr	r3, [r3, #12]
 800be36:	899b      	ldrh	r3, [r3, #12]
 800be38:	b29b      	uxth	r3, r3
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7fa fbb0 	bl	80065a0 <lwip_htons>
 800be40:	4603      	mov	r3, r0
 800be42:	b2db      	uxtb	r3, r3
 800be44:	f003 0301 	and.w	r3, r3, #1
 800be48:	2b00      	cmp	r3, #0
 800be4a:	f000 80b8 	beq.w	800bfbe <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800be4e:	4b45      	ldr	r3, [pc, #276]	; (800bf64 <tcp_receive+0xb28>)
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	f043 0320 	orr.w	r3, r3, #32
 800be56:	b2da      	uxtb	r2, r3
 800be58:	4b42      	ldr	r3, [pc, #264]	; (800bf64 <tcp_receive+0xb28>)
 800be5a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800be5c:	e0af      	b.n	800bfbe <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be62:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	4a36      	ldr	r2, [pc, #216]	; (800bf48 <tcp_receive+0xb0c>)
 800be6e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	891b      	ldrh	r3, [r3, #8]
 800be74:	461c      	mov	r4, r3
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	899b      	ldrh	r3, [r3, #12]
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	4618      	mov	r0, r3
 800be80:	f7fa fb8e 	bl	80065a0 <lwip_htons>
 800be84:	4603      	mov	r3, r0
 800be86:	b2db      	uxtb	r3, r3
 800be88:	f003 0303 	and.w	r3, r3, #3
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d001      	beq.n	800be94 <tcp_receive+0xa58>
 800be90:	2301      	movs	r3, #1
 800be92:	e000      	b.n	800be96 <tcp_receive+0xa5a>
 800be94:	2300      	movs	r3, #0
 800be96:	191a      	adds	r2, r3, r4
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9c:	441a      	add	r2, r3
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bea6:	461c      	mov	r4, r3
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	891b      	ldrh	r3, [r3, #8]
 800beac:	461d      	mov	r5, r3
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	68db      	ldr	r3, [r3, #12]
 800beb2:	899b      	ldrh	r3, [r3, #12]
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7fa fb72 	bl	80065a0 <lwip_htons>
 800bebc:	4603      	mov	r3, r0
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	f003 0303 	and.w	r3, r3, #3
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d001      	beq.n	800becc <tcp_receive+0xa90>
 800bec8:	2301      	movs	r3, #1
 800beca:	e000      	b.n	800bece <tcp_receive+0xa92>
 800becc:	2300      	movs	r3, #0
 800bece:	442b      	add	r3, r5
 800bed0:	429c      	cmp	r4, r3
 800bed2:	d206      	bcs.n	800bee2 <tcp_receive+0xaa6>
 800bed4:	4b1e      	ldr	r3, [pc, #120]	; (800bf50 <tcp_receive+0xb14>)
 800bed6:	f240 622b 	movw	r2, #1579	; 0x62b
 800beda:	4923      	ldr	r1, [pc, #140]	; (800bf68 <tcp_receive+0xb2c>)
 800bedc:	481e      	ldr	r0, [pc, #120]	; (800bf58 <tcp_receive+0xb1c>)
 800bede:	f005 f823 	bl	8010f28 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	891b      	ldrh	r3, [r3, #8]
 800bee6:	461c      	mov	r4, r3
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	899b      	ldrh	r3, [r3, #12]
 800beee:	b29b      	uxth	r3, r3
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7fa fb55 	bl	80065a0 <lwip_htons>
 800bef6:	4603      	mov	r3, r0
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	f003 0303 	and.w	r3, r3, #3
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d001      	beq.n	800bf06 <tcp_receive+0xaca>
 800bf02:	2301      	movs	r3, #1
 800bf04:	e000      	b.n	800bf08 <tcp_receive+0xacc>
 800bf06:	2300      	movs	r3, #0
 800bf08:	1919      	adds	r1, r3, r4
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bf0e:	b28b      	uxth	r3, r1
 800bf10:	1ad3      	subs	r3, r2, r3
 800bf12:	b29a      	uxth	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f7fc fe11 	bl	8008b40 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	891b      	ldrh	r3, [r3, #8]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d028      	beq.n	800bf7a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800bf28:	4b0d      	ldr	r3, [pc, #52]	; (800bf60 <tcp_receive+0xb24>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d01d      	beq.n	800bf6c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800bf30:	4b0b      	ldr	r3, [pc, #44]	; (800bf60 <tcp_receive+0xb24>)
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	4619      	mov	r1, r3
 800bf3a:	4610      	mov	r0, r2
 800bf3c:	f7fb ffba 	bl	8007eb4 <pbuf_cat>
 800bf40:	e018      	b.n	800bf74 <tcp_receive+0xb38>
 800bf42:	bf00      	nop
 800bf44:	2000878a 	.word	0x2000878a
 800bf48:	20008780 	.word	0x20008780
 800bf4c:	20008760 	.word	0x20008760
 800bf50:	080135b8 	.word	0x080135b8
 800bf54:	08013998 	.word	0x08013998
 800bf58:	08013604 	.word	0x08013604
 800bf5c:	080139d4 	.word	0x080139d4
 800bf60:	20008790 	.word	0x20008790
 800bf64:	2000878d 	.word	0x2000878d
 800bf68:	080139f4 	.word	0x080139f4
            } else {
              recv_data = cseg->p;
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	4a70      	ldr	r2, [pc, #448]	; (800c134 <tcp_receive+0xcf8>)
 800bf72:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	2200      	movs	r2, #0
 800bf78:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	68db      	ldr	r3, [r3, #12]
 800bf7e:	899b      	ldrh	r3, [r3, #12]
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7fa fb0c 	bl	80065a0 <lwip_htons>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	f003 0301 	and.w	r3, r3, #1
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d00d      	beq.n	800bfb0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800bf94:	4b68      	ldr	r3, [pc, #416]	; (800c138 <tcp_receive+0xcfc>)
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	f043 0320 	orr.w	r3, r3, #32
 800bf9c:	b2da      	uxtb	r2, r3
 800bf9e:	4b66      	ldr	r3, [pc, #408]	; (800c138 <tcp_receive+0xcfc>)
 800bfa0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	7d1b      	ldrb	r3, [r3, #20]
 800bfa6:	2b04      	cmp	r3, #4
 800bfa8:	d102      	bne.n	800bfb0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2207      	movs	r2, #7
 800bfae:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	681a      	ldr	r2, [r3, #0]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800bfb8:	68b8      	ldr	r0, [r7, #8]
 800bfba:	f7fd fae6 	bl	800958a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d008      	beq.n	800bfd8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfca:	68db      	ldr	r3, [r3, #12]
 800bfcc:	685a      	ldr	r2, [r3, #4]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	f43f af43 	beq.w	800be5e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	8b5b      	ldrh	r3, [r3, #26]
 800bfdc:	f003 0301 	and.w	r3, r3, #1
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d00e      	beq.n	800c002 <tcp_receive+0xbc6>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	8b5b      	ldrh	r3, [r3, #26]
 800bfe8:	f023 0301 	bic.w	r3, r3, #1
 800bfec:	b29a      	uxth	r2, r3
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	835a      	strh	r2, [r3, #26]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	8b5b      	ldrh	r3, [r3, #26]
 800bff6:	f043 0302 	orr.w	r3, r3, #2
 800bffa:	b29a      	uxth	r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c000:	e188      	b.n	800c314 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	8b5b      	ldrh	r3, [r3, #26]
 800c006:	f043 0301 	orr.w	r3, r3, #1
 800c00a:	b29a      	uxth	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c010:	e180      	b.n	800c314 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c016:	2b00      	cmp	r3, #0
 800c018:	d106      	bne.n	800c028 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c01a:	4848      	ldr	r0, [pc, #288]	; (800c13c <tcp_receive+0xd00>)
 800c01c:	f7fd faec 	bl	80095f8 <tcp_seg_copy>
 800c020:	4602      	mov	r2, r0
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	675a      	str	r2, [r3, #116]	; 0x74
 800c026:	e16d      	b.n	800c304 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c028:	2300      	movs	r3, #0
 800c02a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c030:	63bb      	str	r3, [r7, #56]	; 0x38
 800c032:	e157      	b.n	800c2e4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800c034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	685a      	ldr	r2, [r3, #4]
 800c03a:	4b41      	ldr	r3, [pc, #260]	; (800c140 <tcp_receive+0xd04>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d11d      	bne.n	800c07e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c042:	4b3e      	ldr	r3, [pc, #248]	; (800c13c <tcp_receive+0xd00>)
 800c044:	891a      	ldrh	r2, [r3, #8]
 800c046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c048:	891b      	ldrh	r3, [r3, #8]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	f240 814f 	bls.w	800c2ee <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c050:	483a      	ldr	r0, [pc, #232]	; (800c13c <tcp_receive+0xd00>)
 800c052:	f7fd fad1 	bl	80095f8 <tcp_seg_copy>
 800c056:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	f000 8149 	beq.w	800c2f2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800c060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c062:	2b00      	cmp	r3, #0
 800c064:	d003      	beq.n	800c06e <tcp_receive+0xc32>
                    prev->next = cseg;
 800c066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c068:	697a      	ldr	r2, [r7, #20]
 800c06a:	601a      	str	r2, [r3, #0]
 800c06c:	e002      	b.n	800c074 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	697a      	ldr	r2, [r7, #20]
 800c072:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c074:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c076:	6978      	ldr	r0, [r7, #20]
 800c078:	f7ff f8dc 	bl	800b234 <tcp_oos_insert_segment>
                }
                break;
 800c07c:	e139      	b.n	800c2f2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c07e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c080:	2b00      	cmp	r3, #0
 800c082:	d117      	bne.n	800c0b4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c084:	4b2e      	ldr	r3, [pc, #184]	; (800c140 <tcp_receive+0xd04>)
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08a:	68db      	ldr	r3, [r3, #12]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	1ad3      	subs	r3, r2, r3
 800c090:	2b00      	cmp	r3, #0
 800c092:	da57      	bge.n	800c144 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c094:	4829      	ldr	r0, [pc, #164]	; (800c13c <tcp_receive+0xd00>)
 800c096:	f7fd faaf 	bl	80095f8 <tcp_seg_copy>
 800c09a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c09c:	69bb      	ldr	r3, [r7, #24]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	f000 8129 	beq.w	800c2f6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	69ba      	ldr	r2, [r7, #24]
 800c0a8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c0aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c0ac:	69b8      	ldr	r0, [r7, #24]
 800c0ae:	f7ff f8c1 	bl	800b234 <tcp_oos_insert_segment>
                  }
                  break;
 800c0b2:	e120      	b.n	800c2f6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c0b4:	4b22      	ldr	r3, [pc, #136]	; (800c140 <tcp_receive+0xd04>)
 800c0b6:	681a      	ldr	r2, [r3, #0]
 800c0b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ba:	68db      	ldr	r3, [r3, #12]
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	1ad3      	subs	r3, r2, r3
 800c0c0:	3b01      	subs	r3, #1
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	db3e      	blt.n	800c144 <tcp_receive+0xd08>
 800c0c6:	4b1e      	ldr	r3, [pc, #120]	; (800c140 <tcp_receive+0xd04>)
 800c0c8:	681a      	ldr	r2, [r3, #0]
 800c0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0cc:	68db      	ldr	r3, [r3, #12]
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	1ad3      	subs	r3, r2, r3
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	dc35      	bgt.n	800c144 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c0d8:	4818      	ldr	r0, [pc, #96]	; (800c13c <tcp_receive+0xd00>)
 800c0da:	f7fd fa8d 	bl	80095f8 <tcp_seg_copy>
 800c0de:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c0e0:	69fb      	ldr	r3, [r7, #28]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	f000 8109 	beq.w	800c2fa <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0f0:	8912      	ldrh	r2, [r2, #8]
 800c0f2:	441a      	add	r2, r3
 800c0f4:	4b12      	ldr	r3, [pc, #72]	; (800c140 <tcp_receive+0xd04>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	1ad3      	subs	r3, r2, r3
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	dd12      	ble.n	800c124 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c0fe:	4b10      	ldr	r3, [pc, #64]	; (800c140 <tcp_receive+0xd04>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	b29a      	uxth	r2, r3
 800c104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c106:	68db      	ldr	r3, [r3, #12]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	1ad3      	subs	r3, r2, r3
 800c10e:	b29a      	uxth	r2, r3
 800c110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c112:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c116:	685a      	ldr	r2, [r3, #4]
 800c118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c11a:	891b      	ldrh	r3, [r3, #8]
 800c11c:	4619      	mov	r1, r3
 800c11e:	4610      	mov	r0, r2
 800c120:	f7fb fc80 	bl	8007a24 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c126:	69fa      	ldr	r2, [r7, #28]
 800c128:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c12a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c12c:	69f8      	ldr	r0, [r7, #28]
 800c12e:	f7ff f881 	bl	800b234 <tcp_oos_insert_segment>
                  }
                  break;
 800c132:	e0e2      	b.n	800c2fa <tcp_receive+0xebe>
 800c134:	20008790 	.word	0x20008790
 800c138:	2000878d 	.word	0x2000878d
 800c13c:	20008760 	.word	0x20008760
 800c140:	20008780 	.word	0x20008780
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c146:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	f040 80c6 	bne.w	800c2de <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c152:	4b80      	ldr	r3, [pc, #512]	; (800c354 <tcp_receive+0xf18>)
 800c154:	681a      	ldr	r2, [r3, #0]
 800c156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c15e:	2b00      	cmp	r3, #0
 800c160:	f340 80bd 	ble.w	800c2de <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	899b      	ldrh	r3, [r3, #12]
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7fa fa17 	bl	80065a0 <lwip_htons>
 800c172:	4603      	mov	r3, r0
 800c174:	b2db      	uxtb	r3, r3
 800c176:	f003 0301 	and.w	r3, r3, #1
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	f040 80bf 	bne.w	800c2fe <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c180:	4875      	ldr	r0, [pc, #468]	; (800c358 <tcp_receive+0xf1c>)
 800c182:	f7fd fa39 	bl	80095f8 <tcp_seg_copy>
 800c186:	4602      	mov	r2, r0
 800c188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	f000 80b6 	beq.w	800c302 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c19e:	8912      	ldrh	r2, [r2, #8]
 800c1a0:	441a      	add	r2, r3
 800c1a2:	4b6c      	ldr	r3, [pc, #432]	; (800c354 <tcp_receive+0xf18>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	1ad3      	subs	r3, r2, r3
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	dd12      	ble.n	800c1d2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c1ac:	4b69      	ldr	r3, [pc, #420]	; (800c354 <tcp_receive+0xf18>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	b29a      	uxth	r2, r3
 800c1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b4:	68db      	ldr	r3, [r3, #12]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	1ad3      	subs	r3, r2, r3
 800c1bc:	b29a      	uxth	r2, r3
 800c1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c4:	685a      	ldr	r2, [r3, #4]
 800c1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c8:	891b      	ldrh	r3, [r3, #8]
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	4610      	mov	r0, r2
 800c1ce:	f7fb fc29 	bl	8007a24 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c1d2:	4b62      	ldr	r3, [pc, #392]	; (800c35c <tcp_receive+0xf20>)
 800c1d4:	881b      	ldrh	r3, [r3, #0]
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	4b5e      	ldr	r3, [pc, #376]	; (800c354 <tcp_receive+0xf18>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	441a      	add	r2, r3
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e2:	6879      	ldr	r1, [r7, #4]
 800c1e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c1e6:	440b      	add	r3, r1
 800c1e8:	1ad3      	subs	r3, r2, r3
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	f340 8089 	ble.w	800c302 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	68db      	ldr	r3, [r3, #12]
 800c1f6:	899b      	ldrh	r3, [r3, #12]
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7fa f9d0 	bl	80065a0 <lwip_htons>
 800c200:	4603      	mov	r3, r0
 800c202:	b2db      	uxtb	r3, r3
 800c204:	f003 0301 	and.w	r3, r3, #1
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d022      	beq.n	800c252 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	899b      	ldrh	r3, [r3, #12]
 800c214:	b29b      	uxth	r3, r3
 800c216:	b21b      	sxth	r3, r3
 800c218:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c21c:	b21c      	sxth	r4, r3
 800c21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	899b      	ldrh	r3, [r3, #12]
 800c226:	b29b      	uxth	r3, r3
 800c228:	4618      	mov	r0, r3
 800c22a:	f7fa f9b9 	bl	80065a0 <lwip_htons>
 800c22e:	4603      	mov	r3, r0
 800c230:	b2db      	uxtb	r3, r3
 800c232:	b29b      	uxth	r3, r3
 800c234:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c238:	b29b      	uxth	r3, r3
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7fa f9b0 	bl	80065a0 <lwip_htons>
 800c240:	4603      	mov	r3, r0
 800c242:	b21b      	sxth	r3, r3
 800c244:	4323      	orrs	r3, r4
 800c246:	b21a      	sxth	r2, r3
 800c248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	b292      	uxth	r2, r2
 800c250:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c256:	b29a      	uxth	r2, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c25c:	4413      	add	r3, r2
 800c25e:	b299      	uxth	r1, r3
 800c260:	4b3c      	ldr	r3, [pc, #240]	; (800c354 <tcp_receive+0xf18>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	b29a      	uxth	r2, r3
 800c266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	1a8a      	subs	r2, r1, r2
 800c26c:	b292      	uxth	r2, r2
 800c26e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	685a      	ldr	r2, [r3, #4]
 800c276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	891b      	ldrh	r3, [r3, #8]
 800c27c:	4619      	mov	r1, r3
 800c27e:	4610      	mov	r0, r2
 800c280:	f7fb fbd0 	bl	8007a24 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	891c      	ldrh	r4, [r3, #8]
 800c28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	68db      	ldr	r3, [r3, #12]
 800c290:	899b      	ldrh	r3, [r3, #12]
 800c292:	b29b      	uxth	r3, r3
 800c294:	4618      	mov	r0, r3
 800c296:	f7fa f983 	bl	80065a0 <lwip_htons>
 800c29a:	4603      	mov	r3, r0
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	f003 0303 	and.w	r3, r3, #3
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d001      	beq.n	800c2aa <tcp_receive+0xe6e>
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	e000      	b.n	800c2ac <tcp_receive+0xe70>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	4423      	add	r3, r4
 800c2ae:	b29a      	uxth	r2, r3
 800c2b0:	4b2a      	ldr	r3, [pc, #168]	; (800c35c <tcp_receive+0xf20>)
 800c2b2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c2b4:	4b29      	ldr	r3, [pc, #164]	; (800c35c <tcp_receive+0xf20>)
 800c2b6:	881b      	ldrh	r3, [r3, #0]
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	4b26      	ldr	r3, [pc, #152]	; (800c354 <tcp_receive+0xf18>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	441a      	add	r2, r3
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c4:	6879      	ldr	r1, [r7, #4]
 800c2c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c2c8:	440b      	add	r3, r1
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d019      	beq.n	800c302 <tcp_receive+0xec6>
 800c2ce:	4b24      	ldr	r3, [pc, #144]	; (800c360 <tcp_receive+0xf24>)
 800c2d0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c2d4:	4923      	ldr	r1, [pc, #140]	; (800c364 <tcp_receive+0xf28>)
 800c2d6:	4824      	ldr	r0, [pc, #144]	; (800c368 <tcp_receive+0xf2c>)
 800c2d8:	f004 fe26 	bl	8010f28 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c2dc:	e011      	b.n	800c302 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	f47f aea4 	bne.w	800c034 <tcp_receive+0xbf8>
 800c2ec:	e00a      	b.n	800c304 <tcp_receive+0xec8>
                break;
 800c2ee:	bf00      	nop
 800c2f0:	e008      	b.n	800c304 <tcp_receive+0xec8>
                break;
 800c2f2:	bf00      	nop
 800c2f4:	e006      	b.n	800c304 <tcp_receive+0xec8>
                  break;
 800c2f6:	bf00      	nop
 800c2f8:	e004      	b.n	800c304 <tcp_receive+0xec8>
                  break;
 800c2fa:	bf00      	nop
 800c2fc:	e002      	b.n	800c304 <tcp_receive+0xec8>
                  break;
 800c2fe:	bf00      	nop
 800c300:	e000      	b.n	800c304 <tcp_receive+0xec8>
                break;
 800c302:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f001 fe8b 	bl	800e020 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c30a:	e003      	b.n	800c314 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f001 fe87 	bl	800e020 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c312:	e01a      	b.n	800c34a <tcp_receive+0xf0e>
 800c314:	e019      	b.n	800c34a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c316:	4b0f      	ldr	r3, [pc, #60]	; (800c354 <tcp_receive+0xf18>)
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c31e:	1ad3      	subs	r3, r2, r3
 800c320:	2b00      	cmp	r3, #0
 800c322:	db0a      	blt.n	800c33a <tcp_receive+0xefe>
 800c324:	4b0b      	ldr	r3, [pc, #44]	; (800c354 <tcp_receive+0xf18>)
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c32c:	6879      	ldr	r1, [r7, #4]
 800c32e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c330:	440b      	add	r3, r1
 800c332:	1ad3      	subs	r3, r2, r3
 800c334:	3301      	adds	r3, #1
 800c336:	2b00      	cmp	r3, #0
 800c338:	dd07      	ble.n	800c34a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	8b5b      	ldrh	r3, [r3, #26]
 800c33e:	f043 0302 	orr.w	r3, r3, #2
 800c342:	b29a      	uxth	r2, r3
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c348:	e7ff      	b.n	800c34a <tcp_receive+0xf0e>
 800c34a:	bf00      	nop
 800c34c:	3750      	adds	r7, #80	; 0x50
 800c34e:	46bd      	mov	sp, r7
 800c350:	bdb0      	pop	{r4, r5, r7, pc}
 800c352:	bf00      	nop
 800c354:	20008780 	.word	0x20008780
 800c358:	20008760 	.word	0x20008760
 800c35c:	2000878a 	.word	0x2000878a
 800c360:	080135b8 	.word	0x080135b8
 800c364:	08013960 	.word	0x08013960
 800c368:	08013604 	.word	0x08013604

0800c36c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c372:	4b15      	ldr	r3, [pc, #84]	; (800c3c8 <tcp_get_next_optbyte+0x5c>)
 800c374:	881b      	ldrh	r3, [r3, #0]
 800c376:	1c5a      	adds	r2, r3, #1
 800c378:	b291      	uxth	r1, r2
 800c37a:	4a13      	ldr	r2, [pc, #76]	; (800c3c8 <tcp_get_next_optbyte+0x5c>)
 800c37c:	8011      	strh	r1, [r2, #0]
 800c37e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c380:	4b12      	ldr	r3, [pc, #72]	; (800c3cc <tcp_get_next_optbyte+0x60>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d004      	beq.n	800c392 <tcp_get_next_optbyte+0x26>
 800c388:	4b11      	ldr	r3, [pc, #68]	; (800c3d0 <tcp_get_next_optbyte+0x64>)
 800c38a:	881b      	ldrh	r3, [r3, #0]
 800c38c:	88fa      	ldrh	r2, [r7, #6]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d208      	bcs.n	800c3a4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c392:	4b10      	ldr	r3, [pc, #64]	; (800c3d4 <tcp_get_next_optbyte+0x68>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	3314      	adds	r3, #20
 800c398:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c39a:	88fb      	ldrh	r3, [r7, #6]
 800c39c:	683a      	ldr	r2, [r7, #0]
 800c39e:	4413      	add	r3, r2
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	e00b      	b.n	800c3bc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c3a4:	88fb      	ldrh	r3, [r7, #6]
 800c3a6:	b2da      	uxtb	r2, r3
 800c3a8:	4b09      	ldr	r3, [pc, #36]	; (800c3d0 <tcp_get_next_optbyte+0x64>)
 800c3aa:	881b      	ldrh	r3, [r3, #0]
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	1ad3      	subs	r3, r2, r3
 800c3b0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c3b2:	4b06      	ldr	r3, [pc, #24]	; (800c3cc <tcp_get_next_optbyte+0x60>)
 800c3b4:	681a      	ldr	r2, [r3, #0]
 800c3b6:	797b      	ldrb	r3, [r7, #5]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	370c      	adds	r7, #12
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr
 800c3c8:	2000877c 	.word	0x2000877c
 800c3cc:	20008778 	.word	0x20008778
 800c3d0:	20008776 	.word	0x20008776
 800c3d4:	20008770 	.word	0x20008770

0800c3d8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d106      	bne.n	800c3f4 <tcp_parseopt+0x1c>
 800c3e6:	4b32      	ldr	r3, [pc, #200]	; (800c4b0 <tcp_parseopt+0xd8>)
 800c3e8:	f240 727d 	movw	r2, #1917	; 0x77d
 800c3ec:	4931      	ldr	r1, [pc, #196]	; (800c4b4 <tcp_parseopt+0xdc>)
 800c3ee:	4832      	ldr	r0, [pc, #200]	; (800c4b8 <tcp_parseopt+0xe0>)
 800c3f0:	f004 fd9a 	bl	8010f28 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c3f4:	4b31      	ldr	r3, [pc, #196]	; (800c4bc <tcp_parseopt+0xe4>)
 800c3f6:	881b      	ldrh	r3, [r3, #0]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d055      	beq.n	800c4a8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c3fc:	4b30      	ldr	r3, [pc, #192]	; (800c4c0 <tcp_parseopt+0xe8>)
 800c3fe:	2200      	movs	r2, #0
 800c400:	801a      	strh	r2, [r3, #0]
 800c402:	e045      	b.n	800c490 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800c404:	f7ff ffb2 	bl	800c36c <tcp_get_next_optbyte>
 800c408:	4603      	mov	r3, r0
 800c40a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c40c:	7bfb      	ldrb	r3, [r7, #15]
 800c40e:	2b02      	cmp	r3, #2
 800c410:	d006      	beq.n	800c420 <tcp_parseopt+0x48>
 800c412:	2b02      	cmp	r3, #2
 800c414:	dc2b      	bgt.n	800c46e <tcp_parseopt+0x96>
 800c416:	2b00      	cmp	r3, #0
 800c418:	d041      	beq.n	800c49e <tcp_parseopt+0xc6>
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d127      	bne.n	800c46e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800c41e:	e037      	b.n	800c490 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c420:	f7ff ffa4 	bl	800c36c <tcp_get_next_optbyte>
 800c424:	4603      	mov	r3, r0
 800c426:	2b04      	cmp	r3, #4
 800c428:	d13b      	bne.n	800c4a2 <tcp_parseopt+0xca>
 800c42a:	4b25      	ldr	r3, [pc, #148]	; (800c4c0 <tcp_parseopt+0xe8>)
 800c42c:	881b      	ldrh	r3, [r3, #0]
 800c42e:	3301      	adds	r3, #1
 800c430:	4a22      	ldr	r2, [pc, #136]	; (800c4bc <tcp_parseopt+0xe4>)
 800c432:	8812      	ldrh	r2, [r2, #0]
 800c434:	4293      	cmp	r3, r2
 800c436:	da34      	bge.n	800c4a2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c438:	f7ff ff98 	bl	800c36c <tcp_get_next_optbyte>
 800c43c:	4603      	mov	r3, r0
 800c43e:	b29b      	uxth	r3, r3
 800c440:	021b      	lsls	r3, r3, #8
 800c442:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c444:	f7ff ff92 	bl	800c36c <tcp_get_next_optbyte>
 800c448:	4603      	mov	r3, r0
 800c44a:	b29a      	uxth	r2, r3
 800c44c:	89bb      	ldrh	r3, [r7, #12]
 800c44e:	4313      	orrs	r3, r2
 800c450:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c452:	89bb      	ldrh	r3, [r7, #12]
 800c454:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c458:	d804      	bhi.n	800c464 <tcp_parseopt+0x8c>
 800c45a:	89bb      	ldrh	r3, [r7, #12]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d001      	beq.n	800c464 <tcp_parseopt+0x8c>
 800c460:	89ba      	ldrh	r2, [r7, #12]
 800c462:	e001      	b.n	800c468 <tcp_parseopt+0x90>
 800c464:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800c46c:	e010      	b.n	800c490 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c46e:	f7ff ff7d 	bl	800c36c <tcp_get_next_optbyte>
 800c472:	4603      	mov	r3, r0
 800c474:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c476:	7afb      	ldrb	r3, [r7, #11]
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d914      	bls.n	800c4a6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c47c:	7afb      	ldrb	r3, [r7, #11]
 800c47e:	b29a      	uxth	r2, r3
 800c480:	4b0f      	ldr	r3, [pc, #60]	; (800c4c0 <tcp_parseopt+0xe8>)
 800c482:	881b      	ldrh	r3, [r3, #0]
 800c484:	4413      	add	r3, r2
 800c486:	b29b      	uxth	r3, r3
 800c488:	3b02      	subs	r3, #2
 800c48a:	b29a      	uxth	r2, r3
 800c48c:	4b0c      	ldr	r3, [pc, #48]	; (800c4c0 <tcp_parseopt+0xe8>)
 800c48e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c490:	4b0b      	ldr	r3, [pc, #44]	; (800c4c0 <tcp_parseopt+0xe8>)
 800c492:	881a      	ldrh	r2, [r3, #0]
 800c494:	4b09      	ldr	r3, [pc, #36]	; (800c4bc <tcp_parseopt+0xe4>)
 800c496:	881b      	ldrh	r3, [r3, #0]
 800c498:	429a      	cmp	r2, r3
 800c49a:	d3b3      	bcc.n	800c404 <tcp_parseopt+0x2c>
 800c49c:	e004      	b.n	800c4a8 <tcp_parseopt+0xd0>
          return;
 800c49e:	bf00      	nop
 800c4a0:	e002      	b.n	800c4a8 <tcp_parseopt+0xd0>
            return;
 800c4a2:	bf00      	nop
 800c4a4:	e000      	b.n	800c4a8 <tcp_parseopt+0xd0>
            return;
 800c4a6:	bf00      	nop
      }
    }
  }
}
 800c4a8:	3710      	adds	r7, #16
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	080135b8 	.word	0x080135b8
 800c4b4:	08013a1c 	.word	0x08013a1c
 800c4b8:	08013604 	.word	0x08013604
 800c4bc:	20008774 	.word	0x20008774
 800c4c0:	2000877c 	.word	0x2000877c

0800c4c4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c4c8:	4b05      	ldr	r3, [pc, #20]	; (800c4e0 <tcp_trigger_input_pcb_close+0x1c>)
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	f043 0310 	orr.w	r3, r3, #16
 800c4d0:	b2da      	uxtb	r2, r3
 800c4d2:	4b03      	ldr	r3, [pc, #12]	; (800c4e0 <tcp_trigger_input_pcb_close+0x1c>)
 800c4d4:	701a      	strb	r2, [r3, #0]
}
 800c4d6:	bf00      	nop
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr
 800c4e0:	2000878d 	.word	0x2000878d

0800c4e4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b084      	sub	sp, #16
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	60b9      	str	r1, [r7, #8]
 800c4ee:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d00a      	beq.n	800c50c <tcp_route+0x28>
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	7a1b      	ldrb	r3, [r3, #8]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d006      	beq.n	800c50c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	7a1b      	ldrb	r3, [r3, #8]
 800c502:	4618      	mov	r0, r3
 800c504:	f7fb f8b4 	bl	8007670 <netif_get_by_index>
 800c508:	4603      	mov	r3, r0
 800c50a:	e003      	b.n	800c514 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f003 fad5 	bl	800fabc <ip4_route>
 800c512:	4603      	mov	r3, r0
  }
}
 800c514:	4618      	mov	r0, r3
 800c516:	3710      	adds	r7, #16
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c51c:	b590      	push	{r4, r7, lr}
 800c51e:	b087      	sub	sp, #28
 800c520:	af00      	add	r7, sp, #0
 800c522:	60f8      	str	r0, [r7, #12]
 800c524:	60b9      	str	r1, [r7, #8]
 800c526:	603b      	str	r3, [r7, #0]
 800c528:	4613      	mov	r3, r2
 800c52a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d105      	bne.n	800c53e <tcp_create_segment+0x22>
 800c532:	4b44      	ldr	r3, [pc, #272]	; (800c644 <tcp_create_segment+0x128>)
 800c534:	22a3      	movs	r2, #163	; 0xa3
 800c536:	4944      	ldr	r1, [pc, #272]	; (800c648 <tcp_create_segment+0x12c>)
 800c538:	4844      	ldr	r0, [pc, #272]	; (800c64c <tcp_create_segment+0x130>)
 800c53a:	f004 fcf5 	bl	8010f28 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d105      	bne.n	800c550 <tcp_create_segment+0x34>
 800c544:	4b3f      	ldr	r3, [pc, #252]	; (800c644 <tcp_create_segment+0x128>)
 800c546:	22a4      	movs	r2, #164	; 0xa4
 800c548:	4941      	ldr	r1, [pc, #260]	; (800c650 <tcp_create_segment+0x134>)
 800c54a:	4840      	ldr	r0, [pc, #256]	; (800c64c <tcp_create_segment+0x130>)
 800c54c:	f004 fcec 	bl	8010f28 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c550:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c554:	009b      	lsls	r3, r3, #2
 800c556:	b2db      	uxtb	r3, r3
 800c558:	f003 0304 	and.w	r3, r3, #4
 800c55c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c55e:	2003      	movs	r0, #3
 800c560:	f7fa fd00 	bl	8006f64 <memp_malloc>
 800c564:	6138      	str	r0, [r7, #16]
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d104      	bne.n	800c576 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c56c:	68b8      	ldr	r0, [r7, #8]
 800c56e:	f7fb fbdf 	bl	8007d30 <pbuf_free>
    return NULL;
 800c572:	2300      	movs	r3, #0
 800c574:	e061      	b.n	800c63a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c57c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	2200      	movs	r2, #0
 800c582:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	68ba      	ldr	r2, [r7, #8]
 800c588:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	891a      	ldrh	r2, [r3, #8]
 800c58e:	7dfb      	ldrb	r3, [r7, #23]
 800c590:	b29b      	uxth	r3, r3
 800c592:	429a      	cmp	r2, r3
 800c594:	d205      	bcs.n	800c5a2 <tcp_create_segment+0x86>
 800c596:	4b2b      	ldr	r3, [pc, #172]	; (800c644 <tcp_create_segment+0x128>)
 800c598:	22b0      	movs	r2, #176	; 0xb0
 800c59a:	492e      	ldr	r1, [pc, #184]	; (800c654 <tcp_create_segment+0x138>)
 800c59c:	482b      	ldr	r0, [pc, #172]	; (800c64c <tcp_create_segment+0x130>)
 800c59e:	f004 fcc3 	bl	8010f28 <iprintf>
  seg->len = p->tot_len - optlen;
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	891a      	ldrh	r2, [r3, #8]
 800c5a6:	7dfb      	ldrb	r3, [r7, #23]
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	1ad3      	subs	r3, r2, r3
 800c5ac:	b29a      	uxth	r2, r3
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c5b2:	2114      	movs	r1, #20
 800c5b4:	68b8      	ldr	r0, [r7, #8]
 800c5b6:	f7fb fb25 	bl	8007c04 <pbuf_add_header>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d004      	beq.n	800c5ca <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c5c0:	6938      	ldr	r0, [r7, #16]
 800c5c2:	f7fc ffe2 	bl	800958a <tcp_seg_free>
    return NULL;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	e037      	b.n	800c63a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	685a      	ldr	r2, [r3, #4]
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	8ada      	ldrh	r2, [r3, #22]
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	68dc      	ldr	r4, [r3, #12]
 800c5dc:	4610      	mov	r0, r2
 800c5de:	f7f9 ffdf 	bl	80065a0 <lwip_htons>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	8b1a      	ldrh	r2, [r3, #24]
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	68dc      	ldr	r4, [r3, #12]
 800c5ee:	4610      	mov	r0, r2
 800c5f0:	f7f9 ffd6 	bl	80065a0 <lwip_htons>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	68dc      	ldr	r4, [r3, #12]
 800c5fc:	6838      	ldr	r0, [r7, #0]
 800c5fe:	f7f9 ffe4 	bl	80065ca <lwip_htonl>
 800c602:	4603      	mov	r3, r0
 800c604:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c606:	7dfb      	ldrb	r3, [r7, #23]
 800c608:	089b      	lsrs	r3, r3, #2
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	3305      	adds	r3, #5
 800c610:	b29b      	uxth	r3, r3
 800c612:	031b      	lsls	r3, r3, #12
 800c614:	b29a      	uxth	r2, r3
 800c616:	79fb      	ldrb	r3, [r7, #7]
 800c618:	b29b      	uxth	r3, r3
 800c61a:	4313      	orrs	r3, r2
 800c61c:	b29a      	uxth	r2, r3
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	68dc      	ldr	r4, [r3, #12]
 800c622:	4610      	mov	r0, r2
 800c624:	f7f9 ffbc 	bl	80065a0 <lwip_htons>
 800c628:	4603      	mov	r3, r0
 800c62a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	2200      	movs	r2, #0
 800c632:	749a      	strb	r2, [r3, #18]
 800c634:	2200      	movs	r2, #0
 800c636:	74da      	strb	r2, [r3, #19]
  return seg;
 800c638:	693b      	ldr	r3, [r7, #16]
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	371c      	adds	r7, #28
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd90      	pop	{r4, r7, pc}
 800c642:	bf00      	nop
 800c644:	08013a38 	.word	0x08013a38
 800c648:	08013a6c 	.word	0x08013a6c
 800c64c:	08013a8c 	.word	0x08013a8c
 800c650:	08013ab4 	.word	0x08013ab4
 800c654:	08013ad8 	.word	0x08013ad8

0800c658 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b086      	sub	sp, #24
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	607b      	str	r3, [r7, #4]
 800c660:	4603      	mov	r3, r0
 800c662:	73fb      	strb	r3, [r7, #15]
 800c664:	460b      	mov	r3, r1
 800c666:	81bb      	strh	r3, [r7, #12]
 800c668:	4613      	mov	r3, r2
 800c66a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800c66c:	89bb      	ldrh	r3, [r7, #12]
 800c66e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d105      	bne.n	800c682 <tcp_pbuf_prealloc+0x2a>
 800c676:	4b30      	ldr	r3, [pc, #192]	; (800c738 <tcp_pbuf_prealloc+0xe0>)
 800c678:	22e8      	movs	r2, #232	; 0xe8
 800c67a:	4930      	ldr	r1, [pc, #192]	; (800c73c <tcp_pbuf_prealloc+0xe4>)
 800c67c:	4830      	ldr	r0, [pc, #192]	; (800c740 <tcp_pbuf_prealloc+0xe8>)
 800c67e:	f004 fc53 	bl	8010f28 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c682:	6a3b      	ldr	r3, [r7, #32]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d105      	bne.n	800c694 <tcp_pbuf_prealloc+0x3c>
 800c688:	4b2b      	ldr	r3, [pc, #172]	; (800c738 <tcp_pbuf_prealloc+0xe0>)
 800c68a:	22e9      	movs	r2, #233	; 0xe9
 800c68c:	492d      	ldr	r1, [pc, #180]	; (800c744 <tcp_pbuf_prealloc+0xec>)
 800c68e:	482c      	ldr	r0, [pc, #176]	; (800c740 <tcp_pbuf_prealloc+0xe8>)
 800c690:	f004 fc4a 	bl	8010f28 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800c694:	89ba      	ldrh	r2, [r7, #12]
 800c696:	897b      	ldrh	r3, [r7, #10]
 800c698:	429a      	cmp	r2, r3
 800c69a:	d221      	bcs.n	800c6e0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c69c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c6a0:	f003 0302 	and.w	r3, r3, #2
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d111      	bne.n	800c6cc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800c6a8:	6a3b      	ldr	r3, [r7, #32]
 800c6aa:	8b5b      	ldrh	r3, [r3, #26]
 800c6ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d115      	bne.n	800c6e0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800c6b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d007      	beq.n	800c6cc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800c6bc:	6a3b      	ldr	r3, [r7, #32]
 800c6be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d103      	bne.n	800c6cc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800c6c4:	6a3b      	ldr	r3, [r7, #32]
 800c6c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d009      	beq.n	800c6e0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c6cc:	89bb      	ldrh	r3, [r7, #12]
 800c6ce:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800c6d2:	f023 0203 	bic.w	r2, r3, #3
 800c6d6:	897b      	ldrh	r3, [r7, #10]
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	bf28      	it	cs
 800c6dc:	4613      	movcs	r3, r2
 800c6de:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c6e0:	8af9      	ldrh	r1, [r7, #22]
 800c6e2:	7bfb      	ldrb	r3, [r7, #15]
 800c6e4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f7fb f83d 	bl	8007768 <pbuf_alloc>
 800c6ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d101      	bne.n	800c6fa <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	e019      	b.n	800c72e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d006      	beq.n	800c710 <tcp_pbuf_prealloc+0xb8>
 800c702:	4b0d      	ldr	r3, [pc, #52]	; (800c738 <tcp_pbuf_prealloc+0xe0>)
 800c704:	f240 120b 	movw	r2, #267	; 0x10b
 800c708:	490f      	ldr	r1, [pc, #60]	; (800c748 <tcp_pbuf_prealloc+0xf0>)
 800c70a:	480d      	ldr	r0, [pc, #52]	; (800c740 <tcp_pbuf_prealloc+0xe8>)
 800c70c:	f004 fc0c 	bl	8010f28 <iprintf>
  *oversize = p->len - length;
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	895a      	ldrh	r2, [r3, #10]
 800c714:	89bb      	ldrh	r3, [r7, #12]
 800c716:	1ad3      	subs	r3, r2, r3
 800c718:	b29a      	uxth	r2, r3
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	89ba      	ldrh	r2, [r7, #12]
 800c722:	811a      	strh	r2, [r3, #8]
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	891a      	ldrh	r2, [r3, #8]
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	815a      	strh	r2, [r3, #10]
  return p;
 800c72c:	693b      	ldr	r3, [r7, #16]
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3718      	adds	r7, #24
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	08013a38 	.word	0x08013a38
 800c73c:	08013af0 	.word	0x08013af0
 800c740:	08013a8c 	.word	0x08013a8c
 800c744:	08013b14 	.word	0x08013b14
 800c748:	08013b34 	.word	0x08013b34

0800c74c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	460b      	mov	r3, r1
 800c756:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d106      	bne.n	800c76c <tcp_write_checks+0x20>
 800c75e:	4b33      	ldr	r3, [pc, #204]	; (800c82c <tcp_write_checks+0xe0>)
 800c760:	f240 1233 	movw	r2, #307	; 0x133
 800c764:	4932      	ldr	r1, [pc, #200]	; (800c830 <tcp_write_checks+0xe4>)
 800c766:	4833      	ldr	r0, [pc, #204]	; (800c834 <tcp_write_checks+0xe8>)
 800c768:	f004 fbde 	bl	8010f28 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	7d1b      	ldrb	r3, [r3, #20]
 800c770:	2b04      	cmp	r3, #4
 800c772:	d00e      	beq.n	800c792 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800c778:	2b07      	cmp	r3, #7
 800c77a:	d00a      	beq.n	800c792 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800c780:	2b02      	cmp	r3, #2
 800c782:	d006      	beq.n	800c792 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800c788:	2b03      	cmp	r3, #3
 800c78a:	d002      	beq.n	800c792 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800c78c:	f06f 030a 	mvn.w	r3, #10
 800c790:	e048      	b.n	800c824 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800c792:	887b      	ldrh	r3, [r7, #2]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d101      	bne.n	800c79c <tcp_write_checks+0x50>
    return ERR_OK;
 800c798:	2300      	movs	r3, #0
 800c79a:	e043      	b.n	800c824 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c7a2:	887a      	ldrh	r2, [r7, #2]
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d909      	bls.n	800c7bc <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	8b5b      	ldrh	r3, [r3, #26]
 800c7ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7b0:	b29a      	uxth	r2, r3
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ba:	e033      	b.n	800c824 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c7c2:	2b08      	cmp	r3, #8
 800c7c4:	d909      	bls.n	800c7da <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	8b5b      	ldrh	r3, [r3, #26]
 800c7ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7ce:	b29a      	uxth	r2, r3
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c7d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c7d8:	e024      	b.n	800c824 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d00f      	beq.n	800c804 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d11a      	bne.n	800c822 <tcp_write_checks+0xd6>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d116      	bne.n	800c822 <tcp_write_checks+0xd6>
 800c7f4:	4b0d      	ldr	r3, [pc, #52]	; (800c82c <tcp_write_checks+0xe0>)
 800c7f6:	f240 1255 	movw	r2, #341	; 0x155
 800c7fa:	490f      	ldr	r1, [pc, #60]	; (800c838 <tcp_write_checks+0xec>)
 800c7fc:	480d      	ldr	r0, [pc, #52]	; (800c834 <tcp_write_checks+0xe8>)
 800c7fe:	f004 fb93 	bl	8010f28 <iprintf>
 800c802:	e00e      	b.n	800c822 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d103      	bne.n	800c814 <tcp_write_checks+0xc8>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c810:	2b00      	cmp	r3, #0
 800c812:	d006      	beq.n	800c822 <tcp_write_checks+0xd6>
 800c814:	4b05      	ldr	r3, [pc, #20]	; (800c82c <tcp_write_checks+0xe0>)
 800c816:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800c81a:	4908      	ldr	r1, [pc, #32]	; (800c83c <tcp_write_checks+0xf0>)
 800c81c:	4805      	ldr	r0, [pc, #20]	; (800c834 <tcp_write_checks+0xe8>)
 800c81e:	f004 fb83 	bl	8010f28 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800c822:	2300      	movs	r3, #0
}
 800c824:	4618      	mov	r0, r3
 800c826:	3708      	adds	r7, #8
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	08013a38 	.word	0x08013a38
 800c830:	08013b48 	.word	0x08013b48
 800c834:	08013a8c 	.word	0x08013a8c
 800c838:	08013b68 	.word	0x08013b68
 800c83c:	08013ba4 	.word	0x08013ba4

0800c840 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800c840:	b590      	push	{r4, r7, lr}
 800c842:	b09b      	sub	sp, #108	; 0x6c
 800c844:	af04      	add	r7, sp, #16
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	4611      	mov	r1, r2
 800c84c:	461a      	mov	r2, r3
 800c84e:	460b      	mov	r3, r1
 800c850:	80fb      	strh	r3, [r7, #6]
 800c852:	4613      	mov	r3, r2
 800c854:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800c856:	2300      	movs	r3, #0
 800c858:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c85a:	2300      	movs	r3, #0
 800c85c:	653b      	str	r3, [r7, #80]	; 0x50
 800c85e:	2300      	movs	r3, #0
 800c860:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c862:	2300      	movs	r3, #0
 800c864:	64bb      	str	r3, [r7, #72]	; 0x48
 800c866:	2300      	movs	r3, #0
 800c868:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800c86a:	2300      	movs	r3, #0
 800c86c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800c870:	2300      	movs	r3, #0
 800c872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800c876:	2300      	movs	r3, #0
 800c878:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800c87a:	2300      	movs	r3, #0
 800c87c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800c87e:	2300      	movs	r3, #0
 800c880:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d109      	bne.n	800c89c <tcp_write+0x5c>
 800c888:	4ba4      	ldr	r3, [pc, #656]	; (800cb1c <tcp_write+0x2dc>)
 800c88a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800c88e:	49a4      	ldr	r1, [pc, #656]	; (800cb20 <tcp_write+0x2e0>)
 800c890:	48a4      	ldr	r0, [pc, #656]	; (800cb24 <tcp_write+0x2e4>)
 800c892:	f004 fb49 	bl	8010f28 <iprintf>
 800c896:	f06f 030f 	mvn.w	r3, #15
 800c89a:	e32a      	b.n	800cef2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c8a2:	085b      	lsrs	r3, r3, #1
 800c8a4:	b29a      	uxth	r2, r3
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	bf28      	it	cs
 800c8ae:	4613      	movcs	r3, r2
 800c8b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800c8b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d102      	bne.n	800c8be <tcp_write+0x7e>
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8bc:	e000      	b.n	800c8c0 <tcp_write+0x80>
 800c8be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c8c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d109      	bne.n	800c8dc <tcp_write+0x9c>
 800c8c8:	4b94      	ldr	r3, [pc, #592]	; (800cb1c <tcp_write+0x2dc>)
 800c8ca:	f240 12ad 	movw	r2, #429	; 0x1ad
 800c8ce:	4996      	ldr	r1, [pc, #600]	; (800cb28 <tcp_write+0x2e8>)
 800c8d0:	4894      	ldr	r0, [pc, #592]	; (800cb24 <tcp_write+0x2e4>)
 800c8d2:	f004 fb29 	bl	8010f28 <iprintf>
 800c8d6:	f06f 030f 	mvn.w	r3, #15
 800c8da:	e30a      	b.n	800cef2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800c8dc:	88fb      	ldrh	r3, [r7, #6]
 800c8de:	4619      	mov	r1, r3
 800c8e0:	68f8      	ldr	r0, [r7, #12]
 800c8e2:	f7ff ff33 	bl	800c74c <tcp_write_checks>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800c8ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d002      	beq.n	800c8fa <tcp_write+0xba>
    return err;
 800c8f4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c8f8:	e2fb      	b.n	800cef2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c900:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c904:	2300      	movs	r3, #0
 800c906:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c90e:	2b00      	cmp	r3, #0
 800c910:	f000 80f6 	beq.w	800cb00 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c918:	653b      	str	r3, [r7, #80]	; 0x50
 800c91a:	e002      	b.n	800c922 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800c91c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d1f8      	bne.n	800c91c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c92a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c92c:	7a9b      	ldrb	r3, [r3, #10]
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	b29b      	uxth	r3, r3
 800c932:	f003 0304 	and.w	r3, r3, #4
 800c936:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c938:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c93a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c93c:	891b      	ldrh	r3, [r3, #8]
 800c93e:	4619      	mov	r1, r3
 800c940:	8c3b      	ldrh	r3, [r7, #32]
 800c942:	440b      	add	r3, r1
 800c944:	429a      	cmp	r2, r3
 800c946:	da06      	bge.n	800c956 <tcp_write+0x116>
 800c948:	4b74      	ldr	r3, [pc, #464]	; (800cb1c <tcp_write+0x2dc>)
 800c94a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c94e:	4977      	ldr	r1, [pc, #476]	; (800cb2c <tcp_write+0x2ec>)
 800c950:	4874      	ldr	r0, [pc, #464]	; (800cb24 <tcp_write+0x2e4>)
 800c952:	f004 fae9 	bl	8010f28 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c958:	891a      	ldrh	r2, [r3, #8]
 800c95a:	8c3b      	ldrh	r3, [r7, #32]
 800c95c:	4413      	add	r3, r2
 800c95e:	b29b      	uxth	r3, r3
 800c960:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c962:	1ad3      	subs	r3, r2, r3
 800c964:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c96c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800c96e:	8a7b      	ldrh	r3, [r7, #18]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d026      	beq.n	800c9c2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c974:	8a7b      	ldrh	r3, [r7, #18]
 800c976:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c978:	429a      	cmp	r2, r3
 800c97a:	d206      	bcs.n	800c98a <tcp_write+0x14a>
 800c97c:	4b67      	ldr	r3, [pc, #412]	; (800cb1c <tcp_write+0x2dc>)
 800c97e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800c982:	496b      	ldr	r1, [pc, #428]	; (800cb30 <tcp_write+0x2f0>)
 800c984:	4867      	ldr	r0, [pc, #412]	; (800cb24 <tcp_write+0x2e4>)
 800c986:	f004 facf 	bl	8010f28 <iprintf>
      seg = last_unsent;
 800c98a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c98c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c98e:	8a7b      	ldrh	r3, [r7, #18]
 800c990:	88fa      	ldrh	r2, [r7, #6]
 800c992:	4293      	cmp	r3, r2
 800c994:	bf28      	it	cs
 800c996:	4613      	movcs	r3, r2
 800c998:	b29b      	uxth	r3, r3
 800c99a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c99c:	4293      	cmp	r3, r2
 800c99e:	bf28      	it	cs
 800c9a0:	4613      	movcs	r3, r2
 800c9a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800c9a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c9a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c9aa:	4413      	add	r3, r2
 800c9ac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800c9b0:	8a7a      	ldrh	r2, [r7, #18]
 800c9b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c9b4:	1ad3      	subs	r3, r2, r3
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800c9ba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c9bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c9be:	1ad3      	subs	r3, r2, r3
 800c9c0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c9c2:	8a7b      	ldrh	r3, [r7, #18]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d00b      	beq.n	800c9e0 <tcp_write+0x1a0>
 800c9c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c9cc:	88fb      	ldrh	r3, [r7, #6]
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d006      	beq.n	800c9e0 <tcp_write+0x1a0>
 800c9d2:	4b52      	ldr	r3, [pc, #328]	; (800cb1c <tcp_write+0x2dc>)
 800c9d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9d8:	4956      	ldr	r1, [pc, #344]	; (800cb34 <tcp_write+0x2f4>)
 800c9da:	4852      	ldr	r0, [pc, #328]	; (800cb24 <tcp_write+0x2e4>)
 800c9dc:	f004 faa4 	bl	8010f28 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c9e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c9e4:	88fb      	ldrh	r3, [r7, #6]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	f080 8167 	bcs.w	800ccba <tcp_write+0x47a>
 800c9ec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	f000 8163 	beq.w	800ccba <tcp_write+0x47a>
 800c9f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9f6:	891b      	ldrh	r3, [r3, #8]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	f000 815e 	beq.w	800ccba <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c9fe:	88fa      	ldrh	r2, [r7, #6]
 800ca00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ca04:	1ad2      	subs	r2, r2, r3
 800ca06:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	bfa8      	it	ge
 800ca0c:	4613      	movge	r3, r2
 800ca0e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800ca10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca12:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ca14:	797b      	ldrb	r3, [r7, #5]
 800ca16:	f003 0301 	and.w	r3, r3, #1
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d027      	beq.n	800ca6e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800ca1e:	f107 0012 	add.w	r0, r7, #18
 800ca22:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ca24:	8bf9      	ldrh	r1, [r7, #30]
 800ca26:	2301      	movs	r3, #1
 800ca28:	9302      	str	r3, [sp, #8]
 800ca2a:	797b      	ldrb	r3, [r7, #5]
 800ca2c:	9301      	str	r3, [sp, #4]
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	9300      	str	r3, [sp, #0]
 800ca32:	4603      	mov	r3, r0
 800ca34:	2000      	movs	r0, #0
 800ca36:	f7ff fe0f 	bl	800c658 <tcp_pbuf_prealloc>
 800ca3a:	6578      	str	r0, [r7, #84]	; 0x54
 800ca3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	f000 8225 	beq.w	800ce8e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800ca44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca46:	6858      	ldr	r0, [r3, #4]
 800ca48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ca4c:	68ba      	ldr	r2, [r7, #8]
 800ca4e:	4413      	add	r3, r2
 800ca50:	8bfa      	ldrh	r2, [r7, #30]
 800ca52:	4619      	mov	r1, r3
 800ca54:	f004 fa52 	bl	8010efc <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800ca58:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ca5a:	f7fb f9f1 	bl	8007e40 <pbuf_clen>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	461a      	mov	r2, r3
 800ca62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ca66:	4413      	add	r3, r2
 800ca68:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ca6c:	e041      	b.n	800caf2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800ca6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	637b      	str	r3, [r7, #52]	; 0x34
 800ca74:	e002      	b.n	800ca7c <tcp_write+0x23c>
 800ca76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	637b      	str	r3, [r7, #52]	; 0x34
 800ca7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d1f8      	bne.n	800ca76 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ca84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca86:	7b1b      	ldrb	r3, [r3, #12]
 800ca88:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d115      	bne.n	800cabc <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800ca90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca96:	8952      	ldrh	r2, [r2, #10]
 800ca98:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ca9a:	68ba      	ldr	r2, [r7, #8]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d10d      	bne.n	800cabc <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800caa0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d006      	beq.n	800cab6 <tcp_write+0x276>
 800caa8:	4b1c      	ldr	r3, [pc, #112]	; (800cb1c <tcp_write+0x2dc>)
 800caaa:	f240 2231 	movw	r2, #561	; 0x231
 800caae:	4922      	ldr	r1, [pc, #136]	; (800cb38 <tcp_write+0x2f8>)
 800cab0:	481c      	ldr	r0, [pc, #112]	; (800cb24 <tcp_write+0x2e4>)
 800cab2:	f004 fa39 	bl	8010f28 <iprintf>
          extendlen = seglen;
 800cab6:	8bfb      	ldrh	r3, [r7, #30]
 800cab8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800caba:	e01a      	b.n	800caf2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800cabc:	8bfb      	ldrh	r3, [r7, #30]
 800cabe:	2201      	movs	r2, #1
 800cac0:	4619      	mov	r1, r3
 800cac2:	2000      	movs	r0, #0
 800cac4:	f7fa fe50 	bl	8007768 <pbuf_alloc>
 800cac8:	6578      	str	r0, [r7, #84]	; 0x54
 800caca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cacc:	2b00      	cmp	r3, #0
 800cace:	f000 81e0 	beq.w	800ce92 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800cad2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cad6:	68ba      	ldr	r2, [r7, #8]
 800cad8:	441a      	add	r2, r3
 800cada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cadc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800cade:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cae0:	f7fb f9ae 	bl	8007e40 <pbuf_clen>
 800cae4:	4603      	mov	r3, r0
 800cae6:	461a      	mov	r2, r3
 800cae8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800caec:	4413      	add	r3, r2
 800caee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800caf2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800caf6:	8bfb      	ldrh	r3, [r7, #30]
 800caf8:	4413      	add	r3, r2
 800cafa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800cafe:	e0dc      	b.n	800ccba <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	f000 80d7 	beq.w	800ccba <tcp_write+0x47a>
 800cb0c:	4b03      	ldr	r3, [pc, #12]	; (800cb1c <tcp_write+0x2dc>)
 800cb0e:	f240 224a 	movw	r2, #586	; 0x24a
 800cb12:	490a      	ldr	r1, [pc, #40]	; (800cb3c <tcp_write+0x2fc>)
 800cb14:	4803      	ldr	r0, [pc, #12]	; (800cb24 <tcp_write+0x2e4>)
 800cb16:	f004 fa07 	bl	8010f28 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800cb1a:	e0ce      	b.n	800ccba <tcp_write+0x47a>
 800cb1c:	08013a38 	.word	0x08013a38
 800cb20:	08013bd8 	.word	0x08013bd8
 800cb24:	08013a8c 	.word	0x08013a8c
 800cb28:	08013bf0 	.word	0x08013bf0
 800cb2c:	08013c24 	.word	0x08013c24
 800cb30:	08013c3c 	.word	0x08013c3c
 800cb34:	08013c5c 	.word	0x08013c5c
 800cb38:	08013c7c 	.word	0x08013c7c
 800cb3c:	08013ca8 	.word	0x08013ca8
    struct pbuf *p;
    u16_t left = len - pos;
 800cb40:	88fa      	ldrh	r2, [r7, #6]
 800cb42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cb46:	1ad3      	subs	r3, r2, r3
 800cb48:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800cb4a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cb52:	1ad3      	subs	r3, r2, r3
 800cb54:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800cb56:	8b7a      	ldrh	r2, [r7, #26]
 800cb58:	8bbb      	ldrh	r3, [r7, #28]
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	bf28      	it	cs
 800cb5e:	4613      	movcs	r3, r2
 800cb60:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cb62:	797b      	ldrb	r3, [r7, #5]
 800cb64:	f003 0301 	and.w	r3, r3, #1
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d036      	beq.n	800cbda <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800cb6c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cb70:	b29a      	uxth	r2, r3
 800cb72:	8b3b      	ldrh	r3, [r7, #24]
 800cb74:	4413      	add	r3, r2
 800cb76:	b299      	uxth	r1, r3
 800cb78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	bf0c      	ite	eq
 800cb7e:	2301      	moveq	r3, #1
 800cb80:	2300      	movne	r3, #0
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	f107 0012 	add.w	r0, r7, #18
 800cb88:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cb8a:	9302      	str	r3, [sp, #8]
 800cb8c:	797b      	ldrb	r3, [r7, #5]
 800cb8e:	9301      	str	r3, [sp, #4]
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	9300      	str	r3, [sp, #0]
 800cb94:	4603      	mov	r3, r0
 800cb96:	2036      	movs	r0, #54	; 0x36
 800cb98:	f7ff fd5e 	bl	800c658 <tcp_pbuf_prealloc>
 800cb9c:	6338      	str	r0, [r7, #48]	; 0x30
 800cb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	f000 8178 	beq.w	800ce96 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800cba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba8:	895b      	ldrh	r3, [r3, #10]
 800cbaa:	8b3a      	ldrh	r2, [r7, #24]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d906      	bls.n	800cbbe <tcp_write+0x37e>
 800cbb0:	4b8c      	ldr	r3, [pc, #560]	; (800cde4 <tcp_write+0x5a4>)
 800cbb2:	f240 2266 	movw	r2, #614	; 0x266
 800cbb6:	498c      	ldr	r1, [pc, #560]	; (800cde8 <tcp_write+0x5a8>)
 800cbb8:	488c      	ldr	r0, [pc, #560]	; (800cdec <tcp_write+0x5ac>)
 800cbba:	f004 f9b5 	bl	8010f28 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800cbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc0:	685a      	ldr	r2, [r3, #4]
 800cbc2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cbc6:	18d0      	adds	r0, r2, r3
 800cbc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cbcc:	68ba      	ldr	r2, [r7, #8]
 800cbce:	4413      	add	r3, r2
 800cbd0:	8b3a      	ldrh	r2, [r7, #24]
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	f004 f992 	bl	8010efc <memcpy>
 800cbd8:	e02f      	b.n	800cc3a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800cbda:	8a7b      	ldrh	r3, [r7, #18]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d006      	beq.n	800cbee <tcp_write+0x3ae>
 800cbe0:	4b80      	ldr	r3, [pc, #512]	; (800cde4 <tcp_write+0x5a4>)
 800cbe2:	f240 2271 	movw	r2, #625	; 0x271
 800cbe6:	4982      	ldr	r1, [pc, #520]	; (800cdf0 <tcp_write+0x5b0>)
 800cbe8:	4880      	ldr	r0, [pc, #512]	; (800cdec <tcp_write+0x5ac>)
 800cbea:	f004 f99d 	bl	8010f28 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800cbee:	8b3b      	ldrh	r3, [r7, #24]
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	2036      	movs	r0, #54	; 0x36
 800cbf6:	f7fa fdb7 	bl	8007768 <pbuf_alloc>
 800cbfa:	6178      	str	r0, [r7, #20]
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	f000 814b 	beq.w	800ce9a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800cc04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cc08:	68ba      	ldr	r2, [r7, #8]
 800cc0a:	441a      	add	r2, r3
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cc10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	2036      	movs	r0, #54	; 0x36
 800cc1e:	f7fa fda3 	bl	8007768 <pbuf_alloc>
 800cc22:	6338      	str	r0, [r7, #48]	; 0x30
 800cc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d103      	bne.n	800cc32 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800cc2a:	6978      	ldr	r0, [r7, #20]
 800cc2c:	f7fb f880 	bl	8007d30 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800cc30:	e136      	b.n	800cea0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800cc32:	6979      	ldr	r1, [r7, #20]
 800cc34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc36:	f7fb f93d 	bl	8007eb4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800cc3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc3c:	f7fb f900 	bl	8007e40 <pbuf_clen>
 800cc40:	4603      	mov	r3, r0
 800cc42:	461a      	mov	r2, r3
 800cc44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cc48:	4413      	add	r3, r2
 800cc4a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800cc4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cc52:	2b09      	cmp	r3, #9
 800cc54:	d903      	bls.n	800cc5e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800cc56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc58:	f7fb f86a 	bl	8007d30 <pbuf_free>
      goto memerr;
 800cc5c:	e120      	b.n	800cea0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cc62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cc66:	441a      	add	r2, r3
 800cc68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc6c:	9300      	str	r3, [sp, #0]
 800cc6e:	4613      	mov	r3, r2
 800cc70:	2200      	movs	r2, #0
 800cc72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cc74:	68f8      	ldr	r0, [r7, #12]
 800cc76:	f7ff fc51 	bl	800c51c <tcp_create_segment>
 800cc7a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800cc7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	f000 810d 	beq.w	800ce9e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800cc84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d102      	bne.n	800cc90 <tcp_write+0x450>
      queue = seg;
 800cc8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc8c:	647b      	str	r3, [r7, #68]	; 0x44
 800cc8e:	e00c      	b.n	800ccaa <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800cc90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d106      	bne.n	800cca4 <tcp_write+0x464>
 800cc96:	4b53      	ldr	r3, [pc, #332]	; (800cde4 <tcp_write+0x5a4>)
 800cc98:	f240 22ab 	movw	r2, #683	; 0x2ab
 800cc9c:	4955      	ldr	r1, [pc, #340]	; (800cdf4 <tcp_write+0x5b4>)
 800cc9e:	4853      	ldr	r0, [pc, #332]	; (800cdec <tcp_write+0x5ac>)
 800cca0:	f004 f942 	bl	8010f28 <iprintf>
      prev_seg->next = seg;
 800cca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cca6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cca8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800ccaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccac:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800ccae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ccb2:	8b3b      	ldrh	r3, [r7, #24]
 800ccb4:	4413      	add	r3, r2
 800ccb6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800ccba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ccbe:	88fb      	ldrh	r3, [r7, #6]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	f4ff af3d 	bcc.w	800cb40 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800ccc6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d02c      	beq.n	800cd26 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800cccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccd2:	e01e      	b.n	800cd12 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800ccd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd6:	891a      	ldrh	r2, [r3, #8]
 800ccd8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ccda:	4413      	add	r3, r2
 800ccdc:	b29a      	uxth	r2, r3
 800ccde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800cce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d110      	bne.n	800cd0c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800ccea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccf0:	8952      	ldrh	r2, [r2, #10]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ccf6:	68b9      	ldr	r1, [r7, #8]
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f004 f8ff 	bl	8010efc <memcpy>
        p->len += oversize_used;
 800ccfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd00:	895a      	ldrh	r2, [r3, #10]
 800cd02:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cd04:	4413      	add	r3, r2
 800cd06:	b29a      	uxth	r2, r3
 800cd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800cd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d1dd      	bne.n	800ccd4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800cd18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd1a:	891a      	ldrh	r2, [r3, #8]
 800cd1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cd1e:	4413      	add	r3, r2
 800cd20:	b29a      	uxth	r2, r3
 800cd22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd24:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800cd26:	8a7a      	ldrh	r2, [r7, #18]
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800cd2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d018      	beq.n	800cd66 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800cd34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d106      	bne.n	800cd48 <tcp_write+0x508>
 800cd3a:	4b2a      	ldr	r3, [pc, #168]	; (800cde4 <tcp_write+0x5a4>)
 800cd3c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800cd40:	492d      	ldr	r1, [pc, #180]	; (800cdf8 <tcp_write+0x5b8>)
 800cd42:	482a      	ldr	r0, [pc, #168]	; (800cdec <tcp_write+0x5ac>)
 800cd44:	f004 f8f0 	bl	8010f28 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800cd48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7fb f8b0 	bl	8007eb4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800cd54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd56:	891a      	ldrh	r2, [r3, #8]
 800cd58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd5a:	891b      	ldrh	r3, [r3, #8]
 800cd5c:	4413      	add	r3, r2
 800cd5e:	b29a      	uxth	r2, r3
 800cd60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd62:	811a      	strh	r2, [r3, #8]
 800cd64:	e037      	b.n	800cdd6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800cd66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d034      	beq.n	800cdd6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800cd6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d003      	beq.n	800cd7a <tcp_write+0x53a>
 800cd72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d106      	bne.n	800cd88 <tcp_write+0x548>
 800cd7a:	4b1a      	ldr	r3, [pc, #104]	; (800cde4 <tcp_write+0x5a4>)
 800cd7c:	f240 22e6 	movw	r2, #742	; 0x2e6
 800cd80:	491e      	ldr	r1, [pc, #120]	; (800cdfc <tcp_write+0x5bc>)
 800cd82:	481a      	ldr	r0, [pc, #104]	; (800cdec <tcp_write+0x5ac>)
 800cd84:	f004 f8d0 	bl	8010f28 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cd88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd8e:	e009      	b.n	800cda4 <tcp_write+0x564>
      p->tot_len += extendlen;
 800cd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd92:	891a      	ldrh	r2, [r3, #8]
 800cd94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cd96:	4413      	add	r3, r2
 800cd98:	b29a      	uxth	r2, r3
 800cd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	62bb      	str	r3, [r7, #40]	; 0x28
 800cda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d1f1      	bne.n	800cd90 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800cdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdae:	891a      	ldrh	r2, [r3, #8]
 800cdb0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cdb2:	4413      	add	r3, r2
 800cdb4:	b29a      	uxth	r2, r3
 800cdb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800cdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdbc:	895a      	ldrh	r2, [r3, #10]
 800cdbe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cdc0:	4413      	add	r3, r2
 800cdc2:	b29a      	uxth	r2, r3
 800cdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800cdc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdca:	891a      	ldrh	r2, [r3, #8]
 800cdcc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cdce:	4413      	add	r3, r2
 800cdd0:	b29a      	uxth	r2, r3
 800cdd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdd4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800cdd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d111      	bne.n	800ce00 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cde0:	66da      	str	r2, [r3, #108]	; 0x6c
 800cde2:	e010      	b.n	800ce06 <tcp_write+0x5c6>
 800cde4:	08013a38 	.word	0x08013a38
 800cde8:	08013cd8 	.word	0x08013cd8
 800cdec:	08013a8c 	.word	0x08013a8c
 800cdf0:	08013d18 	.word	0x08013d18
 800cdf4:	08013d28 	.word	0x08013d28
 800cdf8:	08013d3c 	.word	0x08013d3c
 800cdfc:	08013d74 	.word	0x08013d74
  } else {
    last_unsent->next = queue;
 800ce00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce04:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ce0a:	88fb      	ldrh	r3, [r7, #6]
 800ce0c:	441a      	add	r2, r3
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ce18:	88fb      	ldrh	r3, [r7, #6]
 800ce1a:	1ad3      	subs	r3, r2, r3
 800ce1c:	b29a      	uxth	r2, r3
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ce2a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d00e      	beq.n	800ce56 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d10a      	bne.n	800ce56 <tcp_write+0x616>
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d106      	bne.n	800ce56 <tcp_write+0x616>
 800ce48:	4b2c      	ldr	r3, [pc, #176]	; (800cefc <tcp_write+0x6bc>)
 800ce4a:	f240 3212 	movw	r2, #786	; 0x312
 800ce4e:	492c      	ldr	r1, [pc, #176]	; (800cf00 <tcp_write+0x6c0>)
 800ce50:	482c      	ldr	r0, [pc, #176]	; (800cf04 <tcp_write+0x6c4>)
 800ce52:	f004 f869 	bl	8010f28 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800ce56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d016      	beq.n	800ce8a <tcp_write+0x64a>
 800ce5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce5e:	68db      	ldr	r3, [r3, #12]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d012      	beq.n	800ce8a <tcp_write+0x64a>
 800ce64:	797b      	ldrb	r3, [r7, #5]
 800ce66:	f003 0302 	and.w	r3, r3, #2
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d10d      	bne.n	800ce8a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800ce6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce70:	68db      	ldr	r3, [r3, #12]
 800ce72:	899b      	ldrh	r3, [r3, #12]
 800ce74:	b29c      	uxth	r4, r3
 800ce76:	2008      	movs	r0, #8
 800ce78:	f7f9 fb92 	bl	80065a0 <lwip_htons>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	461a      	mov	r2, r3
 800ce80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce82:	68db      	ldr	r3, [r3, #12]
 800ce84:	4322      	orrs	r2, r4
 800ce86:	b292      	uxth	r2, r2
 800ce88:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	e031      	b.n	800cef2 <tcp_write+0x6b2>
          goto memerr;
 800ce8e:	bf00      	nop
 800ce90:	e006      	b.n	800cea0 <tcp_write+0x660>
            goto memerr;
 800ce92:	bf00      	nop
 800ce94:	e004      	b.n	800cea0 <tcp_write+0x660>
        goto memerr;
 800ce96:	bf00      	nop
 800ce98:	e002      	b.n	800cea0 <tcp_write+0x660>
        goto memerr;
 800ce9a:	bf00      	nop
 800ce9c:	e000      	b.n	800cea0 <tcp_write+0x660>
      goto memerr;
 800ce9e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	8b5b      	ldrh	r3, [r3, #26]
 800cea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cea8:	b29a      	uxth	r2, r3
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800ceae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d002      	beq.n	800ceba <tcp_write+0x67a>
    pbuf_free(concat_p);
 800ceb4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ceb6:	f7fa ff3b 	bl	8007d30 <pbuf_free>
  }
  if (queue != NULL) {
 800ceba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d002      	beq.n	800cec6 <tcp_write+0x686>
    tcp_segs_free(queue);
 800cec0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cec2:	f7fc fb4d 	bl	8009560 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d00e      	beq.n	800ceee <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d10a      	bne.n	800ceee <tcp_write+0x6ae>
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d106      	bne.n	800ceee <tcp_write+0x6ae>
 800cee0:	4b06      	ldr	r3, [pc, #24]	; (800cefc <tcp_write+0x6bc>)
 800cee2:	f240 3227 	movw	r2, #807	; 0x327
 800cee6:	4906      	ldr	r1, [pc, #24]	; (800cf00 <tcp_write+0x6c0>)
 800cee8:	4806      	ldr	r0, [pc, #24]	; (800cf04 <tcp_write+0x6c4>)
 800ceea:	f004 f81d 	bl	8010f28 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800ceee:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	375c      	adds	r7, #92	; 0x5c
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd90      	pop	{r4, r7, pc}
 800cefa:	bf00      	nop
 800cefc:	08013a38 	.word	0x08013a38
 800cf00:	08013dac 	.word	0x08013dac
 800cf04:	08013a8c 	.word	0x08013a8c

0800cf08 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800cf08:	b590      	push	{r4, r7, lr}
 800cf0a:	b08b      	sub	sp, #44	; 0x2c
 800cf0c:	af02      	add	r7, sp, #8
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	460b      	mov	r3, r1
 800cf12:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800cf14:	2300      	movs	r3, #0
 800cf16:	61fb      	str	r3, [r7, #28]
 800cf18:	2300      	movs	r3, #0
 800cf1a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d106      	bne.n	800cf34 <tcp_split_unsent_seg+0x2c>
 800cf26:	4b95      	ldr	r3, [pc, #596]	; (800d17c <tcp_split_unsent_seg+0x274>)
 800cf28:	f240 324b 	movw	r2, #843	; 0x34b
 800cf2c:	4994      	ldr	r1, [pc, #592]	; (800d180 <tcp_split_unsent_seg+0x278>)
 800cf2e:	4895      	ldr	r0, [pc, #596]	; (800d184 <tcp_split_unsent_seg+0x27c>)
 800cf30:	f003 fffa 	bl	8010f28 <iprintf>

  useg = pcb->unsent;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf38:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d102      	bne.n	800cf46 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800cf40:	f04f 33ff 	mov.w	r3, #4294967295
 800cf44:	e116      	b.n	800d174 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800cf46:	887b      	ldrh	r3, [r7, #2]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d109      	bne.n	800cf60 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800cf4c:	4b8b      	ldr	r3, [pc, #556]	; (800d17c <tcp_split_unsent_seg+0x274>)
 800cf4e:	f240 3253 	movw	r2, #851	; 0x353
 800cf52:	498d      	ldr	r1, [pc, #564]	; (800d188 <tcp_split_unsent_seg+0x280>)
 800cf54:	488b      	ldr	r0, [pc, #556]	; (800d184 <tcp_split_unsent_seg+0x27c>)
 800cf56:	f003 ffe7 	bl	8010f28 <iprintf>
    return ERR_VAL;
 800cf5a:	f06f 0305 	mvn.w	r3, #5
 800cf5e:	e109      	b.n	800d174 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	891b      	ldrh	r3, [r3, #8]
 800cf64:	887a      	ldrh	r2, [r7, #2]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d301      	bcc.n	800cf6e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	e102      	b.n	800d174 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf72:	887a      	ldrh	r2, [r7, #2]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d906      	bls.n	800cf86 <tcp_split_unsent_seg+0x7e>
 800cf78:	4b80      	ldr	r3, [pc, #512]	; (800d17c <tcp_split_unsent_seg+0x274>)
 800cf7a:	f240 325b 	movw	r2, #859	; 0x35b
 800cf7e:	4983      	ldr	r1, [pc, #524]	; (800d18c <tcp_split_unsent_seg+0x284>)
 800cf80:	4880      	ldr	r0, [pc, #512]	; (800d184 <tcp_split_unsent_seg+0x27c>)
 800cf82:	f003 ffd1 	bl	8010f28 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	891b      	ldrh	r3, [r3, #8]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d106      	bne.n	800cf9c <tcp_split_unsent_seg+0x94>
 800cf8e:	4b7b      	ldr	r3, [pc, #492]	; (800d17c <tcp_split_unsent_seg+0x274>)
 800cf90:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800cf94:	497e      	ldr	r1, [pc, #504]	; (800d190 <tcp_split_unsent_seg+0x288>)
 800cf96:	487b      	ldr	r0, [pc, #492]	; (800d184 <tcp_split_unsent_seg+0x27c>)
 800cf98:	f003 ffc6 	bl	8010f28 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	7a9b      	ldrb	r3, [r3, #10]
 800cfa0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cfa2:	7bfb      	ldrb	r3, [r7, #15]
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	b2db      	uxtb	r3, r3
 800cfa8:	f003 0304 	and.w	r3, r3, #4
 800cfac:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	891a      	ldrh	r2, [r3, #8]
 800cfb2:	887b      	ldrh	r3, [r7, #2]
 800cfb4:	1ad3      	subs	r3, r2, r3
 800cfb6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800cfb8:	7bbb      	ldrb	r3, [r7, #14]
 800cfba:	b29a      	uxth	r2, r3
 800cfbc:	89bb      	ldrh	r3, [r7, #12]
 800cfbe:	4413      	add	r3, r2
 800cfc0:	b29b      	uxth	r3, r3
 800cfc2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	2036      	movs	r0, #54	; 0x36
 800cfca:	f7fa fbcd 	bl	8007768 <pbuf_alloc>
 800cfce:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	f000 80b7 	beq.w	800d146 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	891a      	ldrh	r2, [r3, #8]
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	891b      	ldrh	r3, [r3, #8]
 800cfe2:	1ad3      	subs	r3, r2, r3
 800cfe4:	b29a      	uxth	r2, r3
 800cfe6:	887b      	ldrh	r3, [r7, #2]
 800cfe8:	4413      	add	r3, r2
 800cfea:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	6858      	ldr	r0, [r3, #4]
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	685a      	ldr	r2, [r3, #4]
 800cff4:	7bbb      	ldrb	r3, [r7, #14]
 800cff6:	18d1      	adds	r1, r2, r3
 800cff8:	897b      	ldrh	r3, [r7, #10]
 800cffa:	89ba      	ldrh	r2, [r7, #12]
 800cffc:	f7fb f882 	bl	8008104 <pbuf_copy_partial>
 800d000:	4603      	mov	r3, r0
 800d002:	461a      	mov	r2, r3
 800d004:	89bb      	ldrh	r3, [r7, #12]
 800d006:	4293      	cmp	r3, r2
 800d008:	f040 809f 	bne.w	800d14a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	899b      	ldrh	r3, [r3, #12]
 800d012:	b29b      	uxth	r3, r3
 800d014:	4618      	mov	r0, r3
 800d016:	f7f9 fac3 	bl	80065a0 <lwip_htons>
 800d01a:	4603      	mov	r3, r0
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d022:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d024:	2300      	movs	r3, #0
 800d026:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d028:	7efb      	ldrb	r3, [r7, #27]
 800d02a:	f003 0308 	and.w	r3, r3, #8
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d007      	beq.n	800d042 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800d032:	7efb      	ldrb	r3, [r7, #27]
 800d034:	f023 0308 	bic.w	r3, r3, #8
 800d038:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d03a:	7ebb      	ldrb	r3, [r7, #26]
 800d03c:	f043 0308 	orr.w	r3, r3, #8
 800d040:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d042:	7efb      	ldrb	r3, [r7, #27]
 800d044:	f003 0301 	and.w	r3, r3, #1
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d007      	beq.n	800d05c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800d04c:	7efb      	ldrb	r3, [r7, #27]
 800d04e:	f023 0301 	bic.w	r3, r3, #1
 800d052:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d054:	7ebb      	ldrb	r3, [r7, #26]
 800d056:	f043 0301 	orr.w	r3, r3, #1
 800d05a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	685b      	ldr	r3, [r3, #4]
 800d062:	4618      	mov	r0, r3
 800d064:	f7f9 fab1 	bl	80065ca <lwip_htonl>
 800d068:	4602      	mov	r2, r0
 800d06a:	887b      	ldrh	r3, [r7, #2]
 800d06c:	18d1      	adds	r1, r2, r3
 800d06e:	7eba      	ldrb	r2, [r7, #26]
 800d070:	7bfb      	ldrb	r3, [r7, #15]
 800d072:	9300      	str	r3, [sp, #0]
 800d074:	460b      	mov	r3, r1
 800d076:	6939      	ldr	r1, [r7, #16]
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f7ff fa4f 	bl	800c51c <tcp_create_segment>
 800d07e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d063      	beq.n	800d14e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	685b      	ldr	r3, [r3, #4]
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7fa fed8 	bl	8007e40 <pbuf_clen>
 800d090:	4603      	mov	r3, r0
 800d092:	461a      	mov	r2, r3
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d09a:	1a9b      	subs	r3, r3, r2
 800d09c:	b29a      	uxth	r2, r3
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	6858      	ldr	r0, [r3, #4]
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	891a      	ldrh	r2, [r3, #8]
 800d0ae:	89bb      	ldrh	r3, [r7, #12]
 800d0b0:	1ad3      	subs	r3, r2, r3
 800d0b2:	b29b      	uxth	r3, r3
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	f7fa fcb5 	bl	8007a24 <pbuf_realloc>
  useg->len -= remainder;
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	891a      	ldrh	r2, [r3, #8]
 800d0be:	89bb      	ldrh	r3, [r7, #12]
 800d0c0:	1ad3      	subs	r3, r2, r3
 800d0c2:	b29a      	uxth	r2, r3
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	68db      	ldr	r3, [r3, #12]
 800d0cc:	899b      	ldrh	r3, [r3, #12]
 800d0ce:	b29c      	uxth	r4, r3
 800d0d0:	7efb      	ldrb	r3, [r7, #27]
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7f9 fa63 	bl	80065a0 <lwip_htons>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	461a      	mov	r2, r3
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	68db      	ldr	r3, [r3, #12]
 800d0e2:	4322      	orrs	r2, r4
 800d0e4:	b292      	uxth	r2, r2
 800d0e6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	685b      	ldr	r3, [r3, #4]
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f7fa fea7 	bl	8007e40 <pbuf_clen>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d0fc:	4413      	add	r3, r2
 800d0fe:	b29a      	uxth	r2, r3
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d106:	69fb      	ldr	r3, [r7, #28]
 800d108:	685b      	ldr	r3, [r3, #4]
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fa fe98 	bl	8007e40 <pbuf_clen>
 800d110:	4603      	mov	r3, r0
 800d112:	461a      	mov	r2, r3
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d11a:	4413      	add	r3, r2
 800d11c:	b29a      	uxth	r2, r3
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	681a      	ldr	r2, [r3, #0]
 800d128:	69fb      	ldr	r3, [r7, #28]
 800d12a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	69fa      	ldr	r2, [r7, #28]
 800d130:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d132:	69fb      	ldr	r3, [r7, #28]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d103      	bne.n	800d142 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2200      	movs	r2, #0
 800d13e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d142:	2300      	movs	r3, #0
 800d144:	e016      	b.n	800d174 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800d146:	bf00      	nop
 800d148:	e002      	b.n	800d150 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d14a:	bf00      	nop
 800d14c:	e000      	b.n	800d150 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d14e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d150:	69fb      	ldr	r3, [r7, #28]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d006      	beq.n	800d164 <tcp_split_unsent_seg+0x25c>
 800d156:	4b09      	ldr	r3, [pc, #36]	; (800d17c <tcp_split_unsent_seg+0x274>)
 800d158:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d15c:	490d      	ldr	r1, [pc, #52]	; (800d194 <tcp_split_unsent_seg+0x28c>)
 800d15e:	4809      	ldr	r0, [pc, #36]	; (800d184 <tcp_split_unsent_seg+0x27c>)
 800d160:	f003 fee2 	bl	8010f28 <iprintf>
  if (p != NULL) {
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d002      	beq.n	800d170 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800d16a:	6938      	ldr	r0, [r7, #16]
 800d16c:	f7fa fde0 	bl	8007d30 <pbuf_free>
  }

  return ERR_MEM;
 800d170:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d174:	4618      	mov	r0, r3
 800d176:	3724      	adds	r7, #36	; 0x24
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd90      	pop	{r4, r7, pc}
 800d17c:	08013a38 	.word	0x08013a38
 800d180:	08013dcc 	.word	0x08013dcc
 800d184:	08013a8c 	.word	0x08013a8c
 800d188:	08013df0 	.word	0x08013df0
 800d18c:	08013e14 	.word	0x08013e14
 800d190:	08013e24 	.word	0x08013e24
 800d194:	08013e34 	.word	0x08013e34

0800d198 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d198:	b590      	push	{r4, r7, lr}
 800d19a:	b085      	sub	sp, #20
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d106      	bne.n	800d1b4 <tcp_send_fin+0x1c>
 800d1a6:	4b21      	ldr	r3, [pc, #132]	; (800d22c <tcp_send_fin+0x94>)
 800d1a8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d1ac:	4920      	ldr	r1, [pc, #128]	; (800d230 <tcp_send_fin+0x98>)
 800d1ae:	4821      	ldr	r0, [pc, #132]	; (800d234 <tcp_send_fin+0x9c>)
 800d1b0:	f003 feba 	bl	8010f28 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d02e      	beq.n	800d21a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1c0:	60fb      	str	r3, [r7, #12]
 800d1c2:	e002      	b.n	800d1ca <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d1f8      	bne.n	800d1c4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	68db      	ldr	r3, [r3, #12]
 800d1d6:	899b      	ldrh	r3, [r3, #12]
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7f9 f9e0 	bl	80065a0 <lwip_htons>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	f003 0307 	and.w	r3, r3, #7
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d116      	bne.n	800d21a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	68db      	ldr	r3, [r3, #12]
 800d1f0:	899b      	ldrh	r3, [r3, #12]
 800d1f2:	b29c      	uxth	r4, r3
 800d1f4:	2001      	movs	r0, #1
 800d1f6:	f7f9 f9d3 	bl	80065a0 <lwip_htons>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	68db      	ldr	r3, [r3, #12]
 800d202:	4322      	orrs	r2, r4
 800d204:	b292      	uxth	r2, r2
 800d206:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	8b5b      	ldrh	r3, [r3, #26]
 800d20c:	f043 0320 	orr.w	r3, r3, #32
 800d210:	b29a      	uxth	r2, r3
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800d216:	2300      	movs	r3, #0
 800d218:	e004      	b.n	800d224 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d21a:	2101      	movs	r1, #1
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f000 f80b 	bl	800d238 <tcp_enqueue_flags>
 800d222:	4603      	mov	r3, r0
}
 800d224:	4618      	mov	r0, r3
 800d226:	3714      	adds	r7, #20
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd90      	pop	{r4, r7, pc}
 800d22c:	08013a38 	.word	0x08013a38
 800d230:	08013e40 	.word	0x08013e40
 800d234:	08013a8c 	.word	0x08013a8c

0800d238 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b08a      	sub	sp, #40	; 0x28
 800d23c:	af02      	add	r7, sp, #8
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	460b      	mov	r3, r1
 800d242:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d244:	2300      	movs	r3, #0
 800d246:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d248:	2300      	movs	r3, #0
 800d24a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d24c:	78fb      	ldrb	r3, [r7, #3]
 800d24e:	f003 0303 	and.w	r3, r3, #3
 800d252:	2b00      	cmp	r3, #0
 800d254:	d106      	bne.n	800d264 <tcp_enqueue_flags+0x2c>
 800d256:	4b67      	ldr	r3, [pc, #412]	; (800d3f4 <tcp_enqueue_flags+0x1bc>)
 800d258:	f240 4211 	movw	r2, #1041	; 0x411
 800d25c:	4966      	ldr	r1, [pc, #408]	; (800d3f8 <tcp_enqueue_flags+0x1c0>)
 800d25e:	4867      	ldr	r0, [pc, #412]	; (800d3fc <tcp_enqueue_flags+0x1c4>)
 800d260:	f003 fe62 	bl	8010f28 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d106      	bne.n	800d278 <tcp_enqueue_flags+0x40>
 800d26a:	4b62      	ldr	r3, [pc, #392]	; (800d3f4 <tcp_enqueue_flags+0x1bc>)
 800d26c:	f240 4213 	movw	r2, #1043	; 0x413
 800d270:	4963      	ldr	r1, [pc, #396]	; (800d400 <tcp_enqueue_flags+0x1c8>)
 800d272:	4862      	ldr	r0, [pc, #392]	; (800d3fc <tcp_enqueue_flags+0x1c4>)
 800d274:	f003 fe58 	bl	8010f28 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d278:	78fb      	ldrb	r3, [r7, #3]
 800d27a:	f003 0302 	and.w	r3, r3, #2
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d001      	beq.n	800d286 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d282:	2301      	movs	r3, #1
 800d284:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d286:	7ffb      	ldrb	r3, [r7, #31]
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	f003 0304 	and.w	r3, r3, #4
 800d290:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d292:	7dfb      	ldrb	r3, [r7, #23]
 800d294:	b29b      	uxth	r3, r3
 800d296:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d29a:	4619      	mov	r1, r3
 800d29c:	2036      	movs	r0, #54	; 0x36
 800d29e:	f7fa fa63 	bl	8007768 <pbuf_alloc>
 800d2a2:	6138      	str	r0, [r7, #16]
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d109      	bne.n	800d2be <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	8b5b      	ldrh	r3, [r3, #26]
 800d2ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2b2:	b29a      	uxth	r2, r3
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d2b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d2bc:	e095      	b.n	800d3ea <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	895a      	ldrh	r2, [r3, #10]
 800d2c2:	7dfb      	ldrb	r3, [r7, #23]
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d206      	bcs.n	800d2d8 <tcp_enqueue_flags+0xa0>
 800d2ca:	4b4a      	ldr	r3, [pc, #296]	; (800d3f4 <tcp_enqueue_flags+0x1bc>)
 800d2cc:	f240 4239 	movw	r2, #1081	; 0x439
 800d2d0:	494c      	ldr	r1, [pc, #304]	; (800d404 <tcp_enqueue_flags+0x1cc>)
 800d2d2:	484a      	ldr	r0, [pc, #296]	; (800d3fc <tcp_enqueue_flags+0x1c4>)
 800d2d4:	f003 fe28 	bl	8010f28 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d2dc:	78fa      	ldrb	r2, [r7, #3]
 800d2de:	7ffb      	ldrb	r3, [r7, #31]
 800d2e0:	9300      	str	r3, [sp, #0]
 800d2e2:	460b      	mov	r3, r1
 800d2e4:	6939      	ldr	r1, [r7, #16]
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f7ff f918 	bl	800c51c <tcp_create_segment>
 800d2ec:	60f8      	str	r0, [r7, #12]
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d109      	bne.n	800d308 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	8b5b      	ldrh	r3, [r3, #26]
 800d2f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2fc:	b29a      	uxth	r2, r3
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d302:	f04f 33ff 	mov.w	r3, #4294967295
 800d306:	e070      	b.n	800d3ea <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	68db      	ldr	r3, [r3, #12]
 800d30c:	f003 0303 	and.w	r3, r3, #3
 800d310:	2b00      	cmp	r3, #0
 800d312:	d006      	beq.n	800d322 <tcp_enqueue_flags+0xea>
 800d314:	4b37      	ldr	r3, [pc, #220]	; (800d3f4 <tcp_enqueue_flags+0x1bc>)
 800d316:	f240 4242 	movw	r2, #1090	; 0x442
 800d31a:	493b      	ldr	r1, [pc, #236]	; (800d408 <tcp_enqueue_flags+0x1d0>)
 800d31c:	4837      	ldr	r0, [pc, #220]	; (800d3fc <tcp_enqueue_flags+0x1c4>)
 800d31e:	f003 fe03 	bl	8010f28 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	891b      	ldrh	r3, [r3, #8]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d006      	beq.n	800d338 <tcp_enqueue_flags+0x100>
 800d32a:	4b32      	ldr	r3, [pc, #200]	; (800d3f4 <tcp_enqueue_flags+0x1bc>)
 800d32c:	f240 4243 	movw	r2, #1091	; 0x443
 800d330:	4936      	ldr	r1, [pc, #216]	; (800d40c <tcp_enqueue_flags+0x1d4>)
 800d332:	4832      	ldr	r0, [pc, #200]	; (800d3fc <tcp_enqueue_flags+0x1c4>)
 800d334:	f003 fdf8 	bl	8010f28 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d103      	bne.n	800d348 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	68fa      	ldr	r2, [r7, #12]
 800d344:	66da      	str	r2, [r3, #108]	; 0x6c
 800d346:	e00d      	b.n	800d364 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d34c:	61bb      	str	r3, [r7, #24]
 800d34e:	e002      	b.n	800d356 <tcp_enqueue_flags+0x11e>
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	61bb      	str	r3, [r7, #24]
 800d356:	69bb      	ldr	r3, [r7, #24]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d1f8      	bne.n	800d350 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800d35e:	69bb      	ldr	r3, [r7, #24]
 800d360:	68fa      	ldr	r2, [r7, #12]
 800d362:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2200      	movs	r2, #0
 800d368:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d36c:	78fb      	ldrb	r3, [r7, #3]
 800d36e:	f003 0302 	and.w	r3, r3, #2
 800d372:	2b00      	cmp	r3, #0
 800d374:	d104      	bne.n	800d380 <tcp_enqueue_flags+0x148>
 800d376:	78fb      	ldrb	r3, [r7, #3]
 800d378:	f003 0301 	and.w	r3, r3, #1
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d004      	beq.n	800d38a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d384:	1c5a      	adds	r2, r3, #1
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d38a:	78fb      	ldrb	r3, [r7, #3]
 800d38c:	f003 0301 	and.w	r3, r3, #1
 800d390:	2b00      	cmp	r3, #0
 800d392:	d006      	beq.n	800d3a2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	8b5b      	ldrh	r3, [r3, #26]
 800d398:	f043 0320 	orr.w	r3, r3, #32
 800d39c:	b29a      	uxth	r2, r3
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7fa fd4a 	bl	8007e40 <pbuf_clen>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d3b6:	4413      	add	r3, r2
 800d3b8:	b29a      	uxth	r2, r3
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d00e      	beq.n	800d3e8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d10a      	bne.n	800d3e8 <tcp_enqueue_flags+0x1b0>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d106      	bne.n	800d3e8 <tcp_enqueue_flags+0x1b0>
 800d3da:	4b06      	ldr	r3, [pc, #24]	; (800d3f4 <tcp_enqueue_flags+0x1bc>)
 800d3dc:	f240 4265 	movw	r2, #1125	; 0x465
 800d3e0:	490b      	ldr	r1, [pc, #44]	; (800d410 <tcp_enqueue_flags+0x1d8>)
 800d3e2:	4806      	ldr	r0, [pc, #24]	; (800d3fc <tcp_enqueue_flags+0x1c4>)
 800d3e4:	f003 fda0 	bl	8010f28 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d3e8:	2300      	movs	r3, #0
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3720      	adds	r7, #32
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	08013a38 	.word	0x08013a38
 800d3f8:	08013e5c 	.word	0x08013e5c
 800d3fc:	08013a8c 	.word	0x08013a8c
 800d400:	08013eb4 	.word	0x08013eb4
 800d404:	08013ed4 	.word	0x08013ed4
 800d408:	08013f10 	.word	0x08013f10
 800d40c:	08013f28 	.word	0x08013f28
 800d410:	08013f54 	.word	0x08013f54

0800d414 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d414:	b5b0      	push	{r4, r5, r7, lr}
 800d416:	b08a      	sub	sp, #40	; 0x28
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d106      	bne.n	800d430 <tcp_output+0x1c>
 800d422:	4b8a      	ldr	r3, [pc, #552]	; (800d64c <tcp_output+0x238>)
 800d424:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d428:	4989      	ldr	r1, [pc, #548]	; (800d650 <tcp_output+0x23c>)
 800d42a:	488a      	ldr	r0, [pc, #552]	; (800d654 <tcp_output+0x240>)
 800d42c:	f003 fd7c 	bl	8010f28 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	7d1b      	ldrb	r3, [r3, #20]
 800d434:	2b01      	cmp	r3, #1
 800d436:	d106      	bne.n	800d446 <tcp_output+0x32>
 800d438:	4b84      	ldr	r3, [pc, #528]	; (800d64c <tcp_output+0x238>)
 800d43a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d43e:	4986      	ldr	r1, [pc, #536]	; (800d658 <tcp_output+0x244>)
 800d440:	4884      	ldr	r0, [pc, #528]	; (800d654 <tcp_output+0x240>)
 800d442:	f003 fd71 	bl	8010f28 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d446:	4b85      	ldr	r3, [pc, #532]	; (800d65c <tcp_output+0x248>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	687a      	ldr	r2, [r7, #4]
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d101      	bne.n	800d454 <tcp_output+0x40>
    return ERR_OK;
 800d450:	2300      	movs	r3, #0
 800d452:	e1ce      	b.n	800d7f2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d460:	4293      	cmp	r3, r2
 800d462:	bf28      	it	cs
 800d464:	4613      	movcs	r3, r2
 800d466:	b29b      	uxth	r3, r3
 800d468:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d46e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800d470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d472:	2b00      	cmp	r3, #0
 800d474:	d10b      	bne.n	800d48e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	8b5b      	ldrh	r3, [r3, #26]
 800d47a:	f003 0302 	and.w	r3, r3, #2
 800d47e:	2b00      	cmp	r3, #0
 800d480:	f000 81aa 	beq.w	800d7d8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f000 fdcb 	bl	800e020 <tcp_send_empty_ack>
 800d48a:	4603      	mov	r3, r0
 800d48c:	e1b1      	b.n	800d7f2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d48e:	6879      	ldr	r1, [r7, #4]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	3304      	adds	r3, #4
 800d494:	461a      	mov	r2, r3
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f7ff f824 	bl	800c4e4 <tcp_route>
 800d49c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d102      	bne.n	800d4aa <tcp_output+0x96>
    return ERR_RTE;
 800d4a4:	f06f 0303 	mvn.w	r3, #3
 800d4a8:	e1a3      	b.n	800d7f2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d003      	beq.n	800d4b8 <tcp_output+0xa4>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d111      	bne.n	800d4dc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d002      	beq.n	800d4c4 <tcp_output+0xb0>
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	3304      	adds	r3, #4
 800d4c2:	e000      	b.n	800d4c6 <tcp_output+0xb2>
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d4c8:	693b      	ldr	r3, [r7, #16]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d102      	bne.n	800d4d4 <tcp_output+0xc0>
      return ERR_RTE;
 800d4ce:	f06f 0303 	mvn.w	r3, #3
 800d4d2:	e18e      	b.n	800d7f2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	681a      	ldr	r2, [r3, #0]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7f9 f871 	bl	80065ca <lwip_htonl>
 800d4e8:	4602      	mov	r2, r0
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4ee:	1ad3      	subs	r3, r2, r3
 800d4f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4f2:	8912      	ldrh	r2, [r2, #8]
 800d4f4:	4413      	add	r3, r2
 800d4f6:	69ba      	ldr	r2, [r7, #24]
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d227      	bcs.n	800d54c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d502:	461a      	mov	r2, r3
 800d504:	69bb      	ldr	r3, [r7, #24]
 800d506:	4293      	cmp	r3, r2
 800d508:	d114      	bne.n	800d534 <tcp_output+0x120>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d110      	bne.n	800d534 <tcp_output+0x120>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d10b      	bne.n	800d534 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2200      	movs	r2, #0
 800d520:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2201      	movs	r2, #1
 800d528:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2200      	movs	r2, #0
 800d530:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	8b5b      	ldrh	r3, [r3, #26]
 800d538:	f003 0302 	and.w	r3, r3, #2
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	f000 814d 	beq.w	800d7dc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 fd6c 	bl	800e020 <tcp_send_empty_ack>
 800d548:	4603      	mov	r3, r0
 800d54a:	e152      	b.n	800d7f2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2200      	movs	r2, #0
 800d550:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d558:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d55a:	6a3b      	ldr	r3, [r7, #32]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	f000 811c 	beq.w	800d79a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d562:	e002      	b.n	800d56a <tcp_output+0x156>
 800d564:	6a3b      	ldr	r3, [r7, #32]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	623b      	str	r3, [r7, #32]
 800d56a:	6a3b      	ldr	r3, [r7, #32]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d1f8      	bne.n	800d564 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d572:	e112      	b.n	800d79a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	899b      	ldrh	r3, [r3, #12]
 800d57a:	b29b      	uxth	r3, r3
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7f9 f80f 	bl	80065a0 <lwip_htons>
 800d582:	4603      	mov	r3, r0
 800d584:	b2db      	uxtb	r3, r3
 800d586:	f003 0304 	and.w	r3, r3, #4
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d006      	beq.n	800d59c <tcp_output+0x188>
 800d58e:	4b2f      	ldr	r3, [pc, #188]	; (800d64c <tcp_output+0x238>)
 800d590:	f240 5236 	movw	r2, #1334	; 0x536
 800d594:	4932      	ldr	r1, [pc, #200]	; (800d660 <tcp_output+0x24c>)
 800d596:	482f      	ldr	r0, [pc, #188]	; (800d654 <tcp_output+0x240>)
 800d598:	f003 fcc6 	bl	8010f28 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d01f      	beq.n	800d5e4 <tcp_output+0x1d0>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	8b5b      	ldrh	r3, [r3, #26]
 800d5a8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d119      	bne.n	800d5e4 <tcp_output+0x1d0>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d00b      	beq.n	800d5d0 <tcp_output+0x1bc>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d110      	bne.n	800d5e4 <tcp_output+0x1d0>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5c6:	891a      	ldrh	r2, [r3, #8]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d209      	bcs.n	800d5e4 <tcp_output+0x1d0>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d004      	beq.n	800d5e4 <tcp_output+0x1d0>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d5e0:	2b08      	cmp	r3, #8
 800d5e2:	d901      	bls.n	800d5e8 <tcp_output+0x1d4>
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	e000      	b.n	800d5ea <tcp_output+0x1d6>
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d106      	bne.n	800d5fc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	8b5b      	ldrh	r3, [r3, #26]
 800d5f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	f000 80e4 	beq.w	800d7c4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	7d1b      	ldrb	r3, [r3, #20]
 800d600:	2b02      	cmp	r3, #2
 800d602:	d00d      	beq.n	800d620 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d606:	68db      	ldr	r3, [r3, #12]
 800d608:	899b      	ldrh	r3, [r3, #12]
 800d60a:	b29c      	uxth	r4, r3
 800d60c:	2010      	movs	r0, #16
 800d60e:	f7f8 ffc7 	bl	80065a0 <lwip_htons>
 800d612:	4603      	mov	r3, r0
 800d614:	461a      	mov	r2, r3
 800d616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	4322      	orrs	r2, r4
 800d61c:	b292      	uxth	r2, r2
 800d61e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d620:	697a      	ldr	r2, [r7, #20]
 800d622:	6879      	ldr	r1, [r7, #4]
 800d624:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d626:	f000 f909 	bl	800d83c <tcp_output_segment>
 800d62a:	4603      	mov	r3, r0
 800d62c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d62e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d016      	beq.n	800d664 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	8b5b      	ldrh	r3, [r3, #26]
 800d63a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d63e:	b29a      	uxth	r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	835a      	strh	r2, [r3, #26]
      return err;
 800d644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d648:	e0d3      	b.n	800d7f2 <tcp_output+0x3de>
 800d64a:	bf00      	nop
 800d64c:	08013a38 	.word	0x08013a38
 800d650:	08013f7c 	.word	0x08013f7c
 800d654:	08013a8c 	.word	0x08013a8c
 800d658:	08013f94 	.word	0x08013f94
 800d65c:	20008794 	.word	0x20008794
 800d660:	08013fbc 	.word	0x08013fbc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d666:	681a      	ldr	r2, [r3, #0]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	7d1b      	ldrb	r3, [r3, #20]
 800d670:	2b02      	cmp	r3, #2
 800d672:	d006      	beq.n	800d682 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	8b5b      	ldrh	r3, [r3, #26]
 800d678:	f023 0303 	bic.w	r3, r3, #3
 800d67c:	b29a      	uxth	r2, r3
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d684:	68db      	ldr	r3, [r3, #12]
 800d686:	685b      	ldr	r3, [r3, #4]
 800d688:	4618      	mov	r0, r3
 800d68a:	f7f8 ff9e 	bl	80065ca <lwip_htonl>
 800d68e:	4604      	mov	r4, r0
 800d690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d692:	891b      	ldrh	r3, [r3, #8]
 800d694:	461d      	mov	r5, r3
 800d696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d698:	68db      	ldr	r3, [r3, #12]
 800d69a:	899b      	ldrh	r3, [r3, #12]
 800d69c:	b29b      	uxth	r3, r3
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7f8 ff7e 	bl	80065a0 <lwip_htons>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	f003 0303 	and.w	r3, r3, #3
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d001      	beq.n	800d6b4 <tcp_output+0x2a0>
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	e000      	b.n	800d6b6 <tcp_output+0x2a2>
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	442b      	add	r3, r5
 800d6b8:	4423      	add	r3, r4
 800d6ba:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	1ad3      	subs	r3, r2, r3
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	da02      	bge.n	800d6ce <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	68ba      	ldr	r2, [r7, #8]
 800d6cc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d0:	891b      	ldrh	r3, [r3, #8]
 800d6d2:	461c      	mov	r4, r3
 800d6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d6:	68db      	ldr	r3, [r3, #12]
 800d6d8:	899b      	ldrh	r3, [r3, #12]
 800d6da:	b29b      	uxth	r3, r3
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f7f8 ff5f 	bl	80065a0 <lwip_htons>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	b2db      	uxtb	r3, r3
 800d6e6:	f003 0303 	and.w	r3, r3, #3
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d001      	beq.n	800d6f2 <tcp_output+0x2de>
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	e000      	b.n	800d6f4 <tcp_output+0x2e0>
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	4423      	add	r3, r4
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d049      	beq.n	800d78e <tcp_output+0x37a>
      seg->next = NULL;
 800d6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d704:	2b00      	cmp	r3, #0
 800d706:	d105      	bne.n	800d714 <tcp_output+0x300>
        pcb->unacked = seg;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d70c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d710:	623b      	str	r3, [r7, #32]
 800d712:	e03f      	b.n	800d794 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	685b      	ldr	r3, [r3, #4]
 800d71a:	4618      	mov	r0, r3
 800d71c:	f7f8 ff55 	bl	80065ca <lwip_htonl>
 800d720:	4604      	mov	r4, r0
 800d722:	6a3b      	ldr	r3, [r7, #32]
 800d724:	68db      	ldr	r3, [r3, #12]
 800d726:	685b      	ldr	r3, [r3, #4]
 800d728:	4618      	mov	r0, r3
 800d72a:	f7f8 ff4e 	bl	80065ca <lwip_htonl>
 800d72e:	4603      	mov	r3, r0
 800d730:	1ae3      	subs	r3, r4, r3
 800d732:	2b00      	cmp	r3, #0
 800d734:	da24      	bge.n	800d780 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	3370      	adds	r3, #112	; 0x70
 800d73a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d73c:	e002      	b.n	800d744 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d73e:	69fb      	ldr	r3, [r7, #28]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d744:	69fb      	ldr	r3, [r7, #28]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d011      	beq.n	800d770 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	68db      	ldr	r3, [r3, #12]
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	4618      	mov	r0, r3
 800d756:	f7f8 ff38 	bl	80065ca <lwip_htonl>
 800d75a:	4604      	mov	r4, r0
 800d75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	685b      	ldr	r3, [r3, #4]
 800d762:	4618      	mov	r0, r3
 800d764:	f7f8 ff31 	bl	80065ca <lwip_htonl>
 800d768:	4603      	mov	r3, r0
 800d76a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	dbe6      	blt.n	800d73e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d770:	69fb      	ldr	r3, [r7, #28]
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d776:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d778:	69fb      	ldr	r3, [r7, #28]
 800d77a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d77c:	601a      	str	r2, [r3, #0]
 800d77e:	e009      	b.n	800d794 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d780:	6a3b      	ldr	r3, [r7, #32]
 800d782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d784:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d786:	6a3b      	ldr	r3, [r7, #32]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	623b      	str	r3, [r7, #32]
 800d78c:	e002      	b.n	800d794 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d78e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d790:	f7fb fefb 	bl	800958a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d798:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d012      	beq.n	800d7c6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7f8 ff0f 	bl	80065ca <lwip_htonl>
 800d7ac:	4602      	mov	r2, r0
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7b2:	1ad3      	subs	r3, r2, r3
 800d7b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7b6:	8912      	ldrh	r2, [r2, #8]
 800d7b8:	4413      	add	r3, r2
  while (seg != NULL &&
 800d7ba:	69ba      	ldr	r2, [r7, #24]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	f4bf aed9 	bcs.w	800d574 <tcp_output+0x160>
 800d7c2:	e000      	b.n	800d7c6 <tcp_output+0x3b2>
      break;
 800d7c4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d108      	bne.n	800d7e0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d7d6:	e004      	b.n	800d7e2 <tcp_output+0x3ce>
    goto output_done;
 800d7d8:	bf00      	nop
 800d7da:	e002      	b.n	800d7e2 <tcp_output+0x3ce>
    goto output_done;
 800d7dc:	bf00      	nop
 800d7de:	e000      	b.n	800d7e2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d7e0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	8b5b      	ldrh	r3, [r3, #26]
 800d7e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d7ea:	b29a      	uxth	r2, r3
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d7f0:	2300      	movs	r3, #0
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3728      	adds	r7, #40	; 0x28
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bdb0      	pop	{r4, r5, r7, pc}
 800d7fa:	bf00      	nop

0800d7fc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d106      	bne.n	800d818 <tcp_output_segment_busy+0x1c>
 800d80a:	4b09      	ldr	r3, [pc, #36]	; (800d830 <tcp_output_segment_busy+0x34>)
 800d80c:	f240 529a 	movw	r2, #1434	; 0x59a
 800d810:	4908      	ldr	r1, [pc, #32]	; (800d834 <tcp_output_segment_busy+0x38>)
 800d812:	4809      	ldr	r0, [pc, #36]	; (800d838 <tcp_output_segment_busy+0x3c>)
 800d814:	f003 fb88 	bl	8010f28 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	685b      	ldr	r3, [r3, #4]
 800d81c:	7b9b      	ldrb	r3, [r3, #14]
 800d81e:	2b01      	cmp	r3, #1
 800d820:	d001      	beq.n	800d826 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d822:	2301      	movs	r3, #1
 800d824:	e000      	b.n	800d828 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d826:	2300      	movs	r3, #0
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3708      	adds	r7, #8
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	08013a38 	.word	0x08013a38
 800d834:	08013fd4 	.word	0x08013fd4
 800d838:	08013a8c 	.word	0x08013a8c

0800d83c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d83c:	b5b0      	push	{r4, r5, r7, lr}
 800d83e:	b08c      	sub	sp, #48	; 0x30
 800d840:	af04      	add	r7, sp, #16
 800d842:	60f8      	str	r0, [r7, #12]
 800d844:	60b9      	str	r1, [r7, #8]
 800d846:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d106      	bne.n	800d85c <tcp_output_segment+0x20>
 800d84e:	4b63      	ldr	r3, [pc, #396]	; (800d9dc <tcp_output_segment+0x1a0>)
 800d850:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d854:	4962      	ldr	r1, [pc, #392]	; (800d9e0 <tcp_output_segment+0x1a4>)
 800d856:	4863      	ldr	r0, [pc, #396]	; (800d9e4 <tcp_output_segment+0x1a8>)
 800d858:	f003 fb66 	bl	8010f28 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d106      	bne.n	800d870 <tcp_output_segment+0x34>
 800d862:	4b5e      	ldr	r3, [pc, #376]	; (800d9dc <tcp_output_segment+0x1a0>)
 800d864:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d868:	495f      	ldr	r1, [pc, #380]	; (800d9e8 <tcp_output_segment+0x1ac>)
 800d86a:	485e      	ldr	r0, [pc, #376]	; (800d9e4 <tcp_output_segment+0x1a8>)
 800d86c:	f003 fb5c 	bl	8010f28 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d106      	bne.n	800d884 <tcp_output_segment+0x48>
 800d876:	4b59      	ldr	r3, [pc, #356]	; (800d9dc <tcp_output_segment+0x1a0>)
 800d878:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d87c:	495b      	ldr	r1, [pc, #364]	; (800d9ec <tcp_output_segment+0x1b0>)
 800d87e:	4859      	ldr	r0, [pc, #356]	; (800d9e4 <tcp_output_segment+0x1a8>)
 800d880:	f003 fb52 	bl	8010f28 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d884:	68f8      	ldr	r0, [r7, #12]
 800d886:	f7ff ffb9 	bl	800d7fc <tcp_output_segment_busy>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d001      	beq.n	800d894 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d890:	2300      	movs	r3, #0
 800d892:	e09f      	b.n	800d9d4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	68dc      	ldr	r4, [r3, #12]
 800d89c:	4610      	mov	r0, r2
 800d89e:	f7f8 fe94 	bl	80065ca <lwip_htonl>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	68dc      	ldr	r4, [r3, #12]
 800d8ae:	4610      	mov	r0, r2
 800d8b0:	f7f8 fe76 	bl	80065a0 <lwip_htons>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8bc:	68ba      	ldr	r2, [r7, #8]
 800d8be:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d8c0:	441a      	add	r2, r3
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	68db      	ldr	r3, [r3, #12]
 800d8ca:	3314      	adds	r3, #20
 800d8cc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	7a9b      	ldrb	r3, [r3, #10]
 800d8d2:	f003 0301 	and.w	r3, r3, #1
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d015      	beq.n	800d906 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	3304      	adds	r3, #4
 800d8de:	461a      	mov	r2, r3
 800d8e0:	6879      	ldr	r1, [r7, #4]
 800d8e2:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d8e6:	f7fc fa33 	bl	8009d50 <tcp_eff_send_mss_netif>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d8ee:	8b7b      	ldrh	r3, [r7, #26]
 800d8f0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f7f8 fe68 	bl	80065ca <lwip_htonl>
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	69fb      	ldr	r3, [r7, #28]
 800d8fe:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d900:	69fb      	ldr	r3, [r7, #28]
 800d902:	3304      	adds	r3, #4
 800d904:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	da02      	bge.n	800d916 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	2200      	movs	r2, #0
 800d914:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d10c      	bne.n	800d938 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d91e:	4b34      	ldr	r3, [pc, #208]	; (800d9f0 <tcp_output_segment+0x1b4>)
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	68db      	ldr	r3, [r3, #12]
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7f8 fe4c 	bl	80065ca <lwip_htonl>
 800d932:	4602      	mov	r2, r0
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	68da      	ldr	r2, [r3, #12]
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	685b      	ldr	r3, [r3, #4]
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	1ad3      	subs	r3, r2, r3
 800d944:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	685b      	ldr	r3, [r3, #4]
 800d94a:	8959      	ldrh	r1, [r3, #10]
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	8b3a      	ldrh	r2, [r7, #24]
 800d952:	1a8a      	subs	r2, r1, r2
 800d954:	b292      	uxth	r2, r2
 800d956:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	8919      	ldrh	r1, [r3, #8]
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	685b      	ldr	r3, [r3, #4]
 800d962:	8b3a      	ldrh	r2, [r7, #24]
 800d964:	1a8a      	subs	r2, r1, r2
 800d966:	b292      	uxth	r2, r2
 800d968:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	68fa      	ldr	r2, [r7, #12]
 800d970:	68d2      	ldr	r2, [r2, #12]
 800d972:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	68db      	ldr	r3, [r3, #12]
 800d978:	2200      	movs	r2, #0
 800d97a:	741a      	strb	r2, [r3, #16]
 800d97c:	2200      	movs	r2, #0
 800d97e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	68db      	ldr	r3, [r3, #12]
 800d984:	f103 0214 	add.w	r2, r3, #20
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	7a9b      	ldrb	r3, [r3, #10]
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	f003 0304 	and.w	r3, r3, #4
 800d992:	4413      	add	r3, r2
 800d994:	69fa      	ldr	r2, [r7, #28]
 800d996:	429a      	cmp	r2, r3
 800d998:	d006      	beq.n	800d9a8 <tcp_output_segment+0x16c>
 800d99a:	4b10      	ldr	r3, [pc, #64]	; (800d9dc <tcp_output_segment+0x1a0>)
 800d99c:	f240 621c 	movw	r2, #1564	; 0x61c
 800d9a0:	4914      	ldr	r1, [pc, #80]	; (800d9f4 <tcp_output_segment+0x1b8>)
 800d9a2:	4810      	ldr	r0, [pc, #64]	; (800d9e4 <tcp_output_segment+0x1a8>)
 800d9a4:	f003 fac0 	bl	8010f28 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	6858      	ldr	r0, [r3, #4]
 800d9ac:	68b9      	ldr	r1, [r7, #8]
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	1d1c      	adds	r4, r3, #4
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	7add      	ldrb	r5, [r3, #11]
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	7a9b      	ldrb	r3, [r3, #10]
 800d9ba:	687a      	ldr	r2, [r7, #4]
 800d9bc:	9202      	str	r2, [sp, #8]
 800d9be:	2206      	movs	r2, #6
 800d9c0:	9201      	str	r2, [sp, #4]
 800d9c2:	9300      	str	r3, [sp, #0]
 800d9c4:	462b      	mov	r3, r5
 800d9c6:	4622      	mov	r2, r4
 800d9c8:	f002 fa36 	bl	800fe38 <ip4_output_if>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d9d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3720      	adds	r7, #32
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bdb0      	pop	{r4, r5, r7, pc}
 800d9dc:	08013a38 	.word	0x08013a38
 800d9e0:	08013ffc 	.word	0x08013ffc
 800d9e4:	08013a8c 	.word	0x08013a8c
 800d9e8:	0801401c 	.word	0x0801401c
 800d9ec:	0801403c 	.word	0x0801403c
 800d9f0:	20008748 	.word	0x20008748
 800d9f4:	08014060 	.word	0x08014060

0800d9f8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d9f8:	b5b0      	push	{r4, r5, r7, lr}
 800d9fa:	b084      	sub	sp, #16
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d106      	bne.n	800da14 <tcp_rexmit_rto_prepare+0x1c>
 800da06:	4b31      	ldr	r3, [pc, #196]	; (800dacc <tcp_rexmit_rto_prepare+0xd4>)
 800da08:	f240 6263 	movw	r2, #1635	; 0x663
 800da0c:	4930      	ldr	r1, [pc, #192]	; (800dad0 <tcp_rexmit_rto_prepare+0xd8>)
 800da0e:	4831      	ldr	r0, [pc, #196]	; (800dad4 <tcp_rexmit_rto_prepare+0xdc>)
 800da10:	f003 fa8a 	bl	8010f28 <iprintf>

  if (pcb->unacked == NULL) {
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d102      	bne.n	800da22 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800da1c:	f06f 0305 	mvn.w	r3, #5
 800da20:	e050      	b.n	800dac4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da26:	60fb      	str	r3, [r7, #12]
 800da28:	e00b      	b.n	800da42 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800da2a:	68f8      	ldr	r0, [r7, #12]
 800da2c:	f7ff fee6 	bl	800d7fc <tcp_output_segment_busy>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	d002      	beq.n	800da3c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800da36:	f06f 0305 	mvn.w	r3, #5
 800da3a:	e043      	b.n	800dac4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	60fb      	str	r3, [r7, #12]
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d1ef      	bne.n	800da2a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800da4a:	68f8      	ldr	r0, [r7, #12]
 800da4c:	f7ff fed6 	bl	800d7fc <tcp_output_segment_busy>
 800da50:	4603      	mov	r3, r0
 800da52:	2b00      	cmp	r3, #0
 800da54:	d002      	beq.n	800da5c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800da56:	f06f 0305 	mvn.w	r3, #5
 800da5a:	e033      	b.n	800dac4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2200      	movs	r2, #0
 800da70:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	8b5b      	ldrh	r3, [r3, #26]
 800da76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800da7a:	b29a      	uxth	r2, r3
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	685b      	ldr	r3, [r3, #4]
 800da86:	4618      	mov	r0, r3
 800da88:	f7f8 fd9f 	bl	80065ca <lwip_htonl>
 800da8c:	4604      	mov	r4, r0
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	891b      	ldrh	r3, [r3, #8]
 800da92:	461d      	mov	r5, r3
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	899b      	ldrh	r3, [r3, #12]
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7f8 fd7f 	bl	80065a0 <lwip_htons>
 800daa2:	4603      	mov	r3, r0
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	f003 0303 	and.w	r3, r3, #3
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d001      	beq.n	800dab2 <tcp_rexmit_rto_prepare+0xba>
 800daae:	2301      	movs	r3, #1
 800dab0:	e000      	b.n	800dab4 <tcp_rexmit_rto_prepare+0xbc>
 800dab2:	2300      	movs	r3, #0
 800dab4:	442b      	add	r3, r5
 800dab6:	18e2      	adds	r2, r4, r3
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2200      	movs	r2, #0
 800dac0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800dac2:	2300      	movs	r3, #0
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3710      	adds	r7, #16
 800dac8:	46bd      	mov	sp, r7
 800daca:	bdb0      	pop	{r4, r5, r7, pc}
 800dacc:	08013a38 	.word	0x08013a38
 800dad0:	08014074 	.word	0x08014074
 800dad4:	08013a8c 	.word	0x08013a8c

0800dad8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b082      	sub	sp, #8
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d106      	bne.n	800daf4 <tcp_rexmit_rto_commit+0x1c>
 800dae6:	4b0d      	ldr	r3, [pc, #52]	; (800db1c <tcp_rexmit_rto_commit+0x44>)
 800dae8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800daec:	490c      	ldr	r1, [pc, #48]	; (800db20 <tcp_rexmit_rto_commit+0x48>)
 800daee:	480d      	ldr	r0, [pc, #52]	; (800db24 <tcp_rexmit_rto_commit+0x4c>)
 800daf0:	f003 fa1a 	bl	8010f28 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dafa:	2bff      	cmp	r3, #255	; 0xff
 800dafc:	d007      	beq.n	800db0e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800db04:	3301      	adds	r3, #1
 800db06:	b2da      	uxtb	r2, r3
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f7ff fc80 	bl	800d414 <tcp_output>
}
 800db14:	bf00      	nop
 800db16:	3708      	adds	r7, #8
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	08013a38 	.word	0x08013a38
 800db20:	08014098 	.word	0x08014098
 800db24:	08013a8c 	.word	0x08013a8c

0800db28 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d106      	bne.n	800db44 <tcp_rexmit_rto+0x1c>
 800db36:	4b0a      	ldr	r3, [pc, #40]	; (800db60 <tcp_rexmit_rto+0x38>)
 800db38:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800db3c:	4909      	ldr	r1, [pc, #36]	; (800db64 <tcp_rexmit_rto+0x3c>)
 800db3e:	480a      	ldr	r0, [pc, #40]	; (800db68 <tcp_rexmit_rto+0x40>)
 800db40:	f003 f9f2 	bl	8010f28 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f7ff ff57 	bl	800d9f8 <tcp_rexmit_rto_prepare>
 800db4a:	4603      	mov	r3, r0
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d102      	bne.n	800db56 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f7ff ffc1 	bl	800dad8 <tcp_rexmit_rto_commit>
  }
}
 800db56:	bf00      	nop
 800db58:	3708      	adds	r7, #8
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
 800db5e:	bf00      	nop
 800db60:	08013a38 	.word	0x08013a38
 800db64:	080140bc 	.word	0x080140bc
 800db68:	08013a8c 	.word	0x08013a8c

0800db6c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800db6c:	b590      	push	{r4, r7, lr}
 800db6e:	b085      	sub	sp, #20
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d106      	bne.n	800db88 <tcp_rexmit+0x1c>
 800db7a:	4b2f      	ldr	r3, [pc, #188]	; (800dc38 <tcp_rexmit+0xcc>)
 800db7c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800db80:	492e      	ldr	r1, [pc, #184]	; (800dc3c <tcp_rexmit+0xd0>)
 800db82:	482f      	ldr	r0, [pc, #188]	; (800dc40 <tcp_rexmit+0xd4>)
 800db84:	f003 f9d0 	bl	8010f28 <iprintf>

  if (pcb->unacked == NULL) {
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d102      	bne.n	800db96 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800db90:	f06f 0305 	mvn.w	r3, #5
 800db94:	e04c      	b.n	800dc30 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db9a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800db9c:	68b8      	ldr	r0, [r7, #8]
 800db9e:	f7ff fe2d 	bl	800d7fc <tcp_output_segment_busy>
 800dba2:	4603      	mov	r3, r0
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d002      	beq.n	800dbae <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800dba8:	f06f 0305 	mvn.w	r3, #5
 800dbac:	e040      	b.n	800dc30 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	336c      	adds	r3, #108	; 0x6c
 800dbba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800dbbc:	e002      	b.n	800dbc4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d011      	beq.n	800dbf0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	68db      	ldr	r3, [r3, #12]
 800dbd2:	685b      	ldr	r3, [r3, #4]
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7f8 fcf8 	bl	80065ca <lwip_htonl>
 800dbda:	4604      	mov	r4, r0
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	68db      	ldr	r3, [r3, #12]
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7f8 fcf1 	bl	80065ca <lwip_htonl>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	dbe6      	blt.n	800dbbe <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	681a      	ldr	r2, [r3, #0]
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	68ba      	ldr	r2, [r7, #8]
 800dbfc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d103      	bne.n	800dc0e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dc14:	2bff      	cmp	r3, #255	; 0xff
 800dc16:	d007      	beq.n	800dc28 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dc1e:	3301      	adds	r3, #1
 800dc20:	b2da      	uxtb	r2, r3
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800dc2e:	2300      	movs	r3, #0
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3714      	adds	r7, #20
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd90      	pop	{r4, r7, pc}
 800dc38:	08013a38 	.word	0x08013a38
 800dc3c:	080140d8 	.word	0x080140d8
 800dc40:	08013a8c 	.word	0x08013a8c

0800dc44 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b082      	sub	sp, #8
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d106      	bne.n	800dc60 <tcp_rexmit_fast+0x1c>
 800dc52:	4b2a      	ldr	r3, [pc, #168]	; (800dcfc <tcp_rexmit_fast+0xb8>)
 800dc54:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800dc58:	4929      	ldr	r1, [pc, #164]	; (800dd00 <tcp_rexmit_fast+0xbc>)
 800dc5a:	482a      	ldr	r0, [pc, #168]	; (800dd04 <tcp_rexmit_fast+0xc0>)
 800dc5c:	f003 f964 	bl	8010f28 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d044      	beq.n	800dcf2 <tcp_rexmit_fast+0xae>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	8b5b      	ldrh	r3, [r3, #26]
 800dc6c:	f003 0304 	and.w	r3, r3, #4
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d13e      	bne.n	800dcf2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f7ff ff79 	bl	800db6c <tcp_rexmit>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d138      	bne.n	800dcf2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	bf28      	it	cs
 800dc90:	4613      	movcs	r3, r2
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	0fda      	lsrs	r2, r3, #31
 800dc96:	4413      	add	r3, r2
 800dc98:	105b      	asrs	r3, r3, #1
 800dc9a:	b29a      	uxth	r2, r3
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dca8:	461a      	mov	r2, r3
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcae:	005b      	lsls	r3, r3, #1
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d206      	bcs.n	800dcc2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcb8:	005b      	lsls	r3, r3, #1
 800dcba:	b29a      	uxth	r2, r3
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dccc:	4619      	mov	r1, r3
 800dcce:	0049      	lsls	r1, r1, #1
 800dcd0:	440b      	add	r3, r1
 800dcd2:	b29b      	uxth	r3, r3
 800dcd4:	4413      	add	r3, r2
 800dcd6:	b29a      	uxth	r2, r3
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	8b5b      	ldrh	r3, [r3, #26]
 800dce2:	f043 0304 	orr.w	r3, r3, #4
 800dce6:	b29a      	uxth	r2, r3
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800dcf2:	bf00      	nop
 800dcf4:	3708      	adds	r7, #8
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	08013a38 	.word	0x08013a38
 800dd00:	080140f0 	.word	0x080140f0
 800dd04:	08013a8c 	.word	0x08013a8c

0800dd08 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b086      	sub	sp, #24
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	60f8      	str	r0, [r7, #12]
 800dd10:	607b      	str	r3, [r7, #4]
 800dd12:	460b      	mov	r3, r1
 800dd14:	817b      	strh	r3, [r7, #10]
 800dd16:	4613      	mov	r3, r2
 800dd18:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800dd1a:	897a      	ldrh	r2, [r7, #10]
 800dd1c:	893b      	ldrh	r3, [r7, #8]
 800dd1e:	4413      	add	r3, r2
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	3314      	adds	r3, #20
 800dd24:	b29b      	uxth	r3, r3
 800dd26:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dd2a:	4619      	mov	r1, r3
 800dd2c:	2022      	movs	r0, #34	; 0x22
 800dd2e:	f7f9 fd1b 	bl	8007768 <pbuf_alloc>
 800dd32:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d04d      	beq.n	800ddd6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800dd3a:	897b      	ldrh	r3, [r7, #10]
 800dd3c:	3313      	adds	r3, #19
 800dd3e:	697a      	ldr	r2, [r7, #20]
 800dd40:	8952      	ldrh	r2, [r2, #10]
 800dd42:	4293      	cmp	r3, r2
 800dd44:	db06      	blt.n	800dd54 <tcp_output_alloc_header_common+0x4c>
 800dd46:	4b26      	ldr	r3, [pc, #152]	; (800dde0 <tcp_output_alloc_header_common+0xd8>)
 800dd48:	f240 7223 	movw	r2, #1827	; 0x723
 800dd4c:	4925      	ldr	r1, [pc, #148]	; (800dde4 <tcp_output_alloc_header_common+0xdc>)
 800dd4e:	4826      	ldr	r0, [pc, #152]	; (800dde8 <tcp_output_alloc_header_common+0xe0>)
 800dd50:	f003 f8ea 	bl	8010f28 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800dd5a:	8c3b      	ldrh	r3, [r7, #32]
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f7f8 fc1f 	bl	80065a0 <lwip_htons>
 800dd62:	4603      	mov	r3, r0
 800dd64:	461a      	mov	r2, r3
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800dd6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f7f8 fc17 	bl	80065a0 <lwip_htons>
 800dd72:	4603      	mov	r3, r0
 800dd74:	461a      	mov	r2, r3
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	687a      	ldr	r2, [r7, #4]
 800dd7e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800dd80:	68f8      	ldr	r0, [r7, #12]
 800dd82:	f7f8 fc22 	bl	80065ca <lwip_htonl>
 800dd86:	4602      	mov	r2, r0
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800dd8c:	897b      	ldrh	r3, [r7, #10]
 800dd8e:	089b      	lsrs	r3, r3, #2
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	3305      	adds	r3, #5
 800dd94:	b29b      	uxth	r3, r3
 800dd96:	031b      	lsls	r3, r3, #12
 800dd98:	b29a      	uxth	r2, r3
 800dd9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	4313      	orrs	r3, r2
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7f8 fbfb 	bl	80065a0 <lwip_htons>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	461a      	mov	r2, r3
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ddb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f7f8 fbf3 	bl	80065a0 <lwip_htons>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	461a      	mov	r2, r3
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	741a      	strb	r2, [r3, #16]
 800ddc8:	2200      	movs	r2, #0
 800ddca:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	749a      	strb	r2, [r3, #18]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ddd6:	697b      	ldr	r3, [r7, #20]
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3718      	adds	r7, #24
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	08013a38 	.word	0x08013a38
 800dde4:	08014110 	.word	0x08014110
 800dde8:	08013a8c 	.word	0x08013a8c

0800ddec <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ddec:	b5b0      	push	{r4, r5, r7, lr}
 800ddee:	b08a      	sub	sp, #40	; 0x28
 800ddf0:	af04      	add	r7, sp, #16
 800ddf2:	60f8      	str	r0, [r7, #12]
 800ddf4:	607b      	str	r3, [r7, #4]
 800ddf6:	460b      	mov	r3, r1
 800ddf8:	817b      	strh	r3, [r7, #10]
 800ddfa:	4613      	mov	r3, r2
 800ddfc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d106      	bne.n	800de12 <tcp_output_alloc_header+0x26>
 800de04:	4b15      	ldr	r3, [pc, #84]	; (800de5c <tcp_output_alloc_header+0x70>)
 800de06:	f240 7242 	movw	r2, #1858	; 0x742
 800de0a:	4915      	ldr	r1, [pc, #84]	; (800de60 <tcp_output_alloc_header+0x74>)
 800de0c:	4815      	ldr	r0, [pc, #84]	; (800de64 <tcp_output_alloc_header+0x78>)
 800de0e:	f003 f88b 	bl	8010f28 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	8adb      	ldrh	r3, [r3, #22]
 800de1a:	68fa      	ldr	r2, [r7, #12]
 800de1c:	8b12      	ldrh	r2, [r2, #24]
 800de1e:	68f9      	ldr	r1, [r7, #12]
 800de20:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800de22:	893d      	ldrh	r5, [r7, #8]
 800de24:	897c      	ldrh	r4, [r7, #10]
 800de26:	9103      	str	r1, [sp, #12]
 800de28:	2110      	movs	r1, #16
 800de2a:	9102      	str	r1, [sp, #8]
 800de2c:	9201      	str	r2, [sp, #4]
 800de2e:	9300      	str	r3, [sp, #0]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	462a      	mov	r2, r5
 800de34:	4621      	mov	r1, r4
 800de36:	f7ff ff67 	bl	800dd08 <tcp_output_alloc_header_common>
 800de3a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d006      	beq.n	800de50 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de46:	68fa      	ldr	r2, [r7, #12]
 800de48:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800de4a:	441a      	add	r2, r3
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800de50:	697b      	ldr	r3, [r7, #20]
}
 800de52:	4618      	mov	r0, r3
 800de54:	3718      	adds	r7, #24
 800de56:	46bd      	mov	sp, r7
 800de58:	bdb0      	pop	{r4, r5, r7, pc}
 800de5a:	bf00      	nop
 800de5c:	08013a38 	.word	0x08013a38
 800de60:	08014140 	.word	0x08014140
 800de64:	08013a8c 	.word	0x08013a8c

0800de68 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b088      	sub	sp, #32
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	60f8      	str	r0, [r7, #12]
 800de70:	60b9      	str	r1, [r7, #8]
 800de72:	4611      	mov	r1, r2
 800de74:	461a      	mov	r2, r3
 800de76:	460b      	mov	r3, r1
 800de78:	71fb      	strb	r3, [r7, #7]
 800de7a:	4613      	mov	r3, r2
 800de7c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800de7e:	2300      	movs	r3, #0
 800de80:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d106      	bne.n	800de96 <tcp_output_fill_options+0x2e>
 800de88:	4b13      	ldr	r3, [pc, #76]	; (800ded8 <tcp_output_fill_options+0x70>)
 800de8a:	f240 7256 	movw	r2, #1878	; 0x756
 800de8e:	4913      	ldr	r1, [pc, #76]	; (800dedc <tcp_output_fill_options+0x74>)
 800de90:	4813      	ldr	r0, [pc, #76]	; (800dee0 <tcp_output_fill_options+0x78>)
 800de92:	f003 f849 	bl	8010f28 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800de9c:	69bb      	ldr	r3, [r7, #24]
 800de9e:	3314      	adds	r3, #20
 800dea0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800dea2:	69bb      	ldr	r3, [r7, #24]
 800dea4:	f103 0214 	add.w	r2, r3, #20
 800dea8:	8bfb      	ldrh	r3, [r7, #30]
 800deaa:	009b      	lsls	r3, r3, #2
 800deac:	4619      	mov	r1, r3
 800deae:	79fb      	ldrb	r3, [r7, #7]
 800deb0:	009b      	lsls	r3, r3, #2
 800deb2:	f003 0304 	and.w	r3, r3, #4
 800deb6:	440b      	add	r3, r1
 800deb8:	4413      	add	r3, r2
 800deba:	697a      	ldr	r2, [r7, #20]
 800debc:	429a      	cmp	r2, r3
 800debe:	d006      	beq.n	800dece <tcp_output_fill_options+0x66>
 800dec0:	4b05      	ldr	r3, [pc, #20]	; (800ded8 <tcp_output_fill_options+0x70>)
 800dec2:	f240 7275 	movw	r2, #1909	; 0x775
 800dec6:	4907      	ldr	r1, [pc, #28]	; (800dee4 <tcp_output_fill_options+0x7c>)
 800dec8:	4805      	ldr	r0, [pc, #20]	; (800dee0 <tcp_output_fill_options+0x78>)
 800deca:	f003 f82d 	bl	8010f28 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800dece:	bf00      	nop
 800ded0:	3720      	adds	r7, #32
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	08013a38 	.word	0x08013a38
 800dedc:	08014168 	.word	0x08014168
 800dee0:	08013a8c 	.word	0x08013a8c
 800dee4:	08014060 	.word	0x08014060

0800dee8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b08a      	sub	sp, #40	; 0x28
 800deec:	af04      	add	r7, sp, #16
 800deee:	60f8      	str	r0, [r7, #12]
 800def0:	60b9      	str	r1, [r7, #8]
 800def2:	607a      	str	r2, [r7, #4]
 800def4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d106      	bne.n	800df0a <tcp_output_control_segment+0x22>
 800defc:	4b1c      	ldr	r3, [pc, #112]	; (800df70 <tcp_output_control_segment+0x88>)
 800defe:	f240 7287 	movw	r2, #1927	; 0x787
 800df02:	491c      	ldr	r1, [pc, #112]	; (800df74 <tcp_output_control_segment+0x8c>)
 800df04:	481c      	ldr	r0, [pc, #112]	; (800df78 <tcp_output_control_segment+0x90>)
 800df06:	f003 f80f 	bl	8010f28 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800df0a:	683a      	ldr	r2, [r7, #0]
 800df0c:	6879      	ldr	r1, [r7, #4]
 800df0e:	68f8      	ldr	r0, [r7, #12]
 800df10:	f7fe fae8 	bl	800c4e4 <tcp_route>
 800df14:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d102      	bne.n	800df22 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800df1c:	23fc      	movs	r3, #252	; 0xfc
 800df1e:	75fb      	strb	r3, [r7, #23]
 800df20:	e01c      	b.n	800df5c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d006      	beq.n	800df36 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	7adb      	ldrb	r3, [r3, #11]
 800df2c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	7a9b      	ldrb	r3, [r3, #10]
 800df32:	757b      	strb	r3, [r7, #21]
 800df34:	e003      	b.n	800df3e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800df36:	23ff      	movs	r3, #255	; 0xff
 800df38:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800df3a:	2300      	movs	r3, #0
 800df3c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800df3e:	7dba      	ldrb	r2, [r7, #22]
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	9302      	str	r3, [sp, #8]
 800df44:	2306      	movs	r3, #6
 800df46:	9301      	str	r3, [sp, #4]
 800df48:	7d7b      	ldrb	r3, [r7, #21]
 800df4a:	9300      	str	r3, [sp, #0]
 800df4c:	4613      	mov	r3, r2
 800df4e:	683a      	ldr	r2, [r7, #0]
 800df50:	6879      	ldr	r1, [r7, #4]
 800df52:	68b8      	ldr	r0, [r7, #8]
 800df54:	f001 ff70 	bl	800fe38 <ip4_output_if>
 800df58:	4603      	mov	r3, r0
 800df5a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800df5c:	68b8      	ldr	r0, [r7, #8]
 800df5e:	f7f9 fee7 	bl	8007d30 <pbuf_free>
  return err;
 800df62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df66:	4618      	mov	r0, r3
 800df68:	3718      	adds	r7, #24
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}
 800df6e:	bf00      	nop
 800df70:	08013a38 	.word	0x08013a38
 800df74:	08014190 	.word	0x08014190
 800df78:	08013a8c 	.word	0x08013a8c

0800df7c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800df7c:	b590      	push	{r4, r7, lr}
 800df7e:	b08b      	sub	sp, #44	; 0x2c
 800df80:	af04      	add	r7, sp, #16
 800df82:	60f8      	str	r0, [r7, #12]
 800df84:	60b9      	str	r1, [r7, #8]
 800df86:	607a      	str	r2, [r7, #4]
 800df88:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d106      	bne.n	800df9e <tcp_rst+0x22>
 800df90:	4b1f      	ldr	r3, [pc, #124]	; (800e010 <tcp_rst+0x94>)
 800df92:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800df96:	491f      	ldr	r1, [pc, #124]	; (800e014 <tcp_rst+0x98>)
 800df98:	481f      	ldr	r0, [pc, #124]	; (800e018 <tcp_rst+0x9c>)
 800df9a:	f002 ffc5 	bl	8010f28 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800df9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d106      	bne.n	800dfb2 <tcp_rst+0x36>
 800dfa4:	4b1a      	ldr	r3, [pc, #104]	; (800e010 <tcp_rst+0x94>)
 800dfa6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800dfaa:	491c      	ldr	r1, [pc, #112]	; (800e01c <tcp_rst+0xa0>)
 800dfac:	481a      	ldr	r0, [pc, #104]	; (800e018 <tcp_rst+0x9c>)
 800dfae:	f002 ffbb 	bl	8010f28 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800dfb6:	f246 0308 	movw	r3, #24584	; 0x6008
 800dfba:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800dfbc:	7dfb      	ldrb	r3, [r7, #23]
 800dfbe:	b29c      	uxth	r4, r3
 800dfc0:	68b8      	ldr	r0, [r7, #8]
 800dfc2:	f7f8 fb02 	bl	80065ca <lwip_htonl>
 800dfc6:	4602      	mov	r2, r0
 800dfc8:	8abb      	ldrh	r3, [r7, #20]
 800dfca:	9303      	str	r3, [sp, #12]
 800dfcc:	2314      	movs	r3, #20
 800dfce:	9302      	str	r3, [sp, #8]
 800dfd0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dfd2:	9301      	str	r3, [sp, #4]
 800dfd4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dfd6:	9300      	str	r3, [sp, #0]
 800dfd8:	4613      	mov	r3, r2
 800dfda:	2200      	movs	r2, #0
 800dfdc:	4621      	mov	r1, r4
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f7ff fe92 	bl	800dd08 <tcp_output_alloc_header_common>
 800dfe4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d00c      	beq.n	800e006 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dfec:	7dfb      	ldrb	r3, [r7, #23]
 800dfee:	2200      	movs	r2, #0
 800dff0:	6939      	ldr	r1, [r7, #16]
 800dff2:	68f8      	ldr	r0, [r7, #12]
 800dff4:	f7ff ff38 	bl	800de68 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800dff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffa:	683a      	ldr	r2, [r7, #0]
 800dffc:	6939      	ldr	r1, [r7, #16]
 800dffe:	68f8      	ldr	r0, [r7, #12]
 800e000:	f7ff ff72 	bl	800dee8 <tcp_output_control_segment>
 800e004:	e000      	b.n	800e008 <tcp_rst+0x8c>
    return;
 800e006:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e008:	371c      	adds	r7, #28
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd90      	pop	{r4, r7, pc}
 800e00e:	bf00      	nop
 800e010:	08013a38 	.word	0x08013a38
 800e014:	080141bc 	.word	0x080141bc
 800e018:	08013a8c 	.word	0x08013a8c
 800e01c:	080141d8 	.word	0x080141d8

0800e020 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e020:	b590      	push	{r4, r7, lr}
 800e022:	b087      	sub	sp, #28
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e028:	2300      	movs	r3, #0
 800e02a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e02c:	2300      	movs	r3, #0
 800e02e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d106      	bne.n	800e044 <tcp_send_empty_ack+0x24>
 800e036:	4b28      	ldr	r3, [pc, #160]	; (800e0d8 <tcp_send_empty_ack+0xb8>)
 800e038:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e03c:	4927      	ldr	r1, [pc, #156]	; (800e0dc <tcp_send_empty_ack+0xbc>)
 800e03e:	4828      	ldr	r0, [pc, #160]	; (800e0e0 <tcp_send_empty_ack+0xc0>)
 800e040:	f002 ff72 	bl	8010f28 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e044:	7dfb      	ldrb	r3, [r7, #23]
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	f003 0304 	and.w	r3, r3, #4
 800e04e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e050:	7d7b      	ldrb	r3, [r7, #21]
 800e052:	b29c      	uxth	r4, r3
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e058:	4618      	mov	r0, r3
 800e05a:	f7f8 fab6 	bl	80065ca <lwip_htonl>
 800e05e:	4603      	mov	r3, r0
 800e060:	2200      	movs	r2, #0
 800e062:	4621      	mov	r1, r4
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f7ff fec1 	bl	800ddec <tcp_output_alloc_header>
 800e06a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d109      	bne.n	800e086 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	8b5b      	ldrh	r3, [r3, #26]
 800e076:	f043 0303 	orr.w	r3, r3, #3
 800e07a:	b29a      	uxth	r2, r3
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e080:	f06f 0301 	mvn.w	r3, #1
 800e084:	e023      	b.n	800e0ce <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e086:	7dbb      	ldrb	r3, [r7, #22]
 800e088:	7dfa      	ldrb	r2, [r7, #23]
 800e08a:	6939      	ldr	r1, [r7, #16]
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f7ff feeb 	bl	800de68 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e092:	687a      	ldr	r2, [r7, #4]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	3304      	adds	r3, #4
 800e098:	6939      	ldr	r1, [r7, #16]
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f7ff ff24 	bl	800dee8 <tcp_output_control_segment>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e0a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d007      	beq.n	800e0bc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	8b5b      	ldrh	r3, [r3, #26]
 800e0b0:	f043 0303 	orr.w	r3, r3, #3
 800e0b4:	b29a      	uxth	r2, r3
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	835a      	strh	r2, [r3, #26]
 800e0ba:	e006      	b.n	800e0ca <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	8b5b      	ldrh	r3, [r3, #26]
 800e0c0:	f023 0303 	bic.w	r3, r3, #3
 800e0c4:	b29a      	uxth	r2, r3
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e0ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	371c      	adds	r7, #28
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd90      	pop	{r4, r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	08013a38 	.word	0x08013a38
 800e0dc:	080141f4 	.word	0x080141f4
 800e0e0:	08013a8c 	.word	0x08013a8c

0800e0e4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e0e4:	b590      	push	{r4, r7, lr}
 800e0e6:	b087      	sub	sp, #28
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d106      	bne.n	800e104 <tcp_keepalive+0x20>
 800e0f6:	4b18      	ldr	r3, [pc, #96]	; (800e158 <tcp_keepalive+0x74>)
 800e0f8:	f640 0224 	movw	r2, #2084	; 0x824
 800e0fc:	4917      	ldr	r1, [pc, #92]	; (800e15c <tcp_keepalive+0x78>)
 800e0fe:	4818      	ldr	r0, [pc, #96]	; (800e160 <tcp_keepalive+0x7c>)
 800e100:	f002 ff12 	bl	8010f28 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e104:	7dfb      	ldrb	r3, [r7, #23]
 800e106:	b29c      	uxth	r4, r3
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e10c:	3b01      	subs	r3, #1
 800e10e:	4618      	mov	r0, r3
 800e110:	f7f8 fa5b 	bl	80065ca <lwip_htonl>
 800e114:	4603      	mov	r3, r0
 800e116:	2200      	movs	r2, #0
 800e118:	4621      	mov	r1, r4
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f7ff fe66 	bl	800ddec <tcp_output_alloc_header>
 800e120:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d102      	bne.n	800e12e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e128:	f04f 33ff 	mov.w	r3, #4294967295
 800e12c:	e010      	b.n	800e150 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e12e:	7dfb      	ldrb	r3, [r7, #23]
 800e130:	2200      	movs	r2, #0
 800e132:	6939      	ldr	r1, [r7, #16]
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f7ff fe97 	bl	800de68 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e13a:	687a      	ldr	r2, [r7, #4]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	3304      	adds	r3, #4
 800e140:	6939      	ldr	r1, [r7, #16]
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f7ff fed0 	bl	800dee8 <tcp_output_control_segment>
 800e148:	4603      	mov	r3, r0
 800e14a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e14c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e150:	4618      	mov	r0, r3
 800e152:	371c      	adds	r7, #28
 800e154:	46bd      	mov	sp, r7
 800e156:	bd90      	pop	{r4, r7, pc}
 800e158:	08013a38 	.word	0x08013a38
 800e15c:	08014214 	.word	0x08014214
 800e160:	08013a8c 	.word	0x08013a8c

0800e164 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e164:	b590      	push	{r4, r7, lr}
 800e166:	b08b      	sub	sp, #44	; 0x2c
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e16c:	2300      	movs	r3, #0
 800e16e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d106      	bne.n	800e186 <tcp_zero_window_probe+0x22>
 800e178:	4b4c      	ldr	r3, [pc, #304]	; (800e2ac <tcp_zero_window_probe+0x148>)
 800e17a:	f640 024f 	movw	r2, #2127	; 0x84f
 800e17e:	494c      	ldr	r1, [pc, #304]	; (800e2b0 <tcp_zero_window_probe+0x14c>)
 800e180:	484c      	ldr	r0, [pc, #304]	; (800e2b4 <tcp_zero_window_probe+0x150>)
 800e182:	f002 fed1 	bl	8010f28 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e18a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800e18c:	6a3b      	ldr	r3, [r7, #32]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d101      	bne.n	800e196 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800e192:	2300      	movs	r3, #0
 800e194:	e086      	b.n	800e2a4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e19c:	2bff      	cmp	r3, #255	; 0xff
 800e19e:	d007      	beq.n	800e1b0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e1a6:	3301      	adds	r3, #1
 800e1a8:	b2da      	uxtb	r2, r3
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e1b0:	6a3b      	ldr	r3, [r7, #32]
 800e1b2:	68db      	ldr	r3, [r3, #12]
 800e1b4:	899b      	ldrh	r3, [r3, #12]
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7f8 f9f1 	bl	80065a0 <lwip_htons>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	f003 0301 	and.w	r3, r3, #1
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d005      	beq.n	800e1d6 <tcp_zero_window_probe+0x72>
 800e1ca:	6a3b      	ldr	r3, [r7, #32]
 800e1cc:	891b      	ldrh	r3, [r3, #8]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d101      	bne.n	800e1d6 <tcp_zero_window_probe+0x72>
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	e000      	b.n	800e1d8 <tcp_zero_window_probe+0x74>
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e1da:	7ffb      	ldrb	r3, [r7, #31]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	bf0c      	ite	eq
 800e1e0:	2301      	moveq	r3, #1
 800e1e2:	2300      	movne	r3, #0
 800e1e4:	b2db      	uxtb	r3, r3
 800e1e6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e1e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1ec:	b299      	uxth	r1, r3
 800e1ee:	6a3b      	ldr	r3, [r7, #32]
 800e1f0:	68db      	ldr	r3, [r3, #12]
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	8bba      	ldrh	r2, [r7, #28]
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f7ff fdf8 	bl	800ddec <tcp_output_alloc_header>
 800e1fc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e1fe:	69bb      	ldr	r3, [r7, #24]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d102      	bne.n	800e20a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e204:	f04f 33ff 	mov.w	r3, #4294967295
 800e208:	e04c      	b.n	800e2a4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e20a:	69bb      	ldr	r3, [r7, #24]
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e210:	7ffb      	ldrb	r3, [r7, #31]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d011      	beq.n	800e23a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	899b      	ldrh	r3, [r3, #12]
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	b21b      	sxth	r3, r3
 800e21e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e222:	b21c      	sxth	r4, r3
 800e224:	2011      	movs	r0, #17
 800e226:	f7f8 f9bb 	bl	80065a0 <lwip_htons>
 800e22a:	4603      	mov	r3, r0
 800e22c:	b21b      	sxth	r3, r3
 800e22e:	4323      	orrs	r3, r4
 800e230:	b21b      	sxth	r3, r3
 800e232:	b29a      	uxth	r2, r3
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	819a      	strh	r2, [r3, #12]
 800e238:	e010      	b.n	800e25c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e23a:	69bb      	ldr	r3, [r7, #24]
 800e23c:	685b      	ldr	r3, [r3, #4]
 800e23e:	3314      	adds	r3, #20
 800e240:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e242:	6a3b      	ldr	r3, [r7, #32]
 800e244:	6858      	ldr	r0, [r3, #4]
 800e246:	6a3b      	ldr	r3, [r7, #32]
 800e248:	685b      	ldr	r3, [r3, #4]
 800e24a:	891a      	ldrh	r2, [r3, #8]
 800e24c:	6a3b      	ldr	r3, [r7, #32]
 800e24e:	891b      	ldrh	r3, [r3, #8]
 800e250:	1ad3      	subs	r3, r2, r3
 800e252:	b29b      	uxth	r3, r3
 800e254:	2201      	movs	r2, #1
 800e256:	6939      	ldr	r1, [r7, #16]
 800e258:	f7f9 ff54 	bl	8008104 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e25c:	6a3b      	ldr	r3, [r7, #32]
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	685b      	ldr	r3, [r3, #4]
 800e262:	4618      	mov	r0, r3
 800e264:	f7f8 f9b1 	bl	80065ca <lwip_htonl>
 800e268:	4603      	mov	r3, r0
 800e26a:	3301      	adds	r3, #1
 800e26c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	1ad3      	subs	r3, r2, r3
 800e276:	2b00      	cmp	r3, #0
 800e278:	da02      	bge.n	800e280 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	68fa      	ldr	r2, [r7, #12]
 800e27e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e284:	2200      	movs	r2, #0
 800e286:	69b9      	ldr	r1, [r7, #24]
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f7ff fded 	bl	800de68 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e28e:	687a      	ldr	r2, [r7, #4]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	3304      	adds	r3, #4
 800e294:	69b9      	ldr	r1, [r7, #24]
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f7ff fe26 	bl	800dee8 <tcp_output_control_segment>
 800e29c:	4603      	mov	r3, r0
 800e29e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e2a0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	372c      	adds	r7, #44	; 0x2c
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd90      	pop	{r4, r7, pc}
 800e2ac:	08013a38 	.word	0x08013a38
 800e2b0:	08014230 	.word	0x08014230
 800e2b4:	08013a8c 	.word	0x08013a8c

0800e2b8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b082      	sub	sp, #8
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e2c0:	f7fa f80e 	bl	80082e0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e2c4:	4b0a      	ldr	r3, [pc, #40]	; (800e2f0 <tcpip_tcp_timer+0x38>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d103      	bne.n	800e2d4 <tcpip_tcp_timer+0x1c>
 800e2cc:	4b09      	ldr	r3, [pc, #36]	; (800e2f4 <tcpip_tcp_timer+0x3c>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d005      	beq.n	800e2e0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	4908      	ldr	r1, [pc, #32]	; (800e2f8 <tcpip_tcp_timer+0x40>)
 800e2d8:	20fa      	movs	r0, #250	; 0xfa
 800e2da:	f000 f8f3 	bl	800e4c4 <sys_timeout>
 800e2de:	e003      	b.n	800e2e8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e2e0:	4b06      	ldr	r3, [pc, #24]	; (800e2fc <tcpip_tcp_timer+0x44>)
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	601a      	str	r2, [r3, #0]
  }
}
 800e2e6:	bf00      	nop
 800e2e8:	bf00      	nop
 800e2ea:	3708      	adds	r7, #8
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	20008754 	.word	0x20008754
 800e2f4:	20008758 	.word	0x20008758
 800e2f8:	0800e2b9 	.word	0x0800e2b9
 800e2fc:	200087a0 	.word	0x200087a0

0800e300 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e304:	4b0a      	ldr	r3, [pc, #40]	; (800e330 <tcp_timer_needed+0x30>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d10f      	bne.n	800e32c <tcp_timer_needed+0x2c>
 800e30c:	4b09      	ldr	r3, [pc, #36]	; (800e334 <tcp_timer_needed+0x34>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d103      	bne.n	800e31c <tcp_timer_needed+0x1c>
 800e314:	4b08      	ldr	r3, [pc, #32]	; (800e338 <tcp_timer_needed+0x38>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d007      	beq.n	800e32c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e31c:	4b04      	ldr	r3, [pc, #16]	; (800e330 <tcp_timer_needed+0x30>)
 800e31e:	2201      	movs	r2, #1
 800e320:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e322:	2200      	movs	r2, #0
 800e324:	4905      	ldr	r1, [pc, #20]	; (800e33c <tcp_timer_needed+0x3c>)
 800e326:	20fa      	movs	r0, #250	; 0xfa
 800e328:	f000 f8cc 	bl	800e4c4 <sys_timeout>
  }
}
 800e32c:	bf00      	nop
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	200087a0 	.word	0x200087a0
 800e334:	20008754 	.word	0x20008754
 800e338:	20008758 	.word	0x20008758
 800e33c:	0800e2b9 	.word	0x0800e2b9

0800e340 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b086      	sub	sp, #24
 800e344:	af00      	add	r7, sp, #0
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	60b9      	str	r1, [r7, #8]
 800e34a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e34c:	2006      	movs	r0, #6
 800e34e:	f7f8 fe09 	bl	8006f64 <memp_malloc>
 800e352:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d109      	bne.n	800e36e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d151      	bne.n	800e404 <sys_timeout_abs+0xc4>
 800e360:	4b2a      	ldr	r3, [pc, #168]	; (800e40c <sys_timeout_abs+0xcc>)
 800e362:	22be      	movs	r2, #190	; 0xbe
 800e364:	492a      	ldr	r1, [pc, #168]	; (800e410 <sys_timeout_abs+0xd0>)
 800e366:	482b      	ldr	r0, [pc, #172]	; (800e414 <sys_timeout_abs+0xd4>)
 800e368:	f002 fdde 	bl	8010f28 <iprintf>
    return;
 800e36c:	e04a      	b.n	800e404 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	2200      	movs	r2, #0
 800e372:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	68ba      	ldr	r2, [r7, #8]
 800e378:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	687a      	ldr	r2, [r7, #4]
 800e37e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	68fa      	ldr	r2, [r7, #12]
 800e384:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e386:	4b24      	ldr	r3, [pc, #144]	; (800e418 <sys_timeout_abs+0xd8>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d103      	bne.n	800e396 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e38e:	4a22      	ldr	r2, [pc, #136]	; (800e418 <sys_timeout_abs+0xd8>)
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	6013      	str	r3, [r2, #0]
    return;
 800e394:	e037      	b.n	800e406 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	685a      	ldr	r2, [r3, #4]
 800e39a:	4b1f      	ldr	r3, [pc, #124]	; (800e418 <sys_timeout_abs+0xd8>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	685b      	ldr	r3, [r3, #4]
 800e3a0:	1ad3      	subs	r3, r2, r3
 800e3a2:	0fdb      	lsrs	r3, r3, #31
 800e3a4:	f003 0301 	and.w	r3, r3, #1
 800e3a8:	b2db      	uxtb	r3, r3
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d007      	beq.n	800e3be <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e3ae:	4b1a      	ldr	r3, [pc, #104]	; (800e418 <sys_timeout_abs+0xd8>)
 800e3b0:	681a      	ldr	r2, [r3, #0]
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e3b6:	4a18      	ldr	r2, [pc, #96]	; (800e418 <sys_timeout_abs+0xd8>)
 800e3b8:	693b      	ldr	r3, [r7, #16]
 800e3ba:	6013      	str	r3, [r2, #0]
 800e3bc:	e023      	b.n	800e406 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e3be:	4b16      	ldr	r3, [pc, #88]	; (800e418 <sys_timeout_abs+0xd8>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	617b      	str	r3, [r7, #20]
 800e3c4:	e01a      	b.n	800e3fc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d00b      	beq.n	800e3e6 <sys_timeout_abs+0xa6>
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	685a      	ldr	r2, [r3, #4]
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	685b      	ldr	r3, [r3, #4]
 800e3d8:	1ad3      	subs	r3, r2, r3
 800e3da:	0fdb      	lsrs	r3, r3, #31
 800e3dc:	f003 0301 	and.w	r3, r3, #1
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d007      	beq.n	800e3f6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	681a      	ldr	r2, [r3, #0]
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	693a      	ldr	r2, [r7, #16]
 800e3f2:	601a      	str	r2, [r3, #0]
        break;
 800e3f4:	e007      	b.n	800e406 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	617b      	str	r3, [r7, #20]
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d1e1      	bne.n	800e3c6 <sys_timeout_abs+0x86>
 800e402:	e000      	b.n	800e406 <sys_timeout_abs+0xc6>
    return;
 800e404:	bf00      	nop
      }
    }
  }
}
 800e406:	3718      	adds	r7, #24
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}
 800e40c:	08014254 	.word	0x08014254
 800e410:	08014288 	.word	0x08014288
 800e414:	080142c8 	.word	0x080142c8
 800e418:	20008798 	.word	0x20008798

0800e41c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b086      	sub	sp, #24
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	685b      	ldr	r3, [r3, #4]
 800e42c:	4798      	blx	r3

  now = sys_now();
 800e42e:	f7f6 fb4d 	bl	8004acc <sys_now>
 800e432:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	681a      	ldr	r2, [r3, #0]
 800e438:	4b0f      	ldr	r3, [pc, #60]	; (800e478 <lwip_cyclic_timer+0x5c>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4413      	add	r3, r2
 800e43e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e440:	68fa      	ldr	r2, [r7, #12]
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	1ad3      	subs	r3, r2, r3
 800e446:	0fdb      	lsrs	r3, r3, #31
 800e448:	f003 0301 	and.w	r3, r3, #1
 800e44c:	b2db      	uxtb	r3, r3
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d009      	beq.n	800e466 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	681a      	ldr	r2, [r3, #0]
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	4413      	add	r3, r2
 800e45a:	687a      	ldr	r2, [r7, #4]
 800e45c:	4907      	ldr	r1, [pc, #28]	; (800e47c <lwip_cyclic_timer+0x60>)
 800e45e:	4618      	mov	r0, r3
 800e460:	f7ff ff6e 	bl	800e340 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e464:	e004      	b.n	800e470 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e466:	687a      	ldr	r2, [r7, #4]
 800e468:	4904      	ldr	r1, [pc, #16]	; (800e47c <lwip_cyclic_timer+0x60>)
 800e46a:	68f8      	ldr	r0, [r7, #12]
 800e46c:	f7ff ff68 	bl	800e340 <sys_timeout_abs>
}
 800e470:	bf00      	nop
 800e472:	3718      	adds	r7, #24
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	2000879c 	.word	0x2000879c
 800e47c:	0800e41d 	.word	0x0800e41d

0800e480 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b082      	sub	sp, #8
 800e484:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e486:	2301      	movs	r3, #1
 800e488:	607b      	str	r3, [r7, #4]
 800e48a:	e00e      	b.n	800e4aa <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e48c:	4a0b      	ldr	r2, [pc, #44]	; (800e4bc <sys_timeouts_init+0x3c>)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	00db      	lsls	r3, r3, #3
 800e498:	4a08      	ldr	r2, [pc, #32]	; (800e4bc <sys_timeouts_init+0x3c>)
 800e49a:	4413      	add	r3, r2
 800e49c:	461a      	mov	r2, r3
 800e49e:	4908      	ldr	r1, [pc, #32]	; (800e4c0 <sys_timeouts_init+0x40>)
 800e4a0:	f000 f810 	bl	800e4c4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	607b      	str	r3, [r7, #4]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2b02      	cmp	r3, #2
 800e4ae:	d9ed      	bls.n	800e48c <sys_timeouts_init+0xc>
  }
}
 800e4b0:	bf00      	nop
 800e4b2:	bf00      	nop
 800e4b4:	3708      	adds	r7, #8
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
 800e4ba:	bf00      	nop
 800e4bc:	08015310 	.word	0x08015310
 800e4c0:	0800e41d 	.word	0x0800e41d

0800e4c4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b086      	sub	sp, #24
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	60f8      	str	r0, [r7, #12]
 800e4cc:	60b9      	str	r1, [r7, #8]
 800e4ce:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4d6:	d306      	bcc.n	800e4e6 <sys_timeout+0x22>
 800e4d8:	4b0a      	ldr	r3, [pc, #40]	; (800e504 <sys_timeout+0x40>)
 800e4da:	f240 1229 	movw	r2, #297	; 0x129
 800e4de:	490a      	ldr	r1, [pc, #40]	; (800e508 <sys_timeout+0x44>)
 800e4e0:	480a      	ldr	r0, [pc, #40]	; (800e50c <sys_timeout+0x48>)
 800e4e2:	f002 fd21 	bl	8010f28 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e4e6:	f7f6 faf1 	bl	8004acc <sys_now>
 800e4ea:	4602      	mov	r2, r0
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	4413      	add	r3, r2
 800e4f0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e4f2:	687a      	ldr	r2, [r7, #4]
 800e4f4:	68b9      	ldr	r1, [r7, #8]
 800e4f6:	6978      	ldr	r0, [r7, #20]
 800e4f8:	f7ff ff22 	bl	800e340 <sys_timeout_abs>
#endif
}
 800e4fc:	bf00      	nop
 800e4fe:	3718      	adds	r7, #24
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}
 800e504:	08014254 	.word	0x08014254
 800e508:	080142f0 	.word	0x080142f0
 800e50c:	080142c8 	.word	0x080142c8

0800e510 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b084      	sub	sp, #16
 800e514:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e516:	f7f6 fad9 	bl	8004acc <sys_now>
 800e51a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800e51c:	4b1a      	ldr	r3, [pc, #104]	; (800e588 <sys_check_timeouts+0x78>)
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	b2db      	uxtb	r3, r3
 800e522:	2b00      	cmp	r3, #0
 800e524:	d001      	beq.n	800e52a <sys_check_timeouts+0x1a>
 800e526:	f7f9 f8c9 	bl	80076bc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800e52a:	4b18      	ldr	r3, [pc, #96]	; (800e58c <sys_check_timeouts+0x7c>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d022      	beq.n	800e57c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	685b      	ldr	r3, [r3, #4]
 800e53a:	68fa      	ldr	r2, [r7, #12]
 800e53c:	1ad3      	subs	r3, r2, r3
 800e53e:	0fdb      	lsrs	r3, r3, #31
 800e540:	f003 0301 	and.w	r3, r3, #1
 800e544:	b2db      	uxtb	r3, r3
 800e546:	2b00      	cmp	r3, #0
 800e548:	d11a      	bne.n	800e580 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	4a0f      	ldr	r2, [pc, #60]	; (800e58c <sys_check_timeouts+0x7c>)
 800e550:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	689b      	ldr	r3, [r3, #8]
 800e556:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	68db      	ldr	r3, [r3, #12]
 800e55c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	685b      	ldr	r3, [r3, #4]
 800e562:	4a0b      	ldr	r2, [pc, #44]	; (800e590 <sys_check_timeouts+0x80>)
 800e564:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e566:	68b9      	ldr	r1, [r7, #8]
 800e568:	2006      	movs	r0, #6
 800e56a:	f7f8 fd6b 	bl	8007044 <memp_free>
    if (handler != NULL) {
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d0d3      	beq.n	800e51c <sys_check_timeouts+0xc>
      handler(arg);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6838      	ldr	r0, [r7, #0]
 800e578:	4798      	blx	r3
  do {
 800e57a:	e7cf      	b.n	800e51c <sys_check_timeouts+0xc>
      return;
 800e57c:	bf00      	nop
 800e57e:	e000      	b.n	800e582 <sys_check_timeouts+0x72>
      return;
 800e580:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e582:	3710      	adds	r7, #16
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}
 800e588:	20008745 	.word	0x20008745
 800e58c:	20008798 	.word	0x20008798
 800e590:	2000879c 	.word	0x2000879c

0800e594 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e598:	f002 fcde 	bl	8010f58 <rand>
 800e59c:	4603      	mov	r3, r0
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e5a4:	b29b      	uxth	r3, r3
 800e5a6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e5aa:	b29a      	uxth	r2, r3
 800e5ac:	4b01      	ldr	r3, [pc, #4]	; (800e5b4 <udp_init+0x20>)
 800e5ae:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e5b0:	bf00      	nop
 800e5b2:	bd80      	pop	{r7, pc}
 800e5b4:	20000078 	.word	0x20000078

0800e5b8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b084      	sub	sp, #16
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	60f8      	str	r0, [r7, #12]
 800e5c0:	60b9      	str	r1, [r7, #8]
 800e5c2:	4613      	mov	r3, r2
 800e5c4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d105      	bne.n	800e5d8 <udp_input_local_match+0x20>
 800e5cc:	4b27      	ldr	r3, [pc, #156]	; (800e66c <udp_input_local_match+0xb4>)
 800e5ce:	2287      	movs	r2, #135	; 0x87
 800e5d0:	4927      	ldr	r1, [pc, #156]	; (800e670 <udp_input_local_match+0xb8>)
 800e5d2:	4828      	ldr	r0, [pc, #160]	; (800e674 <udp_input_local_match+0xbc>)
 800e5d4:	f002 fca8 	bl	8010f28 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d105      	bne.n	800e5ea <udp_input_local_match+0x32>
 800e5de:	4b23      	ldr	r3, [pc, #140]	; (800e66c <udp_input_local_match+0xb4>)
 800e5e0:	2288      	movs	r2, #136	; 0x88
 800e5e2:	4925      	ldr	r1, [pc, #148]	; (800e678 <udp_input_local_match+0xc0>)
 800e5e4:	4823      	ldr	r0, [pc, #140]	; (800e674 <udp_input_local_match+0xbc>)
 800e5e6:	f002 fc9f 	bl	8010f28 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	7a1b      	ldrb	r3, [r3, #8]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d00b      	beq.n	800e60a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	7a1a      	ldrb	r2, [r3, #8]
 800e5f6:	4b21      	ldr	r3, [pc, #132]	; (800e67c <udp_input_local_match+0xc4>)
 800e5f8:	685b      	ldr	r3, [r3, #4]
 800e5fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e5fe:	3301      	adds	r3, #1
 800e600:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e602:	429a      	cmp	r2, r3
 800e604:	d001      	beq.n	800e60a <udp_input_local_match+0x52>
    return 0;
 800e606:	2300      	movs	r3, #0
 800e608:	e02b      	b.n	800e662 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e60a:	79fb      	ldrb	r3, [r7, #7]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d018      	beq.n	800e642 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d013      	beq.n	800e63e <udp_input_local_match+0x86>
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d00f      	beq.n	800e63e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e61e:	4b17      	ldr	r3, [pc, #92]	; (800e67c <udp_input_local_match+0xc4>)
 800e620:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e626:	d00a      	beq.n	800e63e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	681a      	ldr	r2, [r3, #0]
 800e62c:	4b13      	ldr	r3, [pc, #76]	; (800e67c <udp_input_local_match+0xc4>)
 800e62e:	695b      	ldr	r3, [r3, #20]
 800e630:	405a      	eors	r2, r3
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	3308      	adds	r3, #8
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d110      	bne.n	800e660 <udp_input_local_match+0xa8>
          return 1;
 800e63e:	2301      	movs	r3, #1
 800e640:	e00f      	b.n	800e662 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d009      	beq.n	800e65c <udp_input_local_match+0xa4>
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d005      	beq.n	800e65c <udp_input_local_match+0xa4>
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	681a      	ldr	r2, [r3, #0]
 800e654:	4b09      	ldr	r3, [pc, #36]	; (800e67c <udp_input_local_match+0xc4>)
 800e656:	695b      	ldr	r3, [r3, #20]
 800e658:	429a      	cmp	r2, r3
 800e65a:	d101      	bne.n	800e660 <udp_input_local_match+0xa8>
        return 1;
 800e65c:	2301      	movs	r3, #1
 800e65e:	e000      	b.n	800e662 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e660:	2300      	movs	r3, #0
}
 800e662:	4618      	mov	r0, r3
 800e664:	3710      	adds	r7, #16
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
 800e66a:	bf00      	nop
 800e66c:	0801433c 	.word	0x0801433c
 800e670:	0801436c 	.word	0x0801436c
 800e674:	08014390 	.word	0x08014390
 800e678:	080143b8 	.word	0x080143b8
 800e67c:	200051d8 	.word	0x200051d8

0800e680 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e680:	b590      	push	{r4, r7, lr}
 800e682:	b08d      	sub	sp, #52	; 0x34
 800e684:	af02      	add	r7, sp, #8
 800e686:	6078      	str	r0, [r7, #4]
 800e688:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e68a:	2300      	movs	r3, #0
 800e68c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d105      	bne.n	800e6a0 <udp_input+0x20>
 800e694:	4b7c      	ldr	r3, [pc, #496]	; (800e888 <udp_input+0x208>)
 800e696:	22cf      	movs	r2, #207	; 0xcf
 800e698:	497c      	ldr	r1, [pc, #496]	; (800e88c <udp_input+0x20c>)
 800e69a:	487d      	ldr	r0, [pc, #500]	; (800e890 <udp_input+0x210>)
 800e69c:	f002 fc44 	bl	8010f28 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d105      	bne.n	800e6b2 <udp_input+0x32>
 800e6a6:	4b78      	ldr	r3, [pc, #480]	; (800e888 <udp_input+0x208>)
 800e6a8:	22d0      	movs	r2, #208	; 0xd0
 800e6aa:	497a      	ldr	r1, [pc, #488]	; (800e894 <udp_input+0x214>)
 800e6ac:	4878      	ldr	r0, [pc, #480]	; (800e890 <udp_input+0x210>)
 800e6ae:	f002 fc3b 	bl	8010f28 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	895b      	ldrh	r3, [r3, #10]
 800e6b6:	2b07      	cmp	r3, #7
 800e6b8:	d803      	bhi.n	800e6c2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f7f9 fb38 	bl	8007d30 <pbuf_free>
    goto end;
 800e6c0:	e0de      	b.n	800e880 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	685b      	ldr	r3, [r3, #4]
 800e6c6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e6c8:	4b73      	ldr	r3, [pc, #460]	; (800e898 <udp_input+0x218>)
 800e6ca:	695b      	ldr	r3, [r3, #20]
 800e6cc:	4a72      	ldr	r2, [pc, #456]	; (800e898 <udp_input+0x218>)
 800e6ce:	6812      	ldr	r2, [r2, #0]
 800e6d0:	4611      	mov	r1, r2
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f001 fc88 	bl	800ffe8 <ip4_addr_isbroadcast_u32>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	881b      	ldrh	r3, [r3, #0]
 800e6e0:	b29b      	uxth	r3, r3
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7f7 ff5c 	bl	80065a0 <lwip_htons>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	885b      	ldrh	r3, [r3, #2]
 800e6f0:	b29b      	uxth	r3, r3
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7f7 ff54 	bl	80065a0 <lwip_htons>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e700:	2300      	movs	r3, #0
 800e702:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e704:	2300      	movs	r3, #0
 800e706:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e708:	4b64      	ldr	r3, [pc, #400]	; (800e89c <udp_input+0x21c>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	627b      	str	r3, [r7, #36]	; 0x24
 800e70e:	e054      	b.n	800e7ba <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e712:	8a5b      	ldrh	r3, [r3, #18]
 800e714:	89fa      	ldrh	r2, [r7, #14]
 800e716:	429a      	cmp	r2, r3
 800e718:	d14a      	bne.n	800e7b0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e71a:	7cfb      	ldrb	r3, [r7, #19]
 800e71c:	461a      	mov	r2, r3
 800e71e:	6839      	ldr	r1, [r7, #0]
 800e720:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e722:	f7ff ff49 	bl	800e5b8 <udp_input_local_match>
 800e726:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d041      	beq.n	800e7b0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72e:	7c1b      	ldrb	r3, [r3, #16]
 800e730:	f003 0304 	and.w	r3, r3, #4
 800e734:	2b00      	cmp	r3, #0
 800e736:	d11d      	bne.n	800e774 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e738:	69fb      	ldr	r3, [r7, #28]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d102      	bne.n	800e744 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e740:	61fb      	str	r3, [r7, #28]
 800e742:	e017      	b.n	800e774 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e744:	7cfb      	ldrb	r3, [r7, #19]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d014      	beq.n	800e774 <udp_input+0xf4>
 800e74a:	4b53      	ldr	r3, [pc, #332]	; (800e898 <udp_input+0x218>)
 800e74c:	695b      	ldr	r3, [r3, #20]
 800e74e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e752:	d10f      	bne.n	800e774 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	681a      	ldr	r2, [r3, #0]
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	3304      	adds	r3, #4
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	429a      	cmp	r2, r3
 800e760:	d008      	beq.n	800e774 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e764:	681a      	ldr	r2, [r3, #0]
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	3304      	adds	r3, #4
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d101      	bne.n	800e774 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e772:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e776:	8a9b      	ldrh	r3, [r3, #20]
 800e778:	8a3a      	ldrh	r2, [r7, #16]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d118      	bne.n	800e7b0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e780:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e782:	2b00      	cmp	r3, #0
 800e784:	d005      	beq.n	800e792 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e788:	685a      	ldr	r2, [r3, #4]
 800e78a:	4b43      	ldr	r3, [pc, #268]	; (800e898 <udp_input+0x218>)
 800e78c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e78e:	429a      	cmp	r2, r3
 800e790:	d10e      	bne.n	800e7b0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e792:	6a3b      	ldr	r3, [r7, #32]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d014      	beq.n	800e7c2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79a:	68da      	ldr	r2, [r3, #12]
 800e79c:	6a3b      	ldr	r3, [r7, #32]
 800e79e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e7a0:	4b3e      	ldr	r3, [pc, #248]	; (800e89c <udp_input+0x21c>)
 800e7a2:	681a      	ldr	r2, [r3, #0]
 800e7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e7a8:	4a3c      	ldr	r2, [pc, #240]	; (800e89c <udp_input+0x21c>)
 800e7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ac:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e7ae:	e008      	b.n	800e7c2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800e7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b6:	68db      	ldr	r3, [r3, #12]
 800e7b8:	627b      	str	r3, [r7, #36]	; 0x24
 800e7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d1a7      	bne.n	800e710 <udp_input+0x90>
 800e7c0:	e000      	b.n	800e7c4 <udp_input+0x144>
        break;
 800e7c2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d101      	bne.n	800e7ce <udp_input+0x14e>
    pcb = uncon_pcb;
 800e7ca:	69fb      	ldr	r3, [r7, #28]
 800e7cc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d002      	beq.n	800e7da <udp_input+0x15a>
    for_us = 1;
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	76fb      	strb	r3, [r7, #27]
 800e7d8:	e00a      	b.n	800e7f0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	3304      	adds	r3, #4
 800e7de:	681a      	ldr	r2, [r3, #0]
 800e7e0:	4b2d      	ldr	r3, [pc, #180]	; (800e898 <udp_input+0x218>)
 800e7e2:	695b      	ldr	r3, [r3, #20]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	bf0c      	ite	eq
 800e7e8:	2301      	moveq	r3, #1
 800e7ea:	2300      	movne	r3, #0
 800e7ec:	b2db      	uxtb	r3, r3
 800e7ee:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e7f0:	7efb      	ldrb	r3, [r7, #27]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d041      	beq.n	800e87a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e7f6:	2108      	movs	r1, #8
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f7f9 fa13 	bl	8007c24 <pbuf_remove_header>
 800e7fe:	4603      	mov	r3, r0
 800e800:	2b00      	cmp	r3, #0
 800e802:	d00a      	beq.n	800e81a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e804:	4b20      	ldr	r3, [pc, #128]	; (800e888 <udp_input+0x208>)
 800e806:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e80a:	4925      	ldr	r1, [pc, #148]	; (800e8a0 <udp_input+0x220>)
 800e80c:	4820      	ldr	r0, [pc, #128]	; (800e890 <udp_input+0x210>)
 800e80e:	f002 fb8b 	bl	8010f28 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f7f9 fa8c 	bl	8007d30 <pbuf_free>
      goto end;
 800e818:	e032      	b.n	800e880 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d012      	beq.n	800e846 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e822:	699b      	ldr	r3, [r3, #24]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d00a      	beq.n	800e83e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82a:	699c      	ldr	r4, [r3, #24]
 800e82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82e:	69d8      	ldr	r0, [r3, #28]
 800e830:	8a3b      	ldrh	r3, [r7, #16]
 800e832:	9300      	str	r3, [sp, #0]
 800e834:	4b1b      	ldr	r3, [pc, #108]	; (800e8a4 <udp_input+0x224>)
 800e836:	687a      	ldr	r2, [r7, #4]
 800e838:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e83a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e83c:	e021      	b.n	800e882 <udp_input+0x202>
        pbuf_free(p);
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	f7f9 fa76 	bl	8007d30 <pbuf_free>
        goto end;
 800e844:	e01c      	b.n	800e880 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e846:	7cfb      	ldrb	r3, [r7, #19]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d112      	bne.n	800e872 <udp_input+0x1f2>
 800e84c:	4b12      	ldr	r3, [pc, #72]	; (800e898 <udp_input+0x218>)
 800e84e:	695b      	ldr	r3, [r3, #20]
 800e850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e854:	2be0      	cmp	r3, #224	; 0xe0
 800e856:	d00c      	beq.n	800e872 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e858:	4b0f      	ldr	r3, [pc, #60]	; (800e898 <udp_input+0x218>)
 800e85a:	899b      	ldrh	r3, [r3, #12]
 800e85c:	3308      	adds	r3, #8
 800e85e:	b29b      	uxth	r3, r3
 800e860:	b21b      	sxth	r3, r3
 800e862:	4619      	mov	r1, r3
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f7f9 fa50 	bl	8007d0a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e86a:	2103      	movs	r1, #3
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f001 f89b 	bl	800f9a8 <icmp_dest_unreach>
      pbuf_free(p);
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f7f9 fa5c 	bl	8007d30 <pbuf_free>
  return;
 800e878:	e003      	b.n	800e882 <udp_input+0x202>
    pbuf_free(p);
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f7f9 fa58 	bl	8007d30 <pbuf_free>
  return;
 800e880:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e882:	372c      	adds	r7, #44	; 0x2c
 800e884:	46bd      	mov	sp, r7
 800e886:	bd90      	pop	{r4, r7, pc}
 800e888:	0801433c 	.word	0x0801433c
 800e88c:	080143e0 	.word	0x080143e0
 800e890:	08014390 	.word	0x08014390
 800e894:	080143f8 	.word	0x080143f8
 800e898:	200051d8 	.word	0x200051d8
 800e89c:	200087a4 	.word	0x200087a4
 800e8a0:	08014414 	.word	0x08014414
 800e8a4:	200051e8 	.word	0x200051e8

0800e8a8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e8a8:	b480      	push	{r7}
 800e8aa:	b085      	sub	sp, #20
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d01e      	beq.n	800e8f6 <udp_netif_ip_addr_changed+0x4e>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d01a      	beq.n	800e8f6 <udp_netif_ip_addr_changed+0x4e>
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d017      	beq.n	800e8f6 <udp_netif_ip_addr_changed+0x4e>
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d013      	beq.n	800e8f6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e8ce:	4b0d      	ldr	r3, [pc, #52]	; (800e904 <udp_netif_ip_addr_changed+0x5c>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	60fb      	str	r3, [r7, #12]
 800e8d4:	e00c      	b.n	800e8f0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	681a      	ldr	r2, [r3, #0]
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d103      	bne.n	800e8ea <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	681a      	ldr	r2, [r3, #0]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	68db      	ldr	r3, [r3, #12]
 800e8ee:	60fb      	str	r3, [r7, #12]
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d1ef      	bne.n	800e8d6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e8f6:	bf00      	nop
 800e8f8:	3714      	adds	r7, #20
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e900:	4770      	bx	lr
 800e902:	bf00      	nop
 800e904:	200087a4 	.word	0x200087a4

0800e908 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e910:	4915      	ldr	r1, [pc, #84]	; (800e968 <etharp_free_entry+0x60>)
 800e912:	687a      	ldr	r2, [r7, #4]
 800e914:	4613      	mov	r3, r2
 800e916:	005b      	lsls	r3, r3, #1
 800e918:	4413      	add	r3, r2
 800e91a:	00db      	lsls	r3, r3, #3
 800e91c:	440b      	add	r3, r1
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d013      	beq.n	800e94c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e924:	4910      	ldr	r1, [pc, #64]	; (800e968 <etharp_free_entry+0x60>)
 800e926:	687a      	ldr	r2, [r7, #4]
 800e928:	4613      	mov	r3, r2
 800e92a:	005b      	lsls	r3, r3, #1
 800e92c:	4413      	add	r3, r2
 800e92e:	00db      	lsls	r3, r3, #3
 800e930:	440b      	add	r3, r1
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	4618      	mov	r0, r3
 800e936:	f7f9 f9fb 	bl	8007d30 <pbuf_free>
    arp_table[i].q = NULL;
 800e93a:	490b      	ldr	r1, [pc, #44]	; (800e968 <etharp_free_entry+0x60>)
 800e93c:	687a      	ldr	r2, [r7, #4]
 800e93e:	4613      	mov	r3, r2
 800e940:	005b      	lsls	r3, r3, #1
 800e942:	4413      	add	r3, r2
 800e944:	00db      	lsls	r3, r3, #3
 800e946:	440b      	add	r3, r1
 800e948:	2200      	movs	r2, #0
 800e94a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e94c:	4906      	ldr	r1, [pc, #24]	; (800e968 <etharp_free_entry+0x60>)
 800e94e:	687a      	ldr	r2, [r7, #4]
 800e950:	4613      	mov	r3, r2
 800e952:	005b      	lsls	r3, r3, #1
 800e954:	4413      	add	r3, r2
 800e956:	00db      	lsls	r3, r3, #3
 800e958:	440b      	add	r3, r1
 800e95a:	3314      	adds	r3, #20
 800e95c:	2200      	movs	r2, #0
 800e95e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e960:	bf00      	nop
 800e962:	3708      	adds	r7, #8
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}
 800e968:	200087a8 	.word	0x200087a8

0800e96c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e972:	2300      	movs	r3, #0
 800e974:	607b      	str	r3, [r7, #4]
 800e976:	e096      	b.n	800eaa6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e978:	494f      	ldr	r1, [pc, #316]	; (800eab8 <etharp_tmr+0x14c>)
 800e97a:	687a      	ldr	r2, [r7, #4]
 800e97c:	4613      	mov	r3, r2
 800e97e:	005b      	lsls	r3, r3, #1
 800e980:	4413      	add	r3, r2
 800e982:	00db      	lsls	r3, r3, #3
 800e984:	440b      	add	r3, r1
 800e986:	3314      	adds	r3, #20
 800e988:	781b      	ldrb	r3, [r3, #0]
 800e98a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e98c:	78fb      	ldrb	r3, [r7, #3]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	f000 8086 	beq.w	800eaa0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e994:	4948      	ldr	r1, [pc, #288]	; (800eab8 <etharp_tmr+0x14c>)
 800e996:	687a      	ldr	r2, [r7, #4]
 800e998:	4613      	mov	r3, r2
 800e99a:	005b      	lsls	r3, r3, #1
 800e99c:	4413      	add	r3, r2
 800e99e:	00db      	lsls	r3, r3, #3
 800e9a0:	440b      	add	r3, r1
 800e9a2:	3312      	adds	r3, #18
 800e9a4:	881b      	ldrh	r3, [r3, #0]
 800e9a6:	3301      	adds	r3, #1
 800e9a8:	b298      	uxth	r0, r3
 800e9aa:	4943      	ldr	r1, [pc, #268]	; (800eab8 <etharp_tmr+0x14c>)
 800e9ac:	687a      	ldr	r2, [r7, #4]
 800e9ae:	4613      	mov	r3, r2
 800e9b0:	005b      	lsls	r3, r3, #1
 800e9b2:	4413      	add	r3, r2
 800e9b4:	00db      	lsls	r3, r3, #3
 800e9b6:	440b      	add	r3, r1
 800e9b8:	3312      	adds	r3, #18
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e9be:	493e      	ldr	r1, [pc, #248]	; (800eab8 <etharp_tmr+0x14c>)
 800e9c0:	687a      	ldr	r2, [r7, #4]
 800e9c2:	4613      	mov	r3, r2
 800e9c4:	005b      	lsls	r3, r3, #1
 800e9c6:	4413      	add	r3, r2
 800e9c8:	00db      	lsls	r3, r3, #3
 800e9ca:	440b      	add	r3, r1
 800e9cc:	3312      	adds	r3, #18
 800e9ce:	881b      	ldrh	r3, [r3, #0]
 800e9d0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e9d4:	d215      	bcs.n	800ea02 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e9d6:	4938      	ldr	r1, [pc, #224]	; (800eab8 <etharp_tmr+0x14c>)
 800e9d8:	687a      	ldr	r2, [r7, #4]
 800e9da:	4613      	mov	r3, r2
 800e9dc:	005b      	lsls	r3, r3, #1
 800e9de:	4413      	add	r3, r2
 800e9e0:	00db      	lsls	r3, r3, #3
 800e9e2:	440b      	add	r3, r1
 800e9e4:	3314      	adds	r3, #20
 800e9e6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e9e8:	2b01      	cmp	r3, #1
 800e9ea:	d10e      	bne.n	800ea0a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e9ec:	4932      	ldr	r1, [pc, #200]	; (800eab8 <etharp_tmr+0x14c>)
 800e9ee:	687a      	ldr	r2, [r7, #4]
 800e9f0:	4613      	mov	r3, r2
 800e9f2:	005b      	lsls	r3, r3, #1
 800e9f4:	4413      	add	r3, r2
 800e9f6:	00db      	lsls	r3, r3, #3
 800e9f8:	440b      	add	r3, r1
 800e9fa:	3312      	adds	r3, #18
 800e9fc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e9fe:	2b04      	cmp	r3, #4
 800ea00:	d903      	bls.n	800ea0a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f7ff ff80 	bl	800e908 <etharp_free_entry>
 800ea08:	e04a      	b.n	800eaa0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ea0a:	492b      	ldr	r1, [pc, #172]	; (800eab8 <etharp_tmr+0x14c>)
 800ea0c:	687a      	ldr	r2, [r7, #4]
 800ea0e:	4613      	mov	r3, r2
 800ea10:	005b      	lsls	r3, r3, #1
 800ea12:	4413      	add	r3, r2
 800ea14:	00db      	lsls	r3, r3, #3
 800ea16:	440b      	add	r3, r1
 800ea18:	3314      	adds	r3, #20
 800ea1a:	781b      	ldrb	r3, [r3, #0]
 800ea1c:	2b03      	cmp	r3, #3
 800ea1e:	d10a      	bne.n	800ea36 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ea20:	4925      	ldr	r1, [pc, #148]	; (800eab8 <etharp_tmr+0x14c>)
 800ea22:	687a      	ldr	r2, [r7, #4]
 800ea24:	4613      	mov	r3, r2
 800ea26:	005b      	lsls	r3, r3, #1
 800ea28:	4413      	add	r3, r2
 800ea2a:	00db      	lsls	r3, r3, #3
 800ea2c:	440b      	add	r3, r1
 800ea2e:	3314      	adds	r3, #20
 800ea30:	2204      	movs	r2, #4
 800ea32:	701a      	strb	r2, [r3, #0]
 800ea34:	e034      	b.n	800eaa0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ea36:	4920      	ldr	r1, [pc, #128]	; (800eab8 <etharp_tmr+0x14c>)
 800ea38:	687a      	ldr	r2, [r7, #4]
 800ea3a:	4613      	mov	r3, r2
 800ea3c:	005b      	lsls	r3, r3, #1
 800ea3e:	4413      	add	r3, r2
 800ea40:	00db      	lsls	r3, r3, #3
 800ea42:	440b      	add	r3, r1
 800ea44:	3314      	adds	r3, #20
 800ea46:	781b      	ldrb	r3, [r3, #0]
 800ea48:	2b04      	cmp	r3, #4
 800ea4a:	d10a      	bne.n	800ea62 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ea4c:	491a      	ldr	r1, [pc, #104]	; (800eab8 <etharp_tmr+0x14c>)
 800ea4e:	687a      	ldr	r2, [r7, #4]
 800ea50:	4613      	mov	r3, r2
 800ea52:	005b      	lsls	r3, r3, #1
 800ea54:	4413      	add	r3, r2
 800ea56:	00db      	lsls	r3, r3, #3
 800ea58:	440b      	add	r3, r1
 800ea5a:	3314      	adds	r3, #20
 800ea5c:	2202      	movs	r2, #2
 800ea5e:	701a      	strb	r2, [r3, #0]
 800ea60:	e01e      	b.n	800eaa0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ea62:	4915      	ldr	r1, [pc, #84]	; (800eab8 <etharp_tmr+0x14c>)
 800ea64:	687a      	ldr	r2, [r7, #4]
 800ea66:	4613      	mov	r3, r2
 800ea68:	005b      	lsls	r3, r3, #1
 800ea6a:	4413      	add	r3, r2
 800ea6c:	00db      	lsls	r3, r3, #3
 800ea6e:	440b      	add	r3, r1
 800ea70:	3314      	adds	r3, #20
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	d113      	bne.n	800eaa0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ea78:	490f      	ldr	r1, [pc, #60]	; (800eab8 <etharp_tmr+0x14c>)
 800ea7a:	687a      	ldr	r2, [r7, #4]
 800ea7c:	4613      	mov	r3, r2
 800ea7e:	005b      	lsls	r3, r3, #1
 800ea80:	4413      	add	r3, r2
 800ea82:	00db      	lsls	r3, r3, #3
 800ea84:	440b      	add	r3, r1
 800ea86:	3308      	adds	r3, #8
 800ea88:	6818      	ldr	r0, [r3, #0]
 800ea8a:	687a      	ldr	r2, [r7, #4]
 800ea8c:	4613      	mov	r3, r2
 800ea8e:	005b      	lsls	r3, r3, #1
 800ea90:	4413      	add	r3, r2
 800ea92:	00db      	lsls	r3, r3, #3
 800ea94:	4a08      	ldr	r2, [pc, #32]	; (800eab8 <etharp_tmr+0x14c>)
 800ea96:	4413      	add	r3, r2
 800ea98:	3304      	adds	r3, #4
 800ea9a:	4619      	mov	r1, r3
 800ea9c:	f000 fe6e 	bl	800f77c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	607b      	str	r3, [r7, #4]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	2b09      	cmp	r3, #9
 800eaaa:	f77f af65 	ble.w	800e978 <etharp_tmr+0xc>
      }
    }
  }
}
 800eaae:	bf00      	nop
 800eab0:	bf00      	nop
 800eab2:	3708      	adds	r7, #8
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}
 800eab8:	200087a8 	.word	0x200087a8

0800eabc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b08a      	sub	sp, #40	; 0x28
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	60f8      	str	r0, [r7, #12]
 800eac4:	460b      	mov	r3, r1
 800eac6:	607a      	str	r2, [r7, #4]
 800eac8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800eaca:	230a      	movs	r3, #10
 800eacc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800eace:	230a      	movs	r3, #10
 800ead0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ead2:	230a      	movs	r3, #10
 800ead4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800ead6:	2300      	movs	r3, #0
 800ead8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800eada:	230a      	movs	r3, #10
 800eadc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800eade:	2300      	movs	r3, #0
 800eae0:	83bb      	strh	r3, [r7, #28]
 800eae2:	2300      	movs	r3, #0
 800eae4:	837b      	strh	r3, [r7, #26]
 800eae6:	2300      	movs	r3, #0
 800eae8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eaea:	2300      	movs	r3, #0
 800eaec:	843b      	strh	r3, [r7, #32]
 800eaee:	e0ae      	b.n	800ec4e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800eaf0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eaf4:	49a6      	ldr	r1, [pc, #664]	; (800ed90 <etharp_find_entry+0x2d4>)
 800eaf6:	4613      	mov	r3, r2
 800eaf8:	005b      	lsls	r3, r3, #1
 800eafa:	4413      	add	r3, r2
 800eafc:	00db      	lsls	r3, r3, #3
 800eafe:	440b      	add	r3, r1
 800eb00:	3314      	adds	r3, #20
 800eb02:	781b      	ldrb	r3, [r3, #0]
 800eb04:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800eb06:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800eb0a:	2b0a      	cmp	r3, #10
 800eb0c:	d105      	bne.n	800eb1a <etharp_find_entry+0x5e>
 800eb0e:	7dfb      	ldrb	r3, [r7, #23]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d102      	bne.n	800eb1a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800eb14:	8c3b      	ldrh	r3, [r7, #32]
 800eb16:	847b      	strh	r3, [r7, #34]	; 0x22
 800eb18:	e095      	b.n	800ec46 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800eb1a:	7dfb      	ldrb	r3, [r7, #23]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	f000 8092 	beq.w	800ec46 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800eb22:	7dfb      	ldrb	r3, [r7, #23]
 800eb24:	2b01      	cmp	r3, #1
 800eb26:	d009      	beq.n	800eb3c <etharp_find_entry+0x80>
 800eb28:	7dfb      	ldrb	r3, [r7, #23]
 800eb2a:	2b01      	cmp	r3, #1
 800eb2c:	d806      	bhi.n	800eb3c <etharp_find_entry+0x80>
 800eb2e:	4b99      	ldr	r3, [pc, #612]	; (800ed94 <etharp_find_entry+0x2d8>)
 800eb30:	f240 1223 	movw	r2, #291	; 0x123
 800eb34:	4998      	ldr	r1, [pc, #608]	; (800ed98 <etharp_find_entry+0x2dc>)
 800eb36:	4899      	ldr	r0, [pc, #612]	; (800ed9c <etharp_find_entry+0x2e0>)
 800eb38:	f002 f9f6 	bl	8010f28 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d020      	beq.n	800eb84 <etharp_find_entry+0xc8>
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	6819      	ldr	r1, [r3, #0]
 800eb46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb4a:	4891      	ldr	r0, [pc, #580]	; (800ed90 <etharp_find_entry+0x2d4>)
 800eb4c:	4613      	mov	r3, r2
 800eb4e:	005b      	lsls	r3, r3, #1
 800eb50:	4413      	add	r3, r2
 800eb52:	00db      	lsls	r3, r3, #3
 800eb54:	4403      	add	r3, r0
 800eb56:	3304      	adds	r3, #4
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	4299      	cmp	r1, r3
 800eb5c:	d112      	bne.n	800eb84 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d00c      	beq.n	800eb7e <etharp_find_entry+0xc2>
 800eb64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb68:	4989      	ldr	r1, [pc, #548]	; (800ed90 <etharp_find_entry+0x2d4>)
 800eb6a:	4613      	mov	r3, r2
 800eb6c:	005b      	lsls	r3, r3, #1
 800eb6e:	4413      	add	r3, r2
 800eb70:	00db      	lsls	r3, r3, #3
 800eb72:	440b      	add	r3, r1
 800eb74:	3308      	adds	r3, #8
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	687a      	ldr	r2, [r7, #4]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d102      	bne.n	800eb84 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800eb7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800eb82:	e100      	b.n	800ed86 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800eb84:	7dfb      	ldrb	r3, [r7, #23]
 800eb86:	2b01      	cmp	r3, #1
 800eb88:	d140      	bne.n	800ec0c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800eb8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb8e:	4980      	ldr	r1, [pc, #512]	; (800ed90 <etharp_find_entry+0x2d4>)
 800eb90:	4613      	mov	r3, r2
 800eb92:	005b      	lsls	r3, r3, #1
 800eb94:	4413      	add	r3, r2
 800eb96:	00db      	lsls	r3, r3, #3
 800eb98:	440b      	add	r3, r1
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d01a      	beq.n	800ebd6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800eba0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eba4:	497a      	ldr	r1, [pc, #488]	; (800ed90 <etharp_find_entry+0x2d4>)
 800eba6:	4613      	mov	r3, r2
 800eba8:	005b      	lsls	r3, r3, #1
 800ebaa:	4413      	add	r3, r2
 800ebac:	00db      	lsls	r3, r3, #3
 800ebae:	440b      	add	r3, r1
 800ebb0:	3312      	adds	r3, #18
 800ebb2:	881b      	ldrh	r3, [r3, #0]
 800ebb4:	8bba      	ldrh	r2, [r7, #28]
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	d845      	bhi.n	800ec46 <etharp_find_entry+0x18a>
            old_queue = i;
 800ebba:	8c3b      	ldrh	r3, [r7, #32]
 800ebbc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ebbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ebc2:	4973      	ldr	r1, [pc, #460]	; (800ed90 <etharp_find_entry+0x2d4>)
 800ebc4:	4613      	mov	r3, r2
 800ebc6:	005b      	lsls	r3, r3, #1
 800ebc8:	4413      	add	r3, r2
 800ebca:	00db      	lsls	r3, r3, #3
 800ebcc:	440b      	add	r3, r1
 800ebce:	3312      	adds	r3, #18
 800ebd0:	881b      	ldrh	r3, [r3, #0]
 800ebd2:	83bb      	strh	r3, [r7, #28]
 800ebd4:	e037      	b.n	800ec46 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ebd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ebda:	496d      	ldr	r1, [pc, #436]	; (800ed90 <etharp_find_entry+0x2d4>)
 800ebdc:	4613      	mov	r3, r2
 800ebde:	005b      	lsls	r3, r3, #1
 800ebe0:	4413      	add	r3, r2
 800ebe2:	00db      	lsls	r3, r3, #3
 800ebe4:	440b      	add	r3, r1
 800ebe6:	3312      	adds	r3, #18
 800ebe8:	881b      	ldrh	r3, [r3, #0]
 800ebea:	8b7a      	ldrh	r2, [r7, #26]
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d82a      	bhi.n	800ec46 <etharp_find_entry+0x18a>
            old_pending = i;
 800ebf0:	8c3b      	ldrh	r3, [r7, #32]
 800ebf2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800ebf4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ebf8:	4965      	ldr	r1, [pc, #404]	; (800ed90 <etharp_find_entry+0x2d4>)
 800ebfa:	4613      	mov	r3, r2
 800ebfc:	005b      	lsls	r3, r3, #1
 800ebfe:	4413      	add	r3, r2
 800ec00:	00db      	lsls	r3, r3, #3
 800ec02:	440b      	add	r3, r1
 800ec04:	3312      	adds	r3, #18
 800ec06:	881b      	ldrh	r3, [r3, #0]
 800ec08:	837b      	strh	r3, [r7, #26]
 800ec0a:	e01c      	b.n	800ec46 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ec0c:	7dfb      	ldrb	r3, [r7, #23]
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	d919      	bls.n	800ec46 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ec12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec16:	495e      	ldr	r1, [pc, #376]	; (800ed90 <etharp_find_entry+0x2d4>)
 800ec18:	4613      	mov	r3, r2
 800ec1a:	005b      	lsls	r3, r3, #1
 800ec1c:	4413      	add	r3, r2
 800ec1e:	00db      	lsls	r3, r3, #3
 800ec20:	440b      	add	r3, r1
 800ec22:	3312      	adds	r3, #18
 800ec24:	881b      	ldrh	r3, [r3, #0]
 800ec26:	8b3a      	ldrh	r2, [r7, #24]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d80c      	bhi.n	800ec46 <etharp_find_entry+0x18a>
            old_stable = i;
 800ec2c:	8c3b      	ldrh	r3, [r7, #32]
 800ec2e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ec30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec34:	4956      	ldr	r1, [pc, #344]	; (800ed90 <etharp_find_entry+0x2d4>)
 800ec36:	4613      	mov	r3, r2
 800ec38:	005b      	lsls	r3, r3, #1
 800ec3a:	4413      	add	r3, r2
 800ec3c:	00db      	lsls	r3, r3, #3
 800ec3e:	440b      	add	r3, r1
 800ec40:	3312      	adds	r3, #18
 800ec42:	881b      	ldrh	r3, [r3, #0]
 800ec44:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ec46:	8c3b      	ldrh	r3, [r7, #32]
 800ec48:	3301      	adds	r3, #1
 800ec4a:	b29b      	uxth	r3, r3
 800ec4c:	843b      	strh	r3, [r7, #32]
 800ec4e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ec52:	2b09      	cmp	r3, #9
 800ec54:	f77f af4c 	ble.w	800eaf0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ec58:	7afb      	ldrb	r3, [r7, #11]
 800ec5a:	f003 0302 	and.w	r3, r3, #2
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d108      	bne.n	800ec74 <etharp_find_entry+0x1b8>
 800ec62:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ec66:	2b0a      	cmp	r3, #10
 800ec68:	d107      	bne.n	800ec7a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ec6a:	7afb      	ldrb	r3, [r7, #11]
 800ec6c:	f003 0301 	and.w	r3, r3, #1
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d102      	bne.n	800ec7a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ec74:	f04f 33ff 	mov.w	r3, #4294967295
 800ec78:	e085      	b.n	800ed86 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ec7a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ec7e:	2b09      	cmp	r3, #9
 800ec80:	dc02      	bgt.n	800ec88 <etharp_find_entry+0x1cc>
    i = empty;
 800ec82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ec84:	843b      	strh	r3, [r7, #32]
 800ec86:	e039      	b.n	800ecfc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ec88:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ec8c:	2b09      	cmp	r3, #9
 800ec8e:	dc14      	bgt.n	800ecba <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800ec90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec92:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ec94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec98:	493d      	ldr	r1, [pc, #244]	; (800ed90 <etharp_find_entry+0x2d4>)
 800ec9a:	4613      	mov	r3, r2
 800ec9c:	005b      	lsls	r3, r3, #1
 800ec9e:	4413      	add	r3, r2
 800eca0:	00db      	lsls	r3, r3, #3
 800eca2:	440b      	add	r3, r1
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d018      	beq.n	800ecdc <etharp_find_entry+0x220>
 800ecaa:	4b3a      	ldr	r3, [pc, #232]	; (800ed94 <etharp_find_entry+0x2d8>)
 800ecac:	f240 126d 	movw	r2, #365	; 0x16d
 800ecb0:	493b      	ldr	r1, [pc, #236]	; (800eda0 <etharp_find_entry+0x2e4>)
 800ecb2:	483a      	ldr	r0, [pc, #232]	; (800ed9c <etharp_find_entry+0x2e0>)
 800ecb4:	f002 f938 	bl	8010f28 <iprintf>
 800ecb8:	e010      	b.n	800ecdc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ecba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ecbe:	2b09      	cmp	r3, #9
 800ecc0:	dc02      	bgt.n	800ecc8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ecc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ecc4:	843b      	strh	r3, [r7, #32]
 800ecc6:	e009      	b.n	800ecdc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ecc8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800eccc:	2b09      	cmp	r3, #9
 800ecce:	dc02      	bgt.n	800ecd6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ecd0:	8bfb      	ldrh	r3, [r7, #30]
 800ecd2:	843b      	strh	r3, [r7, #32]
 800ecd4:	e002      	b.n	800ecdc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ecd6:	f04f 33ff 	mov.w	r3, #4294967295
 800ecda:	e054      	b.n	800ed86 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ecdc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ece0:	2b09      	cmp	r3, #9
 800ece2:	dd06      	ble.n	800ecf2 <etharp_find_entry+0x236>
 800ece4:	4b2b      	ldr	r3, [pc, #172]	; (800ed94 <etharp_find_entry+0x2d8>)
 800ece6:	f240 127f 	movw	r2, #383	; 0x17f
 800ecea:	492e      	ldr	r1, [pc, #184]	; (800eda4 <etharp_find_entry+0x2e8>)
 800ecec:	482b      	ldr	r0, [pc, #172]	; (800ed9c <etharp_find_entry+0x2e0>)
 800ecee:	f002 f91b 	bl	8010f28 <iprintf>
    etharp_free_entry(i);
 800ecf2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f7ff fe06 	bl	800e908 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ecfc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ed00:	2b09      	cmp	r3, #9
 800ed02:	dd06      	ble.n	800ed12 <etharp_find_entry+0x256>
 800ed04:	4b23      	ldr	r3, [pc, #140]	; (800ed94 <etharp_find_entry+0x2d8>)
 800ed06:	f240 1283 	movw	r2, #387	; 0x183
 800ed0a:	4926      	ldr	r1, [pc, #152]	; (800eda4 <etharp_find_entry+0x2e8>)
 800ed0c:	4823      	ldr	r0, [pc, #140]	; (800ed9c <etharp_find_entry+0x2e0>)
 800ed0e:	f002 f90b 	bl	8010f28 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ed12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed16:	491e      	ldr	r1, [pc, #120]	; (800ed90 <etharp_find_entry+0x2d4>)
 800ed18:	4613      	mov	r3, r2
 800ed1a:	005b      	lsls	r3, r3, #1
 800ed1c:	4413      	add	r3, r2
 800ed1e:	00db      	lsls	r3, r3, #3
 800ed20:	440b      	add	r3, r1
 800ed22:	3314      	adds	r3, #20
 800ed24:	781b      	ldrb	r3, [r3, #0]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d006      	beq.n	800ed38 <etharp_find_entry+0x27c>
 800ed2a:	4b1a      	ldr	r3, [pc, #104]	; (800ed94 <etharp_find_entry+0x2d8>)
 800ed2c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800ed30:	491d      	ldr	r1, [pc, #116]	; (800eda8 <etharp_find_entry+0x2ec>)
 800ed32:	481a      	ldr	r0, [pc, #104]	; (800ed9c <etharp_find_entry+0x2e0>)
 800ed34:	f002 f8f8 	bl	8010f28 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d00b      	beq.n	800ed56 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ed3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	6819      	ldr	r1, [r3, #0]
 800ed46:	4812      	ldr	r0, [pc, #72]	; (800ed90 <etharp_find_entry+0x2d4>)
 800ed48:	4613      	mov	r3, r2
 800ed4a:	005b      	lsls	r3, r3, #1
 800ed4c:	4413      	add	r3, r2
 800ed4e:	00db      	lsls	r3, r3, #3
 800ed50:	4403      	add	r3, r0
 800ed52:	3304      	adds	r3, #4
 800ed54:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ed56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed5a:	490d      	ldr	r1, [pc, #52]	; (800ed90 <etharp_find_entry+0x2d4>)
 800ed5c:	4613      	mov	r3, r2
 800ed5e:	005b      	lsls	r3, r3, #1
 800ed60:	4413      	add	r3, r2
 800ed62:	00db      	lsls	r3, r3, #3
 800ed64:	440b      	add	r3, r1
 800ed66:	3312      	adds	r3, #18
 800ed68:	2200      	movs	r2, #0
 800ed6a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ed6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed70:	4907      	ldr	r1, [pc, #28]	; (800ed90 <etharp_find_entry+0x2d4>)
 800ed72:	4613      	mov	r3, r2
 800ed74:	005b      	lsls	r3, r3, #1
 800ed76:	4413      	add	r3, r2
 800ed78:	00db      	lsls	r3, r3, #3
 800ed7a:	440b      	add	r3, r1
 800ed7c:	3308      	adds	r3, #8
 800ed7e:	687a      	ldr	r2, [r7, #4]
 800ed80:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ed82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	3728      	adds	r7, #40	; 0x28
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}
 800ed8e:	bf00      	nop
 800ed90:	200087a8 	.word	0x200087a8
 800ed94:	080146a0 	.word	0x080146a0
 800ed98:	080146d8 	.word	0x080146d8
 800ed9c:	08014718 	.word	0x08014718
 800eda0:	08014740 	.word	0x08014740
 800eda4:	08014758 	.word	0x08014758
 800eda8:	0801476c 	.word	0x0801476c

0800edac <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b088      	sub	sp, #32
 800edb0:	af02      	add	r7, sp, #8
 800edb2:	60f8      	str	r0, [r7, #12]
 800edb4:	60b9      	str	r1, [r7, #8]
 800edb6:	607a      	str	r2, [r7, #4]
 800edb8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800edc0:	2b06      	cmp	r3, #6
 800edc2:	d006      	beq.n	800edd2 <etharp_update_arp_entry+0x26>
 800edc4:	4b48      	ldr	r3, [pc, #288]	; (800eee8 <etharp_update_arp_entry+0x13c>)
 800edc6:	f240 12a9 	movw	r2, #425	; 0x1a9
 800edca:	4948      	ldr	r1, [pc, #288]	; (800eeec <etharp_update_arp_entry+0x140>)
 800edcc:	4848      	ldr	r0, [pc, #288]	; (800eef0 <etharp_update_arp_entry+0x144>)
 800edce:	f002 f8ab 	bl	8010f28 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d012      	beq.n	800edfe <etharp_update_arp_entry+0x52>
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d00e      	beq.n	800edfe <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	68f9      	ldr	r1, [r7, #12]
 800ede6:	4618      	mov	r0, r3
 800ede8:	f001 f8fe 	bl	800ffe8 <ip4_addr_isbroadcast_u32>
 800edec:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d105      	bne.n	800edfe <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800edfa:	2be0      	cmp	r3, #224	; 0xe0
 800edfc:	d102      	bne.n	800ee04 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800edfe:	f06f 030f 	mvn.w	r3, #15
 800ee02:	e06c      	b.n	800eede <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ee04:	78fb      	ldrb	r3, [r7, #3]
 800ee06:	68fa      	ldr	r2, [r7, #12]
 800ee08:	4619      	mov	r1, r3
 800ee0a:	68b8      	ldr	r0, [r7, #8]
 800ee0c:	f7ff fe56 	bl	800eabc <etharp_find_entry>
 800ee10:	4603      	mov	r3, r0
 800ee12:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800ee14:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	da02      	bge.n	800ee22 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ee1c:	8afb      	ldrh	r3, [r7, #22]
 800ee1e:	b25b      	sxtb	r3, r3
 800ee20:	e05d      	b.n	800eede <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ee22:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee26:	4933      	ldr	r1, [pc, #204]	; (800eef4 <etharp_update_arp_entry+0x148>)
 800ee28:	4613      	mov	r3, r2
 800ee2a:	005b      	lsls	r3, r3, #1
 800ee2c:	4413      	add	r3, r2
 800ee2e:	00db      	lsls	r3, r3, #3
 800ee30:	440b      	add	r3, r1
 800ee32:	3314      	adds	r3, #20
 800ee34:	2202      	movs	r2, #2
 800ee36:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ee38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee3c:	492d      	ldr	r1, [pc, #180]	; (800eef4 <etharp_update_arp_entry+0x148>)
 800ee3e:	4613      	mov	r3, r2
 800ee40:	005b      	lsls	r3, r3, #1
 800ee42:	4413      	add	r3, r2
 800ee44:	00db      	lsls	r3, r3, #3
 800ee46:	440b      	add	r3, r1
 800ee48:	3308      	adds	r3, #8
 800ee4a:	68fa      	ldr	r2, [r7, #12]
 800ee4c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ee4e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee52:	4613      	mov	r3, r2
 800ee54:	005b      	lsls	r3, r3, #1
 800ee56:	4413      	add	r3, r2
 800ee58:	00db      	lsls	r3, r3, #3
 800ee5a:	3308      	adds	r3, #8
 800ee5c:	4a25      	ldr	r2, [pc, #148]	; (800eef4 <etharp_update_arp_entry+0x148>)
 800ee5e:	4413      	add	r3, r2
 800ee60:	3304      	adds	r3, #4
 800ee62:	2206      	movs	r2, #6
 800ee64:	6879      	ldr	r1, [r7, #4]
 800ee66:	4618      	mov	r0, r3
 800ee68:	f002 f848 	bl	8010efc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ee6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee70:	4920      	ldr	r1, [pc, #128]	; (800eef4 <etharp_update_arp_entry+0x148>)
 800ee72:	4613      	mov	r3, r2
 800ee74:	005b      	lsls	r3, r3, #1
 800ee76:	4413      	add	r3, r2
 800ee78:	00db      	lsls	r3, r3, #3
 800ee7a:	440b      	add	r3, r1
 800ee7c:	3312      	adds	r3, #18
 800ee7e:	2200      	movs	r2, #0
 800ee80:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ee82:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee86:	491b      	ldr	r1, [pc, #108]	; (800eef4 <etharp_update_arp_entry+0x148>)
 800ee88:	4613      	mov	r3, r2
 800ee8a:	005b      	lsls	r3, r3, #1
 800ee8c:	4413      	add	r3, r2
 800ee8e:	00db      	lsls	r3, r3, #3
 800ee90:	440b      	add	r3, r1
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d021      	beq.n	800eedc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ee98:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee9c:	4915      	ldr	r1, [pc, #84]	; (800eef4 <etharp_update_arp_entry+0x148>)
 800ee9e:	4613      	mov	r3, r2
 800eea0:	005b      	lsls	r3, r3, #1
 800eea2:	4413      	add	r3, r2
 800eea4:	00db      	lsls	r3, r3, #3
 800eea6:	440b      	add	r3, r1
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800eeac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eeb0:	4910      	ldr	r1, [pc, #64]	; (800eef4 <etharp_update_arp_entry+0x148>)
 800eeb2:	4613      	mov	r3, r2
 800eeb4:	005b      	lsls	r3, r3, #1
 800eeb6:	4413      	add	r3, r2
 800eeb8:	00db      	lsls	r3, r3, #3
 800eeba:	440b      	add	r3, r1
 800eebc:	2200      	movs	r2, #0
 800eebe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800eec6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eeca:	9300      	str	r3, [sp, #0]
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6939      	ldr	r1, [r7, #16]
 800eed0:	68f8      	ldr	r0, [r7, #12]
 800eed2:	f001 ff97 	bl	8010e04 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800eed6:	6938      	ldr	r0, [r7, #16]
 800eed8:	f7f8 ff2a 	bl	8007d30 <pbuf_free>
  }
  return ERR_OK;
 800eedc:	2300      	movs	r3, #0
}
 800eede:	4618      	mov	r0, r3
 800eee0:	3718      	adds	r7, #24
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
 800eee6:	bf00      	nop
 800eee8:	080146a0 	.word	0x080146a0
 800eeec:	08014798 	.word	0x08014798
 800eef0:	08014718 	.word	0x08014718
 800eef4:	200087a8 	.word	0x200087a8

0800eef8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b084      	sub	sp, #16
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ef00:	2300      	movs	r3, #0
 800ef02:	60fb      	str	r3, [r7, #12]
 800ef04:	e01e      	b.n	800ef44 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800ef06:	4913      	ldr	r1, [pc, #76]	; (800ef54 <etharp_cleanup_netif+0x5c>)
 800ef08:	68fa      	ldr	r2, [r7, #12]
 800ef0a:	4613      	mov	r3, r2
 800ef0c:	005b      	lsls	r3, r3, #1
 800ef0e:	4413      	add	r3, r2
 800ef10:	00db      	lsls	r3, r3, #3
 800ef12:	440b      	add	r3, r1
 800ef14:	3314      	adds	r3, #20
 800ef16:	781b      	ldrb	r3, [r3, #0]
 800ef18:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ef1a:	7afb      	ldrb	r3, [r7, #11]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d00e      	beq.n	800ef3e <etharp_cleanup_netif+0x46>
 800ef20:	490c      	ldr	r1, [pc, #48]	; (800ef54 <etharp_cleanup_netif+0x5c>)
 800ef22:	68fa      	ldr	r2, [r7, #12]
 800ef24:	4613      	mov	r3, r2
 800ef26:	005b      	lsls	r3, r3, #1
 800ef28:	4413      	add	r3, r2
 800ef2a:	00db      	lsls	r3, r3, #3
 800ef2c:	440b      	add	r3, r1
 800ef2e:	3308      	adds	r3, #8
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	687a      	ldr	r2, [r7, #4]
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d102      	bne.n	800ef3e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ef38:	68f8      	ldr	r0, [r7, #12]
 800ef3a:	f7ff fce5 	bl	800e908 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	3301      	adds	r3, #1
 800ef42:	60fb      	str	r3, [r7, #12]
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	2b09      	cmp	r3, #9
 800ef48:	dddd      	ble.n	800ef06 <etharp_cleanup_netif+0xe>
    }
  }
}
 800ef4a:	bf00      	nop
 800ef4c:	bf00      	nop
 800ef4e:	3710      	adds	r7, #16
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}
 800ef54:	200087a8 	.word	0x200087a8

0800ef58 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ef58:	b5b0      	push	{r4, r5, r7, lr}
 800ef5a:	b08a      	sub	sp, #40	; 0x28
 800ef5c:	af04      	add	r7, sp, #16
 800ef5e:	6078      	str	r0, [r7, #4]
 800ef60:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d107      	bne.n	800ef78 <etharp_input+0x20>
 800ef68:	4b3d      	ldr	r3, [pc, #244]	; (800f060 <etharp_input+0x108>)
 800ef6a:	f240 228a 	movw	r2, #650	; 0x28a
 800ef6e:	493d      	ldr	r1, [pc, #244]	; (800f064 <etharp_input+0x10c>)
 800ef70:	483d      	ldr	r0, [pc, #244]	; (800f068 <etharp_input+0x110>)
 800ef72:	f001 ffd9 	bl	8010f28 <iprintf>
 800ef76:	e06f      	b.n	800f058 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	881b      	ldrh	r3, [r3, #0]
 800ef82:	b29b      	uxth	r3, r3
 800ef84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef88:	d10c      	bne.n	800efa4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ef8a:	693b      	ldr	r3, [r7, #16]
 800ef8c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ef8e:	2b06      	cmp	r3, #6
 800ef90:	d108      	bne.n	800efa4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ef92:	693b      	ldr	r3, [r7, #16]
 800ef94:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ef96:	2b04      	cmp	r3, #4
 800ef98:	d104      	bne.n	800efa4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ef9a:	693b      	ldr	r3, [r7, #16]
 800ef9c:	885b      	ldrh	r3, [r3, #2]
 800ef9e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800efa0:	2b08      	cmp	r3, #8
 800efa2:	d003      	beq.n	800efac <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f7f8 fec3 	bl	8007d30 <pbuf_free>
    return;
 800efaa:	e055      	b.n	800f058 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	330e      	adds	r3, #14
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800efb4:	693b      	ldr	r3, [r7, #16]
 800efb6:	3318      	adds	r3, #24
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	3304      	adds	r3, #4
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d102      	bne.n	800efcc <etharp_input+0x74>
    for_us = 0;
 800efc6:	2300      	movs	r3, #0
 800efc8:	75fb      	strb	r3, [r7, #23]
 800efca:	e009      	b.n	800efe0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800efcc:	68ba      	ldr	r2, [r7, #8]
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	3304      	adds	r3, #4
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	429a      	cmp	r2, r3
 800efd6:	bf0c      	ite	eq
 800efd8:	2301      	moveq	r3, #1
 800efda:	2300      	movne	r3, #0
 800efdc:	b2db      	uxtb	r3, r3
 800efde:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800efe0:	693b      	ldr	r3, [r7, #16]
 800efe2:	f103 0208 	add.w	r2, r3, #8
 800efe6:	7dfb      	ldrb	r3, [r7, #23]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d001      	beq.n	800eff0 <etharp_input+0x98>
 800efec:	2301      	movs	r3, #1
 800efee:	e000      	b.n	800eff2 <etharp_input+0x9a>
 800eff0:	2302      	movs	r3, #2
 800eff2:	f107 010c 	add.w	r1, r7, #12
 800eff6:	6838      	ldr	r0, [r7, #0]
 800eff8:	f7ff fed8 	bl	800edac <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	88db      	ldrh	r3, [r3, #6]
 800f000:	b29b      	uxth	r3, r3
 800f002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f006:	d003      	beq.n	800f010 <etharp_input+0xb8>
 800f008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f00c:	d01e      	beq.n	800f04c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f00e:	e020      	b.n	800f052 <etharp_input+0xfa>
      if (for_us) {
 800f010:	7dfb      	ldrb	r3, [r7, #23]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d01c      	beq.n	800f050 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f02c:	693a      	ldr	r2, [r7, #16]
 800f02e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f030:	2102      	movs	r1, #2
 800f032:	9103      	str	r1, [sp, #12]
 800f034:	f107 010c 	add.w	r1, r7, #12
 800f038:	9102      	str	r1, [sp, #8]
 800f03a:	9201      	str	r2, [sp, #4]
 800f03c:	9300      	str	r3, [sp, #0]
 800f03e:	462b      	mov	r3, r5
 800f040:	4622      	mov	r2, r4
 800f042:	4601      	mov	r1, r0
 800f044:	6838      	ldr	r0, [r7, #0]
 800f046:	f000 faeb 	bl	800f620 <etharp_raw>
      break;
 800f04a:	e001      	b.n	800f050 <etharp_input+0xf8>
      break;
 800f04c:	bf00      	nop
 800f04e:	e000      	b.n	800f052 <etharp_input+0xfa>
      break;
 800f050:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f7f8 fe6c 	bl	8007d30 <pbuf_free>
}
 800f058:	3718      	adds	r7, #24
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bdb0      	pop	{r4, r5, r7, pc}
 800f05e:	bf00      	nop
 800f060:	080146a0 	.word	0x080146a0
 800f064:	080147f0 	.word	0x080147f0
 800f068:	08014718 	.word	0x08014718

0800f06c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b086      	sub	sp, #24
 800f070:	af02      	add	r7, sp, #8
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	60b9      	str	r1, [r7, #8]
 800f076:	4613      	mov	r3, r2
 800f078:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f07a:	79fa      	ldrb	r2, [r7, #7]
 800f07c:	4944      	ldr	r1, [pc, #272]	; (800f190 <etharp_output_to_arp_index+0x124>)
 800f07e:	4613      	mov	r3, r2
 800f080:	005b      	lsls	r3, r3, #1
 800f082:	4413      	add	r3, r2
 800f084:	00db      	lsls	r3, r3, #3
 800f086:	440b      	add	r3, r1
 800f088:	3314      	adds	r3, #20
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	2b01      	cmp	r3, #1
 800f08e:	d806      	bhi.n	800f09e <etharp_output_to_arp_index+0x32>
 800f090:	4b40      	ldr	r3, [pc, #256]	; (800f194 <etharp_output_to_arp_index+0x128>)
 800f092:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f096:	4940      	ldr	r1, [pc, #256]	; (800f198 <etharp_output_to_arp_index+0x12c>)
 800f098:	4840      	ldr	r0, [pc, #256]	; (800f19c <etharp_output_to_arp_index+0x130>)
 800f09a:	f001 ff45 	bl	8010f28 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f09e:	79fa      	ldrb	r2, [r7, #7]
 800f0a0:	493b      	ldr	r1, [pc, #236]	; (800f190 <etharp_output_to_arp_index+0x124>)
 800f0a2:	4613      	mov	r3, r2
 800f0a4:	005b      	lsls	r3, r3, #1
 800f0a6:	4413      	add	r3, r2
 800f0a8:	00db      	lsls	r3, r3, #3
 800f0aa:	440b      	add	r3, r1
 800f0ac:	3314      	adds	r3, #20
 800f0ae:	781b      	ldrb	r3, [r3, #0]
 800f0b0:	2b02      	cmp	r3, #2
 800f0b2:	d153      	bne.n	800f15c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f0b4:	79fa      	ldrb	r2, [r7, #7]
 800f0b6:	4936      	ldr	r1, [pc, #216]	; (800f190 <etharp_output_to_arp_index+0x124>)
 800f0b8:	4613      	mov	r3, r2
 800f0ba:	005b      	lsls	r3, r3, #1
 800f0bc:	4413      	add	r3, r2
 800f0be:	00db      	lsls	r3, r3, #3
 800f0c0:	440b      	add	r3, r1
 800f0c2:	3312      	adds	r3, #18
 800f0c4:	881b      	ldrh	r3, [r3, #0]
 800f0c6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f0ca:	d919      	bls.n	800f100 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f0cc:	79fa      	ldrb	r2, [r7, #7]
 800f0ce:	4613      	mov	r3, r2
 800f0d0:	005b      	lsls	r3, r3, #1
 800f0d2:	4413      	add	r3, r2
 800f0d4:	00db      	lsls	r3, r3, #3
 800f0d6:	4a2e      	ldr	r2, [pc, #184]	; (800f190 <etharp_output_to_arp_index+0x124>)
 800f0d8:	4413      	add	r3, r2
 800f0da:	3304      	adds	r3, #4
 800f0dc:	4619      	mov	r1, r3
 800f0de:	68f8      	ldr	r0, [r7, #12]
 800f0e0:	f000 fb4c 	bl	800f77c <etharp_request>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d138      	bne.n	800f15c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f0ea:	79fa      	ldrb	r2, [r7, #7]
 800f0ec:	4928      	ldr	r1, [pc, #160]	; (800f190 <etharp_output_to_arp_index+0x124>)
 800f0ee:	4613      	mov	r3, r2
 800f0f0:	005b      	lsls	r3, r3, #1
 800f0f2:	4413      	add	r3, r2
 800f0f4:	00db      	lsls	r3, r3, #3
 800f0f6:	440b      	add	r3, r1
 800f0f8:	3314      	adds	r3, #20
 800f0fa:	2203      	movs	r2, #3
 800f0fc:	701a      	strb	r2, [r3, #0]
 800f0fe:	e02d      	b.n	800f15c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f100:	79fa      	ldrb	r2, [r7, #7]
 800f102:	4923      	ldr	r1, [pc, #140]	; (800f190 <etharp_output_to_arp_index+0x124>)
 800f104:	4613      	mov	r3, r2
 800f106:	005b      	lsls	r3, r3, #1
 800f108:	4413      	add	r3, r2
 800f10a:	00db      	lsls	r3, r3, #3
 800f10c:	440b      	add	r3, r1
 800f10e:	3312      	adds	r3, #18
 800f110:	881b      	ldrh	r3, [r3, #0]
 800f112:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f116:	d321      	bcc.n	800f15c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f118:	79fa      	ldrb	r2, [r7, #7]
 800f11a:	4613      	mov	r3, r2
 800f11c:	005b      	lsls	r3, r3, #1
 800f11e:	4413      	add	r3, r2
 800f120:	00db      	lsls	r3, r3, #3
 800f122:	4a1b      	ldr	r2, [pc, #108]	; (800f190 <etharp_output_to_arp_index+0x124>)
 800f124:	4413      	add	r3, r2
 800f126:	1d19      	adds	r1, r3, #4
 800f128:	79fa      	ldrb	r2, [r7, #7]
 800f12a:	4613      	mov	r3, r2
 800f12c:	005b      	lsls	r3, r3, #1
 800f12e:	4413      	add	r3, r2
 800f130:	00db      	lsls	r3, r3, #3
 800f132:	3308      	adds	r3, #8
 800f134:	4a16      	ldr	r2, [pc, #88]	; (800f190 <etharp_output_to_arp_index+0x124>)
 800f136:	4413      	add	r3, r2
 800f138:	3304      	adds	r3, #4
 800f13a:	461a      	mov	r2, r3
 800f13c:	68f8      	ldr	r0, [r7, #12]
 800f13e:	f000 fafb 	bl	800f738 <etharp_request_dst>
 800f142:	4603      	mov	r3, r0
 800f144:	2b00      	cmp	r3, #0
 800f146:	d109      	bne.n	800f15c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f148:	79fa      	ldrb	r2, [r7, #7]
 800f14a:	4911      	ldr	r1, [pc, #68]	; (800f190 <etharp_output_to_arp_index+0x124>)
 800f14c:	4613      	mov	r3, r2
 800f14e:	005b      	lsls	r3, r3, #1
 800f150:	4413      	add	r3, r2
 800f152:	00db      	lsls	r3, r3, #3
 800f154:	440b      	add	r3, r1
 800f156:	3314      	adds	r3, #20
 800f158:	2203      	movs	r2, #3
 800f15a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f162:	79fa      	ldrb	r2, [r7, #7]
 800f164:	4613      	mov	r3, r2
 800f166:	005b      	lsls	r3, r3, #1
 800f168:	4413      	add	r3, r2
 800f16a:	00db      	lsls	r3, r3, #3
 800f16c:	3308      	adds	r3, #8
 800f16e:	4a08      	ldr	r2, [pc, #32]	; (800f190 <etharp_output_to_arp_index+0x124>)
 800f170:	4413      	add	r3, r2
 800f172:	3304      	adds	r3, #4
 800f174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f178:	9200      	str	r2, [sp, #0]
 800f17a:	460a      	mov	r2, r1
 800f17c:	68b9      	ldr	r1, [r7, #8]
 800f17e:	68f8      	ldr	r0, [r7, #12]
 800f180:	f001 fe40 	bl	8010e04 <ethernet_output>
 800f184:	4603      	mov	r3, r0
}
 800f186:	4618      	mov	r0, r3
 800f188:	3710      	adds	r7, #16
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
 800f18e:	bf00      	nop
 800f190:	200087a8 	.word	0x200087a8
 800f194:	080146a0 	.word	0x080146a0
 800f198:	08014810 	.word	0x08014810
 800f19c:	08014718 	.word	0x08014718

0800f1a0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b08a      	sub	sp, #40	; 0x28
 800f1a4:	af02      	add	r7, sp, #8
 800f1a6:	60f8      	str	r0, [r7, #12]
 800f1a8:	60b9      	str	r1, [r7, #8]
 800f1aa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d106      	bne.n	800f1c4 <etharp_output+0x24>
 800f1b6:	4b73      	ldr	r3, [pc, #460]	; (800f384 <etharp_output+0x1e4>)
 800f1b8:	f240 321e 	movw	r2, #798	; 0x31e
 800f1bc:	4972      	ldr	r1, [pc, #456]	; (800f388 <etharp_output+0x1e8>)
 800f1be:	4873      	ldr	r0, [pc, #460]	; (800f38c <etharp_output+0x1ec>)
 800f1c0:	f001 feb2 	bl	8010f28 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d106      	bne.n	800f1d8 <etharp_output+0x38>
 800f1ca:	4b6e      	ldr	r3, [pc, #440]	; (800f384 <etharp_output+0x1e4>)
 800f1cc:	f240 321f 	movw	r2, #799	; 0x31f
 800f1d0:	496f      	ldr	r1, [pc, #444]	; (800f390 <etharp_output+0x1f0>)
 800f1d2:	486e      	ldr	r0, [pc, #440]	; (800f38c <etharp_output+0x1ec>)
 800f1d4:	f001 fea8 	bl	8010f28 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d106      	bne.n	800f1ec <etharp_output+0x4c>
 800f1de:	4b69      	ldr	r3, [pc, #420]	; (800f384 <etharp_output+0x1e4>)
 800f1e0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f1e4:	496b      	ldr	r1, [pc, #428]	; (800f394 <etharp_output+0x1f4>)
 800f1e6:	4869      	ldr	r0, [pc, #420]	; (800f38c <etharp_output+0x1ec>)
 800f1e8:	f001 fe9e 	bl	8010f28 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	68f9      	ldr	r1, [r7, #12]
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f000 fef8 	bl	800ffe8 <ip4_addr_isbroadcast_u32>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d002      	beq.n	800f204 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f1fe:	4b66      	ldr	r3, [pc, #408]	; (800f398 <etharp_output+0x1f8>)
 800f200:	61fb      	str	r3, [r7, #28]
 800f202:	e0af      	b.n	800f364 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f20c:	2be0      	cmp	r3, #224	; 0xe0
 800f20e:	d118      	bne.n	800f242 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f210:	2301      	movs	r3, #1
 800f212:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f214:	2300      	movs	r3, #0
 800f216:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f218:	235e      	movs	r3, #94	; 0x5e
 800f21a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	3301      	adds	r3, #1
 800f220:	781b      	ldrb	r3, [r3, #0]
 800f222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f226:	b2db      	uxtb	r3, r3
 800f228:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	3302      	adds	r3, #2
 800f22e:	781b      	ldrb	r3, [r3, #0]
 800f230:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	3303      	adds	r3, #3
 800f236:	781b      	ldrb	r3, [r3, #0]
 800f238:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f23a:	f107 0310 	add.w	r3, r7, #16
 800f23e:	61fb      	str	r3, [r7, #28]
 800f240:	e090      	b.n	800f364 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681a      	ldr	r2, [r3, #0]
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	3304      	adds	r3, #4
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	405a      	eors	r2, r3
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	3308      	adds	r3, #8
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	4013      	ands	r3, r2
 800f256:	2b00      	cmp	r3, #0
 800f258:	d012      	beq.n	800f280 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f260:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f264:	4293      	cmp	r3, r2
 800f266:	d00b      	beq.n	800f280 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	330c      	adds	r3, #12
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d003      	beq.n	800f27a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	330c      	adds	r3, #12
 800f276:	61bb      	str	r3, [r7, #24]
 800f278:	e002      	b.n	800f280 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f27a:	f06f 0303 	mvn.w	r3, #3
 800f27e:	e07d      	b.n	800f37c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f280:	4b46      	ldr	r3, [pc, #280]	; (800f39c <etharp_output+0x1fc>)
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	4619      	mov	r1, r3
 800f286:	4a46      	ldr	r2, [pc, #280]	; (800f3a0 <etharp_output+0x200>)
 800f288:	460b      	mov	r3, r1
 800f28a:	005b      	lsls	r3, r3, #1
 800f28c:	440b      	add	r3, r1
 800f28e:	00db      	lsls	r3, r3, #3
 800f290:	4413      	add	r3, r2
 800f292:	3314      	adds	r3, #20
 800f294:	781b      	ldrb	r3, [r3, #0]
 800f296:	2b01      	cmp	r3, #1
 800f298:	d925      	bls.n	800f2e6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f29a:	4b40      	ldr	r3, [pc, #256]	; (800f39c <etharp_output+0x1fc>)
 800f29c:	781b      	ldrb	r3, [r3, #0]
 800f29e:	4619      	mov	r1, r3
 800f2a0:	4a3f      	ldr	r2, [pc, #252]	; (800f3a0 <etharp_output+0x200>)
 800f2a2:	460b      	mov	r3, r1
 800f2a4:	005b      	lsls	r3, r3, #1
 800f2a6:	440b      	add	r3, r1
 800f2a8:	00db      	lsls	r3, r3, #3
 800f2aa:	4413      	add	r3, r2
 800f2ac:	3308      	adds	r3, #8
 800f2ae:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f2b0:	68fa      	ldr	r2, [r7, #12]
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d117      	bne.n	800f2e6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f2b6:	69bb      	ldr	r3, [r7, #24]
 800f2b8:	681a      	ldr	r2, [r3, #0]
 800f2ba:	4b38      	ldr	r3, [pc, #224]	; (800f39c <etharp_output+0x1fc>)
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	4618      	mov	r0, r3
 800f2c0:	4937      	ldr	r1, [pc, #220]	; (800f3a0 <etharp_output+0x200>)
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	005b      	lsls	r3, r3, #1
 800f2c6:	4403      	add	r3, r0
 800f2c8:	00db      	lsls	r3, r3, #3
 800f2ca:	440b      	add	r3, r1
 800f2cc:	3304      	adds	r3, #4
 800f2ce:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f2d0:	429a      	cmp	r2, r3
 800f2d2:	d108      	bne.n	800f2e6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f2d4:	4b31      	ldr	r3, [pc, #196]	; (800f39c <etharp_output+0x1fc>)
 800f2d6:	781b      	ldrb	r3, [r3, #0]
 800f2d8:	461a      	mov	r2, r3
 800f2da:	68b9      	ldr	r1, [r7, #8]
 800f2dc:	68f8      	ldr	r0, [r7, #12]
 800f2de:	f7ff fec5 	bl	800f06c <etharp_output_to_arp_index>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	e04a      	b.n	800f37c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	75fb      	strb	r3, [r7, #23]
 800f2ea:	e031      	b.n	800f350 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f2ec:	7dfa      	ldrb	r2, [r7, #23]
 800f2ee:	492c      	ldr	r1, [pc, #176]	; (800f3a0 <etharp_output+0x200>)
 800f2f0:	4613      	mov	r3, r2
 800f2f2:	005b      	lsls	r3, r3, #1
 800f2f4:	4413      	add	r3, r2
 800f2f6:	00db      	lsls	r3, r3, #3
 800f2f8:	440b      	add	r3, r1
 800f2fa:	3314      	adds	r3, #20
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	2b01      	cmp	r3, #1
 800f300:	d923      	bls.n	800f34a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f302:	7dfa      	ldrb	r2, [r7, #23]
 800f304:	4926      	ldr	r1, [pc, #152]	; (800f3a0 <etharp_output+0x200>)
 800f306:	4613      	mov	r3, r2
 800f308:	005b      	lsls	r3, r3, #1
 800f30a:	4413      	add	r3, r2
 800f30c:	00db      	lsls	r3, r3, #3
 800f30e:	440b      	add	r3, r1
 800f310:	3308      	adds	r3, #8
 800f312:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f314:	68fa      	ldr	r2, [r7, #12]
 800f316:	429a      	cmp	r2, r3
 800f318:	d117      	bne.n	800f34a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f31a:	69bb      	ldr	r3, [r7, #24]
 800f31c:	6819      	ldr	r1, [r3, #0]
 800f31e:	7dfa      	ldrb	r2, [r7, #23]
 800f320:	481f      	ldr	r0, [pc, #124]	; (800f3a0 <etharp_output+0x200>)
 800f322:	4613      	mov	r3, r2
 800f324:	005b      	lsls	r3, r3, #1
 800f326:	4413      	add	r3, r2
 800f328:	00db      	lsls	r3, r3, #3
 800f32a:	4403      	add	r3, r0
 800f32c:	3304      	adds	r3, #4
 800f32e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f330:	4299      	cmp	r1, r3
 800f332:	d10a      	bne.n	800f34a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f334:	4a19      	ldr	r2, [pc, #100]	; (800f39c <etharp_output+0x1fc>)
 800f336:	7dfb      	ldrb	r3, [r7, #23]
 800f338:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f33a:	7dfb      	ldrb	r3, [r7, #23]
 800f33c:	461a      	mov	r2, r3
 800f33e:	68b9      	ldr	r1, [r7, #8]
 800f340:	68f8      	ldr	r0, [r7, #12]
 800f342:	f7ff fe93 	bl	800f06c <etharp_output_to_arp_index>
 800f346:	4603      	mov	r3, r0
 800f348:	e018      	b.n	800f37c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f34a:	7dfb      	ldrb	r3, [r7, #23]
 800f34c:	3301      	adds	r3, #1
 800f34e:	75fb      	strb	r3, [r7, #23]
 800f350:	7dfb      	ldrb	r3, [r7, #23]
 800f352:	2b09      	cmp	r3, #9
 800f354:	d9ca      	bls.n	800f2ec <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f356:	68ba      	ldr	r2, [r7, #8]
 800f358:	69b9      	ldr	r1, [r7, #24]
 800f35a:	68f8      	ldr	r0, [r7, #12]
 800f35c:	f000 f822 	bl	800f3a4 <etharp_query>
 800f360:	4603      	mov	r3, r0
 800f362:	e00b      	b.n	800f37c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f36a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f36e:	9300      	str	r3, [sp, #0]
 800f370:	69fb      	ldr	r3, [r7, #28]
 800f372:	68b9      	ldr	r1, [r7, #8]
 800f374:	68f8      	ldr	r0, [r7, #12]
 800f376:	f001 fd45 	bl	8010e04 <ethernet_output>
 800f37a:	4603      	mov	r3, r0
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	3720      	adds	r7, #32
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}
 800f384:	080146a0 	.word	0x080146a0
 800f388:	080147f0 	.word	0x080147f0
 800f38c:	08014718 	.word	0x08014718
 800f390:	08014840 	.word	0x08014840
 800f394:	080147e0 	.word	0x080147e0
 800f398:	0801532c 	.word	0x0801532c
 800f39c:	20008898 	.word	0x20008898
 800f3a0:	200087a8 	.word	0x200087a8

0800f3a4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b08c      	sub	sp, #48	; 0x30
 800f3a8:	af02      	add	r7, sp, #8
 800f3aa:	60f8      	str	r0, [r7, #12]
 800f3ac:	60b9      	str	r1, [r7, #8]
 800f3ae:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	3326      	adds	r3, #38	; 0x26
 800f3b4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f3b6:	23ff      	movs	r3, #255	; 0xff
 800f3b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	68f9      	ldr	r1, [r7, #12]
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f000 fe0e 	bl	800ffe8 <ip4_addr_isbroadcast_u32>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d10c      	bne.n	800f3ec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f3da:	2be0      	cmp	r3, #224	; 0xe0
 800f3dc:	d006      	beq.n	800f3ec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d003      	beq.n	800f3ec <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d102      	bne.n	800f3f2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f3ec:	f06f 030f 	mvn.w	r3, #15
 800f3f0:	e101      	b.n	800f5f6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f3f2:	68fa      	ldr	r2, [r7, #12]
 800f3f4:	2101      	movs	r1, #1
 800f3f6:	68b8      	ldr	r0, [r7, #8]
 800f3f8:	f7ff fb60 	bl	800eabc <etharp_find_entry>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f400:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f404:	2b00      	cmp	r3, #0
 800f406:	da02      	bge.n	800f40e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f408:	8a7b      	ldrh	r3, [r7, #18]
 800f40a:	b25b      	sxtb	r3, r3
 800f40c:	e0f3      	b.n	800f5f6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f40e:	8a7b      	ldrh	r3, [r7, #18]
 800f410:	2b7e      	cmp	r3, #126	; 0x7e
 800f412:	d906      	bls.n	800f422 <etharp_query+0x7e>
 800f414:	4b7a      	ldr	r3, [pc, #488]	; (800f600 <etharp_query+0x25c>)
 800f416:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f41a:	497a      	ldr	r1, [pc, #488]	; (800f604 <etharp_query+0x260>)
 800f41c:	487a      	ldr	r0, [pc, #488]	; (800f608 <etharp_query+0x264>)
 800f41e:	f001 fd83 	bl	8010f28 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f422:	8a7b      	ldrh	r3, [r7, #18]
 800f424:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f426:	7c7a      	ldrb	r2, [r7, #17]
 800f428:	4978      	ldr	r1, [pc, #480]	; (800f60c <etharp_query+0x268>)
 800f42a:	4613      	mov	r3, r2
 800f42c:	005b      	lsls	r3, r3, #1
 800f42e:	4413      	add	r3, r2
 800f430:	00db      	lsls	r3, r3, #3
 800f432:	440b      	add	r3, r1
 800f434:	3314      	adds	r3, #20
 800f436:	781b      	ldrb	r3, [r3, #0]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d115      	bne.n	800f468 <etharp_query+0xc4>
    is_new_entry = 1;
 800f43c:	2301      	movs	r3, #1
 800f43e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f440:	7c7a      	ldrb	r2, [r7, #17]
 800f442:	4972      	ldr	r1, [pc, #456]	; (800f60c <etharp_query+0x268>)
 800f444:	4613      	mov	r3, r2
 800f446:	005b      	lsls	r3, r3, #1
 800f448:	4413      	add	r3, r2
 800f44a:	00db      	lsls	r3, r3, #3
 800f44c:	440b      	add	r3, r1
 800f44e:	3314      	adds	r3, #20
 800f450:	2201      	movs	r2, #1
 800f452:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f454:	7c7a      	ldrb	r2, [r7, #17]
 800f456:	496d      	ldr	r1, [pc, #436]	; (800f60c <etharp_query+0x268>)
 800f458:	4613      	mov	r3, r2
 800f45a:	005b      	lsls	r3, r3, #1
 800f45c:	4413      	add	r3, r2
 800f45e:	00db      	lsls	r3, r3, #3
 800f460:	440b      	add	r3, r1
 800f462:	3308      	adds	r3, #8
 800f464:	68fa      	ldr	r2, [r7, #12]
 800f466:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f468:	7c7a      	ldrb	r2, [r7, #17]
 800f46a:	4968      	ldr	r1, [pc, #416]	; (800f60c <etharp_query+0x268>)
 800f46c:	4613      	mov	r3, r2
 800f46e:	005b      	lsls	r3, r3, #1
 800f470:	4413      	add	r3, r2
 800f472:	00db      	lsls	r3, r3, #3
 800f474:	440b      	add	r3, r1
 800f476:	3314      	adds	r3, #20
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	2b01      	cmp	r3, #1
 800f47c:	d011      	beq.n	800f4a2 <etharp_query+0xfe>
 800f47e:	7c7a      	ldrb	r2, [r7, #17]
 800f480:	4962      	ldr	r1, [pc, #392]	; (800f60c <etharp_query+0x268>)
 800f482:	4613      	mov	r3, r2
 800f484:	005b      	lsls	r3, r3, #1
 800f486:	4413      	add	r3, r2
 800f488:	00db      	lsls	r3, r3, #3
 800f48a:	440b      	add	r3, r1
 800f48c:	3314      	adds	r3, #20
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	2b01      	cmp	r3, #1
 800f492:	d806      	bhi.n	800f4a2 <etharp_query+0xfe>
 800f494:	4b5a      	ldr	r3, [pc, #360]	; (800f600 <etharp_query+0x25c>)
 800f496:	f240 32cd 	movw	r2, #973	; 0x3cd
 800f49a:	495d      	ldr	r1, [pc, #372]	; (800f610 <etharp_query+0x26c>)
 800f49c:	485a      	ldr	r0, [pc, #360]	; (800f608 <etharp_query+0x264>)
 800f49e:	f001 fd43 	bl	8010f28 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f4a2:	6a3b      	ldr	r3, [r7, #32]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d102      	bne.n	800f4ae <etharp_query+0x10a>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d10c      	bne.n	800f4c8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f4ae:	68b9      	ldr	r1, [r7, #8]
 800f4b0:	68f8      	ldr	r0, [r7, #12]
 800f4b2:	f000 f963 	bl	800f77c <etharp_request>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d102      	bne.n	800f4c8 <etharp_query+0x124>
      return result;
 800f4c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f4c6:	e096      	b.n	800f5f6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d106      	bne.n	800f4dc <etharp_query+0x138>
 800f4ce:	4b4c      	ldr	r3, [pc, #304]	; (800f600 <etharp_query+0x25c>)
 800f4d0:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f4d4:	494f      	ldr	r1, [pc, #316]	; (800f614 <etharp_query+0x270>)
 800f4d6:	484c      	ldr	r0, [pc, #304]	; (800f608 <etharp_query+0x264>)
 800f4d8:	f001 fd26 	bl	8010f28 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f4dc:	7c7a      	ldrb	r2, [r7, #17]
 800f4de:	494b      	ldr	r1, [pc, #300]	; (800f60c <etharp_query+0x268>)
 800f4e0:	4613      	mov	r3, r2
 800f4e2:	005b      	lsls	r3, r3, #1
 800f4e4:	4413      	add	r3, r2
 800f4e6:	00db      	lsls	r3, r3, #3
 800f4e8:	440b      	add	r3, r1
 800f4ea:	3314      	adds	r3, #20
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	2b01      	cmp	r3, #1
 800f4f0:	d917      	bls.n	800f522 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f4f2:	4a49      	ldr	r2, [pc, #292]	; (800f618 <etharp_query+0x274>)
 800f4f4:	7c7b      	ldrb	r3, [r7, #17]
 800f4f6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f4f8:	7c7a      	ldrb	r2, [r7, #17]
 800f4fa:	4613      	mov	r3, r2
 800f4fc:	005b      	lsls	r3, r3, #1
 800f4fe:	4413      	add	r3, r2
 800f500:	00db      	lsls	r3, r3, #3
 800f502:	3308      	adds	r3, #8
 800f504:	4a41      	ldr	r2, [pc, #260]	; (800f60c <etharp_query+0x268>)
 800f506:	4413      	add	r3, r2
 800f508:	3304      	adds	r3, #4
 800f50a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f50e:	9200      	str	r2, [sp, #0]
 800f510:	697a      	ldr	r2, [r7, #20]
 800f512:	6879      	ldr	r1, [r7, #4]
 800f514:	68f8      	ldr	r0, [r7, #12]
 800f516:	f001 fc75 	bl	8010e04 <ethernet_output>
 800f51a:	4603      	mov	r3, r0
 800f51c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f520:	e067      	b.n	800f5f2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f522:	7c7a      	ldrb	r2, [r7, #17]
 800f524:	4939      	ldr	r1, [pc, #228]	; (800f60c <etharp_query+0x268>)
 800f526:	4613      	mov	r3, r2
 800f528:	005b      	lsls	r3, r3, #1
 800f52a:	4413      	add	r3, r2
 800f52c:	00db      	lsls	r3, r3, #3
 800f52e:	440b      	add	r3, r1
 800f530:	3314      	adds	r3, #20
 800f532:	781b      	ldrb	r3, [r3, #0]
 800f534:	2b01      	cmp	r3, #1
 800f536:	d15c      	bne.n	800f5f2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f538:	2300      	movs	r3, #0
 800f53a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f540:	e01c      	b.n	800f57c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f542:	69fb      	ldr	r3, [r7, #28]
 800f544:	895a      	ldrh	r2, [r3, #10]
 800f546:	69fb      	ldr	r3, [r7, #28]
 800f548:	891b      	ldrh	r3, [r3, #8]
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d10a      	bne.n	800f564 <etharp_query+0x1c0>
 800f54e:	69fb      	ldr	r3, [r7, #28]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d006      	beq.n	800f564 <etharp_query+0x1c0>
 800f556:	4b2a      	ldr	r3, [pc, #168]	; (800f600 <etharp_query+0x25c>)
 800f558:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f55c:	492f      	ldr	r1, [pc, #188]	; (800f61c <etharp_query+0x278>)
 800f55e:	482a      	ldr	r0, [pc, #168]	; (800f608 <etharp_query+0x264>)
 800f560:	f001 fce2 	bl	8010f28 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f564:	69fb      	ldr	r3, [r7, #28]
 800f566:	7b1b      	ldrb	r3, [r3, #12]
 800f568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d002      	beq.n	800f576 <etharp_query+0x1d2>
        copy_needed = 1;
 800f570:	2301      	movs	r3, #1
 800f572:	61bb      	str	r3, [r7, #24]
        break;
 800f574:	e005      	b.n	800f582 <etharp_query+0x1de>
      }
      p = p->next;
 800f576:	69fb      	ldr	r3, [r7, #28]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d1df      	bne.n	800f542 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f582:	69bb      	ldr	r3, [r7, #24]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d007      	beq.n	800f598 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f588:	687a      	ldr	r2, [r7, #4]
 800f58a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f58e:	200e      	movs	r0, #14
 800f590:	f7f8 fe2a 	bl	80081e8 <pbuf_clone>
 800f594:	61f8      	str	r0, [r7, #28]
 800f596:	e004      	b.n	800f5a2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f59c:	69f8      	ldr	r0, [r7, #28]
 800f59e:	f7f8 fc67 	bl	8007e70 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f5a2:	69fb      	ldr	r3, [r7, #28]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d021      	beq.n	800f5ec <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f5a8:	7c7a      	ldrb	r2, [r7, #17]
 800f5aa:	4918      	ldr	r1, [pc, #96]	; (800f60c <etharp_query+0x268>)
 800f5ac:	4613      	mov	r3, r2
 800f5ae:	005b      	lsls	r3, r3, #1
 800f5b0:	4413      	add	r3, r2
 800f5b2:	00db      	lsls	r3, r3, #3
 800f5b4:	440b      	add	r3, r1
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d00a      	beq.n	800f5d2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f5bc:	7c7a      	ldrb	r2, [r7, #17]
 800f5be:	4913      	ldr	r1, [pc, #76]	; (800f60c <etharp_query+0x268>)
 800f5c0:	4613      	mov	r3, r2
 800f5c2:	005b      	lsls	r3, r3, #1
 800f5c4:	4413      	add	r3, r2
 800f5c6:	00db      	lsls	r3, r3, #3
 800f5c8:	440b      	add	r3, r1
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7f8 fbaf 	bl	8007d30 <pbuf_free>
      }
      arp_table[i].q = p;
 800f5d2:	7c7a      	ldrb	r2, [r7, #17]
 800f5d4:	490d      	ldr	r1, [pc, #52]	; (800f60c <etharp_query+0x268>)
 800f5d6:	4613      	mov	r3, r2
 800f5d8:	005b      	lsls	r3, r3, #1
 800f5da:	4413      	add	r3, r2
 800f5dc:	00db      	lsls	r3, r3, #3
 800f5de:	440b      	add	r3, r1
 800f5e0:	69fa      	ldr	r2, [r7, #28]
 800f5e2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f5ea:	e002      	b.n	800f5f2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f5ec:	23ff      	movs	r3, #255	; 0xff
 800f5ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f5f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3728      	adds	r7, #40	; 0x28
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
 800f5fe:	bf00      	nop
 800f600:	080146a0 	.word	0x080146a0
 800f604:	0801484c 	.word	0x0801484c
 800f608:	08014718 	.word	0x08014718
 800f60c:	200087a8 	.word	0x200087a8
 800f610:	0801485c 	.word	0x0801485c
 800f614:	08014840 	.word	0x08014840
 800f618:	20008898 	.word	0x20008898
 800f61c:	08014884 	.word	0x08014884

0800f620 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b08a      	sub	sp, #40	; 0x28
 800f624:	af02      	add	r7, sp, #8
 800f626:	60f8      	str	r0, [r7, #12]
 800f628:	60b9      	str	r1, [r7, #8]
 800f62a:	607a      	str	r2, [r7, #4]
 800f62c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f62e:	2300      	movs	r3, #0
 800f630:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d106      	bne.n	800f646 <etharp_raw+0x26>
 800f638:	4b3a      	ldr	r3, [pc, #232]	; (800f724 <etharp_raw+0x104>)
 800f63a:	f240 4257 	movw	r2, #1111	; 0x457
 800f63e:	493a      	ldr	r1, [pc, #232]	; (800f728 <etharp_raw+0x108>)
 800f640:	483a      	ldr	r0, [pc, #232]	; (800f72c <etharp_raw+0x10c>)
 800f642:	f001 fc71 	bl	8010f28 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f646:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f64a:	211c      	movs	r1, #28
 800f64c:	200e      	movs	r0, #14
 800f64e:	f7f8 f88b 	bl	8007768 <pbuf_alloc>
 800f652:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f654:	69bb      	ldr	r3, [r7, #24]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d102      	bne.n	800f660 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f65a:	f04f 33ff 	mov.w	r3, #4294967295
 800f65e:	e05d      	b.n	800f71c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f660:	69bb      	ldr	r3, [r7, #24]
 800f662:	895b      	ldrh	r3, [r3, #10]
 800f664:	2b1b      	cmp	r3, #27
 800f666:	d806      	bhi.n	800f676 <etharp_raw+0x56>
 800f668:	4b2e      	ldr	r3, [pc, #184]	; (800f724 <etharp_raw+0x104>)
 800f66a:	f240 4262 	movw	r2, #1122	; 0x462
 800f66e:	4930      	ldr	r1, [pc, #192]	; (800f730 <etharp_raw+0x110>)
 800f670:	482e      	ldr	r0, [pc, #184]	; (800f72c <etharp_raw+0x10c>)
 800f672:	f001 fc59 	bl	8010f28 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f676:	69bb      	ldr	r3, [r7, #24]
 800f678:	685b      	ldr	r3, [r3, #4]
 800f67a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f67c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f67e:	4618      	mov	r0, r3
 800f680:	f7f6 ff8e 	bl	80065a0 <lwip_htons>
 800f684:	4603      	mov	r3, r0
 800f686:	461a      	mov	r2, r3
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f692:	2b06      	cmp	r3, #6
 800f694:	d006      	beq.n	800f6a4 <etharp_raw+0x84>
 800f696:	4b23      	ldr	r3, [pc, #140]	; (800f724 <etharp_raw+0x104>)
 800f698:	f240 4269 	movw	r2, #1129	; 0x469
 800f69c:	4925      	ldr	r1, [pc, #148]	; (800f734 <etharp_raw+0x114>)
 800f69e:	4823      	ldr	r0, [pc, #140]	; (800f72c <etharp_raw+0x10c>)
 800f6a0:	f001 fc42 	bl	8010f28 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	3308      	adds	r3, #8
 800f6a8:	2206      	movs	r2, #6
 800f6aa:	6839      	ldr	r1, [r7, #0]
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f001 fc25 	bl	8010efc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	3312      	adds	r3, #18
 800f6b6:	2206      	movs	r2, #6
 800f6b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f001 fc1e 	bl	8010efc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	330e      	adds	r3, #14
 800f6c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6c6:	6812      	ldr	r2, [r2, #0]
 800f6c8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	3318      	adds	r3, #24
 800f6ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6d0:	6812      	ldr	r2, [r2, #0]
 800f6d2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	701a      	strb	r2, [r3, #0]
 800f6da:	2200      	movs	r2, #0
 800f6dc:	f042 0201 	orr.w	r2, r2, #1
 800f6e0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	f042 0208 	orr.w	r2, r2, #8
 800f6ea:	709a      	strb	r2, [r3, #2]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	2206      	movs	r2, #6
 800f6f4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	2204      	movs	r2, #4
 800f6fa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f6fc:	f640 0306 	movw	r3, #2054	; 0x806
 800f700:	9300      	str	r3, [sp, #0]
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	68ba      	ldr	r2, [r7, #8]
 800f706:	69b9      	ldr	r1, [r7, #24]
 800f708:	68f8      	ldr	r0, [r7, #12]
 800f70a:	f001 fb7b 	bl	8010e04 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f70e:	69b8      	ldr	r0, [r7, #24]
 800f710:	f7f8 fb0e 	bl	8007d30 <pbuf_free>
  p = NULL;
 800f714:	2300      	movs	r3, #0
 800f716:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f718:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	3720      	adds	r7, #32
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}
 800f724:	080146a0 	.word	0x080146a0
 800f728:	080147f0 	.word	0x080147f0
 800f72c:	08014718 	.word	0x08014718
 800f730:	080148a0 	.word	0x080148a0
 800f734:	080148d4 	.word	0x080148d4

0800f738 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b088      	sub	sp, #32
 800f73c:	af04      	add	r7, sp, #16
 800f73e:	60f8      	str	r0, [r7, #12]
 800f740:	60b9      	str	r1, [r7, #8]
 800f742:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f754:	2201      	movs	r2, #1
 800f756:	9203      	str	r2, [sp, #12]
 800f758:	68ba      	ldr	r2, [r7, #8]
 800f75a:	9202      	str	r2, [sp, #8]
 800f75c:	4a06      	ldr	r2, [pc, #24]	; (800f778 <etharp_request_dst+0x40>)
 800f75e:	9201      	str	r2, [sp, #4]
 800f760:	9300      	str	r3, [sp, #0]
 800f762:	4603      	mov	r3, r0
 800f764:	687a      	ldr	r2, [r7, #4]
 800f766:	68f8      	ldr	r0, [r7, #12]
 800f768:	f7ff ff5a 	bl	800f620 <etharp_raw>
 800f76c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f76e:	4618      	mov	r0, r3
 800f770:	3710      	adds	r7, #16
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}
 800f776:	bf00      	nop
 800f778:	08015334 	.word	0x08015334

0800f77c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b082      	sub	sp, #8
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f786:	4a05      	ldr	r2, [pc, #20]	; (800f79c <etharp_request+0x20>)
 800f788:	6839      	ldr	r1, [r7, #0]
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f7ff ffd4 	bl	800f738 <etharp_request_dst>
 800f790:	4603      	mov	r3, r0
}
 800f792:	4618      	mov	r0, r3
 800f794:	3708      	adds	r7, #8
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}
 800f79a:	bf00      	nop
 800f79c:	0801532c 	.word	0x0801532c

0800f7a0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b08e      	sub	sp, #56	; 0x38
 800f7a4:	af04      	add	r7, sp, #16
 800f7a6:	6078      	str	r0, [r7, #4]
 800f7a8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f7aa:	4b79      	ldr	r3, [pc, #484]	; (800f990 <icmp_input+0x1f0>)
 800f7ac:	689b      	ldr	r3, [r3, #8]
 800f7ae:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800f7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	f003 030f 	and.w	r3, r3, #15
 800f7b8:	b2db      	uxtb	r3, r3
 800f7ba:	009b      	lsls	r3, r3, #2
 800f7bc:	b2db      	uxtb	r3, r3
 800f7be:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800f7c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f7c2:	2b13      	cmp	r3, #19
 800f7c4:	f240 80cd 	bls.w	800f962 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	895b      	ldrh	r3, [r3, #10]
 800f7cc:	2b03      	cmp	r3, #3
 800f7ce:	f240 80ca 	bls.w	800f966 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	685b      	ldr	r3, [r3, #4]
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f7dc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	f000 80b7 	beq.w	800f954 <icmp_input+0x1b4>
 800f7e6:	2b08      	cmp	r3, #8
 800f7e8:	f040 80b7 	bne.w	800f95a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f7ec:	4b69      	ldr	r3, [pc, #420]	; (800f994 <icmp_input+0x1f4>)
 800f7ee:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f7f0:	4b67      	ldr	r3, [pc, #412]	; (800f990 <icmp_input+0x1f0>)
 800f7f2:	695b      	ldr	r3, [r3, #20]
 800f7f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f7f8:	2be0      	cmp	r3, #224	; 0xe0
 800f7fa:	f000 80bb 	beq.w	800f974 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f7fe:	4b64      	ldr	r3, [pc, #400]	; (800f990 <icmp_input+0x1f0>)
 800f800:	695b      	ldr	r3, [r3, #20]
 800f802:	4a63      	ldr	r2, [pc, #396]	; (800f990 <icmp_input+0x1f0>)
 800f804:	6812      	ldr	r2, [r2, #0]
 800f806:	4611      	mov	r1, r2
 800f808:	4618      	mov	r0, r3
 800f80a:	f000 fbed 	bl	800ffe8 <ip4_addr_isbroadcast_u32>
 800f80e:	4603      	mov	r3, r0
 800f810:	2b00      	cmp	r3, #0
 800f812:	f040 80b1 	bne.w	800f978 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	891b      	ldrh	r3, [r3, #8]
 800f81a:	2b07      	cmp	r3, #7
 800f81c:	f240 80a5 	bls.w	800f96a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f820:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f822:	330e      	adds	r3, #14
 800f824:	4619      	mov	r1, r3
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f7f8 f9ec 	bl	8007c04 <pbuf_add_header>
 800f82c:	4603      	mov	r3, r0
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d04b      	beq.n	800f8ca <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	891a      	ldrh	r2, [r3, #8]
 800f836:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f838:	4413      	add	r3, r2
 800f83a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	891b      	ldrh	r3, [r3, #8]
 800f840:	8b7a      	ldrh	r2, [r7, #26]
 800f842:	429a      	cmp	r2, r3
 800f844:	f0c0 809a 	bcc.w	800f97c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f848:	8b7b      	ldrh	r3, [r7, #26]
 800f84a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f84e:	4619      	mov	r1, r3
 800f850:	200e      	movs	r0, #14
 800f852:	f7f7 ff89 	bl	8007768 <pbuf_alloc>
 800f856:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	f000 8090 	beq.w	800f980 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	895b      	ldrh	r3, [r3, #10]
 800f864:	461a      	mov	r2, r3
 800f866:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f868:	3308      	adds	r3, #8
 800f86a:	429a      	cmp	r2, r3
 800f86c:	d203      	bcs.n	800f876 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800f86e:	6978      	ldr	r0, [r7, #20]
 800f870:	f7f8 fa5e 	bl	8007d30 <pbuf_free>
          goto icmperr;
 800f874:	e085      	b.n	800f982 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f876:	697b      	ldr	r3, [r7, #20]
 800f878:	685b      	ldr	r3, [r3, #4]
 800f87a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f87c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f87e:	4618      	mov	r0, r3
 800f880:	f001 fb3c 	bl	8010efc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f884:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f886:	4619      	mov	r1, r3
 800f888:	6978      	ldr	r0, [r7, #20]
 800f88a:	f7f8 f9cb 	bl	8007c24 <pbuf_remove_header>
 800f88e:	4603      	mov	r3, r0
 800f890:	2b00      	cmp	r3, #0
 800f892:	d009      	beq.n	800f8a8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f894:	4b40      	ldr	r3, [pc, #256]	; (800f998 <icmp_input+0x1f8>)
 800f896:	22b6      	movs	r2, #182	; 0xb6
 800f898:	4940      	ldr	r1, [pc, #256]	; (800f99c <icmp_input+0x1fc>)
 800f89a:	4841      	ldr	r0, [pc, #260]	; (800f9a0 <icmp_input+0x200>)
 800f89c:	f001 fb44 	bl	8010f28 <iprintf>
          pbuf_free(r);
 800f8a0:	6978      	ldr	r0, [r7, #20]
 800f8a2:	f7f8 fa45 	bl	8007d30 <pbuf_free>
          goto icmperr;
 800f8a6:	e06c      	b.n	800f982 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f8a8:	6879      	ldr	r1, [r7, #4]
 800f8aa:	6978      	ldr	r0, [r7, #20]
 800f8ac:	f7f8 fb58 	bl	8007f60 <pbuf_copy>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d003      	beq.n	800f8be <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f8b6:	6978      	ldr	r0, [r7, #20]
 800f8b8:	f7f8 fa3a 	bl	8007d30 <pbuf_free>
          goto icmperr;
 800f8bc:	e061      	b.n	800f982 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f7f8 fa36 	bl	8007d30 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	607b      	str	r3, [r7, #4]
 800f8c8:	e00f      	b.n	800f8ea <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f8ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f8cc:	330e      	adds	r3, #14
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f7f8 f9a7 	bl	8007c24 <pbuf_remove_header>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d006      	beq.n	800f8ea <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f8dc:	4b2e      	ldr	r3, [pc, #184]	; (800f998 <icmp_input+0x1f8>)
 800f8de:	22c7      	movs	r2, #199	; 0xc7
 800f8e0:	4930      	ldr	r1, [pc, #192]	; (800f9a4 <icmp_input+0x204>)
 800f8e2:	482f      	ldr	r0, [pc, #188]	; (800f9a0 <icmp_input+0x200>)
 800f8e4:	f001 fb20 	bl	8010f28 <iprintf>
          goto icmperr;
 800f8e8:	e04b      	b.n	800f982 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	685b      	ldr	r3, [r3, #4]
 800f8ee:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f8f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f8f2:	4619      	mov	r1, r3
 800f8f4:	6878      	ldr	r0, [r7, #4]
 800f8f6:	f7f8 f985 	bl	8007c04 <pbuf_add_header>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d12b      	bne.n	800f958 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	685b      	ldr	r3, [r3, #4]
 800f904:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f906:	69fb      	ldr	r3, [r7, #28]
 800f908:	681a      	ldr	r2, [r3, #0]
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f90e:	4b20      	ldr	r3, [pc, #128]	; (800f990 <icmp_input+0x1f0>)
 800f910:	691a      	ldr	r2, [r3, #16]
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	2200      	movs	r2, #0
 800f91a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	2200      	movs	r2, #0
 800f920:	709a      	strb	r2, [r3, #2]
 800f922:	2200      	movs	r2, #0
 800f924:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	22ff      	movs	r2, #255	; 0xff
 800f92a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	2200      	movs	r2, #0
 800f930:	729a      	strb	r2, [r3, #10]
 800f932:	2200      	movs	r2, #0
 800f934:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	9302      	str	r3, [sp, #8]
 800f93a:	2301      	movs	r3, #1
 800f93c:	9301      	str	r3, [sp, #4]
 800f93e:	2300      	movs	r3, #0
 800f940:	9300      	str	r3, [sp, #0]
 800f942:	23ff      	movs	r3, #255	; 0xff
 800f944:	2200      	movs	r2, #0
 800f946:	69f9      	ldr	r1, [r7, #28]
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f000 fa75 	bl	800fe38 <ip4_output_if>
 800f94e:	4603      	mov	r3, r0
 800f950:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f952:	e001      	b.n	800f958 <icmp_input+0x1b8>
      break;
 800f954:	bf00      	nop
 800f956:	e000      	b.n	800f95a <icmp_input+0x1ba>
      break;
 800f958:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f7f8 f9e8 	bl	8007d30 <pbuf_free>
  return;
 800f960:	e013      	b.n	800f98a <icmp_input+0x1ea>
    goto lenerr;
 800f962:	bf00      	nop
 800f964:	e002      	b.n	800f96c <icmp_input+0x1cc>
    goto lenerr;
 800f966:	bf00      	nop
 800f968:	e000      	b.n	800f96c <icmp_input+0x1cc>
        goto lenerr;
 800f96a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f7f8 f9df 	bl	8007d30 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f972:	e00a      	b.n	800f98a <icmp_input+0x1ea>
        goto icmperr;
 800f974:	bf00      	nop
 800f976:	e004      	b.n	800f982 <icmp_input+0x1e2>
        goto icmperr;
 800f978:	bf00      	nop
 800f97a:	e002      	b.n	800f982 <icmp_input+0x1e2>
          goto icmperr;
 800f97c:	bf00      	nop
 800f97e:	e000      	b.n	800f982 <icmp_input+0x1e2>
          goto icmperr;
 800f980:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f7f8 f9d4 	bl	8007d30 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f988:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f98a:	3728      	adds	r7, #40	; 0x28
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}
 800f990:	200051d8 	.word	0x200051d8
 800f994:	200051ec 	.word	0x200051ec
 800f998:	08014918 	.word	0x08014918
 800f99c:	08014950 	.word	0x08014950
 800f9a0:	08014988 	.word	0x08014988
 800f9a4:	080149b0 	.word	0x080149b0

0800f9a8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	460b      	mov	r3, r1
 800f9b2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f9b4:	78fb      	ldrb	r3, [r7, #3]
 800f9b6:	461a      	mov	r2, r3
 800f9b8:	2103      	movs	r1, #3
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f000 f814 	bl	800f9e8 <icmp_send_response>
}
 800f9c0:	bf00      	nop
 800f9c2:	3708      	adds	r7, #8
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}

0800f9c8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b082      	sub	sp, #8
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	460b      	mov	r3, r1
 800f9d2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f9d4:	78fb      	ldrb	r3, [r7, #3]
 800f9d6:	461a      	mov	r2, r3
 800f9d8:	210b      	movs	r1, #11
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f000 f804 	bl	800f9e8 <icmp_send_response>
}
 800f9e0:	bf00      	nop
 800f9e2:	3708      	adds	r7, #8
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b08c      	sub	sp, #48	; 0x30
 800f9ec:	af04      	add	r7, sp, #16
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	460b      	mov	r3, r1
 800f9f2:	70fb      	strb	r3, [r7, #3]
 800f9f4:	4613      	mov	r3, r2
 800f9f6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f9f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f9fc:	2124      	movs	r1, #36	; 0x24
 800f9fe:	2022      	movs	r0, #34	; 0x22
 800fa00:	f7f7 feb2 	bl	8007768 <pbuf_alloc>
 800fa04:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800fa06:	69fb      	ldr	r3, [r7, #28]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d04c      	beq.n	800faa6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fa0c:	69fb      	ldr	r3, [r7, #28]
 800fa0e:	895b      	ldrh	r3, [r3, #10]
 800fa10:	2b23      	cmp	r3, #35	; 0x23
 800fa12:	d806      	bhi.n	800fa22 <icmp_send_response+0x3a>
 800fa14:	4b26      	ldr	r3, [pc, #152]	; (800fab0 <icmp_send_response+0xc8>)
 800fa16:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800fa1a:	4926      	ldr	r1, [pc, #152]	; (800fab4 <icmp_send_response+0xcc>)
 800fa1c:	4826      	ldr	r0, [pc, #152]	; (800fab8 <icmp_send_response+0xd0>)
 800fa1e:	f001 fa83 	bl	8010f28 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800fa28:	69fb      	ldr	r3, [r7, #28]
 800fa2a:	685b      	ldr	r3, [r3, #4]
 800fa2c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	78fa      	ldrb	r2, [r7, #3]
 800fa32:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	78ba      	ldrb	r2, [r7, #2]
 800fa38:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800fa3a:	697b      	ldr	r3, [r7, #20]
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	711a      	strb	r2, [r3, #4]
 800fa40:	2200      	movs	r2, #0
 800fa42:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	2200      	movs	r2, #0
 800fa48:	719a      	strb	r2, [r3, #6]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fa4e:	69fb      	ldr	r3, [r7, #28]
 800fa50:	685b      	ldr	r3, [r3, #4]
 800fa52:	f103 0008 	add.w	r0, r3, #8
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	685b      	ldr	r3, [r3, #4]
 800fa5a:	221c      	movs	r2, #28
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	f001 fa4d 	bl	8010efc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800fa62:	69bb      	ldr	r3, [r7, #24]
 800fa64:	68db      	ldr	r3, [r3, #12]
 800fa66:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800fa68:	f107 030c 	add.w	r3, r7, #12
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f000 f825 	bl	800fabc <ip4_route>
 800fa72:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800fa74:	693b      	ldr	r3, [r7, #16]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d011      	beq.n	800fa9e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	709a      	strb	r2, [r3, #2]
 800fa80:	2200      	movs	r2, #0
 800fa82:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800fa84:	f107 020c 	add.w	r2, r7, #12
 800fa88:	693b      	ldr	r3, [r7, #16]
 800fa8a:	9302      	str	r3, [sp, #8]
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	9301      	str	r3, [sp, #4]
 800fa90:	2300      	movs	r3, #0
 800fa92:	9300      	str	r3, [sp, #0]
 800fa94:	23ff      	movs	r3, #255	; 0xff
 800fa96:	2100      	movs	r1, #0
 800fa98:	69f8      	ldr	r0, [r7, #28]
 800fa9a:	f000 f9cd 	bl	800fe38 <ip4_output_if>
  }
  pbuf_free(q);
 800fa9e:	69f8      	ldr	r0, [r7, #28]
 800faa0:	f7f8 f946 	bl	8007d30 <pbuf_free>
 800faa4:	e000      	b.n	800faa8 <icmp_send_response+0xc0>
    return;
 800faa6:	bf00      	nop
}
 800faa8:	3720      	adds	r7, #32
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}
 800faae:	bf00      	nop
 800fab0:	08014918 	.word	0x08014918
 800fab4:	080149e4 	.word	0x080149e4
 800fab8:	08014988 	.word	0x08014988

0800fabc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800fabc:	b480      	push	{r7}
 800fabe:	b085      	sub	sp, #20
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800fac4:	4b33      	ldr	r3, [pc, #204]	; (800fb94 <ip4_route+0xd8>)
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	60fb      	str	r3, [r7, #12]
 800faca:	e036      	b.n	800fb3a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fad2:	f003 0301 	and.w	r3, r3, #1
 800fad6:	b2db      	uxtb	r3, r3
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d02b      	beq.n	800fb34 <ip4_route+0x78>
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fae2:	089b      	lsrs	r3, r3, #2
 800fae4:	f003 0301 	and.w	r3, r3, #1
 800fae8:	b2db      	uxtb	r3, r3
 800faea:	2b00      	cmp	r3, #0
 800faec:	d022      	beq.n	800fb34 <ip4_route+0x78>
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	3304      	adds	r3, #4
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d01d      	beq.n	800fb34 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681a      	ldr	r2, [r3, #0]
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	3304      	adds	r3, #4
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	405a      	eors	r2, r3
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	3308      	adds	r3, #8
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	4013      	ands	r3, r2
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d101      	bne.n	800fb14 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	e038      	b.n	800fb86 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb1a:	f003 0302 	and.w	r3, r3, #2
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d108      	bne.n	800fb34 <ip4_route+0x78>
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681a      	ldr	r2, [r3, #0]
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	330c      	adds	r3, #12
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	429a      	cmp	r2, r3
 800fb2e:	d101      	bne.n	800fb34 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	e028      	b.n	800fb86 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	60fb      	str	r3, [r7, #12]
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d1c5      	bne.n	800facc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fb40:	4b15      	ldr	r3, [pc, #84]	; (800fb98 <ip4_route+0xdc>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d01a      	beq.n	800fb7e <ip4_route+0xc2>
 800fb48:	4b13      	ldr	r3, [pc, #76]	; (800fb98 <ip4_route+0xdc>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb50:	f003 0301 	and.w	r3, r3, #1
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d012      	beq.n	800fb7e <ip4_route+0xc2>
 800fb58:	4b0f      	ldr	r3, [pc, #60]	; (800fb98 <ip4_route+0xdc>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb60:	f003 0304 	and.w	r3, r3, #4
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d00a      	beq.n	800fb7e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fb68:	4b0b      	ldr	r3, [pc, #44]	; (800fb98 <ip4_route+0xdc>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	3304      	adds	r3, #4
 800fb6e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d004      	beq.n	800fb7e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	b2db      	uxtb	r3, r3
 800fb7a:	2b7f      	cmp	r3, #127	; 0x7f
 800fb7c:	d101      	bne.n	800fb82 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	e001      	b.n	800fb86 <ip4_route+0xca>
  }

  return netif_default;
 800fb82:	4b05      	ldr	r3, [pc, #20]	; (800fb98 <ip4_route+0xdc>)
 800fb84:	681b      	ldr	r3, [r3, #0]
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3714      	adds	r7, #20
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb90:	4770      	bx	lr
 800fb92:	bf00      	nop
 800fb94:	2000873c 	.word	0x2000873c
 800fb98:	20008740 	.word	0x20008740

0800fb9c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b082      	sub	sp, #8
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fbaa:	f003 0301 	and.w	r3, r3, #1
 800fbae:	b2db      	uxtb	r3, r3
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d016      	beq.n	800fbe2 <ip4_input_accept+0x46>
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	3304      	adds	r3, #4
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d011      	beq.n	800fbe2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fbbe:	4b0b      	ldr	r3, [pc, #44]	; (800fbec <ip4_input_accept+0x50>)
 800fbc0:	695a      	ldr	r2, [r3, #20]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	3304      	adds	r3, #4
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	429a      	cmp	r2, r3
 800fbca:	d008      	beq.n	800fbde <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fbcc:	4b07      	ldr	r3, [pc, #28]	; (800fbec <ip4_input_accept+0x50>)
 800fbce:	695b      	ldr	r3, [r3, #20]
 800fbd0:	6879      	ldr	r1, [r7, #4]
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f000 fa08 	bl	800ffe8 <ip4_addr_isbroadcast_u32>
 800fbd8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d001      	beq.n	800fbe2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800fbde:	2301      	movs	r3, #1
 800fbe0:	e000      	b.n	800fbe4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800fbe2:	2300      	movs	r3, #0
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3708      	adds	r7, #8
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}
 800fbec:	200051d8 	.word	0x200051d8

0800fbf0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b086      	sub	sp, #24
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
 800fbf8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	685b      	ldr	r3, [r3, #4]
 800fbfe:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	781b      	ldrb	r3, [r3, #0]
 800fc04:	091b      	lsrs	r3, r3, #4
 800fc06:	b2db      	uxtb	r3, r3
 800fc08:	2b04      	cmp	r3, #4
 800fc0a:	d004      	beq.n	800fc16 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f7f8 f88f 	bl	8007d30 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800fc12:	2300      	movs	r3, #0
 800fc14:	e107      	b.n	800fe26 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	781b      	ldrb	r3, [r3, #0]
 800fc1a:	f003 030f 	and.w	r3, r3, #15
 800fc1e:	b2db      	uxtb	r3, r3
 800fc20:	009b      	lsls	r3, r3, #2
 800fc22:	b2db      	uxtb	r3, r3
 800fc24:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	885b      	ldrh	r3, [r3, #2]
 800fc2a:	b29b      	uxth	r3, r3
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f7f6 fcb7 	bl	80065a0 <lwip_htons>
 800fc32:	4603      	mov	r3, r0
 800fc34:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	891b      	ldrh	r3, [r3, #8]
 800fc3a:	89ba      	ldrh	r2, [r7, #12]
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	d204      	bcs.n	800fc4a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800fc40:	89bb      	ldrh	r3, [r7, #12]
 800fc42:	4619      	mov	r1, r3
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f7f7 feed 	bl	8007a24 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	895b      	ldrh	r3, [r3, #10]
 800fc4e:	89fa      	ldrh	r2, [r7, #14]
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d807      	bhi.n	800fc64 <ip4_input+0x74>
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	891b      	ldrh	r3, [r3, #8]
 800fc58:	89ba      	ldrh	r2, [r7, #12]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d802      	bhi.n	800fc64 <ip4_input+0x74>
 800fc5e:	89fb      	ldrh	r3, [r7, #14]
 800fc60:	2b13      	cmp	r3, #19
 800fc62:	d804      	bhi.n	800fc6e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f7f8 f863 	bl	8007d30 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	e0db      	b.n	800fe26 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	691b      	ldr	r3, [r3, #16]
 800fc72:	4a6f      	ldr	r2, [pc, #444]	; (800fe30 <ip4_input+0x240>)
 800fc74:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	68db      	ldr	r3, [r3, #12]
 800fc7a:	4a6d      	ldr	r2, [pc, #436]	; (800fe30 <ip4_input+0x240>)
 800fc7c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fc7e:	4b6c      	ldr	r3, [pc, #432]	; (800fe30 <ip4_input+0x240>)
 800fc80:	695b      	ldr	r3, [r3, #20]
 800fc82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fc86:	2be0      	cmp	r3, #224	; 0xe0
 800fc88:	d112      	bne.n	800fcb0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc90:	f003 0301 	and.w	r3, r3, #1
 800fc94:	b2db      	uxtb	r3, r3
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d007      	beq.n	800fcaa <ip4_input+0xba>
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	3304      	adds	r3, #4
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d002      	beq.n	800fcaa <ip4_input+0xba>
      netif = inp;
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	613b      	str	r3, [r7, #16]
 800fca8:	e02a      	b.n	800fd00 <ip4_input+0x110>
    } else {
      netif = NULL;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	613b      	str	r3, [r7, #16]
 800fcae:	e027      	b.n	800fd00 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800fcb0:	6838      	ldr	r0, [r7, #0]
 800fcb2:	f7ff ff73 	bl	800fb9c <ip4_input_accept>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d002      	beq.n	800fcc2 <ip4_input+0xd2>
      netif = inp;
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	613b      	str	r3, [r7, #16]
 800fcc0:	e01e      	b.n	800fd00 <ip4_input+0x110>
    } else {
      netif = NULL;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800fcc6:	4b5a      	ldr	r3, [pc, #360]	; (800fe30 <ip4_input+0x240>)
 800fcc8:	695b      	ldr	r3, [r3, #20]
 800fcca:	b2db      	uxtb	r3, r3
 800fccc:	2b7f      	cmp	r3, #127	; 0x7f
 800fcce:	d017      	beq.n	800fd00 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800fcd0:	4b58      	ldr	r3, [pc, #352]	; (800fe34 <ip4_input+0x244>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	613b      	str	r3, [r7, #16]
 800fcd6:	e00e      	b.n	800fcf6 <ip4_input+0x106>
          if (netif == inp) {
 800fcd8:	693a      	ldr	r2, [r7, #16]
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	d006      	beq.n	800fcee <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800fce0:	6938      	ldr	r0, [r7, #16]
 800fce2:	f7ff ff5b 	bl	800fb9c <ip4_input_accept>
 800fce6:	4603      	mov	r3, r0
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d108      	bne.n	800fcfe <ip4_input+0x10e>
 800fcec:	e000      	b.n	800fcf0 <ip4_input+0x100>
            continue;
 800fcee:	bf00      	nop
        NETIF_FOREACH(netif) {
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	613b      	str	r3, [r7, #16]
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d1ed      	bne.n	800fcd8 <ip4_input+0xe8>
 800fcfc:	e000      	b.n	800fd00 <ip4_input+0x110>
            break;
 800fcfe:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fd00:	4b4b      	ldr	r3, [pc, #300]	; (800fe30 <ip4_input+0x240>)
 800fd02:	691b      	ldr	r3, [r3, #16]
 800fd04:	6839      	ldr	r1, [r7, #0]
 800fd06:	4618      	mov	r0, r3
 800fd08:	f000 f96e 	bl	800ffe8 <ip4_addr_isbroadcast_u32>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d105      	bne.n	800fd1e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800fd12:	4b47      	ldr	r3, [pc, #284]	; (800fe30 <ip4_input+0x240>)
 800fd14:	691b      	ldr	r3, [r3, #16]
 800fd16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fd1a:	2be0      	cmp	r3, #224	; 0xe0
 800fd1c:	d104      	bne.n	800fd28 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	f7f8 f806 	bl	8007d30 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800fd24:	2300      	movs	r3, #0
 800fd26:	e07e      	b.n	800fe26 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800fd28:	693b      	ldr	r3, [r7, #16]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d104      	bne.n	800fd38 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f7f7 fffe 	bl	8007d30 <pbuf_free>
    return ERR_OK;
 800fd34:	2300      	movs	r3, #0
 800fd36:	e076      	b.n	800fe26 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800fd38:	697b      	ldr	r3, [r7, #20]
 800fd3a:	88db      	ldrh	r3, [r3, #6]
 800fd3c:	b29b      	uxth	r3, r3
 800fd3e:	461a      	mov	r2, r3
 800fd40:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800fd44:	4013      	ands	r3, r2
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d00b      	beq.n	800fd62 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f000 fc92 	bl	8010674 <ip4_reass>
 800fd50:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d101      	bne.n	800fd5c <ip4_input+0x16c>
      return ERR_OK;
 800fd58:	2300      	movs	r3, #0
 800fd5a:	e064      	b.n	800fe26 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	685b      	ldr	r3, [r3, #4]
 800fd60:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800fd62:	4a33      	ldr	r2, [pc, #204]	; (800fe30 <ip4_input+0x240>)
 800fd64:	693b      	ldr	r3, [r7, #16]
 800fd66:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800fd68:	4a31      	ldr	r2, [pc, #196]	; (800fe30 <ip4_input+0x240>)
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800fd6e:	4a30      	ldr	r2, [pc, #192]	; (800fe30 <ip4_input+0x240>)
 800fd70:	697b      	ldr	r3, [r7, #20]
 800fd72:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	781b      	ldrb	r3, [r3, #0]
 800fd78:	f003 030f 	and.w	r3, r3, #15
 800fd7c:	b2db      	uxtb	r3, r3
 800fd7e:	009b      	lsls	r3, r3, #2
 800fd80:	b2db      	uxtb	r3, r3
 800fd82:	b29a      	uxth	r2, r3
 800fd84:	4b2a      	ldr	r3, [pc, #168]	; (800fe30 <ip4_input+0x240>)
 800fd86:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800fd88:	89fb      	ldrh	r3, [r7, #14]
 800fd8a:	4619      	mov	r1, r3
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	f7f7 ff49 	bl	8007c24 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	7a5b      	ldrb	r3, [r3, #9]
 800fd96:	2b11      	cmp	r3, #17
 800fd98:	d006      	beq.n	800fda8 <ip4_input+0x1b8>
 800fd9a:	2b11      	cmp	r3, #17
 800fd9c:	dc13      	bgt.n	800fdc6 <ip4_input+0x1d6>
 800fd9e:	2b01      	cmp	r3, #1
 800fda0:	d00c      	beq.n	800fdbc <ip4_input+0x1cc>
 800fda2:	2b06      	cmp	r3, #6
 800fda4:	d005      	beq.n	800fdb2 <ip4_input+0x1c2>
 800fda6:	e00e      	b.n	800fdc6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800fda8:	6839      	ldr	r1, [r7, #0]
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f7fe fc68 	bl	800e680 <udp_input>
        break;
 800fdb0:	e026      	b.n	800fe00 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800fdb2:	6839      	ldr	r1, [r7, #0]
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f7fa f889 	bl	8009ecc <tcp_input>
        break;
 800fdba:	e021      	b.n	800fe00 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800fdbc:	6839      	ldr	r1, [r7, #0]
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f7ff fcee 	bl	800f7a0 <icmp_input>
        break;
 800fdc4:	e01c      	b.n	800fe00 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fdc6:	4b1a      	ldr	r3, [pc, #104]	; (800fe30 <ip4_input+0x240>)
 800fdc8:	695b      	ldr	r3, [r3, #20]
 800fdca:	6939      	ldr	r1, [r7, #16]
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f000 f90b 	bl	800ffe8 <ip4_addr_isbroadcast_u32>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d10f      	bne.n	800fdf8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fdd8:	4b15      	ldr	r3, [pc, #84]	; (800fe30 <ip4_input+0x240>)
 800fdda:	695b      	ldr	r3, [r3, #20]
 800fddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fde0:	2be0      	cmp	r3, #224	; 0xe0
 800fde2:	d009      	beq.n	800fdf8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800fde4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fde8:	4619      	mov	r1, r3
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f7f7 ff8d 	bl	8007d0a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800fdf0:	2102      	movs	r1, #2
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f7ff fdd8 	bl	800f9a8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f7f7 ff99 	bl	8007d30 <pbuf_free>
        break;
 800fdfe:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800fe00:	4b0b      	ldr	r3, [pc, #44]	; (800fe30 <ip4_input+0x240>)
 800fe02:	2200      	movs	r2, #0
 800fe04:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800fe06:	4b0a      	ldr	r3, [pc, #40]	; (800fe30 <ip4_input+0x240>)
 800fe08:	2200      	movs	r2, #0
 800fe0a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800fe0c:	4b08      	ldr	r3, [pc, #32]	; (800fe30 <ip4_input+0x240>)
 800fe0e:	2200      	movs	r2, #0
 800fe10:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800fe12:	4b07      	ldr	r3, [pc, #28]	; (800fe30 <ip4_input+0x240>)
 800fe14:	2200      	movs	r2, #0
 800fe16:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800fe18:	4b05      	ldr	r3, [pc, #20]	; (800fe30 <ip4_input+0x240>)
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800fe1e:	4b04      	ldr	r3, [pc, #16]	; (800fe30 <ip4_input+0x240>)
 800fe20:	2200      	movs	r2, #0
 800fe22:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800fe24:	2300      	movs	r3, #0
}
 800fe26:	4618      	mov	r0, r3
 800fe28:	3718      	adds	r7, #24
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}
 800fe2e:	bf00      	nop
 800fe30:	200051d8 	.word	0x200051d8
 800fe34:	2000873c 	.word	0x2000873c

0800fe38 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b08a      	sub	sp, #40	; 0x28
 800fe3c:	af04      	add	r7, sp, #16
 800fe3e:	60f8      	str	r0, [r7, #12]
 800fe40:	60b9      	str	r1, [r7, #8]
 800fe42:	607a      	str	r2, [r7, #4]
 800fe44:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d009      	beq.n	800fe64 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d003      	beq.n	800fe5e <ip4_output_if+0x26>
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d102      	bne.n	800fe64 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800fe5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe60:	3304      	adds	r3, #4
 800fe62:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800fe64:	78fa      	ldrb	r2, [r7, #3]
 800fe66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe68:	9302      	str	r3, [sp, #8]
 800fe6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fe6e:	9301      	str	r3, [sp, #4]
 800fe70:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fe74:	9300      	str	r3, [sp, #0]
 800fe76:	4613      	mov	r3, r2
 800fe78:	687a      	ldr	r2, [r7, #4]
 800fe7a:	6979      	ldr	r1, [r7, #20]
 800fe7c:	68f8      	ldr	r0, [r7, #12]
 800fe7e:	f000 f805 	bl	800fe8c <ip4_output_if_src>
 800fe82:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	3718      	adds	r7, #24
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}

0800fe8c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b088      	sub	sp, #32
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	60f8      	str	r0, [r7, #12]
 800fe94:	60b9      	str	r1, [r7, #8]
 800fe96:	607a      	str	r2, [r7, #4]
 800fe98:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	7b9b      	ldrb	r3, [r3, #14]
 800fe9e:	2b01      	cmp	r3, #1
 800fea0:	d006      	beq.n	800feb0 <ip4_output_if_src+0x24>
 800fea2:	4b4b      	ldr	r3, [pc, #300]	; (800ffd0 <ip4_output_if_src+0x144>)
 800fea4:	f44f 7255 	mov.w	r2, #852	; 0x354
 800fea8:	494a      	ldr	r1, [pc, #296]	; (800ffd4 <ip4_output_if_src+0x148>)
 800feaa:	484b      	ldr	r0, [pc, #300]	; (800ffd8 <ip4_output_if_src+0x14c>)
 800feac:	f001 f83c 	bl	8010f28 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d060      	beq.n	800ff78 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800feb6:	2314      	movs	r3, #20
 800feb8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800feba:	2114      	movs	r1, #20
 800febc:	68f8      	ldr	r0, [r7, #12]
 800febe:	f7f7 fea1 	bl	8007c04 <pbuf_add_header>
 800fec2:	4603      	mov	r3, r0
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d002      	beq.n	800fece <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fec8:	f06f 0301 	mvn.w	r3, #1
 800fecc:	e07c      	b.n	800ffc8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	895b      	ldrh	r3, [r3, #10]
 800fed8:	2b13      	cmp	r3, #19
 800feda:	d806      	bhi.n	800feea <ip4_output_if_src+0x5e>
 800fedc:	4b3c      	ldr	r3, [pc, #240]	; (800ffd0 <ip4_output_if_src+0x144>)
 800fede:	f44f 7262 	mov.w	r2, #904	; 0x388
 800fee2:	493e      	ldr	r1, [pc, #248]	; (800ffdc <ip4_output_if_src+0x150>)
 800fee4:	483c      	ldr	r0, [pc, #240]	; (800ffd8 <ip4_output_if_src+0x14c>)
 800fee6:	f001 f81f 	bl	8010f28 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800feea:	69fb      	ldr	r3, [r7, #28]
 800feec:	78fa      	ldrb	r2, [r7, #3]
 800feee:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800fef0:	69fb      	ldr	r3, [r7, #28]
 800fef2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800fef6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681a      	ldr	r2, [r3, #0]
 800fefc:	69fb      	ldr	r3, [r7, #28]
 800fefe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ff00:	8b7b      	ldrh	r3, [r7, #26]
 800ff02:	089b      	lsrs	r3, r3, #2
 800ff04:	b29b      	uxth	r3, r3
 800ff06:	b2db      	uxtb	r3, r3
 800ff08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff0c:	b2da      	uxtb	r2, r3
 800ff0e:	69fb      	ldr	r3, [r7, #28]
 800ff10:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ff12:	69fb      	ldr	r3, [r7, #28]
 800ff14:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ff18:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	891b      	ldrh	r3, [r3, #8]
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f7f6 fb3e 	bl	80065a0 <lwip_htons>
 800ff24:	4603      	mov	r3, r0
 800ff26:	461a      	mov	r2, r3
 800ff28:	69fb      	ldr	r3, [r7, #28]
 800ff2a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ff2c:	69fb      	ldr	r3, [r7, #28]
 800ff2e:	2200      	movs	r2, #0
 800ff30:	719a      	strb	r2, [r3, #6]
 800ff32:	2200      	movs	r2, #0
 800ff34:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ff36:	4b2a      	ldr	r3, [pc, #168]	; (800ffe0 <ip4_output_if_src+0x154>)
 800ff38:	881b      	ldrh	r3, [r3, #0]
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7f6 fb30 	bl	80065a0 <lwip_htons>
 800ff40:	4603      	mov	r3, r0
 800ff42:	461a      	mov	r2, r3
 800ff44:	69fb      	ldr	r3, [r7, #28]
 800ff46:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ff48:	4b25      	ldr	r3, [pc, #148]	; (800ffe0 <ip4_output_if_src+0x154>)
 800ff4a:	881b      	ldrh	r3, [r3, #0]
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	b29a      	uxth	r2, r3
 800ff50:	4b23      	ldr	r3, [pc, #140]	; (800ffe0 <ip4_output_if_src+0x154>)
 800ff52:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ff54:	68bb      	ldr	r3, [r7, #8]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d104      	bne.n	800ff64 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ff5a:	4b22      	ldr	r3, [pc, #136]	; (800ffe4 <ip4_output_if_src+0x158>)
 800ff5c:	681a      	ldr	r2, [r3, #0]
 800ff5e:	69fb      	ldr	r3, [r7, #28]
 800ff60:	60da      	str	r2, [r3, #12]
 800ff62:	e003      	b.n	800ff6c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	681a      	ldr	r2, [r3, #0]
 800ff68:	69fb      	ldr	r3, [r7, #28]
 800ff6a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ff6c:	69fb      	ldr	r3, [r7, #28]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	729a      	strb	r2, [r3, #10]
 800ff72:	2200      	movs	r2, #0
 800ff74:	72da      	strb	r2, [r3, #11]
 800ff76:	e00f      	b.n	800ff98 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	895b      	ldrh	r3, [r3, #10]
 800ff7c:	2b13      	cmp	r3, #19
 800ff7e:	d802      	bhi.n	800ff86 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ff80:	f06f 0301 	mvn.w	r3, #1
 800ff84:	e020      	b.n	800ffc8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	685b      	ldr	r3, [r3, #4]
 800ff8a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ff8c:	69fb      	ldr	r3, [r7, #28]
 800ff8e:	691b      	ldr	r3, [r3, #16]
 800ff90:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ff92:	f107 0314 	add.w	r3, r7, #20
 800ff96:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ff98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d00c      	beq.n	800ffba <ip4_output_if_src+0x12e>
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	891a      	ldrh	r2, [r3, #8]
 800ffa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d906      	bls.n	800ffba <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ffb0:	68f8      	ldr	r0, [r7, #12]
 800ffb2:	f000 fd53 	bl	8010a5c <ip4_frag>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	e006      	b.n	800ffc8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ffba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffbc:	695b      	ldr	r3, [r3, #20]
 800ffbe:	687a      	ldr	r2, [r7, #4]
 800ffc0:	68f9      	ldr	r1, [r7, #12]
 800ffc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ffc4:	4798      	blx	r3
 800ffc6:	4603      	mov	r3, r0
}
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3720      	adds	r7, #32
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}
 800ffd0:	08014a10 	.word	0x08014a10
 800ffd4:	08014a44 	.word	0x08014a44
 800ffd8:	08014a50 	.word	0x08014a50
 800ffdc:	08014a78 	.word	0x08014a78
 800ffe0:	2000889a 	.word	0x2000889a
 800ffe4:	08015328 	.word	0x08015328

0800ffe8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ffe8:	b480      	push	{r7}
 800ffea:	b085      	sub	sp, #20
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fffc:	d002      	beq.n	8010004 <ip4_addr_isbroadcast_u32+0x1c>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d101      	bne.n	8010008 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010004:	2301      	movs	r3, #1
 8010006:	e02a      	b.n	801005e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801000e:	f003 0302 	and.w	r3, r3, #2
 8010012:	2b00      	cmp	r3, #0
 8010014:	d101      	bne.n	801001a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010016:	2300      	movs	r3, #0
 8010018:	e021      	b.n	801005e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	3304      	adds	r3, #4
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	687a      	ldr	r2, [r7, #4]
 8010022:	429a      	cmp	r2, r3
 8010024:	d101      	bne.n	801002a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010026:	2300      	movs	r3, #0
 8010028:	e019      	b.n	801005e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801002a:	68fa      	ldr	r2, [r7, #12]
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	3304      	adds	r3, #4
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	405a      	eors	r2, r3
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	3308      	adds	r3, #8
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	4013      	ands	r3, r2
 801003c:	2b00      	cmp	r3, #0
 801003e:	d10d      	bne.n	801005c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	3308      	adds	r3, #8
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	43da      	mvns	r2, r3
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	3308      	adds	r3, #8
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010054:	429a      	cmp	r2, r3
 8010056:	d101      	bne.n	801005c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010058:	2301      	movs	r3, #1
 801005a:	e000      	b.n	801005e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801005c:	2300      	movs	r3, #0
  }
}
 801005e:	4618      	mov	r0, r3
 8010060:	3714      	adds	r7, #20
 8010062:	46bd      	mov	sp, r7
 8010064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010068:	4770      	bx	lr
	...

0801006c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b084      	sub	sp, #16
 8010070:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8010072:	2300      	movs	r3, #0
 8010074:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010076:	4b12      	ldr	r3, [pc, #72]	; (80100c0 <ip_reass_tmr+0x54>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801007c:	e018      	b.n	80100b0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	7fdb      	ldrb	r3, [r3, #31]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d00b      	beq.n	801009e <ip_reass_tmr+0x32>
      r->timer--;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	7fdb      	ldrb	r3, [r3, #31]
 801008a:	3b01      	subs	r3, #1
 801008c:	b2da      	uxtb	r2, r3
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	60fb      	str	r3, [r7, #12]
 801009c:	e008      	b.n	80100b0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80100a8:	68b9      	ldr	r1, [r7, #8]
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f000 f80a 	bl	80100c4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d1e3      	bne.n	801007e <ip_reass_tmr+0x12>
    }
  }
}
 80100b6:	bf00      	nop
 80100b8:	bf00      	nop
 80100ba:	3710      	adds	r7, #16
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}
 80100c0:	2000889c 	.word	0x2000889c

080100c4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b088      	sub	sp, #32
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80100ce:	2300      	movs	r3, #0
 80100d0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80100d2:	683a      	ldr	r2, [r7, #0]
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	429a      	cmp	r2, r3
 80100d8:	d105      	bne.n	80100e6 <ip_reass_free_complete_datagram+0x22>
 80100da:	4b45      	ldr	r3, [pc, #276]	; (80101f0 <ip_reass_free_complete_datagram+0x12c>)
 80100dc:	22ab      	movs	r2, #171	; 0xab
 80100de:	4945      	ldr	r1, [pc, #276]	; (80101f4 <ip_reass_free_complete_datagram+0x130>)
 80100e0:	4845      	ldr	r0, [pc, #276]	; (80101f8 <ip_reass_free_complete_datagram+0x134>)
 80100e2:	f000 ff21 	bl	8010f28 <iprintf>
  if (prev != NULL) {
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d00a      	beq.n	8010102 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	687a      	ldr	r2, [r7, #4]
 80100f2:	429a      	cmp	r2, r3
 80100f4:	d005      	beq.n	8010102 <ip_reass_free_complete_datagram+0x3e>
 80100f6:	4b3e      	ldr	r3, [pc, #248]	; (80101f0 <ip_reass_free_complete_datagram+0x12c>)
 80100f8:	22ad      	movs	r2, #173	; 0xad
 80100fa:	4940      	ldr	r1, [pc, #256]	; (80101fc <ip_reass_free_complete_datagram+0x138>)
 80100fc:	483e      	ldr	r0, [pc, #248]	; (80101f8 <ip_reass_free_complete_datagram+0x134>)
 80100fe:	f000 ff13 	bl	8010f28 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	685b      	ldr	r3, [r3, #4]
 8010106:	685b      	ldr	r3, [r3, #4]
 8010108:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801010a:	697b      	ldr	r3, [r7, #20]
 801010c:	889b      	ldrh	r3, [r3, #4]
 801010e:	b29b      	uxth	r3, r3
 8010110:	2b00      	cmp	r3, #0
 8010112:	d12a      	bne.n	801016a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	685b      	ldr	r3, [r3, #4]
 8010118:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	681a      	ldr	r2, [r3, #0]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8010122:	69bb      	ldr	r3, [r7, #24]
 8010124:	6858      	ldr	r0, [r3, #4]
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	3308      	adds	r3, #8
 801012a:	2214      	movs	r2, #20
 801012c:	4619      	mov	r1, r3
 801012e:	f000 fee5 	bl	8010efc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8010132:	2101      	movs	r1, #1
 8010134:	69b8      	ldr	r0, [r7, #24]
 8010136:	f7ff fc47 	bl	800f9c8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801013a:	69b8      	ldr	r0, [r7, #24]
 801013c:	f7f7 fe80 	bl	8007e40 <pbuf_clen>
 8010140:	4603      	mov	r3, r0
 8010142:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010144:	8bfa      	ldrh	r2, [r7, #30]
 8010146:	8a7b      	ldrh	r3, [r7, #18]
 8010148:	4413      	add	r3, r2
 801014a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801014e:	db05      	blt.n	801015c <ip_reass_free_complete_datagram+0x98>
 8010150:	4b27      	ldr	r3, [pc, #156]	; (80101f0 <ip_reass_free_complete_datagram+0x12c>)
 8010152:	22bc      	movs	r2, #188	; 0xbc
 8010154:	492a      	ldr	r1, [pc, #168]	; (8010200 <ip_reass_free_complete_datagram+0x13c>)
 8010156:	4828      	ldr	r0, [pc, #160]	; (80101f8 <ip_reass_free_complete_datagram+0x134>)
 8010158:	f000 fee6 	bl	8010f28 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801015c:	8bfa      	ldrh	r2, [r7, #30]
 801015e:	8a7b      	ldrh	r3, [r7, #18]
 8010160:	4413      	add	r3, r2
 8010162:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010164:	69b8      	ldr	r0, [r7, #24]
 8010166:	f7f7 fde3 	bl	8007d30 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	685b      	ldr	r3, [r3, #4]
 801016e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8010170:	e01f      	b.n	80101b2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8010172:	69bb      	ldr	r3, [r7, #24]
 8010174:	685b      	ldr	r3, [r3, #4]
 8010176:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010178:	69bb      	ldr	r3, [r7, #24]
 801017a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801017c:	697b      	ldr	r3, [r7, #20]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8010182:	68f8      	ldr	r0, [r7, #12]
 8010184:	f7f7 fe5c 	bl	8007e40 <pbuf_clen>
 8010188:	4603      	mov	r3, r0
 801018a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801018c:	8bfa      	ldrh	r2, [r7, #30]
 801018e:	8a7b      	ldrh	r3, [r7, #18]
 8010190:	4413      	add	r3, r2
 8010192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010196:	db05      	blt.n	80101a4 <ip_reass_free_complete_datagram+0xe0>
 8010198:	4b15      	ldr	r3, [pc, #84]	; (80101f0 <ip_reass_free_complete_datagram+0x12c>)
 801019a:	22cc      	movs	r2, #204	; 0xcc
 801019c:	4918      	ldr	r1, [pc, #96]	; (8010200 <ip_reass_free_complete_datagram+0x13c>)
 801019e:	4816      	ldr	r0, [pc, #88]	; (80101f8 <ip_reass_free_complete_datagram+0x134>)
 80101a0:	f000 fec2 	bl	8010f28 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80101a4:	8bfa      	ldrh	r2, [r7, #30]
 80101a6:	8a7b      	ldrh	r3, [r7, #18]
 80101a8:	4413      	add	r3, r2
 80101aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80101ac:	68f8      	ldr	r0, [r7, #12]
 80101ae:	f7f7 fdbf 	bl	8007d30 <pbuf_free>
  while (p != NULL) {
 80101b2:	69bb      	ldr	r3, [r7, #24]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d1dc      	bne.n	8010172 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80101b8:	6839      	ldr	r1, [r7, #0]
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f000 f8c2 	bl	8010344 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80101c0:	4b10      	ldr	r3, [pc, #64]	; (8010204 <ip_reass_free_complete_datagram+0x140>)
 80101c2:	881b      	ldrh	r3, [r3, #0]
 80101c4:	8bfa      	ldrh	r2, [r7, #30]
 80101c6:	429a      	cmp	r2, r3
 80101c8:	d905      	bls.n	80101d6 <ip_reass_free_complete_datagram+0x112>
 80101ca:	4b09      	ldr	r3, [pc, #36]	; (80101f0 <ip_reass_free_complete_datagram+0x12c>)
 80101cc:	22d2      	movs	r2, #210	; 0xd2
 80101ce:	490e      	ldr	r1, [pc, #56]	; (8010208 <ip_reass_free_complete_datagram+0x144>)
 80101d0:	4809      	ldr	r0, [pc, #36]	; (80101f8 <ip_reass_free_complete_datagram+0x134>)
 80101d2:	f000 fea9 	bl	8010f28 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80101d6:	4b0b      	ldr	r3, [pc, #44]	; (8010204 <ip_reass_free_complete_datagram+0x140>)
 80101d8:	881a      	ldrh	r2, [r3, #0]
 80101da:	8bfb      	ldrh	r3, [r7, #30]
 80101dc:	1ad3      	subs	r3, r2, r3
 80101de:	b29a      	uxth	r2, r3
 80101e0:	4b08      	ldr	r3, [pc, #32]	; (8010204 <ip_reass_free_complete_datagram+0x140>)
 80101e2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80101e4:	8bfb      	ldrh	r3, [r7, #30]
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3720      	adds	r7, #32
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	bf00      	nop
 80101f0:	08014aa8 	.word	0x08014aa8
 80101f4:	08014ae4 	.word	0x08014ae4
 80101f8:	08014af0 	.word	0x08014af0
 80101fc:	08014b18 	.word	0x08014b18
 8010200:	08014b2c 	.word	0x08014b2c
 8010204:	200088a0 	.word	0x200088a0
 8010208:	08014b4c 	.word	0x08014b4c

0801020c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b08a      	sub	sp, #40	; 0x28
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
 8010214:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010216:	2300      	movs	r3, #0
 8010218:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801021a:	2300      	movs	r3, #0
 801021c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801021e:	2300      	movs	r3, #0
 8010220:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8010222:	2300      	movs	r3, #0
 8010224:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010226:	2300      	movs	r3, #0
 8010228:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801022a:	4b28      	ldr	r3, [pc, #160]	; (80102cc <ip_reass_remove_oldest_datagram+0xc0>)
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010230:	e030      	b.n	8010294 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010234:	695a      	ldr	r2, [r3, #20]
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	68db      	ldr	r3, [r3, #12]
 801023a:	429a      	cmp	r2, r3
 801023c:	d10c      	bne.n	8010258 <ip_reass_remove_oldest_datagram+0x4c>
 801023e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010240:	699a      	ldr	r2, [r3, #24]
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	691b      	ldr	r3, [r3, #16]
 8010246:	429a      	cmp	r2, r3
 8010248:	d106      	bne.n	8010258 <ip_reass_remove_oldest_datagram+0x4c>
 801024a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801024c:	899a      	ldrh	r2, [r3, #12]
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	889b      	ldrh	r3, [r3, #4]
 8010252:	b29b      	uxth	r3, r3
 8010254:	429a      	cmp	r2, r3
 8010256:	d014      	beq.n	8010282 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010258:	693b      	ldr	r3, [r7, #16]
 801025a:	3301      	adds	r3, #1
 801025c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801025e:	6a3b      	ldr	r3, [r7, #32]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d104      	bne.n	801026e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010266:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010268:	69fb      	ldr	r3, [r7, #28]
 801026a:	61bb      	str	r3, [r7, #24]
 801026c:	e009      	b.n	8010282 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801026e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010270:	7fda      	ldrb	r2, [r3, #31]
 8010272:	6a3b      	ldr	r3, [r7, #32]
 8010274:	7fdb      	ldrb	r3, [r3, #31]
 8010276:	429a      	cmp	r2, r3
 8010278:	d803      	bhi.n	8010282 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801027a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801027c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801027e:	69fb      	ldr	r3, [r7, #28]
 8010280:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8010282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d001      	beq.n	801028e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801028a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801028c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801028e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010296:	2b00      	cmp	r3, #0
 8010298:	d1cb      	bne.n	8010232 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801029a:	6a3b      	ldr	r3, [r7, #32]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d008      	beq.n	80102b2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80102a0:	69b9      	ldr	r1, [r7, #24]
 80102a2:	6a38      	ldr	r0, [r7, #32]
 80102a4:	f7ff ff0e 	bl	80100c4 <ip_reass_free_complete_datagram>
 80102a8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80102aa:	697a      	ldr	r2, [r7, #20]
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	4413      	add	r3, r2
 80102b0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80102b2:	697a      	ldr	r2, [r7, #20]
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	429a      	cmp	r2, r3
 80102b8:	da02      	bge.n	80102c0 <ip_reass_remove_oldest_datagram+0xb4>
 80102ba:	693b      	ldr	r3, [r7, #16]
 80102bc:	2b01      	cmp	r3, #1
 80102be:	dcac      	bgt.n	801021a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80102c0:	697b      	ldr	r3, [r7, #20]
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3728      	adds	r7, #40	; 0x28
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}
 80102ca:	bf00      	nop
 80102cc:	2000889c 	.word	0x2000889c

080102d0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b084      	sub	sp, #16
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
 80102d8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80102da:	2004      	movs	r0, #4
 80102dc:	f7f6 fe42 	bl	8006f64 <memp_malloc>
 80102e0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d110      	bne.n	801030a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80102e8:	6839      	ldr	r1, [r7, #0]
 80102ea:	6878      	ldr	r0, [r7, #4]
 80102ec:	f7ff ff8e 	bl	801020c <ip_reass_remove_oldest_datagram>
 80102f0:	4602      	mov	r2, r0
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	4293      	cmp	r3, r2
 80102f6:	dc03      	bgt.n	8010300 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80102f8:	2004      	movs	r0, #4
 80102fa:	f7f6 fe33 	bl	8006f64 <memp_malloc>
 80102fe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d101      	bne.n	801030a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010306:	2300      	movs	r3, #0
 8010308:	e016      	b.n	8010338 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801030a:	2220      	movs	r2, #32
 801030c:	2100      	movs	r1, #0
 801030e:	68f8      	ldr	r0, [r7, #12]
 8010310:	f000 fe02 	bl	8010f18 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	220f      	movs	r2, #15
 8010318:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801031a:	4b09      	ldr	r3, [pc, #36]	; (8010340 <ip_reass_enqueue_new_datagram+0x70>)
 801031c:	681a      	ldr	r2, [r3, #0]
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8010322:	4a07      	ldr	r2, [pc, #28]	; (8010340 <ip_reass_enqueue_new_datagram+0x70>)
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	3308      	adds	r3, #8
 801032c:	2214      	movs	r2, #20
 801032e:	6879      	ldr	r1, [r7, #4]
 8010330:	4618      	mov	r0, r3
 8010332:	f000 fde3 	bl	8010efc <memcpy>
  return ipr;
 8010336:	68fb      	ldr	r3, [r7, #12]
}
 8010338:	4618      	mov	r0, r3
 801033a:	3710      	adds	r7, #16
 801033c:	46bd      	mov	sp, r7
 801033e:	bd80      	pop	{r7, pc}
 8010340:	2000889c 	.word	0x2000889c

08010344 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b082      	sub	sp, #8
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801034e:	4b10      	ldr	r3, [pc, #64]	; (8010390 <ip_reass_dequeue_datagram+0x4c>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	687a      	ldr	r2, [r7, #4]
 8010354:	429a      	cmp	r2, r3
 8010356:	d104      	bne.n	8010362 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	4a0c      	ldr	r2, [pc, #48]	; (8010390 <ip_reass_dequeue_datagram+0x4c>)
 801035e:	6013      	str	r3, [r2, #0]
 8010360:	e00d      	b.n	801037e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d106      	bne.n	8010376 <ip_reass_dequeue_datagram+0x32>
 8010368:	4b0a      	ldr	r3, [pc, #40]	; (8010394 <ip_reass_dequeue_datagram+0x50>)
 801036a:	f240 1245 	movw	r2, #325	; 0x145
 801036e:	490a      	ldr	r1, [pc, #40]	; (8010398 <ip_reass_dequeue_datagram+0x54>)
 8010370:	480a      	ldr	r0, [pc, #40]	; (801039c <ip_reass_dequeue_datagram+0x58>)
 8010372:	f000 fdd9 	bl	8010f28 <iprintf>
    prev->next = ipr->next;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	681a      	ldr	r2, [r3, #0]
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801037e:	6879      	ldr	r1, [r7, #4]
 8010380:	2004      	movs	r0, #4
 8010382:	f7f6 fe5f 	bl	8007044 <memp_free>
}
 8010386:	bf00      	nop
 8010388:	3708      	adds	r7, #8
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}
 801038e:	bf00      	nop
 8010390:	2000889c 	.word	0x2000889c
 8010394:	08014aa8 	.word	0x08014aa8
 8010398:	08014b70 	.word	0x08014b70
 801039c:	08014af0 	.word	0x08014af0

080103a0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b08c      	sub	sp, #48	; 0x30
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	60f8      	str	r0, [r7, #12]
 80103a8:	60b9      	str	r1, [r7, #8]
 80103aa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80103ac:	2300      	movs	r3, #0
 80103ae:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80103b0:	2301      	movs	r3, #1
 80103b2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	685b      	ldr	r3, [r3, #4]
 80103b8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80103ba:	69fb      	ldr	r3, [r7, #28]
 80103bc:	885b      	ldrh	r3, [r3, #2]
 80103be:	b29b      	uxth	r3, r3
 80103c0:	4618      	mov	r0, r3
 80103c2:	f7f6 f8ed 	bl	80065a0 <lwip_htons>
 80103c6:	4603      	mov	r3, r0
 80103c8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80103ca:	69fb      	ldr	r3, [r7, #28]
 80103cc:	781b      	ldrb	r3, [r3, #0]
 80103ce:	f003 030f 	and.w	r3, r3, #15
 80103d2:	b2db      	uxtb	r3, r3
 80103d4:	009b      	lsls	r3, r3, #2
 80103d6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80103d8:	7e7b      	ldrb	r3, [r7, #25]
 80103da:	b29b      	uxth	r3, r3
 80103dc:	8b7a      	ldrh	r2, [r7, #26]
 80103de:	429a      	cmp	r2, r3
 80103e0:	d202      	bcs.n	80103e8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80103e2:	f04f 33ff 	mov.w	r3, #4294967295
 80103e6:	e135      	b.n	8010654 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80103e8:	7e7b      	ldrb	r3, [r7, #25]
 80103ea:	b29b      	uxth	r3, r3
 80103ec:	8b7a      	ldrh	r2, [r7, #26]
 80103ee:	1ad3      	subs	r3, r2, r3
 80103f0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80103f2:	69fb      	ldr	r3, [r7, #28]
 80103f4:	88db      	ldrh	r3, [r3, #6]
 80103f6:	b29b      	uxth	r3, r3
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7f6 f8d1 	bl	80065a0 <lwip_htons>
 80103fe:	4603      	mov	r3, r0
 8010400:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010404:	b29b      	uxth	r3, r3
 8010406:	00db      	lsls	r3, r3, #3
 8010408:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8010410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010412:	2200      	movs	r2, #0
 8010414:	701a      	strb	r2, [r3, #0]
 8010416:	2200      	movs	r2, #0
 8010418:	705a      	strb	r2, [r3, #1]
 801041a:	2200      	movs	r2, #0
 801041c:	709a      	strb	r2, [r3, #2]
 801041e:	2200      	movs	r2, #0
 8010420:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8010422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010424:	8afa      	ldrh	r2, [r7, #22]
 8010426:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010428:	8afa      	ldrh	r2, [r7, #22]
 801042a:	8b7b      	ldrh	r3, [r7, #26]
 801042c:	4413      	add	r3, r2
 801042e:	b29a      	uxth	r2, r3
 8010430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010432:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010436:	88db      	ldrh	r3, [r3, #6]
 8010438:	b29b      	uxth	r3, r3
 801043a:	8afa      	ldrh	r2, [r7, #22]
 801043c:	429a      	cmp	r2, r3
 801043e:	d902      	bls.n	8010446 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010440:	f04f 33ff 	mov.w	r3, #4294967295
 8010444:	e106      	b.n	8010654 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	685b      	ldr	r3, [r3, #4]
 801044a:	627b      	str	r3, [r7, #36]	; 0x24
 801044c:	e068      	b.n	8010520 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801044e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010450:	685b      	ldr	r3, [r3, #4]
 8010452:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010456:	889b      	ldrh	r3, [r3, #4]
 8010458:	b29a      	uxth	r2, r3
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	889b      	ldrh	r3, [r3, #4]
 801045e:	b29b      	uxth	r3, r3
 8010460:	429a      	cmp	r2, r3
 8010462:	d235      	bcs.n	80104d0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010468:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801046a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801046c:	2b00      	cmp	r3, #0
 801046e:	d020      	beq.n	80104b2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010472:	889b      	ldrh	r3, [r3, #4]
 8010474:	b29a      	uxth	r2, r3
 8010476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010478:	88db      	ldrh	r3, [r3, #6]
 801047a:	b29b      	uxth	r3, r3
 801047c:	429a      	cmp	r2, r3
 801047e:	d307      	bcc.n	8010490 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010482:	88db      	ldrh	r3, [r3, #6]
 8010484:	b29a      	uxth	r2, r3
 8010486:	693b      	ldr	r3, [r7, #16]
 8010488:	889b      	ldrh	r3, [r3, #4]
 801048a:	b29b      	uxth	r3, r3
 801048c:	429a      	cmp	r2, r3
 801048e:	d902      	bls.n	8010496 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010490:	f04f 33ff 	mov.w	r3, #4294967295
 8010494:	e0de      	b.n	8010654 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010498:	68ba      	ldr	r2, [r7, #8]
 801049a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801049c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801049e:	88db      	ldrh	r3, [r3, #6]
 80104a0:	b29a      	uxth	r2, r3
 80104a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a4:	889b      	ldrh	r3, [r3, #4]
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	429a      	cmp	r2, r3
 80104aa:	d03d      	beq.n	8010528 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80104ac:	2300      	movs	r3, #0
 80104ae:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80104b0:	e03a      	b.n	8010528 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80104b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b4:	88db      	ldrh	r3, [r3, #6]
 80104b6:	b29a      	uxth	r2, r3
 80104b8:	693b      	ldr	r3, [r7, #16]
 80104ba:	889b      	ldrh	r3, [r3, #4]
 80104bc:	b29b      	uxth	r3, r3
 80104be:	429a      	cmp	r2, r3
 80104c0:	d902      	bls.n	80104c8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80104c2:	f04f 33ff 	mov.w	r3, #4294967295
 80104c6:	e0c5      	b.n	8010654 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	68ba      	ldr	r2, [r7, #8]
 80104cc:	605a      	str	r2, [r3, #4]
      break;
 80104ce:	e02b      	b.n	8010528 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80104d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d2:	889b      	ldrh	r3, [r3, #4]
 80104d4:	b29a      	uxth	r2, r3
 80104d6:	693b      	ldr	r3, [r7, #16]
 80104d8:	889b      	ldrh	r3, [r3, #4]
 80104da:	b29b      	uxth	r3, r3
 80104dc:	429a      	cmp	r2, r3
 80104de:	d102      	bne.n	80104e6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80104e0:	f04f 33ff 	mov.w	r3, #4294967295
 80104e4:	e0b6      	b.n	8010654 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80104e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e8:	889b      	ldrh	r3, [r3, #4]
 80104ea:	b29a      	uxth	r2, r3
 80104ec:	693b      	ldr	r3, [r7, #16]
 80104ee:	88db      	ldrh	r3, [r3, #6]
 80104f0:	b29b      	uxth	r3, r3
 80104f2:	429a      	cmp	r2, r3
 80104f4:	d202      	bcs.n	80104fc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80104f6:	f04f 33ff 	mov.w	r3, #4294967295
 80104fa:	e0ab      	b.n	8010654 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80104fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d009      	beq.n	8010516 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8010502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010504:	88db      	ldrh	r3, [r3, #6]
 8010506:	b29a      	uxth	r2, r3
 8010508:	693b      	ldr	r3, [r7, #16]
 801050a:	889b      	ldrh	r3, [r3, #4]
 801050c:	b29b      	uxth	r3, r3
 801050e:	429a      	cmp	r2, r3
 8010510:	d001      	beq.n	8010516 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010512:	2300      	movs	r3, #0
 8010514:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010516:	693b      	ldr	r3, [r7, #16]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8010520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010522:	2b00      	cmp	r3, #0
 8010524:	d193      	bne.n	801044e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010526:	e000      	b.n	801052a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010528:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801052a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801052c:	2b00      	cmp	r3, #0
 801052e:	d12d      	bne.n	801058c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8010530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010532:	2b00      	cmp	r3, #0
 8010534:	d01c      	beq.n	8010570 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010538:	88db      	ldrh	r3, [r3, #6]
 801053a:	b29a      	uxth	r2, r3
 801053c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801053e:	889b      	ldrh	r3, [r3, #4]
 8010540:	b29b      	uxth	r3, r3
 8010542:	429a      	cmp	r2, r3
 8010544:	d906      	bls.n	8010554 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010546:	4b45      	ldr	r3, [pc, #276]	; (801065c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010548:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801054c:	4944      	ldr	r1, [pc, #272]	; (8010660 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801054e:	4845      	ldr	r0, [pc, #276]	; (8010664 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010550:	f000 fcea 	bl	8010f28 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010556:	68ba      	ldr	r2, [r7, #8]
 8010558:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801055a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801055c:	88db      	ldrh	r3, [r3, #6]
 801055e:	b29a      	uxth	r2, r3
 8010560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010562:	889b      	ldrh	r3, [r3, #4]
 8010564:	b29b      	uxth	r3, r3
 8010566:	429a      	cmp	r2, r3
 8010568:	d010      	beq.n	801058c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801056a:	2300      	movs	r3, #0
 801056c:	623b      	str	r3, [r7, #32]
 801056e:	e00d      	b.n	801058c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	685b      	ldr	r3, [r3, #4]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d006      	beq.n	8010586 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010578:	4b38      	ldr	r3, [pc, #224]	; (801065c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801057a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801057e:	493a      	ldr	r1, [pc, #232]	; (8010668 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010580:	4838      	ldr	r0, [pc, #224]	; (8010664 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010582:	f000 fcd1 	bl	8010f28 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	68ba      	ldr	r2, [r7, #8]
 801058a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d105      	bne.n	801059e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	7f9b      	ldrb	r3, [r3, #30]
 8010596:	f003 0301 	and.w	r3, r3, #1
 801059a:	2b00      	cmp	r3, #0
 801059c:	d059      	beq.n	8010652 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801059e:	6a3b      	ldr	r3, [r7, #32]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d04f      	beq.n	8010644 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	685b      	ldr	r3, [r3, #4]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d006      	beq.n	80105ba <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	685b      	ldr	r3, [r3, #4]
 80105b0:	685b      	ldr	r3, [r3, #4]
 80105b2:	889b      	ldrh	r3, [r3, #4]
 80105b4:	b29b      	uxth	r3, r3
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d002      	beq.n	80105c0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80105ba:	2300      	movs	r3, #0
 80105bc:	623b      	str	r3, [r7, #32]
 80105be:	e041      	b.n	8010644 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80105c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80105c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80105ca:	e012      	b.n	80105f2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80105cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ce:	685b      	ldr	r3, [r3, #4]
 80105d0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80105d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d4:	88db      	ldrh	r3, [r3, #6]
 80105d6:	b29a      	uxth	r2, r3
 80105d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105da:	889b      	ldrh	r3, [r3, #4]
 80105dc:	b29b      	uxth	r3, r3
 80105de:	429a      	cmp	r2, r3
 80105e0:	d002      	beq.n	80105e8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80105e2:	2300      	movs	r3, #0
 80105e4:	623b      	str	r3, [r7, #32]
            break;
 80105e6:	e007      	b.n	80105f8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80105e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ea:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80105ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80105f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d1e9      	bne.n	80105cc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80105f8:	6a3b      	ldr	r3, [r7, #32]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d022      	beq.n	8010644 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	685b      	ldr	r3, [r3, #4]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d106      	bne.n	8010614 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010606:	4b15      	ldr	r3, [pc, #84]	; (801065c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010608:	f240 12df 	movw	r2, #479	; 0x1df
 801060c:	4917      	ldr	r1, [pc, #92]	; (801066c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801060e:	4815      	ldr	r0, [pc, #84]	; (8010664 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010610:	f000 fc8a 	bl	8010f28 <iprintf>
          LWIP_ASSERT("sanity check",
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	685b      	ldr	r3, [r3, #4]
 8010618:	685b      	ldr	r3, [r3, #4]
 801061a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801061c:	429a      	cmp	r2, r3
 801061e:	d106      	bne.n	801062e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8010620:	4b0e      	ldr	r3, [pc, #56]	; (801065c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010622:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010626:	4911      	ldr	r1, [pc, #68]	; (801066c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010628:	480e      	ldr	r0, [pc, #56]	; (8010664 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801062a:	f000 fc7d 	bl	8010f28 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801062e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d006      	beq.n	8010644 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010636:	4b09      	ldr	r3, [pc, #36]	; (801065c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010638:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801063c:	490c      	ldr	r1, [pc, #48]	; (8010670 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801063e:	4809      	ldr	r0, [pc, #36]	; (8010664 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010640:	f000 fc72 	bl	8010f28 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010644:	6a3b      	ldr	r3, [r7, #32]
 8010646:	2b00      	cmp	r3, #0
 8010648:	bf14      	ite	ne
 801064a:	2301      	movne	r3, #1
 801064c:	2300      	moveq	r3, #0
 801064e:	b2db      	uxtb	r3, r3
 8010650:	e000      	b.n	8010654 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8010652:	2300      	movs	r3, #0
}
 8010654:	4618      	mov	r0, r3
 8010656:	3730      	adds	r7, #48	; 0x30
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}
 801065c:	08014aa8 	.word	0x08014aa8
 8010660:	08014b8c 	.word	0x08014b8c
 8010664:	08014af0 	.word	0x08014af0
 8010668:	08014bac 	.word	0x08014bac
 801066c:	08014be4 	.word	0x08014be4
 8010670:	08014bf4 	.word	0x08014bf4

08010674 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b08e      	sub	sp, #56	; 0x38
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	685b      	ldr	r3, [r3, #4]
 8010680:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010684:	781b      	ldrb	r3, [r3, #0]
 8010686:	f003 030f 	and.w	r3, r3, #15
 801068a:	b2db      	uxtb	r3, r3
 801068c:	009b      	lsls	r3, r3, #2
 801068e:	b2db      	uxtb	r3, r3
 8010690:	2b14      	cmp	r3, #20
 8010692:	f040 8171 	bne.w	8010978 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010698:	88db      	ldrh	r3, [r3, #6]
 801069a:	b29b      	uxth	r3, r3
 801069c:	4618      	mov	r0, r3
 801069e:	f7f5 ff7f 	bl	80065a0 <lwip_htons>
 80106a2:	4603      	mov	r3, r0
 80106a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80106a8:	b29b      	uxth	r3, r3
 80106aa:	00db      	lsls	r3, r3, #3
 80106ac:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80106ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b0:	885b      	ldrh	r3, [r3, #2]
 80106b2:	b29b      	uxth	r3, r3
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7f5 ff73 	bl	80065a0 <lwip_htons>
 80106ba:	4603      	mov	r3, r0
 80106bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80106be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c0:	781b      	ldrb	r3, [r3, #0]
 80106c2:	f003 030f 	and.w	r3, r3, #15
 80106c6:	b2db      	uxtb	r3, r3
 80106c8:	009b      	lsls	r3, r3, #2
 80106ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80106ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80106d2:	b29b      	uxth	r3, r3
 80106d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80106d6:	429a      	cmp	r2, r3
 80106d8:	f0c0 8150 	bcc.w	801097c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80106dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80106e0:	b29b      	uxth	r3, r3
 80106e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80106e4:	1ad3      	subs	r3, r2, r3
 80106e6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	f7f7 fba9 	bl	8007e40 <pbuf_clen>
 80106ee:	4603      	mov	r3, r0
 80106f0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80106f2:	4b8c      	ldr	r3, [pc, #560]	; (8010924 <ip4_reass+0x2b0>)
 80106f4:	881b      	ldrh	r3, [r3, #0]
 80106f6:	461a      	mov	r2, r3
 80106f8:	8c3b      	ldrh	r3, [r7, #32]
 80106fa:	4413      	add	r3, r2
 80106fc:	2b0a      	cmp	r3, #10
 80106fe:	dd10      	ble.n	8010722 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010700:	8c3b      	ldrh	r3, [r7, #32]
 8010702:	4619      	mov	r1, r3
 8010704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010706:	f7ff fd81 	bl	801020c <ip_reass_remove_oldest_datagram>
 801070a:	4603      	mov	r3, r0
 801070c:	2b00      	cmp	r3, #0
 801070e:	f000 8137 	beq.w	8010980 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010712:	4b84      	ldr	r3, [pc, #528]	; (8010924 <ip4_reass+0x2b0>)
 8010714:	881b      	ldrh	r3, [r3, #0]
 8010716:	461a      	mov	r2, r3
 8010718:	8c3b      	ldrh	r3, [r7, #32]
 801071a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801071c:	2b0a      	cmp	r3, #10
 801071e:	f300 812f 	bgt.w	8010980 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010722:	4b81      	ldr	r3, [pc, #516]	; (8010928 <ip4_reass+0x2b4>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	633b      	str	r3, [r7, #48]	; 0x30
 8010728:	e015      	b.n	8010756 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801072a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801072c:	695a      	ldr	r2, [r3, #20]
 801072e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010730:	68db      	ldr	r3, [r3, #12]
 8010732:	429a      	cmp	r2, r3
 8010734:	d10c      	bne.n	8010750 <ip4_reass+0xdc>
 8010736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010738:	699a      	ldr	r2, [r3, #24]
 801073a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801073c:	691b      	ldr	r3, [r3, #16]
 801073e:	429a      	cmp	r2, r3
 8010740:	d106      	bne.n	8010750 <ip4_reass+0xdc>
 8010742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010744:	899a      	ldrh	r2, [r3, #12]
 8010746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010748:	889b      	ldrh	r3, [r3, #4]
 801074a:	b29b      	uxth	r3, r3
 801074c:	429a      	cmp	r2, r3
 801074e:	d006      	beq.n	801075e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	633b      	str	r3, [r7, #48]	; 0x30
 8010756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010758:	2b00      	cmp	r3, #0
 801075a:	d1e6      	bne.n	801072a <ip4_reass+0xb6>
 801075c:	e000      	b.n	8010760 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801075e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010762:	2b00      	cmp	r3, #0
 8010764:	d109      	bne.n	801077a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010766:	8c3b      	ldrh	r3, [r7, #32]
 8010768:	4619      	mov	r1, r3
 801076a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801076c:	f7ff fdb0 	bl	80102d0 <ip_reass_enqueue_new_datagram>
 8010770:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010774:	2b00      	cmp	r3, #0
 8010776:	d11c      	bne.n	80107b2 <ip4_reass+0x13e>
      goto nullreturn;
 8010778:	e105      	b.n	8010986 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801077a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801077c:	88db      	ldrh	r3, [r3, #6]
 801077e:	b29b      	uxth	r3, r3
 8010780:	4618      	mov	r0, r3
 8010782:	f7f5 ff0d 	bl	80065a0 <lwip_htons>
 8010786:	4603      	mov	r3, r0
 8010788:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801078c:	2b00      	cmp	r3, #0
 801078e:	d110      	bne.n	80107b2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010792:	89db      	ldrh	r3, [r3, #14]
 8010794:	4618      	mov	r0, r3
 8010796:	f7f5 ff03 	bl	80065a0 <lwip_htons>
 801079a:	4603      	mov	r3, r0
 801079c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d006      	beq.n	80107b2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80107a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a6:	3308      	adds	r3, #8
 80107a8:	2214      	movs	r2, #20
 80107aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80107ac:	4618      	mov	r0, r3
 80107ae:	f000 fba5 	bl	8010efc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80107b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b4:	88db      	ldrh	r3, [r3, #6]
 80107b6:	b29b      	uxth	r3, r3
 80107b8:	f003 0320 	and.w	r3, r3, #32
 80107bc:	2b00      	cmp	r3, #0
 80107be:	bf0c      	ite	eq
 80107c0:	2301      	moveq	r3, #1
 80107c2:	2300      	movne	r3, #0
 80107c4:	b2db      	uxtb	r3, r3
 80107c6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80107c8:	69fb      	ldr	r3, [r7, #28]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d00e      	beq.n	80107ec <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80107ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80107d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80107d2:	4413      	add	r3, r2
 80107d4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80107d6:	8b7a      	ldrh	r2, [r7, #26]
 80107d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80107da:	429a      	cmp	r2, r3
 80107dc:	f0c0 80a0 	bcc.w	8010920 <ip4_reass+0x2ac>
 80107e0:	8b7b      	ldrh	r3, [r7, #26]
 80107e2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80107e6:	4293      	cmp	r3, r2
 80107e8:	f200 809a 	bhi.w	8010920 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80107ec:	69fa      	ldr	r2, [r7, #28]
 80107ee:	6879      	ldr	r1, [r7, #4]
 80107f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107f2:	f7ff fdd5 	bl	80103a0 <ip_reass_chain_frag_into_datagram_and_validate>
 80107f6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107fe:	f000 809b 	beq.w	8010938 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010802:	4b48      	ldr	r3, [pc, #288]	; (8010924 <ip4_reass+0x2b0>)
 8010804:	881a      	ldrh	r2, [r3, #0]
 8010806:	8c3b      	ldrh	r3, [r7, #32]
 8010808:	4413      	add	r3, r2
 801080a:	b29a      	uxth	r2, r3
 801080c:	4b45      	ldr	r3, [pc, #276]	; (8010924 <ip4_reass+0x2b0>)
 801080e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010810:	69fb      	ldr	r3, [r7, #28]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d00d      	beq.n	8010832 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010816:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010818:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801081a:	4413      	add	r3, r2
 801081c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801081e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010820:	8a7a      	ldrh	r2, [r7, #18]
 8010822:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010826:	7f9b      	ldrb	r3, [r3, #30]
 8010828:	f043 0301 	orr.w	r3, r3, #1
 801082c:	b2da      	uxtb	r2, r3
 801082e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010830:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010832:	697b      	ldr	r3, [r7, #20]
 8010834:	2b01      	cmp	r3, #1
 8010836:	d171      	bne.n	801091c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801083a:	8b9b      	ldrh	r3, [r3, #28]
 801083c:	3314      	adds	r3, #20
 801083e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010842:	685b      	ldr	r3, [r3, #4]
 8010844:	685b      	ldr	r3, [r3, #4]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801084a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801084c:	685b      	ldr	r3, [r3, #4]
 801084e:	685b      	ldr	r3, [r3, #4]
 8010850:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010854:	3308      	adds	r3, #8
 8010856:	2214      	movs	r2, #20
 8010858:	4619      	mov	r1, r3
 801085a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801085c:	f000 fb4e 	bl	8010efc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010860:	8a3b      	ldrh	r3, [r7, #16]
 8010862:	4618      	mov	r0, r3
 8010864:	f7f5 fe9c 	bl	80065a0 <lwip_htons>
 8010868:	4603      	mov	r3, r0
 801086a:	461a      	mov	r2, r3
 801086c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801086e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010872:	2200      	movs	r2, #0
 8010874:	719a      	strb	r2, [r3, #6]
 8010876:	2200      	movs	r2, #0
 8010878:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801087a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801087c:	2200      	movs	r2, #0
 801087e:	729a      	strb	r2, [r3, #10]
 8010880:	2200      	movs	r2, #0
 8010882:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010886:	685b      	ldr	r3, [r3, #4]
 8010888:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801088a:	e00d      	b.n	80108a8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801088c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801088e:	685b      	ldr	r3, [r3, #4]
 8010890:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010892:	2114      	movs	r1, #20
 8010894:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010896:	f7f7 f9c5 	bl	8007c24 <pbuf_remove_header>
      pbuf_cat(p, r);
 801089a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801089c:	6878      	ldr	r0, [r7, #4]
 801089e:	f7f7 fb09 	bl	8007eb4 <pbuf_cat>
      r = iprh->next_pbuf;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80108a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d1ee      	bne.n	801088c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80108ae:	4b1e      	ldr	r3, [pc, #120]	; (8010928 <ip4_reass+0x2b4>)
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108b4:	429a      	cmp	r2, r3
 80108b6:	d102      	bne.n	80108be <ip4_reass+0x24a>
      ipr_prev = NULL;
 80108b8:	2300      	movs	r3, #0
 80108ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108bc:	e010      	b.n	80108e0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80108be:	4b1a      	ldr	r3, [pc, #104]	; (8010928 <ip4_reass+0x2b4>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108c4:	e007      	b.n	80108d6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80108c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108cc:	429a      	cmp	r2, r3
 80108ce:	d006      	beq.n	80108de <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80108d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d1f4      	bne.n	80108c6 <ip4_reass+0x252>
 80108dc:	e000      	b.n	80108e0 <ip4_reass+0x26c>
          break;
 80108de:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80108e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80108e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108e4:	f7ff fd2e 	bl	8010344 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f7f7 faa9 	bl	8007e40 <pbuf_clen>
 80108ee:	4603      	mov	r3, r0
 80108f0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80108f2:	4b0c      	ldr	r3, [pc, #48]	; (8010924 <ip4_reass+0x2b0>)
 80108f4:	881b      	ldrh	r3, [r3, #0]
 80108f6:	8c3a      	ldrh	r2, [r7, #32]
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d906      	bls.n	801090a <ip4_reass+0x296>
 80108fc:	4b0b      	ldr	r3, [pc, #44]	; (801092c <ip4_reass+0x2b8>)
 80108fe:	f240 229b 	movw	r2, #667	; 0x29b
 8010902:	490b      	ldr	r1, [pc, #44]	; (8010930 <ip4_reass+0x2bc>)
 8010904:	480b      	ldr	r0, [pc, #44]	; (8010934 <ip4_reass+0x2c0>)
 8010906:	f000 fb0f 	bl	8010f28 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801090a:	4b06      	ldr	r3, [pc, #24]	; (8010924 <ip4_reass+0x2b0>)
 801090c:	881a      	ldrh	r2, [r3, #0]
 801090e:	8c3b      	ldrh	r3, [r7, #32]
 8010910:	1ad3      	subs	r3, r2, r3
 8010912:	b29a      	uxth	r2, r3
 8010914:	4b03      	ldr	r3, [pc, #12]	; (8010924 <ip4_reass+0x2b0>)
 8010916:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	e038      	b.n	801098e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801091c:	2300      	movs	r3, #0
 801091e:	e036      	b.n	801098e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8010920:	bf00      	nop
 8010922:	e00a      	b.n	801093a <ip4_reass+0x2c6>
 8010924:	200088a0 	.word	0x200088a0
 8010928:	2000889c 	.word	0x2000889c
 801092c:	08014aa8 	.word	0x08014aa8
 8010930:	08014c18 	.word	0x08014c18
 8010934:	08014af0 	.word	0x08014af0
    goto nullreturn_ipr;
 8010938:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801093a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801093c:	2b00      	cmp	r3, #0
 801093e:	d106      	bne.n	801094e <ip4_reass+0x2da>
 8010940:	4b15      	ldr	r3, [pc, #84]	; (8010998 <ip4_reass+0x324>)
 8010942:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010946:	4915      	ldr	r1, [pc, #84]	; (801099c <ip4_reass+0x328>)
 8010948:	4815      	ldr	r0, [pc, #84]	; (80109a0 <ip4_reass+0x32c>)
 801094a:	f000 faed 	bl	8010f28 <iprintf>
  if (ipr->p == NULL) {
 801094e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d116      	bne.n	8010984 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010956:	4b13      	ldr	r3, [pc, #76]	; (80109a4 <ip4_reass+0x330>)
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801095c:	429a      	cmp	r2, r3
 801095e:	d006      	beq.n	801096e <ip4_reass+0x2fa>
 8010960:	4b0d      	ldr	r3, [pc, #52]	; (8010998 <ip4_reass+0x324>)
 8010962:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010966:	4910      	ldr	r1, [pc, #64]	; (80109a8 <ip4_reass+0x334>)
 8010968:	480d      	ldr	r0, [pc, #52]	; (80109a0 <ip4_reass+0x32c>)
 801096a:	f000 fadd 	bl	8010f28 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801096e:	2100      	movs	r1, #0
 8010970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010972:	f7ff fce7 	bl	8010344 <ip_reass_dequeue_datagram>
 8010976:	e006      	b.n	8010986 <ip4_reass+0x312>
    goto nullreturn;
 8010978:	bf00      	nop
 801097a:	e004      	b.n	8010986 <ip4_reass+0x312>
    goto nullreturn;
 801097c:	bf00      	nop
 801097e:	e002      	b.n	8010986 <ip4_reass+0x312>
      goto nullreturn;
 8010980:	bf00      	nop
 8010982:	e000      	b.n	8010986 <ip4_reass+0x312>
  }

nullreturn:
 8010984:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010986:	6878      	ldr	r0, [r7, #4]
 8010988:	f7f7 f9d2 	bl	8007d30 <pbuf_free>
  return NULL;
 801098c:	2300      	movs	r3, #0
}
 801098e:	4618      	mov	r0, r3
 8010990:	3738      	adds	r7, #56	; 0x38
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}
 8010996:	bf00      	nop
 8010998:	08014aa8 	.word	0x08014aa8
 801099c:	08014c34 	.word	0x08014c34
 80109a0:	08014af0 	.word	0x08014af0
 80109a4:	2000889c 	.word	0x2000889c
 80109a8:	08014c40 	.word	0x08014c40

080109ac <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80109b0:	2005      	movs	r0, #5
 80109b2:	f7f6 fad7 	bl	8006f64 <memp_malloc>
 80109b6:	4603      	mov	r3, r0
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	bd80      	pop	{r7, pc}

080109bc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80109bc:	b580      	push	{r7, lr}
 80109be:	b082      	sub	sp, #8
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d106      	bne.n	80109d8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80109ca:	4b07      	ldr	r3, [pc, #28]	; (80109e8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80109cc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80109d0:	4906      	ldr	r1, [pc, #24]	; (80109ec <ip_frag_free_pbuf_custom_ref+0x30>)
 80109d2:	4807      	ldr	r0, [pc, #28]	; (80109f0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80109d4:	f000 faa8 	bl	8010f28 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80109d8:	6879      	ldr	r1, [r7, #4]
 80109da:	2005      	movs	r0, #5
 80109dc:	f7f6 fb32 	bl	8007044 <memp_free>
}
 80109e0:	bf00      	nop
 80109e2:	3708      	adds	r7, #8
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}
 80109e8:	08014aa8 	.word	0x08014aa8
 80109ec:	08014c60 	.word	0x08014c60
 80109f0:	08014af0 	.word	0x08014af0

080109f4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b084      	sub	sp, #16
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d106      	bne.n	8010a14 <ipfrag_free_pbuf_custom+0x20>
 8010a06:	4b11      	ldr	r3, [pc, #68]	; (8010a4c <ipfrag_free_pbuf_custom+0x58>)
 8010a08:	f240 22ce 	movw	r2, #718	; 0x2ce
 8010a0c:	4910      	ldr	r1, [pc, #64]	; (8010a50 <ipfrag_free_pbuf_custom+0x5c>)
 8010a0e:	4811      	ldr	r0, [pc, #68]	; (8010a54 <ipfrag_free_pbuf_custom+0x60>)
 8010a10:	f000 fa8a 	bl	8010f28 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010a14:	68fa      	ldr	r2, [r7, #12]
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	d006      	beq.n	8010a2a <ipfrag_free_pbuf_custom+0x36>
 8010a1c:	4b0b      	ldr	r3, [pc, #44]	; (8010a4c <ipfrag_free_pbuf_custom+0x58>)
 8010a1e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8010a22:	490d      	ldr	r1, [pc, #52]	; (8010a58 <ipfrag_free_pbuf_custom+0x64>)
 8010a24:	480b      	ldr	r0, [pc, #44]	; (8010a54 <ipfrag_free_pbuf_custom+0x60>)
 8010a26:	f000 fa7f 	bl	8010f28 <iprintf>
  if (pcr->original != NULL) {
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	695b      	ldr	r3, [r3, #20]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d004      	beq.n	8010a3c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	695b      	ldr	r3, [r3, #20]
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7f7 f97a 	bl	8007d30 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010a3c:	68f8      	ldr	r0, [r7, #12]
 8010a3e:	f7ff ffbd 	bl	80109bc <ip_frag_free_pbuf_custom_ref>
}
 8010a42:	bf00      	nop
 8010a44:	3710      	adds	r7, #16
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}
 8010a4a:	bf00      	nop
 8010a4c:	08014aa8 	.word	0x08014aa8
 8010a50:	08014c6c 	.word	0x08014c6c
 8010a54:	08014af0 	.word	0x08014af0
 8010a58:	08014c78 	.word	0x08014c78

08010a5c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b094      	sub	sp, #80	; 0x50
 8010a60:	af02      	add	r7, sp, #8
 8010a62:	60f8      	str	r0, [r7, #12]
 8010a64:	60b9      	str	r1, [r7, #8]
 8010a66:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010a6e:	68bb      	ldr	r3, [r7, #8]
 8010a70:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010a72:	3b14      	subs	r3, #20
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	da00      	bge.n	8010a7a <ip4_frag+0x1e>
 8010a78:	3307      	adds	r3, #7
 8010a7a:	10db      	asrs	r3, r3, #3
 8010a7c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010a7e:	2314      	movs	r3, #20
 8010a80:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	685b      	ldr	r3, [r3, #4]
 8010a86:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a8a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a8e:	781b      	ldrb	r3, [r3, #0]
 8010a90:	f003 030f 	and.w	r3, r3, #15
 8010a94:	b2db      	uxtb	r3, r3
 8010a96:	009b      	lsls	r3, r3, #2
 8010a98:	b2db      	uxtb	r3, r3
 8010a9a:	2b14      	cmp	r3, #20
 8010a9c:	d002      	beq.n	8010aa4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010a9e:	f06f 0305 	mvn.w	r3, #5
 8010aa2:	e110      	b.n	8010cc6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	895b      	ldrh	r3, [r3, #10]
 8010aa8:	2b13      	cmp	r3, #19
 8010aaa:	d809      	bhi.n	8010ac0 <ip4_frag+0x64>
 8010aac:	4b88      	ldr	r3, [pc, #544]	; (8010cd0 <ip4_frag+0x274>)
 8010aae:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8010ab2:	4988      	ldr	r1, [pc, #544]	; (8010cd4 <ip4_frag+0x278>)
 8010ab4:	4888      	ldr	r0, [pc, #544]	; (8010cd8 <ip4_frag+0x27c>)
 8010ab6:	f000 fa37 	bl	8010f28 <iprintf>
 8010aba:	f06f 0305 	mvn.w	r3, #5
 8010abe:	e102      	b.n	8010cc6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac2:	88db      	ldrh	r3, [r3, #6]
 8010ac4:	b29b      	uxth	r3, r3
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f7f5 fd6a 	bl	80065a0 <lwip_htons>
 8010acc:	4603      	mov	r3, r0
 8010ace:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010ad0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010ad2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010ad6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010ada:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010ae0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	891b      	ldrh	r3, [r3, #8]
 8010ae6:	3b14      	subs	r3, #20
 8010ae8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8010aec:	e0e1      	b.n	8010cb2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010aee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010af0:	00db      	lsls	r3, r3, #3
 8010af2:	b29b      	uxth	r3, r3
 8010af4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010af8:	4293      	cmp	r3, r2
 8010afa:	bf28      	it	cs
 8010afc:	4613      	movcs	r3, r2
 8010afe:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010b00:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010b04:	2114      	movs	r1, #20
 8010b06:	200e      	movs	r0, #14
 8010b08:	f7f6 fe2e 	bl	8007768 <pbuf_alloc>
 8010b0c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8010b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	f000 80d5 	beq.w	8010cc0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b18:	895b      	ldrh	r3, [r3, #10]
 8010b1a:	2b13      	cmp	r3, #19
 8010b1c:	d806      	bhi.n	8010b2c <ip4_frag+0xd0>
 8010b1e:	4b6c      	ldr	r3, [pc, #432]	; (8010cd0 <ip4_frag+0x274>)
 8010b20:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010b24:	496d      	ldr	r1, [pc, #436]	; (8010cdc <ip4_frag+0x280>)
 8010b26:	486c      	ldr	r0, [pc, #432]	; (8010cd8 <ip4_frag+0x27c>)
 8010b28:	f000 f9fe 	bl	8010f28 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b2e:	685b      	ldr	r3, [r3, #4]
 8010b30:	2214      	movs	r2, #20
 8010b32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010b34:	4618      	mov	r0, r3
 8010b36:	f000 f9e1 	bl	8010efc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b3c:	685b      	ldr	r3, [r3, #4]
 8010b3e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010b40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010b42:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010b46:	e064      	b.n	8010c12 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	895a      	ldrh	r2, [r3, #10]
 8010b4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b4e:	1ad3      	subs	r3, r2, r3
 8010b50:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	895b      	ldrh	r3, [r3, #10]
 8010b56:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	d906      	bls.n	8010b6a <ip4_frag+0x10e>
 8010b5c:	4b5c      	ldr	r3, [pc, #368]	; (8010cd0 <ip4_frag+0x274>)
 8010b5e:	f240 322d 	movw	r2, #813	; 0x32d
 8010b62:	495f      	ldr	r1, [pc, #380]	; (8010ce0 <ip4_frag+0x284>)
 8010b64:	485c      	ldr	r0, [pc, #368]	; (8010cd8 <ip4_frag+0x27c>)
 8010b66:	f000 f9df 	bl	8010f28 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010b6a:	8bfa      	ldrh	r2, [r7, #30]
 8010b6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010b70:	4293      	cmp	r3, r2
 8010b72:	bf28      	it	cs
 8010b74:	4613      	movcs	r3, r2
 8010b76:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010b7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d105      	bne.n	8010b8e <ip4_frag+0x132>
        poff = 0;
 8010b82:	2300      	movs	r3, #0
 8010b84:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	60fb      	str	r3, [r7, #12]
        continue;
 8010b8c:	e041      	b.n	8010c12 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010b8e:	f7ff ff0d 	bl	80109ac <ip_frag_alloc_pbuf_custom_ref>
 8010b92:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010b94:	69bb      	ldr	r3, [r7, #24]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d103      	bne.n	8010ba2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010b9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b9c:	f7f7 f8c8 	bl	8007d30 <pbuf_free>
        goto memerr;
 8010ba0:	e08f      	b.n	8010cc2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010ba2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010ba8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010baa:	4413      	add	r3, r2
 8010bac:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8010bb0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010bb4:	9201      	str	r2, [sp, #4]
 8010bb6:	9300      	str	r3, [sp, #0]
 8010bb8:	4603      	mov	r3, r0
 8010bba:	2241      	movs	r2, #65	; 0x41
 8010bbc:	2000      	movs	r0, #0
 8010bbe:	f7f6 fefd 	bl	80079bc <pbuf_alloced_custom>
 8010bc2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010bc4:	697b      	ldr	r3, [r7, #20]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d106      	bne.n	8010bd8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010bca:	69b8      	ldr	r0, [r7, #24]
 8010bcc:	f7ff fef6 	bl	80109bc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010bd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010bd2:	f7f7 f8ad 	bl	8007d30 <pbuf_free>
        goto memerr;
 8010bd6:	e074      	b.n	8010cc2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010bd8:	68f8      	ldr	r0, [r7, #12]
 8010bda:	f7f7 f949 	bl	8007e70 <pbuf_ref>
      pcr->original = p;
 8010bde:	69bb      	ldr	r3, [r7, #24]
 8010be0:	68fa      	ldr	r2, [r7, #12]
 8010be2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010be4:	69bb      	ldr	r3, [r7, #24]
 8010be6:	4a3f      	ldr	r2, [pc, #252]	; (8010ce4 <ip4_frag+0x288>)
 8010be8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010bea:	6979      	ldr	r1, [r7, #20]
 8010bec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010bee:	f7f7 f961 	bl	8007eb4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010bf2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010bf6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010bfa:	1ad3      	subs	r3, r2, r3
 8010bfc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8010c00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d004      	beq.n	8010c12 <ip4_frag+0x1b6>
        poff = 0;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010c12:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d196      	bne.n	8010b48 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010c1a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010c1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010c20:	4413      	add	r3, r2
 8010c22:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010c24:	68bb      	ldr	r3, [r7, #8]
 8010c26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010c28:	f1a3 0213 	sub.w	r2, r3, #19
 8010c2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010c30:	429a      	cmp	r2, r3
 8010c32:	bfcc      	ite	gt
 8010c34:	2301      	movgt	r3, #1
 8010c36:	2300      	movle	r3, #0
 8010c38:	b2db      	uxtb	r3, r3
 8010c3a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010c3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010c40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010c44:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010c46:	6a3b      	ldr	r3, [r7, #32]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d002      	beq.n	8010c52 <ip4_frag+0x1f6>
 8010c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d003      	beq.n	8010c5a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010c52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010c54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010c58:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010c5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f7f5 fc9f 	bl	80065a0 <lwip_htons>
 8010c62:	4603      	mov	r3, r0
 8010c64:	461a      	mov	r2, r3
 8010c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c68:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010c6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010c6c:	3314      	adds	r3, #20
 8010c6e:	b29b      	uxth	r3, r3
 8010c70:	4618      	mov	r0, r3
 8010c72:	f7f5 fc95 	bl	80065a0 <lwip_htons>
 8010c76:	4603      	mov	r3, r0
 8010c78:	461a      	mov	r2, r3
 8010c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c7c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c80:	2200      	movs	r2, #0
 8010c82:	729a      	strb	r2, [r3, #10]
 8010c84:	2200      	movs	r2, #0
 8010c86:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010c88:	68bb      	ldr	r3, [r7, #8]
 8010c8a:	695b      	ldr	r3, [r3, #20]
 8010c8c:	687a      	ldr	r2, [r7, #4]
 8010c8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010c90:	68b8      	ldr	r0, [r7, #8]
 8010c92:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010c94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c96:	f7f7 f84b 	bl	8007d30 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010c9a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010c9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010ca0:	1ad3      	subs	r3, r2, r3
 8010ca2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8010ca6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010caa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010cac:	4413      	add	r3, r2
 8010cae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8010cb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	f47f af19 	bne.w	8010aee <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	e002      	b.n	8010cc6 <ip4_frag+0x26a>
      goto memerr;
 8010cc0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010cc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3748      	adds	r7, #72	; 0x48
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}
 8010cce:	bf00      	nop
 8010cd0:	08014aa8 	.word	0x08014aa8
 8010cd4:	08014c84 	.word	0x08014c84
 8010cd8:	08014af0 	.word	0x08014af0
 8010cdc:	08014ca0 	.word	0x08014ca0
 8010ce0:	08014cc0 	.word	0x08014cc0
 8010ce4:	080109f5 	.word	0x080109f5

08010ce8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b086      	sub	sp, #24
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
 8010cf0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010cf2:	230e      	movs	r3, #14
 8010cf4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	895b      	ldrh	r3, [r3, #10]
 8010cfa:	2b0e      	cmp	r3, #14
 8010cfc:	d96e      	bls.n	8010ddc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	7bdb      	ldrb	r3, [r3, #15]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d106      	bne.n	8010d14 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d0c:	3301      	adds	r3, #1
 8010d0e:	b2da      	uxtb	r2, r3
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	685b      	ldr	r3, [r3, #4]
 8010d18:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	7b1a      	ldrb	r2, [r3, #12]
 8010d1e:	7b5b      	ldrb	r3, [r3, #13]
 8010d20:	021b      	lsls	r3, r3, #8
 8010d22:	4313      	orrs	r3, r2
 8010d24:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	781b      	ldrb	r3, [r3, #0]
 8010d2a:	f003 0301 	and.w	r3, r3, #1
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d023      	beq.n	8010d7a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010d32:	693b      	ldr	r3, [r7, #16]
 8010d34:	781b      	ldrb	r3, [r3, #0]
 8010d36:	2b01      	cmp	r3, #1
 8010d38:	d10f      	bne.n	8010d5a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010d3a:	693b      	ldr	r3, [r7, #16]
 8010d3c:	785b      	ldrb	r3, [r3, #1]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d11b      	bne.n	8010d7a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010d42:	693b      	ldr	r3, [r7, #16]
 8010d44:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010d46:	2b5e      	cmp	r3, #94	; 0x5e
 8010d48:	d117      	bne.n	8010d7a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	7b5b      	ldrb	r3, [r3, #13]
 8010d4e:	f043 0310 	orr.w	r3, r3, #16
 8010d52:	b2da      	uxtb	r2, r3
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	735a      	strb	r2, [r3, #13]
 8010d58:	e00f      	b.n	8010d7a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010d5a:	693b      	ldr	r3, [r7, #16]
 8010d5c:	2206      	movs	r2, #6
 8010d5e:	4928      	ldr	r1, [pc, #160]	; (8010e00 <ethernet_input+0x118>)
 8010d60:	4618      	mov	r0, r3
 8010d62:	f000 f8bb 	bl	8010edc <memcmp>
 8010d66:	4603      	mov	r3, r0
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d106      	bne.n	8010d7a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	7b5b      	ldrb	r3, [r3, #13]
 8010d70:	f043 0308 	orr.w	r3, r3, #8
 8010d74:	b2da      	uxtb	r2, r3
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010d7a:	89fb      	ldrh	r3, [r7, #14]
 8010d7c:	2b08      	cmp	r3, #8
 8010d7e:	d003      	beq.n	8010d88 <ethernet_input+0xa0>
 8010d80:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010d84:	d014      	beq.n	8010db0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010d86:	e032      	b.n	8010dee <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d8e:	f003 0308 	and.w	r3, r3, #8
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d024      	beq.n	8010de0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010d96:	8afb      	ldrh	r3, [r7, #22]
 8010d98:	4619      	mov	r1, r3
 8010d9a:	6878      	ldr	r0, [r7, #4]
 8010d9c:	f7f6 ff42 	bl	8007c24 <pbuf_remove_header>
 8010da0:	4603      	mov	r3, r0
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d11e      	bne.n	8010de4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010da6:	6839      	ldr	r1, [r7, #0]
 8010da8:	6878      	ldr	r0, [r7, #4]
 8010daa:	f7fe ff21 	bl	800fbf0 <ip4_input>
      break;
 8010dae:	e013      	b.n	8010dd8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010db6:	f003 0308 	and.w	r3, r3, #8
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d014      	beq.n	8010de8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010dbe:	8afb      	ldrh	r3, [r7, #22]
 8010dc0:	4619      	mov	r1, r3
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f7f6 ff2e 	bl	8007c24 <pbuf_remove_header>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d10e      	bne.n	8010dec <ethernet_input+0x104>
        etharp_input(p, netif);
 8010dce:	6839      	ldr	r1, [r7, #0]
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f7fe f8c1 	bl	800ef58 <etharp_input>
      break;
 8010dd6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	e00c      	b.n	8010df6 <ethernet_input+0x10e>
    goto free_and_return;
 8010ddc:	bf00      	nop
 8010dde:	e006      	b.n	8010dee <ethernet_input+0x106>
        goto free_and_return;
 8010de0:	bf00      	nop
 8010de2:	e004      	b.n	8010dee <ethernet_input+0x106>
        goto free_and_return;
 8010de4:	bf00      	nop
 8010de6:	e002      	b.n	8010dee <ethernet_input+0x106>
        goto free_and_return;
 8010de8:	bf00      	nop
 8010dea:	e000      	b.n	8010dee <ethernet_input+0x106>
        goto free_and_return;
 8010dec:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	f7f6 ff9e 	bl	8007d30 <pbuf_free>
  return ERR_OK;
 8010df4:	2300      	movs	r3, #0
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	3718      	adds	r7, #24
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}
 8010dfe:	bf00      	nop
 8010e00:	0801532c 	.word	0x0801532c

08010e04 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b086      	sub	sp, #24
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	60f8      	str	r0, [r7, #12]
 8010e0c:	60b9      	str	r1, [r7, #8]
 8010e0e:	607a      	str	r2, [r7, #4]
 8010e10:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010e12:	8c3b      	ldrh	r3, [r7, #32]
 8010e14:	4618      	mov	r0, r3
 8010e16:	f7f5 fbc3 	bl	80065a0 <lwip_htons>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010e1e:	210e      	movs	r1, #14
 8010e20:	68b8      	ldr	r0, [r7, #8]
 8010e22:	f7f6 feef 	bl	8007c04 <pbuf_add_header>
 8010e26:	4603      	mov	r3, r0
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d125      	bne.n	8010e78 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010e2c:	68bb      	ldr	r3, [r7, #8]
 8010e2e:	685b      	ldr	r3, [r3, #4]
 8010e30:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010e32:	693b      	ldr	r3, [r7, #16]
 8010e34:	8afa      	ldrh	r2, [r7, #22]
 8010e36:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010e38:	693b      	ldr	r3, [r7, #16]
 8010e3a:	2206      	movs	r2, #6
 8010e3c:	6839      	ldr	r1, [r7, #0]
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f000 f85c 	bl	8010efc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010e44:	693b      	ldr	r3, [r7, #16]
 8010e46:	3306      	adds	r3, #6
 8010e48:	2206      	movs	r2, #6
 8010e4a:	6879      	ldr	r1, [r7, #4]
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f000 f855 	bl	8010efc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010e58:	2b06      	cmp	r3, #6
 8010e5a:	d006      	beq.n	8010e6a <ethernet_output+0x66>
 8010e5c:	4b0a      	ldr	r3, [pc, #40]	; (8010e88 <ethernet_output+0x84>)
 8010e5e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8010e62:	490a      	ldr	r1, [pc, #40]	; (8010e8c <ethernet_output+0x88>)
 8010e64:	480a      	ldr	r0, [pc, #40]	; (8010e90 <ethernet_output+0x8c>)
 8010e66:	f000 f85f 	bl	8010f28 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	699b      	ldr	r3, [r3, #24]
 8010e6e:	68b9      	ldr	r1, [r7, #8]
 8010e70:	68f8      	ldr	r0, [r7, #12]
 8010e72:	4798      	blx	r3
 8010e74:	4603      	mov	r3, r0
 8010e76:	e002      	b.n	8010e7e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010e78:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010e7a:	f06f 0301 	mvn.w	r3, #1
}
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3718      	adds	r7, #24
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}
 8010e86:	bf00      	nop
 8010e88:	08014cd0 	.word	0x08014cd0
 8010e8c:	08014d08 	.word	0x08014d08
 8010e90:	08014d3c 	.word	0x08014d3c

08010e94 <__libc_init_array>:
 8010e94:	b570      	push	{r4, r5, r6, lr}
 8010e96:	4d0d      	ldr	r5, [pc, #52]	; (8010ecc <__libc_init_array+0x38>)
 8010e98:	4c0d      	ldr	r4, [pc, #52]	; (8010ed0 <__libc_init_array+0x3c>)
 8010e9a:	1b64      	subs	r4, r4, r5
 8010e9c:	10a4      	asrs	r4, r4, #2
 8010e9e:	2600      	movs	r6, #0
 8010ea0:	42a6      	cmp	r6, r4
 8010ea2:	d109      	bne.n	8010eb8 <__libc_init_array+0x24>
 8010ea4:	4d0b      	ldr	r5, [pc, #44]	; (8010ed4 <__libc_init_array+0x40>)
 8010ea6:	4c0c      	ldr	r4, [pc, #48]	; (8010ed8 <__libc_init_array+0x44>)
 8010ea8:	f001 f8b0 	bl	801200c <_init>
 8010eac:	1b64      	subs	r4, r4, r5
 8010eae:	10a4      	asrs	r4, r4, #2
 8010eb0:	2600      	movs	r6, #0
 8010eb2:	42a6      	cmp	r6, r4
 8010eb4:	d105      	bne.n	8010ec2 <__libc_init_array+0x2e>
 8010eb6:	bd70      	pop	{r4, r5, r6, pc}
 8010eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ebc:	4798      	blx	r3
 8010ebe:	3601      	adds	r6, #1
 8010ec0:	e7ee      	b.n	8010ea0 <__libc_init_array+0xc>
 8010ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ec6:	4798      	blx	r3
 8010ec8:	3601      	adds	r6, #1
 8010eca:	e7f2      	b.n	8010eb2 <__libc_init_array+0x1e>
 8010ecc:	0801548c 	.word	0x0801548c
 8010ed0:	0801548c 	.word	0x0801548c
 8010ed4:	0801548c 	.word	0x0801548c
 8010ed8:	08015490 	.word	0x08015490

08010edc <memcmp>:
 8010edc:	b510      	push	{r4, lr}
 8010ede:	3901      	subs	r1, #1
 8010ee0:	4402      	add	r2, r0
 8010ee2:	4290      	cmp	r0, r2
 8010ee4:	d101      	bne.n	8010eea <memcmp+0xe>
 8010ee6:	2000      	movs	r0, #0
 8010ee8:	e005      	b.n	8010ef6 <memcmp+0x1a>
 8010eea:	7803      	ldrb	r3, [r0, #0]
 8010eec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010ef0:	42a3      	cmp	r3, r4
 8010ef2:	d001      	beq.n	8010ef8 <memcmp+0x1c>
 8010ef4:	1b18      	subs	r0, r3, r4
 8010ef6:	bd10      	pop	{r4, pc}
 8010ef8:	3001      	adds	r0, #1
 8010efa:	e7f2      	b.n	8010ee2 <memcmp+0x6>

08010efc <memcpy>:
 8010efc:	440a      	add	r2, r1
 8010efe:	4291      	cmp	r1, r2
 8010f00:	f100 33ff 	add.w	r3, r0, #4294967295
 8010f04:	d100      	bne.n	8010f08 <memcpy+0xc>
 8010f06:	4770      	bx	lr
 8010f08:	b510      	push	{r4, lr}
 8010f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f12:	4291      	cmp	r1, r2
 8010f14:	d1f9      	bne.n	8010f0a <memcpy+0xe>
 8010f16:	bd10      	pop	{r4, pc}

08010f18 <memset>:
 8010f18:	4402      	add	r2, r0
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	4293      	cmp	r3, r2
 8010f1e:	d100      	bne.n	8010f22 <memset+0xa>
 8010f20:	4770      	bx	lr
 8010f22:	f803 1b01 	strb.w	r1, [r3], #1
 8010f26:	e7f9      	b.n	8010f1c <memset+0x4>

08010f28 <iprintf>:
 8010f28:	b40f      	push	{r0, r1, r2, r3}
 8010f2a:	4b0a      	ldr	r3, [pc, #40]	; (8010f54 <iprintf+0x2c>)
 8010f2c:	b513      	push	{r0, r1, r4, lr}
 8010f2e:	681c      	ldr	r4, [r3, #0]
 8010f30:	b124      	cbz	r4, 8010f3c <iprintf+0x14>
 8010f32:	69a3      	ldr	r3, [r4, #24]
 8010f34:	b913      	cbnz	r3, 8010f3c <iprintf+0x14>
 8010f36:	4620      	mov	r0, r4
 8010f38:	f000 f8e4 	bl	8011104 <__sinit>
 8010f3c:	ab05      	add	r3, sp, #20
 8010f3e:	9a04      	ldr	r2, [sp, #16]
 8010f40:	68a1      	ldr	r1, [r4, #8]
 8010f42:	9301      	str	r3, [sp, #4]
 8010f44:	4620      	mov	r0, r4
 8010f46:	f000 faa1 	bl	801148c <_vfiprintf_r>
 8010f4a:	b002      	add	sp, #8
 8010f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f50:	b004      	add	sp, #16
 8010f52:	4770      	bx	lr
 8010f54:	2000007c 	.word	0x2000007c

08010f58 <rand>:
 8010f58:	4b16      	ldr	r3, [pc, #88]	; (8010fb4 <rand+0x5c>)
 8010f5a:	b510      	push	{r4, lr}
 8010f5c:	681c      	ldr	r4, [r3, #0]
 8010f5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010f60:	b9b3      	cbnz	r3, 8010f90 <rand+0x38>
 8010f62:	2018      	movs	r0, #24
 8010f64:	f000 f980 	bl	8011268 <malloc>
 8010f68:	63a0      	str	r0, [r4, #56]	; 0x38
 8010f6a:	b928      	cbnz	r0, 8010f78 <rand+0x20>
 8010f6c:	4602      	mov	r2, r0
 8010f6e:	4b12      	ldr	r3, [pc, #72]	; (8010fb8 <rand+0x60>)
 8010f70:	4812      	ldr	r0, [pc, #72]	; (8010fbc <rand+0x64>)
 8010f72:	214e      	movs	r1, #78	; 0x4e
 8010f74:	f000 f850 	bl	8011018 <__assert_func>
 8010f78:	4a11      	ldr	r2, [pc, #68]	; (8010fc0 <rand+0x68>)
 8010f7a:	4b12      	ldr	r3, [pc, #72]	; (8010fc4 <rand+0x6c>)
 8010f7c:	e9c0 2300 	strd	r2, r3, [r0]
 8010f80:	4b11      	ldr	r3, [pc, #68]	; (8010fc8 <rand+0x70>)
 8010f82:	6083      	str	r3, [r0, #8]
 8010f84:	230b      	movs	r3, #11
 8010f86:	8183      	strh	r3, [r0, #12]
 8010f88:	2201      	movs	r2, #1
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010f90:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8010f92:	4a0e      	ldr	r2, [pc, #56]	; (8010fcc <rand+0x74>)
 8010f94:	6920      	ldr	r0, [r4, #16]
 8010f96:	6963      	ldr	r3, [r4, #20]
 8010f98:	490d      	ldr	r1, [pc, #52]	; (8010fd0 <rand+0x78>)
 8010f9a:	4342      	muls	r2, r0
 8010f9c:	fb01 2203 	mla	r2, r1, r3, r2
 8010fa0:	fba0 0101 	umull	r0, r1, r0, r1
 8010fa4:	1c43      	adds	r3, r0, #1
 8010fa6:	eb42 0001 	adc.w	r0, r2, r1
 8010faa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8010fae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010fb2:	bd10      	pop	{r4, pc}
 8010fb4:	2000007c 	.word	0x2000007c
 8010fb8:	08015340 	.word	0x08015340
 8010fbc:	08015357 	.word	0x08015357
 8010fc0:	abcd330e 	.word	0xabcd330e
 8010fc4:	e66d1234 	.word	0xe66d1234
 8010fc8:	0005deec 	.word	0x0005deec
 8010fcc:	5851f42d 	.word	0x5851f42d
 8010fd0:	4c957f2d 	.word	0x4c957f2d

08010fd4 <strchr>:
 8010fd4:	b2c9      	uxtb	r1, r1
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010fdc:	b11a      	cbz	r2, 8010fe6 <strchr+0x12>
 8010fde:	428a      	cmp	r2, r1
 8010fe0:	d1f9      	bne.n	8010fd6 <strchr+0x2>
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	4770      	bx	lr
 8010fe6:	2900      	cmp	r1, #0
 8010fe8:	bf18      	it	ne
 8010fea:	2300      	movne	r3, #0
 8010fec:	e7f9      	b.n	8010fe2 <strchr+0xe>

08010fee <strncmp>:
 8010fee:	b510      	push	{r4, lr}
 8010ff0:	b17a      	cbz	r2, 8011012 <strncmp+0x24>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	3901      	subs	r1, #1
 8010ff6:	1884      	adds	r4, r0, r2
 8010ff8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010ffc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011000:	4290      	cmp	r0, r2
 8011002:	d101      	bne.n	8011008 <strncmp+0x1a>
 8011004:	42a3      	cmp	r3, r4
 8011006:	d101      	bne.n	801100c <strncmp+0x1e>
 8011008:	1a80      	subs	r0, r0, r2
 801100a:	bd10      	pop	{r4, pc}
 801100c:	2800      	cmp	r0, #0
 801100e:	d1f3      	bne.n	8010ff8 <strncmp+0xa>
 8011010:	e7fa      	b.n	8011008 <strncmp+0x1a>
 8011012:	4610      	mov	r0, r2
 8011014:	e7f9      	b.n	801100a <strncmp+0x1c>
	...

08011018 <__assert_func>:
 8011018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801101a:	4614      	mov	r4, r2
 801101c:	461a      	mov	r2, r3
 801101e:	4b09      	ldr	r3, [pc, #36]	; (8011044 <__assert_func+0x2c>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	4605      	mov	r5, r0
 8011024:	68d8      	ldr	r0, [r3, #12]
 8011026:	b14c      	cbz	r4, 801103c <__assert_func+0x24>
 8011028:	4b07      	ldr	r3, [pc, #28]	; (8011048 <__assert_func+0x30>)
 801102a:	9100      	str	r1, [sp, #0]
 801102c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011030:	4906      	ldr	r1, [pc, #24]	; (801104c <__assert_func+0x34>)
 8011032:	462b      	mov	r3, r5
 8011034:	f000 f8e4 	bl	8011200 <fiprintf>
 8011038:	f000 fe12 	bl	8011c60 <abort>
 801103c:	4b04      	ldr	r3, [pc, #16]	; (8011050 <__assert_func+0x38>)
 801103e:	461c      	mov	r4, r3
 8011040:	e7f3      	b.n	801102a <__assert_func+0x12>
 8011042:	bf00      	nop
 8011044:	2000007c 	.word	0x2000007c
 8011048:	080153b2 	.word	0x080153b2
 801104c:	080153bf 	.word	0x080153bf
 8011050:	080153ed 	.word	0x080153ed

08011054 <std>:
 8011054:	2300      	movs	r3, #0
 8011056:	b510      	push	{r4, lr}
 8011058:	4604      	mov	r4, r0
 801105a:	e9c0 3300 	strd	r3, r3, [r0]
 801105e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011062:	6083      	str	r3, [r0, #8]
 8011064:	8181      	strh	r1, [r0, #12]
 8011066:	6643      	str	r3, [r0, #100]	; 0x64
 8011068:	81c2      	strh	r2, [r0, #14]
 801106a:	6183      	str	r3, [r0, #24]
 801106c:	4619      	mov	r1, r3
 801106e:	2208      	movs	r2, #8
 8011070:	305c      	adds	r0, #92	; 0x5c
 8011072:	f7ff ff51 	bl	8010f18 <memset>
 8011076:	4b05      	ldr	r3, [pc, #20]	; (801108c <std+0x38>)
 8011078:	6263      	str	r3, [r4, #36]	; 0x24
 801107a:	4b05      	ldr	r3, [pc, #20]	; (8011090 <std+0x3c>)
 801107c:	62a3      	str	r3, [r4, #40]	; 0x28
 801107e:	4b05      	ldr	r3, [pc, #20]	; (8011094 <std+0x40>)
 8011080:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011082:	4b05      	ldr	r3, [pc, #20]	; (8011098 <std+0x44>)
 8011084:	6224      	str	r4, [r4, #32]
 8011086:	6323      	str	r3, [r4, #48]	; 0x30
 8011088:	bd10      	pop	{r4, pc}
 801108a:	bf00      	nop
 801108c:	08011a35 	.word	0x08011a35
 8011090:	08011a57 	.word	0x08011a57
 8011094:	08011a8f 	.word	0x08011a8f
 8011098:	08011ab3 	.word	0x08011ab3

0801109c <_cleanup_r>:
 801109c:	4901      	ldr	r1, [pc, #4]	; (80110a4 <_cleanup_r+0x8>)
 801109e:	f000 b8c1 	b.w	8011224 <_fwalk_reent>
 80110a2:	bf00      	nop
 80110a4:	08011d9d 	.word	0x08011d9d

080110a8 <__sfmoreglue>:
 80110a8:	b570      	push	{r4, r5, r6, lr}
 80110aa:	2268      	movs	r2, #104	; 0x68
 80110ac:	1e4d      	subs	r5, r1, #1
 80110ae:	4355      	muls	r5, r2
 80110b0:	460e      	mov	r6, r1
 80110b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80110b6:	f000 f94b 	bl	8011350 <_malloc_r>
 80110ba:	4604      	mov	r4, r0
 80110bc:	b140      	cbz	r0, 80110d0 <__sfmoreglue+0x28>
 80110be:	2100      	movs	r1, #0
 80110c0:	e9c0 1600 	strd	r1, r6, [r0]
 80110c4:	300c      	adds	r0, #12
 80110c6:	60a0      	str	r0, [r4, #8]
 80110c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80110cc:	f7ff ff24 	bl	8010f18 <memset>
 80110d0:	4620      	mov	r0, r4
 80110d2:	bd70      	pop	{r4, r5, r6, pc}

080110d4 <__sfp_lock_acquire>:
 80110d4:	4801      	ldr	r0, [pc, #4]	; (80110dc <__sfp_lock_acquire+0x8>)
 80110d6:	f000 b8c5 	b.w	8011264 <__retarget_lock_acquire_recursive>
 80110da:	bf00      	nop
 80110dc:	200088a9 	.word	0x200088a9

080110e0 <__sfp_lock_release>:
 80110e0:	4801      	ldr	r0, [pc, #4]	; (80110e8 <__sfp_lock_release+0x8>)
 80110e2:	f000 b8c0 	b.w	8011266 <__retarget_lock_release_recursive>
 80110e6:	bf00      	nop
 80110e8:	200088a9 	.word	0x200088a9

080110ec <__sinit_lock_acquire>:
 80110ec:	4801      	ldr	r0, [pc, #4]	; (80110f4 <__sinit_lock_acquire+0x8>)
 80110ee:	f000 b8b9 	b.w	8011264 <__retarget_lock_acquire_recursive>
 80110f2:	bf00      	nop
 80110f4:	200088aa 	.word	0x200088aa

080110f8 <__sinit_lock_release>:
 80110f8:	4801      	ldr	r0, [pc, #4]	; (8011100 <__sinit_lock_release+0x8>)
 80110fa:	f000 b8b4 	b.w	8011266 <__retarget_lock_release_recursive>
 80110fe:	bf00      	nop
 8011100:	200088aa 	.word	0x200088aa

08011104 <__sinit>:
 8011104:	b510      	push	{r4, lr}
 8011106:	4604      	mov	r4, r0
 8011108:	f7ff fff0 	bl	80110ec <__sinit_lock_acquire>
 801110c:	69a3      	ldr	r3, [r4, #24]
 801110e:	b11b      	cbz	r3, 8011118 <__sinit+0x14>
 8011110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011114:	f7ff bff0 	b.w	80110f8 <__sinit_lock_release>
 8011118:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801111c:	6523      	str	r3, [r4, #80]	; 0x50
 801111e:	4b13      	ldr	r3, [pc, #76]	; (801116c <__sinit+0x68>)
 8011120:	4a13      	ldr	r2, [pc, #76]	; (8011170 <__sinit+0x6c>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	62a2      	str	r2, [r4, #40]	; 0x28
 8011126:	42a3      	cmp	r3, r4
 8011128:	bf04      	itt	eq
 801112a:	2301      	moveq	r3, #1
 801112c:	61a3      	streq	r3, [r4, #24]
 801112e:	4620      	mov	r0, r4
 8011130:	f000 f820 	bl	8011174 <__sfp>
 8011134:	6060      	str	r0, [r4, #4]
 8011136:	4620      	mov	r0, r4
 8011138:	f000 f81c 	bl	8011174 <__sfp>
 801113c:	60a0      	str	r0, [r4, #8]
 801113e:	4620      	mov	r0, r4
 8011140:	f000 f818 	bl	8011174 <__sfp>
 8011144:	2200      	movs	r2, #0
 8011146:	60e0      	str	r0, [r4, #12]
 8011148:	2104      	movs	r1, #4
 801114a:	6860      	ldr	r0, [r4, #4]
 801114c:	f7ff ff82 	bl	8011054 <std>
 8011150:	68a0      	ldr	r0, [r4, #8]
 8011152:	2201      	movs	r2, #1
 8011154:	2109      	movs	r1, #9
 8011156:	f7ff ff7d 	bl	8011054 <std>
 801115a:	68e0      	ldr	r0, [r4, #12]
 801115c:	2202      	movs	r2, #2
 801115e:	2112      	movs	r1, #18
 8011160:	f7ff ff78 	bl	8011054 <std>
 8011164:	2301      	movs	r3, #1
 8011166:	61a3      	str	r3, [r4, #24]
 8011168:	e7d2      	b.n	8011110 <__sinit+0xc>
 801116a:	bf00      	nop
 801116c:	0801533c 	.word	0x0801533c
 8011170:	0801109d 	.word	0x0801109d

08011174 <__sfp>:
 8011174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011176:	4607      	mov	r7, r0
 8011178:	f7ff ffac 	bl	80110d4 <__sfp_lock_acquire>
 801117c:	4b1e      	ldr	r3, [pc, #120]	; (80111f8 <__sfp+0x84>)
 801117e:	681e      	ldr	r6, [r3, #0]
 8011180:	69b3      	ldr	r3, [r6, #24]
 8011182:	b913      	cbnz	r3, 801118a <__sfp+0x16>
 8011184:	4630      	mov	r0, r6
 8011186:	f7ff ffbd 	bl	8011104 <__sinit>
 801118a:	3648      	adds	r6, #72	; 0x48
 801118c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011190:	3b01      	subs	r3, #1
 8011192:	d503      	bpl.n	801119c <__sfp+0x28>
 8011194:	6833      	ldr	r3, [r6, #0]
 8011196:	b30b      	cbz	r3, 80111dc <__sfp+0x68>
 8011198:	6836      	ldr	r6, [r6, #0]
 801119a:	e7f7      	b.n	801118c <__sfp+0x18>
 801119c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80111a0:	b9d5      	cbnz	r5, 80111d8 <__sfp+0x64>
 80111a2:	4b16      	ldr	r3, [pc, #88]	; (80111fc <__sfp+0x88>)
 80111a4:	60e3      	str	r3, [r4, #12]
 80111a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80111aa:	6665      	str	r5, [r4, #100]	; 0x64
 80111ac:	f000 f859 	bl	8011262 <__retarget_lock_init_recursive>
 80111b0:	f7ff ff96 	bl	80110e0 <__sfp_lock_release>
 80111b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80111b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80111bc:	6025      	str	r5, [r4, #0]
 80111be:	61a5      	str	r5, [r4, #24]
 80111c0:	2208      	movs	r2, #8
 80111c2:	4629      	mov	r1, r5
 80111c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80111c8:	f7ff fea6 	bl	8010f18 <memset>
 80111cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80111d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80111d4:	4620      	mov	r0, r4
 80111d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111d8:	3468      	adds	r4, #104	; 0x68
 80111da:	e7d9      	b.n	8011190 <__sfp+0x1c>
 80111dc:	2104      	movs	r1, #4
 80111de:	4638      	mov	r0, r7
 80111e0:	f7ff ff62 	bl	80110a8 <__sfmoreglue>
 80111e4:	4604      	mov	r4, r0
 80111e6:	6030      	str	r0, [r6, #0]
 80111e8:	2800      	cmp	r0, #0
 80111ea:	d1d5      	bne.n	8011198 <__sfp+0x24>
 80111ec:	f7ff ff78 	bl	80110e0 <__sfp_lock_release>
 80111f0:	230c      	movs	r3, #12
 80111f2:	603b      	str	r3, [r7, #0]
 80111f4:	e7ee      	b.n	80111d4 <__sfp+0x60>
 80111f6:	bf00      	nop
 80111f8:	0801533c 	.word	0x0801533c
 80111fc:	ffff0001 	.word	0xffff0001

08011200 <fiprintf>:
 8011200:	b40e      	push	{r1, r2, r3}
 8011202:	b503      	push	{r0, r1, lr}
 8011204:	4601      	mov	r1, r0
 8011206:	ab03      	add	r3, sp, #12
 8011208:	4805      	ldr	r0, [pc, #20]	; (8011220 <fiprintf+0x20>)
 801120a:	f853 2b04 	ldr.w	r2, [r3], #4
 801120e:	6800      	ldr	r0, [r0, #0]
 8011210:	9301      	str	r3, [sp, #4]
 8011212:	f000 f93b 	bl	801148c <_vfiprintf_r>
 8011216:	b002      	add	sp, #8
 8011218:	f85d eb04 	ldr.w	lr, [sp], #4
 801121c:	b003      	add	sp, #12
 801121e:	4770      	bx	lr
 8011220:	2000007c 	.word	0x2000007c

08011224 <_fwalk_reent>:
 8011224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011228:	4606      	mov	r6, r0
 801122a:	4688      	mov	r8, r1
 801122c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011230:	2700      	movs	r7, #0
 8011232:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011236:	f1b9 0901 	subs.w	r9, r9, #1
 801123a:	d505      	bpl.n	8011248 <_fwalk_reent+0x24>
 801123c:	6824      	ldr	r4, [r4, #0]
 801123e:	2c00      	cmp	r4, #0
 8011240:	d1f7      	bne.n	8011232 <_fwalk_reent+0xe>
 8011242:	4638      	mov	r0, r7
 8011244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011248:	89ab      	ldrh	r3, [r5, #12]
 801124a:	2b01      	cmp	r3, #1
 801124c:	d907      	bls.n	801125e <_fwalk_reent+0x3a>
 801124e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011252:	3301      	adds	r3, #1
 8011254:	d003      	beq.n	801125e <_fwalk_reent+0x3a>
 8011256:	4629      	mov	r1, r5
 8011258:	4630      	mov	r0, r6
 801125a:	47c0      	blx	r8
 801125c:	4307      	orrs	r7, r0
 801125e:	3568      	adds	r5, #104	; 0x68
 8011260:	e7e9      	b.n	8011236 <_fwalk_reent+0x12>

08011262 <__retarget_lock_init_recursive>:
 8011262:	4770      	bx	lr

08011264 <__retarget_lock_acquire_recursive>:
 8011264:	4770      	bx	lr

08011266 <__retarget_lock_release_recursive>:
 8011266:	4770      	bx	lr

08011268 <malloc>:
 8011268:	4b02      	ldr	r3, [pc, #8]	; (8011274 <malloc+0xc>)
 801126a:	4601      	mov	r1, r0
 801126c:	6818      	ldr	r0, [r3, #0]
 801126e:	f000 b86f 	b.w	8011350 <_malloc_r>
 8011272:	bf00      	nop
 8011274:	2000007c 	.word	0x2000007c

08011278 <_free_r>:
 8011278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801127a:	2900      	cmp	r1, #0
 801127c:	d044      	beq.n	8011308 <_free_r+0x90>
 801127e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011282:	9001      	str	r0, [sp, #4]
 8011284:	2b00      	cmp	r3, #0
 8011286:	f1a1 0404 	sub.w	r4, r1, #4
 801128a:	bfb8      	it	lt
 801128c:	18e4      	addlt	r4, r4, r3
 801128e:	f000 fe39 	bl	8011f04 <__malloc_lock>
 8011292:	4a1e      	ldr	r2, [pc, #120]	; (801130c <_free_r+0x94>)
 8011294:	9801      	ldr	r0, [sp, #4]
 8011296:	6813      	ldr	r3, [r2, #0]
 8011298:	b933      	cbnz	r3, 80112a8 <_free_r+0x30>
 801129a:	6063      	str	r3, [r4, #4]
 801129c:	6014      	str	r4, [r2, #0]
 801129e:	b003      	add	sp, #12
 80112a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80112a4:	f000 be34 	b.w	8011f10 <__malloc_unlock>
 80112a8:	42a3      	cmp	r3, r4
 80112aa:	d908      	bls.n	80112be <_free_r+0x46>
 80112ac:	6825      	ldr	r5, [r4, #0]
 80112ae:	1961      	adds	r1, r4, r5
 80112b0:	428b      	cmp	r3, r1
 80112b2:	bf01      	itttt	eq
 80112b4:	6819      	ldreq	r1, [r3, #0]
 80112b6:	685b      	ldreq	r3, [r3, #4]
 80112b8:	1949      	addeq	r1, r1, r5
 80112ba:	6021      	streq	r1, [r4, #0]
 80112bc:	e7ed      	b.n	801129a <_free_r+0x22>
 80112be:	461a      	mov	r2, r3
 80112c0:	685b      	ldr	r3, [r3, #4]
 80112c2:	b10b      	cbz	r3, 80112c8 <_free_r+0x50>
 80112c4:	42a3      	cmp	r3, r4
 80112c6:	d9fa      	bls.n	80112be <_free_r+0x46>
 80112c8:	6811      	ldr	r1, [r2, #0]
 80112ca:	1855      	adds	r5, r2, r1
 80112cc:	42a5      	cmp	r5, r4
 80112ce:	d10b      	bne.n	80112e8 <_free_r+0x70>
 80112d0:	6824      	ldr	r4, [r4, #0]
 80112d2:	4421      	add	r1, r4
 80112d4:	1854      	adds	r4, r2, r1
 80112d6:	42a3      	cmp	r3, r4
 80112d8:	6011      	str	r1, [r2, #0]
 80112da:	d1e0      	bne.n	801129e <_free_r+0x26>
 80112dc:	681c      	ldr	r4, [r3, #0]
 80112de:	685b      	ldr	r3, [r3, #4]
 80112e0:	6053      	str	r3, [r2, #4]
 80112e2:	4421      	add	r1, r4
 80112e4:	6011      	str	r1, [r2, #0]
 80112e6:	e7da      	b.n	801129e <_free_r+0x26>
 80112e8:	d902      	bls.n	80112f0 <_free_r+0x78>
 80112ea:	230c      	movs	r3, #12
 80112ec:	6003      	str	r3, [r0, #0]
 80112ee:	e7d6      	b.n	801129e <_free_r+0x26>
 80112f0:	6825      	ldr	r5, [r4, #0]
 80112f2:	1961      	adds	r1, r4, r5
 80112f4:	428b      	cmp	r3, r1
 80112f6:	bf04      	itt	eq
 80112f8:	6819      	ldreq	r1, [r3, #0]
 80112fa:	685b      	ldreq	r3, [r3, #4]
 80112fc:	6063      	str	r3, [r4, #4]
 80112fe:	bf04      	itt	eq
 8011300:	1949      	addeq	r1, r1, r5
 8011302:	6021      	streq	r1, [r4, #0]
 8011304:	6054      	str	r4, [r2, #4]
 8011306:	e7ca      	b.n	801129e <_free_r+0x26>
 8011308:	b003      	add	sp, #12
 801130a:	bd30      	pop	{r4, r5, pc}
 801130c:	200088ac 	.word	0x200088ac

08011310 <sbrk_aligned>:
 8011310:	b570      	push	{r4, r5, r6, lr}
 8011312:	4e0e      	ldr	r6, [pc, #56]	; (801134c <sbrk_aligned+0x3c>)
 8011314:	460c      	mov	r4, r1
 8011316:	6831      	ldr	r1, [r6, #0]
 8011318:	4605      	mov	r5, r0
 801131a:	b911      	cbnz	r1, 8011322 <sbrk_aligned+0x12>
 801131c:	f000 fb7a 	bl	8011a14 <_sbrk_r>
 8011320:	6030      	str	r0, [r6, #0]
 8011322:	4621      	mov	r1, r4
 8011324:	4628      	mov	r0, r5
 8011326:	f000 fb75 	bl	8011a14 <_sbrk_r>
 801132a:	1c43      	adds	r3, r0, #1
 801132c:	d00a      	beq.n	8011344 <sbrk_aligned+0x34>
 801132e:	1cc4      	adds	r4, r0, #3
 8011330:	f024 0403 	bic.w	r4, r4, #3
 8011334:	42a0      	cmp	r0, r4
 8011336:	d007      	beq.n	8011348 <sbrk_aligned+0x38>
 8011338:	1a21      	subs	r1, r4, r0
 801133a:	4628      	mov	r0, r5
 801133c:	f000 fb6a 	bl	8011a14 <_sbrk_r>
 8011340:	3001      	adds	r0, #1
 8011342:	d101      	bne.n	8011348 <sbrk_aligned+0x38>
 8011344:	f04f 34ff 	mov.w	r4, #4294967295
 8011348:	4620      	mov	r0, r4
 801134a:	bd70      	pop	{r4, r5, r6, pc}
 801134c:	200088b0 	.word	0x200088b0

08011350 <_malloc_r>:
 8011350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011354:	1ccd      	adds	r5, r1, #3
 8011356:	f025 0503 	bic.w	r5, r5, #3
 801135a:	3508      	adds	r5, #8
 801135c:	2d0c      	cmp	r5, #12
 801135e:	bf38      	it	cc
 8011360:	250c      	movcc	r5, #12
 8011362:	2d00      	cmp	r5, #0
 8011364:	4607      	mov	r7, r0
 8011366:	db01      	blt.n	801136c <_malloc_r+0x1c>
 8011368:	42a9      	cmp	r1, r5
 801136a:	d905      	bls.n	8011378 <_malloc_r+0x28>
 801136c:	230c      	movs	r3, #12
 801136e:	603b      	str	r3, [r7, #0]
 8011370:	2600      	movs	r6, #0
 8011372:	4630      	mov	r0, r6
 8011374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011378:	4e2e      	ldr	r6, [pc, #184]	; (8011434 <_malloc_r+0xe4>)
 801137a:	f000 fdc3 	bl	8011f04 <__malloc_lock>
 801137e:	6833      	ldr	r3, [r6, #0]
 8011380:	461c      	mov	r4, r3
 8011382:	bb34      	cbnz	r4, 80113d2 <_malloc_r+0x82>
 8011384:	4629      	mov	r1, r5
 8011386:	4638      	mov	r0, r7
 8011388:	f7ff ffc2 	bl	8011310 <sbrk_aligned>
 801138c:	1c43      	adds	r3, r0, #1
 801138e:	4604      	mov	r4, r0
 8011390:	d14d      	bne.n	801142e <_malloc_r+0xde>
 8011392:	6834      	ldr	r4, [r6, #0]
 8011394:	4626      	mov	r6, r4
 8011396:	2e00      	cmp	r6, #0
 8011398:	d140      	bne.n	801141c <_malloc_r+0xcc>
 801139a:	6823      	ldr	r3, [r4, #0]
 801139c:	4631      	mov	r1, r6
 801139e:	4638      	mov	r0, r7
 80113a0:	eb04 0803 	add.w	r8, r4, r3
 80113a4:	f000 fb36 	bl	8011a14 <_sbrk_r>
 80113a8:	4580      	cmp	r8, r0
 80113aa:	d13a      	bne.n	8011422 <_malloc_r+0xd2>
 80113ac:	6821      	ldr	r1, [r4, #0]
 80113ae:	3503      	adds	r5, #3
 80113b0:	1a6d      	subs	r5, r5, r1
 80113b2:	f025 0503 	bic.w	r5, r5, #3
 80113b6:	3508      	adds	r5, #8
 80113b8:	2d0c      	cmp	r5, #12
 80113ba:	bf38      	it	cc
 80113bc:	250c      	movcc	r5, #12
 80113be:	4629      	mov	r1, r5
 80113c0:	4638      	mov	r0, r7
 80113c2:	f7ff ffa5 	bl	8011310 <sbrk_aligned>
 80113c6:	3001      	adds	r0, #1
 80113c8:	d02b      	beq.n	8011422 <_malloc_r+0xd2>
 80113ca:	6823      	ldr	r3, [r4, #0]
 80113cc:	442b      	add	r3, r5
 80113ce:	6023      	str	r3, [r4, #0]
 80113d0:	e00e      	b.n	80113f0 <_malloc_r+0xa0>
 80113d2:	6822      	ldr	r2, [r4, #0]
 80113d4:	1b52      	subs	r2, r2, r5
 80113d6:	d41e      	bmi.n	8011416 <_malloc_r+0xc6>
 80113d8:	2a0b      	cmp	r2, #11
 80113da:	d916      	bls.n	801140a <_malloc_r+0xba>
 80113dc:	1961      	adds	r1, r4, r5
 80113de:	42a3      	cmp	r3, r4
 80113e0:	6025      	str	r5, [r4, #0]
 80113e2:	bf18      	it	ne
 80113e4:	6059      	strne	r1, [r3, #4]
 80113e6:	6863      	ldr	r3, [r4, #4]
 80113e8:	bf08      	it	eq
 80113ea:	6031      	streq	r1, [r6, #0]
 80113ec:	5162      	str	r2, [r4, r5]
 80113ee:	604b      	str	r3, [r1, #4]
 80113f0:	4638      	mov	r0, r7
 80113f2:	f104 060b 	add.w	r6, r4, #11
 80113f6:	f000 fd8b 	bl	8011f10 <__malloc_unlock>
 80113fa:	f026 0607 	bic.w	r6, r6, #7
 80113fe:	1d23      	adds	r3, r4, #4
 8011400:	1af2      	subs	r2, r6, r3
 8011402:	d0b6      	beq.n	8011372 <_malloc_r+0x22>
 8011404:	1b9b      	subs	r3, r3, r6
 8011406:	50a3      	str	r3, [r4, r2]
 8011408:	e7b3      	b.n	8011372 <_malloc_r+0x22>
 801140a:	6862      	ldr	r2, [r4, #4]
 801140c:	42a3      	cmp	r3, r4
 801140e:	bf0c      	ite	eq
 8011410:	6032      	streq	r2, [r6, #0]
 8011412:	605a      	strne	r2, [r3, #4]
 8011414:	e7ec      	b.n	80113f0 <_malloc_r+0xa0>
 8011416:	4623      	mov	r3, r4
 8011418:	6864      	ldr	r4, [r4, #4]
 801141a:	e7b2      	b.n	8011382 <_malloc_r+0x32>
 801141c:	4634      	mov	r4, r6
 801141e:	6876      	ldr	r6, [r6, #4]
 8011420:	e7b9      	b.n	8011396 <_malloc_r+0x46>
 8011422:	230c      	movs	r3, #12
 8011424:	603b      	str	r3, [r7, #0]
 8011426:	4638      	mov	r0, r7
 8011428:	f000 fd72 	bl	8011f10 <__malloc_unlock>
 801142c:	e7a1      	b.n	8011372 <_malloc_r+0x22>
 801142e:	6025      	str	r5, [r4, #0]
 8011430:	e7de      	b.n	80113f0 <_malloc_r+0xa0>
 8011432:	bf00      	nop
 8011434:	200088ac 	.word	0x200088ac

08011438 <__sfputc_r>:
 8011438:	6893      	ldr	r3, [r2, #8]
 801143a:	3b01      	subs	r3, #1
 801143c:	2b00      	cmp	r3, #0
 801143e:	b410      	push	{r4}
 8011440:	6093      	str	r3, [r2, #8]
 8011442:	da08      	bge.n	8011456 <__sfputc_r+0x1e>
 8011444:	6994      	ldr	r4, [r2, #24]
 8011446:	42a3      	cmp	r3, r4
 8011448:	db01      	blt.n	801144e <__sfputc_r+0x16>
 801144a:	290a      	cmp	r1, #10
 801144c:	d103      	bne.n	8011456 <__sfputc_r+0x1e>
 801144e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011452:	f000 bb33 	b.w	8011abc <__swbuf_r>
 8011456:	6813      	ldr	r3, [r2, #0]
 8011458:	1c58      	adds	r0, r3, #1
 801145a:	6010      	str	r0, [r2, #0]
 801145c:	7019      	strb	r1, [r3, #0]
 801145e:	4608      	mov	r0, r1
 8011460:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011464:	4770      	bx	lr

08011466 <__sfputs_r>:
 8011466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011468:	4606      	mov	r6, r0
 801146a:	460f      	mov	r7, r1
 801146c:	4614      	mov	r4, r2
 801146e:	18d5      	adds	r5, r2, r3
 8011470:	42ac      	cmp	r4, r5
 8011472:	d101      	bne.n	8011478 <__sfputs_r+0x12>
 8011474:	2000      	movs	r0, #0
 8011476:	e007      	b.n	8011488 <__sfputs_r+0x22>
 8011478:	f814 1b01 	ldrb.w	r1, [r4], #1
 801147c:	463a      	mov	r2, r7
 801147e:	4630      	mov	r0, r6
 8011480:	f7ff ffda 	bl	8011438 <__sfputc_r>
 8011484:	1c43      	adds	r3, r0, #1
 8011486:	d1f3      	bne.n	8011470 <__sfputs_r+0xa>
 8011488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801148c <_vfiprintf_r>:
 801148c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011490:	460d      	mov	r5, r1
 8011492:	b09d      	sub	sp, #116	; 0x74
 8011494:	4614      	mov	r4, r2
 8011496:	4698      	mov	r8, r3
 8011498:	4606      	mov	r6, r0
 801149a:	b118      	cbz	r0, 80114a4 <_vfiprintf_r+0x18>
 801149c:	6983      	ldr	r3, [r0, #24]
 801149e:	b90b      	cbnz	r3, 80114a4 <_vfiprintf_r+0x18>
 80114a0:	f7ff fe30 	bl	8011104 <__sinit>
 80114a4:	4b89      	ldr	r3, [pc, #548]	; (80116cc <_vfiprintf_r+0x240>)
 80114a6:	429d      	cmp	r5, r3
 80114a8:	d11b      	bne.n	80114e2 <_vfiprintf_r+0x56>
 80114aa:	6875      	ldr	r5, [r6, #4]
 80114ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80114ae:	07d9      	lsls	r1, r3, #31
 80114b0:	d405      	bmi.n	80114be <_vfiprintf_r+0x32>
 80114b2:	89ab      	ldrh	r3, [r5, #12]
 80114b4:	059a      	lsls	r2, r3, #22
 80114b6:	d402      	bmi.n	80114be <_vfiprintf_r+0x32>
 80114b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114ba:	f7ff fed3 	bl	8011264 <__retarget_lock_acquire_recursive>
 80114be:	89ab      	ldrh	r3, [r5, #12]
 80114c0:	071b      	lsls	r3, r3, #28
 80114c2:	d501      	bpl.n	80114c8 <_vfiprintf_r+0x3c>
 80114c4:	692b      	ldr	r3, [r5, #16]
 80114c6:	b9eb      	cbnz	r3, 8011504 <_vfiprintf_r+0x78>
 80114c8:	4629      	mov	r1, r5
 80114ca:	4630      	mov	r0, r6
 80114cc:	f000 fb5a 	bl	8011b84 <__swsetup_r>
 80114d0:	b1c0      	cbz	r0, 8011504 <_vfiprintf_r+0x78>
 80114d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80114d4:	07dc      	lsls	r4, r3, #31
 80114d6:	d50e      	bpl.n	80114f6 <_vfiprintf_r+0x6a>
 80114d8:	f04f 30ff 	mov.w	r0, #4294967295
 80114dc:	b01d      	add	sp, #116	; 0x74
 80114de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114e2:	4b7b      	ldr	r3, [pc, #492]	; (80116d0 <_vfiprintf_r+0x244>)
 80114e4:	429d      	cmp	r5, r3
 80114e6:	d101      	bne.n	80114ec <_vfiprintf_r+0x60>
 80114e8:	68b5      	ldr	r5, [r6, #8]
 80114ea:	e7df      	b.n	80114ac <_vfiprintf_r+0x20>
 80114ec:	4b79      	ldr	r3, [pc, #484]	; (80116d4 <_vfiprintf_r+0x248>)
 80114ee:	429d      	cmp	r5, r3
 80114f0:	bf08      	it	eq
 80114f2:	68f5      	ldreq	r5, [r6, #12]
 80114f4:	e7da      	b.n	80114ac <_vfiprintf_r+0x20>
 80114f6:	89ab      	ldrh	r3, [r5, #12]
 80114f8:	0598      	lsls	r0, r3, #22
 80114fa:	d4ed      	bmi.n	80114d8 <_vfiprintf_r+0x4c>
 80114fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114fe:	f7ff feb2 	bl	8011266 <__retarget_lock_release_recursive>
 8011502:	e7e9      	b.n	80114d8 <_vfiprintf_r+0x4c>
 8011504:	2300      	movs	r3, #0
 8011506:	9309      	str	r3, [sp, #36]	; 0x24
 8011508:	2320      	movs	r3, #32
 801150a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801150e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011512:	2330      	movs	r3, #48	; 0x30
 8011514:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80116d8 <_vfiprintf_r+0x24c>
 8011518:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801151c:	f04f 0901 	mov.w	r9, #1
 8011520:	4623      	mov	r3, r4
 8011522:	469a      	mov	sl, r3
 8011524:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011528:	b10a      	cbz	r2, 801152e <_vfiprintf_r+0xa2>
 801152a:	2a25      	cmp	r2, #37	; 0x25
 801152c:	d1f9      	bne.n	8011522 <_vfiprintf_r+0x96>
 801152e:	ebba 0b04 	subs.w	fp, sl, r4
 8011532:	d00b      	beq.n	801154c <_vfiprintf_r+0xc0>
 8011534:	465b      	mov	r3, fp
 8011536:	4622      	mov	r2, r4
 8011538:	4629      	mov	r1, r5
 801153a:	4630      	mov	r0, r6
 801153c:	f7ff ff93 	bl	8011466 <__sfputs_r>
 8011540:	3001      	adds	r0, #1
 8011542:	f000 80aa 	beq.w	801169a <_vfiprintf_r+0x20e>
 8011546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011548:	445a      	add	r2, fp
 801154a:	9209      	str	r2, [sp, #36]	; 0x24
 801154c:	f89a 3000 	ldrb.w	r3, [sl]
 8011550:	2b00      	cmp	r3, #0
 8011552:	f000 80a2 	beq.w	801169a <_vfiprintf_r+0x20e>
 8011556:	2300      	movs	r3, #0
 8011558:	f04f 32ff 	mov.w	r2, #4294967295
 801155c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011560:	f10a 0a01 	add.w	sl, sl, #1
 8011564:	9304      	str	r3, [sp, #16]
 8011566:	9307      	str	r3, [sp, #28]
 8011568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801156c:	931a      	str	r3, [sp, #104]	; 0x68
 801156e:	4654      	mov	r4, sl
 8011570:	2205      	movs	r2, #5
 8011572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011576:	4858      	ldr	r0, [pc, #352]	; (80116d8 <_vfiprintf_r+0x24c>)
 8011578:	f7ee fe52 	bl	8000220 <memchr>
 801157c:	9a04      	ldr	r2, [sp, #16]
 801157e:	b9d8      	cbnz	r0, 80115b8 <_vfiprintf_r+0x12c>
 8011580:	06d1      	lsls	r1, r2, #27
 8011582:	bf44      	itt	mi
 8011584:	2320      	movmi	r3, #32
 8011586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801158a:	0713      	lsls	r3, r2, #28
 801158c:	bf44      	itt	mi
 801158e:	232b      	movmi	r3, #43	; 0x2b
 8011590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011594:	f89a 3000 	ldrb.w	r3, [sl]
 8011598:	2b2a      	cmp	r3, #42	; 0x2a
 801159a:	d015      	beq.n	80115c8 <_vfiprintf_r+0x13c>
 801159c:	9a07      	ldr	r2, [sp, #28]
 801159e:	4654      	mov	r4, sl
 80115a0:	2000      	movs	r0, #0
 80115a2:	f04f 0c0a 	mov.w	ip, #10
 80115a6:	4621      	mov	r1, r4
 80115a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115ac:	3b30      	subs	r3, #48	; 0x30
 80115ae:	2b09      	cmp	r3, #9
 80115b0:	d94e      	bls.n	8011650 <_vfiprintf_r+0x1c4>
 80115b2:	b1b0      	cbz	r0, 80115e2 <_vfiprintf_r+0x156>
 80115b4:	9207      	str	r2, [sp, #28]
 80115b6:	e014      	b.n	80115e2 <_vfiprintf_r+0x156>
 80115b8:	eba0 0308 	sub.w	r3, r0, r8
 80115bc:	fa09 f303 	lsl.w	r3, r9, r3
 80115c0:	4313      	orrs	r3, r2
 80115c2:	9304      	str	r3, [sp, #16]
 80115c4:	46a2      	mov	sl, r4
 80115c6:	e7d2      	b.n	801156e <_vfiprintf_r+0xe2>
 80115c8:	9b03      	ldr	r3, [sp, #12]
 80115ca:	1d19      	adds	r1, r3, #4
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	9103      	str	r1, [sp, #12]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	bfbb      	ittet	lt
 80115d4:	425b      	neglt	r3, r3
 80115d6:	f042 0202 	orrlt.w	r2, r2, #2
 80115da:	9307      	strge	r3, [sp, #28]
 80115dc:	9307      	strlt	r3, [sp, #28]
 80115de:	bfb8      	it	lt
 80115e0:	9204      	strlt	r2, [sp, #16]
 80115e2:	7823      	ldrb	r3, [r4, #0]
 80115e4:	2b2e      	cmp	r3, #46	; 0x2e
 80115e6:	d10c      	bne.n	8011602 <_vfiprintf_r+0x176>
 80115e8:	7863      	ldrb	r3, [r4, #1]
 80115ea:	2b2a      	cmp	r3, #42	; 0x2a
 80115ec:	d135      	bne.n	801165a <_vfiprintf_r+0x1ce>
 80115ee:	9b03      	ldr	r3, [sp, #12]
 80115f0:	1d1a      	adds	r2, r3, #4
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	9203      	str	r2, [sp, #12]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	bfb8      	it	lt
 80115fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80115fe:	3402      	adds	r4, #2
 8011600:	9305      	str	r3, [sp, #20]
 8011602:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80116e8 <_vfiprintf_r+0x25c>
 8011606:	7821      	ldrb	r1, [r4, #0]
 8011608:	2203      	movs	r2, #3
 801160a:	4650      	mov	r0, sl
 801160c:	f7ee fe08 	bl	8000220 <memchr>
 8011610:	b140      	cbz	r0, 8011624 <_vfiprintf_r+0x198>
 8011612:	2340      	movs	r3, #64	; 0x40
 8011614:	eba0 000a 	sub.w	r0, r0, sl
 8011618:	fa03 f000 	lsl.w	r0, r3, r0
 801161c:	9b04      	ldr	r3, [sp, #16]
 801161e:	4303      	orrs	r3, r0
 8011620:	3401      	adds	r4, #1
 8011622:	9304      	str	r3, [sp, #16]
 8011624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011628:	482c      	ldr	r0, [pc, #176]	; (80116dc <_vfiprintf_r+0x250>)
 801162a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801162e:	2206      	movs	r2, #6
 8011630:	f7ee fdf6 	bl	8000220 <memchr>
 8011634:	2800      	cmp	r0, #0
 8011636:	d03f      	beq.n	80116b8 <_vfiprintf_r+0x22c>
 8011638:	4b29      	ldr	r3, [pc, #164]	; (80116e0 <_vfiprintf_r+0x254>)
 801163a:	bb1b      	cbnz	r3, 8011684 <_vfiprintf_r+0x1f8>
 801163c:	9b03      	ldr	r3, [sp, #12]
 801163e:	3307      	adds	r3, #7
 8011640:	f023 0307 	bic.w	r3, r3, #7
 8011644:	3308      	adds	r3, #8
 8011646:	9303      	str	r3, [sp, #12]
 8011648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801164a:	443b      	add	r3, r7
 801164c:	9309      	str	r3, [sp, #36]	; 0x24
 801164e:	e767      	b.n	8011520 <_vfiprintf_r+0x94>
 8011650:	fb0c 3202 	mla	r2, ip, r2, r3
 8011654:	460c      	mov	r4, r1
 8011656:	2001      	movs	r0, #1
 8011658:	e7a5      	b.n	80115a6 <_vfiprintf_r+0x11a>
 801165a:	2300      	movs	r3, #0
 801165c:	3401      	adds	r4, #1
 801165e:	9305      	str	r3, [sp, #20]
 8011660:	4619      	mov	r1, r3
 8011662:	f04f 0c0a 	mov.w	ip, #10
 8011666:	4620      	mov	r0, r4
 8011668:	f810 2b01 	ldrb.w	r2, [r0], #1
 801166c:	3a30      	subs	r2, #48	; 0x30
 801166e:	2a09      	cmp	r2, #9
 8011670:	d903      	bls.n	801167a <_vfiprintf_r+0x1ee>
 8011672:	2b00      	cmp	r3, #0
 8011674:	d0c5      	beq.n	8011602 <_vfiprintf_r+0x176>
 8011676:	9105      	str	r1, [sp, #20]
 8011678:	e7c3      	b.n	8011602 <_vfiprintf_r+0x176>
 801167a:	fb0c 2101 	mla	r1, ip, r1, r2
 801167e:	4604      	mov	r4, r0
 8011680:	2301      	movs	r3, #1
 8011682:	e7f0      	b.n	8011666 <_vfiprintf_r+0x1da>
 8011684:	ab03      	add	r3, sp, #12
 8011686:	9300      	str	r3, [sp, #0]
 8011688:	462a      	mov	r2, r5
 801168a:	4b16      	ldr	r3, [pc, #88]	; (80116e4 <_vfiprintf_r+0x258>)
 801168c:	a904      	add	r1, sp, #16
 801168e:	4630      	mov	r0, r6
 8011690:	f3af 8000 	nop.w
 8011694:	4607      	mov	r7, r0
 8011696:	1c78      	adds	r0, r7, #1
 8011698:	d1d6      	bne.n	8011648 <_vfiprintf_r+0x1bc>
 801169a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801169c:	07d9      	lsls	r1, r3, #31
 801169e:	d405      	bmi.n	80116ac <_vfiprintf_r+0x220>
 80116a0:	89ab      	ldrh	r3, [r5, #12]
 80116a2:	059a      	lsls	r2, r3, #22
 80116a4:	d402      	bmi.n	80116ac <_vfiprintf_r+0x220>
 80116a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116a8:	f7ff fddd 	bl	8011266 <__retarget_lock_release_recursive>
 80116ac:	89ab      	ldrh	r3, [r5, #12]
 80116ae:	065b      	lsls	r3, r3, #25
 80116b0:	f53f af12 	bmi.w	80114d8 <_vfiprintf_r+0x4c>
 80116b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80116b6:	e711      	b.n	80114dc <_vfiprintf_r+0x50>
 80116b8:	ab03      	add	r3, sp, #12
 80116ba:	9300      	str	r3, [sp, #0]
 80116bc:	462a      	mov	r2, r5
 80116be:	4b09      	ldr	r3, [pc, #36]	; (80116e4 <_vfiprintf_r+0x258>)
 80116c0:	a904      	add	r1, sp, #16
 80116c2:	4630      	mov	r0, r6
 80116c4:	f000 f880 	bl	80117c8 <_printf_i>
 80116c8:	e7e4      	b.n	8011694 <_vfiprintf_r+0x208>
 80116ca:	bf00      	nop
 80116cc:	08015410 	.word	0x08015410
 80116d0:	08015430 	.word	0x08015430
 80116d4:	080153f0 	.word	0x080153f0
 80116d8:	08015450 	.word	0x08015450
 80116dc:	0801545a 	.word	0x0801545a
 80116e0:	00000000 	.word	0x00000000
 80116e4:	08011467 	.word	0x08011467
 80116e8:	08015456 	.word	0x08015456

080116ec <_printf_common>:
 80116ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116f0:	4616      	mov	r6, r2
 80116f2:	4699      	mov	r9, r3
 80116f4:	688a      	ldr	r2, [r1, #8]
 80116f6:	690b      	ldr	r3, [r1, #16]
 80116f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80116fc:	4293      	cmp	r3, r2
 80116fe:	bfb8      	it	lt
 8011700:	4613      	movlt	r3, r2
 8011702:	6033      	str	r3, [r6, #0]
 8011704:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011708:	4607      	mov	r7, r0
 801170a:	460c      	mov	r4, r1
 801170c:	b10a      	cbz	r2, 8011712 <_printf_common+0x26>
 801170e:	3301      	adds	r3, #1
 8011710:	6033      	str	r3, [r6, #0]
 8011712:	6823      	ldr	r3, [r4, #0]
 8011714:	0699      	lsls	r1, r3, #26
 8011716:	bf42      	ittt	mi
 8011718:	6833      	ldrmi	r3, [r6, #0]
 801171a:	3302      	addmi	r3, #2
 801171c:	6033      	strmi	r3, [r6, #0]
 801171e:	6825      	ldr	r5, [r4, #0]
 8011720:	f015 0506 	ands.w	r5, r5, #6
 8011724:	d106      	bne.n	8011734 <_printf_common+0x48>
 8011726:	f104 0a19 	add.w	sl, r4, #25
 801172a:	68e3      	ldr	r3, [r4, #12]
 801172c:	6832      	ldr	r2, [r6, #0]
 801172e:	1a9b      	subs	r3, r3, r2
 8011730:	42ab      	cmp	r3, r5
 8011732:	dc26      	bgt.n	8011782 <_printf_common+0x96>
 8011734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011738:	1e13      	subs	r3, r2, #0
 801173a:	6822      	ldr	r2, [r4, #0]
 801173c:	bf18      	it	ne
 801173e:	2301      	movne	r3, #1
 8011740:	0692      	lsls	r2, r2, #26
 8011742:	d42b      	bmi.n	801179c <_printf_common+0xb0>
 8011744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011748:	4649      	mov	r1, r9
 801174a:	4638      	mov	r0, r7
 801174c:	47c0      	blx	r8
 801174e:	3001      	adds	r0, #1
 8011750:	d01e      	beq.n	8011790 <_printf_common+0xa4>
 8011752:	6823      	ldr	r3, [r4, #0]
 8011754:	68e5      	ldr	r5, [r4, #12]
 8011756:	6832      	ldr	r2, [r6, #0]
 8011758:	f003 0306 	and.w	r3, r3, #6
 801175c:	2b04      	cmp	r3, #4
 801175e:	bf08      	it	eq
 8011760:	1aad      	subeq	r5, r5, r2
 8011762:	68a3      	ldr	r3, [r4, #8]
 8011764:	6922      	ldr	r2, [r4, #16]
 8011766:	bf0c      	ite	eq
 8011768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801176c:	2500      	movne	r5, #0
 801176e:	4293      	cmp	r3, r2
 8011770:	bfc4      	itt	gt
 8011772:	1a9b      	subgt	r3, r3, r2
 8011774:	18ed      	addgt	r5, r5, r3
 8011776:	2600      	movs	r6, #0
 8011778:	341a      	adds	r4, #26
 801177a:	42b5      	cmp	r5, r6
 801177c:	d11a      	bne.n	80117b4 <_printf_common+0xc8>
 801177e:	2000      	movs	r0, #0
 8011780:	e008      	b.n	8011794 <_printf_common+0xa8>
 8011782:	2301      	movs	r3, #1
 8011784:	4652      	mov	r2, sl
 8011786:	4649      	mov	r1, r9
 8011788:	4638      	mov	r0, r7
 801178a:	47c0      	blx	r8
 801178c:	3001      	adds	r0, #1
 801178e:	d103      	bne.n	8011798 <_printf_common+0xac>
 8011790:	f04f 30ff 	mov.w	r0, #4294967295
 8011794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011798:	3501      	adds	r5, #1
 801179a:	e7c6      	b.n	801172a <_printf_common+0x3e>
 801179c:	18e1      	adds	r1, r4, r3
 801179e:	1c5a      	adds	r2, r3, #1
 80117a0:	2030      	movs	r0, #48	; 0x30
 80117a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80117a6:	4422      	add	r2, r4
 80117a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80117ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80117b0:	3302      	adds	r3, #2
 80117b2:	e7c7      	b.n	8011744 <_printf_common+0x58>
 80117b4:	2301      	movs	r3, #1
 80117b6:	4622      	mov	r2, r4
 80117b8:	4649      	mov	r1, r9
 80117ba:	4638      	mov	r0, r7
 80117bc:	47c0      	blx	r8
 80117be:	3001      	adds	r0, #1
 80117c0:	d0e6      	beq.n	8011790 <_printf_common+0xa4>
 80117c2:	3601      	adds	r6, #1
 80117c4:	e7d9      	b.n	801177a <_printf_common+0x8e>
	...

080117c8 <_printf_i>:
 80117c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80117cc:	7e0f      	ldrb	r7, [r1, #24]
 80117ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80117d0:	2f78      	cmp	r7, #120	; 0x78
 80117d2:	4691      	mov	r9, r2
 80117d4:	4680      	mov	r8, r0
 80117d6:	460c      	mov	r4, r1
 80117d8:	469a      	mov	sl, r3
 80117da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80117de:	d807      	bhi.n	80117f0 <_printf_i+0x28>
 80117e0:	2f62      	cmp	r7, #98	; 0x62
 80117e2:	d80a      	bhi.n	80117fa <_printf_i+0x32>
 80117e4:	2f00      	cmp	r7, #0
 80117e6:	f000 80d8 	beq.w	801199a <_printf_i+0x1d2>
 80117ea:	2f58      	cmp	r7, #88	; 0x58
 80117ec:	f000 80a3 	beq.w	8011936 <_printf_i+0x16e>
 80117f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80117f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80117f8:	e03a      	b.n	8011870 <_printf_i+0xa8>
 80117fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80117fe:	2b15      	cmp	r3, #21
 8011800:	d8f6      	bhi.n	80117f0 <_printf_i+0x28>
 8011802:	a101      	add	r1, pc, #4	; (adr r1, 8011808 <_printf_i+0x40>)
 8011804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011808:	08011861 	.word	0x08011861
 801180c:	08011875 	.word	0x08011875
 8011810:	080117f1 	.word	0x080117f1
 8011814:	080117f1 	.word	0x080117f1
 8011818:	080117f1 	.word	0x080117f1
 801181c:	080117f1 	.word	0x080117f1
 8011820:	08011875 	.word	0x08011875
 8011824:	080117f1 	.word	0x080117f1
 8011828:	080117f1 	.word	0x080117f1
 801182c:	080117f1 	.word	0x080117f1
 8011830:	080117f1 	.word	0x080117f1
 8011834:	08011981 	.word	0x08011981
 8011838:	080118a5 	.word	0x080118a5
 801183c:	08011963 	.word	0x08011963
 8011840:	080117f1 	.word	0x080117f1
 8011844:	080117f1 	.word	0x080117f1
 8011848:	080119a3 	.word	0x080119a3
 801184c:	080117f1 	.word	0x080117f1
 8011850:	080118a5 	.word	0x080118a5
 8011854:	080117f1 	.word	0x080117f1
 8011858:	080117f1 	.word	0x080117f1
 801185c:	0801196b 	.word	0x0801196b
 8011860:	682b      	ldr	r3, [r5, #0]
 8011862:	1d1a      	adds	r2, r3, #4
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	602a      	str	r2, [r5, #0]
 8011868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801186c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011870:	2301      	movs	r3, #1
 8011872:	e0a3      	b.n	80119bc <_printf_i+0x1f4>
 8011874:	6820      	ldr	r0, [r4, #0]
 8011876:	6829      	ldr	r1, [r5, #0]
 8011878:	0606      	lsls	r6, r0, #24
 801187a:	f101 0304 	add.w	r3, r1, #4
 801187e:	d50a      	bpl.n	8011896 <_printf_i+0xce>
 8011880:	680e      	ldr	r6, [r1, #0]
 8011882:	602b      	str	r3, [r5, #0]
 8011884:	2e00      	cmp	r6, #0
 8011886:	da03      	bge.n	8011890 <_printf_i+0xc8>
 8011888:	232d      	movs	r3, #45	; 0x2d
 801188a:	4276      	negs	r6, r6
 801188c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011890:	485e      	ldr	r0, [pc, #376]	; (8011a0c <_printf_i+0x244>)
 8011892:	230a      	movs	r3, #10
 8011894:	e019      	b.n	80118ca <_printf_i+0x102>
 8011896:	680e      	ldr	r6, [r1, #0]
 8011898:	602b      	str	r3, [r5, #0]
 801189a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801189e:	bf18      	it	ne
 80118a0:	b236      	sxthne	r6, r6
 80118a2:	e7ef      	b.n	8011884 <_printf_i+0xbc>
 80118a4:	682b      	ldr	r3, [r5, #0]
 80118a6:	6820      	ldr	r0, [r4, #0]
 80118a8:	1d19      	adds	r1, r3, #4
 80118aa:	6029      	str	r1, [r5, #0]
 80118ac:	0601      	lsls	r1, r0, #24
 80118ae:	d501      	bpl.n	80118b4 <_printf_i+0xec>
 80118b0:	681e      	ldr	r6, [r3, #0]
 80118b2:	e002      	b.n	80118ba <_printf_i+0xf2>
 80118b4:	0646      	lsls	r6, r0, #25
 80118b6:	d5fb      	bpl.n	80118b0 <_printf_i+0xe8>
 80118b8:	881e      	ldrh	r6, [r3, #0]
 80118ba:	4854      	ldr	r0, [pc, #336]	; (8011a0c <_printf_i+0x244>)
 80118bc:	2f6f      	cmp	r7, #111	; 0x6f
 80118be:	bf0c      	ite	eq
 80118c0:	2308      	moveq	r3, #8
 80118c2:	230a      	movne	r3, #10
 80118c4:	2100      	movs	r1, #0
 80118c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80118ca:	6865      	ldr	r5, [r4, #4]
 80118cc:	60a5      	str	r5, [r4, #8]
 80118ce:	2d00      	cmp	r5, #0
 80118d0:	bfa2      	ittt	ge
 80118d2:	6821      	ldrge	r1, [r4, #0]
 80118d4:	f021 0104 	bicge.w	r1, r1, #4
 80118d8:	6021      	strge	r1, [r4, #0]
 80118da:	b90e      	cbnz	r6, 80118e0 <_printf_i+0x118>
 80118dc:	2d00      	cmp	r5, #0
 80118de:	d04d      	beq.n	801197c <_printf_i+0x1b4>
 80118e0:	4615      	mov	r5, r2
 80118e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80118e6:	fb03 6711 	mls	r7, r3, r1, r6
 80118ea:	5dc7      	ldrb	r7, [r0, r7]
 80118ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80118f0:	4637      	mov	r7, r6
 80118f2:	42bb      	cmp	r3, r7
 80118f4:	460e      	mov	r6, r1
 80118f6:	d9f4      	bls.n	80118e2 <_printf_i+0x11a>
 80118f8:	2b08      	cmp	r3, #8
 80118fa:	d10b      	bne.n	8011914 <_printf_i+0x14c>
 80118fc:	6823      	ldr	r3, [r4, #0]
 80118fe:	07de      	lsls	r6, r3, #31
 8011900:	d508      	bpl.n	8011914 <_printf_i+0x14c>
 8011902:	6923      	ldr	r3, [r4, #16]
 8011904:	6861      	ldr	r1, [r4, #4]
 8011906:	4299      	cmp	r1, r3
 8011908:	bfde      	ittt	le
 801190a:	2330      	movle	r3, #48	; 0x30
 801190c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011910:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011914:	1b52      	subs	r2, r2, r5
 8011916:	6122      	str	r2, [r4, #16]
 8011918:	f8cd a000 	str.w	sl, [sp]
 801191c:	464b      	mov	r3, r9
 801191e:	aa03      	add	r2, sp, #12
 8011920:	4621      	mov	r1, r4
 8011922:	4640      	mov	r0, r8
 8011924:	f7ff fee2 	bl	80116ec <_printf_common>
 8011928:	3001      	adds	r0, #1
 801192a:	d14c      	bne.n	80119c6 <_printf_i+0x1fe>
 801192c:	f04f 30ff 	mov.w	r0, #4294967295
 8011930:	b004      	add	sp, #16
 8011932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011936:	4835      	ldr	r0, [pc, #212]	; (8011a0c <_printf_i+0x244>)
 8011938:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801193c:	6829      	ldr	r1, [r5, #0]
 801193e:	6823      	ldr	r3, [r4, #0]
 8011940:	f851 6b04 	ldr.w	r6, [r1], #4
 8011944:	6029      	str	r1, [r5, #0]
 8011946:	061d      	lsls	r5, r3, #24
 8011948:	d514      	bpl.n	8011974 <_printf_i+0x1ac>
 801194a:	07df      	lsls	r7, r3, #31
 801194c:	bf44      	itt	mi
 801194e:	f043 0320 	orrmi.w	r3, r3, #32
 8011952:	6023      	strmi	r3, [r4, #0]
 8011954:	b91e      	cbnz	r6, 801195e <_printf_i+0x196>
 8011956:	6823      	ldr	r3, [r4, #0]
 8011958:	f023 0320 	bic.w	r3, r3, #32
 801195c:	6023      	str	r3, [r4, #0]
 801195e:	2310      	movs	r3, #16
 8011960:	e7b0      	b.n	80118c4 <_printf_i+0xfc>
 8011962:	6823      	ldr	r3, [r4, #0]
 8011964:	f043 0320 	orr.w	r3, r3, #32
 8011968:	6023      	str	r3, [r4, #0]
 801196a:	2378      	movs	r3, #120	; 0x78
 801196c:	4828      	ldr	r0, [pc, #160]	; (8011a10 <_printf_i+0x248>)
 801196e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011972:	e7e3      	b.n	801193c <_printf_i+0x174>
 8011974:	0659      	lsls	r1, r3, #25
 8011976:	bf48      	it	mi
 8011978:	b2b6      	uxthmi	r6, r6
 801197a:	e7e6      	b.n	801194a <_printf_i+0x182>
 801197c:	4615      	mov	r5, r2
 801197e:	e7bb      	b.n	80118f8 <_printf_i+0x130>
 8011980:	682b      	ldr	r3, [r5, #0]
 8011982:	6826      	ldr	r6, [r4, #0]
 8011984:	6961      	ldr	r1, [r4, #20]
 8011986:	1d18      	adds	r0, r3, #4
 8011988:	6028      	str	r0, [r5, #0]
 801198a:	0635      	lsls	r5, r6, #24
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	d501      	bpl.n	8011994 <_printf_i+0x1cc>
 8011990:	6019      	str	r1, [r3, #0]
 8011992:	e002      	b.n	801199a <_printf_i+0x1d2>
 8011994:	0670      	lsls	r0, r6, #25
 8011996:	d5fb      	bpl.n	8011990 <_printf_i+0x1c8>
 8011998:	8019      	strh	r1, [r3, #0]
 801199a:	2300      	movs	r3, #0
 801199c:	6123      	str	r3, [r4, #16]
 801199e:	4615      	mov	r5, r2
 80119a0:	e7ba      	b.n	8011918 <_printf_i+0x150>
 80119a2:	682b      	ldr	r3, [r5, #0]
 80119a4:	1d1a      	adds	r2, r3, #4
 80119a6:	602a      	str	r2, [r5, #0]
 80119a8:	681d      	ldr	r5, [r3, #0]
 80119aa:	6862      	ldr	r2, [r4, #4]
 80119ac:	2100      	movs	r1, #0
 80119ae:	4628      	mov	r0, r5
 80119b0:	f7ee fc36 	bl	8000220 <memchr>
 80119b4:	b108      	cbz	r0, 80119ba <_printf_i+0x1f2>
 80119b6:	1b40      	subs	r0, r0, r5
 80119b8:	6060      	str	r0, [r4, #4]
 80119ba:	6863      	ldr	r3, [r4, #4]
 80119bc:	6123      	str	r3, [r4, #16]
 80119be:	2300      	movs	r3, #0
 80119c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119c4:	e7a8      	b.n	8011918 <_printf_i+0x150>
 80119c6:	6923      	ldr	r3, [r4, #16]
 80119c8:	462a      	mov	r2, r5
 80119ca:	4649      	mov	r1, r9
 80119cc:	4640      	mov	r0, r8
 80119ce:	47d0      	blx	sl
 80119d0:	3001      	adds	r0, #1
 80119d2:	d0ab      	beq.n	801192c <_printf_i+0x164>
 80119d4:	6823      	ldr	r3, [r4, #0]
 80119d6:	079b      	lsls	r3, r3, #30
 80119d8:	d413      	bmi.n	8011a02 <_printf_i+0x23a>
 80119da:	68e0      	ldr	r0, [r4, #12]
 80119dc:	9b03      	ldr	r3, [sp, #12]
 80119de:	4298      	cmp	r0, r3
 80119e0:	bfb8      	it	lt
 80119e2:	4618      	movlt	r0, r3
 80119e4:	e7a4      	b.n	8011930 <_printf_i+0x168>
 80119e6:	2301      	movs	r3, #1
 80119e8:	4632      	mov	r2, r6
 80119ea:	4649      	mov	r1, r9
 80119ec:	4640      	mov	r0, r8
 80119ee:	47d0      	blx	sl
 80119f0:	3001      	adds	r0, #1
 80119f2:	d09b      	beq.n	801192c <_printf_i+0x164>
 80119f4:	3501      	adds	r5, #1
 80119f6:	68e3      	ldr	r3, [r4, #12]
 80119f8:	9903      	ldr	r1, [sp, #12]
 80119fa:	1a5b      	subs	r3, r3, r1
 80119fc:	42ab      	cmp	r3, r5
 80119fe:	dcf2      	bgt.n	80119e6 <_printf_i+0x21e>
 8011a00:	e7eb      	b.n	80119da <_printf_i+0x212>
 8011a02:	2500      	movs	r5, #0
 8011a04:	f104 0619 	add.w	r6, r4, #25
 8011a08:	e7f5      	b.n	80119f6 <_printf_i+0x22e>
 8011a0a:	bf00      	nop
 8011a0c:	08015461 	.word	0x08015461
 8011a10:	08015472 	.word	0x08015472

08011a14 <_sbrk_r>:
 8011a14:	b538      	push	{r3, r4, r5, lr}
 8011a16:	4d06      	ldr	r5, [pc, #24]	; (8011a30 <_sbrk_r+0x1c>)
 8011a18:	2300      	movs	r3, #0
 8011a1a:	4604      	mov	r4, r0
 8011a1c:	4608      	mov	r0, r1
 8011a1e:	602b      	str	r3, [r5, #0]
 8011a20:	f7ef fa52 	bl	8000ec8 <_sbrk>
 8011a24:	1c43      	adds	r3, r0, #1
 8011a26:	d102      	bne.n	8011a2e <_sbrk_r+0x1a>
 8011a28:	682b      	ldr	r3, [r5, #0]
 8011a2a:	b103      	cbz	r3, 8011a2e <_sbrk_r+0x1a>
 8011a2c:	6023      	str	r3, [r4, #0]
 8011a2e:	bd38      	pop	{r3, r4, r5, pc}
 8011a30:	200088a4 	.word	0x200088a4

08011a34 <__sread>:
 8011a34:	b510      	push	{r4, lr}
 8011a36:	460c      	mov	r4, r1
 8011a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a3c:	f000 fa6e 	bl	8011f1c <_read_r>
 8011a40:	2800      	cmp	r0, #0
 8011a42:	bfab      	itete	ge
 8011a44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011a46:	89a3      	ldrhlt	r3, [r4, #12]
 8011a48:	181b      	addge	r3, r3, r0
 8011a4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011a4e:	bfac      	ite	ge
 8011a50:	6563      	strge	r3, [r4, #84]	; 0x54
 8011a52:	81a3      	strhlt	r3, [r4, #12]
 8011a54:	bd10      	pop	{r4, pc}

08011a56 <__swrite>:
 8011a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a5a:	461f      	mov	r7, r3
 8011a5c:	898b      	ldrh	r3, [r1, #12]
 8011a5e:	05db      	lsls	r3, r3, #23
 8011a60:	4605      	mov	r5, r0
 8011a62:	460c      	mov	r4, r1
 8011a64:	4616      	mov	r6, r2
 8011a66:	d505      	bpl.n	8011a74 <__swrite+0x1e>
 8011a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a6c:	2302      	movs	r3, #2
 8011a6e:	2200      	movs	r2, #0
 8011a70:	f000 f9d0 	bl	8011e14 <_lseek_r>
 8011a74:	89a3      	ldrh	r3, [r4, #12]
 8011a76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011a7e:	81a3      	strh	r3, [r4, #12]
 8011a80:	4632      	mov	r2, r6
 8011a82:	463b      	mov	r3, r7
 8011a84:	4628      	mov	r0, r5
 8011a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a8a:	f000 b869 	b.w	8011b60 <_write_r>

08011a8e <__sseek>:
 8011a8e:	b510      	push	{r4, lr}
 8011a90:	460c      	mov	r4, r1
 8011a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a96:	f000 f9bd 	bl	8011e14 <_lseek_r>
 8011a9a:	1c43      	adds	r3, r0, #1
 8011a9c:	89a3      	ldrh	r3, [r4, #12]
 8011a9e:	bf15      	itete	ne
 8011aa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8011aa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011aa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011aaa:	81a3      	strheq	r3, [r4, #12]
 8011aac:	bf18      	it	ne
 8011aae:	81a3      	strhne	r3, [r4, #12]
 8011ab0:	bd10      	pop	{r4, pc}

08011ab2 <__sclose>:
 8011ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ab6:	f000 b8db 	b.w	8011c70 <_close_r>
	...

08011abc <__swbuf_r>:
 8011abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011abe:	460e      	mov	r6, r1
 8011ac0:	4614      	mov	r4, r2
 8011ac2:	4605      	mov	r5, r0
 8011ac4:	b118      	cbz	r0, 8011ace <__swbuf_r+0x12>
 8011ac6:	6983      	ldr	r3, [r0, #24]
 8011ac8:	b90b      	cbnz	r3, 8011ace <__swbuf_r+0x12>
 8011aca:	f7ff fb1b 	bl	8011104 <__sinit>
 8011ace:	4b21      	ldr	r3, [pc, #132]	; (8011b54 <__swbuf_r+0x98>)
 8011ad0:	429c      	cmp	r4, r3
 8011ad2:	d12b      	bne.n	8011b2c <__swbuf_r+0x70>
 8011ad4:	686c      	ldr	r4, [r5, #4]
 8011ad6:	69a3      	ldr	r3, [r4, #24]
 8011ad8:	60a3      	str	r3, [r4, #8]
 8011ada:	89a3      	ldrh	r3, [r4, #12]
 8011adc:	071a      	lsls	r2, r3, #28
 8011ade:	d52f      	bpl.n	8011b40 <__swbuf_r+0x84>
 8011ae0:	6923      	ldr	r3, [r4, #16]
 8011ae2:	b36b      	cbz	r3, 8011b40 <__swbuf_r+0x84>
 8011ae4:	6923      	ldr	r3, [r4, #16]
 8011ae6:	6820      	ldr	r0, [r4, #0]
 8011ae8:	1ac0      	subs	r0, r0, r3
 8011aea:	6963      	ldr	r3, [r4, #20]
 8011aec:	b2f6      	uxtb	r6, r6
 8011aee:	4283      	cmp	r3, r0
 8011af0:	4637      	mov	r7, r6
 8011af2:	dc04      	bgt.n	8011afe <__swbuf_r+0x42>
 8011af4:	4621      	mov	r1, r4
 8011af6:	4628      	mov	r0, r5
 8011af8:	f000 f950 	bl	8011d9c <_fflush_r>
 8011afc:	bb30      	cbnz	r0, 8011b4c <__swbuf_r+0x90>
 8011afe:	68a3      	ldr	r3, [r4, #8]
 8011b00:	3b01      	subs	r3, #1
 8011b02:	60a3      	str	r3, [r4, #8]
 8011b04:	6823      	ldr	r3, [r4, #0]
 8011b06:	1c5a      	adds	r2, r3, #1
 8011b08:	6022      	str	r2, [r4, #0]
 8011b0a:	701e      	strb	r6, [r3, #0]
 8011b0c:	6963      	ldr	r3, [r4, #20]
 8011b0e:	3001      	adds	r0, #1
 8011b10:	4283      	cmp	r3, r0
 8011b12:	d004      	beq.n	8011b1e <__swbuf_r+0x62>
 8011b14:	89a3      	ldrh	r3, [r4, #12]
 8011b16:	07db      	lsls	r3, r3, #31
 8011b18:	d506      	bpl.n	8011b28 <__swbuf_r+0x6c>
 8011b1a:	2e0a      	cmp	r6, #10
 8011b1c:	d104      	bne.n	8011b28 <__swbuf_r+0x6c>
 8011b1e:	4621      	mov	r1, r4
 8011b20:	4628      	mov	r0, r5
 8011b22:	f000 f93b 	bl	8011d9c <_fflush_r>
 8011b26:	b988      	cbnz	r0, 8011b4c <__swbuf_r+0x90>
 8011b28:	4638      	mov	r0, r7
 8011b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b2c:	4b0a      	ldr	r3, [pc, #40]	; (8011b58 <__swbuf_r+0x9c>)
 8011b2e:	429c      	cmp	r4, r3
 8011b30:	d101      	bne.n	8011b36 <__swbuf_r+0x7a>
 8011b32:	68ac      	ldr	r4, [r5, #8]
 8011b34:	e7cf      	b.n	8011ad6 <__swbuf_r+0x1a>
 8011b36:	4b09      	ldr	r3, [pc, #36]	; (8011b5c <__swbuf_r+0xa0>)
 8011b38:	429c      	cmp	r4, r3
 8011b3a:	bf08      	it	eq
 8011b3c:	68ec      	ldreq	r4, [r5, #12]
 8011b3e:	e7ca      	b.n	8011ad6 <__swbuf_r+0x1a>
 8011b40:	4621      	mov	r1, r4
 8011b42:	4628      	mov	r0, r5
 8011b44:	f000 f81e 	bl	8011b84 <__swsetup_r>
 8011b48:	2800      	cmp	r0, #0
 8011b4a:	d0cb      	beq.n	8011ae4 <__swbuf_r+0x28>
 8011b4c:	f04f 37ff 	mov.w	r7, #4294967295
 8011b50:	e7ea      	b.n	8011b28 <__swbuf_r+0x6c>
 8011b52:	bf00      	nop
 8011b54:	08015410 	.word	0x08015410
 8011b58:	08015430 	.word	0x08015430
 8011b5c:	080153f0 	.word	0x080153f0

08011b60 <_write_r>:
 8011b60:	b538      	push	{r3, r4, r5, lr}
 8011b62:	4d07      	ldr	r5, [pc, #28]	; (8011b80 <_write_r+0x20>)
 8011b64:	4604      	mov	r4, r0
 8011b66:	4608      	mov	r0, r1
 8011b68:	4611      	mov	r1, r2
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	602a      	str	r2, [r5, #0]
 8011b6e:	461a      	mov	r2, r3
 8011b70:	f7ef f959 	bl	8000e26 <_write>
 8011b74:	1c43      	adds	r3, r0, #1
 8011b76:	d102      	bne.n	8011b7e <_write_r+0x1e>
 8011b78:	682b      	ldr	r3, [r5, #0]
 8011b7a:	b103      	cbz	r3, 8011b7e <_write_r+0x1e>
 8011b7c:	6023      	str	r3, [r4, #0]
 8011b7e:	bd38      	pop	{r3, r4, r5, pc}
 8011b80:	200088a4 	.word	0x200088a4

08011b84 <__swsetup_r>:
 8011b84:	4b32      	ldr	r3, [pc, #200]	; (8011c50 <__swsetup_r+0xcc>)
 8011b86:	b570      	push	{r4, r5, r6, lr}
 8011b88:	681d      	ldr	r5, [r3, #0]
 8011b8a:	4606      	mov	r6, r0
 8011b8c:	460c      	mov	r4, r1
 8011b8e:	b125      	cbz	r5, 8011b9a <__swsetup_r+0x16>
 8011b90:	69ab      	ldr	r3, [r5, #24]
 8011b92:	b913      	cbnz	r3, 8011b9a <__swsetup_r+0x16>
 8011b94:	4628      	mov	r0, r5
 8011b96:	f7ff fab5 	bl	8011104 <__sinit>
 8011b9a:	4b2e      	ldr	r3, [pc, #184]	; (8011c54 <__swsetup_r+0xd0>)
 8011b9c:	429c      	cmp	r4, r3
 8011b9e:	d10f      	bne.n	8011bc0 <__swsetup_r+0x3c>
 8011ba0:	686c      	ldr	r4, [r5, #4]
 8011ba2:	89a3      	ldrh	r3, [r4, #12]
 8011ba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011ba8:	0719      	lsls	r1, r3, #28
 8011baa:	d42c      	bmi.n	8011c06 <__swsetup_r+0x82>
 8011bac:	06dd      	lsls	r5, r3, #27
 8011bae:	d411      	bmi.n	8011bd4 <__swsetup_r+0x50>
 8011bb0:	2309      	movs	r3, #9
 8011bb2:	6033      	str	r3, [r6, #0]
 8011bb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011bb8:	81a3      	strh	r3, [r4, #12]
 8011bba:	f04f 30ff 	mov.w	r0, #4294967295
 8011bbe:	e03e      	b.n	8011c3e <__swsetup_r+0xba>
 8011bc0:	4b25      	ldr	r3, [pc, #148]	; (8011c58 <__swsetup_r+0xd4>)
 8011bc2:	429c      	cmp	r4, r3
 8011bc4:	d101      	bne.n	8011bca <__swsetup_r+0x46>
 8011bc6:	68ac      	ldr	r4, [r5, #8]
 8011bc8:	e7eb      	b.n	8011ba2 <__swsetup_r+0x1e>
 8011bca:	4b24      	ldr	r3, [pc, #144]	; (8011c5c <__swsetup_r+0xd8>)
 8011bcc:	429c      	cmp	r4, r3
 8011bce:	bf08      	it	eq
 8011bd0:	68ec      	ldreq	r4, [r5, #12]
 8011bd2:	e7e6      	b.n	8011ba2 <__swsetup_r+0x1e>
 8011bd4:	0758      	lsls	r0, r3, #29
 8011bd6:	d512      	bpl.n	8011bfe <__swsetup_r+0x7a>
 8011bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011bda:	b141      	cbz	r1, 8011bee <__swsetup_r+0x6a>
 8011bdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011be0:	4299      	cmp	r1, r3
 8011be2:	d002      	beq.n	8011bea <__swsetup_r+0x66>
 8011be4:	4630      	mov	r0, r6
 8011be6:	f7ff fb47 	bl	8011278 <_free_r>
 8011bea:	2300      	movs	r3, #0
 8011bec:	6363      	str	r3, [r4, #52]	; 0x34
 8011bee:	89a3      	ldrh	r3, [r4, #12]
 8011bf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011bf4:	81a3      	strh	r3, [r4, #12]
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	6063      	str	r3, [r4, #4]
 8011bfa:	6923      	ldr	r3, [r4, #16]
 8011bfc:	6023      	str	r3, [r4, #0]
 8011bfe:	89a3      	ldrh	r3, [r4, #12]
 8011c00:	f043 0308 	orr.w	r3, r3, #8
 8011c04:	81a3      	strh	r3, [r4, #12]
 8011c06:	6923      	ldr	r3, [r4, #16]
 8011c08:	b94b      	cbnz	r3, 8011c1e <__swsetup_r+0x9a>
 8011c0a:	89a3      	ldrh	r3, [r4, #12]
 8011c0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c14:	d003      	beq.n	8011c1e <__swsetup_r+0x9a>
 8011c16:	4621      	mov	r1, r4
 8011c18:	4630      	mov	r0, r6
 8011c1a:	f000 f933 	bl	8011e84 <__smakebuf_r>
 8011c1e:	89a0      	ldrh	r0, [r4, #12]
 8011c20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011c24:	f010 0301 	ands.w	r3, r0, #1
 8011c28:	d00a      	beq.n	8011c40 <__swsetup_r+0xbc>
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	60a3      	str	r3, [r4, #8]
 8011c2e:	6963      	ldr	r3, [r4, #20]
 8011c30:	425b      	negs	r3, r3
 8011c32:	61a3      	str	r3, [r4, #24]
 8011c34:	6923      	ldr	r3, [r4, #16]
 8011c36:	b943      	cbnz	r3, 8011c4a <__swsetup_r+0xc6>
 8011c38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011c3c:	d1ba      	bne.n	8011bb4 <__swsetup_r+0x30>
 8011c3e:	bd70      	pop	{r4, r5, r6, pc}
 8011c40:	0781      	lsls	r1, r0, #30
 8011c42:	bf58      	it	pl
 8011c44:	6963      	ldrpl	r3, [r4, #20]
 8011c46:	60a3      	str	r3, [r4, #8]
 8011c48:	e7f4      	b.n	8011c34 <__swsetup_r+0xb0>
 8011c4a:	2000      	movs	r0, #0
 8011c4c:	e7f7      	b.n	8011c3e <__swsetup_r+0xba>
 8011c4e:	bf00      	nop
 8011c50:	2000007c 	.word	0x2000007c
 8011c54:	08015410 	.word	0x08015410
 8011c58:	08015430 	.word	0x08015430
 8011c5c:	080153f0 	.word	0x080153f0

08011c60 <abort>:
 8011c60:	b508      	push	{r3, lr}
 8011c62:	2006      	movs	r0, #6
 8011c64:	f000 f994 	bl	8011f90 <raise>
 8011c68:	2001      	movs	r0, #1
 8011c6a:	f7ef f8b5 	bl	8000dd8 <_exit>
	...

08011c70 <_close_r>:
 8011c70:	b538      	push	{r3, r4, r5, lr}
 8011c72:	4d06      	ldr	r5, [pc, #24]	; (8011c8c <_close_r+0x1c>)
 8011c74:	2300      	movs	r3, #0
 8011c76:	4604      	mov	r4, r0
 8011c78:	4608      	mov	r0, r1
 8011c7a:	602b      	str	r3, [r5, #0]
 8011c7c:	f7ef f8ef 	bl	8000e5e <_close>
 8011c80:	1c43      	adds	r3, r0, #1
 8011c82:	d102      	bne.n	8011c8a <_close_r+0x1a>
 8011c84:	682b      	ldr	r3, [r5, #0]
 8011c86:	b103      	cbz	r3, 8011c8a <_close_r+0x1a>
 8011c88:	6023      	str	r3, [r4, #0]
 8011c8a:	bd38      	pop	{r3, r4, r5, pc}
 8011c8c:	200088a4 	.word	0x200088a4

08011c90 <__sflush_r>:
 8011c90:	898a      	ldrh	r2, [r1, #12]
 8011c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c96:	4605      	mov	r5, r0
 8011c98:	0710      	lsls	r0, r2, #28
 8011c9a:	460c      	mov	r4, r1
 8011c9c:	d458      	bmi.n	8011d50 <__sflush_r+0xc0>
 8011c9e:	684b      	ldr	r3, [r1, #4]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	dc05      	bgt.n	8011cb0 <__sflush_r+0x20>
 8011ca4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	dc02      	bgt.n	8011cb0 <__sflush_r+0x20>
 8011caa:	2000      	movs	r0, #0
 8011cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011cb2:	2e00      	cmp	r6, #0
 8011cb4:	d0f9      	beq.n	8011caa <__sflush_r+0x1a>
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011cbc:	682f      	ldr	r7, [r5, #0]
 8011cbe:	602b      	str	r3, [r5, #0]
 8011cc0:	d032      	beq.n	8011d28 <__sflush_r+0x98>
 8011cc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011cc4:	89a3      	ldrh	r3, [r4, #12]
 8011cc6:	075a      	lsls	r2, r3, #29
 8011cc8:	d505      	bpl.n	8011cd6 <__sflush_r+0x46>
 8011cca:	6863      	ldr	r3, [r4, #4]
 8011ccc:	1ac0      	subs	r0, r0, r3
 8011cce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011cd0:	b10b      	cbz	r3, 8011cd6 <__sflush_r+0x46>
 8011cd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011cd4:	1ac0      	subs	r0, r0, r3
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	4602      	mov	r2, r0
 8011cda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011cdc:	6a21      	ldr	r1, [r4, #32]
 8011cde:	4628      	mov	r0, r5
 8011ce0:	47b0      	blx	r6
 8011ce2:	1c43      	adds	r3, r0, #1
 8011ce4:	89a3      	ldrh	r3, [r4, #12]
 8011ce6:	d106      	bne.n	8011cf6 <__sflush_r+0x66>
 8011ce8:	6829      	ldr	r1, [r5, #0]
 8011cea:	291d      	cmp	r1, #29
 8011cec:	d82c      	bhi.n	8011d48 <__sflush_r+0xb8>
 8011cee:	4a2a      	ldr	r2, [pc, #168]	; (8011d98 <__sflush_r+0x108>)
 8011cf0:	40ca      	lsrs	r2, r1
 8011cf2:	07d6      	lsls	r6, r2, #31
 8011cf4:	d528      	bpl.n	8011d48 <__sflush_r+0xb8>
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	6062      	str	r2, [r4, #4]
 8011cfa:	04d9      	lsls	r1, r3, #19
 8011cfc:	6922      	ldr	r2, [r4, #16]
 8011cfe:	6022      	str	r2, [r4, #0]
 8011d00:	d504      	bpl.n	8011d0c <__sflush_r+0x7c>
 8011d02:	1c42      	adds	r2, r0, #1
 8011d04:	d101      	bne.n	8011d0a <__sflush_r+0x7a>
 8011d06:	682b      	ldr	r3, [r5, #0]
 8011d08:	b903      	cbnz	r3, 8011d0c <__sflush_r+0x7c>
 8011d0a:	6560      	str	r0, [r4, #84]	; 0x54
 8011d0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d0e:	602f      	str	r7, [r5, #0]
 8011d10:	2900      	cmp	r1, #0
 8011d12:	d0ca      	beq.n	8011caa <__sflush_r+0x1a>
 8011d14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d18:	4299      	cmp	r1, r3
 8011d1a:	d002      	beq.n	8011d22 <__sflush_r+0x92>
 8011d1c:	4628      	mov	r0, r5
 8011d1e:	f7ff faab 	bl	8011278 <_free_r>
 8011d22:	2000      	movs	r0, #0
 8011d24:	6360      	str	r0, [r4, #52]	; 0x34
 8011d26:	e7c1      	b.n	8011cac <__sflush_r+0x1c>
 8011d28:	6a21      	ldr	r1, [r4, #32]
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	4628      	mov	r0, r5
 8011d2e:	47b0      	blx	r6
 8011d30:	1c41      	adds	r1, r0, #1
 8011d32:	d1c7      	bne.n	8011cc4 <__sflush_r+0x34>
 8011d34:	682b      	ldr	r3, [r5, #0]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d0c4      	beq.n	8011cc4 <__sflush_r+0x34>
 8011d3a:	2b1d      	cmp	r3, #29
 8011d3c:	d001      	beq.n	8011d42 <__sflush_r+0xb2>
 8011d3e:	2b16      	cmp	r3, #22
 8011d40:	d101      	bne.n	8011d46 <__sflush_r+0xb6>
 8011d42:	602f      	str	r7, [r5, #0]
 8011d44:	e7b1      	b.n	8011caa <__sflush_r+0x1a>
 8011d46:	89a3      	ldrh	r3, [r4, #12]
 8011d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d4c:	81a3      	strh	r3, [r4, #12]
 8011d4e:	e7ad      	b.n	8011cac <__sflush_r+0x1c>
 8011d50:	690f      	ldr	r7, [r1, #16]
 8011d52:	2f00      	cmp	r7, #0
 8011d54:	d0a9      	beq.n	8011caa <__sflush_r+0x1a>
 8011d56:	0793      	lsls	r3, r2, #30
 8011d58:	680e      	ldr	r6, [r1, #0]
 8011d5a:	bf08      	it	eq
 8011d5c:	694b      	ldreq	r3, [r1, #20]
 8011d5e:	600f      	str	r7, [r1, #0]
 8011d60:	bf18      	it	ne
 8011d62:	2300      	movne	r3, #0
 8011d64:	eba6 0807 	sub.w	r8, r6, r7
 8011d68:	608b      	str	r3, [r1, #8]
 8011d6a:	f1b8 0f00 	cmp.w	r8, #0
 8011d6e:	dd9c      	ble.n	8011caa <__sflush_r+0x1a>
 8011d70:	6a21      	ldr	r1, [r4, #32]
 8011d72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011d74:	4643      	mov	r3, r8
 8011d76:	463a      	mov	r2, r7
 8011d78:	4628      	mov	r0, r5
 8011d7a:	47b0      	blx	r6
 8011d7c:	2800      	cmp	r0, #0
 8011d7e:	dc06      	bgt.n	8011d8e <__sflush_r+0xfe>
 8011d80:	89a3      	ldrh	r3, [r4, #12]
 8011d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d86:	81a3      	strh	r3, [r4, #12]
 8011d88:	f04f 30ff 	mov.w	r0, #4294967295
 8011d8c:	e78e      	b.n	8011cac <__sflush_r+0x1c>
 8011d8e:	4407      	add	r7, r0
 8011d90:	eba8 0800 	sub.w	r8, r8, r0
 8011d94:	e7e9      	b.n	8011d6a <__sflush_r+0xda>
 8011d96:	bf00      	nop
 8011d98:	20400001 	.word	0x20400001

08011d9c <_fflush_r>:
 8011d9c:	b538      	push	{r3, r4, r5, lr}
 8011d9e:	690b      	ldr	r3, [r1, #16]
 8011da0:	4605      	mov	r5, r0
 8011da2:	460c      	mov	r4, r1
 8011da4:	b913      	cbnz	r3, 8011dac <_fflush_r+0x10>
 8011da6:	2500      	movs	r5, #0
 8011da8:	4628      	mov	r0, r5
 8011daa:	bd38      	pop	{r3, r4, r5, pc}
 8011dac:	b118      	cbz	r0, 8011db6 <_fflush_r+0x1a>
 8011dae:	6983      	ldr	r3, [r0, #24]
 8011db0:	b90b      	cbnz	r3, 8011db6 <_fflush_r+0x1a>
 8011db2:	f7ff f9a7 	bl	8011104 <__sinit>
 8011db6:	4b14      	ldr	r3, [pc, #80]	; (8011e08 <_fflush_r+0x6c>)
 8011db8:	429c      	cmp	r4, r3
 8011dba:	d11b      	bne.n	8011df4 <_fflush_r+0x58>
 8011dbc:	686c      	ldr	r4, [r5, #4]
 8011dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d0ef      	beq.n	8011da6 <_fflush_r+0xa>
 8011dc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011dc8:	07d0      	lsls	r0, r2, #31
 8011dca:	d404      	bmi.n	8011dd6 <_fflush_r+0x3a>
 8011dcc:	0599      	lsls	r1, r3, #22
 8011dce:	d402      	bmi.n	8011dd6 <_fflush_r+0x3a>
 8011dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011dd2:	f7ff fa47 	bl	8011264 <__retarget_lock_acquire_recursive>
 8011dd6:	4628      	mov	r0, r5
 8011dd8:	4621      	mov	r1, r4
 8011dda:	f7ff ff59 	bl	8011c90 <__sflush_r>
 8011dde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011de0:	07da      	lsls	r2, r3, #31
 8011de2:	4605      	mov	r5, r0
 8011de4:	d4e0      	bmi.n	8011da8 <_fflush_r+0xc>
 8011de6:	89a3      	ldrh	r3, [r4, #12]
 8011de8:	059b      	lsls	r3, r3, #22
 8011dea:	d4dd      	bmi.n	8011da8 <_fflush_r+0xc>
 8011dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011dee:	f7ff fa3a 	bl	8011266 <__retarget_lock_release_recursive>
 8011df2:	e7d9      	b.n	8011da8 <_fflush_r+0xc>
 8011df4:	4b05      	ldr	r3, [pc, #20]	; (8011e0c <_fflush_r+0x70>)
 8011df6:	429c      	cmp	r4, r3
 8011df8:	d101      	bne.n	8011dfe <_fflush_r+0x62>
 8011dfa:	68ac      	ldr	r4, [r5, #8]
 8011dfc:	e7df      	b.n	8011dbe <_fflush_r+0x22>
 8011dfe:	4b04      	ldr	r3, [pc, #16]	; (8011e10 <_fflush_r+0x74>)
 8011e00:	429c      	cmp	r4, r3
 8011e02:	bf08      	it	eq
 8011e04:	68ec      	ldreq	r4, [r5, #12]
 8011e06:	e7da      	b.n	8011dbe <_fflush_r+0x22>
 8011e08:	08015410 	.word	0x08015410
 8011e0c:	08015430 	.word	0x08015430
 8011e10:	080153f0 	.word	0x080153f0

08011e14 <_lseek_r>:
 8011e14:	b538      	push	{r3, r4, r5, lr}
 8011e16:	4d07      	ldr	r5, [pc, #28]	; (8011e34 <_lseek_r+0x20>)
 8011e18:	4604      	mov	r4, r0
 8011e1a:	4608      	mov	r0, r1
 8011e1c:	4611      	mov	r1, r2
 8011e1e:	2200      	movs	r2, #0
 8011e20:	602a      	str	r2, [r5, #0]
 8011e22:	461a      	mov	r2, r3
 8011e24:	f7ef f842 	bl	8000eac <_lseek>
 8011e28:	1c43      	adds	r3, r0, #1
 8011e2a:	d102      	bne.n	8011e32 <_lseek_r+0x1e>
 8011e2c:	682b      	ldr	r3, [r5, #0]
 8011e2e:	b103      	cbz	r3, 8011e32 <_lseek_r+0x1e>
 8011e30:	6023      	str	r3, [r4, #0]
 8011e32:	bd38      	pop	{r3, r4, r5, pc}
 8011e34:	200088a4 	.word	0x200088a4

08011e38 <__swhatbuf_r>:
 8011e38:	b570      	push	{r4, r5, r6, lr}
 8011e3a:	460e      	mov	r6, r1
 8011e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e40:	2900      	cmp	r1, #0
 8011e42:	b096      	sub	sp, #88	; 0x58
 8011e44:	4614      	mov	r4, r2
 8011e46:	461d      	mov	r5, r3
 8011e48:	da08      	bge.n	8011e5c <__swhatbuf_r+0x24>
 8011e4a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011e4e:	2200      	movs	r2, #0
 8011e50:	602a      	str	r2, [r5, #0]
 8011e52:	061a      	lsls	r2, r3, #24
 8011e54:	d410      	bmi.n	8011e78 <__swhatbuf_r+0x40>
 8011e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e5a:	e00e      	b.n	8011e7a <__swhatbuf_r+0x42>
 8011e5c:	466a      	mov	r2, sp
 8011e5e:	f000 f8b3 	bl	8011fc8 <_fstat_r>
 8011e62:	2800      	cmp	r0, #0
 8011e64:	dbf1      	blt.n	8011e4a <__swhatbuf_r+0x12>
 8011e66:	9a01      	ldr	r2, [sp, #4]
 8011e68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011e6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011e70:	425a      	negs	r2, r3
 8011e72:	415a      	adcs	r2, r3
 8011e74:	602a      	str	r2, [r5, #0]
 8011e76:	e7ee      	b.n	8011e56 <__swhatbuf_r+0x1e>
 8011e78:	2340      	movs	r3, #64	; 0x40
 8011e7a:	2000      	movs	r0, #0
 8011e7c:	6023      	str	r3, [r4, #0]
 8011e7e:	b016      	add	sp, #88	; 0x58
 8011e80:	bd70      	pop	{r4, r5, r6, pc}
	...

08011e84 <__smakebuf_r>:
 8011e84:	898b      	ldrh	r3, [r1, #12]
 8011e86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e88:	079d      	lsls	r5, r3, #30
 8011e8a:	4606      	mov	r6, r0
 8011e8c:	460c      	mov	r4, r1
 8011e8e:	d507      	bpl.n	8011ea0 <__smakebuf_r+0x1c>
 8011e90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011e94:	6023      	str	r3, [r4, #0]
 8011e96:	6123      	str	r3, [r4, #16]
 8011e98:	2301      	movs	r3, #1
 8011e9a:	6163      	str	r3, [r4, #20]
 8011e9c:	b002      	add	sp, #8
 8011e9e:	bd70      	pop	{r4, r5, r6, pc}
 8011ea0:	ab01      	add	r3, sp, #4
 8011ea2:	466a      	mov	r2, sp
 8011ea4:	f7ff ffc8 	bl	8011e38 <__swhatbuf_r>
 8011ea8:	9900      	ldr	r1, [sp, #0]
 8011eaa:	4605      	mov	r5, r0
 8011eac:	4630      	mov	r0, r6
 8011eae:	f7ff fa4f 	bl	8011350 <_malloc_r>
 8011eb2:	b948      	cbnz	r0, 8011ec8 <__smakebuf_r+0x44>
 8011eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011eb8:	059a      	lsls	r2, r3, #22
 8011eba:	d4ef      	bmi.n	8011e9c <__smakebuf_r+0x18>
 8011ebc:	f023 0303 	bic.w	r3, r3, #3
 8011ec0:	f043 0302 	orr.w	r3, r3, #2
 8011ec4:	81a3      	strh	r3, [r4, #12]
 8011ec6:	e7e3      	b.n	8011e90 <__smakebuf_r+0xc>
 8011ec8:	4b0d      	ldr	r3, [pc, #52]	; (8011f00 <__smakebuf_r+0x7c>)
 8011eca:	62b3      	str	r3, [r6, #40]	; 0x28
 8011ecc:	89a3      	ldrh	r3, [r4, #12]
 8011ece:	6020      	str	r0, [r4, #0]
 8011ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ed4:	81a3      	strh	r3, [r4, #12]
 8011ed6:	9b00      	ldr	r3, [sp, #0]
 8011ed8:	6163      	str	r3, [r4, #20]
 8011eda:	9b01      	ldr	r3, [sp, #4]
 8011edc:	6120      	str	r0, [r4, #16]
 8011ede:	b15b      	cbz	r3, 8011ef8 <__smakebuf_r+0x74>
 8011ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ee4:	4630      	mov	r0, r6
 8011ee6:	f000 f881 	bl	8011fec <_isatty_r>
 8011eea:	b128      	cbz	r0, 8011ef8 <__smakebuf_r+0x74>
 8011eec:	89a3      	ldrh	r3, [r4, #12]
 8011eee:	f023 0303 	bic.w	r3, r3, #3
 8011ef2:	f043 0301 	orr.w	r3, r3, #1
 8011ef6:	81a3      	strh	r3, [r4, #12]
 8011ef8:	89a0      	ldrh	r0, [r4, #12]
 8011efa:	4305      	orrs	r5, r0
 8011efc:	81a5      	strh	r5, [r4, #12]
 8011efe:	e7cd      	b.n	8011e9c <__smakebuf_r+0x18>
 8011f00:	0801109d 	.word	0x0801109d

08011f04 <__malloc_lock>:
 8011f04:	4801      	ldr	r0, [pc, #4]	; (8011f0c <__malloc_lock+0x8>)
 8011f06:	f7ff b9ad 	b.w	8011264 <__retarget_lock_acquire_recursive>
 8011f0a:	bf00      	nop
 8011f0c:	200088a8 	.word	0x200088a8

08011f10 <__malloc_unlock>:
 8011f10:	4801      	ldr	r0, [pc, #4]	; (8011f18 <__malloc_unlock+0x8>)
 8011f12:	f7ff b9a8 	b.w	8011266 <__retarget_lock_release_recursive>
 8011f16:	bf00      	nop
 8011f18:	200088a8 	.word	0x200088a8

08011f1c <_read_r>:
 8011f1c:	b538      	push	{r3, r4, r5, lr}
 8011f1e:	4d07      	ldr	r5, [pc, #28]	; (8011f3c <_read_r+0x20>)
 8011f20:	4604      	mov	r4, r0
 8011f22:	4608      	mov	r0, r1
 8011f24:	4611      	mov	r1, r2
 8011f26:	2200      	movs	r2, #0
 8011f28:	602a      	str	r2, [r5, #0]
 8011f2a:	461a      	mov	r2, r3
 8011f2c:	f7ee ff5e 	bl	8000dec <_read>
 8011f30:	1c43      	adds	r3, r0, #1
 8011f32:	d102      	bne.n	8011f3a <_read_r+0x1e>
 8011f34:	682b      	ldr	r3, [r5, #0]
 8011f36:	b103      	cbz	r3, 8011f3a <_read_r+0x1e>
 8011f38:	6023      	str	r3, [r4, #0]
 8011f3a:	bd38      	pop	{r3, r4, r5, pc}
 8011f3c:	200088a4 	.word	0x200088a4

08011f40 <_raise_r>:
 8011f40:	291f      	cmp	r1, #31
 8011f42:	b538      	push	{r3, r4, r5, lr}
 8011f44:	4604      	mov	r4, r0
 8011f46:	460d      	mov	r5, r1
 8011f48:	d904      	bls.n	8011f54 <_raise_r+0x14>
 8011f4a:	2316      	movs	r3, #22
 8011f4c:	6003      	str	r3, [r0, #0]
 8011f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8011f52:	bd38      	pop	{r3, r4, r5, pc}
 8011f54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011f56:	b112      	cbz	r2, 8011f5e <_raise_r+0x1e>
 8011f58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011f5c:	b94b      	cbnz	r3, 8011f72 <_raise_r+0x32>
 8011f5e:	4620      	mov	r0, r4
 8011f60:	f000 f830 	bl	8011fc4 <_getpid_r>
 8011f64:	462a      	mov	r2, r5
 8011f66:	4601      	mov	r1, r0
 8011f68:	4620      	mov	r0, r4
 8011f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f6e:	f000 b817 	b.w	8011fa0 <_kill_r>
 8011f72:	2b01      	cmp	r3, #1
 8011f74:	d00a      	beq.n	8011f8c <_raise_r+0x4c>
 8011f76:	1c59      	adds	r1, r3, #1
 8011f78:	d103      	bne.n	8011f82 <_raise_r+0x42>
 8011f7a:	2316      	movs	r3, #22
 8011f7c:	6003      	str	r3, [r0, #0]
 8011f7e:	2001      	movs	r0, #1
 8011f80:	e7e7      	b.n	8011f52 <_raise_r+0x12>
 8011f82:	2400      	movs	r4, #0
 8011f84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011f88:	4628      	mov	r0, r5
 8011f8a:	4798      	blx	r3
 8011f8c:	2000      	movs	r0, #0
 8011f8e:	e7e0      	b.n	8011f52 <_raise_r+0x12>

08011f90 <raise>:
 8011f90:	4b02      	ldr	r3, [pc, #8]	; (8011f9c <raise+0xc>)
 8011f92:	4601      	mov	r1, r0
 8011f94:	6818      	ldr	r0, [r3, #0]
 8011f96:	f7ff bfd3 	b.w	8011f40 <_raise_r>
 8011f9a:	bf00      	nop
 8011f9c:	2000007c 	.word	0x2000007c

08011fa0 <_kill_r>:
 8011fa0:	b538      	push	{r3, r4, r5, lr}
 8011fa2:	4d07      	ldr	r5, [pc, #28]	; (8011fc0 <_kill_r+0x20>)
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	4604      	mov	r4, r0
 8011fa8:	4608      	mov	r0, r1
 8011faa:	4611      	mov	r1, r2
 8011fac:	602b      	str	r3, [r5, #0]
 8011fae:	f7ee ff01 	bl	8000db4 <_kill>
 8011fb2:	1c43      	adds	r3, r0, #1
 8011fb4:	d102      	bne.n	8011fbc <_kill_r+0x1c>
 8011fb6:	682b      	ldr	r3, [r5, #0]
 8011fb8:	b103      	cbz	r3, 8011fbc <_kill_r+0x1c>
 8011fba:	6023      	str	r3, [r4, #0]
 8011fbc:	bd38      	pop	{r3, r4, r5, pc}
 8011fbe:	bf00      	nop
 8011fc0:	200088a4 	.word	0x200088a4

08011fc4 <_getpid_r>:
 8011fc4:	f7ee beee 	b.w	8000da4 <_getpid>

08011fc8 <_fstat_r>:
 8011fc8:	b538      	push	{r3, r4, r5, lr}
 8011fca:	4d07      	ldr	r5, [pc, #28]	; (8011fe8 <_fstat_r+0x20>)
 8011fcc:	2300      	movs	r3, #0
 8011fce:	4604      	mov	r4, r0
 8011fd0:	4608      	mov	r0, r1
 8011fd2:	4611      	mov	r1, r2
 8011fd4:	602b      	str	r3, [r5, #0]
 8011fd6:	f7ee ff4e 	bl	8000e76 <_fstat>
 8011fda:	1c43      	adds	r3, r0, #1
 8011fdc:	d102      	bne.n	8011fe4 <_fstat_r+0x1c>
 8011fde:	682b      	ldr	r3, [r5, #0]
 8011fe0:	b103      	cbz	r3, 8011fe4 <_fstat_r+0x1c>
 8011fe2:	6023      	str	r3, [r4, #0]
 8011fe4:	bd38      	pop	{r3, r4, r5, pc}
 8011fe6:	bf00      	nop
 8011fe8:	200088a4 	.word	0x200088a4

08011fec <_isatty_r>:
 8011fec:	b538      	push	{r3, r4, r5, lr}
 8011fee:	4d06      	ldr	r5, [pc, #24]	; (8012008 <_isatty_r+0x1c>)
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	4604      	mov	r4, r0
 8011ff4:	4608      	mov	r0, r1
 8011ff6:	602b      	str	r3, [r5, #0]
 8011ff8:	f7ee ff4d 	bl	8000e96 <_isatty>
 8011ffc:	1c43      	adds	r3, r0, #1
 8011ffe:	d102      	bne.n	8012006 <_isatty_r+0x1a>
 8012000:	682b      	ldr	r3, [r5, #0]
 8012002:	b103      	cbz	r3, 8012006 <_isatty_r+0x1a>
 8012004:	6023      	str	r3, [r4, #0]
 8012006:	bd38      	pop	{r3, r4, r5, pc}
 8012008:	200088a4 	.word	0x200088a4

0801200c <_init>:
 801200c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801200e:	bf00      	nop
 8012010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012012:	bc08      	pop	{r3}
 8012014:	469e      	mov	lr, r3
 8012016:	4770      	bx	lr

08012018 <_fini>:
 8012018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801201a:	bf00      	nop
 801201c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801201e:	bc08      	pop	{r3}
 8012020:	469e      	mov	lr, r3
 8012022:	4770      	bx	lr
