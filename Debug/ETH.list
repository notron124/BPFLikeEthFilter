
ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd74  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c50  0800ff24  0800ff24  0001ff24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b74  08012b74  000300e8  2**0
                  CONTENTS
  4 .ARM          00000008  08012b74  08012b74  00022b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b7c  08012b7c  000300e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b7c  08012b7c  00022b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012b80  08012b80  00022b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08012b84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300e8  2**0
                  CONTENTS
 10 .bss          000083c0  200000e8  200000e8  000300e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200084a8  200084a8  000300e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d8bd  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052d2  00000000  00000000  0004d9d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001490  00000000  00000000  00052ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013f0  00000000  00000000  00054138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fd3e  00000000  00000000  00055528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002452c  00000000  00000000  00085266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec936  00000000  00000000  000a9792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001960c8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005cfc  00000000  00000000  00196118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000e8 	.word	0x200000e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ff0c 	.word	0x0800ff0c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000ec 	.word	0x200000ec
 80001ec:	0800ff0c 	.word	0x0800ff0c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <DebounceAvoid>:
uint8_t keyCode;

uint8_t commonKeyFlags;

void DebounceAvoid(struct Key_TypeDef *keyx, struct Keys_Properties *keysProperties)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
   if (keysProperties->autorepeatSpeed > 99) // For speed limitation
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	791b      	ldrb	r3, [r3, #4]
 80005a2:	2b63      	cmp	r3, #99	; 0x63
 80005a4:	d902      	bls.n	80005ac <DebounceAvoid+0x18>
      keysProperties->autorepeatSpeed = 99;
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	2263      	movs	r2, #99	; 0x63
 80005aa:	711a      	strb	r2, [r3, #4]

   if (!(keyx->GPIOx->IDR & keyx->pin))
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	691b      	ldr	r3, [r3, #16]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	8892      	ldrh	r2, [r2, #4]
 80005b6:	4013      	ands	r3, r2
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d132      	bne.n	8000622 <DebounceAvoid+0x8e>
   {
      keyx->counter++;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	88db      	ldrh	r3, [r3, #6]
 80005c0:	3301      	adds	r3, #1
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	80da      	strh	r2, [r3, #6]

      if (keysProperties->longPressDelay != 0)
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	885b      	ldrh	r3, [r3, #2]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d051      	beq.n	8000674 <DebounceAvoid+0xe0>
      {
         if (keyx->counter == keysProperties->longPressDelay) // first wait for longpress
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	88da      	ldrh	r2, [r3, #6]
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	885b      	ldrh	r3, [r3, #2]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d14b      	bne.n	8000674 <DebounceAvoid+0xe0>
         {
            if (keyx->flags.autorepeat == 1)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	7a9b      	ldrb	r3, [r3, #10]
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d00a      	beq.n	8000600 <DebounceAvoid+0x6c>
            {
#ifdef SND_DOUBLE_ON
               SND_DOUBLE_ON;
#endif
               keyx->counter  = keysProperties->longPressDelay - (100 - keysProperties->autorepeatSpeed);
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	885a      	ldrh	r2, [r3, #2]
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	791b      	ldrb	r3, [r3, #4]
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	4413      	add	r3, r2
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	3b64      	subs	r3, #100	; 0x64
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	80da      	strh	r2, [r3, #6]
#else
               SND_LONG_ON;
#endif
            }

            keyCode = keyx->longPressID;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	7a5a      	ldrb	r2, [r3, #9]
 8000604:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <DebounceAvoid+0xec>)
 8000606:	701a      	strb	r2, [r3, #0]
            SET_KEY_READY;
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <DebounceAvoid+0xf0>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	b2da      	uxtb	r2, r3
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <DebounceAvoid+0xf0>)
 8000614:	701a      	strb	r2, [r3, #0]
            keyx->flags.isPressed = 1; // Set key pressed, so it not triggers again on release
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	7a93      	ldrb	r3, [r2, #10]
 800061a:	f043 0302 	orr.w	r3, r3, #2
 800061e:	7293      	strb	r3, [r2, #10]
      {
         keyx->counter = 0;
         keyx->flags.isPressed = 0;
      }
   }
}
 8000620:	e028      	b.n	8000674 <DebounceAvoid+0xe0>
      if (((keyx->counter >= keysProperties->longPressDelay) && !(keyx->flags.isPressed))) // if key is unpressed, check if time pressed is enough
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	88da      	ldrh	r2, [r3, #6]
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	885b      	ldrh	r3, [r3, #2]
 800062a:	429a      	cmp	r2, r3
 800062c:	d31a      	bcc.n	8000664 <DebounceAvoid+0xd0>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	7a9b      	ldrb	r3, [r3, #10]
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	b2db      	uxtb	r3, r3
 8000638:	2b00      	cmp	r3, #0
 800063a:	d113      	bne.n	8000664 <DebounceAvoid+0xd0>
         keyx->counter = 0;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2200      	movs	r2, #0
 8000640:	80da      	strh	r2, [r3, #6]
         keyCode = keyx->shortPressID;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	7a1a      	ldrb	r2, [r3, #8]
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <DebounceAvoid+0xec>)
 8000648:	701a      	strb	r2, [r3, #0]
         SET_KEY_READY;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <DebounceAvoid+0xf0>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <DebounceAvoid+0xf0>)
 8000656:	701a      	strb	r2, [r3, #0]
         keyx->flags.isPressed = 1;
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	7a93      	ldrb	r3, [r2, #10]
 800065c:	f043 0302 	orr.w	r3, r3, #2
 8000660:	7293      	strb	r3, [r2, #10]
}
 8000662:	e007      	b.n	8000674 <DebounceAvoid+0xe0>
         keyx->counter = 0;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2200      	movs	r2, #0
 8000668:	80da      	strh	r2, [r3, #6]
         keyx->flags.isPressed = 0;
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	7a93      	ldrb	r3, [r2, #10]
 800066e:	f36f 0341 	bfc	r3, #1, #1
 8000672:	7293      	strb	r3, [r2, #10]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	20000104 	.word	0x20000104
 8000684:	20000105 	.word	0x20000105

08000688 <jt>:
         { BPF_RET, 0, 0, 1 },
         { BPF_RET, 0, 0, 0 }
};

void jt(uint8_t destination)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
   _index = destination;
 8000692:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <jt+0x1c>)
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	7013      	strb	r3, [r2, #0]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	20000110 	.word	0x20000110

080006a8 <jf>:

void jf(uint8_t destination)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
   _index = destination;
 80006b2:	4a04      	ldr	r2, [pc, #16]	; (80006c4 <jf+0x1c>)
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	7013      	strb	r3, [r2, #0]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	20000110 	.word	0x20000110

080006c8 <jmp>:

void jmp(uint8_t *pdata, uint32_t k)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
   mypData = pdata;
 80006d2:	4a0e      	ldr	r2, [pc, #56]	; (800070c <jmp+0x44>)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	6013      	str	r3, [r2, #0]
   mypData += X + k;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <jmp+0x44>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <jmp+0x48>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	440b      	add	r3, r1
 80006e6:	4413      	add	r3, r2
 80006e8:	4a08      	ldr	r2, [pc, #32]	; (800070c <jmp+0x44>)
 80006ea:	6013      	str	r3, [r2, #0]
   X = 0;
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <jmp+0x48>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]
   _index++;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <jmp+0x4c>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	3301      	adds	r3, #1
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <jmp+0x4c>)
 80006fc:	701a      	strb	r2, [r3, #0]
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000108 	.word	0x20000108
 8000710:	20000111 	.word	0x20000111
 8000714:	20000110 	.word	0x20000110

08000718 <ldxb>:


void ldxb(uint32_t k, uint8_t *pdata)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
   mypData = pdata;
 8000722:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <ldxb+0x3c>)
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	6013      	str	r3, [r2, #0]
   mypData += k;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <ldxb+0x3c>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4413      	add	r3, r2
 8000730:	4a08      	ldr	r2, [pc, #32]	; (8000754 <ldxb+0x3c>)
 8000732:	6013      	str	r3, [r2, #0]
   X = 4*(*mypData & 0x0F);
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <ldxb+0x3c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	f003 030f 	and.w	r3, r3, #15
 800073e:	b2db      	uxtb	r3, r3
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	b2da      	uxtb	r2, r3
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <ldxb+0x40>)
 8000746:	701a      	strb	r2, [r3, #0]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	20000108 	.word	0x20000108
 8000758:	20000111 	.word	0x20000111

0800075c <getKSize>:

uint8_t getKSize(uint32_t k)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
   uint8_t size = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	73fb      	strb	r3, [r7, #15]

   while (k != 0)
 8000768:	e005      	b.n	8000776 <getKSize+0x1a>
   {
      size++;
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	3301      	adds	r3, #1
 800076e:	73fb      	strb	r3, [r7, #15]
      k = k >> 8;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	0a1b      	lsrs	r3, r3, #8
 8000774:	607b      	str	r3, [r7, #4]
   while (k != 0)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1f6      	bne.n	800076a <getKSize+0xe>
   }

   return size;
 800077c:	7bfb      	ldrb	r3, [r7, #15]
}
 800077e:	4618      	mov	r0, r3
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <jset>:

void jset(uint32_t k, struct sock_filter *filter)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
   uint8_t kSize = getKSize(k);
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff ffe0 	bl	800075c <getKSize>
 800079c:	4603      	mov	r3, r0
 800079e:	72bb      	strb	r3, [r7, #10]
   uint32_t actualData = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]

   for (uint8_t i = 0; i < kSize; i++)
 80007a4:	2300      	movs	r3, #0
 80007a6:	72fb      	strb	r3, [r7, #11]
 80007a8:	e011      	b.n	80007ce <jset+0x42>
   {
      actualData = actualData << 8;
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	021b      	lsls	r3, r3, #8
 80007ae:	60fb      	str	r3, [r7, #12]
      actualData += *mypData;
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <jset+0x84>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	461a      	mov	r2, r3
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	4413      	add	r3, r2
 80007bc:	60fb      	str	r3, [r7, #12]
      mypData++;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <jset+0x84>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4a12      	ldr	r2, [pc, #72]	; (8000810 <jset+0x84>)
 80007c6:	6013      	str	r3, [r2, #0]
   for (uint8_t i = 0; i < kSize; i++)
 80007c8:	7afb      	ldrb	r3, [r7, #11]
 80007ca:	3301      	adds	r3, #1
 80007cc:	72fb      	strb	r3, [r7, #11]
 80007ce:	7afa      	ldrb	r2, [r7, #11]
 80007d0:	7abb      	ldrb	r3, [r7, #10]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d3e9      	bcc.n	80007aa <jset+0x1e>
   }

   if ((actualData & 0x1FFF) == 0)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d109      	bne.n	80007f4 <jset+0x68>
      jt(filter[_index].jt);
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <jset+0x88>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	4413      	add	r3, r2
 80007ea:	789b      	ldrb	r3, [r3, #2]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff4b 	bl	8000688 <jt>
   else
      jf(filter[_index].jf);
}
 80007f2:	e008      	b.n	8000806 <jset+0x7a>
      jf(filter[_index].jf);
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <jset+0x88>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	00db      	lsls	r3, r3, #3
 80007fa:	683a      	ldr	r2, [r7, #0]
 80007fc:	4413      	add	r3, r2
 80007fe:	78db      	ldrb	r3, [r3, #3]
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ff51 	bl	80006a8 <jf>
}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000108 	.word	0x20000108
 8000814:	20000110 	.word	0x20000110

08000818 <jeq>:

void jeq(uint32_t k, struct sock_filter *filter)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
   uint8_t kSize = getKSize(k);
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff ff9a 	bl	800075c <getKSize>
 8000828:	4603      	mov	r3, r0
 800082a:	72bb      	strb	r3, [r7, #10]
   uint32_t actualData = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]

   for (uint8_t i = 0; i < kSize; i++)
 8000830:	2300      	movs	r3, #0
 8000832:	72fb      	strb	r3, [r7, #11]
 8000834:	e011      	b.n	800085a <jeq+0x42>
   {
      actualData = actualData << 8;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	021b      	lsls	r3, r3, #8
 800083a:	60fb      	str	r3, [r7, #12]
      actualData += *mypData;
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <jeq+0x80>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	461a      	mov	r2, r3
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	4413      	add	r3, r2
 8000848:	60fb      	str	r3, [r7, #12]
      mypData++;
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <jeq+0x80>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	3301      	adds	r3, #1
 8000850:	4a11      	ldr	r2, [pc, #68]	; (8000898 <jeq+0x80>)
 8000852:	6013      	str	r3, [r2, #0]
   for (uint8_t i = 0; i < kSize; i++)
 8000854:	7afb      	ldrb	r3, [r7, #11]
 8000856:	3301      	adds	r3, #1
 8000858:	72fb      	strb	r3, [r7, #11]
 800085a:	7afa      	ldrb	r2, [r7, #11]
 800085c:	7abb      	ldrb	r3, [r7, #10]
 800085e:	429a      	cmp	r2, r3
 8000860:	d3e9      	bcc.n	8000836 <jeq+0x1e>
   }

   if (actualData == k)
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	429a      	cmp	r2, r3
 8000868:	d109      	bne.n	800087e <jeq+0x66>
      jt(filter[_index].jt);
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <jeq+0x84>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	683a      	ldr	r2, [r7, #0]
 8000872:	4413      	add	r3, r2
 8000874:	789b      	ldrb	r3, [r3, #2]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff06 	bl	8000688 <jt>
   else
      jf(filter[_index].jf);
}
 800087c:	e008      	b.n	8000890 <jeq+0x78>
      jf(filter[_index].jf);
 800087e:	4b07      	ldr	r3, [pc, #28]	; (800089c <jeq+0x84>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	683a      	ldr	r2, [r7, #0]
 8000886:	4413      	add	r3, r2
 8000888:	78db      	ldrb	r3, [r3, #3]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ff0c 	bl	80006a8 <jf>
}
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000108 	.word	0x20000108
 800089c:	20000110 	.word	0x20000110

080008a0 <Filter>:

uint8_t Filter(uint8_t *pdata, struct sock_filter *filter)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
   uint8_t ret;
   uint16_t size = 10;
 80008aa:	230a      	movs	r3, #10
 80008ac:	81fb      	strh	r3, [r7, #14]
   while (_index < size)
 80008ae:	e053      	b.n	8000958 <Filter+0xb8>
   {
      switch(filter[_index].code)
 80008b0:	4b30      	ldr	r3, [pc, #192]	; (8000974 <Filter+0xd4>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	00db      	lsls	r3, r3, #3
 80008b6:	683a      	ldr	r2, [r7, #0]
 80008b8:	4413      	add	r3, r2
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	2b80      	cmp	r3, #128	; 0x80
 80008be:	d03a      	beq.n	8000936 <Filter+0x96>
 80008c0:	2b80      	cmp	r3, #128	; 0x80
 80008c2:	dc44      	bgt.n	800094e <Filter+0xae>
 80008c4:	2b50      	cmp	r3, #80	; 0x50
 80008c6:	d02b      	beq.n	8000920 <Filter+0x80>
 80008c8:	2b50      	cmp	r3, #80	; 0x50
 80008ca:	dc40      	bgt.n	800094e <Filter+0xae>
 80008cc:	2b40      	cmp	r3, #64	; 0x40
 80008ce:	d01c      	beq.n	800090a <Filter+0x6a>
 80008d0:	2b40      	cmp	r3, #64	; 0x40
 80008d2:	dc3c      	bgt.n	800094e <Filter+0xae>
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d002      	beq.n	80008de <Filter+0x3e>
 80008d8:	2b10      	cmp	r3, #16
 80008da:	d00b      	beq.n	80008f4 <Filter+0x54>
 80008dc:	e037      	b.n	800094e <Filter+0xae>
      {
      case BPF_JMP:
         jmp(pdata, filter[_index].k);
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <Filter+0xd4>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	4619      	mov	r1, r3
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff feeb 	bl	80006c8 <jmp>
         break;
 80008f2:	e031      	b.n	8000958 <Filter+0xb8>

      case BPF_JEQ:
         jeq(filter[_index].k, filter);
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <Filter+0xd4>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	683a      	ldr	r2, [r7, #0]
 80008fc:	4413      	add	r3, r2
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	6839      	ldr	r1, [r7, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff ff88 	bl	8000818 <jeq>
         break;
 8000908:	e026      	b.n	8000958 <Filter+0xb8>

      case BPF_JSET:
         jset(filter[_index].k, filter);
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <Filter+0xd4>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	683a      	ldr	r2, [r7, #0]
 8000912:	4413      	add	r3, r2
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	6839      	ldr	r1, [r7, #0]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ff37 	bl	800078c <jset>
         break;
 800091e:	e01b      	b.n	8000958 <Filter+0xb8>

      case BPF_LDXB:
         ldxb(filter[_index].k, pdata);
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <Filter+0xd4>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	683a      	ldr	r2, [r7, #0]
 8000928:	4413      	add	r3, r2
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fef2 	bl	8000718 <ldxb>
         break;
 8000934:	e010      	b.n	8000958 <Filter+0xb8>

      case BPF_RET:
         ret = filter[_index].k;
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <Filter+0xd4>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	683a      	ldr	r2, [r7, #0]
 800093e:	4413      	add	r3, r2
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	737b      	strb	r3, [r7, #13]
         _index = 0;
 8000944:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <Filter+0xd4>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
         return ret;
 800094a:	7b7b      	ldrb	r3, [r7, #13]
 800094c:	e00e      	b.n	800096c <Filter+0xcc>
         break;

      default:
         _index = 0;
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <Filter+0xd4>)
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
         return 0;
 8000954:	2300      	movs	r3, #0
 8000956:	e009      	b.n	800096c <Filter+0xcc>
   while (_index < size)
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <Filter+0xd4>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b29b      	uxth	r3, r3
 800095e:	89fa      	ldrh	r2, [r7, #14]
 8000960:	429a      	cmp	r2, r3
 8000962:	d8a5      	bhi.n	80008b0 <Filter+0x10>
         break;
      }
   }
   _index = 0;
 8000964:	4b03      	ldr	r3, [pc, #12]	; (8000974 <Filter+0xd4>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
   return 0;
 800096a:	2300      	movs	r3, #0
}
 800096c:	4618      	mov	r0, r3
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000110 	.word	0x20000110

08000978 <KeyInit>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void KeyInit(struct Key_TypeDef *keyx, struct Keys_Properties *keyprop)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
   keyx->GPIOx = USER_Btn_GPIO_Port;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <KeyInit+0x50>)
 8000986:	601a      	str	r2, [r3, #0]
   keyx->pin = USER_Btn_Pin;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800098e:	809a      	strh	r2, [r3, #4]
   keyx->shortPressID = 0;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	721a      	strb	r2, [r3, #8]
   keyx->longPressID = 4;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2204      	movs	r2, #4
 800099a:	725a      	strb	r2, [r3, #9]
   keyx->flags.autorepeat = 0;
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	7a93      	ldrb	r3, [r2, #10]
 80009a0:	f36f 0300 	bfc	r3, #0, #1
 80009a4:	7293      	strb	r3, [r2, #10]
   keyprop->autorepeatSpeed = 50;
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	2232      	movs	r2, #50	; 0x32
 80009aa:	711a      	strb	r2, [r3, #4]
   keyprop->shortPressDelay = 50;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	2232      	movs	r2, #50	; 0x32
 80009b0:	701a      	strb	r2, [r3, #0]
   keyprop->longPressDelay = 1000;
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009b8:	805a      	strh	r2, [r3, #2]
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40020800 	.word	0x40020800

080009cc <MACFilterInit>:

void MACFilterInit(ETH_MACFilterConfigTypeDef *MACFilterConf)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
   MACFilterConf->ReceiveAllMode = ENABLE;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2201      	movs	r2, #1
 80009d8:	705a      	strb	r2, [r3, #1]
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ec:	f000 fca4 	bl	8001338 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f0:	f000 f840 	bl	8000a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f4:	f000 f8d2 	bl	8000b9c <MX_GPIO_Init>
  MX_LWIP_Init();
 80009f8:	f003 fdda 	bl	80045b0 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  MX_USART3_UART_Init();
 80009fc:	f000 f8a4 	bl	8000b48 <MX_USART3_UART_Init>
  KeyInit(&key1, &keysProperties);
 8000a00:	4913      	ldr	r1, [pc, #76]	; (8000a50 <main+0x68>)
 8000a02:	4814      	ldr	r0, [pc, #80]	; (8000a54 <main+0x6c>)
 8000a04:	f7ff ffb8 	bl	8000978 <KeyInit>
  MACFilterInit(&MACFilterConf);
 8000a08:	4813      	ldr	r0, [pc, #76]	; (8000a58 <main+0x70>)
 8000a0a:	f7ff ffdf 	bl	80009cc <MACFilterInit>
  HAL_ETH_SetMACFilterConfig(&heth, &MACFilterConf);
 8000a0e:	4912      	ldr	r1, [pc, #72]	; (8000a58 <main+0x70>)
 8000a10:	4812      	ldr	r0, [pc, #72]	; (8000a5c <main+0x74>)
 8000a12:	f001 fbbb 	bl	800218c <HAL_ETH_SetMACFilterConfig>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
     MX_LWIP_Process();
 8000a16:	f003 ff17 	bl	8004848 <MX_LWIP_Process>

     if (KEY_READY)
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <main+0x78>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d0f7      	beq.n	8000a16 <main+0x2e>
     {
    	 RESET_KEY_READY;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <main+0x78>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	f023 0301 	bic.w	r3, r3, #1
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <main+0x78>)
 8000a32:	701a      	strb	r2, [r3, #0]
    	 sprintf(data, "Amount of passed packets: %lu\r\n", filteredCounter);
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <main+0x7c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	490b      	ldr	r1, [pc, #44]	; (8000a68 <main+0x80>)
 8000a3c:	480b      	ldr	r0, [pc, #44]	; (8000a6c <main+0x84>)
 8000a3e:	f00e f8b7 	bl	800ebb0 <siprintf>
    	 HAL_UART_Transmit_IT(&huart3, data, sizeof(data));
 8000a42:	2223      	movs	r2, #35	; 0x23
 8000a44:	4909      	ldr	r1, [pc, #36]	; (8000a6c <main+0x84>)
 8000a46:	480a      	ldr	r0, [pc, #40]	; (8000a70 <main+0x88>)
 8000a48:	f002 fea7 	bl	800379a <HAL_UART_Transmit_IT>
     MX_LWIP_Process();
 8000a4c:	e7e3      	b.n	8000a16 <main+0x2e>
 8000a4e:	bf00      	nop
 8000a50:	20000174 	.word	0x20000174
 8000a54:	20000168 	.word	0x20000168
 8000a58:	20000158 	.word	0x20000158
 8000a5c:	20004cc4 	.word	0x20004cc4
 8000a60:	20000105 	.word	0x20000105
 8000a64:	2000010c 	.word	0x2000010c
 8000a68:	0800ff24 	.word	0x0800ff24
 8000a6c:	2000017c 	.word	0x2000017c
 8000a70:	20000114 	.word	0x20000114

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b094      	sub	sp, #80	; 0x50
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	f107 0320 	add.w	r3, r7, #32
 8000a7e:	2230      	movs	r2, #48	; 0x30
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f00e f836 	bl	800eaf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <SystemClock_Config+0xcc>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	4a27      	ldr	r2, [pc, #156]	; (8000b40 <SystemClock_Config+0xcc>)
 8000aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa8:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <SystemClock_Config+0xcc>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <SystemClock_Config+0xd0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a21      	ldr	r2, [pc, #132]	; (8000b44 <SystemClock_Config+0xd0>)
 8000abe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <SystemClock_Config+0xd0>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ad4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ada:	2302      	movs	r3, #2
 8000adc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ade:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ae8:	23a8      	movs	r3, #168	; 0xa8
 8000aea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000af0:	2307      	movs	r3, #7
 8000af2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af4:	f107 0320 	add.w	r3, r7, #32
 8000af8:	4618      	mov	r0, r3
 8000afa:	f002 f969 	bl	8002dd0 <HAL_RCC_OscConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b04:	f000 f8f8 	bl	8000cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b08:	230f      	movs	r3, #15
 8000b0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	2105      	movs	r1, #5
 8000b26:	4618      	mov	r0, r3
 8000b28:	f002 fbca 	bl	80032c0 <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b32:	f000 f8e1 	bl	8000cf8 <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3750      	adds	r7, #80	; 0x50
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40007000 	.word	0x40007000

08000b48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_USART3_UART_Init+0x4c>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <MX_USART3_UART_Init+0x50>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <MX_USART3_UART_Init+0x4c>)
 8000b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_USART3_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_USART3_UART_Init+0x4c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <MX_USART3_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_USART3_UART_Init+0x4c>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <MX_USART3_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_USART3_UART_Init+0x4c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_USART3_UART_Init+0x4c>)
 8000b80:	f002 fdbe 	bl	8003700 <HAL_UART_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b8a:	f000 f8b5 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000114 	.word	0x20000114
 8000b98:	40004800 	.word	0x40004800

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08c      	sub	sp, #48	; 0x30
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
 8000bb6:	4b4c      	ldr	r3, [pc, #304]	; (8000ce8 <MX_GPIO_Init+0x14c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a4b      	ldr	r2, [pc, #300]	; (8000ce8 <MX_GPIO_Init+0x14c>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b49      	ldr	r3, [pc, #292]	; (8000ce8 <MX_GPIO_Init+0x14c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	4b45      	ldr	r3, [pc, #276]	; (8000ce8 <MX_GPIO_Init+0x14c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a44      	ldr	r2, [pc, #272]	; (8000ce8 <MX_GPIO_Init+0x14c>)
 8000bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b42      	ldr	r3, [pc, #264]	; (8000ce8 <MX_GPIO_Init+0x14c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b3e      	ldr	r3, [pc, #248]	; (8000ce8 <MX_GPIO_Init+0x14c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a3d      	ldr	r2, [pc, #244]	; (8000ce8 <MX_GPIO_Init+0x14c>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b3b      	ldr	r3, [pc, #236]	; (8000ce8 <MX_GPIO_Init+0x14c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b37      	ldr	r3, [pc, #220]	; (8000ce8 <MX_GPIO_Init+0x14c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a36      	ldr	r2, [pc, #216]	; (8000ce8 <MX_GPIO_Init+0x14c>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b34      	ldr	r3, [pc, #208]	; (8000ce8 <MX_GPIO_Init+0x14c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	4b30      	ldr	r3, [pc, #192]	; (8000ce8 <MX_GPIO_Init+0x14c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a2f      	ldr	r2, [pc, #188]	; (8000ce8 <MX_GPIO_Init+0x14c>)
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b2d      	ldr	r3, [pc, #180]	; (8000ce8 <MX_GPIO_Init+0x14c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	4b29      	ldr	r3, [pc, #164]	; (8000ce8 <MX_GPIO_Init+0x14c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a28      	ldr	r2, [pc, #160]	; (8000ce8 <MX_GPIO_Init+0x14c>)
 8000c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <MX_GPIO_Init+0x14c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c60:	4822      	ldr	r0, [pc, #136]	; (8000cec <MX_GPIO_Init+0x150>)
 8000c62:	f002 f89b 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2140      	movs	r1, #64	; 0x40
 8000c6a:	4821      	ldr	r0, [pc, #132]	; (8000cf0 <MX_GPIO_Init+0x154>)
 8000c6c:	f002 f896 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4619      	mov	r1, r3
 8000c86:	481b      	ldr	r0, [pc, #108]	; (8000cf4 <MX_GPIO_Init+0x158>)
 8000c88:	f001 fedc 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c8c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4811      	ldr	r0, [pc, #68]	; (8000cec <MX_GPIO_Init+0x150>)
 8000ca6:	f001 fecd 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000caa:	2340      	movs	r3, #64	; 0x40
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <MX_GPIO_Init+0x154>)
 8000cc2:	f001 febf 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cc6:	2380      	movs	r3, #128	; 0x80
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_GPIO_Init+0x154>)
 8000cda:	f001 feb3 	bl	8002a44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cde:	bf00      	nop
 8000ce0:	3730      	adds	r7, #48	; 0x30
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020400 	.word	0x40020400
 8000cf0:	40021800 	.word	0x40021800
 8000cf4:	40020800 	.word	0x40020800

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <Error_Handler+0x8>
	...

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800

08000d54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a1d      	ldr	r2, [pc, #116]	; (8000de8 <HAL_UART_MspInit+0x94>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d134      	bne.n	8000de0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <HAL_UART_MspInit+0x98>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a1b      	ldr	r2, [pc, #108]	; (8000dec <HAL_UART_MspInit+0x98>)
 8000d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b19      	ldr	r3, [pc, #100]	; (8000dec <HAL_UART_MspInit+0x98>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_UART_MspInit+0x98>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a14      	ldr	r2, [pc, #80]	; (8000dec <HAL_UART_MspInit+0x98>)
 8000d9c:	f043 0308 	orr.w	r3, r3, #8
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_UART_MspInit+0x98>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0308 	and.w	r3, r3, #8
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dc0:	2307      	movs	r3, #7
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4809      	ldr	r0, [pc, #36]	; (8000df0 <HAL_UART_MspInit+0x9c>)
 8000dcc:	f001 fe3a 	bl	8002a44 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2027      	movs	r0, #39	; 0x27
 8000dd6:	f000 fc20 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000dda:	2027      	movs	r0, #39	; 0x27
 8000ddc:	f000 fc39 	bl	8001652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000de0:	bf00      	nop
 8000de2:	3728      	adds	r7, #40	; 0x28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40004800 	.word	0x40004800
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020c00 	.word	0x40020c00

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <NMI_Handler+0x4>

08000dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <MemManage_Handler+0x4>

08000e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <BusFault_Handler+0x4>

08000e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <UsageFault_Handler+0x4>

08000e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e40:	f000 facc 	bl	80013dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  DebounceAvoid(&key1, &keysProperties);
 8000e44:	4902      	ldr	r1, [pc, #8]	; (8000e50 <SysTick_Handler+0x14>)
 8000e46:	4803      	ldr	r0, [pc, #12]	; (8000e54 <SysTick_Handler+0x18>)
 8000e48:	f7ff fba4 	bl	8000594 <DebounceAvoid>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000174 	.word	0x20000174
 8000e54:	20000168 	.word	0x20000168

08000e58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <USART3_IRQHandler+0x10>)
 8000e5e:	f002 fce1 	bl	8003824 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000114 	.word	0x20000114

08000e6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return 1;
 8000e70:	2301      	movs	r3, #1
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <_kill>:

int _kill(int pid, int sig)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e86:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <_kill+0x20>)
 8000e88:	2216      	movs	r2, #22
 8000e8a:	601a      	str	r2, [r3, #0]
  return -1;
 8000e8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	20008498 	.word	0x20008498

08000ea0 <_exit>:

void _exit (int status)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ffe5 	bl	8000e7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000eb2:	e7fe      	b.n	8000eb2 <_exit+0x12>

08000eb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	e00a      	b.n	8000edc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ec6:	f3af 8000 	nop.w
 8000eca:	4601      	mov	r1, r0
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	1c5a      	adds	r2, r3, #1
 8000ed0:	60ba      	str	r2, [r7, #8]
 8000ed2:	b2ca      	uxtb	r2, r1
 8000ed4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	dbf0      	blt.n	8000ec6 <_read+0x12>
  }

  return len;
 8000ee4:	687b      	ldr	r3, [r7, #4]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b086      	sub	sp, #24
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	60f8      	str	r0, [r7, #12]
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	e009      	b.n	8000f14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	1c5a      	adds	r2, r3, #1
 8000f04:	60ba      	str	r2, [r7, #8]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3301      	adds	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dbf1      	blt.n	8000f00 <_write+0x12>
  }
  return len;
 8000f1c:	687b      	ldr	r3, [r7, #4]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <_close>:

int _close(int file)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f4e:	605a      	str	r2, [r3, #4]
  return 0;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <_isatty>:

int _isatty(int file)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f98:	4a14      	ldr	r2, [pc, #80]	; (8000fec <_sbrk+0x5c>)
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <_sbrk+0x60>)
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <_sbrk+0x64>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <_sbrk+0x68>)
 8000fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d205      	bcs.n	8000fcc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <_sbrk+0x6c>)
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fca:	e009      	b.n	8000fe0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <_sbrk+0x64>)
 8000fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	371c      	adds	r7, #28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	20030000 	.word	0x20030000
 8000ff0:	00000400 	.word	0x00000400
 8000ff4:	200001a0 	.word	0x200001a0
 8000ff8:	200084a8 	.word	0x200084a8
 8000ffc:	20008498 	.word	0x20008498

08001000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <SystemInit+0x20>)
 8001006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <SystemInit+0x20>)
 800100c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800105c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800102a:	490e      	ldr	r1, [pc, #56]	; (8001064 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800102c:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001040:	4c0b      	ldr	r4, [pc, #44]	; (8001070 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800104e:	f7ff ffd7 	bl	8001000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001052:	f00d fcf3 	bl	800ea3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001056:	f7ff fcc7 	bl	80009e8 <main>
  bx  lr    
 800105a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800105c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001064:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8001068:	08012b84 	.word	0x08012b84
  ldr r2, =_sbss
 800106c:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8001070:	200084a8 	.word	0x200084a8

08001074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC_IRQHandler>

08001076 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00b      	beq.n	800109e <LAN8742_RegisterBusIO+0x28>
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <LAN8742_RegisterBusIO+0x28>
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <LAN8742_RegisterBusIO+0x28>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d102      	bne.n	80010a4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	e014      	b.n	80010ce <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	691a      	ldr	r2, [r3, #16]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d17c      	bne.n	80011f4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d002      	beq.n	8001108 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2220      	movs	r2, #32
 800110c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	e01c      	b.n	800114e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	f107 0208 	add.w	r2, r7, #8
 800111c:	2112      	movs	r1, #18
 800111e:	6978      	ldr	r0, [r7, #20]
 8001120:	4798      	blx	r3
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	da03      	bge.n	8001130 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001128:	f06f 0304 	mvn.w	r3, #4
 800112c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800112e:	e00b      	b.n	8001148 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	f003 031f 	and.w	r3, r3, #31
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	429a      	cmp	r2, r3
 800113a:	d105      	bne.n	8001148 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
         break;
 8001146:	e005      	b.n	8001154 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	3301      	adds	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	2b1f      	cmp	r3, #31
 8001152:	d9df      	bls.n	8001114 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b1f      	cmp	r3, #31
 800115a:	d902      	bls.n	8001162 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800115c:	f06f 0302 	mvn.w	r3, #2
 8001160:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d145      	bne.n	80011f4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	6810      	ldr	r0, [r2, #0]
 8001170:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001174:	2100      	movs	r1, #0
 8001176:	4798      	blx	r3
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	db37      	blt.n	80011ee <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	6810      	ldr	r0, [r2, #0]
 8001186:	f107 0208 	add.w	r2, r7, #8
 800118a:	2100      	movs	r1, #0
 800118c:	4798      	blx	r3
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	db28      	blt.n	80011e6 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4798      	blx	r3
 800119a:	4603      	mov	r3, r0
 800119c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800119e:	e01c      	b.n	80011da <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4798      	blx	r3
 80011a6:	4603      	mov	r3, r0
 80011a8:	461a      	mov	r2, r3
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011b2:	d80e      	bhi.n	80011d2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6810      	ldr	r0, [r2, #0]
 80011bc:	f107 0208 	add.w	r2, r7, #8
 80011c0:	2100      	movs	r1, #0
 80011c2:	4798      	blx	r3
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	da07      	bge.n	80011da <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80011ca:	f06f 0304 	mvn.w	r3, #4
 80011ce:	613b      	str	r3, [r7, #16]
                 break;
 80011d0:	e010      	b.n	80011f4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80011d2:	f06f 0301 	mvn.w	r3, #1
 80011d6:	613b      	str	r3, [r7, #16]
               break;
 80011d8:	e00c      	b.n	80011f4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1dd      	bne.n	80011a0 <LAN8742_Init+0xc6>
 80011e4:	e006      	b.n	80011f4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80011e6:	f06f 0304 	mvn.w	r3, #4
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	e002      	b.n	80011f4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80011ee:	f06f 0303 	mvn.w	r3, #3
 80011f2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d112      	bne.n	8001220 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	4798      	blx	r3
 8001200:	4603      	mov	r3, r0
 8001202:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001204:	bf00      	nop
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	4798      	blx	r3
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001218:	d9f5      	bls.n	8001206 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2201      	movs	r2, #1
 800121e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001220:	693b      	ldr	r3, [r7, #16]
 }
 8001222:	4618      	mov	r0, r3
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	6810      	ldr	r0, [r2, #0]
 800123e:	f107 020c 	add.w	r2, r7, #12
 8001242:	2101      	movs	r1, #1
 8001244:	4798      	blx	r3
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	da02      	bge.n	8001252 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800124c:	f06f 0304 	mvn.w	r3, #4
 8001250:	e06e      	b.n	8001330 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	6810      	ldr	r0, [r2, #0]
 800125a:	f107 020c 	add.w	r2, r7, #12
 800125e:	2101      	movs	r1, #1
 8001260:	4798      	blx	r3
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	da02      	bge.n	800126e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001268:	f06f 0304 	mvn.w	r3, #4
 800126c:	e060      	b.n	8001330 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001278:	2301      	movs	r3, #1
 800127a:	e059      	b.n	8001330 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	6810      	ldr	r0, [r2, #0]
 8001284:	f107 020c 	add.w	r2, r7, #12
 8001288:	2100      	movs	r1, #0
 800128a:	4798      	blx	r3
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	da02      	bge.n	8001298 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001292:	f06f 0304 	mvn.w	r3, #4
 8001296:	e04b      	b.n	8001330 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d11b      	bne.n	80012da <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d006      	beq.n	80012ba <LAN8742_GetLinkState+0x90>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80012b6:	2302      	movs	r3, #2
 80012b8:	e03a      	b.n	8001330 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e033      	b.n	8001330 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80012d2:	2304      	movs	r3, #4
 80012d4:	e02c      	b.n	8001330 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80012d6:	2305      	movs	r3, #5
 80012d8:	e02a      	b.n	8001330 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6810      	ldr	r0, [r2, #0]
 80012e2:	f107 020c 	add.w	r2, r7, #12
 80012e6:	211f      	movs	r1, #31
 80012e8:	4798      	blx	r3
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	da02      	bge.n	80012f6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80012f0:	f06f 0304 	mvn.w	r3, #4
 80012f4:	e01c      	b.n	8001330 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001300:	2306      	movs	r3, #6
 8001302:	e015      	b.n	8001330 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 031c 	and.w	r3, r3, #28
 800130a:	2b18      	cmp	r3, #24
 800130c:	d101      	bne.n	8001312 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800130e:	2302      	movs	r3, #2
 8001310:	e00e      	b.n	8001330 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f003 031c 	and.w	r3, r3, #28
 8001318:	2b08      	cmp	r3, #8
 800131a:	d101      	bne.n	8001320 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800131c:	2303      	movs	r3, #3
 800131e:	e007      	b.n	8001330 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 031c 	and.w	r3, r3, #28
 8001326:	2b14      	cmp	r3, #20
 8001328:	d101      	bne.n	800132e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800132a:	2304      	movs	r3, #4
 800132c:	e000      	b.n	8001330 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800132e:	2305      	movs	r3, #5
    }				
  }
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <HAL_Init+0x40>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <HAL_Init+0x40>)
 8001342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001346:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_Init+0x40>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <HAL_Init+0x40>)
 800134e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001352:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_Init+0x40>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_Init+0x40>)
 800135a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001360:	2003      	movs	r0, #3
 8001362:	f000 f94f 	bl	8001604 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001366:	2000      	movs	r0, #0
 8001368:	f000 f808 	bl	800137c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800136c:	f7ff fcca 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40023c00 	.word	0x40023c00

0800137c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_InitTick+0x54>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_InitTick+0x58>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001392:	fbb3 f3f1 	udiv	r3, r3, r1
 8001396:	fbb2 f3f3 	udiv	r3, r2, r3
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f967 	bl	800166e <HAL_SYSTICK_Config>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00e      	b.n	80013c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b0f      	cmp	r3, #15
 80013ae:	d80a      	bhi.n	80013c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b0:	2200      	movs	r2, #0
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f000 f92f 	bl	800161a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <HAL_InitTick+0x5c>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e000      	b.n	80013c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000058 	.word	0x20000058
 80013d4:	20000060 	.word	0x20000060
 80013d8:	2000005c 	.word	0x2000005c

080013dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_IncTick+0x20>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_IncTick+0x24>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a04      	ldr	r2, [pc, #16]	; (8001400 <HAL_IncTick+0x24>)
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000060 	.word	0x20000060
 8001400:	200001a4 	.word	0x200001a4

08001404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return uwTick;
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <HAL_GetTick+0x14>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	200001a4 	.word	0x200001a4

0800141c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001424:	f7ff ffee 	bl	8001404 <HAL_GetTick>
 8001428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001434:	d005      	beq.n	8001442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_Delay+0x44>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001442:	bf00      	nop
 8001444:	f7ff ffde 	bl	8001404 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	429a      	cmp	r2, r3
 8001452:	d8f7      	bhi.n	8001444 <HAL_Delay+0x28>
  {
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000060 	.word	0x20000060

08001464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001480:	4013      	ands	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800148c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001496:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	60d3      	str	r3, [r2, #12]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <__NVIC_GetPriorityGrouping+0x18>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	f003 0307 	and.w	r3, r3, #7
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	db0b      	blt.n	80014f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	f003 021f 	and.w	r2, r3, #31
 80014e0:	4907      	ldr	r1, [pc, #28]	; (8001500 <__NVIC_EnableIRQ+0x38>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	095b      	lsrs	r3, r3, #5
 80014e8:	2001      	movs	r0, #1
 80014ea:	fa00 f202 	lsl.w	r2, r0, r2
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000e100 	.word	0xe000e100

08001504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	db0a      	blt.n	800152e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	490c      	ldr	r1, [pc, #48]	; (8001550 <__NVIC_SetPriority+0x4c>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	0112      	lsls	r2, r2, #4
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	440b      	add	r3, r1
 8001528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800152c:	e00a      	b.n	8001544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4908      	ldr	r1, [pc, #32]	; (8001554 <__NVIC_SetPriority+0x50>)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	3b04      	subs	r3, #4
 800153c:	0112      	lsls	r2, r2, #4
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	440b      	add	r3, r1
 8001542:	761a      	strb	r2, [r3, #24]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000e100 	.word	0xe000e100
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	; 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f1c3 0307 	rsb	r3, r3, #7
 8001572:	2b04      	cmp	r3, #4
 8001574:	bf28      	it	cs
 8001576:	2304      	movcs	r3, #4
 8001578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3304      	adds	r3, #4
 800157e:	2b06      	cmp	r3, #6
 8001580:	d902      	bls.n	8001588 <NVIC_EncodePriority+0x30>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3b03      	subs	r3, #3
 8001586:	e000      	b.n	800158a <NVIC_EncodePriority+0x32>
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	f04f 32ff 	mov.w	r2, #4294967295
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43d9      	mvns	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	4313      	orrs	r3, r2
         );
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3724      	adds	r7, #36	; 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d0:	d301      	bcc.n	80015d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d2:	2301      	movs	r3, #1
 80015d4:	e00f      	b.n	80015f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d6:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <SysTick_Config+0x40>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015de:	210f      	movs	r1, #15
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295
 80015e4:	f7ff ff8e 	bl	8001504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <SysTick_Config+0x40>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ee:	4b04      	ldr	r3, [pc, #16]	; (8001600 <SysTick_Config+0x40>)
 80015f0:	2207      	movs	r2, #7
 80015f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	e000e010 	.word	0xe000e010

08001604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff29 	bl	8001464 <__NVIC_SetPriorityGrouping>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
 8001626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800162c:	f7ff ff3e 	bl	80014ac <__NVIC_GetPriorityGrouping>
 8001630:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	6978      	ldr	r0, [r7, #20]
 8001638:	f7ff ff8e 	bl	8001558 <NVIC_EncodePriority>
 800163c:	4602      	mov	r2, r0
 800163e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff5d 	bl	8001504 <__NVIC_SetPriority>
}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff31 	bl	80014c8 <__NVIC_EnableIRQ>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ffa2 	bl	80015c0 <SysTick_Config>
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b084      	sub	sp, #16
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001692:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001694:	f7ff feb6 	bl	8001404 <HAL_GetTick>
 8001698:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d008      	beq.n	80016b8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2280      	movs	r2, #128	; 0x80
 80016aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e052      	b.n	800175e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0216 	bic.w	r2, r2, #22
 80016c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	695a      	ldr	r2, [r3, #20]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016d6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d103      	bne.n	80016e8 <HAL_DMA_Abort+0x62>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d007      	beq.n	80016f8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0208 	bic.w	r2, r2, #8
 80016f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0201 	bic.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001708:	e013      	b.n	8001732 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800170a:	f7ff fe7b 	bl	8001404 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b05      	cmp	r3, #5
 8001716:	d90c      	bls.n	8001732 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2220      	movs	r2, #32
 800171c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2203      	movs	r2, #3
 8001722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e015      	b.n	800175e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1e4      	bne.n	800170a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001744:	223f      	movs	r2, #63	; 0x3f
 8001746:	409a      	lsls	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d004      	beq.n	8001784 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2280      	movs	r2, #128	; 0x80
 800177e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e00c      	b.n	800179e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2205      	movs	r2, #5
 8001788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0201 	bic.w	r2, r2, #1
 800179a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e06c      	b.n	8001898 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d106      	bne.n	80017d6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2223      	movs	r2, #35	; 0x23
 80017cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f003 fa11 	bl	8004bf8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	4b31      	ldr	r3, [pc, #196]	; (80018a0 <HAL_ETH_Init+0xf4>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	4a30      	ldr	r2, [pc, #192]	; (80018a0 <HAL_ETH_Init+0xf4>)
 80017e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e4:	6453      	str	r3, [r2, #68]	; 0x44
 80017e6:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <HAL_ETH_Init+0xf4>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80017f2:	4b2c      	ldr	r3, [pc, #176]	; (80018a4 <HAL_ETH_Init+0xf8>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4a2b      	ldr	r2, [pc, #172]	; (80018a4 <HAL_ETH_Init+0xf8>)
 80017f8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80017fc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80017fe:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <HAL_ETH_Init+0xf8>)
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	4927      	ldr	r1, [pc, #156]	; (80018a4 <HAL_ETH_Init+0xf8>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800180c:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <HAL_ETH_Init+0xf8>)
 800180e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001826:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001828:	f7ff fdec 	bl	8001404 <HAL_GetTick>
 800182c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800182e:	e011      	b.n	8001854 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001830:	f7ff fde8 	bl	8001404 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800183e:	d909      	bls.n	8001854 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2204      	movs	r2, #4
 8001844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	22e0      	movs	r2, #224	; 0xe0
 800184c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e021      	b.n	8001898 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1e4      	bne.n	8001830 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 fe46 	bl	80024f8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 feed 	bl	800264c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 ff43 	bl	80026fe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	461a      	mov	r2, r3
 800187e:	2100      	movs	r1, #0
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 feab 	bl	80025dc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2210      	movs	r2, #16
 8001892:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40013800 	.word	0x40013800

080018a8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018b6:	2b10      	cmp	r3, #16
 80018b8:	d150      	bne.n	800195c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2223      	movs	r2, #35	; 0x23
 80018be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2204      	movs	r2, #4
 80018c6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f9fd 	bl	8001cc8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f042 0208 	orr.w	r2, r2, #8
 80018dc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018e6:	2001      	movs	r0, #1
 80018e8:	f7ff fd98 	bl	800141c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0204 	orr.w	r2, r2, #4
 8001902:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800190c:	2001      	movs	r0, #1
 800190e:	f7ff fd85 	bl	800141c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 fc8c 	bl	8002238 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6812      	ldr	r2, [r2, #0]
 800192e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001932:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001936:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	f043 0302 	orr.w	r3, r3, #2
 800194a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800194e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2223      	movs	r2, #35	; 0x23
 8001954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	e000      	b.n	800195e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
  }
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001974:	2b23      	cmp	r3, #35	; 0x23
 8001976:	d14a      	bne.n	8001a0e <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2223      	movs	r2, #35	; 0x23
 800197c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6812      	ldr	r2, [r2, #0]
 800198e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001992:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001996:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	f023 0302 	bic.w	r3, r3, #2
 80019aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019ae:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0204 	bic.w	r2, r2, #4
 80019be:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019c8:	2001      	movs	r0, #1
 80019ca:	f7ff fd27 	bl	800141c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 fc2e 	bl	8002238 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0208 	bic.w	r2, r2, #8
 80019ea:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019f4:	2001      	movs	r0, #1
 80019f6:	f7ff fd11 	bl	800141c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2210      	movs	r2, #16
 8001a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e000      	b.n	8001a10 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
  }
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a30:	f043 0201 	orr.w	r2, r3, #1
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e07c      	b.n	8001b38 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a44:	2b23      	cmp	r3, #35	; 0x23
 8001a46:	d176      	bne.n	8001b36 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	68b9      	ldr	r1, [r7, #8]
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 fec3 	bl	80027d8 <ETH_Prepare_Tx_Descriptors>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d009      	beq.n	8001a6c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5e:	f043 0202 	orr.w	r2, r3, #2
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e065      	b.n	8001b38 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a6c:	f3bf 8f4f 	dsb	sy
}
 8001a70:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	3206      	adds	r2, #6
 8001a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a7e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	629a      	str	r2, [r3, #40]	; 0x28
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d904      	bls.n	8001a9c <HAL_ETH_Transmit+0x84>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a96:	1f1a      	subs	r2, r3, #4
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	3106      	adds	r1, #6
 8001aa8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001aac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ab0:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001ab2:	f7ff fca7 	bl	8001404 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001ab8:	e037      	b.n	8001b2a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d011      	beq.n	8001af0 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad2:	f043 0208 	orr.w	r2, r3, #8
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae4:	695a      	ldr	r2, [r3, #20]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e023      	b.n	8001b38 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af6:	d018      	beq.n	8001b2a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001af8:	f7ff fc84 	bl	8001404 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d302      	bcc.n	8001b0e <HAL_ETH_Transmit+0xf6>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10d      	bne.n	8001b2a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b14:	f043 0204 	orr.w	r2, r3, #4
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001b24:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e006      	b.n	8001b38 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	dbc3      	blt.n	8001aba <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e000      	b.n	8001b38 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
  }
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d109      	bne.n	8001b6c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5e:	f043 0201 	orr.w	r2, r3, #1
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0a8      	b.n	8001cbe <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b72:	2b23      	cmp	r3, #35	; 0x23
 8001b74:	d001      	beq.n	8001b7a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e0a1      	b.n	8001cbe <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	3212      	adds	r2, #18
 8001b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b90:	f1c3 0304 	rsb	r3, r3, #4
 8001b94:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b96:	e06a      	b.n	8001c6e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d007      	beq.n	8001bb4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	699a      	ldr	r2, [r3, #24]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	69da      	ldr	r2, [r3, #28]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d103      	bne.n	8001bc8 <HAL_ETH_ReadData+0x88>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d040      	beq.n	8001c4a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00c      	beq.n	8001c0c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	0c1b      	lsrs	r3, r3, #16
 8001bf8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001bfc:	3b04      	subs	r3, #4
 8001bfe:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001c24:	461a      	mov	r2, r3
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	f003 f9b5 	bl	8004f98 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	441a      	add	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	2200      	movs	r2, #0
 8001c48:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	61fb      	str	r3, [r7, #28]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	d902      	bls.n	8001c5c <HAL_ETH_ReadData+0x11c>
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3b04      	subs	r3, #4
 8001c5a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69fa      	ldr	r2, [r7, #28]
 8001c60:	3212      	adds	r2, #18
 8001c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c66:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	db06      	blt.n	8001c84 <HAL_ETH_ReadData+0x144>
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d202      	bcs.n	8001c84 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d089      	beq.n	8001b98 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	441a      	add	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f815 	bl	8001cc8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d108      	bne.n	8001cbc <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e000      	b.n	8001cbe <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3720      	adds	r7, #32
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cdc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69fa      	ldr	r2, [r7, #28]
 8001ce2:	3212      	adds	r2, #18
 8001ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cee:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001cf0:	e040      	b.n	8001d74 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d112      	bne.n	8001d20 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f003 f91a 	bl	8004f38 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d102      	bne.n	8001d10 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	74fb      	strb	r3, [r7, #19]
 8001d0e:	e007      	b.n	8001d20 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	461a      	mov	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001d20:	7cfb      	ldrb	r3, [r7, #19]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d026      	beq.n	8001d74 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d103      	bne.n	8001d36 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	4a1e      	ldr	r2, [pc, #120]	; (8001dac <ETH_UpdateDescriptor+0xe4>)
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	e003      	b.n	8001d3e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001d3c:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001d3e:	f3bf 8f5f 	dmb	sy
}
 8001d42:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	3301      	adds	r3, #1
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d902      	bls.n	8001d62 <ETH_UpdateDescriptor+0x9a>
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	3b04      	subs	r3, #4
 8001d60:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	3212      	adds	r2, #18
 8001d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6c:	617b      	str	r3, [r7, #20]
      desccount--;
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <ETH_UpdateDescriptor+0xb8>
 8001d7a:	7cfb      	ldrb	r3, [r7, #19]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1b8      	bne.n	8001cf2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d00c      	beq.n	8001da4 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d92:	461a      	mov	r2, r3
 8001d94:	2300      	movs	r3, #0
 8001d96:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69fa      	ldr	r2, [r7, #28]
 8001d9c:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001da4:	bf00      	nop
 8001da6:	3720      	adds	r7, #32
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	80004600 	.word	0x80004600

08001db0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f003 031c 	and.w	r3, r3, #28
 8001dcc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	02db      	lsls	r3, r3, #11
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	019b      	lsls	r3, r3, #6
 8001dde:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f023 0302 	bic.w	r3, r3, #2
 8001dee:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001e00:	f7ff fb00 	bl	8001404 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e06:	e00d      	b.n	8001e24 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001e08:	f7ff fafc 	bl	8001404 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e16:	d301      	bcc.n	8001e1c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e010      	b.n	8001e3e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1ec      	bne.n	8001e08 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	60f8      	str	r0, [r7, #12]
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f003 031c 	and.w	r3, r3, #28
 8001e62:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	02db      	lsls	r3, r3, #11
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	019b      	lsls	r3, r3, #6
 8001e74:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea0:	f7ff fab0 	bl	8001404 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ea6:	e00d      	b.n	8001ec4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001ea8:	f7ff faac 	bl	8001404 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb6:	d301      	bcc.n	8001ebc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e009      	b.n	8001ed0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1ec      	bne.n	8001ea8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0d9      	b.n	80020a0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	bf14      	ite	ne
 8001efa:	2301      	movne	r3, #1
 8001efc:	2300      	moveq	r3, #0
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf0c      	ite	eq
 8001f24:	2301      	moveq	r3, #1
 8001f26:	2300      	movne	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	bf14      	ite	ne
 8001f40:	2301      	movne	r3, #1
 8001f42:	2300      	moveq	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	bf0c      	ite	eq
 8001f5a:	2301      	moveq	r3, #1
 8001f5c:	2300      	movne	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bf14      	ite	ne
 8001f74:	2301      	movne	r3, #1
 8001f76:	2300      	moveq	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	bf0c      	ite	eq
 8001faa:	2301      	moveq	r3, #1
 8001fac:	2300      	movne	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf0c      	ite	eq
 8001fc4:	2301      	moveq	r3, #1
 8001fc6:	2300      	movne	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	bf14      	ite	ne
 8001fde:	2301      	movne	r3, #1
 8001fe0:	2300      	moveq	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002002:	2b00      	cmp	r3, #0
 8002004:	bf14      	ite	ne
 8002006:	2301      	movne	r3, #1
 8002008:	2300      	moveq	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	bf14      	ite	ne
 8002020:	2301      	movne	r3, #1
 8002022:	2300      	moveq	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002038:	2b00      	cmp	r3, #0
 800203a:	bf0c      	ite	eq
 800203c:	2301      	moveq	r3, #1
 800203e:	2300      	movne	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	461a      	mov	r2, r3
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	0c1b      	lsrs	r3, r3, #16
 8002060:	b29a      	uxth	r2, r3
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	bf14      	ite	ne
 8002074:	2301      	movne	r3, #1
 8002076:	2300      	moveq	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800208c:	2b00      	cmp	r3, #0
 800208e:	bf14      	ite	ne
 8002090:	2301      	movne	r3, #1
 8002092:	2300      	moveq	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e00b      	b.n	80020d8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020c6:	2b10      	cmp	r3, #16
 80020c8:	d105      	bne.n	80020d6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80020ca:	6839      	ldr	r1, [r7, #0]
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f8d9 	bl	8002284 <ETH_SetMACConfig>

    return HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e000      	b.n	80020d8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
  }
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 031c 	bic.w	r3, r3, #28
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80020f8:	f001 face 	bl	8003698 <HAL_RCC_GetHCLKFreq>
 80020fc:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	4a1d      	ldr	r2, [pc, #116]	; (8002178 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d908      	bls.n	8002118 <HAL_ETH_SetMDIOClockRange+0x38>
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	4a1c      	ldr	r2, [pc, #112]	; (800217c <HAL_ETH_SetMDIOClockRange+0x9c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d804      	bhi.n	8002118 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f043 0308 	orr.w	r3, r3, #8
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	e027      	b.n	8002168 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4a18      	ldr	r2, [pc, #96]	; (800217c <HAL_ETH_SetMDIOClockRange+0x9c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d908      	bls.n	8002132 <HAL_ETH_SetMDIOClockRange+0x52>
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4a17      	ldr	r2, [pc, #92]	; (8002180 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d204      	bcs.n	8002132 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f043 030c 	orr.w	r3, r3, #12
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	e01a      	b.n	8002168 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	4a12      	ldr	r2, [pc, #72]	; (8002180 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d303      	bcc.n	8002142 <HAL_ETH_SetMDIOClockRange+0x62>
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	4a11      	ldr	r2, [pc, #68]	; (8002184 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d911      	bls.n	8002166 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	4a0f      	ldr	r2, [pc, #60]	; (8002184 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d908      	bls.n	800215c <HAL_ETH_SetMDIOClockRange+0x7c>
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	4a0e      	ldr	r2, [pc, #56]	; (8002188 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d804      	bhi.n	800215c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f043 0304 	orr.w	r3, r3, #4
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	e005      	b.n	8002168 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f043 0310 	orr.w	r3, r3, #16
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	e000      	b.n	8002168 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002166:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	611a      	str	r2, [r3, #16]
}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	01312cff 	.word	0x01312cff
 800217c:	02160ebf 	.word	0x02160ebf
 8002180:	03938700 	.word	0x03938700
 8002184:	05f5e0ff 	.word	0x05f5e0ff
 8002188:	08f0d17f 	.word	0x08f0d17f

0800218c <HAL_ETH_SetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that contains
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACFilterConfig(ETH_HandleTypeDef *heth, ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t filterconfig;
  uint32_t tmpreg1;

  if (pFilterConfig == NULL)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_ETH_SetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e044      	b.n	800222a <HAL_ETH_SetMACFilterConfig+0x9e>
  }

  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	78db      	ldrb	r3, [r3, #3]
 80021aa:	005b      	lsls	r3, r3, #1
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80021ac:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	791b      	ldrb	r3, [r3, #4]
 80021b2:	009b      	lsls	r3, r3, #2
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 80021b4:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	7a1b      	ldrb	r3, [r3, #8]
 80021ba:	00db      	lsls	r3, r3, #3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 80021bc:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	795b      	ldrb	r3, [r3, #5]
 80021c2:	011b      	lsls	r3, r3, #4
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 80021c4:	4313      	orrs	r3, r2
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	7a52      	ldrb	r2, [r2, #9]
 80021ca:	2a00      	cmp	r2, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_ETH_SetMACFilterConfig+0x46>
 80021ce:	2220      	movs	r2, #32
 80021d0:	e000      	b.n	80021d4 <HAL_ETH_SetMACFilterConfig+0x48>
 80021d2:	2200      	movs	r2, #0
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 80021d4:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	79db      	ldrb	r3, [r3, #7]
 80021da:	021b      	lsls	r3, r3, #8
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 80021dc:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	799b      	ldrb	r3, [r3, #6]
 80021e2:	025b      	lsls	r3, r3, #9
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 80021e4:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	789b      	ldrb	r3, [r3, #2]
 80021ea:	029b      	lsls	r3, r3, #10
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 80021ec:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->ReceiveAllMode << 31) |
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	785b      	ldrb	r3, [r3, #1]
 80021f2:	07db      	lsls	r3, r3, #31
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 80021f4:	431a      	orrs	r2, r3
                  pFilterConfig->ControlPacketsFilter);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->MACFFR, ETH_MACFFR_MASK, filterconfig);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_ETH_SetMACFilterConfig+0xa8>)
 8002206:	4013      	ands	r3, r2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	68f9      	ldr	r1, [r7, #12]
 800220e:	430b      	orrs	r3, r1
 8002210:	6053      	str	r3, [r2, #4]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	60bb      	str	r3, [r7, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800221a:	2001      	movs	r0, #1
 800221c:	f7ff f8fe 	bl	800141c <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	7ffff800 	.word	0x7ffff800

08002238 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002256:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800225a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002268:	2001      	movs	r0, #1
 800226a:	f7ff f8d7 	bl	800141c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002278:	6193      	str	r3, [r2, #24]
}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	4b51      	ldr	r3, [pc, #324]	; (80023e0 <ETH_SetMACConfig+0x15c>)
 800229a:	4013      	ands	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	7c1b      	ldrb	r3, [r3, #16]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d102      	bne.n	80022ac <ETH_SetMACConfig+0x28>
 80022a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80022aa:	e000      	b.n	80022ae <ETH_SetMACConfig+0x2a>
 80022ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	7c5b      	ldrb	r3, [r3, #17]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d102      	bne.n	80022bc <ETH_SetMACConfig+0x38>
 80022b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022ba:	e000      	b.n	80022be <ETH_SetMACConfig+0x3a>
 80022bc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022be:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	7fdb      	ldrb	r3, [r3, #31]
 80022ca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80022cc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	7f92      	ldrb	r2, [r2, #30]
 80022d8:	2a00      	cmp	r2, #0
 80022da:	d102      	bne.n	80022e2 <ETH_SetMACConfig+0x5e>
 80022dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022e0:	e000      	b.n	80022e4 <ETH_SetMACConfig+0x60>
 80022e2:	2200      	movs	r2, #0
                        macconf->Speed |
 80022e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	7f1b      	ldrb	r3, [r3, #28]
 80022ea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022ec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	791b      	ldrb	r3, [r3, #4]
 80022f8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80022fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002302:	2a00      	cmp	r2, #0
 8002304:	d102      	bne.n	800230c <ETH_SetMACConfig+0x88>
 8002306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800230a:	e000      	b.n	800230e <ETH_SetMACConfig+0x8a>
 800230c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800230e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	7bdb      	ldrb	r3, [r3, #15]
 8002314:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002316:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800231c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002324:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002326:	4313      	orrs	r3, r2
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800233e:	2001      	movs	r0, #1
 8002340:	f7ff f86c 	bl	800141c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	f64f 7341 	movw	r3, #65345	; 0xff41
 800235a:	4013      	ands	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002362:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800236a:	2a00      	cmp	r2, #0
 800236c:	d101      	bne.n	8002372 <ETH_SetMACConfig+0xee>
 800236e:	2280      	movs	r2, #128	; 0x80
 8002370:	e000      	b.n	8002374 <ETH_SetMACConfig+0xf0>
 8002372:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002374:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800237a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002382:	2a01      	cmp	r2, #1
 8002384:	d101      	bne.n	800238a <ETH_SetMACConfig+0x106>
 8002386:	2208      	movs	r2, #8
 8002388:	e000      	b.n	800238c <ETH_SetMACConfig+0x108>
 800238a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800238c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002394:	2a01      	cmp	r2, #1
 8002396:	d101      	bne.n	800239c <ETH_SetMACConfig+0x118>
 8002398:	2204      	movs	r2, #4
 800239a:	e000      	b.n	800239e <ETH_SetMACConfig+0x11a>
 800239c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800239e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80023a6:	2a01      	cmp	r2, #1
 80023a8:	d101      	bne.n	80023ae <ETH_SetMACConfig+0x12a>
 80023aa:	2202      	movs	r2, #2
 80023ac:	e000      	b.n	80023b0 <ETH_SetMACConfig+0x12c>
 80023ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023b0:	4313      	orrs	r3, r2
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023c8:	2001      	movs	r0, #1
 80023ca:	f7ff f827 	bl	800141c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	619a      	str	r2, [r3, #24]
}
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	ff20810f 	.word	0xff20810f

080023e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4b3d      	ldr	r3, [pc, #244]	; (80024f4 <ETH_SetDMAConfig+0x110>)
 80023fe:	4013      	ands	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	7b1b      	ldrb	r3, [r3, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d102      	bne.n	8002410 <ETH_SetDMAConfig+0x2c>
 800240a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800240e:	e000      	b.n	8002412 <ETH_SetDMAConfig+0x2e>
 8002410:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	7b5b      	ldrb	r3, [r3, #13]
 8002416:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002418:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	7f52      	ldrb	r2, [r2, #29]
 800241e:	2a00      	cmp	r2, #0
 8002420:	d102      	bne.n	8002428 <ETH_SetDMAConfig+0x44>
 8002422:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002426:	e000      	b.n	800242a <ETH_SetDMAConfig+0x46>
 8002428:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800242a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	7b9b      	ldrb	r3, [r3, #14]
 8002430:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002432:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002438:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	7f1b      	ldrb	r3, [r3, #28]
 800243e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002440:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	7f9b      	ldrb	r3, [r3, #30]
 8002446:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002448:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800244e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002456:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002458:	4313      	orrs	r3, r2
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4313      	orrs	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002468:	461a      	mov	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800247a:	2001      	movs	r0, #1
 800247c:	f7fe ffce 	bl	800141c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002488:	461a      	mov	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	791b      	ldrb	r3, [r3, #4]
 8002492:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002498:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800249e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024a4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024ac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80024ae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024b6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024bc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024ca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024d8:	2001      	movs	r0, #1
 80024da:	f7fe ff9f 	bl	800141c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e6:	461a      	mov	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6013      	str	r3, [r2, #0]
}
 80024ec:	bf00      	nop
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	f8de3f23 	.word	0xf8de3f23

080024f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b0a6      	sub	sp, #152	; 0x98
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002500:	2301      	movs	r3, #1
 8002502:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002506:	2301      	movs	r3, #1
 8002508:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800250c:	2300      	movs	r3, #0
 800250e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002516:	2301      	movs	r3, #1
 8002518:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800251c:	2300      	movs	r3, #0
 800251e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002522:	2301      	movs	r3, #1
 8002524:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800252e:	2300      	movs	r3, #0
 8002530:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002534:	2300      	movs	r3, #0
 8002536:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002538:	2300      	movs	r3, #0
 800253a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800253e:	2300      	movs	r3, #0
 8002540:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002542:	2300      	movs	r3, #0
 8002544:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002548:	2300      	movs	r3, #0
 800254a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002554:	2300      	movs	r3, #0
 8002556:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800255a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800255e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002560:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002564:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002566:	2300      	movs	r3, #0
 8002568:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800256c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002570:	4619      	mov	r1, r3
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff fe86 	bl	8002284 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002578:	2301      	movs	r3, #1
 800257a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800257c:	2301      	movs	r3, #1
 800257e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002580:	2301      	movs	r3, #1
 8002582:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002586:	2301      	movs	r3, #1
 8002588:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800258e:	2300      	movs	r3, #0
 8002590:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002594:	2300      	movs	r3, #0
 8002596:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800259a:	2300      	movs	r3, #0
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800259e:	2301      	movs	r3, #1
 80025a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80025a4:	2301      	movs	r3, #1
 80025a6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80025a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025ac:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025b2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025b8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80025ba:	2301      	movs	r3, #1
 80025bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025c8:	f107 0308 	add.w	r3, r7, #8
 80025cc:	4619      	mov	r1, r3
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ff08 	bl	80023e4 <ETH_SetDMAConfig>
}
 80025d4:	bf00      	nop
 80025d6:	3798      	adds	r7, #152	; 0x98
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3305      	adds	r3, #5
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	3204      	adds	r2, #4
 80025f4:	7812      	ldrb	r2, [r2, #0]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <ETH_MACAddressConfig+0x68>)
 80025fe:	4413      	add	r3, r2
 8002600:	461a      	mov	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3303      	adds	r3, #3
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	061a      	lsls	r2, r3, #24
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3302      	adds	r3, #2
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	041b      	lsls	r3, r3, #16
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3301      	adds	r3, #1
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	021b      	lsls	r3, r3, #8
 8002620:	4313      	orrs	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	7812      	ldrb	r2, [r2, #0]
 8002626:	4313      	orrs	r3, r2
 8002628:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <ETH_MACAddressConfig+0x6c>)
 800262e:	4413      	add	r3, r2
 8002630:	461a      	mov	r2, r3
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	6013      	str	r3, [r2, #0]
}
 8002636:	bf00      	nop
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40028040 	.word	0x40028040
 8002648:	40028044 	.word	0x40028044

0800264c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	e03e      	b.n	80026d8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68d9      	ldr	r1, [r3, #12]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	440b      	add	r3, r1
 800266a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2200      	movs	r2, #0
 8002676:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2200      	movs	r2, #0
 8002682:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	3206      	adds	r2, #6
 800268c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d80c      	bhi.n	80026bc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68d9      	ldr	r1, [r3, #12]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	440b      	add	r3, r1
 80026b4:	461a      	mov	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	e004      	b.n	80026c6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	461a      	mov	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	3301      	adds	r3, #1
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d9bd      	bls.n	800265a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f0:	611a      	str	r2, [r3, #16]
}
 80026f2:	bf00      	nop
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80026fe:	b480      	push	{r7}
 8002700:	b085      	sub	sp, #20
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	e046      	b.n	800279a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6919      	ldr	r1, [r3, #16]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	440b      	add	r3, r1
 800271c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2200      	movs	r2, #0
 8002728:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2200      	movs	r2, #0
 8002734:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2200      	movs	r2, #0
 800273a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2200      	movs	r2, #0
 8002740:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002748:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002750:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	3212      	adds	r2, #18
 8002766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d80c      	bhi.n	800278a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6919      	ldr	r1, [r3, #16]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	440b      	add	r3, r1
 8002782:	461a      	mov	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	60da      	str	r2, [r3, #12]
 8002788:	e004      	b.n	8002794 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	461a      	mov	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	3301      	adds	r3, #1
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d9b5      	bls.n	800270c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ca:	60da      	str	r2, [r3, #12]
}
 80027cc:	bf00      	nop
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80027d8:	b480      	push	{r7}
 80027da:	b08d      	sub	sp, #52	; 0x34
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	3318      	adds	r3, #24
 80027e8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002802:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002816:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800281a:	d007      	beq.n	800282c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002820:	3304      	adds	r3, #4
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800282c:	2302      	movs	r3, #2
 800282e:	e103      	b.n	8002a38 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	3301      	adds	r3, #1
 8002834:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002848:	f023 031f 	bic.w	r3, r3, #31
 800284c:	69fa      	ldr	r2, [r7, #28]
 800284e:	6852      	ldr	r2, [r2, #4]
 8002850:	431a      	orrs	r2, r3
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d008      	beq.n	8002874 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	431a      	orrs	r2, r3
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0320 	and.w	r3, r3, #32
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	431a      	orrs	r2, r3
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	2b00      	cmp	r3, #0
 800289c:	d005      	beq.n	80028aa <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80028b6:	f3bf 8f5f 	dmb	sy
}
 80028ba:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80028c8:	e084      	b.n	80029d4 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d006      	beq.n	80028ea <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	e005      	b.n	80028f6 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80028f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f8:	3301      	adds	r3, #1
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fe:	2b03      	cmp	r3, #3
 8002900:	d902      	bls.n	8002908 <ETH_Prepare_Tx_Descriptors+0x130>
 8002902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002904:	3b04      	subs	r3, #4
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800290c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002910:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002926:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800292a:	d007      	beq.n	800293c <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002930:	3304      	adds	r3, #4
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d029      	beq.n	8002990 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002948:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800294a:	2300      	movs	r3, #0
 800294c:	62bb      	str	r3, [r7, #40]	; 0x28
 800294e:	e019      	b.n	8002984 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002950:	f3bf 8f5f 	dmb	sy
}
 8002954:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002964:	3301      	adds	r3, #1
 8002966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296a:	2b03      	cmp	r3, #3
 800296c:	d902      	bls.n	8002974 <ETH_Prepare_Tx_Descriptors+0x19c>
 800296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002970:	3b04      	subs	r3, #4
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800297c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	3301      	adds	r3, #1
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
 8002984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	429a      	cmp	r2, r3
 800298a:	d3e1      	bcc.n	8002950 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 800298c:	2302      	movs	r3, #2
 800298e:	e053      	b.n	8002a38 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	3301      	adds	r3, #1
 8002994:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80029ae:	f023 031f 	bic.w	r3, r3, #31
 80029b2:	69fa      	ldr	r2, [r7, #28]
 80029b4:	6852      	ldr	r2, [r2, #4]
 80029b6:	431a      	orrs	r2, r3
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	3301      	adds	r3, #1
 80029c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80029c2:	f3bf 8f5f 	dmb	sy
}
 80029c6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f47f af76 	bne.w	80028ca <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d006      	beq.n	80029f2 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	e005      	b.n	80029fe <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a0e:	6979      	ldr	r1, [r7, #20]
 8002a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a12:	3304      	adds	r3, #4
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a1e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a20:	b672      	cpsid	i
}
 8002a22:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002a32:	b662      	cpsie	i
}
 8002a34:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3734      	adds	r7, #52	; 0x34
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	; 0x24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
 8002a5e:	e177      	b.n	8002d50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a60:	2201      	movs	r2, #1
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	f040 8166 	bne.w	8002d4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d005      	beq.n	8002a96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d130      	bne.n	8002af8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002acc:	2201      	movs	r2, #1
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f003 0201 	and.w	r2, r3, #1
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d017      	beq.n	8002b34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	2203      	movs	r2, #3
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d123      	bne.n	8002b88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	08da      	lsrs	r2, r3, #3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3208      	adds	r2, #8
 8002b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	220f      	movs	r2, #15
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	08da      	lsrs	r2, r3, #3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3208      	adds	r2, #8
 8002b82:	69b9      	ldr	r1, [r7, #24]
 8002b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	2203      	movs	r2, #3
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0203 	and.w	r2, r3, #3
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80c0 	beq.w	8002d4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	4b66      	ldr	r3, [pc, #408]	; (8002d68 <HAL_GPIO_Init+0x324>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	4a65      	ldr	r2, [pc, #404]	; (8002d68 <HAL_GPIO_Init+0x324>)
 8002bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bda:	4b63      	ldr	r3, [pc, #396]	; (8002d68 <HAL_GPIO_Init+0x324>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002be6:	4a61      	ldr	r2, [pc, #388]	; (8002d6c <HAL_GPIO_Init+0x328>)
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	089b      	lsrs	r3, r3, #2
 8002bec:	3302      	adds	r3, #2
 8002bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	220f      	movs	r2, #15
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4013      	ands	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a58      	ldr	r2, [pc, #352]	; (8002d70 <HAL_GPIO_Init+0x32c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d037      	beq.n	8002c82 <HAL_GPIO_Init+0x23e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a57      	ldr	r2, [pc, #348]	; (8002d74 <HAL_GPIO_Init+0x330>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d031      	beq.n	8002c7e <HAL_GPIO_Init+0x23a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a56      	ldr	r2, [pc, #344]	; (8002d78 <HAL_GPIO_Init+0x334>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d02b      	beq.n	8002c7a <HAL_GPIO_Init+0x236>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a55      	ldr	r2, [pc, #340]	; (8002d7c <HAL_GPIO_Init+0x338>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d025      	beq.n	8002c76 <HAL_GPIO_Init+0x232>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a54      	ldr	r2, [pc, #336]	; (8002d80 <HAL_GPIO_Init+0x33c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d01f      	beq.n	8002c72 <HAL_GPIO_Init+0x22e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a53      	ldr	r2, [pc, #332]	; (8002d84 <HAL_GPIO_Init+0x340>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d019      	beq.n	8002c6e <HAL_GPIO_Init+0x22a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a52      	ldr	r2, [pc, #328]	; (8002d88 <HAL_GPIO_Init+0x344>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d013      	beq.n	8002c6a <HAL_GPIO_Init+0x226>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a51      	ldr	r2, [pc, #324]	; (8002d8c <HAL_GPIO_Init+0x348>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d00d      	beq.n	8002c66 <HAL_GPIO_Init+0x222>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a50      	ldr	r2, [pc, #320]	; (8002d90 <HAL_GPIO_Init+0x34c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d007      	beq.n	8002c62 <HAL_GPIO_Init+0x21e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4f      	ldr	r2, [pc, #316]	; (8002d94 <HAL_GPIO_Init+0x350>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d101      	bne.n	8002c5e <HAL_GPIO_Init+0x21a>
 8002c5a:	2309      	movs	r3, #9
 8002c5c:	e012      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c5e:	230a      	movs	r3, #10
 8002c60:	e010      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c62:	2308      	movs	r3, #8
 8002c64:	e00e      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c66:	2307      	movs	r3, #7
 8002c68:	e00c      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c6a:	2306      	movs	r3, #6
 8002c6c:	e00a      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c6e:	2305      	movs	r3, #5
 8002c70:	e008      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c72:	2304      	movs	r3, #4
 8002c74:	e006      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c76:	2303      	movs	r3, #3
 8002c78:	e004      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e002      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c82:	2300      	movs	r3, #0
 8002c84:	69fa      	ldr	r2, [r7, #28]
 8002c86:	f002 0203 	and.w	r2, r2, #3
 8002c8a:	0092      	lsls	r2, r2, #2
 8002c8c:	4093      	lsls	r3, r2
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c94:	4935      	ldr	r1, [pc, #212]	; (8002d6c <HAL_GPIO_Init+0x328>)
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	089b      	lsrs	r3, r3, #2
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ca2:	4b3d      	ldr	r3, [pc, #244]	; (8002d98 <HAL_GPIO_Init+0x354>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cc6:	4a34      	ldr	r2, [pc, #208]	; (8002d98 <HAL_GPIO_Init+0x354>)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ccc:	4b32      	ldr	r3, [pc, #200]	; (8002d98 <HAL_GPIO_Init+0x354>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cf0:	4a29      	ldr	r2, [pc, #164]	; (8002d98 <HAL_GPIO_Init+0x354>)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cf6:	4b28      	ldr	r3, [pc, #160]	; (8002d98 <HAL_GPIO_Init+0x354>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d1a:	4a1f      	ldr	r2, [pc, #124]	; (8002d98 <HAL_GPIO_Init+0x354>)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d20:	4b1d      	ldr	r3, [pc, #116]	; (8002d98 <HAL_GPIO_Init+0x354>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d44:	4a14      	ldr	r2, [pc, #80]	; (8002d98 <HAL_GPIO_Init+0x354>)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	2b0f      	cmp	r3, #15
 8002d54:	f67f ae84 	bls.w	8002a60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d58:	bf00      	nop
 8002d5a:	bf00      	nop
 8002d5c:	3724      	adds	r7, #36	; 0x24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40013800 	.word	0x40013800
 8002d70:	40020000 	.word	0x40020000
 8002d74:	40020400 	.word	0x40020400
 8002d78:	40020800 	.word	0x40020800
 8002d7c:	40020c00 	.word	0x40020c00
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40021400 	.word	0x40021400
 8002d88:	40021800 	.word	0x40021800
 8002d8c:	40021c00 	.word	0x40021c00
 8002d90:	40022000 	.word	0x40022000
 8002d94:	40022400 	.word	0x40022400
 8002d98:	40013c00 	.word	0x40013c00

08002d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	807b      	strh	r3, [r7, #2]
 8002da8:	4613      	mov	r3, r2
 8002daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dac:	787b      	ldrb	r3, [r7, #1]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002db2:	887a      	ldrh	r2, [r7, #2]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002db8:	e003      	b.n	8002dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dba:	887b      	ldrh	r3, [r7, #2]
 8002dbc:	041a      	lsls	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	619a      	str	r2, [r3, #24]
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
	...

08002dd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e267      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d075      	beq.n	8002eda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dee:	4b88      	ldr	r3, [pc, #544]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d00c      	beq.n	8002e14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dfa:	4b85      	ldr	r3, [pc, #532]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d112      	bne.n	8002e2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e06:	4b82      	ldr	r3, [pc, #520]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e12:	d10b      	bne.n	8002e2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e14:	4b7e      	ldr	r3, [pc, #504]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d05b      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x108>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d157      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e242      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e34:	d106      	bne.n	8002e44 <HAL_RCC_OscConfig+0x74>
 8002e36:	4b76      	ldr	r3, [pc, #472]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a75      	ldr	r2, [pc, #468]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	e01d      	b.n	8002e80 <HAL_RCC_OscConfig+0xb0>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x98>
 8002e4e:	4b70      	ldr	r3, [pc, #448]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a6f      	ldr	r2, [pc, #444]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	4b6d      	ldr	r3, [pc, #436]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a6c      	ldr	r2, [pc, #432]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e00b      	b.n	8002e80 <HAL_RCC_OscConfig+0xb0>
 8002e68:	4b69      	ldr	r3, [pc, #420]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a68      	ldr	r2, [pc, #416]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	4b66      	ldr	r3, [pc, #408]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a65      	ldr	r2, [pc, #404]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d013      	beq.n	8002eb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e88:	f7fe fabc 	bl	8001404 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e90:	f7fe fab8 	bl	8001404 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b64      	cmp	r3, #100	; 0x64
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e207      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	4b5b      	ldr	r3, [pc, #364]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0xc0>
 8002eae:	e014      	b.n	8002eda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7fe faa8 	bl	8001404 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eb8:	f7fe faa4 	bl	8001404 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b64      	cmp	r3, #100	; 0x64
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e1f3      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eca:	4b51      	ldr	r3, [pc, #324]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0xe8>
 8002ed6:	e000      	b.n	8002eda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d063      	beq.n	8002fae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ee6:	4b4a      	ldr	r3, [pc, #296]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 030c 	and.w	r3, r3, #12
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00b      	beq.n	8002f0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ef2:	4b47      	ldr	r3, [pc, #284]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d11c      	bne.n	8002f38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002efe:	4b44      	ldr	r3, [pc, #272]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d116      	bne.n	8002f38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0a:	4b41      	ldr	r3, [pc, #260]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d005      	beq.n	8002f22 <HAL_RCC_OscConfig+0x152>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d001      	beq.n	8002f22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e1c7      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f22:	4b3b      	ldr	r3, [pc, #236]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4937      	ldr	r1, [pc, #220]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f36:	e03a      	b.n	8002fae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d020      	beq.n	8002f82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f40:	4b34      	ldr	r3, [pc, #208]	; (8003014 <HAL_RCC_OscConfig+0x244>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f46:	f7fe fa5d 	bl	8001404 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f4e:	f7fe fa59 	bl	8001404 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e1a8      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f60:	4b2b      	ldr	r3, [pc, #172]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f0      	beq.n	8002f4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6c:	4b28      	ldr	r3, [pc, #160]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4925      	ldr	r1, [pc, #148]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	600b      	str	r3, [r1, #0]
 8002f80:	e015      	b.n	8002fae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f82:	4b24      	ldr	r3, [pc, #144]	; (8003014 <HAL_RCC_OscConfig+0x244>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fe fa3c 	bl	8001404 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f90:	f7fe fa38 	bl	8001404 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e187      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa2:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d036      	beq.n	8003028 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d016      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fc2:	4b15      	ldr	r3, [pc, #84]	; (8003018 <HAL_RCC_OscConfig+0x248>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc8:	f7fe fa1c 	bl	8001404 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fd0:	f7fe fa18 	bl	8001404 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e167      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x200>
 8002fee:	e01b      	b.n	8003028 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff0:	4b09      	ldr	r3, [pc, #36]	; (8003018 <HAL_RCC_OscConfig+0x248>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff6:	f7fe fa05 	bl	8001404 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ffc:	e00e      	b.n	800301c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ffe:	f7fe fa01 	bl	8001404 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d907      	bls.n	800301c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e150      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
 8003010:	40023800 	.word	0x40023800
 8003014:	42470000 	.word	0x42470000
 8003018:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800301c:	4b88      	ldr	r3, [pc, #544]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 800301e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1ea      	bne.n	8002ffe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8097 	beq.w	8003164 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003036:	2300      	movs	r3, #0
 8003038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800303a:	4b81      	ldr	r3, [pc, #516]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10f      	bne.n	8003066 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	4b7d      	ldr	r3, [pc, #500]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	4a7c      	ldr	r2, [pc, #496]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 8003050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003054:	6413      	str	r3, [r2, #64]	; 0x40
 8003056:	4b7a      	ldr	r3, [pc, #488]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003062:	2301      	movs	r3, #1
 8003064:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003066:	4b77      	ldr	r3, [pc, #476]	; (8003244 <HAL_RCC_OscConfig+0x474>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d118      	bne.n	80030a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003072:	4b74      	ldr	r3, [pc, #464]	; (8003244 <HAL_RCC_OscConfig+0x474>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a73      	ldr	r2, [pc, #460]	; (8003244 <HAL_RCC_OscConfig+0x474>)
 8003078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800307e:	f7fe f9c1 	bl	8001404 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003086:	f7fe f9bd 	bl	8001404 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e10c      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003098:	4b6a      	ldr	r3, [pc, #424]	; (8003244 <HAL_RCC_OscConfig+0x474>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d106      	bne.n	80030ba <HAL_RCC_OscConfig+0x2ea>
 80030ac:	4b64      	ldr	r3, [pc, #400]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b0:	4a63      	ldr	r2, [pc, #396]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	6713      	str	r3, [r2, #112]	; 0x70
 80030b8:	e01c      	b.n	80030f4 <HAL_RCC_OscConfig+0x324>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b05      	cmp	r3, #5
 80030c0:	d10c      	bne.n	80030dc <HAL_RCC_OscConfig+0x30c>
 80030c2:	4b5f      	ldr	r3, [pc, #380]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 80030c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c6:	4a5e      	ldr	r2, [pc, #376]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 80030c8:	f043 0304 	orr.w	r3, r3, #4
 80030cc:	6713      	str	r3, [r2, #112]	; 0x70
 80030ce:	4b5c      	ldr	r3, [pc, #368]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d2:	4a5b      	ldr	r2, [pc, #364]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6713      	str	r3, [r2, #112]	; 0x70
 80030da:	e00b      	b.n	80030f4 <HAL_RCC_OscConfig+0x324>
 80030dc:	4b58      	ldr	r3, [pc, #352]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 80030de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e0:	4a57      	ldr	r2, [pc, #348]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	6713      	str	r3, [r2, #112]	; 0x70
 80030e8:	4b55      	ldr	r3, [pc, #340]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 80030ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ec:	4a54      	ldr	r2, [pc, #336]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 80030ee:	f023 0304 	bic.w	r3, r3, #4
 80030f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d015      	beq.n	8003128 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fc:	f7fe f982 	bl	8001404 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003102:	e00a      	b.n	800311a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003104:	f7fe f97e 	bl	8001404 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003112:	4293      	cmp	r3, r2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e0cb      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311a:	4b49      	ldr	r3, [pc, #292]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0ee      	beq.n	8003104 <HAL_RCC_OscConfig+0x334>
 8003126:	e014      	b.n	8003152 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003128:	f7fe f96c 	bl	8001404 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800312e:	e00a      	b.n	8003146 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003130:	f7fe f968 	bl	8001404 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f241 3288 	movw	r2, #5000	; 0x1388
 800313e:	4293      	cmp	r3, r2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e0b5      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003146:	4b3e      	ldr	r3, [pc, #248]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 8003148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1ee      	bne.n	8003130 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003152:	7dfb      	ldrb	r3, [r7, #23]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d105      	bne.n	8003164 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003158:	4b39      	ldr	r3, [pc, #228]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	4a38      	ldr	r2, [pc, #224]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 800315e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003162:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80a1 	beq.w	80032b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800316e:	4b34      	ldr	r3, [pc, #208]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b08      	cmp	r3, #8
 8003178:	d05c      	beq.n	8003234 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d141      	bne.n	8003206 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003182:	4b31      	ldr	r3, [pc, #196]	; (8003248 <HAL_RCC_OscConfig+0x478>)
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7fe f93c 	bl	8001404 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003190:	f7fe f938 	bl	8001404 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e087      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a2:	4b27      	ldr	r3, [pc, #156]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69da      	ldr	r2, [r3, #28]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	019b      	lsls	r3, r3, #6
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	085b      	lsrs	r3, r3, #1
 80031c6:	3b01      	subs	r3, #1
 80031c8:	041b      	lsls	r3, r3, #16
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	061b      	lsls	r3, r3, #24
 80031d2:	491b      	ldr	r1, [pc, #108]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d8:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_RCC_OscConfig+0x478>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031de:	f7fe f911 	bl	8001404 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e6:	f7fe f90d 	bl	8001404 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e05c      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f8:	4b11      	ldr	r3, [pc, #68]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f0      	beq.n	80031e6 <HAL_RCC_OscConfig+0x416>
 8003204:	e054      	b.n	80032b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003206:	4b10      	ldr	r3, [pc, #64]	; (8003248 <HAL_RCC_OscConfig+0x478>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7fe f8fa 	bl	8001404 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003214:	f7fe f8f6 	bl	8001404 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e045      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003226:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HAL_RCC_OscConfig+0x470>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x444>
 8003232:	e03d      	b.n	80032b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d107      	bne.n	800324c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e038      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
 8003240:	40023800 	.word	0x40023800
 8003244:	40007000 	.word	0x40007000
 8003248:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800324c:	4b1b      	ldr	r3, [pc, #108]	; (80032bc <HAL_RCC_OscConfig+0x4ec>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d028      	beq.n	80032ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003264:	429a      	cmp	r2, r3
 8003266:	d121      	bne.n	80032ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003272:	429a      	cmp	r2, r3
 8003274:	d11a      	bne.n	80032ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800327c:	4013      	ands	r3, r2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003282:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003284:	4293      	cmp	r3, r2
 8003286:	d111      	bne.n	80032ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003292:	085b      	lsrs	r3, r3, #1
 8003294:	3b01      	subs	r3, #1
 8003296:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003298:	429a      	cmp	r2, r3
 800329a:	d107      	bne.n	80032ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d001      	beq.n	80032b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e000      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40023800 	.word	0x40023800

080032c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0cc      	b.n	800346e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032d4:	4b68      	ldr	r3, [pc, #416]	; (8003478 <HAL_RCC_ClockConfig+0x1b8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d90c      	bls.n	80032fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e2:	4b65      	ldr	r3, [pc, #404]	; (8003478 <HAL_RCC_ClockConfig+0x1b8>)
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ea:	4b63      	ldr	r3, [pc, #396]	; (8003478 <HAL_RCC_ClockConfig+0x1b8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d001      	beq.n	80032fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0b8      	b.n	800346e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d020      	beq.n	800334a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003314:	4b59      	ldr	r3, [pc, #356]	; (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	4a58      	ldr	r2, [pc, #352]	; (800347c <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800331e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800332c:	4b53      	ldr	r3, [pc, #332]	; (800347c <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	4a52      	ldr	r2, [pc, #328]	; (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003336:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003338:	4b50      	ldr	r3, [pc, #320]	; (800347c <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	494d      	ldr	r1, [pc, #308]	; (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	4313      	orrs	r3, r2
 8003348:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d044      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d107      	bne.n	800336e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335e:	4b47      	ldr	r3, [pc, #284]	; (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d119      	bne.n	800339e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e07f      	b.n	800346e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d003      	beq.n	800337e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800337a:	2b03      	cmp	r3, #3
 800337c:	d107      	bne.n	800338e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800337e:	4b3f      	ldr	r3, [pc, #252]	; (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d109      	bne.n	800339e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e06f      	b.n	800346e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338e:	4b3b      	ldr	r3, [pc, #236]	; (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e067      	b.n	800346e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800339e:	4b37      	ldr	r3, [pc, #220]	; (800347c <HAL_RCC_ClockConfig+0x1bc>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f023 0203 	bic.w	r2, r3, #3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	4934      	ldr	r1, [pc, #208]	; (800347c <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033b0:	f7fe f828 	bl	8001404 <HAL_GetTick>
 80033b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b6:	e00a      	b.n	80033ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b8:	f7fe f824 	bl	8001404 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e04f      	b.n	800346e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ce:	4b2b      	ldr	r3, [pc, #172]	; (800347c <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 020c 	and.w	r2, r3, #12
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	429a      	cmp	r2, r3
 80033de:	d1eb      	bne.n	80033b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033e0:	4b25      	ldr	r3, [pc, #148]	; (8003478 <HAL_RCC_ClockConfig+0x1b8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 030f 	and.w	r3, r3, #15
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d20c      	bcs.n	8003408 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ee:	4b22      	ldr	r3, [pc, #136]	; (8003478 <HAL_RCC_ClockConfig+0x1b8>)
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f6:	4b20      	ldr	r3, [pc, #128]	; (8003478 <HAL_RCC_ClockConfig+0x1b8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e032      	b.n	800346e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003414:	4b19      	ldr	r3, [pc, #100]	; (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	4916      	ldr	r1, [pc, #88]	; (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	4313      	orrs	r3, r2
 8003424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d009      	beq.n	8003446 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003432:	4b12      	ldr	r3, [pc, #72]	; (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	490e      	ldr	r1, [pc, #56]	; (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	4313      	orrs	r3, r2
 8003444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003446:	f000 f821 	bl	800348c <HAL_RCC_GetSysClockFreq>
 800344a:	4602      	mov	r2, r0
 800344c:	4b0b      	ldr	r3, [pc, #44]	; (800347c <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	091b      	lsrs	r3, r3, #4
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	490a      	ldr	r1, [pc, #40]	; (8003480 <HAL_RCC_ClockConfig+0x1c0>)
 8003458:	5ccb      	ldrb	r3, [r1, r3]
 800345a:	fa22 f303 	lsr.w	r3, r2, r3
 800345e:	4a09      	ldr	r2, [pc, #36]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 8003460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003462:	4b09      	ldr	r3, [pc, #36]	; (8003488 <HAL_RCC_ClockConfig+0x1c8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fd ff88 	bl	800137c <HAL_InitTick>

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40023c00 	.word	0x40023c00
 800347c:	40023800 	.word	0x40023800
 8003480:	08012924 	.word	0x08012924
 8003484:	20000058 	.word	0x20000058
 8003488:	2000005c 	.word	0x2000005c

0800348c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800348c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003490:	b094      	sub	sp, #80	; 0x50
 8003492:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	647b      	str	r3, [r7, #68]	; 0x44
 8003498:	2300      	movs	r3, #0
 800349a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800349c:	2300      	movs	r3, #0
 800349e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034a4:	4b79      	ldr	r3, [pc, #484]	; (800368c <HAL_RCC_GetSysClockFreq+0x200>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 030c 	and.w	r3, r3, #12
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d00d      	beq.n	80034cc <HAL_RCC_GetSysClockFreq+0x40>
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	f200 80e1 	bhi.w	8003678 <HAL_RCC_GetSysClockFreq+0x1ec>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <HAL_RCC_GetSysClockFreq+0x34>
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d003      	beq.n	80034c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80034be:	e0db      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034c0:	4b73      	ldr	r3, [pc, #460]	; (8003690 <HAL_RCC_GetSysClockFreq+0x204>)
 80034c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80034c4:	e0db      	b.n	800367e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034c6:	4b73      	ldr	r3, [pc, #460]	; (8003694 <HAL_RCC_GetSysClockFreq+0x208>)
 80034c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034ca:	e0d8      	b.n	800367e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034cc:	4b6f      	ldr	r3, [pc, #444]	; (800368c <HAL_RCC_GetSysClockFreq+0x200>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034d6:	4b6d      	ldr	r3, [pc, #436]	; (800368c <HAL_RCC_GetSysClockFreq+0x200>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d063      	beq.n	80035aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e2:	4b6a      	ldr	r3, [pc, #424]	; (800368c <HAL_RCC_GetSysClockFreq+0x200>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	099b      	lsrs	r3, r3, #6
 80034e8:	2200      	movs	r2, #0
 80034ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80034ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f4:	633b      	str	r3, [r7, #48]	; 0x30
 80034f6:	2300      	movs	r3, #0
 80034f8:	637b      	str	r3, [r7, #52]	; 0x34
 80034fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034fe:	4622      	mov	r2, r4
 8003500:	462b      	mov	r3, r5
 8003502:	f04f 0000 	mov.w	r0, #0
 8003506:	f04f 0100 	mov.w	r1, #0
 800350a:	0159      	lsls	r1, r3, #5
 800350c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003510:	0150      	lsls	r0, r2, #5
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4621      	mov	r1, r4
 8003518:	1a51      	subs	r1, r2, r1
 800351a:	6139      	str	r1, [r7, #16]
 800351c:	4629      	mov	r1, r5
 800351e:	eb63 0301 	sbc.w	r3, r3, r1
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003530:	4659      	mov	r1, fp
 8003532:	018b      	lsls	r3, r1, #6
 8003534:	4651      	mov	r1, sl
 8003536:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800353a:	4651      	mov	r1, sl
 800353c:	018a      	lsls	r2, r1, #6
 800353e:	4651      	mov	r1, sl
 8003540:	ebb2 0801 	subs.w	r8, r2, r1
 8003544:	4659      	mov	r1, fp
 8003546:	eb63 0901 	sbc.w	r9, r3, r1
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003556:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800355a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800355e:	4690      	mov	r8, r2
 8003560:	4699      	mov	r9, r3
 8003562:	4623      	mov	r3, r4
 8003564:	eb18 0303 	adds.w	r3, r8, r3
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	462b      	mov	r3, r5
 800356c:	eb49 0303 	adc.w	r3, r9, r3
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800357e:	4629      	mov	r1, r5
 8003580:	024b      	lsls	r3, r1, #9
 8003582:	4621      	mov	r1, r4
 8003584:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003588:	4621      	mov	r1, r4
 800358a:	024a      	lsls	r2, r1, #9
 800358c:	4610      	mov	r0, r2
 800358e:	4619      	mov	r1, r3
 8003590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003592:	2200      	movs	r2, #0
 8003594:	62bb      	str	r3, [r7, #40]	; 0x28
 8003596:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003598:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800359c:	f7fc fe78 	bl	8000290 <__aeabi_uldivmod>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4613      	mov	r3, r2
 80035a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035a8:	e058      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035aa:	4b38      	ldr	r3, [pc, #224]	; (800368c <HAL_RCC_GetSysClockFreq+0x200>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	099b      	lsrs	r3, r3, #6
 80035b0:	2200      	movs	r2, #0
 80035b2:	4618      	mov	r0, r3
 80035b4:	4611      	mov	r1, r2
 80035b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035ba:	623b      	str	r3, [r7, #32]
 80035bc:	2300      	movs	r3, #0
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
 80035c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035c4:	4642      	mov	r2, r8
 80035c6:	464b      	mov	r3, r9
 80035c8:	f04f 0000 	mov.w	r0, #0
 80035cc:	f04f 0100 	mov.w	r1, #0
 80035d0:	0159      	lsls	r1, r3, #5
 80035d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d6:	0150      	lsls	r0, r2, #5
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4641      	mov	r1, r8
 80035de:	ebb2 0a01 	subs.w	sl, r2, r1
 80035e2:	4649      	mov	r1, r9
 80035e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035fc:	ebb2 040a 	subs.w	r4, r2, sl
 8003600:	eb63 050b 	sbc.w	r5, r3, fp
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	00eb      	lsls	r3, r5, #3
 800360e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003612:	00e2      	lsls	r2, r4, #3
 8003614:	4614      	mov	r4, r2
 8003616:	461d      	mov	r5, r3
 8003618:	4643      	mov	r3, r8
 800361a:	18e3      	adds	r3, r4, r3
 800361c:	603b      	str	r3, [r7, #0]
 800361e:	464b      	mov	r3, r9
 8003620:	eb45 0303 	adc.w	r3, r5, r3
 8003624:	607b      	str	r3, [r7, #4]
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	f04f 0300 	mov.w	r3, #0
 800362e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003632:	4629      	mov	r1, r5
 8003634:	028b      	lsls	r3, r1, #10
 8003636:	4621      	mov	r1, r4
 8003638:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800363c:	4621      	mov	r1, r4
 800363e:	028a      	lsls	r2, r1, #10
 8003640:	4610      	mov	r0, r2
 8003642:	4619      	mov	r1, r3
 8003644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003646:	2200      	movs	r2, #0
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	61fa      	str	r2, [r7, #28]
 800364c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003650:	f7fc fe1e 	bl	8000290 <__aeabi_uldivmod>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4613      	mov	r3, r2
 800365a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_RCC_GetSysClockFreq+0x200>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	0c1b      	lsrs	r3, r3, #16
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	3301      	adds	r3, #1
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800366c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800366e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003670:	fbb2 f3f3 	udiv	r3, r2, r3
 8003674:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003676:	e002      	b.n	800367e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003678:	4b05      	ldr	r3, [pc, #20]	; (8003690 <HAL_RCC_GetSysClockFreq+0x204>)
 800367a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800367c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800367e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003680:	4618      	mov	r0, r3
 8003682:	3750      	adds	r7, #80	; 0x50
 8003684:	46bd      	mov	sp, r7
 8003686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800368a:	bf00      	nop
 800368c:	40023800 	.word	0x40023800
 8003690:	00f42400 	.word	0x00f42400
 8003694:	007a1200 	.word	0x007a1200

08003698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800369c:	4b03      	ldr	r3, [pc, #12]	; (80036ac <HAL_RCC_GetHCLKFreq+0x14>)
 800369e:	681b      	ldr	r3, [r3, #0]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	20000058 	.word	0x20000058

080036b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036b4:	f7ff fff0 	bl	8003698 <HAL_RCC_GetHCLKFreq>
 80036b8:	4602      	mov	r2, r0
 80036ba:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	0a9b      	lsrs	r3, r3, #10
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	4903      	ldr	r1, [pc, #12]	; (80036d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036c6:	5ccb      	ldrb	r3, [r1, r3]
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40023800 	.word	0x40023800
 80036d4:	08012934 	.word	0x08012934

080036d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036dc:	f7ff ffdc 	bl	8003698 <HAL_RCC_GetHCLKFreq>
 80036e0:	4602      	mov	r2, r0
 80036e2:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	0b5b      	lsrs	r3, r3, #13
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	4903      	ldr	r1, [pc, #12]	; (80036fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ee:	5ccb      	ldrb	r3, [r1, r3]
 80036f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40023800 	.word	0x40023800
 80036fc:	08012934 	.word	0x08012934

08003700 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e03f      	b.n	8003792 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7fd fb14 	bl	8000d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2224      	movs	r2, #36	; 0x24
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003742:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 fcbf 	bl	80040c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003758:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695a      	ldr	r2, [r3, #20]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003768:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003778:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2220      	movs	r2, #32
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	4613      	mov	r3, r2
 80037a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	d130      	bne.n	8003816 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_UART_Transmit_IT+0x26>
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e029      	b.n	8003818 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_UART_Transmit_IT+0x38>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e022      	b.n	8003818 <HAL_UART_Transmit_IT+0x7e>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	88fa      	ldrh	r2, [r7, #6]
 80037e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	88fa      	ldrh	r2, [r7, #6]
 80037ea:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2221      	movs	r2, #33	; 0x21
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003810:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	e000      	b.n	8003818 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003816:	2302      	movs	r3, #2
  }
}
 8003818:	4618      	mov	r0, r3
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b0ba      	sub	sp, #232	; 0xe8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800384a:	2300      	movs	r3, #0
 800384c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003850:	2300      	movs	r3, #0
 8003852:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10f      	bne.n	800388a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800386a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <HAL_UART_IRQHandler+0x66>
 8003876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800387a:	f003 0320 	and.w	r3, r3, #32
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fb65 	bl	8003f52 <UART_Receive_IT>
      return;
 8003888:	e256      	b.n	8003d38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800388a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 80de 	beq.w	8003a50 <HAL_UART_IRQHandler+0x22c>
 8003894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d106      	bne.n	80038ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 80d1 	beq.w	8003a50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00b      	beq.n	80038d2 <HAL_UART_IRQHandler+0xae>
 80038ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f043 0201 	orr.w	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038d6:	f003 0304 	and.w	r3, r3, #4
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00b      	beq.n	80038f6 <HAL_UART_IRQHandler+0xd2>
 80038de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	f043 0202 	orr.w	r2, r3, #2
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00b      	beq.n	800391a <HAL_UART_IRQHandler+0xf6>
 8003902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f043 0204 	orr.w	r2, r3, #4
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800391a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d011      	beq.n	800394a <HAL_UART_IRQHandler+0x126>
 8003926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b00      	cmp	r3, #0
 8003930:	d105      	bne.n	800393e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d005      	beq.n	800394a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f043 0208 	orr.w	r2, r3, #8
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 81ed 	beq.w	8003d2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <HAL_UART_IRQHandler+0x14e>
 8003960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 faf0 	bl	8003f52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397c:	2b40      	cmp	r3, #64	; 0x40
 800397e:	bf0c      	ite	eq
 8003980:	2301      	moveq	r3, #1
 8003982:	2300      	movne	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d103      	bne.n	800399e <HAL_UART_IRQHandler+0x17a>
 8003996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800399a:	2b00      	cmp	r3, #0
 800399c:	d04f      	beq.n	8003a3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f9f8 	bl	8003d94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ae:	2b40      	cmp	r3, #64	; 0x40
 80039b0:	d141      	bne.n	8003a36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3314      	adds	r3, #20
 80039b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039c0:	e853 3f00 	ldrex	r3, [r3]
 80039c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80039c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3314      	adds	r3, #20
 80039da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80039de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80039e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80039ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80039ee:	e841 2300 	strex	r3, r2, [r1]
 80039f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1d9      	bne.n	80039b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d013      	beq.n	8003a2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0a:	4a7d      	ldr	r2, [pc, #500]	; (8003c00 <HAL_UART_IRQHandler+0x3dc>)
 8003a0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fd fea7 	bl	8001766 <HAL_DMA_Abort_IT>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d016      	beq.n	8003a4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a28:	4610      	mov	r0, r2
 8003a2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a2c:	e00e      	b.n	8003a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f99a 	bl	8003d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a34:	e00a      	b.n	8003a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f996 	bl	8003d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a3c:	e006      	b.n	8003a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f992 	bl	8003d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a4a:	e170      	b.n	8003d2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a4c:	bf00      	nop
    return;
 8003a4e:	e16e      	b.n	8003d2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	f040 814a 	bne.w	8003cee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 8143 	beq.w	8003cee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a6c:	f003 0310 	and.w	r3, r3, #16
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 813c 	beq.w	8003cee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a76:	2300      	movs	r3, #0
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	60bb      	str	r3, [r7, #8]
 8003a8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b40      	cmp	r3, #64	; 0x40
 8003a98:	f040 80b4 	bne.w	8003c04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003aa8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 8140 	beq.w	8003d32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ab6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003aba:	429a      	cmp	r2, r3
 8003abc:	f080 8139 	bcs.w	8003d32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ac6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad2:	f000 8088 	beq.w	8003be6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	330c      	adds	r3, #12
 8003adc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003aec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003af4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	330c      	adds	r3, #12
 8003afe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b12:	e841 2300 	strex	r3, r2, [r1]
 8003b16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1d9      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3314      	adds	r3, #20
 8003b28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b2c:	e853 3f00 	ldrex	r3, [r3]
 8003b30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b34:	f023 0301 	bic.w	r3, r3, #1
 8003b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3314      	adds	r3, #20
 8003b42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e1      	bne.n	8003b22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3314      	adds	r3, #20
 8003b64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3314      	adds	r3, #20
 8003b7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b8a:	e841 2300 	strex	r3, r2, [r1]
 8003b8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1e3      	bne.n	8003b5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	330c      	adds	r3, #12
 8003baa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bae:	e853 3f00 	ldrex	r3, [r3]
 8003bb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bb6:	f023 0310 	bic.w	r3, r3, #16
 8003bba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	330c      	adds	r3, #12
 8003bc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003bc8:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bd0:	e841 2300 	strex	r3, r2, [r1]
 8003bd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e3      	bne.n	8003ba4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fd fd50 	bl	8001686 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f8c0 	bl	8003d7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bfc:	e099      	b.n	8003d32 <HAL_UART_IRQHandler+0x50e>
 8003bfe:	bf00      	nop
 8003c00:	08003e5b 	.word	0x08003e5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 808b 	beq.w	8003d36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003c20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 8086 	beq.w	8003d36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	330c      	adds	r3, #12
 8003c30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	330c      	adds	r3, #12
 8003c4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c4e:	647a      	str	r2, [r7, #68]	; 0x44
 8003c50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e3      	bne.n	8003c2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3314      	adds	r3, #20
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	e853 3f00 	ldrex	r3, [r3]
 8003c70:	623b      	str	r3, [r7, #32]
   return(result);
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	f023 0301 	bic.w	r3, r3, #1
 8003c78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3314      	adds	r3, #20
 8003c82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c86:	633a      	str	r2, [r7, #48]	; 0x30
 8003c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c8e:	e841 2300 	strex	r3, r2, [r1]
 8003c92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1e3      	bne.n	8003c62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	330c      	adds	r3, #12
 8003cae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	e853 3f00 	ldrex	r3, [r3]
 8003cb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 0310 	bic.w	r3, r3, #16
 8003cbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	330c      	adds	r3, #12
 8003cc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ccc:	61fa      	str	r2, [r7, #28]
 8003cce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd0:	69b9      	ldr	r1, [r7, #24]
 8003cd2:	69fa      	ldr	r2, [r7, #28]
 8003cd4:	e841 2300 	strex	r3, r2, [r1]
 8003cd8:	617b      	str	r3, [r7, #20]
   return(result);
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1e3      	bne.n	8003ca8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ce0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f848 	bl	8003d7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cec:	e023      	b.n	8003d36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d009      	beq.n	8003d0e <HAL_UART_IRQHandler+0x4ea>
 8003cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f8bb 	bl	8003e82 <UART_Transmit_IT>
    return;
 8003d0c:	e014      	b.n	8003d38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00e      	beq.n	8003d38 <HAL_UART_IRQHandler+0x514>
 8003d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d008      	beq.n	8003d38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f8fb 	bl	8003f22 <UART_EndTransmit_IT>
    return;
 8003d2c:	e004      	b.n	8003d38 <HAL_UART_IRQHandler+0x514>
    return;
 8003d2e:	bf00      	nop
 8003d30:	e002      	b.n	8003d38 <HAL_UART_IRQHandler+0x514>
      return;
 8003d32:	bf00      	nop
 8003d34:	e000      	b.n	8003d38 <HAL_UART_IRQHandler+0x514>
      return;
 8003d36:	bf00      	nop
  }
}
 8003d38:	37e8      	adds	r7, #232	; 0xe8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop

08003d40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b095      	sub	sp, #84	; 0x54
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	330c      	adds	r3, #12
 8003da2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	330c      	adds	r3, #12
 8003dba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dbc:	643a      	str	r2, [r7, #64]	; 0x40
 8003dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003dc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dc4:	e841 2300 	strex	r3, r2, [r1]
 8003dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e5      	bne.n	8003d9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3314      	adds	r3, #20
 8003dd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	61fb      	str	r3, [r7, #28]
   return(result);
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f023 0301 	bic.w	r3, r3, #1
 8003de6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3314      	adds	r3, #20
 8003dee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003df0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003df8:	e841 2300 	strex	r3, r2, [r1]
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e5      	bne.n	8003dd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d119      	bne.n	8003e40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	330c      	adds	r3, #12
 8003e12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f023 0310 	bic.w	r3, r3, #16
 8003e22:	647b      	str	r3, [r7, #68]	; 0x44
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	330c      	adds	r3, #12
 8003e2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e2c:	61ba      	str	r2, [r7, #24]
 8003e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	6979      	ldr	r1, [r7, #20]
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	613b      	str	r3, [r7, #16]
   return(result);
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e5      	bne.n	8003e0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e4e:	bf00      	nop
 8003e50:	3754      	adds	r7, #84	; 0x54
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f7ff ff77 	bl	8003d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b085      	sub	sp, #20
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b21      	cmp	r3, #33	; 0x21
 8003e94:	d13e      	bne.n	8003f14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9e:	d114      	bne.n	8003eca <UART_Transmit_IT+0x48>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d110      	bne.n	8003eca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ebc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	1c9a      	adds	r2, r3, #2
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	621a      	str	r2, [r3, #32]
 8003ec8:	e008      	b.n	8003edc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	1c59      	adds	r1, r3, #1
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6211      	str	r1, [r2, #32]
 8003ed4:	781a      	ldrb	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10f      	bne.n	8003f10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003efe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e000      	b.n	8003f16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f14:	2302      	movs	r3, #2
  }
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff fefc 	bl	8003d40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b08c      	sub	sp, #48	; 0x30
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b22      	cmp	r3, #34	; 0x22
 8003f64:	f040 80ab 	bne.w	80040be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f70:	d117      	bne.n	8003fa2 <UART_Receive_IT+0x50>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d113      	bne.n	8003fa2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	1c9a      	adds	r2, r3, #2
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	629a      	str	r2, [r3, #40]	; 0x28
 8003fa0:	e026      	b.n	8003ff0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb4:	d007      	beq.n	8003fc6 <UART_Receive_IT+0x74>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10a      	bne.n	8003fd4 <UART_Receive_IT+0x82>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d106      	bne.n	8003fd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd0:	701a      	strb	r2, [r3, #0]
 8003fd2:	e008      	b.n	8003fe6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004000:	2b00      	cmp	r3, #0
 8004002:	d15a      	bne.n	80040ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0220 	bic.w	r2, r2, #32
 8004012:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0201 	bic.w	r2, r2, #1
 8004032:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	2b01      	cmp	r3, #1
 8004042:	d135      	bne.n	80040b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	e853 3f00 	ldrex	r3, [r3]
 8004058:	613b      	str	r3, [r7, #16]
   return(result);
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f023 0310 	bic.w	r3, r3, #16
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	330c      	adds	r3, #12
 8004068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406a:	623a      	str	r2, [r7, #32]
 800406c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	69f9      	ldr	r1, [r7, #28]
 8004070:	6a3a      	ldr	r2, [r7, #32]
 8004072:	e841 2300 	strex	r3, r2, [r1]
 8004076:	61bb      	str	r3, [r7, #24]
   return(result);
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e5      	bne.n	800404a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	2b10      	cmp	r3, #16
 800408a:	d10a      	bne.n	80040a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040a6:	4619      	mov	r1, r3
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff fe67 	bl	8003d7c <HAL_UARTEx_RxEventCallback>
 80040ae:	e002      	b.n	80040b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff fe4f 	bl	8003d54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	e002      	b.n	80040c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e000      	b.n	80040c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80040be:	2302      	movs	r3, #2
  }
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3730      	adds	r7, #48	; 0x30
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040cc:	b0c0      	sub	sp, #256	; 0x100
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e4:	68d9      	ldr	r1, [r3, #12]
 80040e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	ea40 0301 	orr.w	r3, r0, r1
 80040f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	431a      	orrs	r2, r3
 8004100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	431a      	orrs	r2, r3
 8004108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004120:	f021 010c 	bic.w	r1, r1, #12
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800412e:	430b      	orrs	r3, r1
 8004130:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800413e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004142:	6999      	ldr	r1, [r3, #24]
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	ea40 0301 	orr.w	r3, r0, r1
 800414e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	4b8f      	ldr	r3, [pc, #572]	; (8004394 <UART_SetConfig+0x2cc>)
 8004158:	429a      	cmp	r2, r3
 800415a:	d005      	beq.n	8004168 <UART_SetConfig+0xa0>
 800415c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	4b8d      	ldr	r3, [pc, #564]	; (8004398 <UART_SetConfig+0x2d0>)
 8004164:	429a      	cmp	r2, r3
 8004166:	d104      	bne.n	8004172 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004168:	f7ff fab6 	bl	80036d8 <HAL_RCC_GetPCLK2Freq>
 800416c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004170:	e003      	b.n	800417a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004172:	f7ff fa9d 	bl	80036b0 <HAL_RCC_GetPCLK1Freq>
 8004176:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800417a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004184:	f040 810c 	bne.w	80043a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800418c:	2200      	movs	r2, #0
 800418e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004192:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004196:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800419a:	4622      	mov	r2, r4
 800419c:	462b      	mov	r3, r5
 800419e:	1891      	adds	r1, r2, r2
 80041a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80041a2:	415b      	adcs	r3, r3
 80041a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041aa:	4621      	mov	r1, r4
 80041ac:	eb12 0801 	adds.w	r8, r2, r1
 80041b0:	4629      	mov	r1, r5
 80041b2:	eb43 0901 	adc.w	r9, r3, r1
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	f04f 0300 	mov.w	r3, #0
 80041be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041ca:	4690      	mov	r8, r2
 80041cc:	4699      	mov	r9, r3
 80041ce:	4623      	mov	r3, r4
 80041d0:	eb18 0303 	adds.w	r3, r8, r3
 80041d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041d8:	462b      	mov	r3, r5
 80041da:	eb49 0303 	adc.w	r3, r9, r3
 80041de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80041f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80041f6:	460b      	mov	r3, r1
 80041f8:	18db      	adds	r3, r3, r3
 80041fa:	653b      	str	r3, [r7, #80]	; 0x50
 80041fc:	4613      	mov	r3, r2
 80041fe:	eb42 0303 	adc.w	r3, r2, r3
 8004202:	657b      	str	r3, [r7, #84]	; 0x54
 8004204:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004208:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800420c:	f7fc f840 	bl	8000290 <__aeabi_uldivmod>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	4b61      	ldr	r3, [pc, #388]	; (800439c <UART_SetConfig+0x2d4>)
 8004216:	fba3 2302 	umull	r2, r3, r3, r2
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	011c      	lsls	r4, r3, #4
 800421e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004222:	2200      	movs	r2, #0
 8004224:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004228:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800422c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004230:	4642      	mov	r2, r8
 8004232:	464b      	mov	r3, r9
 8004234:	1891      	adds	r1, r2, r2
 8004236:	64b9      	str	r1, [r7, #72]	; 0x48
 8004238:	415b      	adcs	r3, r3
 800423a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800423c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004240:	4641      	mov	r1, r8
 8004242:	eb12 0a01 	adds.w	sl, r2, r1
 8004246:	4649      	mov	r1, r9
 8004248:	eb43 0b01 	adc.w	fp, r3, r1
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004258:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800425c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004260:	4692      	mov	sl, r2
 8004262:	469b      	mov	fp, r3
 8004264:	4643      	mov	r3, r8
 8004266:	eb1a 0303 	adds.w	r3, sl, r3
 800426a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800426e:	464b      	mov	r3, r9
 8004270:	eb4b 0303 	adc.w	r3, fp, r3
 8004274:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004284:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004288:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800428c:	460b      	mov	r3, r1
 800428e:	18db      	adds	r3, r3, r3
 8004290:	643b      	str	r3, [r7, #64]	; 0x40
 8004292:	4613      	mov	r3, r2
 8004294:	eb42 0303 	adc.w	r3, r2, r3
 8004298:	647b      	str	r3, [r7, #68]	; 0x44
 800429a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800429e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042a2:	f7fb fff5 	bl	8000290 <__aeabi_uldivmod>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4611      	mov	r1, r2
 80042ac:	4b3b      	ldr	r3, [pc, #236]	; (800439c <UART_SetConfig+0x2d4>)
 80042ae:	fba3 2301 	umull	r2, r3, r3, r1
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2264      	movs	r2, #100	; 0x64
 80042b6:	fb02 f303 	mul.w	r3, r2, r3
 80042ba:	1acb      	subs	r3, r1, r3
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80042c2:	4b36      	ldr	r3, [pc, #216]	; (800439c <UART_SetConfig+0x2d4>)
 80042c4:	fba3 2302 	umull	r2, r3, r3, r2
 80042c8:	095b      	lsrs	r3, r3, #5
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042d0:	441c      	add	r4, r3
 80042d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042d6:	2200      	movs	r2, #0
 80042d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80042e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80042e4:	4642      	mov	r2, r8
 80042e6:	464b      	mov	r3, r9
 80042e8:	1891      	adds	r1, r2, r2
 80042ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80042ec:	415b      	adcs	r3, r3
 80042ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042f4:	4641      	mov	r1, r8
 80042f6:	1851      	adds	r1, r2, r1
 80042f8:	6339      	str	r1, [r7, #48]	; 0x30
 80042fa:	4649      	mov	r1, r9
 80042fc:	414b      	adcs	r3, r1
 80042fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800430c:	4659      	mov	r1, fp
 800430e:	00cb      	lsls	r3, r1, #3
 8004310:	4651      	mov	r1, sl
 8004312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004316:	4651      	mov	r1, sl
 8004318:	00ca      	lsls	r2, r1, #3
 800431a:	4610      	mov	r0, r2
 800431c:	4619      	mov	r1, r3
 800431e:	4603      	mov	r3, r0
 8004320:	4642      	mov	r2, r8
 8004322:	189b      	adds	r3, r3, r2
 8004324:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004328:	464b      	mov	r3, r9
 800432a:	460a      	mov	r2, r1
 800432c:	eb42 0303 	adc.w	r3, r2, r3
 8004330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004340:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004344:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004348:	460b      	mov	r3, r1
 800434a:	18db      	adds	r3, r3, r3
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
 800434e:	4613      	mov	r3, r2
 8004350:	eb42 0303 	adc.w	r3, r2, r3
 8004354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004356:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800435a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800435e:	f7fb ff97 	bl	8000290 <__aeabi_uldivmod>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	4b0d      	ldr	r3, [pc, #52]	; (800439c <UART_SetConfig+0x2d4>)
 8004368:	fba3 1302 	umull	r1, r3, r3, r2
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	2164      	movs	r1, #100	; 0x64
 8004370:	fb01 f303 	mul.w	r3, r1, r3
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	3332      	adds	r3, #50	; 0x32
 800437a:	4a08      	ldr	r2, [pc, #32]	; (800439c <UART_SetConfig+0x2d4>)
 800437c:	fba2 2303 	umull	r2, r3, r2, r3
 8004380:	095b      	lsrs	r3, r3, #5
 8004382:	f003 0207 	and.w	r2, r3, #7
 8004386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4422      	add	r2, r4
 800438e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004390:	e105      	b.n	800459e <UART_SetConfig+0x4d6>
 8004392:	bf00      	nop
 8004394:	40011000 	.word	0x40011000
 8004398:	40011400 	.word	0x40011400
 800439c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043a4:	2200      	movs	r2, #0
 80043a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80043ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80043b2:	4642      	mov	r2, r8
 80043b4:	464b      	mov	r3, r9
 80043b6:	1891      	adds	r1, r2, r2
 80043b8:	6239      	str	r1, [r7, #32]
 80043ba:	415b      	adcs	r3, r3
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
 80043be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043c2:	4641      	mov	r1, r8
 80043c4:	1854      	adds	r4, r2, r1
 80043c6:	4649      	mov	r1, r9
 80043c8:	eb43 0501 	adc.w	r5, r3, r1
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	00eb      	lsls	r3, r5, #3
 80043d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043da:	00e2      	lsls	r2, r4, #3
 80043dc:	4614      	mov	r4, r2
 80043de:	461d      	mov	r5, r3
 80043e0:	4643      	mov	r3, r8
 80043e2:	18e3      	adds	r3, r4, r3
 80043e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043e8:	464b      	mov	r3, r9
 80043ea:	eb45 0303 	adc.w	r3, r5, r3
 80043ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800440e:	4629      	mov	r1, r5
 8004410:	008b      	lsls	r3, r1, #2
 8004412:	4621      	mov	r1, r4
 8004414:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004418:	4621      	mov	r1, r4
 800441a:	008a      	lsls	r2, r1, #2
 800441c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004420:	f7fb ff36 	bl	8000290 <__aeabi_uldivmod>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4b60      	ldr	r3, [pc, #384]	; (80045ac <UART_SetConfig+0x4e4>)
 800442a:	fba3 2302 	umull	r2, r3, r3, r2
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	011c      	lsls	r4, r3, #4
 8004432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004436:	2200      	movs	r2, #0
 8004438:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800443c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004440:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004444:	4642      	mov	r2, r8
 8004446:	464b      	mov	r3, r9
 8004448:	1891      	adds	r1, r2, r2
 800444a:	61b9      	str	r1, [r7, #24]
 800444c:	415b      	adcs	r3, r3
 800444e:	61fb      	str	r3, [r7, #28]
 8004450:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004454:	4641      	mov	r1, r8
 8004456:	1851      	adds	r1, r2, r1
 8004458:	6139      	str	r1, [r7, #16]
 800445a:	4649      	mov	r1, r9
 800445c:	414b      	adcs	r3, r1
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800446c:	4659      	mov	r1, fp
 800446e:	00cb      	lsls	r3, r1, #3
 8004470:	4651      	mov	r1, sl
 8004472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004476:	4651      	mov	r1, sl
 8004478:	00ca      	lsls	r2, r1, #3
 800447a:	4610      	mov	r0, r2
 800447c:	4619      	mov	r1, r3
 800447e:	4603      	mov	r3, r0
 8004480:	4642      	mov	r2, r8
 8004482:	189b      	adds	r3, r3, r2
 8004484:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004488:	464b      	mov	r3, r9
 800448a:	460a      	mov	r2, r1
 800448c:	eb42 0303 	adc.w	r3, r2, r3
 8004490:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	67bb      	str	r3, [r7, #120]	; 0x78
 800449e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80044ac:	4649      	mov	r1, r9
 80044ae:	008b      	lsls	r3, r1, #2
 80044b0:	4641      	mov	r1, r8
 80044b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044b6:	4641      	mov	r1, r8
 80044b8:	008a      	lsls	r2, r1, #2
 80044ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044be:	f7fb fee7 	bl	8000290 <__aeabi_uldivmod>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4b39      	ldr	r3, [pc, #228]	; (80045ac <UART_SetConfig+0x4e4>)
 80044c8:	fba3 1302 	umull	r1, r3, r3, r2
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	2164      	movs	r1, #100	; 0x64
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	3332      	adds	r3, #50	; 0x32
 80044da:	4a34      	ldr	r2, [pc, #208]	; (80045ac <UART_SetConfig+0x4e4>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e6:	441c      	add	r4, r3
 80044e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044ec:	2200      	movs	r2, #0
 80044ee:	673b      	str	r3, [r7, #112]	; 0x70
 80044f0:	677a      	str	r2, [r7, #116]	; 0x74
 80044f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80044f6:	4642      	mov	r2, r8
 80044f8:	464b      	mov	r3, r9
 80044fa:	1891      	adds	r1, r2, r2
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	415b      	adcs	r3, r3
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004506:	4641      	mov	r1, r8
 8004508:	1851      	adds	r1, r2, r1
 800450a:	6039      	str	r1, [r7, #0]
 800450c:	4649      	mov	r1, r9
 800450e:	414b      	adcs	r3, r1
 8004510:	607b      	str	r3, [r7, #4]
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800451e:	4659      	mov	r1, fp
 8004520:	00cb      	lsls	r3, r1, #3
 8004522:	4651      	mov	r1, sl
 8004524:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004528:	4651      	mov	r1, sl
 800452a:	00ca      	lsls	r2, r1, #3
 800452c:	4610      	mov	r0, r2
 800452e:	4619      	mov	r1, r3
 8004530:	4603      	mov	r3, r0
 8004532:	4642      	mov	r2, r8
 8004534:	189b      	adds	r3, r3, r2
 8004536:	66bb      	str	r3, [r7, #104]	; 0x68
 8004538:	464b      	mov	r3, r9
 800453a:	460a      	mov	r2, r1
 800453c:	eb42 0303 	adc.w	r3, r2, r3
 8004540:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	663b      	str	r3, [r7, #96]	; 0x60
 800454c:	667a      	str	r2, [r7, #100]	; 0x64
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800455a:	4649      	mov	r1, r9
 800455c:	008b      	lsls	r3, r1, #2
 800455e:	4641      	mov	r1, r8
 8004560:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004564:	4641      	mov	r1, r8
 8004566:	008a      	lsls	r2, r1, #2
 8004568:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800456c:	f7fb fe90 	bl	8000290 <__aeabi_uldivmod>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4b0d      	ldr	r3, [pc, #52]	; (80045ac <UART_SetConfig+0x4e4>)
 8004576:	fba3 1302 	umull	r1, r3, r3, r2
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	2164      	movs	r1, #100	; 0x64
 800457e:	fb01 f303 	mul.w	r3, r1, r3
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	3332      	adds	r3, #50	; 0x32
 8004588:	4a08      	ldr	r2, [pc, #32]	; (80045ac <UART_SetConfig+0x4e4>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	f003 020f 	and.w	r2, r3, #15
 8004594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4422      	add	r2, r4
 800459c:	609a      	str	r2, [r3, #8]
}
 800459e:	bf00      	nop
 80045a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80045a4:	46bd      	mov	sp, r7
 80045a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045aa:	bf00      	nop
 80045ac:	51eb851f 	.word	0x51eb851f

080045b0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 80045b6:	4b8d      	ldr	r3, [pc, #564]	; (80047ec <MX_LWIP_Init+0x23c>)
 80045b8:	220a      	movs	r2, #10
 80045ba:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 80045bc:	4b8b      	ldr	r3, [pc, #556]	; (80047ec <MX_LWIP_Init+0x23c>)
 80045be:	2200      	movs	r2, #0
 80045c0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 80045c2:	4b8a      	ldr	r3, [pc, #552]	; (80047ec <MX_LWIP_Init+0x23c>)
 80045c4:	2202      	movs	r2, #2
 80045c6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80045c8:	4b88      	ldr	r3, [pc, #544]	; (80047ec <MX_LWIP_Init+0x23c>)
 80045ca:	220a      	movs	r2, #10
 80045cc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80045ce:	4b88      	ldr	r3, [pc, #544]	; (80047f0 <MX_LWIP_Init+0x240>)
 80045d0:	22ff      	movs	r2, #255	; 0xff
 80045d2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80045d4:	4b86      	ldr	r3, [pc, #536]	; (80047f0 <MX_LWIP_Init+0x240>)
 80045d6:	22ff      	movs	r2, #255	; 0xff
 80045d8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80045da:	4b85      	ldr	r3, [pc, #532]	; (80047f0 <MX_LWIP_Init+0x240>)
 80045dc:	22ff      	movs	r2, #255	; 0xff
 80045de:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80045e0:	4b83      	ldr	r3, [pc, #524]	; (80047f0 <MX_LWIP_Init+0x240>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 80045e6:	4b83      	ldr	r3, [pc, #524]	; (80047f4 <MX_LWIP_Init+0x244>)
 80045e8:	220a      	movs	r2, #10
 80045ea:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80045ec:	4b81      	ldr	r3, [pc, #516]	; (80047f4 <MX_LWIP_Init+0x244>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 2;
 80045f2:	4b80      	ldr	r3, [pc, #512]	; (80047f4 <MX_LWIP_Init+0x244>)
 80045f4:	2202      	movs	r2, #2
 80045f6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80045f8:	4b7e      	ldr	r3, [pc, #504]	; (80047f4 <MX_LWIP_Init+0x244>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80045fe:	f000 fd39 	bl	8005074 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004602:	4b7a      	ldr	r3, [pc, #488]	; (80047ec <MX_LWIP_Init+0x23c>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	061a      	lsls	r2, r3, #24
 8004608:	4b78      	ldr	r3, [pc, #480]	; (80047ec <MX_LWIP_Init+0x23c>)
 800460a:	785b      	ldrb	r3, [r3, #1]
 800460c:	041b      	lsls	r3, r3, #16
 800460e:	431a      	orrs	r2, r3
 8004610:	4b76      	ldr	r3, [pc, #472]	; (80047ec <MX_LWIP_Init+0x23c>)
 8004612:	789b      	ldrb	r3, [r3, #2]
 8004614:	021b      	lsls	r3, r3, #8
 8004616:	4313      	orrs	r3, r2
 8004618:	4a74      	ldr	r2, [pc, #464]	; (80047ec <MX_LWIP_Init+0x23c>)
 800461a:	78d2      	ldrb	r2, [r2, #3]
 800461c:	4313      	orrs	r3, r2
 800461e:	061a      	lsls	r2, r3, #24
 8004620:	4b72      	ldr	r3, [pc, #456]	; (80047ec <MX_LWIP_Init+0x23c>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	0619      	lsls	r1, r3, #24
 8004626:	4b71      	ldr	r3, [pc, #452]	; (80047ec <MX_LWIP_Init+0x23c>)
 8004628:	785b      	ldrb	r3, [r3, #1]
 800462a:	041b      	lsls	r3, r3, #16
 800462c:	4319      	orrs	r1, r3
 800462e:	4b6f      	ldr	r3, [pc, #444]	; (80047ec <MX_LWIP_Init+0x23c>)
 8004630:	789b      	ldrb	r3, [r3, #2]
 8004632:	021b      	lsls	r3, r3, #8
 8004634:	430b      	orrs	r3, r1
 8004636:	496d      	ldr	r1, [pc, #436]	; (80047ec <MX_LWIP_Init+0x23c>)
 8004638:	78c9      	ldrb	r1, [r1, #3]
 800463a:	430b      	orrs	r3, r1
 800463c:	021b      	lsls	r3, r3, #8
 800463e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004642:	431a      	orrs	r2, r3
 8004644:	4b69      	ldr	r3, [pc, #420]	; (80047ec <MX_LWIP_Init+0x23c>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	0619      	lsls	r1, r3, #24
 800464a:	4b68      	ldr	r3, [pc, #416]	; (80047ec <MX_LWIP_Init+0x23c>)
 800464c:	785b      	ldrb	r3, [r3, #1]
 800464e:	041b      	lsls	r3, r3, #16
 8004650:	4319      	orrs	r1, r3
 8004652:	4b66      	ldr	r3, [pc, #408]	; (80047ec <MX_LWIP_Init+0x23c>)
 8004654:	789b      	ldrb	r3, [r3, #2]
 8004656:	021b      	lsls	r3, r3, #8
 8004658:	430b      	orrs	r3, r1
 800465a:	4964      	ldr	r1, [pc, #400]	; (80047ec <MX_LWIP_Init+0x23c>)
 800465c:	78c9      	ldrb	r1, [r1, #3]
 800465e:	430b      	orrs	r3, r1
 8004660:	0a1b      	lsrs	r3, r3, #8
 8004662:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004666:	431a      	orrs	r2, r3
 8004668:	4b60      	ldr	r3, [pc, #384]	; (80047ec <MX_LWIP_Init+0x23c>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	0619      	lsls	r1, r3, #24
 800466e:	4b5f      	ldr	r3, [pc, #380]	; (80047ec <MX_LWIP_Init+0x23c>)
 8004670:	785b      	ldrb	r3, [r3, #1]
 8004672:	041b      	lsls	r3, r3, #16
 8004674:	4319      	orrs	r1, r3
 8004676:	4b5d      	ldr	r3, [pc, #372]	; (80047ec <MX_LWIP_Init+0x23c>)
 8004678:	789b      	ldrb	r3, [r3, #2]
 800467a:	021b      	lsls	r3, r3, #8
 800467c:	430b      	orrs	r3, r1
 800467e:	495b      	ldr	r1, [pc, #364]	; (80047ec <MX_LWIP_Init+0x23c>)
 8004680:	78c9      	ldrb	r1, [r1, #3]
 8004682:	430b      	orrs	r3, r1
 8004684:	0e1b      	lsrs	r3, r3, #24
 8004686:	4313      	orrs	r3, r2
 8004688:	4a5b      	ldr	r2, [pc, #364]	; (80047f8 <MX_LWIP_Init+0x248>)
 800468a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800468c:	4b58      	ldr	r3, [pc, #352]	; (80047f0 <MX_LWIP_Init+0x240>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	061a      	lsls	r2, r3, #24
 8004692:	4b57      	ldr	r3, [pc, #348]	; (80047f0 <MX_LWIP_Init+0x240>)
 8004694:	785b      	ldrb	r3, [r3, #1]
 8004696:	041b      	lsls	r3, r3, #16
 8004698:	431a      	orrs	r2, r3
 800469a:	4b55      	ldr	r3, [pc, #340]	; (80047f0 <MX_LWIP_Init+0x240>)
 800469c:	789b      	ldrb	r3, [r3, #2]
 800469e:	021b      	lsls	r3, r3, #8
 80046a0:	4313      	orrs	r3, r2
 80046a2:	4a53      	ldr	r2, [pc, #332]	; (80047f0 <MX_LWIP_Init+0x240>)
 80046a4:	78d2      	ldrb	r2, [r2, #3]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	061a      	lsls	r2, r3, #24
 80046aa:	4b51      	ldr	r3, [pc, #324]	; (80047f0 <MX_LWIP_Init+0x240>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	0619      	lsls	r1, r3, #24
 80046b0:	4b4f      	ldr	r3, [pc, #316]	; (80047f0 <MX_LWIP_Init+0x240>)
 80046b2:	785b      	ldrb	r3, [r3, #1]
 80046b4:	041b      	lsls	r3, r3, #16
 80046b6:	4319      	orrs	r1, r3
 80046b8:	4b4d      	ldr	r3, [pc, #308]	; (80047f0 <MX_LWIP_Init+0x240>)
 80046ba:	789b      	ldrb	r3, [r3, #2]
 80046bc:	021b      	lsls	r3, r3, #8
 80046be:	430b      	orrs	r3, r1
 80046c0:	494b      	ldr	r1, [pc, #300]	; (80047f0 <MX_LWIP_Init+0x240>)
 80046c2:	78c9      	ldrb	r1, [r1, #3]
 80046c4:	430b      	orrs	r3, r1
 80046c6:	021b      	lsls	r3, r3, #8
 80046c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80046cc:	431a      	orrs	r2, r3
 80046ce:	4b48      	ldr	r3, [pc, #288]	; (80047f0 <MX_LWIP_Init+0x240>)
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	0619      	lsls	r1, r3, #24
 80046d4:	4b46      	ldr	r3, [pc, #280]	; (80047f0 <MX_LWIP_Init+0x240>)
 80046d6:	785b      	ldrb	r3, [r3, #1]
 80046d8:	041b      	lsls	r3, r3, #16
 80046da:	4319      	orrs	r1, r3
 80046dc:	4b44      	ldr	r3, [pc, #272]	; (80047f0 <MX_LWIP_Init+0x240>)
 80046de:	789b      	ldrb	r3, [r3, #2]
 80046e0:	021b      	lsls	r3, r3, #8
 80046e2:	430b      	orrs	r3, r1
 80046e4:	4942      	ldr	r1, [pc, #264]	; (80047f0 <MX_LWIP_Init+0x240>)
 80046e6:	78c9      	ldrb	r1, [r1, #3]
 80046e8:	430b      	orrs	r3, r1
 80046ea:	0a1b      	lsrs	r3, r3, #8
 80046ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80046f0:	431a      	orrs	r2, r3
 80046f2:	4b3f      	ldr	r3, [pc, #252]	; (80047f0 <MX_LWIP_Init+0x240>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	0619      	lsls	r1, r3, #24
 80046f8:	4b3d      	ldr	r3, [pc, #244]	; (80047f0 <MX_LWIP_Init+0x240>)
 80046fa:	785b      	ldrb	r3, [r3, #1]
 80046fc:	041b      	lsls	r3, r3, #16
 80046fe:	4319      	orrs	r1, r3
 8004700:	4b3b      	ldr	r3, [pc, #236]	; (80047f0 <MX_LWIP_Init+0x240>)
 8004702:	789b      	ldrb	r3, [r3, #2]
 8004704:	021b      	lsls	r3, r3, #8
 8004706:	430b      	orrs	r3, r1
 8004708:	4939      	ldr	r1, [pc, #228]	; (80047f0 <MX_LWIP_Init+0x240>)
 800470a:	78c9      	ldrb	r1, [r1, #3]
 800470c:	430b      	orrs	r3, r1
 800470e:	0e1b      	lsrs	r3, r3, #24
 8004710:	4313      	orrs	r3, r2
 8004712:	4a3a      	ldr	r2, [pc, #232]	; (80047fc <MX_LWIP_Init+0x24c>)
 8004714:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004716:	4b37      	ldr	r3, [pc, #220]	; (80047f4 <MX_LWIP_Init+0x244>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	061a      	lsls	r2, r3, #24
 800471c:	4b35      	ldr	r3, [pc, #212]	; (80047f4 <MX_LWIP_Init+0x244>)
 800471e:	785b      	ldrb	r3, [r3, #1]
 8004720:	041b      	lsls	r3, r3, #16
 8004722:	431a      	orrs	r2, r3
 8004724:	4b33      	ldr	r3, [pc, #204]	; (80047f4 <MX_LWIP_Init+0x244>)
 8004726:	789b      	ldrb	r3, [r3, #2]
 8004728:	021b      	lsls	r3, r3, #8
 800472a:	4313      	orrs	r3, r2
 800472c:	4a31      	ldr	r2, [pc, #196]	; (80047f4 <MX_LWIP_Init+0x244>)
 800472e:	78d2      	ldrb	r2, [r2, #3]
 8004730:	4313      	orrs	r3, r2
 8004732:	061a      	lsls	r2, r3, #24
 8004734:	4b2f      	ldr	r3, [pc, #188]	; (80047f4 <MX_LWIP_Init+0x244>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	0619      	lsls	r1, r3, #24
 800473a:	4b2e      	ldr	r3, [pc, #184]	; (80047f4 <MX_LWIP_Init+0x244>)
 800473c:	785b      	ldrb	r3, [r3, #1]
 800473e:	041b      	lsls	r3, r3, #16
 8004740:	4319      	orrs	r1, r3
 8004742:	4b2c      	ldr	r3, [pc, #176]	; (80047f4 <MX_LWIP_Init+0x244>)
 8004744:	789b      	ldrb	r3, [r3, #2]
 8004746:	021b      	lsls	r3, r3, #8
 8004748:	430b      	orrs	r3, r1
 800474a:	492a      	ldr	r1, [pc, #168]	; (80047f4 <MX_LWIP_Init+0x244>)
 800474c:	78c9      	ldrb	r1, [r1, #3]
 800474e:	430b      	orrs	r3, r1
 8004750:	021b      	lsls	r3, r3, #8
 8004752:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004756:	431a      	orrs	r2, r3
 8004758:	4b26      	ldr	r3, [pc, #152]	; (80047f4 <MX_LWIP_Init+0x244>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	0619      	lsls	r1, r3, #24
 800475e:	4b25      	ldr	r3, [pc, #148]	; (80047f4 <MX_LWIP_Init+0x244>)
 8004760:	785b      	ldrb	r3, [r3, #1]
 8004762:	041b      	lsls	r3, r3, #16
 8004764:	4319      	orrs	r1, r3
 8004766:	4b23      	ldr	r3, [pc, #140]	; (80047f4 <MX_LWIP_Init+0x244>)
 8004768:	789b      	ldrb	r3, [r3, #2]
 800476a:	021b      	lsls	r3, r3, #8
 800476c:	430b      	orrs	r3, r1
 800476e:	4921      	ldr	r1, [pc, #132]	; (80047f4 <MX_LWIP_Init+0x244>)
 8004770:	78c9      	ldrb	r1, [r1, #3]
 8004772:	430b      	orrs	r3, r1
 8004774:	0a1b      	lsrs	r3, r3, #8
 8004776:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800477a:	431a      	orrs	r2, r3
 800477c:	4b1d      	ldr	r3, [pc, #116]	; (80047f4 <MX_LWIP_Init+0x244>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	0619      	lsls	r1, r3, #24
 8004782:	4b1c      	ldr	r3, [pc, #112]	; (80047f4 <MX_LWIP_Init+0x244>)
 8004784:	785b      	ldrb	r3, [r3, #1]
 8004786:	041b      	lsls	r3, r3, #16
 8004788:	4319      	orrs	r1, r3
 800478a:	4b1a      	ldr	r3, [pc, #104]	; (80047f4 <MX_LWIP_Init+0x244>)
 800478c:	789b      	ldrb	r3, [r3, #2]
 800478e:	021b      	lsls	r3, r3, #8
 8004790:	430b      	orrs	r3, r1
 8004792:	4918      	ldr	r1, [pc, #96]	; (80047f4 <MX_LWIP_Init+0x244>)
 8004794:	78c9      	ldrb	r1, [r1, #3]
 8004796:	430b      	orrs	r3, r1
 8004798:	0e1b      	lsrs	r3, r3, #24
 800479a:	4313      	orrs	r3, r2
 800479c:	4a18      	ldr	r2, [pc, #96]	; (8004800 <MX_LWIP_Init+0x250>)
 800479e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80047a0:	4b18      	ldr	r3, [pc, #96]	; (8004804 <MX_LWIP_Init+0x254>)
 80047a2:	9302      	str	r3, [sp, #8]
 80047a4:	4b18      	ldr	r3, [pc, #96]	; (8004808 <MX_LWIP_Init+0x258>)
 80047a6:	9301      	str	r3, [sp, #4]
 80047a8:	2300      	movs	r3, #0
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	4b14      	ldr	r3, [pc, #80]	; (8004800 <MX_LWIP_Init+0x250>)
 80047ae:	4a13      	ldr	r2, [pc, #76]	; (80047fc <MX_LWIP_Init+0x24c>)
 80047b0:	4911      	ldr	r1, [pc, #68]	; (80047f8 <MX_LWIP_Init+0x248>)
 80047b2:	4816      	ldr	r0, [pc, #88]	; (800480c <MX_LWIP_Init+0x25c>)
 80047b4:	f001 f94a 	bl	8005a4c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80047b8:	4814      	ldr	r0, [pc, #80]	; (800480c <MX_LWIP_Init+0x25c>)
 80047ba:	f001 faf9 	bl	8005db0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80047be:	4b13      	ldr	r3, [pc, #76]	; (800480c <MX_LWIP_Init+0x25c>)
 80047c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80047c4:	089b      	lsrs	r3, r3, #2
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80047d0:	480e      	ldr	r0, [pc, #56]	; (800480c <MX_LWIP_Init+0x25c>)
 80047d2:	f001 fafd 	bl	8005dd0 <netif_set_up>
 80047d6:	e002      	b.n	80047de <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80047d8:	480c      	ldr	r0, [pc, #48]	; (800480c <MX_LWIP_Init+0x25c>)
 80047da:	f001 fb65 	bl	8005ea8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80047de:	490c      	ldr	r1, [pc, #48]	; (8004810 <MX_LWIP_Init+0x260>)
 80047e0:	480a      	ldr	r0, [pc, #40]	; (800480c <MX_LWIP_Init+0x25c>)
 80047e2:	f001 fbf7 	bl	8005fd4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80047e6:	bf00      	nop
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	200001ec 	.word	0x200001ec
 80047f0:	200001f0 	.word	0x200001f0
 80047f4:	200001f4 	.word	0x200001f4
 80047f8:	200001e0 	.word	0x200001e0
 80047fc:	200001e4 	.word	0x200001e4
 8004800:	200001e8 	.word	0x200001e8
 8004804:	0800e891 	.word	0x0800e891
 8004808:	08004b59 	.word	0x08004b59
 800480c:	200001ac 	.word	0x200001ac
 8004810:	08004865 	.word	0x08004865

08004814 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800481c:	f7fc fdf2 	bl	8001404 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	4b08      	ldr	r3, [pc, #32]	; (8004844 <Ethernet_Link_Periodic_Handle+0x30>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b63      	cmp	r3, #99	; 0x63
 800482a:	d907      	bls.n	800483c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800482c:	f7fc fdea 	bl	8001404 <HAL_GetTick>
 8004830:	4603      	mov	r3, r0
 8004832:	4a04      	ldr	r2, [pc, #16]	; (8004844 <Ethernet_Link_Periodic_Handle+0x30>)
 8004834:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 faf2 	bl	8004e20 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800483c:	bf00      	nop
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	200001a8 	.word	0x200001a8

08004848 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800484c:	4804      	ldr	r0, [pc, #16]	; (8004860 <MX_LWIP_Process+0x18>)
 800484e:	f000 f963 	bl	8004b18 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004852:	f007 fc31 	bl	800c0b8 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8004856:	4802      	ldr	r0, [pc, #8]	; (8004860 <MX_LWIP_Process+0x18>)
 8004858:	f7ff ffdc 	bl	8004814 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800485c:	bf00      	nop
 800485e:	bd80      	pop	{r7, pc}
 8004860:	200001ac 	.word	0x200001ac

08004864 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004880:	2300      	movs	r3, #0
 8004882:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004884:	4b40      	ldr	r3, [pc, #256]	; (8004988 <low_level_init+0x110>)
 8004886:	4a41      	ldr	r2, [pc, #260]	; (800498c <low_level_init+0x114>)
 8004888:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800488a:	2300      	movs	r3, #0
 800488c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800488e:	2380      	movs	r3, #128	; 0x80
 8004890:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004892:	23e1      	movs	r3, #225	; 0xe1
 8004894:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004896:	2300      	movs	r3, #0
 8004898:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800489a:	2300      	movs	r3, #0
 800489c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800489e:	2300      	movs	r3, #0
 80048a0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80048a2:	4a39      	ldr	r2, [pc, #228]	; (8004988 <low_level_init+0x110>)
 80048a4:	f107 0308 	add.w	r3, r7, #8
 80048a8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80048aa:	4b37      	ldr	r3, [pc, #220]	; (8004988 <low_level_init+0x110>)
 80048ac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80048b0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80048b2:	4b35      	ldr	r3, [pc, #212]	; (8004988 <low_level_init+0x110>)
 80048b4:	4a36      	ldr	r2, [pc, #216]	; (8004990 <low_level_init+0x118>)
 80048b6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80048b8:	4b33      	ldr	r3, [pc, #204]	; (8004988 <low_level_init+0x110>)
 80048ba:	4a36      	ldr	r2, [pc, #216]	; (8004994 <low_level_init+0x11c>)
 80048bc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80048be:	4b32      	ldr	r3, [pc, #200]	; (8004988 <low_level_init+0x110>)
 80048c0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80048c4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80048c6:	4830      	ldr	r0, [pc, #192]	; (8004988 <low_level_init+0x110>)
 80048c8:	f7fc ff70 	bl	80017ac <HAL_ETH_Init>
 80048cc:	4603      	mov	r3, r0
 80048ce:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80048d0:	2238      	movs	r2, #56	; 0x38
 80048d2:	2100      	movs	r1, #0
 80048d4:	4830      	ldr	r0, [pc, #192]	; (8004998 <low_level_init+0x120>)
 80048d6:	f00a f90d 	bl	800eaf4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80048da:	4b2f      	ldr	r3, [pc, #188]	; (8004998 <low_level_init+0x120>)
 80048dc:	2221      	movs	r2, #33	; 0x21
 80048de:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80048e0:	4b2d      	ldr	r3, [pc, #180]	; (8004998 <low_level_init+0x120>)
 80048e2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80048e6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80048e8:	4b2b      	ldr	r3, [pc, #172]	; (8004998 <low_level_init+0x120>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80048ee:	482b      	ldr	r0, [pc, #172]	; (800499c <low_level_init+0x124>)
 80048f0:	f000 ff74 	bl	80057dc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2206      	movs	r2, #6
 80048f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80048fc:	4b22      	ldr	r3, [pc, #136]	; (8004988 <low_level_init+0x110>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	781a      	ldrb	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004908:	4b1f      	ldr	r3, [pc, #124]	; (8004988 <low_level_init+0x110>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	785a      	ldrb	r2, [r3, #1]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004914:	4b1c      	ldr	r3, [pc, #112]	; (8004988 <low_level_init+0x110>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	789a      	ldrb	r2, [r3, #2]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004920:	4b19      	ldr	r3, [pc, #100]	; (8004988 <low_level_init+0x110>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	78da      	ldrb	r2, [r3, #3]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800492c:	4b16      	ldr	r3, [pc, #88]	; (8004988 <low_level_init+0x110>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	791a      	ldrb	r2, [r3, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004938:	4b13      	ldr	r3, [pc, #76]	; (8004988 <low_level_init+0x110>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	795a      	ldrb	r2, [r3, #5]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800494a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004952:	f043 030a 	orr.w	r3, r3, #10
 8004956:	b2da      	uxtb	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800495e:	4910      	ldr	r1, [pc, #64]	; (80049a0 <low_level_init+0x128>)
 8004960:	4810      	ldr	r0, [pc, #64]	; (80049a4 <low_level_init+0x12c>)
 8004962:	f7fc fb88 	bl	8001076 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004966:	480f      	ldr	r0, [pc, #60]	; (80049a4 <low_level_init+0x12c>)
 8004968:	f7fc fbb7 	bl	80010da <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800496c:	7bfb      	ldrb	r3, [r7, #15]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d103      	bne.n	800497a <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fa54 	bl	8004e20 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004978:	e001      	b.n	800497e <low_level_init+0x106>
    Error_Handler();
 800497a:	f7fc f9bd 	bl	8000cf8 <Error_Handler>
}
 800497e:	bf00      	nop
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20004cc4 	.word	0x20004cc4
 800498c:	40028000 	.word	0x40028000
 8004990:	20004c24 	.word	0x20004c24
 8004994:	20004b84 	.word	0x20004b84
 8004998:	20004d74 	.word	0x20004d74
 800499c:	0801293c 	.word	0x0801293c
 80049a0:	20000064 	.word	0x20000064
 80049a4:	20004dac 	.word	0x20004dac

080049a8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b092      	sub	sp, #72	; 0x48
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80049c0:	f107 030c 	add.w	r3, r7, #12
 80049c4:	2230      	movs	r2, #48	; 0x30
 80049c6:	2100      	movs	r1, #0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f00a f893 	bl	800eaf4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80049ce:	f107 030c 	add.w	r3, r7, #12
 80049d2:	2230      	movs	r2, #48	; 0x30
 80049d4:	2100      	movs	r1, #0
 80049d6:	4618      	mov	r0, r3
 80049d8:	f00a f88c 	bl	800eaf4 <memset>

  for(q = p; q != NULL; q = q->next)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	643b      	str	r3, [r7, #64]	; 0x40
 80049e0:	e045      	b.n	8004a6e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80049e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049e4:	2b03      	cmp	r3, #3
 80049e6:	d902      	bls.n	80049ee <low_level_output+0x46>
      return ERR_IF;
 80049e8:	f06f 030b 	mvn.w	r3, #11
 80049ec:	e055      	b.n	8004a9a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80049ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049f0:	6859      	ldr	r1, [r3, #4]
 80049f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049f4:	4613      	mov	r3, r2
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	4413      	add	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	3348      	adds	r3, #72	; 0x48
 80049fe:	443b      	add	r3, r7
 8004a00:	3b3c      	subs	r3, #60	; 0x3c
 8004a02:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a06:	895b      	ldrh	r3, [r3, #10]
 8004a08:	4619      	mov	r1, r3
 8004a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	3348      	adds	r3, #72	; 0x48
 8004a16:	443b      	add	r3, r7
 8004a18:	3b38      	subs	r3, #56	; 0x38
 8004a1a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d011      	beq.n	8004a46 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a24:	1e5a      	subs	r2, r3, #1
 8004a26:	f107 000c 	add.w	r0, r7, #12
 8004a2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	440b      	add	r3, r1
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	18c1      	adds	r1, r0, r3
 8004a36:	4613      	mov	r3, r2
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	4413      	add	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	3348      	adds	r3, #72	; 0x48
 8004a40:	443b      	add	r3, r7
 8004a42:	3b34      	subs	r3, #52	; 0x34
 8004a44:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d109      	bne.n	8004a62 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004a4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a50:	4613      	mov	r3, r2
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	4413      	add	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	3348      	adds	r3, #72	; 0x48
 8004a5a:	443b      	add	r3, r7
 8004a5c:	3b34      	subs	r3, #52	; 0x34
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a64:	3301      	adds	r3, #1
 8004a66:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1b6      	bne.n	80049e2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	891b      	ldrh	r3, [r3, #8]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <low_level_output+0xfc>)
 8004a7c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004a7e:	4a09      	ldr	r2, [pc, #36]	; (8004aa4 <low_level_output+0xfc>)
 8004a80:	f107 030c 	add.w	r3, r7, #12
 8004a84:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004a86:	4a07      	ldr	r2, [pc, #28]	; (8004aa4 <low_level_output+0xfc>)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004a8c:	2214      	movs	r2, #20
 8004a8e:	4905      	ldr	r1, [pc, #20]	; (8004aa4 <low_level_output+0xfc>)
 8004a90:	4805      	ldr	r0, [pc, #20]	; (8004aa8 <low_level_output+0x100>)
 8004a92:	f7fc ffc1 	bl	8001a18 <HAL_ETH_Transmit>

  return errval;
 8004a96:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3748      	adds	r7, #72	; 0x48
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20004d74 	.word	0x20004d74
 8004aa8:	20004cc4 	.word	0x20004cc4

08004aac <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004ab8:	4b12      	ldr	r3, [pc, #72]	; (8004b04 <low_level_input+0x58>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d11c      	bne.n	8004afa <low_level_input+0x4e>
  {
    if (HAL_ETH_ReadData(&heth, (void **)&p) == HAL_OK)
 8004ac0:	f107 030c 	add.w	r3, r7, #12
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4810      	ldr	r0, [pc, #64]	; (8004b08 <low_level_input+0x5c>)
 8004ac8:	f7fd f83a 	bl	8001b40 <HAL_ETH_ReadData>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d113      	bne.n	8004afa <low_level_input+0x4e>
    {
      LED2_TGL;
 8004ad2:	4b0e      	ldr	r3, [pc, #56]	; (8004b0c <low_level_input+0x60>)
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	4a0d      	ldr	r2, [pc, #52]	; (8004b0c <low_level_input+0x60>)
 8004ad8:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8004adc:	6153      	str	r3, [r2, #20]

      if (Filter(p->payload, &INSTRUCTION_DEST_PORT[0]))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	490b      	ldr	r1, [pc, #44]	; (8004b10 <low_level_input+0x64>)
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fb fedb 	bl	80008a0 <Filter>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d004      	beq.n	8004afa <low_level_input+0x4e>
      {
         filteredCounter++;
 8004af0:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <low_level_input+0x68>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3301      	adds	r3, #1
 8004af6:	4a07      	ldr	r2, [pc, #28]	; (8004b14 <low_level_input+0x68>)
 8004af8:	6013      	str	r3, [r2, #0]
      }
    }
  }

  return p;
 8004afa:	68fb      	ldr	r3, [r7, #12]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	20004b80 	.word	0x20004b80
 8004b08:	20004cc4 	.word	0x20004cc4
 8004b0c:	40020400 	.word	0x40020400
 8004b10:	20000000 	.word	0x20000000
 8004b14:	2000010c 	.word	0x2000010c

08004b18 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff ffc1 	bl	8004aac <low_level_input>
 8004b2a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	4798      	blx	r3
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f001 fdc6 	bl	80066d4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1ea      	bne.n	8004b24 <ethernetif_input+0xc>
}
 8004b4e:	bf00      	nop
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <ethernetif_init+0x1c>
 8004b66:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <ethernetif_init+0x48>)
 8004b68:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8004b6c:	490d      	ldr	r1, [pc, #52]	; (8004ba4 <ethernetif_init+0x4c>)
 8004b6e:	480e      	ldr	r0, [pc, #56]	; (8004ba8 <ethernetif_init+0x50>)
 8004b70:	f009 ffc8 	bl	800eb04 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2273      	movs	r2, #115	; 0x73
 8004b78:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2274      	movs	r2, #116	; 0x74
 8004b80:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a09      	ldr	r2, [pc, #36]	; (8004bac <ethernetif_init+0x54>)
 8004b88:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a08      	ldr	r2, [pc, #32]	; (8004bb0 <ethernetif_init+0x58>)
 8004b8e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff fe71 	bl	8004878 <low_level_init>

  return ERR_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	0800ff44 	.word	0x0800ff44
 8004ba4:	0800ff60 	.word	0x0800ff60
 8004ba8:	0800ff70 	.word	0x0800ff70
 8004bac:	0800cd49 	.word	0x0800cd49
 8004bb0:	080049a9 	.word	0x080049a9

08004bb4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004bc0:	68f9      	ldr	r1, [r7, #12]
 8004bc2:	4807      	ldr	r0, [pc, #28]	; (8004be0 <pbuf_free_custom+0x2c>)
 8004bc4:	f000 feec 	bl	80059a0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004bc8:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <pbuf_free_custom+0x30>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d102      	bne.n	8004bd6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004bd0:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <pbuf_free_custom+0x30>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	701a      	strb	r2, [r3, #0]
  }
}
 8004bd6:	bf00      	nop
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	0801293c 	.word	0x0801293c
 8004be4:	20004b80 	.word	0x20004b80

08004be8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004bec:	f7fc fc0a 	bl	8001404 <HAL_GetTick>
 8004bf0:	4603      	mov	r3, r0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08e      	sub	sp, #56	; 0x38
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	605a      	str	r2, [r3, #4]
 8004c0a:	609a      	str	r2, [r3, #8]
 8004c0c:	60da      	str	r2, [r3, #12]
 8004c0e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a55      	ldr	r2, [pc, #340]	; (8004d6c <HAL_ETH_MspInit+0x174>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	f040 80a4 	bne.w	8004d64 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	623b      	str	r3, [r7, #32]
 8004c20:	4b53      	ldr	r3, [pc, #332]	; (8004d70 <HAL_ETH_MspInit+0x178>)
 8004c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c24:	4a52      	ldr	r2, [pc, #328]	; (8004d70 <HAL_ETH_MspInit+0x178>)
 8004c26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c2c:	4b50      	ldr	r3, [pc, #320]	; (8004d70 <HAL_ETH_MspInit+0x178>)
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c34:	623b      	str	r3, [r7, #32]
 8004c36:	6a3b      	ldr	r3, [r7, #32]
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61fb      	str	r3, [r7, #28]
 8004c3c:	4b4c      	ldr	r3, [pc, #304]	; (8004d70 <HAL_ETH_MspInit+0x178>)
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	4a4b      	ldr	r2, [pc, #300]	; (8004d70 <HAL_ETH_MspInit+0x178>)
 8004c42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c46:	6313      	str	r3, [r2, #48]	; 0x30
 8004c48:	4b49      	ldr	r3, [pc, #292]	; (8004d70 <HAL_ETH_MspInit+0x178>)
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	2300      	movs	r3, #0
 8004c56:	61bb      	str	r3, [r7, #24]
 8004c58:	4b45      	ldr	r3, [pc, #276]	; (8004d70 <HAL_ETH_MspInit+0x178>)
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5c:	4a44      	ldr	r2, [pc, #272]	; (8004d70 <HAL_ETH_MspInit+0x178>)
 8004c5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c62:	6313      	str	r3, [r2, #48]	; 0x30
 8004c64:	4b42      	ldr	r3, [pc, #264]	; (8004d70 <HAL_ETH_MspInit+0x178>)
 8004c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c6c:	61bb      	str	r3, [r7, #24]
 8004c6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c70:	2300      	movs	r3, #0
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	4b3e      	ldr	r3, [pc, #248]	; (8004d70 <HAL_ETH_MspInit+0x178>)
 8004c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c78:	4a3d      	ldr	r2, [pc, #244]	; (8004d70 <HAL_ETH_MspInit+0x178>)
 8004c7a:	f043 0304 	orr.w	r3, r3, #4
 8004c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8004c80:	4b3b      	ldr	r3, [pc, #236]	; (8004d70 <HAL_ETH_MspInit+0x178>)
 8004c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	613b      	str	r3, [r7, #16]
 8004c90:	4b37      	ldr	r3, [pc, #220]	; (8004d70 <HAL_ETH_MspInit+0x178>)
 8004c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c94:	4a36      	ldr	r2, [pc, #216]	; (8004d70 <HAL_ETH_MspInit+0x178>)
 8004c96:	f043 0301 	orr.w	r3, r3, #1
 8004c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c9c:	4b34      	ldr	r3, [pc, #208]	; (8004d70 <HAL_ETH_MspInit+0x178>)
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	4b30      	ldr	r3, [pc, #192]	; (8004d70 <HAL_ETH_MspInit+0x178>)
 8004cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb0:	4a2f      	ldr	r2, [pc, #188]	; (8004d70 <HAL_ETH_MspInit+0x178>)
 8004cb2:	f043 0302 	orr.w	r3, r3, #2
 8004cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8004cb8:	4b2d      	ldr	r3, [pc, #180]	; (8004d70 <HAL_ETH_MspInit+0x178>)
 8004cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60bb      	str	r3, [r7, #8]
 8004cc8:	4b29      	ldr	r3, [pc, #164]	; (8004d70 <HAL_ETH_MspInit+0x178>)
 8004cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ccc:	4a28      	ldr	r2, [pc, #160]	; (8004d70 <HAL_ETH_MspInit+0x178>)
 8004cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8004cd4:	4b26      	ldr	r3, [pc, #152]	; (8004d70 <HAL_ETH_MspInit+0x178>)
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004ce0:	2332      	movs	r3, #50	; 0x32
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cec:	2303      	movs	r3, #3
 8004cee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004cf0:	230b      	movs	r3, #11
 8004cf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	481e      	ldr	r0, [pc, #120]	; (8004d74 <HAL_ETH_MspInit+0x17c>)
 8004cfc:	f7fd fea2 	bl	8002a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004d00:	2386      	movs	r3, #134	; 0x86
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d04:	2302      	movs	r3, #2
 8004d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d10:	230b      	movs	r3, #11
 8004d12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4817      	ldr	r0, [pc, #92]	; (8004d78 <HAL_ETH_MspInit+0x180>)
 8004d1c:	f7fd fe92 	bl	8002a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d26:	2302      	movs	r3, #2
 8004d28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d32:	230b      	movs	r3, #11
 8004d34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	480f      	ldr	r0, [pc, #60]	; (8004d7c <HAL_ETH_MspInit+0x184>)
 8004d3e:	f7fd fe81 	bl	8002a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004d42:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d48:	2302      	movs	r3, #2
 8004d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d50:	2303      	movs	r3, #3
 8004d52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d54:	230b      	movs	r3, #11
 8004d56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4808      	ldr	r0, [pc, #32]	; (8004d80 <HAL_ETH_MspInit+0x188>)
 8004d60:	f7fd fe70 	bl	8002a44 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004d64:	bf00      	nop
 8004d66:	3738      	adds	r7, #56	; 0x38
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40028000 	.word	0x40028000
 8004d70:	40023800 	.word	0x40023800
 8004d74:	40020800 	.word	0x40020800
 8004d78:	40020000 	.word	0x40020000
 8004d7c:	40020400 	.word	0x40020400
 8004d80:	40021800 	.word	0x40021800

08004d84 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004d88:	4802      	ldr	r0, [pc, #8]	; (8004d94 <ETH_PHY_IO_Init+0x10>)
 8004d8a:	f7fd f9a9 	bl	80020e0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	20004cc4 	.word	0x20004cc4

08004d98 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  return 0;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	68f9      	ldr	r1, [r7, #12]
 8004dba:	4807      	ldr	r0, [pc, #28]	; (8004dd8 <ETH_PHY_IO_ReadReg+0x30>)
 8004dbc:	f7fc fff8 	bl	8001db0 <HAL_ETH_ReadPHYRegister>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dca:	e000      	b.n	8004dce <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20004cc4 	.word	0x20004cc4

08004ddc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	68f9      	ldr	r1, [r7, #12]
 8004dee:	4807      	ldr	r0, [pc, #28]	; (8004e0c <ETH_PHY_IO_WriteReg+0x30>)
 8004df0:	f7fd f829 	bl	8001e46 <HAL_ETH_WritePHYRegister>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8004dfe:	e000      	b.n	8004e02 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20004cc4 	.word	0x20004cc4

08004e10 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004e14:	f7fc faf6 	bl	8001404 <HAL_GetTick>
 8004e18:	4603      	mov	r3, r0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	bd80      	pop	{r7, pc}
	...

08004e20 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b0a0      	sub	sp, #128	; 0x80
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004e28:	f107 030c 	add.w	r3, r7, #12
 8004e2c:	2264      	movs	r2, #100	; 0x64
 8004e2e:	2100      	movs	r1, #0
 8004e30:	4618      	mov	r0, r3
 8004e32:	f009 fe5f 	bl	800eaf4 <memset>
  int32_t PHYLinkState = 0;
 8004e36:	2300      	movs	r3, #0
 8004e38:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e3e:	2300      	movs	r3, #0
 8004e40:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e42:	2300      	movs	r3, #0
 8004e44:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004e46:	483a      	ldr	r0, [pc, #232]	; (8004f30 <ethernet_link_check_state+0x110>)
 8004e48:	f7fc f9ef 	bl	800122a <LAN8742_GetLinkState>
 8004e4c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e54:	089b      	lsrs	r3, r3, #2
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00c      	beq.n	8004e7a <ethernet_link_check_state+0x5a>
 8004e60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	dc09      	bgt.n	8004e7a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8004e66:	4833      	ldr	r0, [pc, #204]	; (8004f34 <ethernet_link_check_state+0x114>)
 8004e68:	f7fc fd7d 	bl	8001966 <HAL_ETH_Stop>
    netif_set_down(netif);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f001 f81b 	bl	8005ea8 <netif_set_down>
    netif_set_link_down(netif);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f001 f87e 	bl	8005f74 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004e78:	e055      	b.n	8004f26 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d14e      	bne.n	8004f26 <ethernet_link_check_state+0x106>
 8004e88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	dd4b      	ble.n	8004f26 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004e8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e90:	3b02      	subs	r3, #2
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d82a      	bhi.n	8004eec <ethernet_link_check_state+0xcc>
 8004e96:	a201      	add	r2, pc, #4	; (adr r2, 8004e9c <ethernet_link_check_state+0x7c>)
 8004e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9c:	08004ead 	.word	0x08004ead
 8004ea0:	08004ebf 	.word	0x08004ebf
 8004ea4:	08004ecf 	.word	0x08004ecf
 8004ea8:	08004edf 	.word	0x08004edf
      duplex = ETH_FULLDUPLEX_MODE;
 8004eac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004eb0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004eb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004eb6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004ebc:	e017      	b.n	8004eee <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004ec2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ec6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004ecc:	e00f      	b.n	8004eee <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004ece:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ed2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004edc:	e007      	b.n	8004eee <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004eea:	e000      	b.n	8004eee <ethernet_link_check_state+0xce>
      break;
 8004eec:	bf00      	nop
    if(linkchanged)
 8004eee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d018      	beq.n	8004f26 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004ef4:	f107 030c 	add.w	r3, r7, #12
 8004ef8:	4619      	mov	r1, r3
 8004efa:	480e      	ldr	r0, [pc, #56]	; (8004f34 <ethernet_link_check_state+0x114>)
 8004efc:	f7fc ffec 	bl	8001ed8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004f00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f02:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8004f04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f06:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004f08:	f107 030c 	add.w	r3, r7, #12
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4809      	ldr	r0, [pc, #36]	; (8004f34 <ethernet_link_check_state+0x114>)
 8004f10:	f7fd f8cc 	bl	80020ac <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004f14:	4807      	ldr	r0, [pc, #28]	; (8004f34 <ethernet_link_check_state+0x114>)
 8004f16:	f7fc fcc7 	bl	80018a8 <HAL_ETH_Start>
      netif_set_up(netif);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 ff58 	bl	8005dd0 <netif_set_up>
      netif_set_link_up(netif);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fff3 	bl	8005f0c <netif_set_link_up>
}
 8004f26:	bf00      	nop
 8004f28:	3780      	adds	r7, #128	; 0x80
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	20004dac 	.word	0x20004dac
 8004f34:	20004cc4 	.word	0x20004cc4

08004f38 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004f40:	4812      	ldr	r0, [pc, #72]	; (8004f8c <HAL_ETH_RxAllocateCallback+0x54>)
 8004f42:	f000 fcbf 	bl	80058c4 <memp_malloc_pool>
 8004f46:	60f8      	str	r0, [r7, #12]
  if (p)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d014      	beq.n	8004f78 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f103 0220 	add.w	r2, r3, #32
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4a0d      	ldr	r2, [pc, #52]	; (8004f90 <HAL_ETH_RxAllocateCallback+0x58>)
 8004f5c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004f66:	9201      	str	r2, [sp, #4]
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2241      	movs	r2, #65	; 0x41
 8004f6e:	2100      	movs	r1, #0
 8004f70:	2000      	movs	r0, #0
 8004f72:	f001 f9f5 	bl	8006360 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004f76:	e005      	b.n	8004f84 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004f78:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]
}
 8004f84:	bf00      	nop
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	0801293c 	.word	0x0801293c
 8004f90:	08004bb5 	.word	0x08004bb5
 8004f94:	20004b80 	.word	0x20004b80

08004f98 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b089      	sub	sp, #36	; 0x24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3b20      	subs	r3, #32
 8004fb6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	887a      	ldrh	r2, [r7, #2]
 8004fc8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d103      	bne.n	8004fda <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	69fa      	ldr	r2, [r7, #28]
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	e003      	b.n	8004fe2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69fa      	ldr	r2, [r7, #28]
 8004fe0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	61fb      	str	r3, [r7, #28]
 8004fee:	e009      	b.n	8005004 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	891a      	ldrh	r2, [r3, #8]
 8004ff4:	887b      	ldrh	r3, [r7, #2]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	61fb      	str	r3, [r7, #28]
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1f2      	bne.n	8004ff0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800500a:	bf00      	nop
 800500c:	bf00      	nop
 800500e:	3724      	adds	r7, #36	; 0x24
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	4603      	mov	r3, r0
 8005020:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005022:	88fb      	ldrh	r3, [r7, #6]
 8005024:	021b      	lsls	r3, r3, #8
 8005026:	b21a      	sxth	r2, r3
 8005028:	88fb      	ldrh	r3, [r7, #6]
 800502a:	0a1b      	lsrs	r3, r3, #8
 800502c:	b29b      	uxth	r3, r3
 800502e:	b21b      	sxth	r3, r3
 8005030:	4313      	orrs	r3, r2
 8005032:	b21b      	sxth	r3, r3
 8005034:	b29b      	uxth	r3, r3
}
 8005036:	4618      	mov	r0, r3
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	061a      	lsls	r2, r3, #24
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	021b      	lsls	r3, r3, #8
 8005052:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	0a1b      	lsrs	r3, r3, #8
 800505c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	0e1b      	lsrs	r3, r3, #24
 8005066:	4313      	orrs	r3, r2
}
 8005068:	4618      	mov	r0, r3
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800507a:	2300      	movs	r3, #0
 800507c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800507e:	f000 f8d5 	bl	800522c <mem_init>
  memp_init();
 8005082:	f000 fbdb 	bl	800583c <memp_init>
  pbuf_init();
  netif_init();
 8005086:	f000 fcd9 	bl	8005a3c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800508a:	f007 f857 	bl	800c13c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800508e:	f001 fdaf 	bl	8006bf0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005092:	f006 ffc9 	bl	800c028 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005096:	bf00      	nop
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80050aa:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <ptr_to_mem+0x20>)
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	88fb      	ldrh	r3, [r7, #6]
 80050b0:	4413      	add	r3, r2
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	20005438 	.word	0x20005438

080050c4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80050cc:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <mem_to_ptr+0x20>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	b29b      	uxth	r3, r3
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	20005438 	.word	0x20005438

080050e8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80050e8:	b590      	push	{r4, r7, lr}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80050f0:	4b45      	ldr	r3, [pc, #276]	; (8005208 <plug_holes+0x120>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d206      	bcs.n	8005108 <plug_holes+0x20>
 80050fa:	4b44      	ldr	r3, [pc, #272]	; (800520c <plug_holes+0x124>)
 80050fc:	f240 12df 	movw	r2, #479	; 0x1df
 8005100:	4943      	ldr	r1, [pc, #268]	; (8005210 <plug_holes+0x128>)
 8005102:	4844      	ldr	r0, [pc, #272]	; (8005214 <plug_holes+0x12c>)
 8005104:	f009 fcfe 	bl	800eb04 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005108:	4b43      	ldr	r3, [pc, #268]	; (8005218 <plug_holes+0x130>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	429a      	cmp	r2, r3
 8005110:	d306      	bcc.n	8005120 <plug_holes+0x38>
 8005112:	4b3e      	ldr	r3, [pc, #248]	; (800520c <plug_holes+0x124>)
 8005114:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005118:	4940      	ldr	r1, [pc, #256]	; (800521c <plug_holes+0x134>)
 800511a:	483e      	ldr	r0, [pc, #248]	; (8005214 <plug_holes+0x12c>)
 800511c:	f009 fcf2 	bl	800eb04 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	791b      	ldrb	r3, [r3, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d006      	beq.n	8005136 <plug_holes+0x4e>
 8005128:	4b38      	ldr	r3, [pc, #224]	; (800520c <plug_holes+0x124>)
 800512a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800512e:	493c      	ldr	r1, [pc, #240]	; (8005220 <plug_holes+0x138>)
 8005130:	4838      	ldr	r0, [pc, #224]	; (8005214 <plug_holes+0x12c>)
 8005132:	f009 fce7 	bl	800eb04 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800513e:	d906      	bls.n	800514e <plug_holes+0x66>
 8005140:	4b32      	ldr	r3, [pc, #200]	; (800520c <plug_holes+0x124>)
 8005142:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005146:	4937      	ldr	r1, [pc, #220]	; (8005224 <plug_holes+0x13c>)
 8005148:	4832      	ldr	r0, [pc, #200]	; (8005214 <plug_holes+0x12c>)
 800514a:	f009 fcdb 	bl	800eb04 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff ffa4 	bl	80050a0 <ptr_to_mem>
 8005158:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	429a      	cmp	r2, r3
 8005160:	d024      	beq.n	80051ac <plug_holes+0xc4>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	791b      	ldrb	r3, [r3, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d120      	bne.n	80051ac <plug_holes+0xc4>
 800516a:	4b2b      	ldr	r3, [pc, #172]	; (8005218 <plug_holes+0x130>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	429a      	cmp	r2, r3
 8005172:	d01b      	beq.n	80051ac <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005174:	4b2c      	ldr	r3, [pc, #176]	; (8005228 <plug_holes+0x140>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	429a      	cmp	r2, r3
 800517c:	d102      	bne.n	8005184 <plug_holes+0x9c>
      lfree = mem;
 800517e:	4a2a      	ldr	r2, [pc, #168]	; (8005228 <plug_holes+0x140>)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	881a      	ldrh	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005194:	d00a      	beq.n	80051ac <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff ff80 	bl	80050a0 <ptr_to_mem>
 80051a0:	4604      	mov	r4, r0
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7ff ff8e 	bl	80050c4 <mem_to_ptr>
 80051a8:	4603      	mov	r3, r0
 80051aa:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	885b      	ldrh	r3, [r3, #2]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7ff ff75 	bl	80050a0 <ptr_to_mem>
 80051b6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d01f      	beq.n	8005200 <plug_holes+0x118>
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	791b      	ldrb	r3, [r3, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d11b      	bne.n	8005200 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80051c8:	4b17      	ldr	r3, [pc, #92]	; (8005228 <plug_holes+0x140>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d102      	bne.n	80051d8 <plug_holes+0xf0>
      lfree = pmem;
 80051d2:	4a15      	ldr	r2, [pc, #84]	; (8005228 <plug_holes+0x140>)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	881a      	ldrh	r2, [r3, #0]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80051e8:	d00a      	beq.n	8005200 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7ff ff56 	bl	80050a0 <ptr_to_mem>
 80051f4:	4604      	mov	r4, r0
 80051f6:	68b8      	ldr	r0, [r7, #8]
 80051f8:	f7ff ff64 	bl	80050c4 <mem_to_ptr>
 80051fc:	4603      	mov	r3, r0
 80051fe:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005200:	bf00      	nop
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	bd90      	pop	{r4, r7, pc}
 8005208:	20005438 	.word	0x20005438
 800520c:	0800ff98 	.word	0x0800ff98
 8005210:	0800ffc8 	.word	0x0800ffc8
 8005214:	0800ffe0 	.word	0x0800ffe0
 8005218:	2000543c 	.word	0x2000543c
 800521c:	08010008 	.word	0x08010008
 8005220:	08010024 	.word	0x08010024
 8005224:	08010040 	.word	0x08010040
 8005228:	20005440 	.word	0x20005440

0800522c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005232:	4b18      	ldr	r3, [pc, #96]	; (8005294 <mem_init+0x68>)
 8005234:	3303      	adds	r3, #3
 8005236:	f023 0303 	bic.w	r3, r3, #3
 800523a:	461a      	mov	r2, r3
 800523c:	4b16      	ldr	r3, [pc, #88]	; (8005298 <mem_init+0x6c>)
 800523e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005240:	4b15      	ldr	r3, [pc, #84]	; (8005298 <mem_init+0x6c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800524c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800525a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800525e:	f7ff ff1f 	bl	80050a0 <ptr_to_mem>
 8005262:	4603      	mov	r3, r0
 8005264:	4a0d      	ldr	r2, [pc, #52]	; (800529c <mem_init+0x70>)
 8005266:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005268:	4b0c      	ldr	r3, [pc, #48]	; (800529c <mem_init+0x70>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2201      	movs	r2, #1
 800526e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005270:	4b0a      	ldr	r3, [pc, #40]	; (800529c <mem_init+0x70>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005278:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800527a:	4b08      	ldr	r3, [pc, #32]	; (800529c <mem_init+0x70>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005282:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005284:	4b04      	ldr	r3, [pc, #16]	; (8005298 <mem_init+0x6c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a05      	ldr	r2, [pc, #20]	; (80052a0 <mem_init+0x74>)
 800528a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800528c:	bf00      	nop
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20004de4 	.word	0x20004de4
 8005298:	20005438 	.word	0x20005438
 800529c:	2000543c 	.word	0x2000543c
 80052a0:	20005440 	.word	0x20005440

080052a4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7ff ff09 	bl	80050c4 <mem_to_ptr>
 80052b2:	4603      	mov	r3, r0
 80052b4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff fef0 	bl	80050a0 <ptr_to_mem>
 80052c0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	885b      	ldrh	r3, [r3, #2]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff feea 	bl	80050a0 <ptr_to_mem>
 80052cc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80052d6:	d818      	bhi.n	800530a <mem_link_valid+0x66>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	885b      	ldrh	r3, [r3, #2]
 80052dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80052e0:	d813      	bhi.n	800530a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80052e6:	8afa      	ldrh	r2, [r7, #22]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d004      	beq.n	80052f6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	8afa      	ldrh	r2, [r7, #22]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d109      	bne.n	800530a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80052f6:	4b08      	ldr	r3, [pc, #32]	; (8005318 <mem_link_valid+0x74>)
 80052f8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d006      	beq.n	800530e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	885b      	ldrh	r3, [r3, #2]
 8005304:	8afa      	ldrh	r2, [r7, #22]
 8005306:	429a      	cmp	r2, r3
 8005308:	d001      	beq.n	800530e <mem_link_valid+0x6a>
    return 0;
 800530a:	2300      	movs	r3, #0
 800530c:	e000      	b.n	8005310 <mem_link_valid+0x6c>
  }
  return 1;
 800530e:	2301      	movs	r3, #1
}
 8005310:	4618      	mov	r0, r3
 8005312:	3718      	adds	r7, #24
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	2000543c 	.word	0x2000543c

0800531c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d04c      	beq.n	80053c4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f003 0303 	and.w	r3, r3, #3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d007      	beq.n	8005344 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005334:	4b25      	ldr	r3, [pc, #148]	; (80053cc <mem_free+0xb0>)
 8005336:	f240 2273 	movw	r2, #627	; 0x273
 800533a:	4925      	ldr	r1, [pc, #148]	; (80053d0 <mem_free+0xb4>)
 800533c:	4825      	ldr	r0, [pc, #148]	; (80053d4 <mem_free+0xb8>)
 800533e:	f009 fbe1 	bl	800eb04 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005342:	e040      	b.n	80053c6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3b08      	subs	r3, #8
 8005348:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800534a:	4b23      	ldr	r3, [pc, #140]	; (80053d8 <mem_free+0xbc>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	429a      	cmp	r2, r3
 8005352:	d306      	bcc.n	8005362 <mem_free+0x46>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f103 020c 	add.w	r2, r3, #12
 800535a:	4b20      	ldr	r3, [pc, #128]	; (80053dc <mem_free+0xc0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d907      	bls.n	8005372 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005362:	4b1a      	ldr	r3, [pc, #104]	; (80053cc <mem_free+0xb0>)
 8005364:	f240 227f 	movw	r2, #639	; 0x27f
 8005368:	491d      	ldr	r1, [pc, #116]	; (80053e0 <mem_free+0xc4>)
 800536a:	481a      	ldr	r0, [pc, #104]	; (80053d4 <mem_free+0xb8>)
 800536c:	f009 fbca 	bl	800eb04 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005370:	e029      	b.n	80053c6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	791b      	ldrb	r3, [r3, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d107      	bne.n	800538a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800537a:	4b14      	ldr	r3, [pc, #80]	; (80053cc <mem_free+0xb0>)
 800537c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005380:	4918      	ldr	r1, [pc, #96]	; (80053e4 <mem_free+0xc8>)
 8005382:	4814      	ldr	r0, [pc, #80]	; (80053d4 <mem_free+0xb8>)
 8005384:	f009 fbbe 	bl	800eb04 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005388:	e01d      	b.n	80053c6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f7ff ff8a 	bl	80052a4 <mem_link_valid>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d107      	bne.n	80053a6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005396:	4b0d      	ldr	r3, [pc, #52]	; (80053cc <mem_free+0xb0>)
 8005398:	f240 2295 	movw	r2, #661	; 0x295
 800539c:	4912      	ldr	r1, [pc, #72]	; (80053e8 <mem_free+0xcc>)
 800539e:	480d      	ldr	r0, [pc, #52]	; (80053d4 <mem_free+0xb8>)
 80053a0:	f009 fbb0 	bl	800eb04 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80053a4:	e00f      	b.n	80053c6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80053ac:	4b0f      	ldr	r3, [pc, #60]	; (80053ec <mem_free+0xd0>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d202      	bcs.n	80053bc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80053b6:	4a0d      	ldr	r2, [pc, #52]	; (80053ec <mem_free+0xd0>)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f7ff fe93 	bl	80050e8 <plug_holes>
 80053c2:	e000      	b.n	80053c6 <mem_free+0xaa>
    return;
 80053c4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	0800ff98 	.word	0x0800ff98
 80053d0:	0801006c 	.word	0x0801006c
 80053d4:	0800ffe0 	.word	0x0800ffe0
 80053d8:	20005438 	.word	0x20005438
 80053dc:	2000543c 	.word	0x2000543c
 80053e0:	08010090 	.word	0x08010090
 80053e4:	080100ac 	.word	0x080100ac
 80053e8:	080100d4 	.word	0x080100d4
 80053ec:	20005440 	.word	0x20005440

080053f0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80053fc:	887b      	ldrh	r3, [r7, #2]
 80053fe:	3303      	adds	r3, #3
 8005400:	b29b      	uxth	r3, r3
 8005402:	f023 0303 	bic.w	r3, r3, #3
 8005406:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005408:	8bfb      	ldrh	r3, [r7, #30]
 800540a:	2b0b      	cmp	r3, #11
 800540c:	d801      	bhi.n	8005412 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800540e:	230c      	movs	r3, #12
 8005410:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005412:	8bfb      	ldrh	r3, [r7, #30]
 8005414:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005418:	d803      	bhi.n	8005422 <mem_trim+0x32>
 800541a:	8bfa      	ldrh	r2, [r7, #30]
 800541c:	887b      	ldrh	r3, [r7, #2]
 800541e:	429a      	cmp	r2, r3
 8005420:	d201      	bcs.n	8005426 <mem_trim+0x36>
    return NULL;
 8005422:	2300      	movs	r3, #0
 8005424:	e0cc      	b.n	80055c0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005426:	4b68      	ldr	r3, [pc, #416]	; (80055c8 <mem_trim+0x1d8>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	429a      	cmp	r2, r3
 800542e:	d304      	bcc.n	800543a <mem_trim+0x4a>
 8005430:	4b66      	ldr	r3, [pc, #408]	; (80055cc <mem_trim+0x1dc>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	429a      	cmp	r2, r3
 8005438:	d306      	bcc.n	8005448 <mem_trim+0x58>
 800543a:	4b65      	ldr	r3, [pc, #404]	; (80055d0 <mem_trim+0x1e0>)
 800543c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005440:	4964      	ldr	r1, [pc, #400]	; (80055d4 <mem_trim+0x1e4>)
 8005442:	4865      	ldr	r0, [pc, #404]	; (80055d8 <mem_trim+0x1e8>)
 8005444:	f009 fb5e 	bl	800eb04 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005448:	4b5f      	ldr	r3, [pc, #380]	; (80055c8 <mem_trim+0x1d8>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	429a      	cmp	r2, r3
 8005450:	d304      	bcc.n	800545c <mem_trim+0x6c>
 8005452:	4b5e      	ldr	r3, [pc, #376]	; (80055cc <mem_trim+0x1dc>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	429a      	cmp	r2, r3
 800545a:	d301      	bcc.n	8005460 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	e0af      	b.n	80055c0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3b08      	subs	r3, #8
 8005464:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005466:	69b8      	ldr	r0, [r7, #24]
 8005468:	f7ff fe2c 	bl	80050c4 <mem_to_ptr>
 800546c:	4603      	mov	r3, r0
 800546e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	881a      	ldrh	r2, [r3, #0]
 8005474:	8afb      	ldrh	r3, [r7, #22]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	b29b      	uxth	r3, r3
 800547a:	3b08      	subs	r3, #8
 800547c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800547e:	8bfa      	ldrh	r2, [r7, #30]
 8005480:	8abb      	ldrh	r3, [r7, #20]
 8005482:	429a      	cmp	r2, r3
 8005484:	d906      	bls.n	8005494 <mem_trim+0xa4>
 8005486:	4b52      	ldr	r3, [pc, #328]	; (80055d0 <mem_trim+0x1e0>)
 8005488:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800548c:	4953      	ldr	r1, [pc, #332]	; (80055dc <mem_trim+0x1ec>)
 800548e:	4852      	ldr	r0, [pc, #328]	; (80055d8 <mem_trim+0x1e8>)
 8005490:	f009 fb38 	bl	800eb04 <iprintf>
  if (newsize > size) {
 8005494:	8bfa      	ldrh	r2, [r7, #30]
 8005496:	8abb      	ldrh	r3, [r7, #20]
 8005498:	429a      	cmp	r2, r3
 800549a:	d901      	bls.n	80054a0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800549c:	2300      	movs	r3, #0
 800549e:	e08f      	b.n	80055c0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80054a0:	8bfa      	ldrh	r2, [r7, #30]
 80054a2:	8abb      	ldrh	r3, [r7, #20]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d101      	bne.n	80054ac <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	e089      	b.n	80055c0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff fdf5 	bl	80050a0 <ptr_to_mem>
 80054b6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	791b      	ldrb	r3, [r3, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d13f      	bne.n	8005540 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80054c8:	d106      	bne.n	80054d8 <mem_trim+0xe8>
 80054ca:	4b41      	ldr	r3, [pc, #260]	; (80055d0 <mem_trim+0x1e0>)
 80054cc:	f240 22f5 	movw	r2, #757	; 0x2f5
 80054d0:	4943      	ldr	r1, [pc, #268]	; (80055e0 <mem_trim+0x1f0>)
 80054d2:	4841      	ldr	r0, [pc, #260]	; (80055d8 <mem_trim+0x1e8>)
 80054d4:	f009 fb16 	bl	800eb04 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80054de:	8afa      	ldrh	r2, [r7, #22]
 80054e0:	8bfb      	ldrh	r3, [r7, #30]
 80054e2:	4413      	add	r3, r2
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	3308      	adds	r3, #8
 80054e8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80054ea:	4b3e      	ldr	r3, [pc, #248]	; (80055e4 <mem_trim+0x1f4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d106      	bne.n	8005502 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80054f4:	89fb      	ldrh	r3, [r7, #14]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff fdd2 	bl	80050a0 <ptr_to_mem>
 80054fc:	4603      	mov	r3, r0
 80054fe:	4a39      	ldr	r2, [pc, #228]	; (80055e4 <mem_trim+0x1f4>)
 8005500:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005502:	89fb      	ldrh	r3, [r7, #14]
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff fdcb 	bl	80050a0 <ptr_to_mem>
 800550a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	2200      	movs	r2, #0
 8005510:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	89ba      	ldrh	r2, [r7, #12]
 8005516:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	8afa      	ldrh	r2, [r7, #22]
 800551c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	89fa      	ldrh	r2, [r7, #14]
 8005522:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800552c:	d047      	beq.n	80055be <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	4618      	mov	r0, r3
 8005534:	f7ff fdb4 	bl	80050a0 <ptr_to_mem>
 8005538:	4602      	mov	r2, r0
 800553a:	89fb      	ldrh	r3, [r7, #14]
 800553c:	8053      	strh	r3, [r2, #2]
 800553e:	e03e      	b.n	80055be <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005540:	8bfb      	ldrh	r3, [r7, #30]
 8005542:	f103 0214 	add.w	r2, r3, #20
 8005546:	8abb      	ldrh	r3, [r7, #20]
 8005548:	429a      	cmp	r2, r3
 800554a:	d838      	bhi.n	80055be <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800554c:	8afa      	ldrh	r2, [r7, #22]
 800554e:	8bfb      	ldrh	r3, [r7, #30]
 8005550:	4413      	add	r3, r2
 8005552:	b29b      	uxth	r3, r3
 8005554:	3308      	adds	r3, #8
 8005556:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005560:	d106      	bne.n	8005570 <mem_trim+0x180>
 8005562:	4b1b      	ldr	r3, [pc, #108]	; (80055d0 <mem_trim+0x1e0>)
 8005564:	f240 3216 	movw	r2, #790	; 0x316
 8005568:	491d      	ldr	r1, [pc, #116]	; (80055e0 <mem_trim+0x1f0>)
 800556a:	481b      	ldr	r0, [pc, #108]	; (80055d8 <mem_trim+0x1e8>)
 800556c:	f009 faca 	bl	800eb04 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005570:	89fb      	ldrh	r3, [r7, #14]
 8005572:	4618      	mov	r0, r3
 8005574:	f7ff fd94 	bl	80050a0 <ptr_to_mem>
 8005578:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800557a:	4b1a      	ldr	r3, [pc, #104]	; (80055e4 <mem_trim+0x1f4>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	429a      	cmp	r2, r3
 8005582:	d202      	bcs.n	800558a <mem_trim+0x19a>
      lfree = mem2;
 8005584:	4a17      	ldr	r2, [pc, #92]	; (80055e4 <mem_trim+0x1f4>)
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	2200      	movs	r2, #0
 800558e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	881a      	ldrh	r2, [r3, #0]
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	8afa      	ldrh	r2, [r7, #22]
 800559c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	89fa      	ldrh	r2, [r7, #14]
 80055a2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80055ac:	d007      	beq.n	80055be <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7ff fd74 	bl	80050a0 <ptr_to_mem>
 80055b8:	4602      	mov	r2, r0
 80055ba:	89fb      	ldrh	r3, [r7, #14]
 80055bc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80055be:	687b      	ldr	r3, [r7, #4]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3720      	adds	r7, #32
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	20005438 	.word	0x20005438
 80055cc:	2000543c 	.word	0x2000543c
 80055d0:	0800ff98 	.word	0x0800ff98
 80055d4:	08010108 	.word	0x08010108
 80055d8:	0800ffe0 	.word	0x0800ffe0
 80055dc:	08010120 	.word	0x08010120
 80055e0:	08010140 	.word	0x08010140
 80055e4:	20005440 	.word	0x20005440

080055e8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	4603      	mov	r3, r0
 80055f0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80055f2:	88fb      	ldrh	r3, [r7, #6]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <mem_malloc+0x14>
    return NULL;
 80055f8:	2300      	movs	r3, #0
 80055fa:	e0d9      	b.n	80057b0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	3303      	adds	r3, #3
 8005600:	b29b      	uxth	r3, r3
 8005602:	f023 0303 	bic.w	r3, r3, #3
 8005606:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005608:	8bbb      	ldrh	r3, [r7, #28]
 800560a:	2b0b      	cmp	r3, #11
 800560c:	d801      	bhi.n	8005612 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800560e:	230c      	movs	r3, #12
 8005610:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005612:	8bbb      	ldrh	r3, [r7, #28]
 8005614:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005618:	d803      	bhi.n	8005622 <mem_malloc+0x3a>
 800561a:	8bba      	ldrh	r2, [r7, #28]
 800561c:	88fb      	ldrh	r3, [r7, #6]
 800561e:	429a      	cmp	r2, r3
 8005620:	d201      	bcs.n	8005626 <mem_malloc+0x3e>
    return NULL;
 8005622:	2300      	movs	r3, #0
 8005624:	e0c4      	b.n	80057b0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005626:	4b64      	ldr	r3, [pc, #400]	; (80057b8 <mem_malloc+0x1d0>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f7ff fd4a 	bl	80050c4 <mem_to_ptr>
 8005630:	4603      	mov	r3, r0
 8005632:	83fb      	strh	r3, [r7, #30]
 8005634:	e0b4      	b.n	80057a0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005636:	8bfb      	ldrh	r3, [r7, #30]
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff fd31 	bl	80050a0 <ptr_to_mem>
 800563e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	791b      	ldrb	r3, [r3, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	f040 80a4 	bne.w	8005792 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	8bfb      	ldrh	r3, [r7, #30]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	f1a3 0208 	sub.w	r2, r3, #8
 8005658:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800565a:	429a      	cmp	r2, r3
 800565c:	f0c0 8099 	bcc.w	8005792 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	8bfb      	ldrh	r3, [r7, #30]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	f1a3 0208 	sub.w	r2, r3, #8
 800566e:	8bbb      	ldrh	r3, [r7, #28]
 8005670:	3314      	adds	r3, #20
 8005672:	429a      	cmp	r2, r3
 8005674:	d333      	bcc.n	80056de <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005676:	8bfa      	ldrh	r2, [r7, #30]
 8005678:	8bbb      	ldrh	r3, [r7, #28]
 800567a:	4413      	add	r3, r2
 800567c:	b29b      	uxth	r3, r3
 800567e:	3308      	adds	r3, #8
 8005680:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005682:	8a7b      	ldrh	r3, [r7, #18]
 8005684:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005688:	d106      	bne.n	8005698 <mem_malloc+0xb0>
 800568a:	4b4c      	ldr	r3, [pc, #304]	; (80057bc <mem_malloc+0x1d4>)
 800568c:	f240 3287 	movw	r2, #903	; 0x387
 8005690:	494b      	ldr	r1, [pc, #300]	; (80057c0 <mem_malloc+0x1d8>)
 8005692:	484c      	ldr	r0, [pc, #304]	; (80057c4 <mem_malloc+0x1dc>)
 8005694:	f009 fa36 	bl	800eb04 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005698:	8a7b      	ldrh	r3, [r7, #18]
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff fd00 	bl	80050a0 <ptr_to_mem>
 80056a0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	881a      	ldrh	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8bfa      	ldrh	r2, [r7, #30]
 80056b4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	8a7a      	ldrh	r2, [r7, #18]
 80056ba:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2201      	movs	r2, #1
 80056c0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80056ca:	d00b      	beq.n	80056e4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7ff fce5 	bl	80050a0 <ptr_to_mem>
 80056d6:	4602      	mov	r2, r0
 80056d8:	8a7b      	ldrh	r3, [r7, #18]
 80056da:	8053      	strh	r3, [r2, #2]
 80056dc:	e002      	b.n	80056e4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2201      	movs	r2, #1
 80056e2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80056e4:	4b34      	ldr	r3, [pc, #208]	; (80057b8 <mem_malloc+0x1d0>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d127      	bne.n	800573e <mem_malloc+0x156>
          struct mem *cur = lfree;
 80056ee:	4b32      	ldr	r3, [pc, #200]	; (80057b8 <mem_malloc+0x1d0>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80056f4:	e005      	b.n	8005702 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7ff fcd0 	bl	80050a0 <ptr_to_mem>
 8005700:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	791b      	ldrb	r3, [r3, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d004      	beq.n	8005714 <mem_malloc+0x12c>
 800570a:	4b2f      	ldr	r3, [pc, #188]	; (80057c8 <mem_malloc+0x1e0>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	429a      	cmp	r2, r3
 8005712:	d1f0      	bne.n	80056f6 <mem_malloc+0x10e>
          }
          lfree = cur;
 8005714:	4a28      	ldr	r2, [pc, #160]	; (80057b8 <mem_malloc+0x1d0>)
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800571a:	4b27      	ldr	r3, [pc, #156]	; (80057b8 <mem_malloc+0x1d0>)
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	4b2a      	ldr	r3, [pc, #168]	; (80057c8 <mem_malloc+0x1e0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d00b      	beq.n	800573e <mem_malloc+0x156>
 8005726:	4b24      	ldr	r3, [pc, #144]	; (80057b8 <mem_malloc+0x1d0>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	791b      	ldrb	r3, [r3, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d006      	beq.n	800573e <mem_malloc+0x156>
 8005730:	4b22      	ldr	r3, [pc, #136]	; (80057bc <mem_malloc+0x1d4>)
 8005732:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005736:	4925      	ldr	r1, [pc, #148]	; (80057cc <mem_malloc+0x1e4>)
 8005738:	4822      	ldr	r0, [pc, #136]	; (80057c4 <mem_malloc+0x1dc>)
 800573a:	f009 f9e3 	bl	800eb04 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800573e:	8bba      	ldrh	r2, [r7, #28]
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	4413      	add	r3, r2
 8005744:	3308      	adds	r3, #8
 8005746:	4a20      	ldr	r2, [pc, #128]	; (80057c8 <mem_malloc+0x1e0>)
 8005748:	6812      	ldr	r2, [r2, #0]
 800574a:	4293      	cmp	r3, r2
 800574c:	d906      	bls.n	800575c <mem_malloc+0x174>
 800574e:	4b1b      	ldr	r3, [pc, #108]	; (80057bc <mem_malloc+0x1d4>)
 8005750:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005754:	491e      	ldr	r1, [pc, #120]	; (80057d0 <mem_malloc+0x1e8>)
 8005756:	481b      	ldr	r0, [pc, #108]	; (80057c4 <mem_malloc+0x1dc>)
 8005758:	f009 f9d4 	bl	800eb04 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f003 0303 	and.w	r3, r3, #3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d006      	beq.n	8005774 <mem_malloc+0x18c>
 8005766:	4b15      	ldr	r3, [pc, #84]	; (80057bc <mem_malloc+0x1d4>)
 8005768:	f240 32bb 	movw	r2, #955	; 0x3bb
 800576c:	4919      	ldr	r1, [pc, #100]	; (80057d4 <mem_malloc+0x1ec>)
 800576e:	4815      	ldr	r0, [pc, #84]	; (80057c4 <mem_malloc+0x1dc>)
 8005770:	f009 f9c8 	bl	800eb04 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d006      	beq.n	800578c <mem_malloc+0x1a4>
 800577e:	4b0f      	ldr	r3, [pc, #60]	; (80057bc <mem_malloc+0x1d4>)
 8005780:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005784:	4914      	ldr	r1, [pc, #80]	; (80057d8 <mem_malloc+0x1f0>)
 8005786:	480f      	ldr	r0, [pc, #60]	; (80057c4 <mem_malloc+0x1dc>)
 8005788:	f009 f9bc 	bl	800eb04 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	3308      	adds	r3, #8
 8005790:	e00e      	b.n	80057b0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005792:	8bfb      	ldrh	r3, [r7, #30]
 8005794:	4618      	mov	r0, r3
 8005796:	f7ff fc83 	bl	80050a0 <ptr_to_mem>
 800579a:	4603      	mov	r3, r0
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80057a0:	8bfa      	ldrh	r2, [r7, #30]
 80057a2:	8bbb      	ldrh	r3, [r7, #28]
 80057a4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80057a8:	429a      	cmp	r2, r3
 80057aa:	f4ff af44 	bcc.w	8005636 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3720      	adds	r7, #32
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	20005440 	.word	0x20005440
 80057bc:	0800ff98 	.word	0x0800ff98
 80057c0:	08010140 	.word	0x08010140
 80057c4:	0800ffe0 	.word	0x0800ffe0
 80057c8:	2000543c 	.word	0x2000543c
 80057cc:	08010154 	.word	0x08010154
 80057d0:	08010170 	.word	0x08010170
 80057d4:	080101a0 	.word	0x080101a0
 80057d8:	080101d0 	.word	0x080101d0

080057dc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	3303      	adds	r3, #3
 80057f2:	f023 0303 	bic.w	r3, r3, #3
 80057f6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80057f8:	2300      	movs	r3, #0
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	e011      	b.n	8005822 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	461a      	mov	r2, r3
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	4413      	add	r3, r2
 800581a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3301      	adds	r3, #1
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	885b      	ldrh	r3, [r3, #2]
 8005826:	461a      	mov	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4293      	cmp	r3, r2
 800582c:	dbe7      	blt.n	80057fe <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800582e:	bf00      	nop
 8005830:	bf00      	nop
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005842:	2300      	movs	r3, #0
 8005844:	80fb      	strh	r3, [r7, #6]
 8005846:	e009      	b.n	800585c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	4a08      	ldr	r2, [pc, #32]	; (800586c <memp_init+0x30>)
 800584c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005850:	4618      	mov	r0, r3
 8005852:	f7ff ffc3 	bl	80057dc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005856:	88fb      	ldrh	r3, [r7, #6]
 8005858:	3301      	adds	r3, #1
 800585a:	80fb      	strh	r3, [r7, #6]
 800585c:	88fb      	ldrh	r3, [r7, #6]
 800585e:	2b08      	cmp	r3, #8
 8005860:	d9f2      	bls.n	8005848 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005862:	bf00      	nop
 8005864:	bf00      	nop
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	080129b4 	.word	0x080129b4

08005870 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d012      	beq.n	80058ac <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	6812      	ldr	r2, [r2, #0]
 800588e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d006      	beq.n	80058a8 <do_memp_malloc_pool+0x38>
 800589a:	4b07      	ldr	r3, [pc, #28]	; (80058b8 <do_memp_malloc_pool+0x48>)
 800589c:	f44f 728c 	mov.w	r2, #280	; 0x118
 80058a0:	4906      	ldr	r1, [pc, #24]	; (80058bc <do_memp_malloc_pool+0x4c>)
 80058a2:	4807      	ldr	r0, [pc, #28]	; (80058c0 <do_memp_malloc_pool+0x50>)
 80058a4:	f009 f92e 	bl	800eb04 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	e000      	b.n	80058ae <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	080101f4 	.word	0x080101f4
 80058bc:	08010224 	.word	0x08010224
 80058c0:	08010248 	.word	0x08010248

080058c4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d106      	bne.n	80058e0 <memp_malloc_pool+0x1c>
 80058d2:	4b0a      	ldr	r3, [pc, #40]	; (80058fc <memp_malloc_pool+0x38>)
 80058d4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80058d8:	4909      	ldr	r1, [pc, #36]	; (8005900 <memp_malloc_pool+0x3c>)
 80058da:	480a      	ldr	r0, [pc, #40]	; (8005904 <memp_malloc_pool+0x40>)
 80058dc:	f009 f912 	bl	800eb04 <iprintf>
  if (desc == NULL) {
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <memp_malloc_pool+0x26>
    return NULL;
 80058e6:	2300      	movs	r3, #0
 80058e8:	e003      	b.n	80058f2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7ff ffc0 	bl	8005870 <do_memp_malloc_pool>
 80058f0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	080101f4 	.word	0x080101f4
 8005900:	08010270 	.word	0x08010270
 8005904:	08010248 	.word	0x08010248

08005908 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005912:	79fb      	ldrb	r3, [r7, #7]
 8005914:	2b08      	cmp	r3, #8
 8005916:	d908      	bls.n	800592a <memp_malloc+0x22>
 8005918:	4b0a      	ldr	r3, [pc, #40]	; (8005944 <memp_malloc+0x3c>)
 800591a:	f240 1257 	movw	r2, #343	; 0x157
 800591e:	490a      	ldr	r1, [pc, #40]	; (8005948 <memp_malloc+0x40>)
 8005920:	480a      	ldr	r0, [pc, #40]	; (800594c <memp_malloc+0x44>)
 8005922:	f009 f8ef 	bl	800eb04 <iprintf>
 8005926:	2300      	movs	r3, #0
 8005928:	e008      	b.n	800593c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800592a:	79fb      	ldrb	r3, [r7, #7]
 800592c:	4a08      	ldr	r2, [pc, #32]	; (8005950 <memp_malloc+0x48>)
 800592e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005932:	4618      	mov	r0, r3
 8005934:	f7ff ff9c 	bl	8005870 <do_memp_malloc_pool>
 8005938:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800593a:	68fb      	ldr	r3, [r7, #12]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	080101f4 	.word	0x080101f4
 8005948:	08010284 	.word	0x08010284
 800594c:	08010248 	.word	0x08010248
 8005950:	080129b4 	.word	0x080129b4

08005954 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	f003 0303 	and.w	r3, r3, #3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d006      	beq.n	8005976 <do_memp_free_pool+0x22>
 8005968:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <do_memp_free_pool+0x40>)
 800596a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800596e:	490a      	ldr	r1, [pc, #40]	; (8005998 <do_memp_free_pool+0x44>)
 8005970:	480a      	ldr	r0, [pc, #40]	; (800599c <do_memp_free_pool+0x48>)
 8005972:	f009 f8c7 	bl	800eb04 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800598c:	bf00      	nop
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	080101f4 	.word	0x080101f4
 8005998:	080102a4 	.word	0x080102a4
 800599c:	08010248 	.word	0x08010248

080059a0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d106      	bne.n	80059be <memp_free_pool+0x1e>
 80059b0:	4b0a      	ldr	r3, [pc, #40]	; (80059dc <memp_free_pool+0x3c>)
 80059b2:	f240 1295 	movw	r2, #405	; 0x195
 80059b6:	490a      	ldr	r1, [pc, #40]	; (80059e0 <memp_free_pool+0x40>)
 80059b8:	480a      	ldr	r0, [pc, #40]	; (80059e4 <memp_free_pool+0x44>)
 80059ba:	f009 f8a3 	bl	800eb04 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d007      	beq.n	80059d4 <memp_free_pool+0x34>
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d004      	beq.n	80059d4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7ff ffc1 	bl	8005954 <do_memp_free_pool>
 80059d2:	e000      	b.n	80059d6 <memp_free_pool+0x36>
    return;
 80059d4:	bf00      	nop
}
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	080101f4 	.word	0x080101f4
 80059e0:	08010270 	.word	0x08010270
 80059e4:	08010248 	.word	0x08010248

080059e8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	4603      	mov	r3, r0
 80059f0:	6039      	str	r1, [r7, #0]
 80059f2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	2b08      	cmp	r3, #8
 80059f8:	d907      	bls.n	8005a0a <memp_free+0x22>
 80059fa:	4b0c      	ldr	r3, [pc, #48]	; (8005a2c <memp_free+0x44>)
 80059fc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005a00:	490b      	ldr	r1, [pc, #44]	; (8005a30 <memp_free+0x48>)
 8005a02:	480c      	ldr	r0, [pc, #48]	; (8005a34 <memp_free+0x4c>)
 8005a04:	f009 f87e 	bl	800eb04 <iprintf>
 8005a08:	e00c      	b.n	8005a24 <memp_free+0x3c>

  if (mem == NULL) {
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d008      	beq.n	8005a22 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005a10:	79fb      	ldrb	r3, [r7, #7]
 8005a12:	4a09      	ldr	r2, [pc, #36]	; (8005a38 <memp_free+0x50>)
 8005a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a18:	6839      	ldr	r1, [r7, #0]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7ff ff9a 	bl	8005954 <do_memp_free_pool>
 8005a20:	e000      	b.n	8005a24 <memp_free+0x3c>
    return;
 8005a22:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	080101f4 	.word	0x080101f4
 8005a30:	080102c4 	.word	0x080102c4
 8005a34:	08010248 	.word	0x08010248
 8005a38:	080129b4 	.word	0x080129b4

08005a3c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005a40:	bf00      	nop
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
	...

08005a4c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d108      	bne.n	8005a72 <netif_add+0x26>
 8005a60:	4b57      	ldr	r3, [pc, #348]	; (8005bc0 <netif_add+0x174>)
 8005a62:	f240 1227 	movw	r2, #295	; 0x127
 8005a66:	4957      	ldr	r1, [pc, #348]	; (8005bc4 <netif_add+0x178>)
 8005a68:	4857      	ldr	r0, [pc, #348]	; (8005bc8 <netif_add+0x17c>)
 8005a6a:	f009 f84b 	bl	800eb04 <iprintf>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e0a2      	b.n	8005bb8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d108      	bne.n	8005a8a <netif_add+0x3e>
 8005a78:	4b51      	ldr	r3, [pc, #324]	; (8005bc0 <netif_add+0x174>)
 8005a7a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005a7e:	4953      	ldr	r1, [pc, #332]	; (8005bcc <netif_add+0x180>)
 8005a80:	4851      	ldr	r0, [pc, #324]	; (8005bc8 <netif_add+0x17c>)
 8005a82:	f009 f83f 	bl	800eb04 <iprintf>
 8005a86:	2300      	movs	r3, #0
 8005a88:	e096      	b.n	8005bb8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005a90:	4b4f      	ldr	r3, [pc, #316]	; (8005bd0 <netif_add+0x184>)
 8005a92:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005a9a:	4b4d      	ldr	r3, [pc, #308]	; (8005bd0 <netif_add+0x184>)
 8005a9c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005aa4:	4b4a      	ldr	r3, [pc, #296]	; (8005bd0 <netif_add+0x184>)
 8005aa6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4a45      	ldr	r2, [pc, #276]	; (8005bd4 <netif_add+0x188>)
 8005abe:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6a3a      	ldr	r2, [r7, #32]
 8005ad8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005ada:	4b3f      	ldr	r3, [pc, #252]	; (8005bd8 <netif_add+0x18c>)
 8005adc:	781a      	ldrb	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ae8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	68b9      	ldr	r1, [r7, #8]
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 f913 	bl	8005d1c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	4798      	blx	r3
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <netif_add+0xba>
    return NULL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	e058      	b.n	8005bb8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b0c:	2bff      	cmp	r3, #255	; 0xff
 8005b0e:	d103      	bne.n	8005b18 <netif_add+0xcc>
        netif->num = 0;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005b1c:	4b2f      	ldr	r3, [pc, #188]	; (8005bdc <netif_add+0x190>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	617b      	str	r3, [r7, #20]
 8005b22:	e02b      	b.n	8005b7c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d106      	bne.n	8005b3a <netif_add+0xee>
 8005b2c:	4b24      	ldr	r3, [pc, #144]	; (8005bc0 <netif_add+0x174>)
 8005b2e:	f240 128b 	movw	r2, #395	; 0x18b
 8005b32:	492b      	ldr	r1, [pc, #172]	; (8005be0 <netif_add+0x194>)
 8005b34:	4824      	ldr	r0, [pc, #144]	; (8005bc8 <netif_add+0x17c>)
 8005b36:	f008 ffe5 	bl	800eb04 <iprintf>
        num_netifs++;
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2bff      	cmp	r3, #255	; 0xff
 8005b44:	dd06      	ble.n	8005b54 <netif_add+0x108>
 8005b46:	4b1e      	ldr	r3, [pc, #120]	; (8005bc0 <netif_add+0x174>)
 8005b48:	f240 128d 	movw	r2, #397	; 0x18d
 8005b4c:	4925      	ldr	r1, [pc, #148]	; (8005be4 <netif_add+0x198>)
 8005b4e:	481e      	ldr	r0, [pc, #120]	; (8005bc8 <netif_add+0x17c>)
 8005b50:	f008 ffd8 	bl	800eb04 <iprintf>
        if (netif2->num == netif->num) {
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d108      	bne.n	8005b76 <netif_add+0x12a>
          netif->num++;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005b74:	e005      	b.n	8005b82 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1d0      	bne.n	8005b24 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1be      	bne.n	8005b06 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b8e:	2bfe      	cmp	r3, #254	; 0xfe
 8005b90:	d103      	bne.n	8005b9a <netif_add+0x14e>
    netif_num = 0;
 8005b92:	4b11      	ldr	r3, [pc, #68]	; (8005bd8 <netif_add+0x18c>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	701a      	strb	r2, [r3, #0]
 8005b98:	e006      	b.n	8005ba8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	4b0c      	ldr	r3, [pc, #48]	; (8005bd8 <netif_add+0x18c>)
 8005ba6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005ba8:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <netif_add+0x190>)
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005bb0:	4a0a      	ldr	r2, [pc, #40]	; (8005bdc <netif_add+0x190>)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3718      	adds	r7, #24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	080102e0 	.word	0x080102e0
 8005bc4:	08010374 	.word	0x08010374
 8005bc8:	08010330 	.word	0x08010330
 8005bcc:	08010390 	.word	0x08010390
 8005bd0:	08012a18 	.word	0x08012a18
 8005bd4:	08005ff7 	.word	0x08005ff7
 8005bd8:	20008338 	.word	0x20008338
 8005bdc:	20008330 	.word	0x20008330
 8005be0:	080103b4 	.word	0x080103b4
 8005be4:	080103c8 	.word	0x080103c8

08005be8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f002 fb43 	bl	8008280 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005bfa:	6839      	ldr	r1, [r7, #0]
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f006 fc27 	bl	800c450 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005c02:	bf00      	nop
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d106      	bne.n	8005c2c <netif_do_set_ipaddr+0x20>
 8005c1e:	4b1d      	ldr	r3, [pc, #116]	; (8005c94 <netif_do_set_ipaddr+0x88>)
 8005c20:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005c24:	491c      	ldr	r1, [pc, #112]	; (8005c98 <netif_do_set_ipaddr+0x8c>)
 8005c26:	481d      	ldr	r0, [pc, #116]	; (8005c9c <netif_do_set_ipaddr+0x90>)
 8005c28:	f008 ff6c 	bl	800eb04 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d106      	bne.n	8005c40 <netif_do_set_ipaddr+0x34>
 8005c32:	4b18      	ldr	r3, [pc, #96]	; (8005c94 <netif_do_set_ipaddr+0x88>)
 8005c34:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005c38:	4917      	ldr	r1, [pc, #92]	; (8005c98 <netif_do_set_ipaddr+0x8c>)
 8005c3a:	4818      	ldr	r0, [pc, #96]	; (8005c9c <netif_do_set_ipaddr+0x90>)
 8005c3c:	f008 ff62 	bl	800eb04 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3304      	adds	r3, #4
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d01c      	beq.n	8005c88 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	3304      	adds	r3, #4
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005c5e:	f107 0314 	add.w	r3, r7, #20
 8005c62:	4619      	mov	r1, r3
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff ffbf 	bl	8005be8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <netif_do_set_ipaddr+0x6a>
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	e000      	b.n	8005c78 <netif_do_set_ipaddr+0x6c>
 8005c76:	2300      	movs	r3, #0
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 f8d2 	bl	8005e28 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005c84:	2301      	movs	r3, #1
 8005c86:	e000      	b.n	8005c8a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3718      	adds	r7, #24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	080102e0 	.word	0x080102e0
 8005c98:	080103f8 	.word	0x080103f8
 8005c9c:	08010330 	.word	0x08010330

08005ca0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	3308      	adds	r3, #8
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d00a      	beq.n	8005cd0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <netif_do_set_netmask+0x26>
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	e000      	b.n	8005cc8 <netif_do_set_netmask+0x28>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e000      	b.n	8005cd2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b085      	sub	sp, #20
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	330c      	adds	r3, #12
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d00a      	beq.n	8005d0e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <netif_do_set_gw+0x26>
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	e000      	b.n	8005d06 <netif_do_set_gw+0x28>
 8005d04:	2300      	movs	r3, #0
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b088      	sub	sp, #32
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005d38:	4b1c      	ldr	r3, [pc, #112]	; (8005dac <netif_set_addr+0x90>)
 8005d3a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005d42:	4b1a      	ldr	r3, [pc, #104]	; (8005dac <netif_set_addr+0x90>)
 8005d44:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005d4c:	4b17      	ldr	r3, [pc, #92]	; (8005dac <netif_set_addr+0x90>)
 8005d4e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <netif_set_addr+0x42>
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <netif_set_addr+0x46>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <netif_set_addr+0x48>
 8005d62:	2300      	movs	r3, #0
 8005d64:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d006      	beq.n	8005d7a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005d6c:	f107 0310 	add.w	r3, r7, #16
 8005d70:	461a      	mov	r2, r3
 8005d72:	68b9      	ldr	r1, [r7, #8]
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f7ff ff49 	bl	8005c0c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005d7a:	69fa      	ldr	r2, [r7, #28]
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f7ff ff8e 	bl	8005ca0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f7ff ffa8 	bl	8005cde <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d106      	bne.n	8005da2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005d94:	f107 0310 	add.w	r3, r7, #16
 8005d98:	461a      	mov	r2, r3
 8005d9a:	68b9      	ldr	r1, [r7, #8]
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f7ff ff35 	bl	8005c0c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005da2:	bf00      	nop
 8005da4:	3720      	adds	r7, #32
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	08012a18 	.word	0x08012a18

08005db0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005db8:	4a04      	ldr	r2, [pc, #16]	; (8005dcc <netif_set_default+0x1c>)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005dbe:	bf00      	nop
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	20008334 	.word	0x20008334

08005dd0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d107      	bne.n	8005dee <netif_set_up+0x1e>
 8005dde:	4b0f      	ldr	r3, [pc, #60]	; (8005e1c <netif_set_up+0x4c>)
 8005de0:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005de4:	490e      	ldr	r1, [pc, #56]	; (8005e20 <netif_set_up+0x50>)
 8005de6:	480f      	ldr	r0, [pc, #60]	; (8005e24 <netif_set_up+0x54>)
 8005de8:	f008 fe8c 	bl	800eb04 <iprintf>
 8005dec:	e013      	b.n	8005e16 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10c      	bne.n	8005e16 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e02:	f043 0301 	orr.w	r3, r3, #1
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005e0e:	2103      	movs	r1, #3
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f809 	bl	8005e28 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	080102e0 	.word	0x080102e0
 8005e20:	08010468 	.word	0x08010468
 8005e24:	08010330 	.word	0x08010330

08005e28 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d106      	bne.n	8005e48 <netif_issue_reports+0x20>
 8005e3a:	4b18      	ldr	r3, [pc, #96]	; (8005e9c <netif_issue_reports+0x74>)
 8005e3c:	f240 326d 	movw	r2, #877	; 0x36d
 8005e40:	4917      	ldr	r1, [pc, #92]	; (8005ea0 <netif_issue_reports+0x78>)
 8005e42:	4818      	ldr	r0, [pc, #96]	; (8005ea4 <netif_issue_reports+0x7c>)
 8005e44:	f008 fe5e 	bl	800eb04 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e4e:	f003 0304 	and.w	r3, r3, #4
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d01e      	beq.n	8005e94 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e5c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d017      	beq.n	8005e94 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005e64:	78fb      	ldrb	r3, [r7, #3]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d013      	beq.n	8005e96 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3304      	adds	r3, #4
 8005e72:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00e      	beq.n	8005e96 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e7e:	f003 0308 	and.w	r3, r3, #8
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d007      	beq.n	8005e96 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	3304      	adds	r3, #4
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f007 fa49 	bl	800d324 <etharp_request>
 8005e92:	e000      	b.n	8005e96 <netif_issue_reports+0x6e>
    return;
 8005e94:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	080102e0 	.word	0x080102e0
 8005ea0:	08010484 	.word	0x08010484
 8005ea4:	08010330 	.word	0x08010330

08005ea8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d107      	bne.n	8005ec6 <netif_set_down+0x1e>
 8005eb6:	4b12      	ldr	r3, [pc, #72]	; (8005f00 <netif_set_down+0x58>)
 8005eb8:	f240 329b 	movw	r2, #923	; 0x39b
 8005ebc:	4911      	ldr	r1, [pc, #68]	; (8005f04 <netif_set_down+0x5c>)
 8005ebe:	4812      	ldr	r0, [pc, #72]	; (8005f08 <netif_set_down+0x60>)
 8005ec0:	f008 fe20 	bl	800eb04 <iprintf>
 8005ec4:	e019      	b.n	8005efa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d012      	beq.n	8005efa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005eda:	f023 0301 	bic.w	r3, r3, #1
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005eec:	f003 0308 	and.w	r3, r3, #8
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f006 fdd3 	bl	800caa0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	080102e0 	.word	0x080102e0
 8005f04:	080104a8 	.word	0x080104a8
 8005f08:	08010330 	.word	0x08010330

08005f0c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d107      	bne.n	8005f2a <netif_set_link_up+0x1e>
 8005f1a:	4b13      	ldr	r3, [pc, #76]	; (8005f68 <netif_set_link_up+0x5c>)
 8005f1c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8005f20:	4912      	ldr	r1, [pc, #72]	; (8005f6c <netif_set_link_up+0x60>)
 8005f22:	4813      	ldr	r0, [pc, #76]	; (8005f70 <netif_set_link_up+0x64>)
 8005f24:	f008 fdee 	bl	800eb04 <iprintf>
 8005f28:	e01b      	b.n	8005f62 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d114      	bne.n	8005f62 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f3e:	f043 0304 	orr.w	r3, r3, #4
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005f4a:	2103      	movs	r1, #3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7ff ff6b 	bl	8005e28 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <netif_set_link_up+0x56>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	080102e0 	.word	0x080102e0
 8005f6c:	080104c8 	.word	0x080104c8
 8005f70:	08010330 	.word	0x08010330

08005f74 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d107      	bne.n	8005f92 <netif_set_link_down+0x1e>
 8005f82:	4b11      	ldr	r3, [pc, #68]	; (8005fc8 <netif_set_link_down+0x54>)
 8005f84:	f240 4206 	movw	r2, #1030	; 0x406
 8005f88:	4910      	ldr	r1, [pc, #64]	; (8005fcc <netif_set_link_down+0x58>)
 8005f8a:	4811      	ldr	r0, [pc, #68]	; (8005fd0 <netif_set_link_down+0x5c>)
 8005f8c:	f008 fdba 	bl	800eb04 <iprintf>
 8005f90:	e017      	b.n	8005fc2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d010      	beq.n	8005fc2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005fa6:	f023 0304 	bic.w	r3, r3, #4
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <netif_set_link_down+0x4e>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	080102e0 	.word	0x080102e0
 8005fcc:	080104ec 	.word	0x080104ec
 8005fd0:	08010330 	.word	0x08010330

08005fd4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d002      	beq.n	8005fea <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	61da      	str	r2, [r3, #28]
  }
}
 8005fea:	bf00      	nop
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b085      	sub	sp, #20
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006002:	f06f 030b 	mvn.w	r3, #11
}
 8006006:	4618      	mov	r0, r3
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
	...

08006014 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	4603      	mov	r3, r0
 800601c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800601e:	79fb      	ldrb	r3, [r7, #7]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d013      	beq.n	800604c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006024:	4b0d      	ldr	r3, [pc, #52]	; (800605c <netif_get_by_index+0x48>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	e00c      	b.n	8006046 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006032:	3301      	adds	r3, #1
 8006034:	b2db      	uxtb	r3, r3
 8006036:	79fa      	ldrb	r2, [r7, #7]
 8006038:	429a      	cmp	r2, r3
 800603a:	d101      	bne.n	8006040 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	e006      	b.n	800604e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	60fb      	str	r3, [r7, #12]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1ef      	bne.n	800602c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	20008330 	.word	0x20008330

08006060 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006066:	4b0c      	ldr	r3, [pc, #48]	; (8006098 <pbuf_free_ooseq+0x38>)
 8006068:	2200      	movs	r2, #0
 800606a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800606c:	4b0b      	ldr	r3, [pc, #44]	; (800609c <pbuf_free_ooseq+0x3c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	607b      	str	r3, [r7, #4]
 8006072:	e00a      	b.n	800608a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f002 f93d 	bl	80082fc <tcp_free_ooseq>
      return;
 8006082:	e005      	b.n	8006090 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	607b      	str	r3, [r7, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1f1      	bne.n	8006074 <pbuf_free_ooseq+0x14>
    }
  }
}
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20008339 	.word	0x20008339
 800609c:	20008348 	.word	0x20008348

080060a0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80060a0:	b480      	push	{r7}
 80060a2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80060a4:	4b03      	ldr	r3, [pc, #12]	; (80060b4 <pbuf_pool_is_empty+0x14>)
 80060a6:	2201      	movs	r2, #1
 80060a8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80060aa:	bf00      	nop
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	20008339 	.word	0x20008339

080060b8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	4611      	mov	r1, r2
 80060c4:	461a      	mov	r2, r3
 80060c6:	460b      	mov	r3, r1
 80060c8:	80fb      	strh	r3, [r7, #6]
 80060ca:	4613      	mov	r3, r2
 80060cc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	88fa      	ldrh	r2, [r7, #6]
 80060de:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	88ba      	ldrh	r2, [r7, #4]
 80060e4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80060e6:	8b3b      	ldrh	r3, [r7, #24]
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	7f3a      	ldrb	r2, [r7, #28]
 80060f2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2201      	movs	r2, #1
 80060f8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	73da      	strb	r2, [r3, #15]
}
 8006100:	bf00      	nop
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b08c      	sub	sp, #48	; 0x30
 8006110:	af02      	add	r7, sp, #8
 8006112:	4603      	mov	r3, r0
 8006114:	71fb      	strb	r3, [r7, #7]
 8006116:	460b      	mov	r3, r1
 8006118:	80bb      	strh	r3, [r7, #4]
 800611a:	4613      	mov	r3, r2
 800611c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800611e:	79fb      	ldrb	r3, [r7, #7]
 8006120:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006122:	887b      	ldrh	r3, [r7, #2]
 8006124:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006128:	d07f      	beq.n	800622a <pbuf_alloc+0x11e>
 800612a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800612e:	f300 80c8 	bgt.w	80062c2 <pbuf_alloc+0x1b6>
 8006132:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006136:	d010      	beq.n	800615a <pbuf_alloc+0x4e>
 8006138:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800613c:	f300 80c1 	bgt.w	80062c2 <pbuf_alloc+0x1b6>
 8006140:	2b01      	cmp	r3, #1
 8006142:	d002      	beq.n	800614a <pbuf_alloc+0x3e>
 8006144:	2b41      	cmp	r3, #65	; 0x41
 8006146:	f040 80bc 	bne.w	80062c2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800614a:	887a      	ldrh	r2, [r7, #2]
 800614c:	88bb      	ldrh	r3, [r7, #4]
 800614e:	4619      	mov	r1, r3
 8006150:	2000      	movs	r0, #0
 8006152:	f000 f8d1 	bl	80062f8 <pbuf_alloc_reference>
 8006156:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8006158:	e0bd      	b.n	80062d6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800615a:	2300      	movs	r3, #0
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800615e:	2300      	movs	r3, #0
 8006160:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006162:	88bb      	ldrh	r3, [r7, #4]
 8006164:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006166:	2008      	movs	r0, #8
 8006168:	f7ff fbce 	bl	8005908 <memp_malloc>
 800616c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d109      	bne.n	8006188 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8006174:	f7ff ff94 	bl	80060a0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	2b00      	cmp	r3, #0
 800617c:	d002      	beq.n	8006184 <pbuf_alloc+0x78>
            pbuf_free(p);
 800617e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006180:	f000 faa8 	bl	80066d4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006184:	2300      	movs	r3, #0
 8006186:	e0a7      	b.n	80062d8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006188:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800618a:	3303      	adds	r3, #3
 800618c:	b29b      	uxth	r3, r3
 800618e:	f023 0303 	bic.w	r3, r3, #3
 8006192:	b29b      	uxth	r3, r3
 8006194:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8006198:	b29b      	uxth	r3, r3
 800619a:	8b7a      	ldrh	r2, [r7, #26]
 800619c:	4293      	cmp	r3, r2
 800619e:	bf28      	it	cs
 80061a0:	4613      	movcs	r3, r2
 80061a2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80061a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80061a6:	3310      	adds	r3, #16
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	4413      	add	r3, r2
 80061ac:	3303      	adds	r3, #3
 80061ae:	f023 0303 	bic.w	r3, r3, #3
 80061b2:	4618      	mov	r0, r3
 80061b4:	89f9      	ldrh	r1, [r7, #14]
 80061b6:	8b7a      	ldrh	r2, [r7, #26]
 80061b8:	2300      	movs	r3, #0
 80061ba:	9301      	str	r3, [sp, #4]
 80061bc:	887b      	ldrh	r3, [r7, #2]
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	460b      	mov	r3, r1
 80061c2:	4601      	mov	r1, r0
 80061c4:	6938      	ldr	r0, [r7, #16]
 80061c6:	f7ff ff77 	bl	80060b8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d006      	beq.n	80061e4 <pbuf_alloc+0xd8>
 80061d6:	4b42      	ldr	r3, [pc, #264]	; (80062e0 <pbuf_alloc+0x1d4>)
 80061d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061dc:	4941      	ldr	r1, [pc, #260]	; (80062e4 <pbuf_alloc+0x1d8>)
 80061de:	4842      	ldr	r0, [pc, #264]	; (80062e8 <pbuf_alloc+0x1dc>)
 80061e0:	f008 fc90 	bl	800eb04 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80061e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80061e6:	3303      	adds	r3, #3
 80061e8:	f023 0303 	bic.w	r3, r3, #3
 80061ec:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80061f0:	d106      	bne.n	8006200 <pbuf_alloc+0xf4>
 80061f2:	4b3b      	ldr	r3, [pc, #236]	; (80062e0 <pbuf_alloc+0x1d4>)
 80061f4:	f44f 7281 	mov.w	r2, #258	; 0x102
 80061f8:	493c      	ldr	r1, [pc, #240]	; (80062ec <pbuf_alloc+0x1e0>)
 80061fa:	483b      	ldr	r0, [pc, #236]	; (80062e8 <pbuf_alloc+0x1dc>)
 80061fc:	f008 fc82 	bl	800eb04 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	2b00      	cmp	r3, #0
 8006204:	d102      	bne.n	800620c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	627b      	str	r3, [r7, #36]	; 0x24
 800620a:	e002      	b.n	8006212 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006216:	8b7a      	ldrh	r2, [r7, #26]
 8006218:	89fb      	ldrh	r3, [r7, #14]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800621e:	2300      	movs	r3, #0
 8006220:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8006222:	8b7b      	ldrh	r3, [r7, #26]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d19e      	bne.n	8006166 <pbuf_alloc+0x5a>
      break;
 8006228:	e055      	b.n	80062d6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800622a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800622c:	3303      	adds	r3, #3
 800622e:	b29b      	uxth	r3, r3
 8006230:	f023 0303 	bic.w	r3, r3, #3
 8006234:	b29a      	uxth	r2, r3
 8006236:	88bb      	ldrh	r3, [r7, #4]
 8006238:	3303      	adds	r3, #3
 800623a:	b29b      	uxth	r3, r3
 800623c:	f023 0303 	bic.w	r3, r3, #3
 8006240:	b29b      	uxth	r3, r3
 8006242:	4413      	add	r3, r2
 8006244:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006246:	8b3b      	ldrh	r3, [r7, #24]
 8006248:	3310      	adds	r3, #16
 800624a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800624c:	8b3a      	ldrh	r2, [r7, #24]
 800624e:	88bb      	ldrh	r3, [r7, #4]
 8006250:	3303      	adds	r3, #3
 8006252:	f023 0303 	bic.w	r3, r3, #3
 8006256:	429a      	cmp	r2, r3
 8006258:	d306      	bcc.n	8006268 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800625a:	8afa      	ldrh	r2, [r7, #22]
 800625c:	88bb      	ldrh	r3, [r7, #4]
 800625e:	3303      	adds	r3, #3
 8006260:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006264:	429a      	cmp	r2, r3
 8006266:	d201      	bcs.n	800626c <pbuf_alloc+0x160>
        return NULL;
 8006268:	2300      	movs	r3, #0
 800626a:	e035      	b.n	80062d8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800626c:	8afb      	ldrh	r3, [r7, #22]
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff f9ba 	bl	80055e8 <mem_malloc>
 8006274:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <pbuf_alloc+0x174>
        return NULL;
 800627c:	2300      	movs	r3, #0
 800627e:	e02b      	b.n	80062d8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006280:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006282:	3310      	adds	r3, #16
 8006284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006286:	4413      	add	r3, r2
 8006288:	3303      	adds	r3, #3
 800628a:	f023 0303 	bic.w	r3, r3, #3
 800628e:	4618      	mov	r0, r3
 8006290:	88b9      	ldrh	r1, [r7, #4]
 8006292:	88ba      	ldrh	r2, [r7, #4]
 8006294:	2300      	movs	r3, #0
 8006296:	9301      	str	r3, [sp, #4]
 8006298:	887b      	ldrh	r3, [r7, #2]
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	460b      	mov	r3, r1
 800629e:	4601      	mov	r1, r0
 80062a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062a2:	f7ff ff09 	bl	80060b8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d010      	beq.n	80062d4 <pbuf_alloc+0x1c8>
 80062b2:	4b0b      	ldr	r3, [pc, #44]	; (80062e0 <pbuf_alloc+0x1d4>)
 80062b4:	f44f 7291 	mov.w	r2, #290	; 0x122
 80062b8:	490d      	ldr	r1, [pc, #52]	; (80062f0 <pbuf_alloc+0x1e4>)
 80062ba:	480b      	ldr	r0, [pc, #44]	; (80062e8 <pbuf_alloc+0x1dc>)
 80062bc:	f008 fc22 	bl	800eb04 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80062c0:	e008      	b.n	80062d4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80062c2:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <pbuf_alloc+0x1d4>)
 80062c4:	f240 1227 	movw	r2, #295	; 0x127
 80062c8:	490a      	ldr	r1, [pc, #40]	; (80062f4 <pbuf_alloc+0x1e8>)
 80062ca:	4807      	ldr	r0, [pc, #28]	; (80062e8 <pbuf_alloc+0x1dc>)
 80062cc:	f008 fc1a 	bl	800eb04 <iprintf>
      return NULL;
 80062d0:	2300      	movs	r3, #0
 80062d2:	e001      	b.n	80062d8 <pbuf_alloc+0x1cc>
      break;
 80062d4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3728      	adds	r7, #40	; 0x28
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	08010510 	.word	0x08010510
 80062e4:	08010540 	.word	0x08010540
 80062e8:	08010570 	.word	0x08010570
 80062ec:	08010598 	.word	0x08010598
 80062f0:	080105cc 	.word	0x080105cc
 80062f4:	080105f8 	.word	0x080105f8

080062f8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af02      	add	r7, sp, #8
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	460b      	mov	r3, r1
 8006302:	807b      	strh	r3, [r7, #2]
 8006304:	4613      	mov	r3, r2
 8006306:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006308:	883b      	ldrh	r3, [r7, #0]
 800630a:	2b41      	cmp	r3, #65	; 0x41
 800630c:	d009      	beq.n	8006322 <pbuf_alloc_reference+0x2a>
 800630e:	883b      	ldrh	r3, [r7, #0]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d006      	beq.n	8006322 <pbuf_alloc_reference+0x2a>
 8006314:	4b0f      	ldr	r3, [pc, #60]	; (8006354 <pbuf_alloc_reference+0x5c>)
 8006316:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800631a:	490f      	ldr	r1, [pc, #60]	; (8006358 <pbuf_alloc_reference+0x60>)
 800631c:	480f      	ldr	r0, [pc, #60]	; (800635c <pbuf_alloc_reference+0x64>)
 800631e:	f008 fbf1 	bl	800eb04 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006322:	2007      	movs	r0, #7
 8006324:	f7ff faf0 	bl	8005908 <memp_malloc>
 8006328:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006330:	2300      	movs	r3, #0
 8006332:	e00b      	b.n	800634c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006334:	8879      	ldrh	r1, [r7, #2]
 8006336:	887a      	ldrh	r2, [r7, #2]
 8006338:	2300      	movs	r3, #0
 800633a:	9301      	str	r3, [sp, #4]
 800633c:	883b      	ldrh	r3, [r7, #0]
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	460b      	mov	r3, r1
 8006342:	6879      	ldr	r1, [r7, #4]
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f7ff feb7 	bl	80060b8 <pbuf_init_alloced_pbuf>
  return p;
 800634a:	68fb      	ldr	r3, [r7, #12]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	08010510 	.word	0x08010510
 8006358:	08010614 	.word	0x08010614
 800635c:	08010570 	.word	0x08010570

08006360 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b088      	sub	sp, #32
 8006364:	af02      	add	r7, sp, #8
 8006366:	607b      	str	r3, [r7, #4]
 8006368:	4603      	mov	r3, r0
 800636a:	73fb      	strb	r3, [r7, #15]
 800636c:	460b      	mov	r3, r1
 800636e:	81bb      	strh	r3, [r7, #12]
 8006370:	4613      	mov	r3, r2
 8006372:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006378:	8a7b      	ldrh	r3, [r7, #18]
 800637a:	3303      	adds	r3, #3
 800637c:	f023 0203 	bic.w	r2, r3, #3
 8006380:	89bb      	ldrh	r3, [r7, #12]
 8006382:	441a      	add	r2, r3
 8006384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006386:	429a      	cmp	r2, r3
 8006388:	d901      	bls.n	800638e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800638a:	2300      	movs	r3, #0
 800638c:	e018      	b.n	80063c0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d007      	beq.n	80063a4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006394:	8a7b      	ldrh	r3, [r7, #18]
 8006396:	3303      	adds	r3, #3
 8006398:	f023 0303 	bic.w	r3, r3, #3
 800639c:	6a3a      	ldr	r2, [r7, #32]
 800639e:	4413      	add	r3, r2
 80063a0:	617b      	str	r3, [r7, #20]
 80063a2:	e001      	b.n	80063a8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80063a4:	2300      	movs	r3, #0
 80063a6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	89b9      	ldrh	r1, [r7, #12]
 80063ac:	89ba      	ldrh	r2, [r7, #12]
 80063ae:	2302      	movs	r3, #2
 80063b0:	9301      	str	r3, [sp, #4]
 80063b2:	897b      	ldrh	r3, [r7, #10]
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	460b      	mov	r3, r1
 80063b8:	6979      	ldr	r1, [r7, #20]
 80063ba:	f7ff fe7d 	bl	80060b8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80063be:	687b      	ldr	r3, [r7, #4]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <pbuf_realloc+0x20>
 80063da:	4b3a      	ldr	r3, [pc, #232]	; (80064c4 <pbuf_realloc+0xfc>)
 80063dc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80063e0:	4939      	ldr	r1, [pc, #228]	; (80064c8 <pbuf_realloc+0x100>)
 80063e2:	483a      	ldr	r0, [pc, #232]	; (80064cc <pbuf_realloc+0x104>)
 80063e4:	f008 fb8e 	bl	800eb04 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	891b      	ldrh	r3, [r3, #8]
 80063ec:	887a      	ldrh	r2, [r7, #2]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d263      	bcs.n	80064ba <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	891a      	ldrh	r2, [r3, #8]
 80063f6:	887b      	ldrh	r3, [r7, #2]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80063fc:	887b      	ldrh	r3, [r7, #2]
 80063fe:	817b      	strh	r3, [r7, #10]
  q = p;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006404:	e018      	b.n	8006438 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	895b      	ldrh	r3, [r3, #10]
 800640a:	897a      	ldrh	r2, [r7, #10]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	891a      	ldrh	r2, [r3, #8]
 8006414:	893b      	ldrh	r3, [r7, #8]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	b29a      	uxth	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d106      	bne.n	8006438 <pbuf_realloc+0x70>
 800642a:	4b26      	ldr	r3, [pc, #152]	; (80064c4 <pbuf_realloc+0xfc>)
 800642c:	f240 12af 	movw	r2, #431	; 0x1af
 8006430:	4927      	ldr	r1, [pc, #156]	; (80064d0 <pbuf_realloc+0x108>)
 8006432:	4826      	ldr	r0, [pc, #152]	; (80064cc <pbuf_realloc+0x104>)
 8006434:	f008 fb66 	bl	800eb04 <iprintf>
  while (rem_len > q->len) {
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	895b      	ldrh	r3, [r3, #10]
 800643c:	897a      	ldrh	r2, [r7, #10]
 800643e:	429a      	cmp	r2, r3
 8006440:	d8e1      	bhi.n	8006406 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	7b1b      	ldrb	r3, [r3, #12]
 8006446:	f003 030f 	and.w	r3, r3, #15
 800644a:	2b00      	cmp	r3, #0
 800644c:	d121      	bne.n	8006492 <pbuf_realloc+0xca>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	895b      	ldrh	r3, [r3, #10]
 8006452:	897a      	ldrh	r2, [r7, #10]
 8006454:	429a      	cmp	r2, r3
 8006456:	d01c      	beq.n	8006492 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	7b5b      	ldrb	r3, [r3, #13]
 800645c:	f003 0302 	and.w	r3, r3, #2
 8006460:	2b00      	cmp	r3, #0
 8006462:	d116      	bne.n	8006492 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	b29a      	uxth	r2, r3
 800646e:	897b      	ldrh	r3, [r7, #10]
 8006470:	4413      	add	r3, r2
 8006472:	b29b      	uxth	r3, r3
 8006474:	4619      	mov	r1, r3
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f7fe ffba 	bl	80053f0 <mem_trim>
 800647c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d106      	bne.n	8006492 <pbuf_realloc+0xca>
 8006484:	4b0f      	ldr	r3, [pc, #60]	; (80064c4 <pbuf_realloc+0xfc>)
 8006486:	f240 12bd 	movw	r2, #445	; 0x1bd
 800648a:	4912      	ldr	r1, [pc, #72]	; (80064d4 <pbuf_realloc+0x10c>)
 800648c:	480f      	ldr	r0, [pc, #60]	; (80064cc <pbuf_realloc+0x104>)
 800648e:	f008 fb39 	bl	800eb04 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	897a      	ldrh	r2, [r7, #10]
 8006496:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	895a      	ldrh	r2, [r3, #10]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d004      	beq.n	80064b2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 f911 	bl	80066d4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	e000      	b.n	80064bc <pbuf_realloc+0xf4>
    return;
 80064ba:	bf00      	nop

}
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	08010510 	.word	0x08010510
 80064c8:	08010628 	.word	0x08010628
 80064cc:	08010570 	.word	0x08010570
 80064d0:	08010640 	.word	0x08010640
 80064d4:	08010658 	.word	0x08010658

080064d8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	4613      	mov	r3, r2
 80064e4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d106      	bne.n	80064fa <pbuf_add_header_impl+0x22>
 80064ec:	4b2b      	ldr	r3, [pc, #172]	; (800659c <pbuf_add_header_impl+0xc4>)
 80064ee:	f240 12df 	movw	r2, #479	; 0x1df
 80064f2:	492b      	ldr	r1, [pc, #172]	; (80065a0 <pbuf_add_header_impl+0xc8>)
 80064f4:	482b      	ldr	r0, [pc, #172]	; (80065a4 <pbuf_add_header_impl+0xcc>)
 80064f6:	f008 fb05 	bl	800eb04 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d003      	beq.n	8006508 <pbuf_add_header_impl+0x30>
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006506:	d301      	bcc.n	800650c <pbuf_add_header_impl+0x34>
    return 1;
 8006508:	2301      	movs	r3, #1
 800650a:	e043      	b.n	8006594 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <pbuf_add_header_impl+0x3e>
    return 0;
 8006512:	2300      	movs	r3, #0
 8006514:	e03e      	b.n	8006594 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	891a      	ldrh	r2, [r3, #8]
 800651e:	8a7b      	ldrh	r3, [r7, #18]
 8006520:	4413      	add	r3, r2
 8006522:	b29b      	uxth	r3, r3
 8006524:	8a7a      	ldrh	r2, [r7, #18]
 8006526:	429a      	cmp	r2, r3
 8006528:	d901      	bls.n	800652e <pbuf_add_header_impl+0x56>
    return 1;
 800652a:	2301      	movs	r3, #1
 800652c:	e032      	b.n	8006594 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	7b1b      	ldrb	r3, [r3, #12]
 8006532:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006534:	8a3b      	ldrh	r3, [r7, #16]
 8006536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00c      	beq.n	8006558 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	425b      	negs	r3, r3
 8006546:	4413      	add	r3, r2
 8006548:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	3310      	adds	r3, #16
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	429a      	cmp	r2, r3
 8006552:	d20d      	bcs.n	8006570 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006554:	2301      	movs	r3, #1
 8006556:	e01d      	b.n	8006594 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006558:	79fb      	ldrb	r3, [r7, #7]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d006      	beq.n	800656c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	425b      	negs	r3, r3
 8006566:	4413      	add	r3, r2
 8006568:	617b      	str	r3, [r7, #20]
 800656a:	e001      	b.n	8006570 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800656c:	2301      	movs	r3, #1
 800656e:	e011      	b.n	8006594 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	895a      	ldrh	r2, [r3, #10]
 800657a:	8a7b      	ldrh	r3, [r7, #18]
 800657c:	4413      	add	r3, r2
 800657e:	b29a      	uxth	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	891a      	ldrh	r2, [r3, #8]
 8006588:	8a7b      	ldrh	r3, [r7, #18]
 800658a:	4413      	add	r3, r2
 800658c:	b29a      	uxth	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	811a      	strh	r2, [r3, #8]


  return 0;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3718      	adds	r7, #24
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	08010510 	.word	0x08010510
 80065a0:	08010674 	.word	0x08010674
 80065a4:	08010570 	.word	0x08010570

080065a8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80065b2:	2200      	movs	r2, #0
 80065b4:	6839      	ldr	r1, [r7, #0]
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7ff ff8e 	bl	80064d8 <pbuf_add_header_impl>
 80065bc:	4603      	mov	r3, r0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
	...

080065c8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d106      	bne.n	80065e6 <pbuf_remove_header+0x1e>
 80065d8:	4b20      	ldr	r3, [pc, #128]	; (800665c <pbuf_remove_header+0x94>)
 80065da:	f240 224b 	movw	r2, #587	; 0x24b
 80065de:	4920      	ldr	r1, [pc, #128]	; (8006660 <pbuf_remove_header+0x98>)
 80065e0:	4820      	ldr	r0, [pc, #128]	; (8006664 <pbuf_remove_header+0x9c>)
 80065e2:	f008 fa8f 	bl	800eb04 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <pbuf_remove_header+0x2c>
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f2:	d301      	bcc.n	80065f8 <pbuf_remove_header+0x30>
    return 1;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e02c      	b.n	8006652 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <pbuf_remove_header+0x3a>
    return 0;
 80065fe:	2300      	movs	r3, #0
 8006600:	e027      	b.n	8006652 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	895b      	ldrh	r3, [r3, #10]
 800660a:	89fa      	ldrh	r2, [r7, #14]
 800660c:	429a      	cmp	r2, r3
 800660e:	d908      	bls.n	8006622 <pbuf_remove_header+0x5a>
 8006610:	4b12      	ldr	r3, [pc, #72]	; (800665c <pbuf_remove_header+0x94>)
 8006612:	f240 2255 	movw	r2, #597	; 0x255
 8006616:	4914      	ldr	r1, [pc, #80]	; (8006668 <pbuf_remove_header+0xa0>)
 8006618:	4812      	ldr	r0, [pc, #72]	; (8006664 <pbuf_remove_header+0x9c>)
 800661a:	f008 fa73 	bl	800eb04 <iprintf>
 800661e:	2301      	movs	r3, #1
 8006620:	e017      	b.n	8006652 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	441a      	add	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	895a      	ldrh	r2, [r3, #10]
 8006638:	89fb      	ldrh	r3, [r7, #14]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	b29a      	uxth	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	891a      	ldrh	r2, [r3, #8]
 8006646:	89fb      	ldrh	r3, [r7, #14]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	b29a      	uxth	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	08010510 	.word	0x08010510
 8006660:	08010674 	.word	0x08010674
 8006664:	08010570 	.word	0x08010570
 8006668:	08010680 	.word	0x08010680

0800666c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	460b      	mov	r3, r1
 8006676:	807b      	strh	r3, [r7, #2]
 8006678:	4613      	mov	r3, r2
 800667a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800667c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006680:	2b00      	cmp	r3, #0
 8006682:	da08      	bge.n	8006696 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006684:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006688:	425b      	negs	r3, r3
 800668a:	4619      	mov	r1, r3
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7ff ff9b 	bl	80065c8 <pbuf_remove_header>
 8006692:	4603      	mov	r3, r0
 8006694:	e007      	b.n	80066a6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006696:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800669a:	787a      	ldrb	r2, [r7, #1]
 800669c:	4619      	mov	r1, r3
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7ff ff1a 	bl	80064d8 <pbuf_add_header_impl>
 80066a4:	4603      	mov	r3, r0
  }
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b082      	sub	sp, #8
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	460b      	mov	r3, r1
 80066b8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80066ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80066be:	2201      	movs	r2, #1
 80066c0:	4619      	mov	r1, r3
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7ff ffd2 	bl	800666c <pbuf_header_impl>
 80066c8:	4603      	mov	r3, r0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10b      	bne.n	80066fa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d106      	bne.n	80066f6 <pbuf_free+0x22>
 80066e8:	4b38      	ldr	r3, [pc, #224]	; (80067cc <pbuf_free+0xf8>)
 80066ea:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80066ee:	4938      	ldr	r1, [pc, #224]	; (80067d0 <pbuf_free+0xfc>)
 80066f0:	4838      	ldr	r0, [pc, #224]	; (80067d4 <pbuf_free+0x100>)
 80066f2:	f008 fa07 	bl	800eb04 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80066f6:	2300      	movs	r3, #0
 80066f8:	e063      	b.n	80067c2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80066fa:	2300      	movs	r3, #0
 80066fc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80066fe:	e05c      	b.n	80067ba <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	7b9b      	ldrb	r3, [r3, #14]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d106      	bne.n	8006716 <pbuf_free+0x42>
 8006708:	4b30      	ldr	r3, [pc, #192]	; (80067cc <pbuf_free+0xf8>)
 800670a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800670e:	4932      	ldr	r1, [pc, #200]	; (80067d8 <pbuf_free+0x104>)
 8006710:	4830      	ldr	r0, [pc, #192]	; (80067d4 <pbuf_free+0x100>)
 8006712:	f008 f9f7 	bl	800eb04 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	7b9b      	ldrb	r3, [r3, #14]
 800671a:	3b01      	subs	r3, #1
 800671c:	b2da      	uxtb	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	739a      	strb	r2, [r3, #14]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	7b9b      	ldrb	r3, [r3, #14]
 8006726:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006728:	7dbb      	ldrb	r3, [r7, #22]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d143      	bne.n	80067b6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	7b1b      	ldrb	r3, [r3, #12]
 8006738:	f003 030f 	and.w	r3, r3, #15
 800673c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	7b5b      	ldrb	r3, [r3, #13]
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d011      	beq.n	800676e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d106      	bne.n	8006764 <pbuf_free+0x90>
 8006756:	4b1d      	ldr	r3, [pc, #116]	; (80067cc <pbuf_free+0xf8>)
 8006758:	f240 22ff 	movw	r2, #767	; 0x2ff
 800675c:	491f      	ldr	r1, [pc, #124]	; (80067dc <pbuf_free+0x108>)
 800675e:	481d      	ldr	r0, [pc, #116]	; (80067d4 <pbuf_free+0x100>)
 8006760:	f008 f9d0 	bl	800eb04 <iprintf>
        pc->custom_free_function(p);
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	4798      	blx	r3
 800676c:	e01d      	b.n	80067aa <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800676e:	7bfb      	ldrb	r3, [r7, #15]
 8006770:	2b02      	cmp	r3, #2
 8006772:	d104      	bne.n	800677e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	2008      	movs	r0, #8
 8006778:	f7ff f936 	bl	80059e8 <memp_free>
 800677c:	e015      	b.n	80067aa <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800677e:	7bfb      	ldrb	r3, [r7, #15]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d104      	bne.n	800678e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006784:	6879      	ldr	r1, [r7, #4]
 8006786:	2007      	movs	r0, #7
 8006788:	f7ff f92e 	bl	80059e8 <memp_free>
 800678c:	e00d      	b.n	80067aa <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800678e:	7bfb      	ldrb	r3, [r7, #15]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d103      	bne.n	800679c <pbuf_free+0xc8>
          mem_free(p);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7fe fdc1 	bl	800531c <mem_free>
 800679a:	e006      	b.n	80067aa <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800679c:	4b0b      	ldr	r3, [pc, #44]	; (80067cc <pbuf_free+0xf8>)
 800679e:	f240 320f 	movw	r2, #783	; 0x30f
 80067a2:	490f      	ldr	r1, [pc, #60]	; (80067e0 <pbuf_free+0x10c>)
 80067a4:	480b      	ldr	r0, [pc, #44]	; (80067d4 <pbuf_free+0x100>)
 80067a6:	f008 f9ad 	bl	800eb04 <iprintf>
        }
      }
      count++;
 80067aa:	7dfb      	ldrb	r3, [r7, #23]
 80067ac:	3301      	adds	r3, #1
 80067ae:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	607b      	str	r3, [r7, #4]
 80067b4:	e001      	b.n	80067ba <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80067b6:	2300      	movs	r3, #0
 80067b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d19f      	bne.n	8006700 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	08010510 	.word	0x08010510
 80067d0:	08010674 	.word	0x08010674
 80067d4:	08010570 	.word	0x08010570
 80067d8:	080106a0 	.word	0x080106a0
 80067dc:	080106b8 	.word	0x080106b8
 80067e0:	080106dc 	.word	0x080106dc

080067e4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80067f0:	e005      	b.n	80067fe <pbuf_clen+0x1a>
    ++len;
 80067f2:	89fb      	ldrh	r3, [r7, #14]
 80067f4:	3301      	adds	r3, #1
 80067f6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1f6      	bne.n	80067f2 <pbuf_clen+0xe>
  }
  return len;
 8006804:	89fb      	ldrh	r3, [r7, #14]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
	...

08006814 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d010      	beq.n	8006844 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	7b9b      	ldrb	r3, [r3, #14]
 8006826:	3301      	adds	r3, #1
 8006828:	b2da      	uxtb	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	7b9b      	ldrb	r3, [r3, #14]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d106      	bne.n	8006844 <pbuf_ref+0x30>
 8006836:	4b05      	ldr	r3, [pc, #20]	; (800684c <pbuf_ref+0x38>)
 8006838:	f240 3242 	movw	r2, #834	; 0x342
 800683c:	4904      	ldr	r1, [pc, #16]	; (8006850 <pbuf_ref+0x3c>)
 800683e:	4805      	ldr	r0, [pc, #20]	; (8006854 <pbuf_ref+0x40>)
 8006840:	f008 f960 	bl	800eb04 <iprintf>
  }
}
 8006844:	bf00      	nop
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	08010510 	.word	0x08010510
 8006850:	080106f0 	.word	0x080106f0
 8006854:	08010570 	.word	0x08010570

08006858 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d002      	beq.n	800686e <pbuf_cat+0x16>
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d107      	bne.n	800687e <pbuf_cat+0x26>
 800686e:	4b20      	ldr	r3, [pc, #128]	; (80068f0 <pbuf_cat+0x98>)
 8006870:	f240 3259 	movw	r2, #857	; 0x359
 8006874:	491f      	ldr	r1, [pc, #124]	; (80068f4 <pbuf_cat+0x9c>)
 8006876:	4820      	ldr	r0, [pc, #128]	; (80068f8 <pbuf_cat+0xa0>)
 8006878:	f008 f944 	bl	800eb04 <iprintf>
 800687c:	e034      	b.n	80068e8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	60fb      	str	r3, [r7, #12]
 8006882:	e00a      	b.n	800689a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	891a      	ldrh	r2, [r3, #8]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	891b      	ldrh	r3, [r3, #8]
 800688c:	4413      	add	r3, r2
 800688e:	b29a      	uxth	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1f0      	bne.n	8006884 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	891a      	ldrh	r2, [r3, #8]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	895b      	ldrh	r3, [r3, #10]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d006      	beq.n	80068bc <pbuf_cat+0x64>
 80068ae:	4b10      	ldr	r3, [pc, #64]	; (80068f0 <pbuf_cat+0x98>)
 80068b0:	f240 3262 	movw	r2, #866	; 0x362
 80068b4:	4911      	ldr	r1, [pc, #68]	; (80068fc <pbuf_cat+0xa4>)
 80068b6:	4810      	ldr	r0, [pc, #64]	; (80068f8 <pbuf_cat+0xa0>)
 80068b8:	f008 f924 	bl	800eb04 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d006      	beq.n	80068d2 <pbuf_cat+0x7a>
 80068c4:	4b0a      	ldr	r3, [pc, #40]	; (80068f0 <pbuf_cat+0x98>)
 80068c6:	f240 3263 	movw	r2, #867	; 0x363
 80068ca:	490d      	ldr	r1, [pc, #52]	; (8006900 <pbuf_cat+0xa8>)
 80068cc:	480a      	ldr	r0, [pc, #40]	; (80068f8 <pbuf_cat+0xa0>)
 80068ce:	f008 f919 	bl	800eb04 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	891a      	ldrh	r2, [r3, #8]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	891b      	ldrh	r3, [r3, #8]
 80068da:	4413      	add	r3, r2
 80068dc:	b29a      	uxth	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	08010510 	.word	0x08010510
 80068f4:	08010704 	.word	0x08010704
 80068f8:	08010570 	.word	0x08010570
 80068fc:	0801073c 	.word	0x0801073c
 8006900:	0801076c 	.word	0x0801076c

08006904 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800690e:	2300      	movs	r3, #0
 8006910:	617b      	str	r3, [r7, #20]
 8006912:	2300      	movs	r3, #0
 8006914:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d008      	beq.n	800692e <pbuf_copy+0x2a>
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d005      	beq.n	800692e <pbuf_copy+0x2a>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	891a      	ldrh	r2, [r3, #8]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	891b      	ldrh	r3, [r3, #8]
 800692a:	429a      	cmp	r2, r3
 800692c:	d209      	bcs.n	8006942 <pbuf_copy+0x3e>
 800692e:	4b57      	ldr	r3, [pc, #348]	; (8006a8c <pbuf_copy+0x188>)
 8006930:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006934:	4956      	ldr	r1, [pc, #344]	; (8006a90 <pbuf_copy+0x18c>)
 8006936:	4857      	ldr	r0, [pc, #348]	; (8006a94 <pbuf_copy+0x190>)
 8006938:	f008 f8e4 	bl	800eb04 <iprintf>
 800693c:	f06f 030f 	mvn.w	r3, #15
 8006940:	e09f      	b.n	8006a82 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	895b      	ldrh	r3, [r3, #10]
 8006946:	461a      	mov	r2, r3
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	1ad2      	subs	r2, r2, r3
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	895b      	ldrh	r3, [r3, #10]
 8006950:	4619      	mov	r1, r3
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1acb      	subs	r3, r1, r3
 8006956:	429a      	cmp	r2, r3
 8006958:	d306      	bcc.n	8006968 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	895b      	ldrh	r3, [r3, #10]
 800695e:	461a      	mov	r2, r3
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	e005      	b.n	8006974 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	895b      	ldrh	r3, [r3, #10]
 800696c:	461a      	mov	r2, r3
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	18d0      	adds	r0, r2, r3
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	4413      	add	r3, r2
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4619      	mov	r1, r3
 8006988:	f008 f88c 	bl	800eaa4 <memcpy>
    offset_to += len;
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4413      	add	r3, r2
 8006992:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4413      	add	r3, r2
 800699a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	895b      	ldrh	r3, [r3, #10]
 80069a0:	461a      	mov	r2, r3
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d906      	bls.n	80069b6 <pbuf_copy+0xb2>
 80069a8:	4b38      	ldr	r3, [pc, #224]	; (8006a8c <pbuf_copy+0x188>)
 80069aa:	f240 32d9 	movw	r2, #985	; 0x3d9
 80069ae:	493a      	ldr	r1, [pc, #232]	; (8006a98 <pbuf_copy+0x194>)
 80069b0:	4838      	ldr	r0, [pc, #224]	; (8006a94 <pbuf_copy+0x190>)
 80069b2:	f008 f8a7 	bl	800eb04 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	895b      	ldrh	r3, [r3, #10]
 80069ba:	461a      	mov	r2, r3
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	4293      	cmp	r3, r2
 80069c0:	d906      	bls.n	80069d0 <pbuf_copy+0xcc>
 80069c2:	4b32      	ldr	r3, [pc, #200]	; (8006a8c <pbuf_copy+0x188>)
 80069c4:	f240 32da 	movw	r2, #986	; 0x3da
 80069c8:	4934      	ldr	r1, [pc, #208]	; (8006a9c <pbuf_copy+0x198>)
 80069ca:	4832      	ldr	r0, [pc, #200]	; (8006a94 <pbuf_copy+0x190>)
 80069cc:	f008 f89a 	bl	800eb04 <iprintf>
    if (offset_from >= p_from->len) {
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	895b      	ldrh	r3, [r3, #10]
 80069d4:	461a      	mov	r2, r3
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	4293      	cmp	r3, r2
 80069da:	d304      	bcc.n	80069e6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80069dc:	2300      	movs	r3, #0
 80069de:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	895b      	ldrh	r3, [r3, #10]
 80069ea:	461a      	mov	r2, r3
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d114      	bne.n	8006a1c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10c      	bne.n	8006a1c <pbuf_copy+0x118>
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d009      	beq.n	8006a1c <pbuf_copy+0x118>
 8006a08:	4b20      	ldr	r3, [pc, #128]	; (8006a8c <pbuf_copy+0x188>)
 8006a0a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006a0e:	4924      	ldr	r1, [pc, #144]	; (8006aa0 <pbuf_copy+0x19c>)
 8006a10:	4820      	ldr	r0, [pc, #128]	; (8006a94 <pbuf_copy+0x190>)
 8006a12:	f008 f877 	bl	800eb04 <iprintf>
 8006a16:	f06f 030f 	mvn.w	r3, #15
 8006a1a:	e032      	b.n	8006a82 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d013      	beq.n	8006a4a <pbuf_copy+0x146>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	895a      	ldrh	r2, [r3, #10]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	891b      	ldrh	r3, [r3, #8]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d10d      	bne.n	8006a4a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d009      	beq.n	8006a4a <pbuf_copy+0x146>
 8006a36:	4b15      	ldr	r3, [pc, #84]	; (8006a8c <pbuf_copy+0x188>)
 8006a38:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006a3c:	4919      	ldr	r1, [pc, #100]	; (8006aa4 <pbuf_copy+0x1a0>)
 8006a3e:	4815      	ldr	r0, [pc, #84]	; (8006a94 <pbuf_copy+0x190>)
 8006a40:	f008 f860 	bl	800eb04 <iprintf>
 8006a44:	f06f 0305 	mvn.w	r3, #5
 8006a48:	e01b      	b.n	8006a82 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d013      	beq.n	8006a78 <pbuf_copy+0x174>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	895a      	ldrh	r2, [r3, #10]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	891b      	ldrh	r3, [r3, #8]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d10d      	bne.n	8006a78 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d009      	beq.n	8006a78 <pbuf_copy+0x174>
 8006a64:	4b09      	ldr	r3, [pc, #36]	; (8006a8c <pbuf_copy+0x188>)
 8006a66:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006a6a:	490e      	ldr	r1, [pc, #56]	; (8006aa4 <pbuf_copy+0x1a0>)
 8006a6c:	4809      	ldr	r0, [pc, #36]	; (8006a94 <pbuf_copy+0x190>)
 8006a6e:	f008 f849 	bl	800eb04 <iprintf>
 8006a72:	f06f 0305 	mvn.w	r3, #5
 8006a76:	e004      	b.n	8006a82 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f47f af61 	bne.w	8006942 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	08010510 	.word	0x08010510
 8006a90:	080107b8 	.word	0x080107b8
 8006a94:	08010570 	.word	0x08010570
 8006a98:	080107e8 	.word	0x080107e8
 8006a9c:	08010800 	.word	0x08010800
 8006aa0:	0801081c 	.word	0x0801081c
 8006aa4:	0801082c 	.word	0x0801082c

08006aa8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	4611      	mov	r1, r2
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	80fb      	strh	r3, [r7, #6]
 8006aba:	4613      	mov	r3, r2
 8006abc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d108      	bne.n	8006ade <pbuf_copy_partial+0x36>
 8006acc:	4b2b      	ldr	r3, [pc, #172]	; (8006b7c <pbuf_copy_partial+0xd4>)
 8006ace:	f240 420a 	movw	r2, #1034	; 0x40a
 8006ad2:	492b      	ldr	r1, [pc, #172]	; (8006b80 <pbuf_copy_partial+0xd8>)
 8006ad4:	482b      	ldr	r0, [pc, #172]	; (8006b84 <pbuf_copy_partial+0xdc>)
 8006ad6:	f008 f815 	bl	800eb04 <iprintf>
 8006ada:	2300      	movs	r3, #0
 8006adc:	e04a      	b.n	8006b74 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d108      	bne.n	8006af6 <pbuf_copy_partial+0x4e>
 8006ae4:	4b25      	ldr	r3, [pc, #148]	; (8006b7c <pbuf_copy_partial+0xd4>)
 8006ae6:	f240 420b 	movw	r2, #1035	; 0x40b
 8006aea:	4927      	ldr	r1, [pc, #156]	; (8006b88 <pbuf_copy_partial+0xe0>)
 8006aec:	4825      	ldr	r0, [pc, #148]	; (8006b84 <pbuf_copy_partial+0xdc>)
 8006aee:	f008 f809 	bl	800eb04 <iprintf>
 8006af2:	2300      	movs	r3, #0
 8006af4:	e03e      	b.n	8006b74 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	61fb      	str	r3, [r7, #28]
 8006afa:	e034      	b.n	8006b66 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006afc:	88bb      	ldrh	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00a      	beq.n	8006b18 <pbuf_copy_partial+0x70>
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	895b      	ldrh	r3, [r3, #10]
 8006b06:	88ba      	ldrh	r2, [r7, #4]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d305      	bcc.n	8006b18 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	895b      	ldrh	r3, [r3, #10]
 8006b10:	88ba      	ldrh	r2, [r7, #4]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	80bb      	strh	r3, [r7, #4]
 8006b16:	e023      	b.n	8006b60 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	895a      	ldrh	r2, [r3, #10]
 8006b1c:	88bb      	ldrh	r3, [r7, #4]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006b22:	8b3a      	ldrh	r2, [r7, #24]
 8006b24:	88fb      	ldrh	r3, [r7, #6]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d901      	bls.n	8006b2e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006b2a:	88fb      	ldrh	r3, [r7, #6]
 8006b2c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006b2e:	8b7b      	ldrh	r3, [r7, #26]
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	18d0      	adds	r0, r2, r3
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	88bb      	ldrh	r3, [r7, #4]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	8b3a      	ldrh	r2, [r7, #24]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	f007 ffb0 	bl	800eaa4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006b44:	8afa      	ldrh	r2, [r7, #22]
 8006b46:	8b3b      	ldrh	r3, [r7, #24]
 8006b48:	4413      	add	r3, r2
 8006b4a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006b4c:	8b7a      	ldrh	r2, [r7, #26]
 8006b4e:	8b3b      	ldrh	r3, [r7, #24]
 8006b50:	4413      	add	r3, r2
 8006b52:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006b54:	88fa      	ldrh	r2, [r7, #6]
 8006b56:	8b3b      	ldrh	r3, [r7, #24]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	61fb      	str	r3, [r7, #28]
 8006b66:	88fb      	ldrh	r3, [r7, #6]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d002      	beq.n	8006b72 <pbuf_copy_partial+0xca>
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1c4      	bne.n	8006afc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006b72:	8afb      	ldrh	r3, [r7, #22]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3720      	adds	r7, #32
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	08010510 	.word	0x08010510
 8006b80:	08010858 	.word	0x08010858
 8006b84:	08010570 	.word	0x08010570
 8006b88:	08010878 	.word	0x08010878

08006b8c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	4603      	mov	r3, r0
 8006b94:	603a      	str	r2, [r7, #0]
 8006b96:	71fb      	strb	r3, [r7, #7]
 8006b98:	460b      	mov	r3, r1
 8006b9a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	8919      	ldrh	r1, [r3, #8]
 8006ba0:	88ba      	ldrh	r2, [r7, #4]
 8006ba2:	79fb      	ldrb	r3, [r7, #7]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7ff fab1 	bl	800610c <pbuf_alloc>
 8006baa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <pbuf_clone+0x2a>
    return NULL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	e011      	b.n	8006bda <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f7ff fea3 	bl	8006904 <pbuf_copy>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006bc2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d006      	beq.n	8006bd8 <pbuf_clone+0x4c>
 8006bca:	4b06      	ldr	r3, [pc, #24]	; (8006be4 <pbuf_clone+0x58>)
 8006bcc:	f240 5224 	movw	r2, #1316	; 0x524
 8006bd0:	4905      	ldr	r1, [pc, #20]	; (8006be8 <pbuf_clone+0x5c>)
 8006bd2:	4806      	ldr	r0, [pc, #24]	; (8006bec <pbuf_clone+0x60>)
 8006bd4:	f007 ff96 	bl	800eb04 <iprintf>
  return q;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	08010510 	.word	0x08010510
 8006be8:	08010984 	.word	0x08010984
 8006bec:	08010570 	.word	0x08010570

08006bf0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006bf4:	f007 ff9e 	bl	800eb34 <rand>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	4b01      	ldr	r3, [pc, #4]	; (8006c10 <tcp_init+0x20>)
 8006c0a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006c0c:	bf00      	nop
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20000078 	.word	0x20000078

08006c14 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	7d1b      	ldrb	r3, [r3, #20]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d105      	bne.n	8006c30 <tcp_free+0x1c>
 8006c24:	4b06      	ldr	r3, [pc, #24]	; (8006c40 <tcp_free+0x2c>)
 8006c26:	22d4      	movs	r2, #212	; 0xd4
 8006c28:	4906      	ldr	r1, [pc, #24]	; (8006c44 <tcp_free+0x30>)
 8006c2a:	4807      	ldr	r0, [pc, #28]	; (8006c48 <tcp_free+0x34>)
 8006c2c:	f007 ff6a 	bl	800eb04 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006c30:	6879      	ldr	r1, [r7, #4]
 8006c32:	2001      	movs	r0, #1
 8006c34:	f7fe fed8 	bl	80059e8 <memp_free>
}
 8006c38:	bf00      	nop
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	08010a10 	.word	0x08010a10
 8006c44:	08010a40 	.word	0x08010a40
 8006c48:	08010a54 	.word	0x08010a54

08006c4c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	7d1b      	ldrb	r3, [r3, #20]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d105      	bne.n	8006c68 <tcp_free_listen+0x1c>
 8006c5c:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <tcp_free_listen+0x2c>)
 8006c5e:	22df      	movs	r2, #223	; 0xdf
 8006c60:	4906      	ldr	r1, [pc, #24]	; (8006c7c <tcp_free_listen+0x30>)
 8006c62:	4807      	ldr	r0, [pc, #28]	; (8006c80 <tcp_free_listen+0x34>)
 8006c64:	f007 ff4e 	bl	800eb04 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006c68:	6879      	ldr	r1, [r7, #4]
 8006c6a:	2002      	movs	r0, #2
 8006c6c:	f7fe febc 	bl	80059e8 <memp_free>
}
 8006c70:	bf00      	nop
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	08010a10 	.word	0x08010a10
 8006c7c:	08010a7c 	.word	0x08010a7c
 8006c80:	08010a54 	.word	0x08010a54

08006c84 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006c88:	f000 fea2 	bl	80079d0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006c8c:	4b07      	ldr	r3, [pc, #28]	; (8006cac <tcp_tmr+0x28>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	3301      	adds	r3, #1
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	4b05      	ldr	r3, [pc, #20]	; (8006cac <tcp_tmr+0x28>)
 8006c96:	701a      	strb	r2, [r3, #0]
 8006c98:	4b04      	ldr	r3, [pc, #16]	; (8006cac <tcp_tmr+0x28>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006ca4:	f000 fb54 	bl	8007350 <tcp_slowtmr>
  }
}
 8006ca8:	bf00      	nop
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	20008351 	.word	0x20008351

08006cb0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d105      	bne.n	8006ccc <tcp_remove_listener+0x1c>
 8006cc0:	4b0d      	ldr	r3, [pc, #52]	; (8006cf8 <tcp_remove_listener+0x48>)
 8006cc2:	22ff      	movs	r2, #255	; 0xff
 8006cc4:	490d      	ldr	r1, [pc, #52]	; (8006cfc <tcp_remove_listener+0x4c>)
 8006cc6:	480e      	ldr	r0, [pc, #56]	; (8006d00 <tcp_remove_listener+0x50>)
 8006cc8:	f007 ff1c 	bl	800eb04 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	e00a      	b.n	8006ce8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cd6:	683a      	ldr	r2, [r7, #0]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d102      	bne.n	8006ce2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1f1      	bne.n	8006cd2 <tcp_remove_listener+0x22>
    }
  }
}
 8006cee:	bf00      	nop
 8006cf0:	bf00      	nop
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	08010a10 	.word	0x08010a10
 8006cfc:	08010a98 	.word	0x08010a98
 8006d00:	08010a54 	.word	0x08010a54

08006d04 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d106      	bne.n	8006d20 <tcp_listen_closed+0x1c>
 8006d12:	4b14      	ldr	r3, [pc, #80]	; (8006d64 <tcp_listen_closed+0x60>)
 8006d14:	f240 1211 	movw	r2, #273	; 0x111
 8006d18:	4913      	ldr	r1, [pc, #76]	; (8006d68 <tcp_listen_closed+0x64>)
 8006d1a:	4814      	ldr	r0, [pc, #80]	; (8006d6c <tcp_listen_closed+0x68>)
 8006d1c:	f007 fef2 	bl	800eb04 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	7d1b      	ldrb	r3, [r3, #20]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d006      	beq.n	8006d36 <tcp_listen_closed+0x32>
 8006d28:	4b0e      	ldr	r3, [pc, #56]	; (8006d64 <tcp_listen_closed+0x60>)
 8006d2a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006d2e:	4910      	ldr	r1, [pc, #64]	; (8006d70 <tcp_listen_closed+0x6c>)
 8006d30:	480e      	ldr	r0, [pc, #56]	; (8006d6c <tcp_listen_closed+0x68>)
 8006d32:	f007 fee7 	bl	800eb04 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006d36:	2301      	movs	r3, #1
 8006d38:	60fb      	str	r3, [r7, #12]
 8006d3a:	e00b      	b.n	8006d54 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006d3c:	4a0d      	ldr	r2, [pc, #52]	; (8006d74 <tcp_listen_closed+0x70>)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6879      	ldr	r1, [r7, #4]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7ff ffb1 	bl	8006cb0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3301      	adds	r3, #1
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d9f0      	bls.n	8006d3c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006d5a:	bf00      	nop
 8006d5c:	bf00      	nop
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	08010a10 	.word	0x08010a10
 8006d68:	08010ac0 	.word	0x08010ac0
 8006d6c:	08010a54 	.word	0x08010a54
 8006d70:	08010acc 	.word	0x08010acc
 8006d74:	080129f0 	.word	0x080129f0

08006d78 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006d78:	b5b0      	push	{r4, r5, r7, lr}
 8006d7a:	b088      	sub	sp, #32
 8006d7c:	af04      	add	r7, sp, #16
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d106      	bne.n	8006d98 <tcp_close_shutdown+0x20>
 8006d8a:	4b63      	ldr	r3, [pc, #396]	; (8006f18 <tcp_close_shutdown+0x1a0>)
 8006d8c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006d90:	4962      	ldr	r1, [pc, #392]	; (8006f1c <tcp_close_shutdown+0x1a4>)
 8006d92:	4863      	ldr	r0, [pc, #396]	; (8006f20 <tcp_close_shutdown+0x1a8>)
 8006d94:	f007 feb6 	bl	800eb04 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006d98:	78fb      	ldrb	r3, [r7, #3]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d066      	beq.n	8006e6c <tcp_close_shutdown+0xf4>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	7d1b      	ldrb	r3, [r3, #20]
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	d003      	beq.n	8006dae <tcp_close_shutdown+0x36>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	7d1b      	ldrb	r3, [r3, #20]
 8006daa:	2b07      	cmp	r3, #7
 8006dac:	d15e      	bne.n	8006e6c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d104      	bne.n	8006dc0 <tcp_close_shutdown+0x48>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006dbe:	d055      	beq.n	8006e6c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	8b5b      	ldrh	r3, [r3, #26]
 8006dc4:	f003 0310 	and.w	r3, r3, #16
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d106      	bne.n	8006dda <tcp_close_shutdown+0x62>
 8006dcc:	4b52      	ldr	r3, [pc, #328]	; (8006f18 <tcp_close_shutdown+0x1a0>)
 8006dce:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006dd2:	4954      	ldr	r1, [pc, #336]	; (8006f24 <tcp_close_shutdown+0x1ac>)
 8006dd4:	4852      	ldr	r0, [pc, #328]	; (8006f20 <tcp_close_shutdown+0x1a8>)
 8006dd6:	f007 fe95 	bl	800eb04 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006de2:	687d      	ldr	r5, [r7, #4]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	3304      	adds	r3, #4
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	8ad2      	ldrh	r2, [r2, #22]
 8006dec:	6879      	ldr	r1, [r7, #4]
 8006dee:	8b09      	ldrh	r1, [r1, #24]
 8006df0:	9102      	str	r1, [sp, #8]
 8006df2:	9201      	str	r2, [sp, #4]
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	462b      	mov	r3, r5
 8006df8:	4622      	mov	r2, r4
 8006dfa:	4601      	mov	r1, r0
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f004 fe91 	bl	800bb24 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f001 f8c6 	bl	8007f94 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006e08:	4b47      	ldr	r3, [pc, #284]	; (8006f28 <tcp_close_shutdown+0x1b0>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d105      	bne.n	8006e1e <tcp_close_shutdown+0xa6>
 8006e12:	4b45      	ldr	r3, [pc, #276]	; (8006f28 <tcp_close_shutdown+0x1b0>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	4a43      	ldr	r2, [pc, #268]	; (8006f28 <tcp_close_shutdown+0x1b0>)
 8006e1a:	6013      	str	r3, [r2, #0]
 8006e1c:	e013      	b.n	8006e46 <tcp_close_shutdown+0xce>
 8006e1e:	4b42      	ldr	r3, [pc, #264]	; (8006f28 <tcp_close_shutdown+0x1b0>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	60fb      	str	r3, [r7, #12]
 8006e24:	e00c      	b.n	8006e40 <tcp_close_shutdown+0xc8>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d104      	bne.n	8006e3a <tcp_close_shutdown+0xc2>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68da      	ldr	r2, [r3, #12]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	60da      	str	r2, [r3, #12]
 8006e38:	e005      	b.n	8006e46 <tcp_close_shutdown+0xce>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1ef      	bne.n	8006e26 <tcp_close_shutdown+0xae>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	60da      	str	r2, [r3, #12]
 8006e4c:	4b37      	ldr	r3, [pc, #220]	; (8006f2c <tcp_close_shutdown+0x1b4>)
 8006e4e:	2201      	movs	r2, #1
 8006e50:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006e52:	4b37      	ldr	r3, [pc, #220]	; (8006f30 <tcp_close_shutdown+0x1b8>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d102      	bne.n	8006e62 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006e5c:	f003 fd5e 	bl	800a91c <tcp_trigger_input_pcb_close>
 8006e60:	e002      	b.n	8006e68 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7ff fed6 	bl	8006c14 <tcp_free>
      }
      return ERR_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	e050      	b.n	8006f0e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	7d1b      	ldrb	r3, [r3, #20]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d03b      	beq.n	8006eec <tcp_close_shutdown+0x174>
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	dc44      	bgt.n	8006f02 <tcp_close_shutdown+0x18a>
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d002      	beq.n	8006e82 <tcp_close_shutdown+0x10a>
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d02a      	beq.n	8006ed6 <tcp_close_shutdown+0x15e>
 8006e80:	e03f      	b.n	8006f02 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	8adb      	ldrh	r3, [r3, #22]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d021      	beq.n	8006ece <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006e8a:	4b2a      	ldr	r3, [pc, #168]	; (8006f34 <tcp_close_shutdown+0x1bc>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d105      	bne.n	8006ea0 <tcp_close_shutdown+0x128>
 8006e94:	4b27      	ldr	r3, [pc, #156]	; (8006f34 <tcp_close_shutdown+0x1bc>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	4a26      	ldr	r2, [pc, #152]	; (8006f34 <tcp_close_shutdown+0x1bc>)
 8006e9c:	6013      	str	r3, [r2, #0]
 8006e9e:	e013      	b.n	8006ec8 <tcp_close_shutdown+0x150>
 8006ea0:	4b24      	ldr	r3, [pc, #144]	; (8006f34 <tcp_close_shutdown+0x1bc>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	60bb      	str	r3, [r7, #8]
 8006ea6:	e00c      	b.n	8006ec2 <tcp_close_shutdown+0x14a>
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d104      	bne.n	8006ebc <tcp_close_shutdown+0x144>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68da      	ldr	r2, [r3, #12]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	60da      	str	r2, [r3, #12]
 8006eba:	e005      	b.n	8006ec8 <tcp_close_shutdown+0x150>
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	60bb      	str	r3, [r7, #8]
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1ef      	bne.n	8006ea8 <tcp_close_shutdown+0x130>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7ff fea0 	bl	8006c14 <tcp_free>
      break;
 8006ed4:	e01a      	b.n	8006f0c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7ff ff14 	bl	8006d04 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006edc:	6879      	ldr	r1, [r7, #4]
 8006ede:	4816      	ldr	r0, [pc, #88]	; (8006f38 <tcp_close_shutdown+0x1c0>)
 8006ee0:	f001 f8a8 	bl	8008034 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f7ff feb1 	bl	8006c4c <tcp_free_listen>
      break;
 8006eea:	e00f      	b.n	8006f0c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006eec:	6879      	ldr	r1, [r7, #4]
 8006eee:	480e      	ldr	r0, [pc, #56]	; (8006f28 <tcp_close_shutdown+0x1b0>)
 8006ef0:	f001 f8a0 	bl	8008034 <tcp_pcb_remove>
 8006ef4:	4b0d      	ldr	r3, [pc, #52]	; (8006f2c <tcp_close_shutdown+0x1b4>)
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7ff fe8a 	bl	8006c14 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006f00:	e004      	b.n	8006f0c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f81a 	bl	8006f3c <tcp_close_shutdown_fin>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	e000      	b.n	8006f0e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bdb0      	pop	{r4, r5, r7, pc}
 8006f16:	bf00      	nop
 8006f18:	08010a10 	.word	0x08010a10
 8006f1c:	08010ae4 	.word	0x08010ae4
 8006f20:	08010a54 	.word	0x08010a54
 8006f24:	08010b04 	.word	0x08010b04
 8006f28:	20008348 	.word	0x20008348
 8006f2c:	20008350 	.word	0x20008350
 8006f30:	20008388 	.word	0x20008388
 8006f34:	20008340 	.word	0x20008340
 8006f38:	20008344 	.word	0x20008344

08006f3c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d106      	bne.n	8006f58 <tcp_close_shutdown_fin+0x1c>
 8006f4a:	4b2e      	ldr	r3, [pc, #184]	; (8007004 <tcp_close_shutdown_fin+0xc8>)
 8006f4c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006f50:	492d      	ldr	r1, [pc, #180]	; (8007008 <tcp_close_shutdown_fin+0xcc>)
 8006f52:	482e      	ldr	r0, [pc, #184]	; (800700c <tcp_close_shutdown_fin+0xd0>)
 8006f54:	f007 fdd6 	bl	800eb04 <iprintf>

  switch (pcb->state) {
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	7d1b      	ldrb	r3, [r3, #20]
 8006f5c:	2b07      	cmp	r3, #7
 8006f5e:	d020      	beq.n	8006fa2 <tcp_close_shutdown_fin+0x66>
 8006f60:	2b07      	cmp	r3, #7
 8006f62:	dc2b      	bgt.n	8006fbc <tcp_close_shutdown_fin+0x80>
 8006f64:	2b03      	cmp	r3, #3
 8006f66:	d002      	beq.n	8006f6e <tcp_close_shutdown_fin+0x32>
 8006f68:	2b04      	cmp	r3, #4
 8006f6a:	d00d      	beq.n	8006f88 <tcp_close_shutdown_fin+0x4c>
 8006f6c:	e026      	b.n	8006fbc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f003 fee6 	bl	800ad40 <tcp_send_fin>
 8006f74:	4603      	mov	r3, r0
 8006f76:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d11f      	bne.n	8006fc0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2205      	movs	r2, #5
 8006f84:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006f86:	e01b      	b.n	8006fc0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f003 fed9 	bl	800ad40 <tcp_send_fin>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d114      	bne.n	8006fc4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2205      	movs	r2, #5
 8006f9e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006fa0:	e010      	b.n	8006fc4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f003 fecc 	bl	800ad40 <tcp_send_fin>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d109      	bne.n	8006fc8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2209      	movs	r2, #9
 8006fb8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006fba:	e005      	b.n	8006fc8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	e01c      	b.n	8006ffa <tcp_close_shutdown_fin+0xbe>
      break;
 8006fc0:	bf00      	nop
 8006fc2:	e002      	b.n	8006fca <tcp_close_shutdown_fin+0x8e>
      break;
 8006fc4:	bf00      	nop
 8006fc6:	e000      	b.n	8006fca <tcp_close_shutdown_fin+0x8e>
      break;
 8006fc8:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d103      	bne.n	8006fda <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f003 fff2 	bl	800afbc <tcp_output>
 8006fd8:	e00d      	b.n	8006ff6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe2:	d108      	bne.n	8006ff6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	8b5b      	ldrh	r3, [r3, #26]
 8006fe8:	f043 0308 	orr.w	r3, r3, #8
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	e001      	b.n	8006ffa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	08010a10 	.word	0x08010a10
 8007008:	08010ac0 	.word	0x08010ac0
 800700c:	08010a54 	.word	0x08010a54

08007010 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d109      	bne.n	8007032 <tcp_close+0x22>
 800701e:	4b0f      	ldr	r3, [pc, #60]	; (800705c <tcp_close+0x4c>)
 8007020:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8007024:	490e      	ldr	r1, [pc, #56]	; (8007060 <tcp_close+0x50>)
 8007026:	480f      	ldr	r0, [pc, #60]	; (8007064 <tcp_close+0x54>)
 8007028:	f007 fd6c 	bl	800eb04 <iprintf>
 800702c:	f06f 030f 	mvn.w	r3, #15
 8007030:	e00f      	b.n	8007052 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	7d1b      	ldrb	r3, [r3, #20]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d006      	beq.n	8007048 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	8b5b      	ldrh	r3, [r3, #26]
 800703e:	f043 0310 	orr.w	r3, r3, #16
 8007042:	b29a      	uxth	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8007048:	2101      	movs	r1, #1
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7ff fe94 	bl	8006d78 <tcp_close_shutdown>
 8007050:	4603      	mov	r3, r0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	08010a10 	.word	0x08010a10
 8007060:	08010b20 	.word	0x08010b20
 8007064:	08010a54 	.word	0x08010a54

08007068 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b08e      	sub	sp, #56	; 0x38
 800706c:	af04      	add	r7, sp, #16
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d107      	bne.n	8007088 <tcp_abandon+0x20>
 8007078:	4b52      	ldr	r3, [pc, #328]	; (80071c4 <tcp_abandon+0x15c>)
 800707a:	f240 223d 	movw	r2, #573	; 0x23d
 800707e:	4952      	ldr	r1, [pc, #328]	; (80071c8 <tcp_abandon+0x160>)
 8007080:	4852      	ldr	r0, [pc, #328]	; (80071cc <tcp_abandon+0x164>)
 8007082:	f007 fd3f 	bl	800eb04 <iprintf>
 8007086:	e099      	b.n	80071bc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	7d1b      	ldrb	r3, [r3, #20]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d106      	bne.n	800709e <tcp_abandon+0x36>
 8007090:	4b4c      	ldr	r3, [pc, #304]	; (80071c4 <tcp_abandon+0x15c>)
 8007092:	f44f 7210 	mov.w	r2, #576	; 0x240
 8007096:	494e      	ldr	r1, [pc, #312]	; (80071d0 <tcp_abandon+0x168>)
 8007098:	484c      	ldr	r0, [pc, #304]	; (80071cc <tcp_abandon+0x164>)
 800709a:	f007 fd33 	bl	800eb04 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	7d1b      	ldrb	r3, [r3, #20]
 80070a2:	2b0a      	cmp	r3, #10
 80070a4:	d107      	bne.n	80070b6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80070a6:	6879      	ldr	r1, [r7, #4]
 80070a8:	484a      	ldr	r0, [pc, #296]	; (80071d4 <tcp_abandon+0x16c>)
 80070aa:	f000 ffc3 	bl	8008034 <tcp_pcb_remove>
    tcp_free(pcb);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7ff fdb0 	bl	8006c14 <tcp_free>
 80070b4:	e082      	b.n	80071bc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80070ba:	2300      	movs	r3, #0
 80070bc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	7d1b      	ldrb	r3, [r3, #20]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d126      	bne.n	800712e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	8adb      	ldrh	r3, [r3, #22]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d02e      	beq.n	8007146 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80070e8:	4b3b      	ldr	r3, [pc, #236]	; (80071d8 <tcp_abandon+0x170>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d105      	bne.n	80070fe <tcp_abandon+0x96>
 80070f2:	4b39      	ldr	r3, [pc, #228]	; (80071d8 <tcp_abandon+0x170>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	4a37      	ldr	r2, [pc, #220]	; (80071d8 <tcp_abandon+0x170>)
 80070fa:	6013      	str	r3, [r2, #0]
 80070fc:	e013      	b.n	8007126 <tcp_abandon+0xbe>
 80070fe:	4b36      	ldr	r3, [pc, #216]	; (80071d8 <tcp_abandon+0x170>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	61fb      	str	r3, [r7, #28]
 8007104:	e00c      	b.n	8007120 <tcp_abandon+0xb8>
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	429a      	cmp	r2, r3
 800710e:	d104      	bne.n	800711a <tcp_abandon+0xb2>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68da      	ldr	r2, [r3, #12]
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	60da      	str	r2, [r3, #12]
 8007118:	e005      	b.n	8007126 <tcp_abandon+0xbe>
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	61fb      	str	r3, [r7, #28]
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1ef      	bne.n	8007106 <tcp_abandon+0x9e>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	60da      	str	r2, [r3, #12]
 800712c:	e00b      	b.n	8007146 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	8adb      	ldrh	r3, [r3, #22]
 8007136:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007138:	6879      	ldr	r1, [r7, #4]
 800713a:	4828      	ldr	r0, [pc, #160]	; (80071dc <tcp_abandon+0x174>)
 800713c:	f000 ff7a 	bl	8008034 <tcp_pcb_remove>
 8007140:	4b27      	ldr	r3, [pc, #156]	; (80071e0 <tcp_abandon+0x178>)
 8007142:	2201      	movs	r2, #1
 8007144:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714a:	2b00      	cmp	r3, #0
 800714c:	d004      	beq.n	8007158 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007152:	4618      	mov	r0, r3
 8007154:	f000 fd1c 	bl	8007b90 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800715c:	2b00      	cmp	r3, #0
 800715e:	d004      	beq.n	800716a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007164:	4618      	mov	r0, r3
 8007166:	f000 fd13 	bl	8007b90 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800716e:	2b00      	cmp	r3, #0
 8007170:	d004      	beq.n	800717c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007176:	4618      	mov	r0, r3
 8007178:	f000 fd0a 	bl	8007b90 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800717c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00e      	beq.n	80071a0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007182:	6879      	ldr	r1, [r7, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	3304      	adds	r3, #4
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	8b12      	ldrh	r2, [r2, #24]
 800718c:	9202      	str	r2, [sp, #8]
 800718e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007190:	9201      	str	r2, [sp, #4]
 8007192:	9300      	str	r3, [sp, #0]
 8007194:	460b      	mov	r3, r1
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	69b9      	ldr	r1, [r7, #24]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f004 fcc2 	bl	800bb24 <tcp_rst>
    }
    last_state = pcb->state;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	7d1b      	ldrb	r3, [r3, #20]
 80071a4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7ff fd34 	bl	8006c14 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d004      	beq.n	80071bc <tcp_abandon+0x154>
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f06f 010c 	mvn.w	r1, #12
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	4798      	blx	r3
  }
}
 80071bc:	3728      	adds	r7, #40	; 0x28
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	08010a10 	.word	0x08010a10
 80071c8:	08010b54 	.word	0x08010b54
 80071cc:	08010a54 	.word	0x08010a54
 80071d0:	08010b70 	.word	0x08010b70
 80071d4:	2000834c 	.word	0x2000834c
 80071d8:	20008340 	.word	0x20008340
 80071dc:	20008348 	.word	0x20008348
 80071e0:	20008350 	.word	0x20008350

080071e4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80071ec:	2101      	movs	r1, #1
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7ff ff3a 	bl	8007068 <tcp_abandon>
}
 80071f4:	bf00      	nop
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d106      	bne.n	8007218 <tcp_update_rcv_ann_wnd+0x1c>
 800720a:	4b25      	ldr	r3, [pc, #148]	; (80072a0 <tcp_update_rcv_ann_wnd+0xa4>)
 800720c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007210:	4924      	ldr	r1, [pc, #144]	; (80072a4 <tcp_update_rcv_ann_wnd+0xa8>)
 8007212:	4825      	ldr	r0, [pc, #148]	; (80072a8 <tcp_update_rcv_ann_wnd+0xac>)
 8007214:	f007 fc76 	bl	800eb04 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007220:	4413      	add	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800722c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007230:	bf28      	it	cs
 8007232:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007236:	b292      	uxth	r2, r2
 8007238:	4413      	add	r3, r2
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	db08      	blt.n	8007254 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	e020      	b.n	8007296 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	dd03      	ble.n	800726a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007268:	e014      	b.n	8007294 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800727c:	d306      	bcc.n	800728c <tcp_update_rcv_ann_wnd+0x90>
 800727e:	4b08      	ldr	r3, [pc, #32]	; (80072a0 <tcp_update_rcv_ann_wnd+0xa4>)
 8007280:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007284:	4909      	ldr	r1, [pc, #36]	; (80072ac <tcp_update_rcv_ann_wnd+0xb0>)
 8007286:	4808      	ldr	r0, [pc, #32]	; (80072a8 <tcp_update_rcv_ann_wnd+0xac>)
 8007288:	f007 fc3c 	bl	800eb04 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	b29a      	uxth	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007294:	2300      	movs	r3, #0
  }
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	08010a10 	.word	0x08010a10
 80072a4:	08010c6c 	.word	0x08010c6c
 80072a8:	08010a54 	.word	0x08010a54
 80072ac:	08010c90 	.word	0x08010c90

080072b0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d107      	bne.n	80072d2 <tcp_recved+0x22>
 80072c2:	4b1f      	ldr	r3, [pc, #124]	; (8007340 <tcp_recved+0x90>)
 80072c4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80072c8:	491e      	ldr	r1, [pc, #120]	; (8007344 <tcp_recved+0x94>)
 80072ca:	481f      	ldr	r0, [pc, #124]	; (8007348 <tcp_recved+0x98>)
 80072cc:	f007 fc1a 	bl	800eb04 <iprintf>
 80072d0:	e032      	b.n	8007338 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	7d1b      	ldrb	r3, [r3, #20]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d106      	bne.n	80072e8 <tcp_recved+0x38>
 80072da:	4b19      	ldr	r3, [pc, #100]	; (8007340 <tcp_recved+0x90>)
 80072dc:	f240 32d2 	movw	r2, #978	; 0x3d2
 80072e0:	491a      	ldr	r1, [pc, #104]	; (800734c <tcp_recved+0x9c>)
 80072e2:	4819      	ldr	r0, [pc, #100]	; (8007348 <tcp_recved+0x98>)
 80072e4:	f007 fc0e 	bl	800eb04 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80072ec:	887b      	ldrh	r3, [r7, #2]
 80072ee:	4413      	add	r3, r2
 80072f0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80072f2:	89fb      	ldrh	r3, [r7, #14]
 80072f4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80072f8:	d804      	bhi.n	8007304 <tcp_recved+0x54>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072fe:	89fa      	ldrh	r2, [r7, #14]
 8007300:	429a      	cmp	r2, r3
 8007302:	d204      	bcs.n	800730e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800730a:	851a      	strh	r2, [r3, #40]	; 0x28
 800730c:	e002      	b.n	8007314 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	89fa      	ldrh	r2, [r7, #14]
 8007312:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f7ff ff71 	bl	80071fc <tcp_update_rcv_ann_wnd>
 800731a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007322:	d309      	bcc.n	8007338 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	8b5b      	ldrh	r3, [r3, #26]
 8007328:	f043 0302 	orr.w	r3, r3, #2
 800732c:	b29a      	uxth	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f003 fe42 	bl	800afbc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	08010a10 	.word	0x08010a10
 8007344:	08010cac 	.word	0x08010cac
 8007348:	08010a54 	.word	0x08010a54
 800734c:	08010cc4 	.word	0x08010cc4

08007350 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007350:	b5b0      	push	{r4, r5, r7, lr}
 8007352:	b090      	sub	sp, #64	; 0x40
 8007354:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800735c:	4b94      	ldr	r3, [pc, #592]	; (80075b0 <tcp_slowtmr+0x260>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3301      	adds	r3, #1
 8007362:	4a93      	ldr	r2, [pc, #588]	; (80075b0 <tcp_slowtmr+0x260>)
 8007364:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007366:	4b93      	ldr	r3, [pc, #588]	; (80075b4 <tcp_slowtmr+0x264>)
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	3301      	adds	r3, #1
 800736c:	b2da      	uxtb	r2, r3
 800736e:	4b91      	ldr	r3, [pc, #580]	; (80075b4 <tcp_slowtmr+0x264>)
 8007370:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007372:	2300      	movs	r3, #0
 8007374:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007376:	4b90      	ldr	r3, [pc, #576]	; (80075b8 <tcp_slowtmr+0x268>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800737c:	e29f      	b.n	80078be <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800737e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007380:	7d1b      	ldrb	r3, [r3, #20]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d106      	bne.n	8007394 <tcp_slowtmr+0x44>
 8007386:	4b8d      	ldr	r3, [pc, #564]	; (80075bc <tcp_slowtmr+0x26c>)
 8007388:	f240 42be 	movw	r2, #1214	; 0x4be
 800738c:	498c      	ldr	r1, [pc, #560]	; (80075c0 <tcp_slowtmr+0x270>)
 800738e:	488d      	ldr	r0, [pc, #564]	; (80075c4 <tcp_slowtmr+0x274>)
 8007390:	f007 fbb8 	bl	800eb04 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007396:	7d1b      	ldrb	r3, [r3, #20]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d106      	bne.n	80073aa <tcp_slowtmr+0x5a>
 800739c:	4b87      	ldr	r3, [pc, #540]	; (80075bc <tcp_slowtmr+0x26c>)
 800739e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80073a2:	4989      	ldr	r1, [pc, #548]	; (80075c8 <tcp_slowtmr+0x278>)
 80073a4:	4887      	ldr	r0, [pc, #540]	; (80075c4 <tcp_slowtmr+0x274>)
 80073a6:	f007 fbad 	bl	800eb04 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	7d1b      	ldrb	r3, [r3, #20]
 80073ae:	2b0a      	cmp	r3, #10
 80073b0:	d106      	bne.n	80073c0 <tcp_slowtmr+0x70>
 80073b2:	4b82      	ldr	r3, [pc, #520]	; (80075bc <tcp_slowtmr+0x26c>)
 80073b4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80073b8:	4984      	ldr	r1, [pc, #528]	; (80075cc <tcp_slowtmr+0x27c>)
 80073ba:	4882      	ldr	r0, [pc, #520]	; (80075c4 <tcp_slowtmr+0x274>)
 80073bc:	f007 fba2 	bl	800eb04 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80073c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c2:	7f9a      	ldrb	r2, [r3, #30]
 80073c4:	4b7b      	ldr	r3, [pc, #492]	; (80075b4 <tcp_slowtmr+0x264>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d105      	bne.n	80073d8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80073cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80073d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80073d6:	e272      	b.n	80078be <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80073d8:	4b76      	ldr	r3, [pc, #472]	; (80075b4 <tcp_slowtmr+0x264>)
 80073da:	781a      	ldrb	r2, [r3, #0]
 80073dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073de:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80073e0:	2300      	movs	r3, #0
 80073e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80073e6:	2300      	movs	r3, #0
 80073e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80073ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ee:	7d1b      	ldrb	r3, [r3, #20]
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d10a      	bne.n	800740a <tcp_slowtmr+0xba>
 80073f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073fa:	2b05      	cmp	r3, #5
 80073fc:	d905      	bls.n	800740a <tcp_slowtmr+0xba>
      ++pcb_remove;
 80073fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007402:	3301      	adds	r3, #1
 8007404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007408:	e11e      	b.n	8007648 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800740a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007410:	2b0b      	cmp	r3, #11
 8007412:	d905      	bls.n	8007420 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007418:	3301      	adds	r3, #1
 800741a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800741e:	e113      	b.n	8007648 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007422:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007426:	2b00      	cmp	r3, #0
 8007428:	d075      	beq.n	8007516 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800742a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800742e:	2b00      	cmp	r3, #0
 8007430:	d006      	beq.n	8007440 <tcp_slowtmr+0xf0>
 8007432:	4b62      	ldr	r3, [pc, #392]	; (80075bc <tcp_slowtmr+0x26c>)
 8007434:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007438:	4965      	ldr	r1, [pc, #404]	; (80075d0 <tcp_slowtmr+0x280>)
 800743a:	4862      	ldr	r0, [pc, #392]	; (80075c4 <tcp_slowtmr+0x274>)
 800743c:	f007 fb62 	bl	800eb04 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007444:	2b00      	cmp	r3, #0
 8007446:	d106      	bne.n	8007456 <tcp_slowtmr+0x106>
 8007448:	4b5c      	ldr	r3, [pc, #368]	; (80075bc <tcp_slowtmr+0x26c>)
 800744a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800744e:	4961      	ldr	r1, [pc, #388]	; (80075d4 <tcp_slowtmr+0x284>)
 8007450:	485c      	ldr	r0, [pc, #368]	; (80075c4 <tcp_slowtmr+0x274>)
 8007452:	f007 fb57 	bl	800eb04 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007458:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800745c:	2b0b      	cmp	r3, #11
 800745e:	d905      	bls.n	800746c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007464:	3301      	adds	r3, #1
 8007466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800746a:	e0ed      	b.n	8007648 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800746c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007472:	3b01      	subs	r3, #1
 8007474:	4a58      	ldr	r2, [pc, #352]	; (80075d8 <tcp_slowtmr+0x288>)
 8007476:	5cd3      	ldrb	r3, [r2, r3]
 8007478:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800747a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007480:	7c7a      	ldrb	r2, [r7, #17]
 8007482:	429a      	cmp	r2, r3
 8007484:	d907      	bls.n	8007496 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007488:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800748c:	3301      	adds	r3, #1
 800748e:	b2da      	uxtb	r2, r3
 8007490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007492:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007498:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800749c:	7c7a      	ldrb	r2, [r7, #17]
 800749e:	429a      	cmp	r2, r3
 80074a0:	f200 80d2 	bhi.w	8007648 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80074a4:	2301      	movs	r3, #1
 80074a6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80074a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d108      	bne.n	80074c4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80074b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074b4:	f004 fc2a 	bl	800bd0c <tcp_zero_window_probe>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d014      	beq.n	80074e8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80074be:	2300      	movs	r3, #0
 80074c0:	623b      	str	r3, [r7, #32]
 80074c2:	e011      	b.n	80074e8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80074c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80074ca:	4619      	mov	r1, r3
 80074cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074ce:	f003 faef 	bl	800aab0 <tcp_split_unsent_seg>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d107      	bne.n	80074e8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80074d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074da:	f003 fd6f 	bl	800afbc <tcp_output>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80074e4:	2300      	movs	r3, #0
 80074e6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80074e8:	6a3b      	ldr	r3, [r7, #32]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 80ac 	beq.w	8007648 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80074f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80074f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80074fe:	2b06      	cmp	r3, #6
 8007500:	f200 80a2 	bhi.w	8007648 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007506:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800750a:	3301      	adds	r3, #1
 800750c:	b2da      	uxtb	r2, r3
 800750e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007510:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007514:	e098      	b.n	8007648 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007518:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800751c:	2b00      	cmp	r3, #0
 800751e:	db0f      	blt.n	8007540 <tcp_slowtmr+0x1f0>
 8007520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007522:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007526:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800752a:	4293      	cmp	r3, r2
 800752c:	d008      	beq.n	8007540 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800752e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007530:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007534:	b29b      	uxth	r3, r3
 8007536:	3301      	adds	r3, #1
 8007538:	b29b      	uxth	r3, r3
 800753a:	b21a      	sxth	r2, r3
 800753c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007542:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007548:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800754c:	429a      	cmp	r2, r3
 800754e:	db7b      	blt.n	8007648 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007550:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007552:	f004 f825 	bl	800b5a0 <tcp_rexmit_rto_prepare>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d007      	beq.n	800756c <tcp_slowtmr+0x21c>
 800755c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007560:	2b00      	cmp	r3, #0
 8007562:	d171      	bne.n	8007648 <tcp_slowtmr+0x2f8>
 8007564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007568:	2b00      	cmp	r3, #0
 800756a:	d06d      	beq.n	8007648 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800756c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756e:	7d1b      	ldrb	r3, [r3, #20]
 8007570:	2b02      	cmp	r3, #2
 8007572:	d03a      	beq.n	80075ea <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007576:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800757a:	2b0c      	cmp	r3, #12
 800757c:	bf28      	it	cs
 800757e:	230c      	movcs	r3, #12
 8007580:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007584:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007588:	10db      	asrs	r3, r3, #3
 800758a:	b21b      	sxth	r3, r3
 800758c:	461a      	mov	r2, r3
 800758e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007590:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007594:	4413      	add	r3, r2
 8007596:	7efa      	ldrb	r2, [r7, #27]
 8007598:	4910      	ldr	r1, [pc, #64]	; (80075dc <tcp_slowtmr+0x28c>)
 800759a:	5c8a      	ldrb	r2, [r1, r2]
 800759c:	4093      	lsls	r3, r2
 800759e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80075a6:	4293      	cmp	r3, r2
 80075a8:	dc1a      	bgt.n	80075e0 <tcp_slowtmr+0x290>
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	b21a      	sxth	r2, r3
 80075ae:	e019      	b.n	80075e4 <tcp_slowtmr+0x294>
 80075b0:	2000833c 	.word	0x2000833c
 80075b4:	20008352 	.word	0x20008352
 80075b8:	20008348 	.word	0x20008348
 80075bc:	08010a10 	.word	0x08010a10
 80075c0:	08010d54 	.word	0x08010d54
 80075c4:	08010a54 	.word	0x08010a54
 80075c8:	08010d80 	.word	0x08010d80
 80075cc:	08010dac 	.word	0x08010dac
 80075d0:	08010ddc 	.word	0x08010ddc
 80075d4:	08010e10 	.word	0x08010e10
 80075d8:	080129e8 	.word	0x080129e8
 80075dc:	080129d8 	.word	0x080129d8
 80075e0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80075e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80075ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ec:	2200      	movs	r2, #0
 80075ee:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80075f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80075f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80075fc:	4293      	cmp	r3, r2
 80075fe:	bf28      	it	cs
 8007600:	4613      	movcs	r3, r2
 8007602:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007604:	8a7b      	ldrh	r3, [r7, #18]
 8007606:	085b      	lsrs	r3, r3, #1
 8007608:	b29a      	uxth	r2, r3
 800760a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007612:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007618:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800761a:	005b      	lsls	r3, r3, #1
 800761c:	b29b      	uxth	r3, r3
 800761e:	429a      	cmp	r2, r3
 8007620:	d206      	bcs.n	8007630 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007624:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007626:	005b      	lsls	r3, r3, #1
 8007628:	b29a      	uxth	r2, r3
 800762a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007632:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007636:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800763a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800763c:	2200      	movs	r2, #0
 800763e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007642:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007644:	f004 f81c 	bl	800b680 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764a:	7d1b      	ldrb	r3, [r3, #20]
 800764c:	2b06      	cmp	r3, #6
 800764e:	d111      	bne.n	8007674 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007652:	8b5b      	ldrh	r3, [r3, #26]
 8007654:	f003 0310 	and.w	r3, r3, #16
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00b      	beq.n	8007674 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800765c:	4b9d      	ldr	r3, [pc, #628]	; (80078d4 <tcp_slowtmr+0x584>)
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007662:	6a1b      	ldr	r3, [r3, #32]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b28      	cmp	r3, #40	; 0x28
 8007668:	d904      	bls.n	8007674 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800766a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800766e:	3301      	adds	r3, #1
 8007670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007676:	7a5b      	ldrb	r3, [r3, #9]
 8007678:	f003 0308 	and.w	r3, r3, #8
 800767c:	2b00      	cmp	r3, #0
 800767e:	d04c      	beq.n	800771a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8007680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007682:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007684:	2b04      	cmp	r3, #4
 8007686:	d003      	beq.n	8007690 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800768c:	2b07      	cmp	r3, #7
 800768e:	d144      	bne.n	800771a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007690:	4b90      	ldr	r3, [pc, #576]	; (80078d4 <tcp_slowtmr+0x584>)
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007696:	6a1b      	ldr	r3, [r3, #32]
 8007698:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800769a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076a0:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80076a4:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80076a8:	498b      	ldr	r1, [pc, #556]	; (80078d8 <tcp_slowtmr+0x588>)
 80076aa:	fba1 1303 	umull	r1, r3, r1, r3
 80076ae:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d90a      	bls.n	80076ca <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80076b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076b8:	3301      	adds	r3, #1
 80076ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80076be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076c2:	3301      	adds	r3, #1
 80076c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80076c8:	e027      	b.n	800771a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80076ca:	4b82      	ldr	r3, [pc, #520]	; (80078d4 <tcp_slowtmr+0x584>)
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80076d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80076da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076dc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80076e0:	4618      	mov	r0, r3
 80076e2:	4b7e      	ldr	r3, [pc, #504]	; (80078dc <tcp_slowtmr+0x58c>)
 80076e4:	fb00 f303 	mul.w	r3, r0, r3
 80076e8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80076ea:	497b      	ldr	r1, [pc, #492]	; (80078d8 <tcp_slowtmr+0x588>)
 80076ec:	fba1 1303 	umull	r1, r3, r1, r3
 80076f0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d911      	bls.n	800771a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80076f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076f8:	f004 fac8 	bl	800bc8c <tcp_keepalive>
 80076fc:	4603      	mov	r3, r0
 80076fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007702:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007706:	2b00      	cmp	r3, #0
 8007708:	d107      	bne.n	800771a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800770a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007710:	3301      	adds	r3, #1
 8007712:	b2da      	uxtb	r2, r3
 8007714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007716:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800771a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800771e:	2b00      	cmp	r3, #0
 8007720:	d011      	beq.n	8007746 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007722:	4b6c      	ldr	r3, [pc, #432]	; (80078d4 <tcp_slowtmr+0x584>)
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	1ad2      	subs	r2, r2, r3
 800772c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007732:	4619      	mov	r1, r3
 8007734:	460b      	mov	r3, r1
 8007736:	005b      	lsls	r3, r3, #1
 8007738:	440b      	add	r3, r1
 800773a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800773c:	429a      	cmp	r2, r3
 800773e:	d302      	bcc.n	8007746 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007740:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007742:	f000 fddb 	bl	80082fc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007748:	7d1b      	ldrb	r3, [r3, #20]
 800774a:	2b03      	cmp	r3, #3
 800774c:	d10b      	bne.n	8007766 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800774e:	4b61      	ldr	r3, [pc, #388]	; (80078d4 <tcp_slowtmr+0x584>)
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	2b28      	cmp	r3, #40	; 0x28
 800775a:	d904      	bls.n	8007766 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800775c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007760:	3301      	adds	r3, #1
 8007762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007768:	7d1b      	ldrb	r3, [r3, #20]
 800776a:	2b09      	cmp	r3, #9
 800776c:	d10b      	bne.n	8007786 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800776e:	4b59      	ldr	r3, [pc, #356]	; (80078d4 <tcp_slowtmr+0x584>)
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	2bf0      	cmp	r3, #240	; 0xf0
 800777a:	d904      	bls.n	8007786 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800777c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007780:	3301      	adds	r3, #1
 8007782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800778a:	2b00      	cmp	r3, #0
 800778c:	d060      	beq.n	8007850 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007794:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007796:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007798:	f000 fbfc 	bl	8007f94 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800779c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d010      	beq.n	80077c4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80077a2:	4b4f      	ldr	r3, [pc, #316]	; (80078e0 <tcp_slowtmr+0x590>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d106      	bne.n	80077ba <tcp_slowtmr+0x46a>
 80077ac:	4b4d      	ldr	r3, [pc, #308]	; (80078e4 <tcp_slowtmr+0x594>)
 80077ae:	f240 526d 	movw	r2, #1389	; 0x56d
 80077b2:	494d      	ldr	r1, [pc, #308]	; (80078e8 <tcp_slowtmr+0x598>)
 80077b4:	484d      	ldr	r0, [pc, #308]	; (80078ec <tcp_slowtmr+0x59c>)
 80077b6:	f007 f9a5 	bl	800eb04 <iprintf>
        prev->next = pcb->next;
 80077ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077bc:	68da      	ldr	r2, [r3, #12]
 80077be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c0:	60da      	str	r2, [r3, #12]
 80077c2:	e00f      	b.n	80077e4 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80077c4:	4b46      	ldr	r3, [pc, #280]	; (80078e0 <tcp_slowtmr+0x590>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d006      	beq.n	80077dc <tcp_slowtmr+0x48c>
 80077ce:	4b45      	ldr	r3, [pc, #276]	; (80078e4 <tcp_slowtmr+0x594>)
 80077d0:	f240 5271 	movw	r2, #1393	; 0x571
 80077d4:	4946      	ldr	r1, [pc, #280]	; (80078f0 <tcp_slowtmr+0x5a0>)
 80077d6:	4845      	ldr	r0, [pc, #276]	; (80078ec <tcp_slowtmr+0x59c>)
 80077d8:	f007 f994 	bl	800eb04 <iprintf>
        tcp_active_pcbs = pcb->next;
 80077dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	4a3f      	ldr	r2, [pc, #252]	; (80078e0 <tcp_slowtmr+0x590>)
 80077e2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80077e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d013      	beq.n	8007814 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80077ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ee:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80077f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80077f4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80077f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f8:	3304      	adds	r3, #4
 80077fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077fc:	8ad2      	ldrh	r2, [r2, #22]
 80077fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007800:	8b09      	ldrh	r1, [r1, #24]
 8007802:	9102      	str	r1, [sp, #8]
 8007804:	9201      	str	r2, [sp, #4]
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	462b      	mov	r3, r5
 800780a:	4622      	mov	r2, r4
 800780c:	4601      	mov	r1, r0
 800780e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007810:	f004 f988 	bl	800bb24 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800781a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781c:	7d1b      	ldrb	r3, [r3, #20]
 800781e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007822:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800782a:	6838      	ldr	r0, [r7, #0]
 800782c:	f7ff f9f2 	bl	8006c14 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007830:	4b30      	ldr	r3, [pc, #192]	; (80078f4 <tcp_slowtmr+0x5a4>)
 8007832:	2200      	movs	r2, #0
 8007834:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d004      	beq.n	8007846 <tcp_slowtmr+0x4f6>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f06f 010c 	mvn.w	r1, #12
 8007842:	68b8      	ldr	r0, [r7, #8]
 8007844:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007846:	4b2b      	ldr	r3, [pc, #172]	; (80078f4 <tcp_slowtmr+0x5a4>)
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d037      	beq.n	80078be <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800784e:	e590      	b.n	8007372 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007852:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800785a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785c:	7f1b      	ldrb	r3, [r3, #28]
 800785e:	3301      	adds	r3, #1
 8007860:	b2da      	uxtb	r2, r3
 8007862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007864:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007868:	7f1a      	ldrb	r2, [r3, #28]
 800786a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786c:	7f5b      	ldrb	r3, [r3, #29]
 800786e:	429a      	cmp	r2, r3
 8007870:	d325      	bcc.n	80078be <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8007872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007874:	2200      	movs	r2, #0
 8007876:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007878:	4b1e      	ldr	r3, [pc, #120]	; (80078f4 <tcp_slowtmr+0x5a4>)
 800787a:	2200      	movs	r2, #0
 800787c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800787e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00b      	beq.n	80078a0 <tcp_slowtmr+0x550>
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800788e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007890:	6912      	ldr	r2, [r2, #16]
 8007892:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007894:	4610      	mov	r0, r2
 8007896:	4798      	blx	r3
 8007898:	4603      	mov	r3, r0
 800789a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800789e:	e002      	b.n	80078a6 <tcp_slowtmr+0x556>
 80078a0:	2300      	movs	r3, #0
 80078a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80078a6:	4b13      	ldr	r3, [pc, #76]	; (80078f4 <tcp_slowtmr+0x5a4>)
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d000      	beq.n	80078b0 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80078ae:	e560      	b.n	8007372 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80078b0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d102      	bne.n	80078be <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80078b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ba:	f003 fb7f 	bl	800afbc <tcp_output>
  while (pcb != NULL) {
 80078be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f47f ad5c 	bne.w	800737e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80078ca:	4b0b      	ldr	r3, [pc, #44]	; (80078f8 <tcp_slowtmr+0x5a8>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80078d0:	e067      	b.n	80079a2 <tcp_slowtmr+0x652>
 80078d2:	bf00      	nop
 80078d4:	2000833c 	.word	0x2000833c
 80078d8:	10624dd3 	.word	0x10624dd3
 80078dc:	000124f8 	.word	0x000124f8
 80078e0:	20008348 	.word	0x20008348
 80078e4:	08010a10 	.word	0x08010a10
 80078e8:	08010e48 	.word	0x08010e48
 80078ec:	08010a54 	.word	0x08010a54
 80078f0:	08010e74 	.word	0x08010e74
 80078f4:	20008350 	.word	0x20008350
 80078f8:	2000834c 	.word	0x2000834c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80078fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fe:	7d1b      	ldrb	r3, [r3, #20]
 8007900:	2b0a      	cmp	r3, #10
 8007902:	d006      	beq.n	8007912 <tcp_slowtmr+0x5c2>
 8007904:	4b2b      	ldr	r3, [pc, #172]	; (80079b4 <tcp_slowtmr+0x664>)
 8007906:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800790a:	492b      	ldr	r1, [pc, #172]	; (80079b8 <tcp_slowtmr+0x668>)
 800790c:	482b      	ldr	r0, [pc, #172]	; (80079bc <tcp_slowtmr+0x66c>)
 800790e:	f007 f8f9 	bl	800eb04 <iprintf>
    pcb_remove = 0;
 8007912:	2300      	movs	r3, #0
 8007914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007918:	4b29      	ldr	r3, [pc, #164]	; (80079c0 <tcp_slowtmr+0x670>)
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	2bf0      	cmp	r3, #240	; 0xf0
 8007924:	d904      	bls.n	8007930 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800792a:	3301      	adds	r3, #1
 800792c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007934:	2b00      	cmp	r3, #0
 8007936:	d02f      	beq.n	8007998 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007938:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800793a:	f000 fb2b 	bl	8007f94 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800793e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007940:	2b00      	cmp	r3, #0
 8007942:	d010      	beq.n	8007966 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007944:	4b1f      	ldr	r3, [pc, #124]	; (80079c4 <tcp_slowtmr+0x674>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800794a:	429a      	cmp	r2, r3
 800794c:	d106      	bne.n	800795c <tcp_slowtmr+0x60c>
 800794e:	4b19      	ldr	r3, [pc, #100]	; (80079b4 <tcp_slowtmr+0x664>)
 8007950:	f240 52af 	movw	r2, #1455	; 0x5af
 8007954:	491c      	ldr	r1, [pc, #112]	; (80079c8 <tcp_slowtmr+0x678>)
 8007956:	4819      	ldr	r0, [pc, #100]	; (80079bc <tcp_slowtmr+0x66c>)
 8007958:	f007 f8d4 	bl	800eb04 <iprintf>
        prev->next = pcb->next;
 800795c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795e:	68da      	ldr	r2, [r3, #12]
 8007960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007962:	60da      	str	r2, [r3, #12]
 8007964:	e00f      	b.n	8007986 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007966:	4b17      	ldr	r3, [pc, #92]	; (80079c4 <tcp_slowtmr+0x674>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800796c:	429a      	cmp	r2, r3
 800796e:	d006      	beq.n	800797e <tcp_slowtmr+0x62e>
 8007970:	4b10      	ldr	r3, [pc, #64]	; (80079b4 <tcp_slowtmr+0x664>)
 8007972:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007976:	4915      	ldr	r1, [pc, #84]	; (80079cc <tcp_slowtmr+0x67c>)
 8007978:	4810      	ldr	r0, [pc, #64]	; (80079bc <tcp_slowtmr+0x66c>)
 800797a:	f007 f8c3 	bl	800eb04 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800797e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	4a10      	ldr	r2, [pc, #64]	; (80079c4 <tcp_slowtmr+0x674>)
 8007984:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007988:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800798a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007990:	69f8      	ldr	r0, [r7, #28]
 8007992:	f7ff f93f 	bl	8006c14 <tcp_free>
 8007996:	e004      	b.n	80079a2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800799c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80079a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1a9      	bne.n	80078fc <tcp_slowtmr+0x5ac>
    }
  }
}
 80079a8:	bf00      	nop
 80079aa:	bf00      	nop
 80079ac:	3730      	adds	r7, #48	; 0x30
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bdb0      	pop	{r4, r5, r7, pc}
 80079b2:	bf00      	nop
 80079b4:	08010a10 	.word	0x08010a10
 80079b8:	08010ea0 	.word	0x08010ea0
 80079bc:	08010a54 	.word	0x08010a54
 80079c0:	2000833c 	.word	0x2000833c
 80079c4:	2000834c 	.word	0x2000834c
 80079c8:	08010ed0 	.word	0x08010ed0
 80079cc:	08010ef8 	.word	0x08010ef8

080079d0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80079d6:	4b2d      	ldr	r3, [pc, #180]	; (8007a8c <tcp_fasttmr+0xbc>)
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	3301      	adds	r3, #1
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	4b2b      	ldr	r3, [pc, #172]	; (8007a8c <tcp_fasttmr+0xbc>)
 80079e0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80079e2:	4b2b      	ldr	r3, [pc, #172]	; (8007a90 <tcp_fasttmr+0xc0>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80079e8:	e048      	b.n	8007a7c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	7f9a      	ldrb	r2, [r3, #30]
 80079ee:	4b27      	ldr	r3, [pc, #156]	; (8007a8c <tcp_fasttmr+0xbc>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d03f      	beq.n	8007a76 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80079f6:	4b25      	ldr	r3, [pc, #148]	; (8007a8c <tcp_fasttmr+0xbc>)
 80079f8:	781a      	ldrb	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	8b5b      	ldrh	r3, [r3, #26]
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d010      	beq.n	8007a2c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	8b5b      	ldrh	r3, [r3, #26]
 8007a0e:	f043 0302 	orr.w	r3, r3, #2
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f003 facf 	bl	800afbc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	8b5b      	ldrh	r3, [r3, #26]
 8007a22:	f023 0303 	bic.w	r3, r3, #3
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	8b5b      	ldrh	r3, [r3, #26]
 8007a30:	f003 0308 	and.w	r3, r3, #8
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d009      	beq.n	8007a4c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	8b5b      	ldrh	r3, [r3, #26]
 8007a3c:	f023 0308 	bic.w	r3, r3, #8
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7ff fa78 	bl	8006f3c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00a      	beq.n	8007a70 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007a5a:	4b0e      	ldr	r3, [pc, #56]	; (8007a94 <tcp_fasttmr+0xc4>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f819 	bl	8007a98 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007a66:	4b0b      	ldr	r3, [pc, #44]	; (8007a94 <tcp_fasttmr+0xc4>)
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d000      	beq.n	8007a70 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007a6e:	e7b8      	b.n	80079e2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	607b      	str	r3, [r7, #4]
 8007a74:	e002      	b.n	8007a7c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1b3      	bne.n	80079ea <tcp_fasttmr+0x1a>
    }
  }
}
 8007a82:	bf00      	nop
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	20008352 	.word	0x20008352
 8007a90:	20008348 	.word	0x20008348
 8007a94:	20008350 	.word	0x20008350

08007a98 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007a98:	b590      	push	{r4, r7, lr}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d109      	bne.n	8007aba <tcp_process_refused_data+0x22>
 8007aa6:	4b37      	ldr	r3, [pc, #220]	; (8007b84 <tcp_process_refused_data+0xec>)
 8007aa8:	f240 6209 	movw	r2, #1545	; 0x609
 8007aac:	4936      	ldr	r1, [pc, #216]	; (8007b88 <tcp_process_refused_data+0xf0>)
 8007aae:	4837      	ldr	r0, [pc, #220]	; (8007b8c <tcp_process_refused_data+0xf4>)
 8007ab0:	f007 f828 	bl	800eb04 <iprintf>
 8007ab4:	f06f 030f 	mvn.w	r3, #15
 8007ab8:	e060      	b.n	8007b7c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007abe:	7b5b      	ldrb	r3, [r3, #13]
 8007ac0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ac6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00b      	beq.n	8007af0 <tcp_process_refused_data+0x58>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6918      	ldr	r0, [r3, #16]
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	6879      	ldr	r1, [r7, #4]
 8007ae8:	47a0      	blx	r4
 8007aea:	4603      	mov	r3, r0
 8007aec:	73fb      	strb	r3, [r7, #15]
 8007aee:	e007      	b.n	8007b00 <tcp_process_refused_data+0x68>
 8007af0:	2300      	movs	r3, #0
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	6879      	ldr	r1, [r7, #4]
 8007af6:	2000      	movs	r0, #0
 8007af8:	f000 f8a4 	bl	8007c44 <tcp_recv_null>
 8007afc:	4603      	mov	r3, r0
 8007afe:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d12a      	bne.n	8007b5e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	f003 0320 	and.w	r3, r3, #32
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d033      	beq.n	8007b7a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b16:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007b1a:	d005      	beq.n	8007b28 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b20:	3301      	adds	r3, #1
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00b      	beq.n	8007b4a <tcp_process_refused_data+0xb2>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6918      	ldr	r0, [r3, #16]
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	2200      	movs	r2, #0
 8007b40:	6879      	ldr	r1, [r7, #4]
 8007b42:	47a0      	blx	r4
 8007b44:	4603      	mov	r3, r0
 8007b46:	73fb      	strb	r3, [r7, #15]
 8007b48:	e001      	b.n	8007b4e <tcp_process_refused_data+0xb6>
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b52:	f113 0f0d 	cmn.w	r3, #13
 8007b56:	d110      	bne.n	8007b7a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007b58:	f06f 030c 	mvn.w	r3, #12
 8007b5c:	e00e      	b.n	8007b7c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b62:	f113 0f0d 	cmn.w	r3, #13
 8007b66:	d102      	bne.n	8007b6e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007b68:	f06f 030c 	mvn.w	r3, #12
 8007b6c:	e006      	b.n	8007b7c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007b74:	f06f 0304 	mvn.w	r3, #4
 8007b78:	e000      	b.n	8007b7c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd90      	pop	{r4, r7, pc}
 8007b84:	08010a10 	.word	0x08010a10
 8007b88:	08010f20 	.word	0x08010f20
 8007b8c:	08010a54 	.word	0x08010a54

08007b90 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007b98:	e007      	b.n	8007baa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f80a 	bl	8007bba <tcp_seg_free>
    seg = next;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1f4      	bne.n	8007b9a <tcp_segs_free+0xa>
  }
}
 8007bb0:	bf00      	nop
 8007bb2:	bf00      	nop
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b082      	sub	sp, #8
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00c      	beq.n	8007be2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d004      	beq.n	8007bda <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fe fd7d 	bl	80066d4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	2003      	movs	r0, #3
 8007bde:	f7fd ff03 	bl	80059e8 <memp_free>
  }
}
 8007be2:	bf00      	nop
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
	...

08007bec <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d106      	bne.n	8007c08 <tcp_seg_copy+0x1c>
 8007bfa:	4b0f      	ldr	r3, [pc, #60]	; (8007c38 <tcp_seg_copy+0x4c>)
 8007bfc:	f240 6282 	movw	r2, #1666	; 0x682
 8007c00:	490e      	ldr	r1, [pc, #56]	; (8007c3c <tcp_seg_copy+0x50>)
 8007c02:	480f      	ldr	r0, [pc, #60]	; (8007c40 <tcp_seg_copy+0x54>)
 8007c04:	f006 ff7e 	bl	800eb04 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007c08:	2003      	movs	r0, #3
 8007c0a:	f7fd fe7d 	bl	8005908 <memp_malloc>
 8007c0e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d101      	bne.n	8007c1a <tcp_seg_copy+0x2e>
    return NULL;
 8007c16:	2300      	movs	r3, #0
 8007c18:	e00a      	b.n	8007c30 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007c1a:	2210      	movs	r2, #16
 8007c1c:	6879      	ldr	r1, [r7, #4]
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f006 ff40 	bl	800eaa4 <memcpy>
  pbuf_ref(cseg->p);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7fe fdf3 	bl	8006814 <pbuf_ref>
  return cseg;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	08010a10 	.word	0x08010a10
 8007c3c:	08010f64 	.word	0x08010f64
 8007c40:	08010a54 	.word	0x08010a54

08007c44 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	607a      	str	r2, [r7, #4]
 8007c50:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d109      	bne.n	8007c6c <tcp_recv_null+0x28>
 8007c58:	4b12      	ldr	r3, [pc, #72]	; (8007ca4 <tcp_recv_null+0x60>)
 8007c5a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007c5e:	4912      	ldr	r1, [pc, #72]	; (8007ca8 <tcp_recv_null+0x64>)
 8007c60:	4812      	ldr	r0, [pc, #72]	; (8007cac <tcp_recv_null+0x68>)
 8007c62:	f006 ff4f 	bl	800eb04 <iprintf>
 8007c66:	f06f 030f 	mvn.w	r3, #15
 8007c6a:	e016      	b.n	8007c9a <tcp_recv_null+0x56>

  if (p != NULL) {
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d009      	beq.n	8007c86 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	891b      	ldrh	r3, [r3, #8]
 8007c76:	4619      	mov	r1, r3
 8007c78:	68b8      	ldr	r0, [r7, #8]
 8007c7a:	f7ff fb19 	bl	80072b0 <tcp_recved>
    pbuf_free(p);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7fe fd28 	bl	80066d4 <pbuf_free>
 8007c84:	e008      	b.n	8007c98 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007c86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d104      	bne.n	8007c98 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007c8e:	68b8      	ldr	r0, [r7, #8]
 8007c90:	f7ff f9be 	bl	8007010 <tcp_close>
 8007c94:	4603      	mov	r3, r0
 8007c96:	e000      	b.n	8007c9a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	08010a10 	.word	0x08010a10
 8007ca8:	08010f80 	.word	0x08010f80
 8007cac:	08010a54 	.word	0x08010a54

08007cb0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	db01      	blt.n	8007cc6 <tcp_kill_prio+0x16>
 8007cc2:	79fb      	ldrb	r3, [r7, #7]
 8007cc4:	e000      	b.n	8007cc8 <tcp_kill_prio+0x18>
 8007cc6:	237f      	movs	r3, #127	; 0x7f
 8007cc8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007cca:	7afb      	ldrb	r3, [r7, #11]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d034      	beq.n	8007d3a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007cd0:	7afb      	ldrb	r3, [r7, #11]
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007cde:	4b19      	ldr	r3, [pc, #100]	; (8007d44 <tcp_kill_prio+0x94>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	617b      	str	r3, [r7, #20]
 8007ce4:	e01f      	b.n	8007d26 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	7d5b      	ldrb	r3, [r3, #21]
 8007cea:	7afa      	ldrb	r2, [r7, #11]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d80c      	bhi.n	8007d0a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007cf4:	7afa      	ldrb	r2, [r7, #11]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d112      	bne.n	8007d20 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007cfa:	4b13      	ldr	r3, [pc, #76]	; (8007d48 <tcp_kill_prio+0x98>)
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d80a      	bhi.n	8007d20 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007d0a:	4b0f      	ldr	r3, [pc, #60]	; (8007d48 <tcp_kill_prio+0x98>)
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	7d5b      	ldrb	r3, [r3, #21]
 8007d1e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	617b      	str	r3, [r7, #20]
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1dc      	bne.n	8007ce6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d004      	beq.n	8007d3c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007d32:	6938      	ldr	r0, [r7, #16]
 8007d34:	f7ff fa56 	bl	80071e4 <tcp_abort>
 8007d38:	e000      	b.n	8007d3c <tcp_kill_prio+0x8c>
    return;
 8007d3a:	bf00      	nop
  }
}
 8007d3c:	3718      	adds	r7, #24
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20008348 	.word	0x20008348
 8007d48:	2000833c 	.word	0x2000833c

08007d4c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b086      	sub	sp, #24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	4603      	mov	r3, r0
 8007d54:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007d56:	79fb      	ldrb	r3, [r7, #7]
 8007d58:	2b08      	cmp	r3, #8
 8007d5a:	d009      	beq.n	8007d70 <tcp_kill_state+0x24>
 8007d5c:	79fb      	ldrb	r3, [r7, #7]
 8007d5e:	2b09      	cmp	r3, #9
 8007d60:	d006      	beq.n	8007d70 <tcp_kill_state+0x24>
 8007d62:	4b1a      	ldr	r3, [pc, #104]	; (8007dcc <tcp_kill_state+0x80>)
 8007d64:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007d68:	4919      	ldr	r1, [pc, #100]	; (8007dd0 <tcp_kill_state+0x84>)
 8007d6a:	481a      	ldr	r0, [pc, #104]	; (8007dd4 <tcp_kill_state+0x88>)
 8007d6c:	f006 feca 	bl	800eb04 <iprintf>

  inactivity = 0;
 8007d70:	2300      	movs	r3, #0
 8007d72:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007d74:	2300      	movs	r3, #0
 8007d76:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d78:	4b17      	ldr	r3, [pc, #92]	; (8007dd8 <tcp_kill_state+0x8c>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	617b      	str	r3, [r7, #20]
 8007d7e:	e017      	b.n	8007db0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	7d1b      	ldrb	r3, [r3, #20]
 8007d84:	79fa      	ldrb	r2, [r7, #7]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d10f      	bne.n	8007daa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007d8a:	4b14      	ldr	r3, [pc, #80]	; (8007ddc <tcp_kill_state+0x90>)
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	6a1b      	ldr	r3, [r3, #32]
 8007d92:	1ad3      	subs	r3, r2, r3
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d807      	bhi.n	8007daa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007d9a:	4b10      	ldr	r3, [pc, #64]	; (8007ddc <tcp_kill_state+0x90>)
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	617b      	str	r3, [r7, #20]
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1e4      	bne.n	8007d80 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d003      	beq.n	8007dc4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	6938      	ldr	r0, [r7, #16]
 8007dc0:	f7ff f952 	bl	8007068 <tcp_abandon>
  }
}
 8007dc4:	bf00      	nop
 8007dc6:	3718      	adds	r7, #24
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	08010a10 	.word	0x08010a10
 8007dd0:	08010f9c 	.word	0x08010f9c
 8007dd4:	08010a54 	.word	0x08010a54
 8007dd8:	20008348 	.word	0x20008348
 8007ddc:	2000833c 	.word	0x2000833c

08007de0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007dee:	4b12      	ldr	r3, [pc, #72]	; (8007e38 <tcp_kill_timewait+0x58>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	60fb      	str	r3, [r7, #12]
 8007df4:	e012      	b.n	8007e1c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007df6:	4b11      	ldr	r3, [pc, #68]	; (8007e3c <tcp_kill_timewait+0x5c>)
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	1ad3      	subs	r3, r2, r3
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d807      	bhi.n	8007e16 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007e06:	4b0d      	ldr	r3, [pc, #52]	; (8007e3c <tcp_kill_timewait+0x5c>)
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1e9      	bne.n	8007df6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d002      	beq.n	8007e2e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007e28:	68b8      	ldr	r0, [r7, #8]
 8007e2a:	f7ff f9db 	bl	80071e4 <tcp_abort>
  }
}
 8007e2e:	bf00      	nop
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	2000834c 	.word	0x2000834c
 8007e3c:	2000833c 	.word	0x2000833c

08007e40 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007e46:	4b10      	ldr	r3, [pc, #64]	; (8007e88 <tcp_handle_closepend+0x48>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007e4c:	e014      	b.n	8007e78 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	8b5b      	ldrh	r3, [r3, #26]
 8007e58:	f003 0308 	and.w	r3, r3, #8
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d009      	beq.n	8007e74 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	8b5b      	ldrh	r3, [r3, #26]
 8007e64:	f023 0308 	bic.w	r3, r3, #8
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7ff f864 	bl	8006f3c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1e7      	bne.n	8007e4e <tcp_handle_closepend+0xe>
  }
}
 8007e7e:	bf00      	nop
 8007e80:	bf00      	nop
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	20008348 	.word	0x20008348

08007e8c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	4603      	mov	r3, r0
 8007e94:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007e96:	2001      	movs	r0, #1
 8007e98:	f7fd fd36 	bl	8005908 <memp_malloc>
 8007e9c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d126      	bne.n	8007ef2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007ea4:	f7ff ffcc 	bl	8007e40 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007ea8:	f7ff ff9a 	bl	8007de0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007eac:	2001      	movs	r0, #1
 8007eae:	f7fd fd2b 	bl	8005908 <memp_malloc>
 8007eb2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d11b      	bne.n	8007ef2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007eba:	2009      	movs	r0, #9
 8007ebc:	f7ff ff46 	bl	8007d4c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007ec0:	2001      	movs	r0, #1
 8007ec2:	f7fd fd21 	bl	8005908 <memp_malloc>
 8007ec6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d111      	bne.n	8007ef2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007ece:	2008      	movs	r0, #8
 8007ed0:	f7ff ff3c 	bl	8007d4c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007ed4:	2001      	movs	r0, #1
 8007ed6:	f7fd fd17 	bl	8005908 <memp_malloc>
 8007eda:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d107      	bne.n	8007ef2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007ee2:	79fb      	ldrb	r3, [r7, #7]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7ff fee3 	bl	8007cb0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007eea:	2001      	movs	r0, #1
 8007eec:	f7fd fd0c 	bl	8005908 <memp_malloc>
 8007ef0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d03f      	beq.n	8007f78 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007ef8:	229c      	movs	r2, #156	; 0x9c
 8007efa:	2100      	movs	r1, #0
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f006 fdf9 	bl	800eaf4 <memset>
    pcb->prio = prio;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	79fa      	ldrb	r2, [r7, #7]
 8007f06:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007f0e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007f18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	22ff      	movs	r2, #255	; 0xff
 8007f26:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007f2e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2206      	movs	r2, #6
 8007f34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2206      	movs	r2, #6
 8007f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f44:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007f4e:	4b0d      	ldr	r3, [pc, #52]	; (8007f84 <tcp_alloc+0xf8>)
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007f56:	4b0c      	ldr	r3, [pc, #48]	; (8007f88 <tcp_alloc+0xfc>)
 8007f58:	781a      	ldrb	r2, [r3, #0]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007f64:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	4a08      	ldr	r2, [pc, #32]	; (8007f8c <tcp_alloc+0x100>)
 8007f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4a07      	ldr	r2, [pc, #28]	; (8007f90 <tcp_alloc+0x104>)
 8007f74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007f78:	68fb      	ldr	r3, [r7, #12]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	2000833c 	.word	0x2000833c
 8007f88:	20008352 	.word	0x20008352
 8007f8c:	08007c45 	.word	0x08007c45
 8007f90:	006ddd00 	.word	0x006ddd00

08007f94 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d107      	bne.n	8007fb2 <tcp_pcb_purge+0x1e>
 8007fa2:	4b21      	ldr	r3, [pc, #132]	; (8008028 <tcp_pcb_purge+0x94>)
 8007fa4:	f640 0251 	movw	r2, #2129	; 0x851
 8007fa8:	4920      	ldr	r1, [pc, #128]	; (800802c <tcp_pcb_purge+0x98>)
 8007faa:	4821      	ldr	r0, [pc, #132]	; (8008030 <tcp_pcb_purge+0x9c>)
 8007fac:	f006 fdaa 	bl	800eb04 <iprintf>
 8007fb0:	e037      	b.n	8008022 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	7d1b      	ldrb	r3, [r3, #20]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d033      	beq.n	8008022 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007fbe:	2b0a      	cmp	r3, #10
 8007fc0:	d02f      	beq.n	8008022 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d02b      	beq.n	8008022 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d007      	beq.n	8007fe2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7fe fb7c 	bl	80066d4 <pbuf_free>
      pcb->refused_data = NULL;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d002      	beq.n	8007ff0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f986 	bl	80082fc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ff6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7ff fdc7 	bl	8007b90 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008006:	4618      	mov	r0, r3
 8008008:	f7ff fdc2 	bl	8007b90 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	66da      	str	r2, [r3, #108]	; 0x6c
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	08010a10 	.word	0x08010a10
 800802c:	0801105c 	.word	0x0801105c
 8008030:	08010a54 	.word	0x08010a54

08008034 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d106      	bne.n	8008052 <tcp_pcb_remove+0x1e>
 8008044:	4b3e      	ldr	r3, [pc, #248]	; (8008140 <tcp_pcb_remove+0x10c>)
 8008046:	f640 0283 	movw	r2, #2179	; 0x883
 800804a:	493e      	ldr	r1, [pc, #248]	; (8008144 <tcp_pcb_remove+0x110>)
 800804c:	483e      	ldr	r0, [pc, #248]	; (8008148 <tcp_pcb_remove+0x114>)
 800804e:	f006 fd59 	bl	800eb04 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d106      	bne.n	8008066 <tcp_pcb_remove+0x32>
 8008058:	4b39      	ldr	r3, [pc, #228]	; (8008140 <tcp_pcb_remove+0x10c>)
 800805a:	f640 0284 	movw	r2, #2180	; 0x884
 800805e:	493b      	ldr	r1, [pc, #236]	; (800814c <tcp_pcb_remove+0x118>)
 8008060:	4839      	ldr	r0, [pc, #228]	; (8008148 <tcp_pcb_remove+0x114>)
 8008062:	f006 fd4f 	bl	800eb04 <iprintf>

  TCP_RMV(pcblist, pcb);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	429a      	cmp	r2, r3
 800806e:	d105      	bne.n	800807c <tcp_pcb_remove+0x48>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68da      	ldr	r2, [r3, #12]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	e013      	b.n	80080a4 <tcp_pcb_remove+0x70>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	60fb      	str	r3, [r7, #12]
 8008082:	e00c      	b.n	800809e <tcp_pcb_remove+0x6a>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	683a      	ldr	r2, [r7, #0]
 800808a:	429a      	cmp	r2, r3
 800808c:	d104      	bne.n	8008098 <tcp_pcb_remove+0x64>
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	68da      	ldr	r2, [r3, #12]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	60da      	str	r2, [r3, #12]
 8008096:	e005      	b.n	80080a4 <tcp_pcb_remove+0x70>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	60fb      	str	r3, [r7, #12]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1ef      	bne.n	8008084 <tcp_pcb_remove+0x50>
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	2200      	movs	r2, #0
 80080a8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80080aa:	6838      	ldr	r0, [r7, #0]
 80080ac:	f7ff ff72 	bl	8007f94 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	7d1b      	ldrb	r3, [r3, #20]
 80080b4:	2b0a      	cmp	r3, #10
 80080b6:	d013      	beq.n	80080e0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d00f      	beq.n	80080e0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	8b5b      	ldrh	r3, [r3, #26]
 80080c4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d009      	beq.n	80080e0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	8b5b      	ldrh	r3, [r3, #26]
 80080d0:	f043 0302 	orr.w	r3, r3, #2
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80080da:	6838      	ldr	r0, [r7, #0]
 80080dc:	f002 ff6e 	bl	800afbc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	7d1b      	ldrb	r3, [r3, #20]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d020      	beq.n	800812a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d006      	beq.n	80080fe <tcp_pcb_remove+0xca>
 80080f0:	4b13      	ldr	r3, [pc, #76]	; (8008140 <tcp_pcb_remove+0x10c>)
 80080f2:	f640 0293 	movw	r2, #2195	; 0x893
 80080f6:	4916      	ldr	r1, [pc, #88]	; (8008150 <tcp_pcb_remove+0x11c>)
 80080f8:	4813      	ldr	r0, [pc, #76]	; (8008148 <tcp_pcb_remove+0x114>)
 80080fa:	f006 fd03 	bl	800eb04 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008102:	2b00      	cmp	r3, #0
 8008104:	d006      	beq.n	8008114 <tcp_pcb_remove+0xe0>
 8008106:	4b0e      	ldr	r3, [pc, #56]	; (8008140 <tcp_pcb_remove+0x10c>)
 8008108:	f640 0294 	movw	r2, #2196	; 0x894
 800810c:	4911      	ldr	r1, [pc, #68]	; (8008154 <tcp_pcb_remove+0x120>)
 800810e:	480e      	ldr	r0, [pc, #56]	; (8008148 <tcp_pcb_remove+0x114>)
 8008110:	f006 fcf8 	bl	800eb04 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008118:	2b00      	cmp	r3, #0
 800811a:	d006      	beq.n	800812a <tcp_pcb_remove+0xf6>
 800811c:	4b08      	ldr	r3, [pc, #32]	; (8008140 <tcp_pcb_remove+0x10c>)
 800811e:	f640 0296 	movw	r2, #2198	; 0x896
 8008122:	490d      	ldr	r1, [pc, #52]	; (8008158 <tcp_pcb_remove+0x124>)
 8008124:	4808      	ldr	r0, [pc, #32]	; (8008148 <tcp_pcb_remove+0x114>)
 8008126:	f006 fced 	bl	800eb04 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	2200      	movs	r2, #0
 800812e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	2200      	movs	r2, #0
 8008134:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008136:	bf00      	nop
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	08010a10 	.word	0x08010a10
 8008144:	08011078 	.word	0x08011078
 8008148:	08010a54 	.word	0x08010a54
 800814c:	08011094 	.word	0x08011094
 8008150:	080110b4 	.word	0x080110b4
 8008154:	080110cc 	.word	0x080110cc
 8008158:	080110e8 	.word	0x080110e8

0800815c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d106      	bne.n	8008178 <tcp_next_iss+0x1c>
 800816a:	4b0a      	ldr	r3, [pc, #40]	; (8008194 <tcp_next_iss+0x38>)
 800816c:	f640 02af 	movw	r2, #2223	; 0x8af
 8008170:	4909      	ldr	r1, [pc, #36]	; (8008198 <tcp_next_iss+0x3c>)
 8008172:	480a      	ldr	r0, [pc, #40]	; (800819c <tcp_next_iss+0x40>)
 8008174:	f006 fcc6 	bl	800eb04 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008178:	4b09      	ldr	r3, [pc, #36]	; (80081a0 <tcp_next_iss+0x44>)
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	4b09      	ldr	r3, [pc, #36]	; (80081a4 <tcp_next_iss+0x48>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4413      	add	r3, r2
 8008182:	4a07      	ldr	r2, [pc, #28]	; (80081a0 <tcp_next_iss+0x44>)
 8008184:	6013      	str	r3, [r2, #0]
  return iss;
 8008186:	4b06      	ldr	r3, [pc, #24]	; (80081a0 <tcp_next_iss+0x44>)
 8008188:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800818a:	4618      	mov	r0, r3
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	08010a10 	.word	0x08010a10
 8008198:	08011100 	.word	0x08011100
 800819c:	08010a54 	.word	0x08010a54
 80081a0:	2000007c 	.word	0x2000007c
 80081a4:	2000833c 	.word	0x2000833c

080081a8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	4603      	mov	r3, r0
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
 80081b4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d106      	bne.n	80081ca <tcp_eff_send_mss_netif+0x22>
 80081bc:	4b14      	ldr	r3, [pc, #80]	; (8008210 <tcp_eff_send_mss_netif+0x68>)
 80081be:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80081c2:	4914      	ldr	r1, [pc, #80]	; (8008214 <tcp_eff_send_mss_netif+0x6c>)
 80081c4:	4814      	ldr	r0, [pc, #80]	; (8008218 <tcp_eff_send_mss_netif+0x70>)
 80081c6:	f006 fc9d 	bl	800eb04 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d101      	bne.n	80081d4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80081d0:	89fb      	ldrh	r3, [r7, #14]
 80081d2:	e019      	b.n	8008208 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80081d8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80081da:	8afb      	ldrh	r3, [r7, #22]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d012      	beq.n	8008206 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80081e0:	2328      	movs	r3, #40	; 0x28
 80081e2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80081e4:	8afa      	ldrh	r2, [r7, #22]
 80081e6:	8abb      	ldrh	r3, [r7, #20]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d904      	bls.n	80081f6 <tcp_eff_send_mss_netif+0x4e>
 80081ec:	8afa      	ldrh	r2, [r7, #22]
 80081ee:	8abb      	ldrh	r3, [r7, #20]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	e000      	b.n	80081f8 <tcp_eff_send_mss_netif+0x50>
 80081f6:	2300      	movs	r3, #0
 80081f8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80081fa:	8a7a      	ldrh	r2, [r7, #18]
 80081fc:	89fb      	ldrh	r3, [r7, #14]
 80081fe:	4293      	cmp	r3, r2
 8008200:	bf28      	it	cs
 8008202:	4613      	movcs	r3, r2
 8008204:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008206:	89fb      	ldrh	r3, [r7, #14]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3718      	adds	r7, #24
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	08010a10 	.word	0x08010a10
 8008214:	0801111c 	.word	0x0801111c
 8008218:	08010a54 	.word	0x08010a54

0800821c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d119      	bne.n	8008264 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008230:	4b10      	ldr	r3, [pc, #64]	; (8008274 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008232:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008236:	4910      	ldr	r1, [pc, #64]	; (8008278 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008238:	4810      	ldr	r0, [pc, #64]	; (800827c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800823a:	f006 fc63 	bl	800eb04 <iprintf>

  while (pcb != NULL) {
 800823e:	e011      	b.n	8008264 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	429a      	cmp	r2, r3
 800824a:	d108      	bne.n	800825e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f7fe ffc6 	bl	80071e4 <tcp_abort>
      pcb = next;
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	60fb      	str	r3, [r7, #12]
 800825c:	e002      	b.n	8008264 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1ea      	bne.n	8008240 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800826a:	bf00      	nop
 800826c:	bf00      	nop
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	08010a10 	.word	0x08010a10
 8008278:	08011144 	.word	0x08011144
 800827c:	08010a54 	.word	0x08010a54

08008280 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d02a      	beq.n	80082e6 <tcp_netif_ip_addr_changed+0x66>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d026      	beq.n	80082e6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008298:	4b15      	ldr	r3, [pc, #84]	; (80082f0 <tcp_netif_ip_addr_changed+0x70>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4619      	mov	r1, r3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7ff ffbc 	bl	800821c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80082a4:	4b13      	ldr	r3, [pc, #76]	; (80082f4 <tcp_netif_ip_addr_changed+0x74>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4619      	mov	r1, r3
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7ff ffb6 	bl	800821c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d017      	beq.n	80082e6 <tcp_netif_ip_addr_changed+0x66>
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d013      	beq.n	80082e6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80082be:	4b0e      	ldr	r3, [pc, #56]	; (80082f8 <tcp_netif_ip_addr_changed+0x78>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	e00c      	b.n	80082e0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d103      	bne.n	80082da <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	60fb      	str	r3, [r7, #12]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1ef      	bne.n	80082c6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80082e6:	bf00      	nop
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	20008348 	.word	0x20008348
 80082f4:	20008340 	.word	0x20008340
 80082f8:	20008344 	.word	0x20008344

080082fc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008308:	2b00      	cmp	r3, #0
 800830a:	d007      	beq.n	800831c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008310:	4618      	mov	r0, r3
 8008312:	f7ff fc3d 	bl	8007b90 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800831c:	bf00      	nop
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008324:	b590      	push	{r4, r7, lr}
 8008326:	b08d      	sub	sp, #52	; 0x34
 8008328:	af04      	add	r7, sp, #16
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d105      	bne.n	8008340 <tcp_input+0x1c>
 8008334:	4b9b      	ldr	r3, [pc, #620]	; (80085a4 <tcp_input+0x280>)
 8008336:	2283      	movs	r2, #131	; 0x83
 8008338:	499b      	ldr	r1, [pc, #620]	; (80085a8 <tcp_input+0x284>)
 800833a:	489c      	ldr	r0, [pc, #624]	; (80085ac <tcp_input+0x288>)
 800833c:	f006 fbe2 	bl	800eb04 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	4a9a      	ldr	r2, [pc, #616]	; (80085b0 <tcp_input+0x28c>)
 8008346:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	895b      	ldrh	r3, [r3, #10]
 800834c:	2b13      	cmp	r3, #19
 800834e:	f240 83d1 	bls.w	8008af4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008352:	4b98      	ldr	r3, [pc, #608]	; (80085b4 <tcp_input+0x290>)
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	4a97      	ldr	r2, [pc, #604]	; (80085b4 <tcp_input+0x290>)
 8008358:	6812      	ldr	r2, [r2, #0]
 800835a:	4611      	mov	r1, r2
 800835c:	4618      	mov	r0, r3
 800835e:	f005 fc17 	bl	800db90 <ip4_addr_isbroadcast_u32>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	f040 83c7 	bne.w	8008af8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800836a:	4b92      	ldr	r3, [pc, #584]	; (80085b4 <tcp_input+0x290>)
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008372:	2be0      	cmp	r3, #224	; 0xe0
 8008374:	f000 83c0 	beq.w	8008af8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008378:	4b8d      	ldr	r3, [pc, #564]	; (80085b0 <tcp_input+0x28c>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	899b      	ldrh	r3, [r3, #12]
 800837e:	b29b      	uxth	r3, r3
 8008380:	4618      	mov	r0, r3
 8008382:	f7fc fe49 	bl	8005018 <lwip_htons>
 8008386:	4603      	mov	r3, r0
 8008388:	0b1b      	lsrs	r3, r3, #12
 800838a:	b29b      	uxth	r3, r3
 800838c:	b2db      	uxtb	r3, r3
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008392:	7cbb      	ldrb	r3, [r7, #18]
 8008394:	2b13      	cmp	r3, #19
 8008396:	f240 83b1 	bls.w	8008afc <tcp_input+0x7d8>
 800839a:	7cbb      	ldrb	r3, [r7, #18]
 800839c:	b29a      	uxth	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	891b      	ldrh	r3, [r3, #8]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	f200 83aa 	bhi.w	8008afc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80083a8:	7cbb      	ldrb	r3, [r7, #18]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	3b14      	subs	r3, #20
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	4b81      	ldr	r3, [pc, #516]	; (80085b8 <tcp_input+0x294>)
 80083b2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80083b4:	4b81      	ldr	r3, [pc, #516]	; (80085bc <tcp_input+0x298>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	895a      	ldrh	r2, [r3, #10]
 80083be:	7cbb      	ldrb	r3, [r7, #18]
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d309      	bcc.n	80083da <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80083c6:	4b7c      	ldr	r3, [pc, #496]	; (80085b8 <tcp_input+0x294>)
 80083c8:	881a      	ldrh	r2, [r3, #0]
 80083ca:	4b7d      	ldr	r3, [pc, #500]	; (80085c0 <tcp_input+0x29c>)
 80083cc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80083ce:	7cbb      	ldrb	r3, [r7, #18]
 80083d0:	4619      	mov	r1, r3
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f7fe f8f8 	bl	80065c8 <pbuf_remove_header>
 80083d8:	e04e      	b.n	8008478 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d105      	bne.n	80083ee <tcp_input+0xca>
 80083e2:	4b70      	ldr	r3, [pc, #448]	; (80085a4 <tcp_input+0x280>)
 80083e4:	22c2      	movs	r2, #194	; 0xc2
 80083e6:	4977      	ldr	r1, [pc, #476]	; (80085c4 <tcp_input+0x2a0>)
 80083e8:	4870      	ldr	r0, [pc, #448]	; (80085ac <tcp_input+0x288>)
 80083ea:	f006 fb8b 	bl	800eb04 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80083ee:	2114      	movs	r1, #20
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f7fe f8e9 	bl	80065c8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	895a      	ldrh	r2, [r3, #10]
 80083fa:	4b71      	ldr	r3, [pc, #452]	; (80085c0 <tcp_input+0x29c>)
 80083fc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80083fe:	4b6e      	ldr	r3, [pc, #440]	; (80085b8 <tcp_input+0x294>)
 8008400:	881a      	ldrh	r2, [r3, #0]
 8008402:	4b6f      	ldr	r3, [pc, #444]	; (80085c0 <tcp_input+0x29c>)
 8008404:	881b      	ldrh	r3, [r3, #0]
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800840a:	4b6d      	ldr	r3, [pc, #436]	; (80085c0 <tcp_input+0x29c>)
 800840c:	881b      	ldrh	r3, [r3, #0]
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f7fe f8d9 	bl	80065c8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	895b      	ldrh	r3, [r3, #10]
 800841c:	8a3a      	ldrh	r2, [r7, #16]
 800841e:	429a      	cmp	r2, r3
 8008420:	f200 836e 	bhi.w	8008b00 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	4a64      	ldr	r2, [pc, #400]	; (80085bc <tcp_input+0x298>)
 800842c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	8a3a      	ldrh	r2, [r7, #16]
 8008434:	4611      	mov	r1, r2
 8008436:	4618      	mov	r0, r3
 8008438:	f7fe f8c6 	bl	80065c8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	891a      	ldrh	r2, [r3, #8]
 8008440:	8a3b      	ldrh	r3, [r7, #16]
 8008442:	1ad3      	subs	r3, r2, r3
 8008444:	b29a      	uxth	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	895b      	ldrh	r3, [r3, #10]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d005      	beq.n	800845e <tcp_input+0x13a>
 8008452:	4b54      	ldr	r3, [pc, #336]	; (80085a4 <tcp_input+0x280>)
 8008454:	22df      	movs	r2, #223	; 0xdf
 8008456:	495c      	ldr	r1, [pc, #368]	; (80085c8 <tcp_input+0x2a4>)
 8008458:	4854      	ldr	r0, [pc, #336]	; (80085ac <tcp_input+0x288>)
 800845a:	f006 fb53 	bl	800eb04 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	891a      	ldrh	r2, [r3, #8]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	891b      	ldrh	r3, [r3, #8]
 8008468:	429a      	cmp	r2, r3
 800846a:	d005      	beq.n	8008478 <tcp_input+0x154>
 800846c:	4b4d      	ldr	r3, [pc, #308]	; (80085a4 <tcp_input+0x280>)
 800846e:	22e0      	movs	r2, #224	; 0xe0
 8008470:	4956      	ldr	r1, [pc, #344]	; (80085cc <tcp_input+0x2a8>)
 8008472:	484e      	ldr	r0, [pc, #312]	; (80085ac <tcp_input+0x288>)
 8008474:	f006 fb46 	bl	800eb04 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008478:	4b4d      	ldr	r3, [pc, #308]	; (80085b0 <tcp_input+0x28c>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	b29b      	uxth	r3, r3
 8008480:	4a4b      	ldr	r2, [pc, #300]	; (80085b0 <tcp_input+0x28c>)
 8008482:	6814      	ldr	r4, [r2, #0]
 8008484:	4618      	mov	r0, r3
 8008486:	f7fc fdc7 	bl	8005018 <lwip_htons>
 800848a:	4603      	mov	r3, r0
 800848c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800848e:	4b48      	ldr	r3, [pc, #288]	; (80085b0 <tcp_input+0x28c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	885b      	ldrh	r3, [r3, #2]
 8008494:	b29b      	uxth	r3, r3
 8008496:	4a46      	ldr	r2, [pc, #280]	; (80085b0 <tcp_input+0x28c>)
 8008498:	6814      	ldr	r4, [r2, #0]
 800849a:	4618      	mov	r0, r3
 800849c:	f7fc fdbc 	bl	8005018 <lwip_htons>
 80084a0:	4603      	mov	r3, r0
 80084a2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80084a4:	4b42      	ldr	r3, [pc, #264]	; (80085b0 <tcp_input+0x28c>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	4a41      	ldr	r2, [pc, #260]	; (80085b0 <tcp_input+0x28c>)
 80084ac:	6814      	ldr	r4, [r2, #0]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fc fdc7 	bl	8005042 <lwip_htonl>
 80084b4:	4603      	mov	r3, r0
 80084b6:	6063      	str	r3, [r4, #4]
 80084b8:	6863      	ldr	r3, [r4, #4]
 80084ba:	4a45      	ldr	r2, [pc, #276]	; (80085d0 <tcp_input+0x2ac>)
 80084bc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80084be:	4b3c      	ldr	r3, [pc, #240]	; (80085b0 <tcp_input+0x28c>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	4a3a      	ldr	r2, [pc, #232]	; (80085b0 <tcp_input+0x28c>)
 80084c6:	6814      	ldr	r4, [r2, #0]
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7fc fdba 	bl	8005042 <lwip_htonl>
 80084ce:	4603      	mov	r3, r0
 80084d0:	60a3      	str	r3, [r4, #8]
 80084d2:	68a3      	ldr	r3, [r4, #8]
 80084d4:	4a3f      	ldr	r2, [pc, #252]	; (80085d4 <tcp_input+0x2b0>)
 80084d6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80084d8:	4b35      	ldr	r3, [pc, #212]	; (80085b0 <tcp_input+0x28c>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	89db      	ldrh	r3, [r3, #14]
 80084de:	b29b      	uxth	r3, r3
 80084e0:	4a33      	ldr	r2, [pc, #204]	; (80085b0 <tcp_input+0x28c>)
 80084e2:	6814      	ldr	r4, [r2, #0]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fc fd97 	bl	8005018 <lwip_htons>
 80084ea:	4603      	mov	r3, r0
 80084ec:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80084ee:	4b30      	ldr	r3, [pc, #192]	; (80085b0 <tcp_input+0x28c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	899b      	ldrh	r3, [r3, #12]
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fc fd8e 	bl	8005018 <lwip_htons>
 80084fc:	4603      	mov	r3, r0
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008504:	b2da      	uxtb	r2, r3
 8008506:	4b34      	ldr	r3, [pc, #208]	; (80085d8 <tcp_input+0x2b4>)
 8008508:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	891a      	ldrh	r2, [r3, #8]
 800850e:	4b33      	ldr	r3, [pc, #204]	; (80085dc <tcp_input+0x2b8>)
 8008510:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008512:	4b31      	ldr	r3, [pc, #196]	; (80085d8 <tcp_input+0x2b4>)
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	f003 0303 	and.w	r3, r3, #3
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00c      	beq.n	8008538 <tcp_input+0x214>
    tcplen++;
 800851e:	4b2f      	ldr	r3, [pc, #188]	; (80085dc <tcp_input+0x2b8>)
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	3301      	adds	r3, #1
 8008524:	b29a      	uxth	r2, r3
 8008526:	4b2d      	ldr	r3, [pc, #180]	; (80085dc <tcp_input+0x2b8>)
 8008528:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	891a      	ldrh	r2, [r3, #8]
 800852e:	4b2b      	ldr	r3, [pc, #172]	; (80085dc <tcp_input+0x2b8>)
 8008530:	881b      	ldrh	r3, [r3, #0]
 8008532:	429a      	cmp	r2, r3
 8008534:	f200 82e6 	bhi.w	8008b04 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008538:	2300      	movs	r3, #0
 800853a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800853c:	4b28      	ldr	r3, [pc, #160]	; (80085e0 <tcp_input+0x2bc>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	61fb      	str	r3, [r7, #28]
 8008542:	e09d      	b.n	8008680 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	7d1b      	ldrb	r3, [r3, #20]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d105      	bne.n	8008558 <tcp_input+0x234>
 800854c:	4b15      	ldr	r3, [pc, #84]	; (80085a4 <tcp_input+0x280>)
 800854e:	22fb      	movs	r2, #251	; 0xfb
 8008550:	4924      	ldr	r1, [pc, #144]	; (80085e4 <tcp_input+0x2c0>)
 8008552:	4816      	ldr	r0, [pc, #88]	; (80085ac <tcp_input+0x288>)
 8008554:	f006 fad6 	bl	800eb04 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	7d1b      	ldrb	r3, [r3, #20]
 800855c:	2b0a      	cmp	r3, #10
 800855e:	d105      	bne.n	800856c <tcp_input+0x248>
 8008560:	4b10      	ldr	r3, [pc, #64]	; (80085a4 <tcp_input+0x280>)
 8008562:	22fc      	movs	r2, #252	; 0xfc
 8008564:	4920      	ldr	r1, [pc, #128]	; (80085e8 <tcp_input+0x2c4>)
 8008566:	4811      	ldr	r0, [pc, #68]	; (80085ac <tcp_input+0x288>)
 8008568:	f006 facc 	bl	800eb04 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	7d1b      	ldrb	r3, [r3, #20]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d105      	bne.n	8008580 <tcp_input+0x25c>
 8008574:	4b0b      	ldr	r3, [pc, #44]	; (80085a4 <tcp_input+0x280>)
 8008576:	22fd      	movs	r2, #253	; 0xfd
 8008578:	491c      	ldr	r1, [pc, #112]	; (80085ec <tcp_input+0x2c8>)
 800857a:	480c      	ldr	r0, [pc, #48]	; (80085ac <tcp_input+0x288>)
 800857c:	f006 fac2 	bl	800eb04 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	7a1b      	ldrb	r3, [r3, #8]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d033      	beq.n	80085f0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	7a1a      	ldrb	r2, [r3, #8]
 800858c:	4b09      	ldr	r3, [pc, #36]	; (80085b4 <tcp_input+0x290>)
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008594:	3301      	adds	r3, #1
 8008596:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008598:	429a      	cmp	r2, r3
 800859a:	d029      	beq.n	80085f0 <tcp_input+0x2cc>
      prev = pcb;
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	61bb      	str	r3, [r7, #24]
      continue;
 80085a0:	e06b      	b.n	800867a <tcp_input+0x356>
 80085a2:	bf00      	nop
 80085a4:	08011178 	.word	0x08011178
 80085a8:	080111ac 	.word	0x080111ac
 80085ac:	080111c4 	.word	0x080111c4
 80085b0:	20008364 	.word	0x20008364
 80085b4:	20004dcc 	.word	0x20004dcc
 80085b8:	20008368 	.word	0x20008368
 80085bc:	2000836c 	.word	0x2000836c
 80085c0:	2000836a 	.word	0x2000836a
 80085c4:	080111ec 	.word	0x080111ec
 80085c8:	080111fc 	.word	0x080111fc
 80085cc:	08011208 	.word	0x08011208
 80085d0:	20008374 	.word	0x20008374
 80085d4:	20008378 	.word	0x20008378
 80085d8:	20008380 	.word	0x20008380
 80085dc:	2000837e 	.word	0x2000837e
 80085e0:	20008348 	.word	0x20008348
 80085e4:	08011228 	.word	0x08011228
 80085e8:	08011250 	.word	0x08011250
 80085ec:	0801127c 	.word	0x0801127c
    }

    if (pcb->remote_port == tcphdr->src &&
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	8b1a      	ldrh	r2, [r3, #24]
 80085f4:	4b72      	ldr	r3, [pc, #456]	; (80087c0 <tcp_input+0x49c>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	881b      	ldrh	r3, [r3, #0]
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d13a      	bne.n	8008676 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	8ada      	ldrh	r2, [r3, #22]
 8008604:	4b6e      	ldr	r3, [pc, #440]	; (80087c0 <tcp_input+0x49c>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	885b      	ldrh	r3, [r3, #2]
 800860a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800860c:	429a      	cmp	r2, r3
 800860e:	d132      	bne.n	8008676 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	4b6b      	ldr	r3, [pc, #428]	; (80087c4 <tcp_input+0x4a0>)
 8008616:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008618:	429a      	cmp	r2, r3
 800861a:	d12c      	bne.n	8008676 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	4b68      	ldr	r3, [pc, #416]	; (80087c4 <tcp_input+0x4a0>)
 8008622:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008624:	429a      	cmp	r2, r3
 8008626:	d126      	bne.n	8008676 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	69fa      	ldr	r2, [r7, #28]
 800862e:	429a      	cmp	r2, r3
 8008630:	d106      	bne.n	8008640 <tcp_input+0x31c>
 8008632:	4b65      	ldr	r3, [pc, #404]	; (80087c8 <tcp_input+0x4a4>)
 8008634:	f240 120d 	movw	r2, #269	; 0x10d
 8008638:	4964      	ldr	r1, [pc, #400]	; (80087cc <tcp_input+0x4a8>)
 800863a:	4865      	ldr	r0, [pc, #404]	; (80087d0 <tcp_input+0x4ac>)
 800863c:	f006 fa62 	bl	800eb04 <iprintf>
      if (prev != NULL) {
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00a      	beq.n	800865c <tcp_input+0x338>
        prev->next = pcb->next;
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	68da      	ldr	r2, [r3, #12]
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800864e:	4b61      	ldr	r3, [pc, #388]	; (80087d4 <tcp_input+0x4b0>)
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008656:	4a5f      	ldr	r2, [pc, #380]	; (80087d4 <tcp_input+0x4b0>)
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	69fa      	ldr	r2, [r7, #28]
 8008662:	429a      	cmp	r2, r3
 8008664:	d111      	bne.n	800868a <tcp_input+0x366>
 8008666:	4b58      	ldr	r3, [pc, #352]	; (80087c8 <tcp_input+0x4a4>)
 8008668:	f240 1215 	movw	r2, #277	; 0x115
 800866c:	495a      	ldr	r1, [pc, #360]	; (80087d8 <tcp_input+0x4b4>)
 800866e:	4858      	ldr	r0, [pc, #352]	; (80087d0 <tcp_input+0x4ac>)
 8008670:	f006 fa48 	bl	800eb04 <iprintf>
      break;
 8008674:	e009      	b.n	800868a <tcp_input+0x366>
    }
    prev = pcb;
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	61fb      	str	r3, [r7, #28]
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	2b00      	cmp	r3, #0
 8008684:	f47f af5e 	bne.w	8008544 <tcp_input+0x220>
 8008688:	e000      	b.n	800868c <tcp_input+0x368>
      break;
 800868a:	bf00      	nop
  }

  if (pcb == NULL) {
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	2b00      	cmp	r3, #0
 8008690:	f040 80aa 	bne.w	80087e8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008694:	4b51      	ldr	r3, [pc, #324]	; (80087dc <tcp_input+0x4b8>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	61fb      	str	r3, [r7, #28]
 800869a:	e03f      	b.n	800871c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	7d1b      	ldrb	r3, [r3, #20]
 80086a0:	2b0a      	cmp	r3, #10
 80086a2:	d006      	beq.n	80086b2 <tcp_input+0x38e>
 80086a4:	4b48      	ldr	r3, [pc, #288]	; (80087c8 <tcp_input+0x4a4>)
 80086a6:	f240 121f 	movw	r2, #287	; 0x11f
 80086aa:	494d      	ldr	r1, [pc, #308]	; (80087e0 <tcp_input+0x4bc>)
 80086ac:	4848      	ldr	r0, [pc, #288]	; (80087d0 <tcp_input+0x4ac>)
 80086ae:	f006 fa29 	bl	800eb04 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	7a1b      	ldrb	r3, [r3, #8]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d009      	beq.n	80086ce <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	7a1a      	ldrb	r2, [r3, #8]
 80086be:	4b41      	ldr	r3, [pc, #260]	; (80087c4 <tcp_input+0x4a0>)
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80086c6:	3301      	adds	r3, #1
 80086c8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d122      	bne.n	8008714 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	8b1a      	ldrh	r2, [r3, #24]
 80086d2:	4b3b      	ldr	r3, [pc, #236]	; (80087c0 <tcp_input+0x49c>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	881b      	ldrh	r3, [r3, #0]
 80086d8:	b29b      	uxth	r3, r3
 80086da:	429a      	cmp	r2, r3
 80086dc:	d11b      	bne.n	8008716 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	8ada      	ldrh	r2, [r3, #22]
 80086e2:	4b37      	ldr	r3, [pc, #220]	; (80087c0 <tcp_input+0x49c>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	885b      	ldrh	r3, [r3, #2]
 80086e8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d113      	bne.n	8008716 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	685a      	ldr	r2, [r3, #4]
 80086f2:	4b34      	ldr	r3, [pc, #208]	; (80087c4 <tcp_input+0x4a0>)
 80086f4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d10d      	bne.n	8008716 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	4b31      	ldr	r3, [pc, #196]	; (80087c4 <tcp_input+0x4a0>)
 8008700:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008702:	429a      	cmp	r2, r3
 8008704:	d107      	bne.n	8008716 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008706:	69f8      	ldr	r0, [r7, #28]
 8008708:	f000 fb56 	bl	8008db8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f7fd ffe1 	bl	80066d4 <pbuf_free>
        return;
 8008712:	e1fd      	b.n	8008b10 <tcp_input+0x7ec>
        continue;
 8008714:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	61fb      	str	r3, [r7, #28]
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1bc      	bne.n	800869c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008722:	2300      	movs	r3, #0
 8008724:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008726:	4b2f      	ldr	r3, [pc, #188]	; (80087e4 <tcp_input+0x4c0>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	617b      	str	r3, [r7, #20]
 800872c:	e02a      	b.n	8008784 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	7a1b      	ldrb	r3, [r3, #8]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00c      	beq.n	8008750 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	7a1a      	ldrb	r2, [r3, #8]
 800873a:	4b22      	ldr	r3, [pc, #136]	; (80087c4 <tcp_input+0x4a0>)
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008742:	3301      	adds	r3, #1
 8008744:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008746:	429a      	cmp	r2, r3
 8008748:	d002      	beq.n	8008750 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	61bb      	str	r3, [r7, #24]
        continue;
 800874e:	e016      	b.n	800877e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	8ada      	ldrh	r2, [r3, #22]
 8008754:	4b1a      	ldr	r3, [pc, #104]	; (80087c0 <tcp_input+0x49c>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	885b      	ldrh	r3, [r3, #2]
 800875a:	b29b      	uxth	r3, r3
 800875c:	429a      	cmp	r2, r3
 800875e:	d10c      	bne.n	800877a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	4b17      	ldr	r3, [pc, #92]	; (80087c4 <tcp_input+0x4a0>)
 8008766:	695b      	ldr	r3, [r3, #20]
 8008768:	429a      	cmp	r2, r3
 800876a:	d00f      	beq.n	800878c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00d      	beq.n	800878e <tcp_input+0x46a>
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d009      	beq.n	800878e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	617b      	str	r3, [r7, #20]
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1d1      	bne.n	800872e <tcp_input+0x40a>
 800878a:	e000      	b.n	800878e <tcp_input+0x46a>
            break;
 800878c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d029      	beq.n	80087e8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00a      	beq.n	80087b0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	68da      	ldr	r2, [r3, #12]
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80087a2:	4b10      	ldr	r3, [pc, #64]	; (80087e4 <tcp_input+0x4c0>)
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80087aa:	4a0e      	ldr	r2, [pc, #56]	; (80087e4 <tcp_input+0x4c0>)
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80087b0:	6978      	ldr	r0, [r7, #20]
 80087b2:	f000 fa03 	bl	8008bbc <tcp_listen_input>
      }
      pbuf_free(p);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7fd ff8c 	bl	80066d4 <pbuf_free>
      return;
 80087bc:	e1a8      	b.n	8008b10 <tcp_input+0x7ec>
 80087be:	bf00      	nop
 80087c0:	20008364 	.word	0x20008364
 80087c4:	20004dcc 	.word	0x20004dcc
 80087c8:	08011178 	.word	0x08011178
 80087cc:	080112a4 	.word	0x080112a4
 80087d0:	080111c4 	.word	0x080111c4
 80087d4:	20008348 	.word	0x20008348
 80087d8:	080112d0 	.word	0x080112d0
 80087dc:	2000834c 	.word	0x2000834c
 80087e0:	080112fc 	.word	0x080112fc
 80087e4:	20008344 	.word	0x20008344
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f000 8158 	beq.w	8008aa0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80087f0:	4b95      	ldr	r3, [pc, #596]	; (8008a48 <tcp_input+0x724>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	891a      	ldrh	r2, [r3, #8]
 80087fa:	4b93      	ldr	r3, [pc, #588]	; (8008a48 <tcp_input+0x724>)
 80087fc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80087fe:	4a92      	ldr	r2, [pc, #584]	; (8008a48 <tcp_input+0x724>)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008804:	4b91      	ldr	r3, [pc, #580]	; (8008a4c <tcp_input+0x728>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a8f      	ldr	r2, [pc, #572]	; (8008a48 <tcp_input+0x724>)
 800880a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800880c:	4b90      	ldr	r3, [pc, #576]	; (8008a50 <tcp_input+0x72c>)
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008812:	4b90      	ldr	r3, [pc, #576]	; (8008a54 <tcp_input+0x730>)
 8008814:	2200      	movs	r2, #0
 8008816:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008818:	4b8f      	ldr	r3, [pc, #572]	; (8008a58 <tcp_input+0x734>)
 800881a:	2200      	movs	r2, #0
 800881c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800881e:	4b8f      	ldr	r3, [pc, #572]	; (8008a5c <tcp_input+0x738>)
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	f003 0308 	and.w	r3, r3, #8
 8008826:	2b00      	cmp	r3, #0
 8008828:	d006      	beq.n	8008838 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	7b5b      	ldrb	r3, [r3, #13]
 800882e:	f043 0301 	orr.w	r3, r3, #1
 8008832:	b2da      	uxtb	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800883c:	2b00      	cmp	r3, #0
 800883e:	d017      	beq.n	8008870 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008840:	69f8      	ldr	r0, [r7, #28]
 8008842:	f7ff f929 	bl	8007a98 <tcp_process_refused_data>
 8008846:	4603      	mov	r3, r0
 8008848:	f113 0f0d 	cmn.w	r3, #13
 800884c:	d007      	beq.n	800885e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00c      	beq.n	8008870 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008856:	4b82      	ldr	r3, [pc, #520]	; (8008a60 <tcp_input+0x73c>)
 8008858:	881b      	ldrh	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d008      	beq.n	8008870 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008862:	2b00      	cmp	r3, #0
 8008864:	f040 80e3 	bne.w	8008a2e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008868:	69f8      	ldr	r0, [r7, #28]
 800886a:	f003 f9ad 	bl	800bbc8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800886e:	e0de      	b.n	8008a2e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008870:	4a7c      	ldr	r2, [pc, #496]	; (8008a64 <tcp_input+0x740>)
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008876:	69f8      	ldr	r0, [r7, #28]
 8008878:	f000 fb18 	bl	8008eac <tcp_process>
 800887c:	4603      	mov	r3, r0
 800887e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008880:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008884:	f113 0f0d 	cmn.w	r3, #13
 8008888:	f000 80d3 	beq.w	8008a32 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800888c:	4b71      	ldr	r3, [pc, #452]	; (8008a54 <tcp_input+0x730>)
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	f003 0308 	and.w	r3, r3, #8
 8008894:	2b00      	cmp	r3, #0
 8008896:	d015      	beq.n	80088c4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d008      	beq.n	80088b4 <tcp_input+0x590>
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088a8:	69fa      	ldr	r2, [r7, #28]
 80088aa:	6912      	ldr	r2, [r2, #16]
 80088ac:	f06f 010d 	mvn.w	r1, #13
 80088b0:	4610      	mov	r0, r2
 80088b2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80088b4:	69f9      	ldr	r1, [r7, #28]
 80088b6:	486c      	ldr	r0, [pc, #432]	; (8008a68 <tcp_input+0x744>)
 80088b8:	f7ff fbbc 	bl	8008034 <tcp_pcb_remove>
        tcp_free(pcb);
 80088bc:	69f8      	ldr	r0, [r7, #28]
 80088be:	f7fe f9a9 	bl	8006c14 <tcp_free>
 80088c2:	e0da      	b.n	8008a7a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80088c8:	4b63      	ldr	r3, [pc, #396]	; (8008a58 <tcp_input+0x734>)
 80088ca:	881b      	ldrh	r3, [r3, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d01d      	beq.n	800890c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80088d0:	4b61      	ldr	r3, [pc, #388]	; (8008a58 <tcp_input+0x734>)
 80088d2:	881b      	ldrh	r3, [r3, #0]
 80088d4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00a      	beq.n	80088f6 <tcp_input+0x5d2>
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088e6:	69fa      	ldr	r2, [r7, #28]
 80088e8:	6910      	ldr	r0, [r2, #16]
 80088ea:	89fa      	ldrh	r2, [r7, #14]
 80088ec:	69f9      	ldr	r1, [r7, #28]
 80088ee:	4798      	blx	r3
 80088f0:	4603      	mov	r3, r0
 80088f2:	74fb      	strb	r3, [r7, #19]
 80088f4:	e001      	b.n	80088fa <tcp_input+0x5d6>
 80088f6:	2300      	movs	r3, #0
 80088f8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80088fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80088fe:	f113 0f0d 	cmn.w	r3, #13
 8008902:	f000 8098 	beq.w	8008a36 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008906:	4b54      	ldr	r3, [pc, #336]	; (8008a58 <tcp_input+0x734>)
 8008908:	2200      	movs	r2, #0
 800890a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800890c:	69f8      	ldr	r0, [r7, #28]
 800890e:	f000 f915 	bl	8008b3c <tcp_input_delayed_close>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	f040 8090 	bne.w	8008a3a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800891a:	4b4d      	ldr	r3, [pc, #308]	; (8008a50 <tcp_input+0x72c>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d041      	beq.n	80089a6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008926:	2b00      	cmp	r3, #0
 8008928:	d006      	beq.n	8008938 <tcp_input+0x614>
 800892a:	4b50      	ldr	r3, [pc, #320]	; (8008a6c <tcp_input+0x748>)
 800892c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008930:	494f      	ldr	r1, [pc, #316]	; (8008a70 <tcp_input+0x74c>)
 8008932:	4850      	ldr	r0, [pc, #320]	; (8008a74 <tcp_input+0x750>)
 8008934:	f006 f8e6 	bl	800eb04 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	8b5b      	ldrh	r3, [r3, #26]
 800893c:	f003 0310 	and.w	r3, r3, #16
 8008940:	2b00      	cmp	r3, #0
 8008942:	d008      	beq.n	8008956 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008944:	4b42      	ldr	r3, [pc, #264]	; (8008a50 <tcp_input+0x72c>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4618      	mov	r0, r3
 800894a:	f7fd fec3 	bl	80066d4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800894e:	69f8      	ldr	r0, [r7, #28]
 8008950:	f7fe fc48 	bl	80071e4 <tcp_abort>
            goto aborted;
 8008954:	e091      	b.n	8008a7a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00c      	beq.n	800897a <tcp_input+0x656>
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	6918      	ldr	r0, [r3, #16]
 800896a:	4b39      	ldr	r3, [pc, #228]	; (8008a50 <tcp_input+0x72c>)
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	2300      	movs	r3, #0
 8008970:	69f9      	ldr	r1, [r7, #28]
 8008972:	47a0      	blx	r4
 8008974:	4603      	mov	r3, r0
 8008976:	74fb      	strb	r3, [r7, #19]
 8008978:	e008      	b.n	800898c <tcp_input+0x668>
 800897a:	4b35      	ldr	r3, [pc, #212]	; (8008a50 <tcp_input+0x72c>)
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	2300      	movs	r3, #0
 8008980:	69f9      	ldr	r1, [r7, #28]
 8008982:	2000      	movs	r0, #0
 8008984:	f7ff f95e 	bl	8007c44 <tcp_recv_null>
 8008988:	4603      	mov	r3, r0
 800898a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800898c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008990:	f113 0f0d 	cmn.w	r3, #13
 8008994:	d053      	beq.n	8008a3e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008996:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d003      	beq.n	80089a6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800899e:	4b2c      	ldr	r3, [pc, #176]	; (8008a50 <tcp_input+0x72c>)
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80089a6:	4b2b      	ldr	r3, [pc, #172]	; (8008a54 <tcp_input+0x730>)
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	f003 0320 	and.w	r3, r3, #32
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d030      	beq.n	8008a14 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d009      	beq.n	80089ce <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089be:	7b5a      	ldrb	r2, [r3, #13]
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089c4:	f042 0220 	orr.w	r2, r2, #32
 80089c8:	b2d2      	uxtb	r2, r2
 80089ca:	735a      	strb	r2, [r3, #13]
 80089cc:	e022      	b.n	8008a14 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089d2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80089d6:	d005      	beq.n	80089e4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089dc:	3301      	adds	r3, #1
 80089de:	b29a      	uxth	r2, r3
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00b      	beq.n	8008a06 <tcp_input+0x6e2>
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	6918      	ldr	r0, [r3, #16]
 80089f8:	2300      	movs	r3, #0
 80089fa:	2200      	movs	r2, #0
 80089fc:	69f9      	ldr	r1, [r7, #28]
 80089fe:	47a0      	blx	r4
 8008a00:	4603      	mov	r3, r0
 8008a02:	74fb      	strb	r3, [r7, #19]
 8008a04:	e001      	b.n	8008a0a <tcp_input+0x6e6>
 8008a06:	2300      	movs	r3, #0
 8008a08:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008a0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a0e:	f113 0f0d 	cmn.w	r3, #13
 8008a12:	d016      	beq.n	8008a42 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008a14:	4b13      	ldr	r3, [pc, #76]	; (8008a64 <tcp_input+0x740>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008a1a:	69f8      	ldr	r0, [r7, #28]
 8008a1c:	f000 f88e 	bl	8008b3c <tcp_input_delayed_close>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d128      	bne.n	8008a78 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008a26:	69f8      	ldr	r0, [r7, #28]
 8008a28:	f002 fac8 	bl	800afbc <tcp_output>
 8008a2c:	e025      	b.n	8008a7a <tcp_input+0x756>
        goto aborted;
 8008a2e:	bf00      	nop
 8008a30:	e023      	b.n	8008a7a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008a32:	bf00      	nop
 8008a34:	e021      	b.n	8008a7a <tcp_input+0x756>
              goto aborted;
 8008a36:	bf00      	nop
 8008a38:	e01f      	b.n	8008a7a <tcp_input+0x756>
          goto aborted;
 8008a3a:	bf00      	nop
 8008a3c:	e01d      	b.n	8008a7a <tcp_input+0x756>
            goto aborted;
 8008a3e:	bf00      	nop
 8008a40:	e01b      	b.n	8008a7a <tcp_input+0x756>
              goto aborted;
 8008a42:	bf00      	nop
 8008a44:	e019      	b.n	8008a7a <tcp_input+0x756>
 8008a46:	bf00      	nop
 8008a48:	20008354 	.word	0x20008354
 8008a4c:	20008364 	.word	0x20008364
 8008a50:	20008384 	.word	0x20008384
 8008a54:	20008381 	.word	0x20008381
 8008a58:	2000837c 	.word	0x2000837c
 8008a5c:	20008380 	.word	0x20008380
 8008a60:	2000837e 	.word	0x2000837e
 8008a64:	20008388 	.word	0x20008388
 8008a68:	20008348 	.word	0x20008348
 8008a6c:	08011178 	.word	0x08011178
 8008a70:	0801132c 	.word	0x0801132c
 8008a74:	080111c4 	.word	0x080111c4
          goto aborted;
 8008a78:	bf00      	nop
    tcp_input_pcb = NULL;
 8008a7a:	4b27      	ldr	r3, [pc, #156]	; (8008b18 <tcp_input+0x7f4>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008a80:	4b26      	ldr	r3, [pc, #152]	; (8008b1c <tcp_input+0x7f8>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008a86:	4b26      	ldr	r3, [pc, #152]	; (8008b20 <tcp_input+0x7fc>)
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d03f      	beq.n	8008b0e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8008a8e:	4b24      	ldr	r3, [pc, #144]	; (8008b20 <tcp_input+0x7fc>)
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fd fe1e 	bl	80066d4 <pbuf_free>
      inseg.p = NULL;
 8008a98:	4b21      	ldr	r3, [pc, #132]	; (8008b20 <tcp_input+0x7fc>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008a9e:	e036      	b.n	8008b0e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008aa0:	4b20      	ldr	r3, [pc, #128]	; (8008b24 <tcp_input+0x800>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	899b      	ldrh	r3, [r3, #12]
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7fc fab5 	bl	8005018 <lwip_htons>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	f003 0304 	and.w	r3, r3, #4
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d118      	bne.n	8008aec <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008aba:	4b1b      	ldr	r3, [pc, #108]	; (8008b28 <tcp_input+0x804>)
 8008abc:	6819      	ldr	r1, [r3, #0]
 8008abe:	4b1b      	ldr	r3, [pc, #108]	; (8008b2c <tcp_input+0x808>)
 8008ac0:	881b      	ldrh	r3, [r3, #0]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	4b1a      	ldr	r3, [pc, #104]	; (8008b30 <tcp_input+0x80c>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008aca:	4b16      	ldr	r3, [pc, #88]	; (8008b24 <tcp_input+0x800>)
 8008acc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ace:	885b      	ldrh	r3, [r3, #2]
 8008ad0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008ad2:	4a14      	ldr	r2, [pc, #80]	; (8008b24 <tcp_input+0x800>)
 8008ad4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ad6:	8812      	ldrh	r2, [r2, #0]
 8008ad8:	b292      	uxth	r2, r2
 8008ada:	9202      	str	r2, [sp, #8]
 8008adc:	9301      	str	r3, [sp, #4]
 8008ade:	4b15      	ldr	r3, [pc, #84]	; (8008b34 <tcp_input+0x810>)
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	4b15      	ldr	r3, [pc, #84]	; (8008b38 <tcp_input+0x814>)
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	f003 f81c 	bl	800bb24 <tcp_rst>
    pbuf_free(p);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7fd fdf1 	bl	80066d4 <pbuf_free>
  return;
 8008af2:	e00c      	b.n	8008b0e <tcp_input+0x7ea>
    goto dropped;
 8008af4:	bf00      	nop
 8008af6:	e006      	b.n	8008b06 <tcp_input+0x7e2>
    goto dropped;
 8008af8:	bf00      	nop
 8008afa:	e004      	b.n	8008b06 <tcp_input+0x7e2>
    goto dropped;
 8008afc:	bf00      	nop
 8008afe:	e002      	b.n	8008b06 <tcp_input+0x7e2>
      goto dropped;
 8008b00:	bf00      	nop
 8008b02:	e000      	b.n	8008b06 <tcp_input+0x7e2>
      goto dropped;
 8008b04:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f7fd fde4 	bl	80066d4 <pbuf_free>
 8008b0c:	e000      	b.n	8008b10 <tcp_input+0x7ec>
  return;
 8008b0e:	bf00      	nop
}
 8008b10:	3724      	adds	r7, #36	; 0x24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd90      	pop	{r4, r7, pc}
 8008b16:	bf00      	nop
 8008b18:	20008388 	.word	0x20008388
 8008b1c:	20008384 	.word	0x20008384
 8008b20:	20008354 	.word	0x20008354
 8008b24:	20008364 	.word	0x20008364
 8008b28:	20008378 	.word	0x20008378
 8008b2c:	2000837e 	.word	0x2000837e
 8008b30:	20008374 	.word	0x20008374
 8008b34:	20004ddc 	.word	0x20004ddc
 8008b38:	20004de0 	.word	0x20004de0

08008b3c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d106      	bne.n	8008b58 <tcp_input_delayed_close+0x1c>
 8008b4a:	4b17      	ldr	r3, [pc, #92]	; (8008ba8 <tcp_input_delayed_close+0x6c>)
 8008b4c:	f240 225a 	movw	r2, #602	; 0x25a
 8008b50:	4916      	ldr	r1, [pc, #88]	; (8008bac <tcp_input_delayed_close+0x70>)
 8008b52:	4817      	ldr	r0, [pc, #92]	; (8008bb0 <tcp_input_delayed_close+0x74>)
 8008b54:	f005 ffd6 	bl	800eb04 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008b58:	4b16      	ldr	r3, [pc, #88]	; (8008bb4 <tcp_input_delayed_close+0x78>)
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	f003 0310 	and.w	r3, r3, #16
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d01c      	beq.n	8008b9e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	8b5b      	ldrh	r3, [r3, #26]
 8008b68:	f003 0310 	and.w	r3, r3, #16
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10d      	bne.n	8008b8c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d008      	beq.n	8008b8c <tcp_input_delayed_close+0x50>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	6912      	ldr	r2, [r2, #16]
 8008b84:	f06f 010e 	mvn.w	r1, #14
 8008b88:	4610      	mov	r0, r2
 8008b8a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008b8c:	6879      	ldr	r1, [r7, #4]
 8008b8e:	480a      	ldr	r0, [pc, #40]	; (8008bb8 <tcp_input_delayed_close+0x7c>)
 8008b90:	f7ff fa50 	bl	8008034 <tcp_pcb_remove>
    tcp_free(pcb);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f7fe f83d 	bl	8006c14 <tcp_free>
    return 1;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e000      	b.n	8008ba0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	08011178 	.word	0x08011178
 8008bac:	08011348 	.word	0x08011348
 8008bb0:	080111c4 	.word	0x080111c4
 8008bb4:	20008381 	.word	0x20008381
 8008bb8:	20008348 	.word	0x20008348

08008bbc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008bbc:	b590      	push	{r4, r7, lr}
 8008bbe:	b08b      	sub	sp, #44	; 0x2c
 8008bc0:	af04      	add	r7, sp, #16
 8008bc2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008bc4:	4b6f      	ldr	r3, [pc, #444]	; (8008d84 <tcp_listen_input+0x1c8>)
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	f003 0304 	and.w	r3, r3, #4
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f040 80d2 	bne.w	8008d76 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d106      	bne.n	8008be6 <tcp_listen_input+0x2a>
 8008bd8:	4b6b      	ldr	r3, [pc, #428]	; (8008d88 <tcp_listen_input+0x1cc>)
 8008bda:	f240 2281 	movw	r2, #641	; 0x281
 8008bde:	496b      	ldr	r1, [pc, #428]	; (8008d8c <tcp_listen_input+0x1d0>)
 8008be0:	486b      	ldr	r0, [pc, #428]	; (8008d90 <tcp_listen_input+0x1d4>)
 8008be2:	f005 ff8f 	bl	800eb04 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008be6:	4b67      	ldr	r3, [pc, #412]	; (8008d84 <tcp_listen_input+0x1c8>)
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	f003 0310 	and.w	r3, r3, #16
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d019      	beq.n	8008c26 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008bf2:	4b68      	ldr	r3, [pc, #416]	; (8008d94 <tcp_listen_input+0x1d8>)
 8008bf4:	6819      	ldr	r1, [r3, #0]
 8008bf6:	4b68      	ldr	r3, [pc, #416]	; (8008d98 <tcp_listen_input+0x1dc>)
 8008bf8:	881b      	ldrh	r3, [r3, #0]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	4b67      	ldr	r3, [pc, #412]	; (8008d9c <tcp_listen_input+0x1e0>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c02:	4b67      	ldr	r3, [pc, #412]	; (8008da0 <tcp_listen_input+0x1e4>)
 8008c04:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c06:	885b      	ldrh	r3, [r3, #2]
 8008c08:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c0a:	4a65      	ldr	r2, [pc, #404]	; (8008da0 <tcp_listen_input+0x1e4>)
 8008c0c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c0e:	8812      	ldrh	r2, [r2, #0]
 8008c10:	b292      	uxth	r2, r2
 8008c12:	9202      	str	r2, [sp, #8]
 8008c14:	9301      	str	r3, [sp, #4]
 8008c16:	4b63      	ldr	r3, [pc, #396]	; (8008da4 <tcp_listen_input+0x1e8>)
 8008c18:	9300      	str	r3, [sp, #0]
 8008c1a:	4b63      	ldr	r3, [pc, #396]	; (8008da8 <tcp_listen_input+0x1ec>)
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f002 ff80 	bl	800bb24 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008c24:	e0a9      	b.n	8008d7a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008c26:	4b57      	ldr	r3, [pc, #348]	; (8008d84 <tcp_listen_input+0x1c8>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	f003 0302 	and.w	r3, r3, #2
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f000 80a3 	beq.w	8008d7a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	7d5b      	ldrb	r3, [r3, #21]
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7ff f927 	bl	8007e8c <tcp_alloc>
 8008c3e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d111      	bne.n	8008c6a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00a      	beq.n	8008c64 <tcp_listen_input+0xa8>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	699b      	ldr	r3, [r3, #24]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	6910      	ldr	r0, [r2, #16]
 8008c56:	f04f 32ff 	mov.w	r2, #4294967295
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	4798      	blx	r3
 8008c5e:	4603      	mov	r3, r0
 8008c60:	73bb      	strb	r3, [r7, #14]
      return;
 8008c62:	e08b      	b.n	8008d7c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008c64:	23f0      	movs	r3, #240	; 0xf0
 8008c66:	73bb      	strb	r3, [r7, #14]
      return;
 8008c68:	e088      	b.n	8008d7c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008c6a:	4b50      	ldr	r3, [pc, #320]	; (8008dac <tcp_listen_input+0x1f0>)
 8008c6c:	695a      	ldr	r2, [r3, #20]
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008c72:	4b4e      	ldr	r3, [pc, #312]	; (8008dac <tcp_listen_input+0x1f0>)
 8008c74:	691a      	ldr	r2, [r3, #16]
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	8ada      	ldrh	r2, [r3, #22]
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008c82:	4b47      	ldr	r3, [pc, #284]	; (8008da0 <tcp_listen_input+0x1e4>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	2203      	movs	r2, #3
 8008c92:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008c94:	4b41      	ldr	r3, [pc, #260]	; (8008d9c <tcp_listen_input+0x1e0>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	1c5a      	adds	r2, r3, #1
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008ca6:	6978      	ldr	r0, [r7, #20]
 8008ca8:	f7ff fa58 	bl	800815c <tcp_next_iss>
 8008cac:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	693a      	ldr	r2, [r7, #16]
 8008cb8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008cc6:	4b35      	ldr	r3, [pc, #212]	; (8008d9c <tcp_listen_input+0x1e0>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	1e5a      	subs	r2, r3, #1
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	691a      	ldr	r2, [r3, #16]
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	7a5b      	ldrb	r3, [r3, #9]
 8008ce2:	f003 030c 	and.w	r3, r3, #12
 8008ce6:	b2da      	uxtb	r2, r3
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	7a1a      	ldrb	r2, [r3, #8]
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008cf4:	4b2e      	ldr	r3, [pc, #184]	; (8008db0 <tcp_listen_input+0x1f4>)
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	60da      	str	r2, [r3, #12]
 8008cfc:	4a2c      	ldr	r2, [pc, #176]	; (8008db0 <tcp_listen_input+0x1f4>)
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	6013      	str	r3, [r2, #0]
 8008d02:	f003 f8d1 	bl	800bea8 <tcp_timer_needed>
 8008d06:	4b2b      	ldr	r3, [pc, #172]	; (8008db4 <tcp_listen_input+0x1f8>)
 8008d08:	2201      	movs	r2, #1
 8008d0a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008d0c:	6978      	ldr	r0, [r7, #20]
 8008d0e:	f001 fd8f 	bl	800a830 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008d12:	4b23      	ldr	r3, [pc, #140]	; (8008da0 <tcp_listen_input+0x1e4>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	89db      	ldrh	r3, [r3, #14]
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	3304      	adds	r3, #4
 8008d34:	4618      	mov	r0, r3
 8008d36:	f004 fc95 	bl	800d664 <ip4_route>
 8008d3a:	4601      	mov	r1, r0
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	3304      	adds	r3, #4
 8008d40:	461a      	mov	r2, r3
 8008d42:	4620      	mov	r0, r4
 8008d44:	f7ff fa30 	bl	80081a8 <tcp_eff_send_mss_netif>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008d50:	2112      	movs	r1, #18
 8008d52:	6978      	ldr	r0, [r7, #20]
 8008d54:	f002 f844 	bl	800ade0 <tcp_enqueue_flags>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d004      	beq.n	8008d6e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008d64:	2100      	movs	r1, #0
 8008d66:	6978      	ldr	r0, [r7, #20]
 8008d68:	f7fe f97e 	bl	8007068 <tcp_abandon>
      return;
 8008d6c:	e006      	b.n	8008d7c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008d6e:	6978      	ldr	r0, [r7, #20]
 8008d70:	f002 f924 	bl	800afbc <tcp_output>
  return;
 8008d74:	e001      	b.n	8008d7a <tcp_listen_input+0x1be>
    return;
 8008d76:	bf00      	nop
 8008d78:	e000      	b.n	8008d7c <tcp_listen_input+0x1c0>
  return;
 8008d7a:	bf00      	nop
}
 8008d7c:	371c      	adds	r7, #28
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd90      	pop	{r4, r7, pc}
 8008d82:	bf00      	nop
 8008d84:	20008380 	.word	0x20008380
 8008d88:	08011178 	.word	0x08011178
 8008d8c:	08011370 	.word	0x08011370
 8008d90:	080111c4 	.word	0x080111c4
 8008d94:	20008378 	.word	0x20008378
 8008d98:	2000837e 	.word	0x2000837e
 8008d9c:	20008374 	.word	0x20008374
 8008da0:	20008364 	.word	0x20008364
 8008da4:	20004ddc 	.word	0x20004ddc
 8008da8:	20004de0 	.word	0x20004de0
 8008dac:	20004dcc 	.word	0x20004dcc
 8008db0:	20008348 	.word	0x20008348
 8008db4:	20008350 	.word	0x20008350

08008db8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af04      	add	r7, sp, #16
 8008dbe:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008dc0:	4b2f      	ldr	r3, [pc, #188]	; (8008e80 <tcp_timewait_input+0xc8>)
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	f003 0304 	and.w	r3, r3, #4
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d153      	bne.n	8008e74 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d106      	bne.n	8008de0 <tcp_timewait_input+0x28>
 8008dd2:	4b2c      	ldr	r3, [pc, #176]	; (8008e84 <tcp_timewait_input+0xcc>)
 8008dd4:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008dd8:	492b      	ldr	r1, [pc, #172]	; (8008e88 <tcp_timewait_input+0xd0>)
 8008dda:	482c      	ldr	r0, [pc, #176]	; (8008e8c <tcp_timewait_input+0xd4>)
 8008ddc:	f005 fe92 	bl	800eb04 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008de0:	4b27      	ldr	r3, [pc, #156]	; (8008e80 <tcp_timewait_input+0xc8>)
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	f003 0302 	and.w	r3, r3, #2
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d02a      	beq.n	8008e42 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008dec:	4b28      	ldr	r3, [pc, #160]	; (8008e90 <tcp_timewait_input+0xd8>)
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df4:	1ad3      	subs	r3, r2, r3
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	db2d      	blt.n	8008e56 <tcp_timewait_input+0x9e>
 8008dfa:	4b25      	ldr	r3, [pc, #148]	; (8008e90 <tcp_timewait_input+0xd8>)
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e02:	6879      	ldr	r1, [r7, #4]
 8008e04:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008e06:	440b      	add	r3, r1
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	dc23      	bgt.n	8008e56 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e0e:	4b21      	ldr	r3, [pc, #132]	; (8008e94 <tcp_timewait_input+0xdc>)
 8008e10:	6819      	ldr	r1, [r3, #0]
 8008e12:	4b21      	ldr	r3, [pc, #132]	; (8008e98 <tcp_timewait_input+0xe0>)
 8008e14:	881b      	ldrh	r3, [r3, #0]
 8008e16:	461a      	mov	r2, r3
 8008e18:	4b1d      	ldr	r3, [pc, #116]	; (8008e90 <tcp_timewait_input+0xd8>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e1e:	4b1f      	ldr	r3, [pc, #124]	; (8008e9c <tcp_timewait_input+0xe4>)
 8008e20:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e22:	885b      	ldrh	r3, [r3, #2]
 8008e24:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e26:	4a1d      	ldr	r2, [pc, #116]	; (8008e9c <tcp_timewait_input+0xe4>)
 8008e28:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e2a:	8812      	ldrh	r2, [r2, #0]
 8008e2c:	b292      	uxth	r2, r2
 8008e2e:	9202      	str	r2, [sp, #8]
 8008e30:	9301      	str	r3, [sp, #4]
 8008e32:	4b1b      	ldr	r3, [pc, #108]	; (8008ea0 <tcp_timewait_input+0xe8>)
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	4b1b      	ldr	r3, [pc, #108]	; (8008ea4 <tcp_timewait_input+0xec>)
 8008e38:	4602      	mov	r2, r0
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f002 fe72 	bl	800bb24 <tcp_rst>
      return;
 8008e40:	e01b      	b.n	8008e7a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008e42:	4b0f      	ldr	r3, [pc, #60]	; (8008e80 <tcp_timewait_input+0xc8>)
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d003      	beq.n	8008e56 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008e4e:	4b16      	ldr	r3, [pc, #88]	; (8008ea8 <tcp_timewait_input+0xf0>)
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008e56:	4b10      	ldr	r3, [pc, #64]	; (8008e98 <tcp_timewait_input+0xe0>)
 8008e58:	881b      	ldrh	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00c      	beq.n	8008e78 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	8b5b      	ldrh	r3, [r3, #26]
 8008e62:	f043 0302 	orr.w	r3, r3, #2
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f002 f8a5 	bl	800afbc <tcp_output>
  }
  return;
 8008e72:	e001      	b.n	8008e78 <tcp_timewait_input+0xc0>
    return;
 8008e74:	bf00      	nop
 8008e76:	e000      	b.n	8008e7a <tcp_timewait_input+0xc2>
  return;
 8008e78:	bf00      	nop
}
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	20008380 	.word	0x20008380
 8008e84:	08011178 	.word	0x08011178
 8008e88:	08011390 	.word	0x08011390
 8008e8c:	080111c4 	.word	0x080111c4
 8008e90:	20008374 	.word	0x20008374
 8008e94:	20008378 	.word	0x20008378
 8008e98:	2000837e 	.word	0x2000837e
 8008e9c:	20008364 	.word	0x20008364
 8008ea0:	20004ddc 	.word	0x20004ddc
 8008ea4:	20004de0 	.word	0x20004de0
 8008ea8:	2000833c 	.word	0x2000833c

08008eac <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008eac:	b590      	push	{r4, r7, lr}
 8008eae:	b08d      	sub	sp, #52	; 0x34
 8008eb0:	af04      	add	r7, sp, #16
 8008eb2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d106      	bne.n	8008ed0 <tcp_process+0x24>
 8008ec2:	4b9d      	ldr	r3, [pc, #628]	; (8009138 <tcp_process+0x28c>)
 8008ec4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008ec8:	499c      	ldr	r1, [pc, #624]	; (800913c <tcp_process+0x290>)
 8008eca:	489d      	ldr	r0, [pc, #628]	; (8009140 <tcp_process+0x294>)
 8008ecc:	f005 fe1a 	bl	800eb04 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008ed0:	4b9c      	ldr	r3, [pc, #624]	; (8009144 <tcp_process+0x298>)
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	f003 0304 	and.w	r3, r3, #4
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d04e      	beq.n	8008f7a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	7d1b      	ldrb	r3, [r3, #20]
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d108      	bne.n	8008ef6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ee8:	4b97      	ldr	r3, [pc, #604]	; (8009148 <tcp_process+0x29c>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d123      	bne.n	8008f38 <tcp_process+0x8c>
        acceptable = 1;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	76fb      	strb	r3, [r7, #27]
 8008ef4:	e020      	b.n	8008f38 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008efa:	4b94      	ldr	r3, [pc, #592]	; (800914c <tcp_process+0x2a0>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d102      	bne.n	8008f08 <tcp_process+0x5c>
        acceptable = 1;
 8008f02:	2301      	movs	r3, #1
 8008f04:	76fb      	strb	r3, [r7, #27]
 8008f06:	e017      	b.n	8008f38 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008f08:	4b90      	ldr	r3, [pc, #576]	; (800914c <tcp_process+0x2a0>)
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	db10      	blt.n	8008f38 <tcp_process+0x8c>
 8008f16:	4b8d      	ldr	r3, [pc, #564]	; (800914c <tcp_process+0x2a0>)
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1e:	6879      	ldr	r1, [r7, #4]
 8008f20:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008f22:	440b      	add	r3, r1
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	dc06      	bgt.n	8008f38 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	8b5b      	ldrh	r3, [r3, #26]
 8008f2e:	f043 0302 	orr.w	r3, r3, #2
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008f38:	7efb      	ldrb	r3, [r7, #27]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d01b      	beq.n	8008f76 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	7d1b      	ldrb	r3, [r3, #20]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d106      	bne.n	8008f54 <tcp_process+0xa8>
 8008f46:	4b7c      	ldr	r3, [pc, #496]	; (8009138 <tcp_process+0x28c>)
 8008f48:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008f4c:	4980      	ldr	r1, [pc, #512]	; (8009150 <tcp_process+0x2a4>)
 8008f4e:	487c      	ldr	r0, [pc, #496]	; (8009140 <tcp_process+0x294>)
 8008f50:	f005 fdd8 	bl	800eb04 <iprintf>
      recv_flags |= TF_RESET;
 8008f54:	4b7f      	ldr	r3, [pc, #508]	; (8009154 <tcp_process+0x2a8>)
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	f043 0308 	orr.w	r3, r3, #8
 8008f5c:	b2da      	uxtb	r2, r3
 8008f5e:	4b7d      	ldr	r3, [pc, #500]	; (8009154 <tcp_process+0x2a8>)
 8008f60:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	8b5b      	ldrh	r3, [r3, #26]
 8008f66:	f023 0301 	bic.w	r3, r3, #1
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008f70:	f06f 030d 	mvn.w	r3, #13
 8008f74:	e37a      	b.n	800966c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	e378      	b.n	800966c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008f7a:	4b72      	ldr	r3, [pc, #456]	; (8009144 <tcp_process+0x298>)
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	f003 0302 	and.w	r3, r3, #2
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d010      	beq.n	8008fa8 <tcp_process+0xfc>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	7d1b      	ldrb	r3, [r3, #20]
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d00c      	beq.n	8008fa8 <tcp_process+0xfc>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	7d1b      	ldrb	r3, [r3, #20]
 8008f92:	2b03      	cmp	r3, #3
 8008f94:	d008      	beq.n	8008fa8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	8b5b      	ldrh	r3, [r3, #26]
 8008f9a:	f043 0302 	orr.w	r3, r3, #2
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	e361      	b.n	800966c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	8b5b      	ldrh	r3, [r3, #26]
 8008fac:	f003 0310 	and.w	r3, r3, #16
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d103      	bne.n	8008fbc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008fb4:	4b68      	ldr	r3, [pc, #416]	; (8009158 <tcp_process+0x2ac>)
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f001 fc2f 	bl	800a830 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	7d1b      	ldrb	r3, [r3, #20]
 8008fd6:	3b02      	subs	r3, #2
 8008fd8:	2b07      	cmp	r3, #7
 8008fda:	f200 8337 	bhi.w	800964c <tcp_process+0x7a0>
 8008fde:	a201      	add	r2, pc, #4	; (adr r2, 8008fe4 <tcp_process+0x138>)
 8008fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe4:	08009005 	.word	0x08009005
 8008fe8:	08009235 	.word	0x08009235
 8008fec:	080093ad 	.word	0x080093ad
 8008ff0:	080093d7 	.word	0x080093d7
 8008ff4:	080094fb 	.word	0x080094fb
 8008ff8:	080093ad 	.word	0x080093ad
 8008ffc:	08009587 	.word	0x08009587
 8009000:	08009617 	.word	0x08009617
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009004:	4b4f      	ldr	r3, [pc, #316]	; (8009144 <tcp_process+0x298>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	f003 0310 	and.w	r3, r3, #16
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 80e4 	beq.w	80091da <tcp_process+0x32e>
 8009012:	4b4c      	ldr	r3, [pc, #304]	; (8009144 <tcp_process+0x298>)
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	f003 0302 	and.w	r3, r3, #2
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 80dd 	beq.w	80091da <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009024:	1c5a      	adds	r2, r3, #1
 8009026:	4b48      	ldr	r3, [pc, #288]	; (8009148 <tcp_process+0x29c>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	429a      	cmp	r2, r3
 800902c:	f040 80d5 	bne.w	80091da <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009030:	4b46      	ldr	r3, [pc, #280]	; (800914c <tcp_process+0x2a0>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	1c5a      	adds	r2, r3, #1
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8009042:	4b41      	ldr	r3, [pc, #260]	; (8009148 <tcp_process+0x29c>)
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800904a:	4b44      	ldr	r3, [pc, #272]	; (800915c <tcp_process+0x2b0>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	89db      	ldrh	r3, [r3, #14]
 8009050:	b29a      	uxth	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009064:	4b39      	ldr	r3, [pc, #228]	; (800914c <tcp_process+0x2a0>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	1e5a      	subs	r2, r3, #1
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2204      	movs	r2, #4
 8009072:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	3304      	adds	r3, #4
 800907c:	4618      	mov	r0, r3
 800907e:	f004 faf1 	bl	800d664 <ip4_route>
 8009082:	4601      	mov	r1, r0
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3304      	adds	r3, #4
 8009088:	461a      	mov	r2, r3
 800908a:	4620      	mov	r0, r4
 800908c:	f7ff f88c 	bl	80081a8 <tcp_eff_send_mss_netif>
 8009090:	4603      	mov	r3, r0
 8009092:	461a      	mov	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800909c:	009a      	lsls	r2, r3, #2
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80090a2:	005b      	lsls	r3, r3, #1
 80090a4:	f241 111c 	movw	r1, #4380	; 0x111c
 80090a8:	428b      	cmp	r3, r1
 80090aa:	bf38      	it	cc
 80090ac:	460b      	movcc	r3, r1
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d204      	bcs.n	80090bc <tcp_process+0x210>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	e00d      	b.n	80090d8 <tcp_process+0x22c>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80090c0:	005b      	lsls	r3, r3, #1
 80090c2:	f241 121c 	movw	r2, #4380	; 0x111c
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d904      	bls.n	80090d4 <tcp_process+0x228>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80090ce:	005b      	lsls	r3, r3, #1
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	e001      	b.n	80090d8 <tcp_process+0x22c>
 80090d4:	f241 131c 	movw	r3, #4380	; 0x111c
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d106      	bne.n	80090f6 <tcp_process+0x24a>
 80090e8:	4b13      	ldr	r3, [pc, #76]	; (8009138 <tcp_process+0x28c>)
 80090ea:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80090ee:	491c      	ldr	r1, [pc, #112]	; (8009160 <tcp_process+0x2b4>)
 80090f0:	4813      	ldr	r0, [pc, #76]	; (8009140 <tcp_process+0x294>)
 80090f2:	f005 fd07 	bl	800eb04 <iprintf>
        --pcb->snd_queuelen;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80090fc:	3b01      	subs	r3, #1
 80090fe:	b29a      	uxth	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800910a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d12a      	bne.n	8009168 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009116:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d106      	bne.n	800912c <tcp_process+0x280>
 800911e:	4b06      	ldr	r3, [pc, #24]	; (8009138 <tcp_process+0x28c>)
 8009120:	f44f 725d 	mov.w	r2, #884	; 0x374
 8009124:	490f      	ldr	r1, [pc, #60]	; (8009164 <tcp_process+0x2b8>)
 8009126:	4806      	ldr	r0, [pc, #24]	; (8009140 <tcp_process+0x294>)
 8009128:	f005 fcec 	bl	800eb04 <iprintf>
          pcb->unsent = rseg->next;
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	66da      	str	r2, [r3, #108]	; 0x6c
 8009134:	e01c      	b.n	8009170 <tcp_process+0x2c4>
 8009136:	bf00      	nop
 8009138:	08011178 	.word	0x08011178
 800913c:	080113b0 	.word	0x080113b0
 8009140:	080111c4 	.word	0x080111c4
 8009144:	20008380 	.word	0x20008380
 8009148:	20008378 	.word	0x20008378
 800914c:	20008374 	.word	0x20008374
 8009150:	080113cc 	.word	0x080113cc
 8009154:	20008381 	.word	0x20008381
 8009158:	2000833c 	.word	0x2000833c
 800915c:	20008364 	.word	0x20008364
 8009160:	080113ec 	.word	0x080113ec
 8009164:	08011404 	.word	0x08011404
        } else {
          pcb->unacked = rseg->next;
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8009170:	69f8      	ldr	r0, [r7, #28]
 8009172:	f7fe fd22 	bl	8007bba <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800917a:	2b00      	cmp	r3, #0
 800917c:	d104      	bne.n	8009188 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009184:	861a      	strh	r2, [r3, #48]	; 0x30
 8009186:	e006      	b.n	8009196 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00a      	beq.n	80091b6 <tcp_process+0x30a>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	6910      	ldr	r0, [r2, #16]
 80091aa:	2200      	movs	r2, #0
 80091ac:	6879      	ldr	r1, [r7, #4]
 80091ae:	4798      	blx	r3
 80091b0:	4603      	mov	r3, r0
 80091b2:	76bb      	strb	r3, [r7, #26]
 80091b4:	e001      	b.n	80091ba <tcp_process+0x30e>
 80091b6:	2300      	movs	r3, #0
 80091b8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80091ba:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80091be:	f113 0f0d 	cmn.w	r3, #13
 80091c2:	d102      	bne.n	80091ca <tcp_process+0x31e>
          return ERR_ABRT;
 80091c4:	f06f 030c 	mvn.w	r3, #12
 80091c8:	e250      	b.n	800966c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	8b5b      	ldrh	r3, [r3, #26]
 80091ce:	f043 0302 	orr.w	r3, r3, #2
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80091d8:	e23a      	b.n	8009650 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80091da:	4b98      	ldr	r3, [pc, #608]	; (800943c <tcp_process+0x590>)
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	f003 0310 	and.w	r3, r3, #16
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 8234 	beq.w	8009650 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091e8:	4b95      	ldr	r3, [pc, #596]	; (8009440 <tcp_process+0x594>)
 80091ea:	6819      	ldr	r1, [r3, #0]
 80091ec:	4b95      	ldr	r3, [pc, #596]	; (8009444 <tcp_process+0x598>)
 80091ee:	881b      	ldrh	r3, [r3, #0]
 80091f0:	461a      	mov	r2, r3
 80091f2:	4b95      	ldr	r3, [pc, #596]	; (8009448 <tcp_process+0x59c>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80091f8:	4b94      	ldr	r3, [pc, #592]	; (800944c <tcp_process+0x5a0>)
 80091fa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091fc:	885b      	ldrh	r3, [r3, #2]
 80091fe:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009200:	4a92      	ldr	r2, [pc, #584]	; (800944c <tcp_process+0x5a0>)
 8009202:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009204:	8812      	ldrh	r2, [r2, #0]
 8009206:	b292      	uxth	r2, r2
 8009208:	9202      	str	r2, [sp, #8]
 800920a:	9301      	str	r3, [sp, #4]
 800920c:	4b90      	ldr	r3, [pc, #576]	; (8009450 <tcp_process+0x5a4>)
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	4b90      	ldr	r3, [pc, #576]	; (8009454 <tcp_process+0x5a8>)
 8009212:	4602      	mov	r2, r0
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f002 fc85 	bl	800bb24 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009220:	2b05      	cmp	r3, #5
 8009222:	f200 8215 	bhi.w	8009650 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f002 fa4f 	bl	800b6d0 <tcp_rexmit_rto>
      break;
 8009232:	e20d      	b.n	8009650 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009234:	4b81      	ldr	r3, [pc, #516]	; (800943c <tcp_process+0x590>)
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	f003 0310 	and.w	r3, r3, #16
 800923c:	2b00      	cmp	r3, #0
 800923e:	f000 80a1 	beq.w	8009384 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009242:	4b7f      	ldr	r3, [pc, #508]	; (8009440 <tcp_process+0x594>)
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	3b01      	subs	r3, #1
 800924e:	2b00      	cmp	r3, #0
 8009250:	db7e      	blt.n	8009350 <tcp_process+0x4a4>
 8009252:	4b7b      	ldr	r3, [pc, #492]	; (8009440 <tcp_process+0x594>)
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	2b00      	cmp	r3, #0
 800925e:	dc77      	bgt.n	8009350 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2204      	movs	r2, #4
 8009264:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800926a:	2b00      	cmp	r3, #0
 800926c:	d102      	bne.n	8009274 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800926e:	23fa      	movs	r3, #250	; 0xfa
 8009270:	76bb      	strb	r3, [r7, #26]
 8009272:	e01d      	b.n	80092b0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d106      	bne.n	800928c <tcp_process+0x3e0>
 800927e:	4b76      	ldr	r3, [pc, #472]	; (8009458 <tcp_process+0x5ac>)
 8009280:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009284:	4975      	ldr	r1, [pc, #468]	; (800945c <tcp_process+0x5b0>)
 8009286:	4876      	ldr	r0, [pc, #472]	; (8009460 <tcp_process+0x5b4>)
 8009288:	f005 fc3c 	bl	800eb04 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009290:	699b      	ldr	r3, [r3, #24]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00a      	beq.n	80092ac <tcp_process+0x400>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800929a:	699b      	ldr	r3, [r3, #24]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	6910      	ldr	r0, [r2, #16]
 80092a0:	2200      	movs	r2, #0
 80092a2:	6879      	ldr	r1, [r7, #4]
 80092a4:	4798      	blx	r3
 80092a6:	4603      	mov	r3, r0
 80092a8:	76bb      	strb	r3, [r7, #26]
 80092aa:	e001      	b.n	80092b0 <tcp_process+0x404>
 80092ac:	23f0      	movs	r3, #240	; 0xf0
 80092ae:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80092b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00a      	beq.n	80092ce <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80092b8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80092bc:	f113 0f0d 	cmn.w	r3, #13
 80092c0:	d002      	beq.n	80092c8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f7fd ff8e 	bl	80071e4 <tcp_abort>
            }
            return ERR_ABRT;
 80092c8:	f06f 030c 	mvn.w	r3, #12
 80092cc:	e1ce      	b.n	800966c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fae0 	bl	8009894 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80092d4:	4b63      	ldr	r3, [pc, #396]	; (8009464 <tcp_process+0x5b8>)
 80092d6:	881b      	ldrh	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d005      	beq.n	80092e8 <tcp_process+0x43c>
            recv_acked--;
 80092dc:	4b61      	ldr	r3, [pc, #388]	; (8009464 <tcp_process+0x5b8>)
 80092de:	881b      	ldrh	r3, [r3, #0]
 80092e0:	3b01      	subs	r3, #1
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	4b5f      	ldr	r3, [pc, #380]	; (8009464 <tcp_process+0x5b8>)
 80092e6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092ec:	009a      	lsls	r2, r3, #2
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092f2:	005b      	lsls	r3, r3, #1
 80092f4:	f241 111c 	movw	r1, #4380	; 0x111c
 80092f8:	428b      	cmp	r3, r1
 80092fa:	bf38      	it	cc
 80092fc:	460b      	movcc	r3, r1
 80092fe:	429a      	cmp	r2, r3
 8009300:	d204      	bcs.n	800930c <tcp_process+0x460>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	b29b      	uxth	r3, r3
 800930a:	e00d      	b.n	8009328 <tcp_process+0x47c>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009310:	005b      	lsls	r3, r3, #1
 8009312:	f241 121c 	movw	r2, #4380	; 0x111c
 8009316:	4293      	cmp	r3, r2
 8009318:	d904      	bls.n	8009324 <tcp_process+0x478>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800931e:	005b      	lsls	r3, r3, #1
 8009320:	b29b      	uxth	r3, r3
 8009322:	e001      	b.n	8009328 <tcp_process+0x47c>
 8009324:	f241 131c 	movw	r3, #4380	; 0x111c
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800932e:	4b4e      	ldr	r3, [pc, #312]	; (8009468 <tcp_process+0x5bc>)
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	f003 0320 	and.w	r3, r3, #32
 8009336:	2b00      	cmp	r3, #0
 8009338:	d037      	beq.n	80093aa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	8b5b      	ldrh	r3, [r3, #26]
 800933e:	f043 0302 	orr.w	r3, r3, #2
 8009342:	b29a      	uxth	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2207      	movs	r2, #7
 800934c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800934e:	e02c      	b.n	80093aa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009350:	4b3b      	ldr	r3, [pc, #236]	; (8009440 <tcp_process+0x594>)
 8009352:	6819      	ldr	r1, [r3, #0]
 8009354:	4b3b      	ldr	r3, [pc, #236]	; (8009444 <tcp_process+0x598>)
 8009356:	881b      	ldrh	r3, [r3, #0]
 8009358:	461a      	mov	r2, r3
 800935a:	4b3b      	ldr	r3, [pc, #236]	; (8009448 <tcp_process+0x59c>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009360:	4b3a      	ldr	r3, [pc, #232]	; (800944c <tcp_process+0x5a0>)
 8009362:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009364:	885b      	ldrh	r3, [r3, #2]
 8009366:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009368:	4a38      	ldr	r2, [pc, #224]	; (800944c <tcp_process+0x5a0>)
 800936a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800936c:	8812      	ldrh	r2, [r2, #0]
 800936e:	b292      	uxth	r2, r2
 8009370:	9202      	str	r2, [sp, #8]
 8009372:	9301      	str	r3, [sp, #4]
 8009374:	4b36      	ldr	r3, [pc, #216]	; (8009450 <tcp_process+0x5a4>)
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	4b36      	ldr	r3, [pc, #216]	; (8009454 <tcp_process+0x5a8>)
 800937a:	4602      	mov	r2, r0
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f002 fbd1 	bl	800bb24 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009382:	e167      	b.n	8009654 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009384:	4b2d      	ldr	r3, [pc, #180]	; (800943c <tcp_process+0x590>)
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	f003 0302 	and.w	r3, r3, #2
 800938c:	2b00      	cmp	r3, #0
 800938e:	f000 8161 	beq.w	8009654 <tcp_process+0x7a8>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009396:	1e5a      	subs	r2, r3, #1
 8009398:	4b2b      	ldr	r3, [pc, #172]	; (8009448 <tcp_process+0x59c>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	429a      	cmp	r2, r3
 800939e:	f040 8159 	bne.w	8009654 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f002 f9b6 	bl	800b714 <tcp_rexmit>
      break;
 80093a8:	e154      	b.n	8009654 <tcp_process+0x7a8>
 80093aa:	e153      	b.n	8009654 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fa71 	bl	8009894 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80093b2:	4b2d      	ldr	r3, [pc, #180]	; (8009468 <tcp_process+0x5bc>)
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	f003 0320 	and.w	r3, r3, #32
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f000 814c 	beq.w	8009658 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	8b5b      	ldrh	r3, [r3, #26]
 80093c4:	f043 0302 	orr.w	r3, r3, #2
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2207      	movs	r2, #7
 80093d2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80093d4:	e140      	b.n	8009658 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fa5c 	bl	8009894 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80093dc:	4b22      	ldr	r3, [pc, #136]	; (8009468 <tcp_process+0x5bc>)
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	f003 0320 	and.w	r3, r3, #32
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d071      	beq.n	80094cc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80093e8:	4b14      	ldr	r3, [pc, #80]	; (800943c <tcp_process+0x590>)
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	f003 0310 	and.w	r3, r3, #16
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d060      	beq.n	80094b6 <tcp_process+0x60a>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80093f8:	4b11      	ldr	r3, [pc, #68]	; (8009440 <tcp_process+0x594>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d15a      	bne.n	80094b6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009404:	2b00      	cmp	r3, #0
 8009406:	d156      	bne.n	80094b6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	8b5b      	ldrh	r3, [r3, #26]
 800940c:	f043 0302 	orr.w	r3, r3, #2
 8009410:	b29a      	uxth	r2, r3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f7fe fdbc 	bl	8007f94 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800941c:	4b13      	ldr	r3, [pc, #76]	; (800946c <tcp_process+0x5c0>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	429a      	cmp	r2, r3
 8009424:	d105      	bne.n	8009432 <tcp_process+0x586>
 8009426:	4b11      	ldr	r3, [pc, #68]	; (800946c <tcp_process+0x5c0>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	4a0f      	ldr	r2, [pc, #60]	; (800946c <tcp_process+0x5c0>)
 800942e:	6013      	str	r3, [r2, #0]
 8009430:	e02e      	b.n	8009490 <tcp_process+0x5e4>
 8009432:	4b0e      	ldr	r3, [pc, #56]	; (800946c <tcp_process+0x5c0>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	617b      	str	r3, [r7, #20]
 8009438:	e027      	b.n	800948a <tcp_process+0x5de>
 800943a:	bf00      	nop
 800943c:	20008380 	.word	0x20008380
 8009440:	20008378 	.word	0x20008378
 8009444:	2000837e 	.word	0x2000837e
 8009448:	20008374 	.word	0x20008374
 800944c:	20008364 	.word	0x20008364
 8009450:	20004ddc 	.word	0x20004ddc
 8009454:	20004de0 	.word	0x20004de0
 8009458:	08011178 	.word	0x08011178
 800945c:	08011418 	.word	0x08011418
 8009460:	080111c4 	.word	0x080111c4
 8009464:	2000837c 	.word	0x2000837c
 8009468:	20008381 	.word	0x20008381
 800946c:	20008348 	.word	0x20008348
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	429a      	cmp	r2, r3
 8009478:	d104      	bne.n	8009484 <tcp_process+0x5d8>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	68da      	ldr	r2, [r3, #12]
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	60da      	str	r2, [r3, #12]
 8009482:	e005      	b.n	8009490 <tcp_process+0x5e4>
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	617b      	str	r3, [r7, #20]
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d1ef      	bne.n	8009470 <tcp_process+0x5c4>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	60da      	str	r2, [r3, #12]
 8009496:	4b77      	ldr	r3, [pc, #476]	; (8009674 <tcp_process+0x7c8>)
 8009498:	2201      	movs	r2, #1
 800949a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	220a      	movs	r2, #10
 80094a0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80094a2:	4b75      	ldr	r3, [pc, #468]	; (8009678 <tcp_process+0x7cc>)
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	60da      	str	r2, [r3, #12]
 80094aa:	4a73      	ldr	r2, [pc, #460]	; (8009678 <tcp_process+0x7cc>)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6013      	str	r3, [r2, #0]
 80094b0:	f002 fcfa 	bl	800bea8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80094b4:	e0d2      	b.n	800965c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	8b5b      	ldrh	r3, [r3, #26]
 80094ba:	f043 0302 	orr.w	r3, r3, #2
 80094be:	b29a      	uxth	r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2208      	movs	r2, #8
 80094c8:	751a      	strb	r2, [r3, #20]
      break;
 80094ca:	e0c7      	b.n	800965c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80094cc:	4b6b      	ldr	r3, [pc, #428]	; (800967c <tcp_process+0x7d0>)
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	f003 0310 	and.w	r3, r3, #16
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f000 80c1 	beq.w	800965c <tcp_process+0x7b0>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094de:	4b68      	ldr	r3, [pc, #416]	; (8009680 <tcp_process+0x7d4>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	f040 80ba 	bne.w	800965c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f040 80b5 	bne.w	800965c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2206      	movs	r2, #6
 80094f6:	751a      	strb	r2, [r3, #20]
      break;
 80094f8:	e0b0      	b.n	800965c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f9ca 	bl	8009894 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009500:	4b60      	ldr	r3, [pc, #384]	; (8009684 <tcp_process+0x7d8>)
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	f003 0320 	and.w	r3, r3, #32
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 80a9 	beq.w	8009660 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	8b5b      	ldrh	r3, [r3, #26]
 8009512:	f043 0302 	orr.w	r3, r3, #2
 8009516:	b29a      	uxth	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7fe fd39 	bl	8007f94 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009522:	4b59      	ldr	r3, [pc, #356]	; (8009688 <tcp_process+0x7dc>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	429a      	cmp	r2, r3
 800952a:	d105      	bne.n	8009538 <tcp_process+0x68c>
 800952c:	4b56      	ldr	r3, [pc, #344]	; (8009688 <tcp_process+0x7dc>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	4a55      	ldr	r2, [pc, #340]	; (8009688 <tcp_process+0x7dc>)
 8009534:	6013      	str	r3, [r2, #0]
 8009536:	e013      	b.n	8009560 <tcp_process+0x6b4>
 8009538:	4b53      	ldr	r3, [pc, #332]	; (8009688 <tcp_process+0x7dc>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	613b      	str	r3, [r7, #16]
 800953e:	e00c      	b.n	800955a <tcp_process+0x6ae>
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	429a      	cmp	r2, r3
 8009548:	d104      	bne.n	8009554 <tcp_process+0x6a8>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	68da      	ldr	r2, [r3, #12]
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	60da      	str	r2, [r3, #12]
 8009552:	e005      	b.n	8009560 <tcp_process+0x6b4>
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	613b      	str	r3, [r7, #16]
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1ef      	bne.n	8009540 <tcp_process+0x694>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	60da      	str	r2, [r3, #12]
 8009566:	4b43      	ldr	r3, [pc, #268]	; (8009674 <tcp_process+0x7c8>)
 8009568:	2201      	movs	r2, #1
 800956a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	220a      	movs	r2, #10
 8009570:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009572:	4b41      	ldr	r3, [pc, #260]	; (8009678 <tcp_process+0x7cc>)
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	60da      	str	r2, [r3, #12]
 800957a:	4a3f      	ldr	r2, [pc, #252]	; (8009678 <tcp_process+0x7cc>)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6013      	str	r3, [r2, #0]
 8009580:	f002 fc92 	bl	800bea8 <tcp_timer_needed>
      }
      break;
 8009584:	e06c      	b.n	8009660 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 f984 	bl	8009894 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800958c:	4b3b      	ldr	r3, [pc, #236]	; (800967c <tcp_process+0x7d0>)
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	f003 0310 	and.w	r3, r3, #16
 8009594:	2b00      	cmp	r3, #0
 8009596:	d065      	beq.n	8009664 <tcp_process+0x7b8>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800959c:	4b38      	ldr	r3, [pc, #224]	; (8009680 <tcp_process+0x7d4>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d15f      	bne.n	8009664 <tcp_process+0x7b8>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d15b      	bne.n	8009664 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f7fe fcf1 	bl	8007f94 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80095b2:	4b35      	ldr	r3, [pc, #212]	; (8009688 <tcp_process+0x7dc>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d105      	bne.n	80095c8 <tcp_process+0x71c>
 80095bc:	4b32      	ldr	r3, [pc, #200]	; (8009688 <tcp_process+0x7dc>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	4a31      	ldr	r2, [pc, #196]	; (8009688 <tcp_process+0x7dc>)
 80095c4:	6013      	str	r3, [r2, #0]
 80095c6:	e013      	b.n	80095f0 <tcp_process+0x744>
 80095c8:	4b2f      	ldr	r3, [pc, #188]	; (8009688 <tcp_process+0x7dc>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	60fb      	str	r3, [r7, #12]
 80095ce:	e00c      	b.n	80095ea <tcp_process+0x73e>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d104      	bne.n	80095e4 <tcp_process+0x738>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	68da      	ldr	r2, [r3, #12]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	60da      	str	r2, [r3, #12]
 80095e2:	e005      	b.n	80095f0 <tcp_process+0x744>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	60fb      	str	r3, [r7, #12]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1ef      	bne.n	80095d0 <tcp_process+0x724>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	60da      	str	r2, [r3, #12]
 80095f6:	4b1f      	ldr	r3, [pc, #124]	; (8009674 <tcp_process+0x7c8>)
 80095f8:	2201      	movs	r2, #1
 80095fa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	220a      	movs	r2, #10
 8009600:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009602:	4b1d      	ldr	r3, [pc, #116]	; (8009678 <tcp_process+0x7cc>)
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	60da      	str	r2, [r3, #12]
 800960a:	4a1b      	ldr	r2, [pc, #108]	; (8009678 <tcp_process+0x7cc>)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6013      	str	r3, [r2, #0]
 8009610:	f002 fc4a 	bl	800bea8 <tcp_timer_needed>
      }
      break;
 8009614:	e026      	b.n	8009664 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f93c 	bl	8009894 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800961c:	4b17      	ldr	r3, [pc, #92]	; (800967c <tcp_process+0x7d0>)
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	f003 0310 	and.w	r3, r3, #16
 8009624:	2b00      	cmp	r3, #0
 8009626:	d01f      	beq.n	8009668 <tcp_process+0x7bc>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800962c:	4b14      	ldr	r3, [pc, #80]	; (8009680 <tcp_process+0x7d4>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	429a      	cmp	r2, r3
 8009632:	d119      	bne.n	8009668 <tcp_process+0x7bc>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009638:	2b00      	cmp	r3, #0
 800963a:	d115      	bne.n	8009668 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800963c:	4b11      	ldr	r3, [pc, #68]	; (8009684 <tcp_process+0x7d8>)
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	f043 0310 	orr.w	r3, r3, #16
 8009644:	b2da      	uxtb	r2, r3
 8009646:	4b0f      	ldr	r3, [pc, #60]	; (8009684 <tcp_process+0x7d8>)
 8009648:	701a      	strb	r2, [r3, #0]
      }
      break;
 800964a:	e00d      	b.n	8009668 <tcp_process+0x7bc>
    default:
      break;
 800964c:	bf00      	nop
 800964e:	e00c      	b.n	800966a <tcp_process+0x7be>
      break;
 8009650:	bf00      	nop
 8009652:	e00a      	b.n	800966a <tcp_process+0x7be>
      break;
 8009654:	bf00      	nop
 8009656:	e008      	b.n	800966a <tcp_process+0x7be>
      break;
 8009658:	bf00      	nop
 800965a:	e006      	b.n	800966a <tcp_process+0x7be>
      break;
 800965c:	bf00      	nop
 800965e:	e004      	b.n	800966a <tcp_process+0x7be>
      break;
 8009660:	bf00      	nop
 8009662:	e002      	b.n	800966a <tcp_process+0x7be>
      break;
 8009664:	bf00      	nop
 8009666:	e000      	b.n	800966a <tcp_process+0x7be>
      break;
 8009668:	bf00      	nop
  }
  return ERR_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3724      	adds	r7, #36	; 0x24
 8009670:	46bd      	mov	sp, r7
 8009672:	bd90      	pop	{r4, r7, pc}
 8009674:	20008350 	.word	0x20008350
 8009678:	2000834c 	.word	0x2000834c
 800967c:	20008380 	.word	0x20008380
 8009680:	20008378 	.word	0x20008378
 8009684:	20008381 	.word	0x20008381
 8009688:	20008348 	.word	0x20008348

0800968c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800968c:	b590      	push	{r4, r7, lr}
 800968e:	b085      	sub	sp, #20
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d106      	bne.n	80096aa <tcp_oos_insert_segment+0x1e>
 800969c:	4b3b      	ldr	r3, [pc, #236]	; (800978c <tcp_oos_insert_segment+0x100>)
 800969e:	f240 421f 	movw	r2, #1055	; 0x41f
 80096a2:	493b      	ldr	r1, [pc, #236]	; (8009790 <tcp_oos_insert_segment+0x104>)
 80096a4:	483b      	ldr	r0, [pc, #236]	; (8009794 <tcp_oos_insert_segment+0x108>)
 80096a6:	f005 fa2d 	bl	800eb04 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	899b      	ldrh	r3, [r3, #12]
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7fb fcb0 	bl	8005018 <lwip_htons>
 80096b8:	4603      	mov	r3, r0
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	f003 0301 	and.w	r3, r3, #1
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d028      	beq.n	8009716 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80096c4:	6838      	ldr	r0, [r7, #0]
 80096c6:	f7fe fa63 	bl	8007b90 <tcp_segs_free>
    next = NULL;
 80096ca:	2300      	movs	r3, #0
 80096cc:	603b      	str	r3, [r7, #0]
 80096ce:	e056      	b.n	800977e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	899b      	ldrh	r3, [r3, #12]
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fb fc9d 	bl	8005018 <lwip_htons>
 80096de:	4603      	mov	r3, r0
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	f003 0301 	and.w	r3, r3, #1
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00d      	beq.n	8009706 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	899b      	ldrh	r3, [r3, #12]
 80096f0:	b29c      	uxth	r4, r3
 80096f2:	2001      	movs	r0, #1
 80096f4:	f7fb fc90 	bl	8005018 <lwip_htons>
 80096f8:	4603      	mov	r3, r0
 80096fa:	461a      	mov	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	4322      	orrs	r2, r4
 8009702:	b292      	uxth	r2, r2
 8009704:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f7fe fa52 	bl	8007bba <tcp_seg_free>
    while (next &&
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d00e      	beq.n	800973a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	891b      	ldrh	r3, [r3, #8]
 8009720:	461a      	mov	r2, r3
 8009722:	4b1d      	ldr	r3, [pc, #116]	; (8009798 <tcp_oos_insert_segment+0x10c>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	441a      	add	r2, r3
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	6839      	ldr	r1, [r7, #0]
 8009730:	8909      	ldrh	r1, [r1, #8]
 8009732:	440b      	add	r3, r1
 8009734:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009736:	2b00      	cmp	r3, #0
 8009738:	daca      	bge.n	80096d0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d01e      	beq.n	800977e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	891b      	ldrh	r3, [r3, #8]
 8009744:	461a      	mov	r2, r3
 8009746:	4b14      	ldr	r3, [pc, #80]	; (8009798 <tcp_oos_insert_segment+0x10c>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	441a      	add	r2, r3
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009754:	2b00      	cmp	r3, #0
 8009756:	dd12      	ble.n	800977e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	b29a      	uxth	r2, r3
 8009760:	4b0d      	ldr	r3, [pc, #52]	; (8009798 <tcp_oos_insert_segment+0x10c>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	b29b      	uxth	r3, r3
 8009766:	1ad3      	subs	r3, r2, r3
 8009768:	b29a      	uxth	r2, r3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	685a      	ldr	r2, [r3, #4]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	891b      	ldrh	r3, [r3, #8]
 8009776:	4619      	mov	r1, r3
 8009778:	4610      	mov	r0, r2
 800977a:	f7fc fe25 	bl	80063c8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	683a      	ldr	r2, [r7, #0]
 8009782:	601a      	str	r2, [r3, #0]
}
 8009784:	bf00      	nop
 8009786:	3714      	adds	r7, #20
 8009788:	46bd      	mov	sp, r7
 800978a:	bd90      	pop	{r4, r7, pc}
 800978c:	08011178 	.word	0x08011178
 8009790:	08011438 	.word	0x08011438
 8009794:	080111c4 	.word	0x080111c4
 8009798:	20008374 	.word	0x20008374

0800979c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800979c:	b5b0      	push	{r4, r5, r7, lr}
 800979e:	b086      	sub	sp, #24
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
 80097a8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80097aa:	e03e      	b.n	800982a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7fd f812 	bl	80067e4 <pbuf_clen>
 80097c0:	4603      	mov	r3, r0
 80097c2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80097ca:	8a7a      	ldrh	r2, [r7, #18]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d906      	bls.n	80097de <tcp_free_acked_segments+0x42>
 80097d0:	4b2a      	ldr	r3, [pc, #168]	; (800987c <tcp_free_acked_segments+0xe0>)
 80097d2:	f240 4257 	movw	r2, #1111	; 0x457
 80097d6:	492a      	ldr	r1, [pc, #168]	; (8009880 <tcp_free_acked_segments+0xe4>)
 80097d8:	482a      	ldr	r0, [pc, #168]	; (8009884 <tcp_free_acked_segments+0xe8>)
 80097da:	f005 f993 	bl	800eb04 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80097e4:	8a7b      	ldrh	r3, [r7, #18]
 80097e6:	1ad3      	subs	r3, r2, r3
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	891a      	ldrh	r2, [r3, #8]
 80097f4:	4b24      	ldr	r3, [pc, #144]	; (8009888 <tcp_free_acked_segments+0xec>)
 80097f6:	881b      	ldrh	r3, [r3, #0]
 80097f8:	4413      	add	r3, r2
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	4b22      	ldr	r3, [pc, #136]	; (8009888 <tcp_free_acked_segments+0xec>)
 80097fe:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009800:	6978      	ldr	r0, [r7, #20]
 8009802:	f7fe f9da 	bl	8007bba <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00c      	beq.n	800982a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d109      	bne.n	800982a <tcp_free_acked_segments+0x8e>
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d106      	bne.n	800982a <tcp_free_acked_segments+0x8e>
 800981c:	4b17      	ldr	r3, [pc, #92]	; (800987c <tcp_free_acked_segments+0xe0>)
 800981e:	f240 4261 	movw	r2, #1121	; 0x461
 8009822:	491a      	ldr	r1, [pc, #104]	; (800988c <tcp_free_acked_segments+0xf0>)
 8009824:	4817      	ldr	r0, [pc, #92]	; (8009884 <tcp_free_acked_segments+0xe8>)
 8009826:	f005 f96d 	bl	800eb04 <iprintf>
  while (seg_list != NULL &&
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d020      	beq.n	8009872 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	4618      	mov	r0, r3
 8009838:	f7fb fc03 	bl	8005042 <lwip_htonl>
 800983c:	4604      	mov	r4, r0
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	891b      	ldrh	r3, [r3, #8]
 8009842:	461d      	mov	r5, r3
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	899b      	ldrh	r3, [r3, #12]
 800984a:	b29b      	uxth	r3, r3
 800984c:	4618      	mov	r0, r3
 800984e:	f7fb fbe3 	bl	8005018 <lwip_htons>
 8009852:	4603      	mov	r3, r0
 8009854:	b2db      	uxtb	r3, r3
 8009856:	f003 0303 	and.w	r3, r3, #3
 800985a:	2b00      	cmp	r3, #0
 800985c:	d001      	beq.n	8009862 <tcp_free_acked_segments+0xc6>
 800985e:	2301      	movs	r3, #1
 8009860:	e000      	b.n	8009864 <tcp_free_acked_segments+0xc8>
 8009862:	2300      	movs	r3, #0
 8009864:	442b      	add	r3, r5
 8009866:	18e2      	adds	r2, r4, r3
 8009868:	4b09      	ldr	r3, [pc, #36]	; (8009890 <tcp_free_acked_segments+0xf4>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800986e:	2b00      	cmp	r3, #0
 8009870:	dd9c      	ble.n	80097ac <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009872:	68bb      	ldr	r3, [r7, #8]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3718      	adds	r7, #24
 8009878:	46bd      	mov	sp, r7
 800987a:	bdb0      	pop	{r4, r5, r7, pc}
 800987c:	08011178 	.word	0x08011178
 8009880:	08011460 	.word	0x08011460
 8009884:	080111c4 	.word	0x080111c4
 8009888:	2000837c 	.word	0x2000837c
 800988c:	08011488 	.word	0x08011488
 8009890:	20008378 	.word	0x20008378

08009894 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009894:	b5b0      	push	{r4, r5, r7, lr}
 8009896:	b094      	sub	sp, #80	; 0x50
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800989c:	2300      	movs	r3, #0
 800989e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d106      	bne.n	80098b4 <tcp_receive+0x20>
 80098a6:	4b91      	ldr	r3, [pc, #580]	; (8009aec <tcp_receive+0x258>)
 80098a8:	f240 427b 	movw	r2, #1147	; 0x47b
 80098ac:	4990      	ldr	r1, [pc, #576]	; (8009af0 <tcp_receive+0x25c>)
 80098ae:	4891      	ldr	r0, [pc, #580]	; (8009af4 <tcp_receive+0x260>)
 80098b0:	f005 f928 	bl	800eb04 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	7d1b      	ldrb	r3, [r3, #20]
 80098b8:	2b03      	cmp	r3, #3
 80098ba:	d806      	bhi.n	80098ca <tcp_receive+0x36>
 80098bc:	4b8b      	ldr	r3, [pc, #556]	; (8009aec <tcp_receive+0x258>)
 80098be:	f240 427c 	movw	r2, #1148	; 0x47c
 80098c2:	498d      	ldr	r1, [pc, #564]	; (8009af8 <tcp_receive+0x264>)
 80098c4:	488b      	ldr	r0, [pc, #556]	; (8009af4 <tcp_receive+0x260>)
 80098c6:	f005 f91d 	bl	800eb04 <iprintf>

  if (flags & TCP_ACK) {
 80098ca:	4b8c      	ldr	r3, [pc, #560]	; (8009afc <tcp_receive+0x268>)
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	f003 0310 	and.w	r3, r3, #16
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f000 8264 	beq.w	8009da0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80098de:	461a      	mov	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098e4:	4413      	add	r3, r2
 80098e6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098ec:	4b84      	ldr	r3, [pc, #528]	; (8009b00 <tcp_receive+0x26c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	1ad3      	subs	r3, r2, r3
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	db1b      	blt.n	800992e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098fa:	4b81      	ldr	r3, [pc, #516]	; (8009b00 <tcp_receive+0x26c>)
 80098fc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80098fe:	429a      	cmp	r2, r3
 8009900:	d106      	bne.n	8009910 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009906:	4b7f      	ldr	r3, [pc, #508]	; (8009b04 <tcp_receive+0x270>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	2b00      	cmp	r3, #0
 800990e:	db0e      	blt.n	800992e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009914:	4b7b      	ldr	r3, [pc, #492]	; (8009b04 <tcp_receive+0x270>)
 8009916:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009918:	429a      	cmp	r2, r3
 800991a:	d125      	bne.n	8009968 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800991c:	4b7a      	ldr	r3, [pc, #488]	; (8009b08 <tcp_receive+0x274>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	89db      	ldrh	r3, [r3, #14]
 8009922:	b29a      	uxth	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800992a:	429a      	cmp	r2, r3
 800992c:	d91c      	bls.n	8009968 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800992e:	4b76      	ldr	r3, [pc, #472]	; (8009b08 <tcp_receive+0x274>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	89db      	ldrh	r3, [r3, #14]
 8009934:	b29a      	uxth	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009948:	429a      	cmp	r2, r3
 800994a:	d205      	bcs.n	8009958 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009958:	4b69      	ldr	r3, [pc, #420]	; (8009b00 <tcp_receive+0x26c>)
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009960:	4b68      	ldr	r3, [pc, #416]	; (8009b04 <tcp_receive+0x270>)
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009968:	4b66      	ldr	r3, [pc, #408]	; (8009b04 <tcp_receive+0x270>)
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009970:	1ad3      	subs	r3, r2, r3
 8009972:	2b00      	cmp	r3, #0
 8009974:	dc58      	bgt.n	8009a28 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009976:	4b65      	ldr	r3, [pc, #404]	; (8009b0c <tcp_receive+0x278>)
 8009978:	881b      	ldrh	r3, [r3, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d14b      	bne.n	8009a16 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009988:	4413      	add	r3, r2
 800998a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800998c:	429a      	cmp	r2, r3
 800998e:	d142      	bne.n	8009a16 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009996:	2b00      	cmp	r3, #0
 8009998:	db3d      	blt.n	8009a16 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800999e:	4b59      	ldr	r3, [pc, #356]	; (8009b04 <tcp_receive+0x270>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d137      	bne.n	8009a16 <tcp_receive+0x182>
              found_dupack = 1;
 80099a6:	2301      	movs	r3, #1
 80099a8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80099b0:	2bff      	cmp	r3, #255	; 0xff
 80099b2:	d007      	beq.n	80099c4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80099ba:	3301      	adds	r3, #1
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80099ca:	2b03      	cmp	r3, #3
 80099cc:	d91b      	bls.n	8009a06 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099d8:	4413      	add	r3, r2
 80099da:	b29a      	uxth	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d30a      	bcc.n	80099fc <tcp_receive+0x168>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099f0:	4413      	add	r3, r2
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80099fa:	e004      	b.n	8009a06 <tcp_receive+0x172>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	d902      	bls.n	8009a16 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f001 feeb 	bl	800b7ec <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f040 8161 	bne.w	8009ce0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a26:	e15b      	b.n	8009ce0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009a28:	4b36      	ldr	r3, [pc, #216]	; (8009b04 <tcp_receive+0x270>)
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	3b01      	subs	r3, #1
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f2c0 814e 	blt.w	8009cd6 <tcp_receive+0x442>
 8009a3a:	4b32      	ldr	r3, [pc, #200]	; (8009b04 <tcp_receive+0x270>)
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a42:	1ad3      	subs	r3, r2, r3
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f300 8146 	bgt.w	8009cd6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	8b5b      	ldrh	r3, [r3, #26]
 8009a4e:	f003 0304 	and.w	r3, r3, #4
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d010      	beq.n	8009a78 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	8b5b      	ldrh	r3, [r3, #26]
 8009a5a:	f023 0304 	bic.w	r3, r3, #4
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009a86:	10db      	asrs	r3, r3, #3
 8009a88:	b21b      	sxth	r3, r3
 8009a8a:	b29a      	uxth	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	4413      	add	r3, r2
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	b21a      	sxth	r2, r3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009aa0:	4b18      	ldr	r3, [pc, #96]	; (8009b04 <tcp_receive+0x270>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	1ad3      	subs	r3, r2, r3
 8009aae:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009ab8:	4b12      	ldr	r3, [pc, #72]	; (8009b04 <tcp_receive+0x270>)
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	7d1b      	ldrb	r3, [r3, #20]
 8009ac4:	2b03      	cmp	r3, #3
 8009ac6:	f240 8097 	bls.w	8009bf8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d245      	bcs.n	8009b66 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	8b5b      	ldrh	r3, [r3, #26]
 8009ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d014      	beq.n	8009b10 <tcp_receive+0x27c>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e013      	b.n	8009b12 <tcp_receive+0x27e>
 8009aea:	bf00      	nop
 8009aec:	08011178 	.word	0x08011178
 8009af0:	080114a8 	.word	0x080114a8
 8009af4:	080111c4 	.word	0x080111c4
 8009af8:	080114c4 	.word	0x080114c4
 8009afc:	20008380 	.word	0x20008380
 8009b00:	20008374 	.word	0x20008374
 8009b04:	20008378 	.word	0x20008378
 8009b08:	20008364 	.word	0x20008364
 8009b0c:	2000837e 	.word	0x2000837e
 8009b10:	2302      	movs	r3, #2
 8009b12:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009b16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b20:	fb12 f303 	smulbb	r3, r2, r3
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	bf28      	it	cs
 8009b2c:	4613      	movcs	r3, r2
 8009b2e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009b36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009b38:	4413      	add	r3, r2
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d309      	bcc.n	8009b5a <tcp_receive+0x2c6>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009b4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009b4e:	4413      	add	r3, r2
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009b58:	e04e      	b.n	8009bf8 <tcp_receive+0x364>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b60:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009b64:	e048      	b.n	8009bf8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009b6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009b6e:	4413      	add	r3, r2
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d309      	bcc.n	8009b90 <tcp_receive+0x2fc>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009b82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009b84:	4413      	add	r3, r2
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009b8e:	e004      	b.n	8009b9a <tcp_receive+0x306>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d326      	bcc.n	8009bf8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009bca:	4413      	add	r3, r2
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d30a      	bcc.n	8009bee <tcp_receive+0x35a>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009be2:	4413      	add	r3, r2
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009bec:	e004      	b.n	8009bf8 <tcp_receive+0x364>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009bf4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c00:	4a98      	ldr	r2, [pc, #608]	; (8009e64 <tcp_receive+0x5d0>)
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7ff fdca 	bl	800979c <tcp_free_acked_segments>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c16:	4a94      	ldr	r2, [pc, #592]	; (8009e68 <tcp_receive+0x5d4>)
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f7ff fdbf 	bl	800979c <tcp_free_acked_segments>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d104      	bne.n	8009c36 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c32:	861a      	strh	r2, [r3, #48]	; 0x30
 8009c34:	e002      	b.n	8009c3c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d103      	bne.n	8009c52 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009c58:	4b84      	ldr	r3, [pc, #528]	; (8009e6c <tcp_receive+0x5d8>)
 8009c5a:	881b      	ldrh	r3, [r3, #0]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	8b5b      	ldrh	r3, [r3, #26]
 8009c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d035      	beq.n	8009cde <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d118      	bne.n	8009cac <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00c      	beq.n	8009c9c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fb f9d7 	bl	8005042 <lwip_htonl>
 8009c94:	4603      	mov	r3, r0
 8009c96:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	dc20      	bgt.n	8009cde <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	8b5b      	ldrh	r3, [r3, #26]
 8009ca0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009caa:	e018      	b.n	8009cde <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fb f9c2 	bl	8005042 <lwip_htonl>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	1ae3      	subs	r3, r4, r3
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	dc0b      	bgt.n	8009cde <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	8b5b      	ldrh	r3, [r3, #26]
 8009cca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009cd4:	e003      	b.n	8009cde <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f001 ff76 	bl	800bbc8 <tcp_send_empty_ack>
 8009cdc:	e000      	b.n	8009ce0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009cde:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d05b      	beq.n	8009da0 <tcp_receive+0x50c>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cec:	4b60      	ldr	r3, [pc, #384]	; (8009e70 <tcp_receive+0x5dc>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	da54      	bge.n	8009da0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009cf6:	4b5f      	ldr	r3, [pc, #380]	; (8009e74 <tcp_receive+0x5e0>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009d0a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009d14:	10db      	asrs	r3, r3, #3
 8009d16:	b21b      	sxth	r3, r3
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009d28:	b29a      	uxth	r2, r3
 8009d2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009d2e:	4413      	add	r3, r2
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	b21a      	sxth	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009d38:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	da05      	bge.n	8009d4c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009d40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009d44:	425b      	negs	r3, r3
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009d4c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009d56:	109b      	asrs	r3, r3, #2
 8009d58:	b21b      	sxth	r3, r3
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	1ad3      	subs	r3, r2, r3
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009d70:	4413      	add	r3, r2
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	b21a      	sxth	r2, r3
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009d80:	10db      	asrs	r3, r3, #3
 8009d82:	b21b      	sxth	r3, r3
 8009d84:	b29a      	uxth	r2, r3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	4413      	add	r3, r2
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	b21a      	sxth	r2, r3
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009da0:	4b35      	ldr	r3, [pc, #212]	; (8009e78 <tcp_receive+0x5e4>)
 8009da2:	881b      	ldrh	r3, [r3, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f000 84e2 	beq.w	800a76e <tcp_receive+0xeda>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	7d1b      	ldrb	r3, [r3, #20]
 8009dae:	2b06      	cmp	r3, #6
 8009db0:	f200 84dd 	bhi.w	800a76e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009db8:	4b30      	ldr	r3, [pc, #192]	; (8009e7c <tcp_receive+0x5e8>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	f2c0 808f 	blt.w	8009ee4 <tcp_receive+0x650>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dca:	4b2b      	ldr	r3, [pc, #172]	; (8009e78 <tcp_receive+0x5e4>)
 8009dcc:	881b      	ldrh	r3, [r3, #0]
 8009dce:	4619      	mov	r1, r3
 8009dd0:	4b2a      	ldr	r3, [pc, #168]	; (8009e7c <tcp_receive+0x5e8>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	440b      	add	r3, r1
 8009dd6:	1ad3      	subs	r3, r2, r3
 8009dd8:	3301      	adds	r3, #1
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f300 8082 	bgt.w	8009ee4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009de0:	4b27      	ldr	r3, [pc, #156]	; (8009e80 <tcp_receive+0x5ec>)
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dea:	4b24      	ldr	r3, [pc, #144]	; (8009e7c <tcp_receive+0x5e8>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	1ad3      	subs	r3, r2, r3
 8009df0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009df2:	4b23      	ldr	r3, [pc, #140]	; (8009e80 <tcp_receive+0x5ec>)
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d106      	bne.n	8009e08 <tcp_receive+0x574>
 8009dfa:	4b22      	ldr	r3, [pc, #136]	; (8009e84 <tcp_receive+0x5f0>)
 8009dfc:	f240 5294 	movw	r2, #1428	; 0x594
 8009e00:	4921      	ldr	r1, [pc, #132]	; (8009e88 <tcp_receive+0x5f4>)
 8009e02:	4822      	ldr	r0, [pc, #136]	; (8009e8c <tcp_receive+0x5f8>)
 8009e04:	f004 fe7e 	bl	800eb04 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d906      	bls.n	8009e20 <tcp_receive+0x58c>
 8009e12:	4b1c      	ldr	r3, [pc, #112]	; (8009e84 <tcp_receive+0x5f0>)
 8009e14:	f240 5295 	movw	r2, #1429	; 0x595
 8009e18:	491d      	ldr	r1, [pc, #116]	; (8009e90 <tcp_receive+0x5fc>)
 8009e1a:	481c      	ldr	r0, [pc, #112]	; (8009e8c <tcp_receive+0x5f8>)
 8009e1c:	f004 fe72 	bl	800eb04 <iprintf>
      off = (u16_t)off32;
 8009e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e22:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009e26:	4b16      	ldr	r3, [pc, #88]	; (8009e80 <tcp_receive+0x5ec>)
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	891b      	ldrh	r3, [r3, #8]
 8009e2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d906      	bls.n	8009e42 <tcp_receive+0x5ae>
 8009e34:	4b13      	ldr	r3, [pc, #76]	; (8009e84 <tcp_receive+0x5f0>)
 8009e36:	f240 5297 	movw	r2, #1431	; 0x597
 8009e3a:	4916      	ldr	r1, [pc, #88]	; (8009e94 <tcp_receive+0x600>)
 8009e3c:	4813      	ldr	r0, [pc, #76]	; (8009e8c <tcp_receive+0x5f8>)
 8009e3e:	f004 fe61 	bl	800eb04 <iprintf>
      inseg.len -= off;
 8009e42:	4b0f      	ldr	r3, [pc, #60]	; (8009e80 <tcp_receive+0x5ec>)
 8009e44:	891a      	ldrh	r2, [r3, #8]
 8009e46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009e4a:	1ad3      	subs	r3, r2, r3
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	4b0c      	ldr	r3, [pc, #48]	; (8009e80 <tcp_receive+0x5ec>)
 8009e50:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009e52:	4b0b      	ldr	r3, [pc, #44]	; (8009e80 <tcp_receive+0x5ec>)
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	891a      	ldrh	r2, [r3, #8]
 8009e58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009e60:	e02a      	b.n	8009eb8 <tcp_receive+0x624>
 8009e62:	bf00      	nop
 8009e64:	080114e0 	.word	0x080114e0
 8009e68:	080114e8 	.word	0x080114e8
 8009e6c:	2000837c 	.word	0x2000837c
 8009e70:	20008378 	.word	0x20008378
 8009e74:	2000833c 	.word	0x2000833c
 8009e78:	2000837e 	.word	0x2000837e
 8009e7c:	20008374 	.word	0x20008374
 8009e80:	20008354 	.word	0x20008354
 8009e84:	08011178 	.word	0x08011178
 8009e88:	080114f0 	.word	0x080114f0
 8009e8c:	080111c4 	.word	0x080111c4
 8009e90:	08011500 	.word	0x08011500
 8009e94:	08011510 	.word	0x08011510
        off -= p->len;
 8009e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e9a:	895b      	ldrh	r3, [r3, #10]
 8009e9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ea8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009eaa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eae:	2200      	movs	r2, #0
 8009eb0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eba:	895b      	ldrh	r3, [r3, #10]
 8009ebc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d8e9      	bhi.n	8009e98 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009ec4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009ec8:	4619      	mov	r1, r3
 8009eca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009ecc:	f7fc fb7c 	bl	80065c8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed4:	4a91      	ldr	r2, [pc, #580]	; (800a11c <tcp_receive+0x888>)
 8009ed6:	6013      	str	r3, [r2, #0]
 8009ed8:	4b91      	ldr	r3, [pc, #580]	; (800a120 <tcp_receive+0x88c>)
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	4a8f      	ldr	r2, [pc, #572]	; (800a11c <tcp_receive+0x888>)
 8009ede:	6812      	ldr	r2, [r2, #0]
 8009ee0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009ee2:	e00d      	b.n	8009f00 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009ee4:	4b8d      	ldr	r3, [pc, #564]	; (800a11c <tcp_receive+0x888>)
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eec:	1ad3      	subs	r3, r2, r3
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	da06      	bge.n	8009f00 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	8b5b      	ldrh	r3, [r3, #26]
 8009ef6:	f043 0302 	orr.w	r3, r3, #2
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009f00:	4b86      	ldr	r3, [pc, #536]	; (800a11c <tcp_receive+0x888>)
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f08:	1ad3      	subs	r3, r2, r3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	f2c0 842a 	blt.w	800a764 <tcp_receive+0xed0>
 8009f10:	4b82      	ldr	r3, [pc, #520]	; (800a11c <tcp_receive+0x888>)
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f18:	6879      	ldr	r1, [r7, #4]
 8009f1a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009f1c:	440b      	add	r3, r1
 8009f1e:	1ad3      	subs	r3, r2, r3
 8009f20:	3301      	adds	r3, #1
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f300 841e 	bgt.w	800a764 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f2c:	4b7b      	ldr	r3, [pc, #492]	; (800a11c <tcp_receive+0x888>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	f040 829a 	bne.w	800a46a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009f36:	4b7a      	ldr	r3, [pc, #488]	; (800a120 <tcp_receive+0x88c>)
 8009f38:	891c      	ldrh	r4, [r3, #8]
 8009f3a:	4b79      	ldr	r3, [pc, #484]	; (800a120 <tcp_receive+0x88c>)
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	899b      	ldrh	r3, [r3, #12]
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fb f868 	bl	8005018 <lwip_htons>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	f003 0303 	and.w	r3, r3, #3
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d001      	beq.n	8009f58 <tcp_receive+0x6c4>
 8009f54:	2301      	movs	r3, #1
 8009f56:	e000      	b.n	8009f5a <tcp_receive+0x6c6>
 8009f58:	2300      	movs	r3, #0
 8009f5a:	4423      	add	r3, r4
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	4b71      	ldr	r3, [pc, #452]	; (800a124 <tcp_receive+0x890>)
 8009f60:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009f66:	4b6f      	ldr	r3, [pc, #444]	; (800a124 <tcp_receive+0x890>)
 8009f68:	881b      	ldrh	r3, [r3, #0]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d275      	bcs.n	800a05a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009f6e:	4b6c      	ldr	r3, [pc, #432]	; (800a120 <tcp_receive+0x88c>)
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	899b      	ldrh	r3, [r3, #12]
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fb f84e 	bl	8005018 <lwip_htons>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	f003 0301 	and.w	r3, r3, #1
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d01f      	beq.n	8009fc8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009f88:	4b65      	ldr	r3, [pc, #404]	; (800a120 <tcp_receive+0x88c>)
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	899b      	ldrh	r3, [r3, #12]
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	b21b      	sxth	r3, r3
 8009f92:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009f96:	b21c      	sxth	r4, r3
 8009f98:	4b61      	ldr	r3, [pc, #388]	; (800a120 <tcp_receive+0x88c>)
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	899b      	ldrh	r3, [r3, #12]
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7fb f839 	bl	8005018 <lwip_htons>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fb f830 	bl	8005018 <lwip_htons>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	b21b      	sxth	r3, r3
 8009fbc:	4323      	orrs	r3, r4
 8009fbe:	b21a      	sxth	r2, r3
 8009fc0:	4b57      	ldr	r3, [pc, #348]	; (800a120 <tcp_receive+0x88c>)
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	b292      	uxth	r2, r2
 8009fc6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009fcc:	4b54      	ldr	r3, [pc, #336]	; (800a120 <tcp_receive+0x88c>)
 8009fce:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009fd0:	4b53      	ldr	r3, [pc, #332]	; (800a120 <tcp_receive+0x88c>)
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	899b      	ldrh	r3, [r3, #12]
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7fb f81d 	bl	8005018 <lwip_htons>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	f003 0302 	and.w	r3, r3, #2
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d005      	beq.n	8009ff6 <tcp_receive+0x762>
            inseg.len -= 1;
 8009fea:	4b4d      	ldr	r3, [pc, #308]	; (800a120 <tcp_receive+0x88c>)
 8009fec:	891b      	ldrh	r3, [r3, #8]
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	4b4b      	ldr	r3, [pc, #300]	; (800a120 <tcp_receive+0x88c>)
 8009ff4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009ff6:	4b4a      	ldr	r3, [pc, #296]	; (800a120 <tcp_receive+0x88c>)
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	4a49      	ldr	r2, [pc, #292]	; (800a120 <tcp_receive+0x88c>)
 8009ffc:	8912      	ldrh	r2, [r2, #8]
 8009ffe:	4611      	mov	r1, r2
 800a000:	4618      	mov	r0, r3
 800a002:	f7fc f9e1 	bl	80063c8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a006:	4b46      	ldr	r3, [pc, #280]	; (800a120 <tcp_receive+0x88c>)
 800a008:	891c      	ldrh	r4, [r3, #8]
 800a00a:	4b45      	ldr	r3, [pc, #276]	; (800a120 <tcp_receive+0x88c>)
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	899b      	ldrh	r3, [r3, #12]
 800a010:	b29b      	uxth	r3, r3
 800a012:	4618      	mov	r0, r3
 800a014:	f7fb f800 	bl	8005018 <lwip_htons>
 800a018:	4603      	mov	r3, r0
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	f003 0303 	and.w	r3, r3, #3
 800a020:	2b00      	cmp	r3, #0
 800a022:	d001      	beq.n	800a028 <tcp_receive+0x794>
 800a024:	2301      	movs	r3, #1
 800a026:	e000      	b.n	800a02a <tcp_receive+0x796>
 800a028:	2300      	movs	r3, #0
 800a02a:	4423      	add	r3, r4
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	4b3d      	ldr	r3, [pc, #244]	; (800a124 <tcp_receive+0x890>)
 800a030:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a032:	4b3c      	ldr	r3, [pc, #240]	; (800a124 <tcp_receive+0x890>)
 800a034:	881b      	ldrh	r3, [r3, #0]
 800a036:	461a      	mov	r2, r3
 800a038:	4b38      	ldr	r3, [pc, #224]	; (800a11c <tcp_receive+0x888>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	441a      	add	r2, r3
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a042:	6879      	ldr	r1, [r7, #4]
 800a044:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a046:	440b      	add	r3, r1
 800a048:	429a      	cmp	r2, r3
 800a04a:	d006      	beq.n	800a05a <tcp_receive+0x7c6>
 800a04c:	4b36      	ldr	r3, [pc, #216]	; (800a128 <tcp_receive+0x894>)
 800a04e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a052:	4936      	ldr	r1, [pc, #216]	; (800a12c <tcp_receive+0x898>)
 800a054:	4836      	ldr	r0, [pc, #216]	; (800a130 <tcp_receive+0x89c>)
 800a056:	f004 fd55 	bl	800eb04 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a05e:	2b00      	cmp	r3, #0
 800a060:	f000 80e7 	beq.w	800a232 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a064:	4b2e      	ldr	r3, [pc, #184]	; (800a120 <tcp_receive+0x88c>)
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	899b      	ldrh	r3, [r3, #12]
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7fa ffd3 	bl	8005018 <lwip_htons>
 800a072:	4603      	mov	r3, r0
 800a074:	b2db      	uxtb	r3, r3
 800a076:	f003 0301 	and.w	r3, r3, #1
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d010      	beq.n	800a0a0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a07e:	e00a      	b.n	800a096 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a084:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f7fd fd92 	bl	8007bba <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d1f0      	bne.n	800a080 <tcp_receive+0x7ec>
 800a09e:	e0c8      	b.n	800a232 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a0a6:	e052      	b.n	800a14e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a0a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	899b      	ldrh	r3, [r3, #12]
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7fa ffb1 	bl	8005018 <lwip_htons>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	f003 0301 	and.w	r3, r3, #1
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d03d      	beq.n	800a13e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a0c2:	4b17      	ldr	r3, [pc, #92]	; (800a120 <tcp_receive+0x88c>)
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	899b      	ldrh	r3, [r3, #12]
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fa ffa4 	bl	8005018 <lwip_htons>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d130      	bne.n	800a13e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a0dc:	4b10      	ldr	r3, [pc, #64]	; (800a120 <tcp_receive+0x88c>)
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	899b      	ldrh	r3, [r3, #12]
 800a0e2:	b29c      	uxth	r4, r3
 800a0e4:	2001      	movs	r0, #1
 800a0e6:	f7fa ff97 	bl	8005018 <lwip_htons>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	4b0c      	ldr	r3, [pc, #48]	; (800a120 <tcp_receive+0x88c>)
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	4322      	orrs	r2, r4
 800a0f4:	b292      	uxth	r2, r2
 800a0f6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a0f8:	4b09      	ldr	r3, [pc, #36]	; (800a120 <tcp_receive+0x88c>)
 800a0fa:	891c      	ldrh	r4, [r3, #8]
 800a0fc:	4b08      	ldr	r3, [pc, #32]	; (800a120 <tcp_receive+0x88c>)
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	899b      	ldrh	r3, [r3, #12]
 800a102:	b29b      	uxth	r3, r3
 800a104:	4618      	mov	r0, r3
 800a106:	f7fa ff87 	bl	8005018 <lwip_htons>
 800a10a:	4603      	mov	r3, r0
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	f003 0303 	and.w	r3, r3, #3
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00e      	beq.n	800a134 <tcp_receive+0x8a0>
 800a116:	2301      	movs	r3, #1
 800a118:	e00d      	b.n	800a136 <tcp_receive+0x8a2>
 800a11a:	bf00      	nop
 800a11c:	20008374 	.word	0x20008374
 800a120:	20008354 	.word	0x20008354
 800a124:	2000837e 	.word	0x2000837e
 800a128:	08011178 	.word	0x08011178
 800a12c:	08011520 	.word	0x08011520
 800a130:	080111c4 	.word	0x080111c4
 800a134:	2300      	movs	r3, #0
 800a136:	4423      	add	r3, r4
 800a138:	b29a      	uxth	r2, r3
 800a13a:	4b98      	ldr	r3, [pc, #608]	; (800a39c <tcp_receive+0xb08>)
 800a13c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a13e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a140:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a148:	6938      	ldr	r0, [r7, #16]
 800a14a:	f7fd fd36 	bl	8007bba <tcp_seg_free>
            while (next &&
 800a14e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a150:	2b00      	cmp	r3, #0
 800a152:	d00e      	beq.n	800a172 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a154:	4b91      	ldr	r3, [pc, #580]	; (800a39c <tcp_receive+0xb08>)
 800a156:	881b      	ldrh	r3, [r3, #0]
 800a158:	461a      	mov	r2, r3
 800a15a:	4b91      	ldr	r3, [pc, #580]	; (800a3a0 <tcp_receive+0xb0c>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	441a      	add	r2, r3
 800a160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a168:	8909      	ldrh	r1, [r1, #8]
 800a16a:	440b      	add	r3, r1
 800a16c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a16e:	2b00      	cmp	r3, #0
 800a170:	da9a      	bge.n	800a0a8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a174:	2b00      	cmp	r3, #0
 800a176:	d059      	beq.n	800a22c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800a178:	4b88      	ldr	r3, [pc, #544]	; (800a39c <tcp_receive+0xb08>)
 800a17a:	881b      	ldrh	r3, [r3, #0]
 800a17c:	461a      	mov	r2, r3
 800a17e:	4b88      	ldr	r3, [pc, #544]	; (800a3a0 <tcp_receive+0xb0c>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	441a      	add	r2, r3
 800a184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	dd4d      	ble.n	800a22c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	b29a      	uxth	r2, r3
 800a198:	4b81      	ldr	r3, [pc, #516]	; (800a3a0 <tcp_receive+0xb0c>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	b29a      	uxth	r2, r3
 800a1a2:	4b80      	ldr	r3, [pc, #512]	; (800a3a4 <tcp_receive+0xb10>)
 800a1a4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a1a6:	4b7f      	ldr	r3, [pc, #508]	; (800a3a4 <tcp_receive+0xb10>)
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	899b      	ldrh	r3, [r3, #12]
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7fa ff32 	bl	8005018 <lwip_htons>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	f003 0302 	and.w	r3, r3, #2
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d005      	beq.n	800a1cc <tcp_receive+0x938>
                inseg.len -= 1;
 800a1c0:	4b78      	ldr	r3, [pc, #480]	; (800a3a4 <tcp_receive+0xb10>)
 800a1c2:	891b      	ldrh	r3, [r3, #8]
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	4b76      	ldr	r3, [pc, #472]	; (800a3a4 <tcp_receive+0xb10>)
 800a1ca:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a1cc:	4b75      	ldr	r3, [pc, #468]	; (800a3a4 <tcp_receive+0xb10>)
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	4a74      	ldr	r2, [pc, #464]	; (800a3a4 <tcp_receive+0xb10>)
 800a1d2:	8912      	ldrh	r2, [r2, #8]
 800a1d4:	4611      	mov	r1, r2
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7fc f8f6 	bl	80063c8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a1dc:	4b71      	ldr	r3, [pc, #452]	; (800a3a4 <tcp_receive+0xb10>)
 800a1de:	891c      	ldrh	r4, [r3, #8]
 800a1e0:	4b70      	ldr	r3, [pc, #448]	; (800a3a4 <tcp_receive+0xb10>)
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	899b      	ldrh	r3, [r3, #12]
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7fa ff15 	bl	8005018 <lwip_htons>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	f003 0303 	and.w	r3, r3, #3
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d001      	beq.n	800a1fe <tcp_receive+0x96a>
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e000      	b.n	800a200 <tcp_receive+0x96c>
 800a1fe:	2300      	movs	r3, #0
 800a200:	4423      	add	r3, r4
 800a202:	b29a      	uxth	r2, r3
 800a204:	4b65      	ldr	r3, [pc, #404]	; (800a39c <tcp_receive+0xb08>)
 800a206:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a208:	4b64      	ldr	r3, [pc, #400]	; (800a39c <tcp_receive+0xb08>)
 800a20a:	881b      	ldrh	r3, [r3, #0]
 800a20c:	461a      	mov	r2, r3
 800a20e:	4b64      	ldr	r3, [pc, #400]	; (800a3a0 <tcp_receive+0xb0c>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	441a      	add	r2, r3
 800a214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d006      	beq.n	800a22c <tcp_receive+0x998>
 800a21e:	4b62      	ldr	r3, [pc, #392]	; (800a3a8 <tcp_receive+0xb14>)
 800a220:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a224:	4961      	ldr	r1, [pc, #388]	; (800a3ac <tcp_receive+0xb18>)
 800a226:	4862      	ldr	r0, [pc, #392]	; (800a3b0 <tcp_receive+0xb1c>)
 800a228:	f004 fc6c 	bl	800eb04 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a230:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a232:	4b5a      	ldr	r3, [pc, #360]	; (800a39c <tcp_receive+0xb08>)
 800a234:	881b      	ldrh	r3, [r3, #0]
 800a236:	461a      	mov	r2, r3
 800a238:	4b59      	ldr	r3, [pc, #356]	; (800a3a0 <tcp_receive+0xb0c>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	441a      	add	r2, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a246:	4b55      	ldr	r3, [pc, #340]	; (800a39c <tcp_receive+0xb08>)
 800a248:	881b      	ldrh	r3, [r3, #0]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d206      	bcs.n	800a25c <tcp_receive+0x9c8>
 800a24e:	4b56      	ldr	r3, [pc, #344]	; (800a3a8 <tcp_receive+0xb14>)
 800a250:	f240 6207 	movw	r2, #1543	; 0x607
 800a254:	4957      	ldr	r1, [pc, #348]	; (800a3b4 <tcp_receive+0xb20>)
 800a256:	4856      	ldr	r0, [pc, #344]	; (800a3b0 <tcp_receive+0xb1c>)
 800a258:	f004 fc54 	bl	800eb04 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a260:	4b4e      	ldr	r3, [pc, #312]	; (800a39c <tcp_receive+0xb08>)
 800a262:	881b      	ldrh	r3, [r3, #0]
 800a264:	1ad3      	subs	r3, r2, r3
 800a266:	b29a      	uxth	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f7fc ffc5 	bl	80071fc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a272:	4b4c      	ldr	r3, [pc, #304]	; (800a3a4 <tcp_receive+0xb10>)
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	891b      	ldrh	r3, [r3, #8]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d006      	beq.n	800a28a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800a27c:	4b49      	ldr	r3, [pc, #292]	; (800a3a4 <tcp_receive+0xb10>)
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	4a4d      	ldr	r2, [pc, #308]	; (800a3b8 <tcp_receive+0xb24>)
 800a282:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a284:	4b47      	ldr	r3, [pc, #284]	; (800a3a4 <tcp_receive+0xb10>)
 800a286:	2200      	movs	r2, #0
 800a288:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a28a:	4b46      	ldr	r3, [pc, #280]	; (800a3a4 <tcp_receive+0xb10>)
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	899b      	ldrh	r3, [r3, #12]
 800a290:	b29b      	uxth	r3, r3
 800a292:	4618      	mov	r0, r3
 800a294:	f7fa fec0 	bl	8005018 <lwip_htons>
 800a298:	4603      	mov	r3, r0
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	f003 0301 	and.w	r3, r3, #1
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f000 80b8 	beq.w	800a416 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a2a6:	4b45      	ldr	r3, [pc, #276]	; (800a3bc <tcp_receive+0xb28>)
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	f043 0320 	orr.w	r3, r3, #32
 800a2ae:	b2da      	uxtb	r2, r3
 800a2b0:	4b42      	ldr	r3, [pc, #264]	; (800a3bc <tcp_receive+0xb28>)
 800a2b2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a2b4:	e0af      	b.n	800a416 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2ba:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	4a36      	ldr	r2, [pc, #216]	; (800a3a0 <tcp_receive+0xb0c>)
 800a2c6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	891b      	ldrh	r3, [r3, #8]
 800a2cc:	461c      	mov	r4, r3
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	899b      	ldrh	r3, [r3, #12]
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7fa fe9e 	bl	8005018 <lwip_htons>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	f003 0303 	and.w	r3, r3, #3
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d001      	beq.n	800a2ec <tcp_receive+0xa58>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e000      	b.n	800a2ee <tcp_receive+0xa5a>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	191a      	adds	r2, r3, r4
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f4:	441a      	add	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2fe:	461c      	mov	r4, r3
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	891b      	ldrh	r3, [r3, #8]
 800a304:	461d      	mov	r5, r3
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	899b      	ldrh	r3, [r3, #12]
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fa fe82 	bl	8005018 <lwip_htons>
 800a314:	4603      	mov	r3, r0
 800a316:	b2db      	uxtb	r3, r3
 800a318:	f003 0303 	and.w	r3, r3, #3
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d001      	beq.n	800a324 <tcp_receive+0xa90>
 800a320:	2301      	movs	r3, #1
 800a322:	e000      	b.n	800a326 <tcp_receive+0xa92>
 800a324:	2300      	movs	r3, #0
 800a326:	442b      	add	r3, r5
 800a328:	429c      	cmp	r4, r3
 800a32a:	d206      	bcs.n	800a33a <tcp_receive+0xaa6>
 800a32c:	4b1e      	ldr	r3, [pc, #120]	; (800a3a8 <tcp_receive+0xb14>)
 800a32e:	f240 622b 	movw	r2, #1579	; 0x62b
 800a332:	4923      	ldr	r1, [pc, #140]	; (800a3c0 <tcp_receive+0xb2c>)
 800a334:	481e      	ldr	r0, [pc, #120]	; (800a3b0 <tcp_receive+0xb1c>)
 800a336:	f004 fbe5 	bl	800eb04 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	891b      	ldrh	r3, [r3, #8]
 800a33e:	461c      	mov	r4, r3
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	899b      	ldrh	r3, [r3, #12]
 800a346:	b29b      	uxth	r3, r3
 800a348:	4618      	mov	r0, r3
 800a34a:	f7fa fe65 	bl	8005018 <lwip_htons>
 800a34e:	4603      	mov	r3, r0
 800a350:	b2db      	uxtb	r3, r3
 800a352:	f003 0303 	and.w	r3, r3, #3
 800a356:	2b00      	cmp	r3, #0
 800a358:	d001      	beq.n	800a35e <tcp_receive+0xaca>
 800a35a:	2301      	movs	r3, #1
 800a35c:	e000      	b.n	800a360 <tcp_receive+0xacc>
 800a35e:	2300      	movs	r3, #0
 800a360:	1919      	adds	r1, r3, r4
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a366:	b28b      	uxth	r3, r1
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	b29a      	uxth	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7fc ff43 	bl	80071fc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	891b      	ldrh	r3, [r3, #8]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d028      	beq.n	800a3d2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a380:	4b0d      	ldr	r3, [pc, #52]	; (800a3b8 <tcp_receive+0xb24>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d01d      	beq.n	800a3c4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800a388:	4b0b      	ldr	r3, [pc, #44]	; (800a3b8 <tcp_receive+0xb24>)
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	4619      	mov	r1, r3
 800a392:	4610      	mov	r0, r2
 800a394:	f7fc fa60 	bl	8006858 <pbuf_cat>
 800a398:	e018      	b.n	800a3cc <tcp_receive+0xb38>
 800a39a:	bf00      	nop
 800a39c:	2000837e 	.word	0x2000837e
 800a3a0:	20008374 	.word	0x20008374
 800a3a4:	20008354 	.word	0x20008354
 800a3a8:	08011178 	.word	0x08011178
 800a3ac:	08011558 	.word	0x08011558
 800a3b0:	080111c4 	.word	0x080111c4
 800a3b4:	08011594 	.word	0x08011594
 800a3b8:	20008384 	.word	0x20008384
 800a3bc:	20008381 	.word	0x20008381
 800a3c0:	080115b4 	.word	0x080115b4
            } else {
              recv_data = cseg->p;
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	4a70      	ldr	r2, [pc, #448]	; (800a58c <tcp_receive+0xcf8>)
 800a3ca:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	899b      	ldrh	r3, [r3, #12]
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fa fe1c 	bl	8005018 <lwip_htons>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	f003 0301 	and.w	r3, r3, #1
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00d      	beq.n	800a408 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a3ec:	4b68      	ldr	r3, [pc, #416]	; (800a590 <tcp_receive+0xcfc>)
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	f043 0320 	orr.w	r3, r3, #32
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	4b66      	ldr	r3, [pc, #408]	; (800a590 <tcp_receive+0xcfc>)
 800a3f8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	7d1b      	ldrb	r3, [r3, #20]
 800a3fe:	2b04      	cmp	r3, #4
 800a400:	d102      	bne.n	800a408 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2207      	movs	r2, #7
 800a406:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a410:	68b8      	ldr	r0, [r7, #8]
 800a412:	f7fd fbd2 	bl	8007bba <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d008      	beq.n	800a430 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	685a      	ldr	r2, [r3, #4]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a42a:	429a      	cmp	r2, r3
 800a42c:	f43f af43 	beq.w	800a2b6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	8b5b      	ldrh	r3, [r3, #26]
 800a434:	f003 0301 	and.w	r3, r3, #1
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00e      	beq.n	800a45a <tcp_receive+0xbc6>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	8b5b      	ldrh	r3, [r3, #26]
 800a440:	f023 0301 	bic.w	r3, r3, #1
 800a444:	b29a      	uxth	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	835a      	strh	r2, [r3, #26]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	8b5b      	ldrh	r3, [r3, #26]
 800a44e:	f043 0302 	orr.w	r3, r3, #2
 800a452:	b29a      	uxth	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a458:	e188      	b.n	800a76c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	8b5b      	ldrh	r3, [r3, #26]
 800a45e:	f043 0301 	orr.w	r3, r3, #1
 800a462:	b29a      	uxth	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a468:	e180      	b.n	800a76c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d106      	bne.n	800a480 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a472:	4848      	ldr	r0, [pc, #288]	; (800a594 <tcp_receive+0xd00>)
 800a474:	f7fd fbba 	bl	8007bec <tcp_seg_copy>
 800a478:	4602      	mov	r2, r0
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	675a      	str	r2, [r3, #116]	; 0x74
 800a47e:	e16d      	b.n	800a75c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a480:	2300      	movs	r3, #0
 800a482:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a488:	63bb      	str	r3, [r7, #56]	; 0x38
 800a48a:	e157      	b.n	800a73c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800a48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	685a      	ldr	r2, [r3, #4]
 800a492:	4b41      	ldr	r3, [pc, #260]	; (800a598 <tcp_receive+0xd04>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	429a      	cmp	r2, r3
 800a498:	d11d      	bne.n	800a4d6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a49a:	4b3e      	ldr	r3, [pc, #248]	; (800a594 <tcp_receive+0xd00>)
 800a49c:	891a      	ldrh	r2, [r3, #8]
 800a49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a0:	891b      	ldrh	r3, [r3, #8]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	f240 814f 	bls.w	800a746 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a4a8:	483a      	ldr	r0, [pc, #232]	; (800a594 <tcp_receive+0xd00>)
 800a4aa:	f7fd fb9f 	bl	8007bec <tcp_seg_copy>
 800a4ae:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f000 8149 	beq.w	800a74a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800a4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d003      	beq.n	800a4c6 <tcp_receive+0xc32>
                    prev->next = cseg;
 800a4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c0:	697a      	ldr	r2, [r7, #20]
 800a4c2:	601a      	str	r2, [r3, #0]
 800a4c4:	e002      	b.n	800a4cc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	697a      	ldr	r2, [r7, #20]
 800a4ca:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a4cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4ce:	6978      	ldr	r0, [r7, #20]
 800a4d0:	f7ff f8dc 	bl	800968c <tcp_oos_insert_segment>
                }
                break;
 800a4d4:	e139      	b.n	800a74a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d117      	bne.n	800a50c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a4dc:	4b2e      	ldr	r3, [pc, #184]	; (800a598 <tcp_receive+0xd04>)
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	1ad3      	subs	r3, r2, r3
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	da57      	bge.n	800a59c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a4ec:	4829      	ldr	r0, [pc, #164]	; (800a594 <tcp_receive+0xd00>)
 800a4ee:	f7fd fb7d 	bl	8007bec <tcp_seg_copy>
 800a4f2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a4f4:	69bb      	ldr	r3, [r7, #24]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	f000 8129 	beq.w	800a74e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	69ba      	ldr	r2, [r7, #24]
 800a500:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a502:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a504:	69b8      	ldr	r0, [r7, #24]
 800a506:	f7ff f8c1 	bl	800968c <tcp_oos_insert_segment>
                  }
                  break;
 800a50a:	e120      	b.n	800a74e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a50c:	4b22      	ldr	r3, [pc, #136]	; (800a598 <tcp_receive+0xd04>)
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	1ad3      	subs	r3, r2, r3
 800a518:	3b01      	subs	r3, #1
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	db3e      	blt.n	800a59c <tcp_receive+0xd08>
 800a51e:	4b1e      	ldr	r3, [pc, #120]	; (800a598 <tcp_receive+0xd04>)
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	3301      	adds	r3, #1
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	dc35      	bgt.n	800a59c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a530:	4818      	ldr	r0, [pc, #96]	; (800a594 <tcp_receive+0xd00>)
 800a532:	f7fd fb5b 	bl	8007bec <tcp_seg_copy>
 800a536:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f000 8109 	beq.w	800a752 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a548:	8912      	ldrh	r2, [r2, #8]
 800a54a:	441a      	add	r2, r3
 800a54c:	4b12      	ldr	r3, [pc, #72]	; (800a598 <tcp_receive+0xd04>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	2b00      	cmp	r3, #0
 800a554:	dd12      	ble.n	800a57c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a556:	4b10      	ldr	r3, [pc, #64]	; (800a598 <tcp_receive+0xd04>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	b29b      	uxth	r3, r3
 800a564:	1ad3      	subs	r3, r2, r3
 800a566:	b29a      	uxth	r2, r3
 800a568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a56a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a56c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a56e:	685a      	ldr	r2, [r3, #4]
 800a570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a572:	891b      	ldrh	r3, [r3, #8]
 800a574:	4619      	mov	r1, r3
 800a576:	4610      	mov	r0, r2
 800a578:	f7fb ff26 	bl	80063c8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a57e:	69fa      	ldr	r2, [r7, #28]
 800a580:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a582:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a584:	69f8      	ldr	r0, [r7, #28]
 800a586:	f7ff f881 	bl	800968c <tcp_oos_insert_segment>
                  }
                  break;
 800a58a:	e0e2      	b.n	800a752 <tcp_receive+0xebe>
 800a58c:	20008384 	.word	0x20008384
 800a590:	20008381 	.word	0x20008381
 800a594:	20008354 	.word	0x20008354
 800a598:	20008374 	.word	0x20008374
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f040 80c6 	bne.w	800a736 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a5aa:	4b80      	ldr	r3, [pc, #512]	; (800a7ac <tcp_receive+0xf18>)
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f340 80bd 	ble.w	800a736 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	899b      	ldrh	r3, [r3, #12]
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fa fd27 	bl	8005018 <lwip_htons>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	f003 0301 	and.w	r3, r3, #1
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f040 80bf 	bne.w	800a756 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a5d8:	4875      	ldr	r0, [pc, #468]	; (800a7b0 <tcp_receive+0xf1c>)
 800a5da:	f7fd fb07 	bl	8007bec <tcp_seg_copy>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f000 80b6 	beq.w	800a75a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5f6:	8912      	ldrh	r2, [r2, #8]
 800a5f8:	441a      	add	r2, r3
 800a5fa:	4b6c      	ldr	r3, [pc, #432]	; (800a7ac <tcp_receive+0xf18>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	1ad3      	subs	r3, r2, r3
 800a600:	2b00      	cmp	r3, #0
 800a602:	dd12      	ble.n	800a62a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a604:	4b69      	ldr	r3, [pc, #420]	; (800a7ac <tcp_receive+0xf18>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	b29a      	uxth	r2, r3
 800a60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	b29b      	uxth	r3, r3
 800a612:	1ad3      	subs	r3, r2, r3
 800a614:	b29a      	uxth	r2, r3
 800a616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a618:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61c:	685a      	ldr	r2, [r3, #4]
 800a61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a620:	891b      	ldrh	r3, [r3, #8]
 800a622:	4619      	mov	r1, r3
 800a624:	4610      	mov	r0, r2
 800a626:	f7fb fecf 	bl	80063c8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a62a:	4b62      	ldr	r3, [pc, #392]	; (800a7b4 <tcp_receive+0xf20>)
 800a62c:	881b      	ldrh	r3, [r3, #0]
 800a62e:	461a      	mov	r2, r3
 800a630:	4b5e      	ldr	r3, [pc, #376]	; (800a7ac <tcp_receive+0xf18>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	441a      	add	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63a:	6879      	ldr	r1, [r7, #4]
 800a63c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a63e:	440b      	add	r3, r1
 800a640:	1ad3      	subs	r3, r2, r3
 800a642:	2b00      	cmp	r3, #0
 800a644:	f340 8089 	ble.w	800a75a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	899b      	ldrh	r3, [r3, #12]
 800a650:	b29b      	uxth	r3, r3
 800a652:	4618      	mov	r0, r3
 800a654:	f7fa fce0 	bl	8005018 <lwip_htons>
 800a658:	4603      	mov	r3, r0
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	f003 0301 	and.w	r3, r3, #1
 800a660:	2b00      	cmp	r3, #0
 800a662:	d022      	beq.n	800a6aa <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	899b      	ldrh	r3, [r3, #12]
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	b21b      	sxth	r3, r3
 800a670:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a674:	b21c      	sxth	r4, r3
 800a676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	899b      	ldrh	r3, [r3, #12]
 800a67e:	b29b      	uxth	r3, r3
 800a680:	4618      	mov	r0, r3
 800a682:	f7fa fcc9 	bl	8005018 <lwip_htons>
 800a686:	4603      	mov	r3, r0
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a690:	b29b      	uxth	r3, r3
 800a692:	4618      	mov	r0, r3
 800a694:	f7fa fcc0 	bl	8005018 <lwip_htons>
 800a698:	4603      	mov	r3, r0
 800a69a:	b21b      	sxth	r3, r3
 800a69c:	4323      	orrs	r3, r4
 800a69e:	b21a      	sxth	r2, r3
 800a6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	b292      	uxth	r2, r2
 800a6a8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	b29a      	uxth	r2, r3
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6b4:	4413      	add	r3, r2
 800a6b6:	b299      	uxth	r1, r3
 800a6b8:	4b3c      	ldr	r3, [pc, #240]	; (800a7ac <tcp_receive+0xf18>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	1a8a      	subs	r2, r1, r2
 800a6c4:	b292      	uxth	r2, r2
 800a6c6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	685a      	ldr	r2, [r3, #4]
 800a6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	891b      	ldrh	r3, [r3, #8]
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	4610      	mov	r0, r2
 800a6d8:	f7fb fe76 	bl	80063c8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	891c      	ldrh	r4, [r3, #8]
 800a6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	899b      	ldrh	r3, [r3, #12]
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7fa fc93 	bl	8005018 <lwip_htons>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	f003 0303 	and.w	r3, r3, #3
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <tcp_receive+0xe6e>
 800a6fe:	2301      	movs	r3, #1
 800a700:	e000      	b.n	800a704 <tcp_receive+0xe70>
 800a702:	2300      	movs	r3, #0
 800a704:	4423      	add	r3, r4
 800a706:	b29a      	uxth	r2, r3
 800a708:	4b2a      	ldr	r3, [pc, #168]	; (800a7b4 <tcp_receive+0xf20>)
 800a70a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a70c:	4b29      	ldr	r3, [pc, #164]	; (800a7b4 <tcp_receive+0xf20>)
 800a70e:	881b      	ldrh	r3, [r3, #0]
 800a710:	461a      	mov	r2, r3
 800a712:	4b26      	ldr	r3, [pc, #152]	; (800a7ac <tcp_receive+0xf18>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	441a      	add	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71c:	6879      	ldr	r1, [r7, #4]
 800a71e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a720:	440b      	add	r3, r1
 800a722:	429a      	cmp	r2, r3
 800a724:	d019      	beq.n	800a75a <tcp_receive+0xec6>
 800a726:	4b24      	ldr	r3, [pc, #144]	; (800a7b8 <tcp_receive+0xf24>)
 800a728:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a72c:	4923      	ldr	r1, [pc, #140]	; (800a7bc <tcp_receive+0xf28>)
 800a72e:	4824      	ldr	r0, [pc, #144]	; (800a7c0 <tcp_receive+0xf2c>)
 800a730:	f004 f9e8 	bl	800eb04 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a734:	e011      	b.n	800a75a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73e:	2b00      	cmp	r3, #0
 800a740:	f47f aea4 	bne.w	800a48c <tcp_receive+0xbf8>
 800a744:	e00a      	b.n	800a75c <tcp_receive+0xec8>
                break;
 800a746:	bf00      	nop
 800a748:	e008      	b.n	800a75c <tcp_receive+0xec8>
                break;
 800a74a:	bf00      	nop
 800a74c:	e006      	b.n	800a75c <tcp_receive+0xec8>
                  break;
 800a74e:	bf00      	nop
 800a750:	e004      	b.n	800a75c <tcp_receive+0xec8>
                  break;
 800a752:	bf00      	nop
 800a754:	e002      	b.n	800a75c <tcp_receive+0xec8>
                  break;
 800a756:	bf00      	nop
 800a758:	e000      	b.n	800a75c <tcp_receive+0xec8>
                break;
 800a75a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f001 fa33 	bl	800bbc8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a762:	e003      	b.n	800a76c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f001 fa2f 	bl	800bbc8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a76a:	e01a      	b.n	800a7a2 <tcp_receive+0xf0e>
 800a76c:	e019      	b.n	800a7a2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a76e:	4b0f      	ldr	r3, [pc, #60]	; (800a7ac <tcp_receive+0xf18>)
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a776:	1ad3      	subs	r3, r2, r3
 800a778:	2b00      	cmp	r3, #0
 800a77a:	db0a      	blt.n	800a792 <tcp_receive+0xefe>
 800a77c:	4b0b      	ldr	r3, [pc, #44]	; (800a7ac <tcp_receive+0xf18>)
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a784:	6879      	ldr	r1, [r7, #4]
 800a786:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a788:	440b      	add	r3, r1
 800a78a:	1ad3      	subs	r3, r2, r3
 800a78c:	3301      	adds	r3, #1
 800a78e:	2b00      	cmp	r3, #0
 800a790:	dd07      	ble.n	800a7a2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	8b5b      	ldrh	r3, [r3, #26]
 800a796:	f043 0302 	orr.w	r3, r3, #2
 800a79a:	b29a      	uxth	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a7a0:	e7ff      	b.n	800a7a2 <tcp_receive+0xf0e>
 800a7a2:	bf00      	nop
 800a7a4:	3750      	adds	r7, #80	; 0x50
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bdb0      	pop	{r4, r5, r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	20008374 	.word	0x20008374
 800a7b0:	20008354 	.word	0x20008354
 800a7b4:	2000837e 	.word	0x2000837e
 800a7b8:	08011178 	.word	0x08011178
 800a7bc:	08011520 	.word	0x08011520
 800a7c0:	080111c4 	.word	0x080111c4

0800a7c4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a7ca:	4b15      	ldr	r3, [pc, #84]	; (800a820 <tcp_get_next_optbyte+0x5c>)
 800a7cc:	881b      	ldrh	r3, [r3, #0]
 800a7ce:	1c5a      	adds	r2, r3, #1
 800a7d0:	b291      	uxth	r1, r2
 800a7d2:	4a13      	ldr	r2, [pc, #76]	; (800a820 <tcp_get_next_optbyte+0x5c>)
 800a7d4:	8011      	strh	r1, [r2, #0]
 800a7d6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a7d8:	4b12      	ldr	r3, [pc, #72]	; (800a824 <tcp_get_next_optbyte+0x60>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d004      	beq.n	800a7ea <tcp_get_next_optbyte+0x26>
 800a7e0:	4b11      	ldr	r3, [pc, #68]	; (800a828 <tcp_get_next_optbyte+0x64>)
 800a7e2:	881b      	ldrh	r3, [r3, #0]
 800a7e4:	88fa      	ldrh	r2, [r7, #6]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d208      	bcs.n	800a7fc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a7ea:	4b10      	ldr	r3, [pc, #64]	; (800a82c <tcp_get_next_optbyte+0x68>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	3314      	adds	r3, #20
 800a7f0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a7f2:	88fb      	ldrh	r3, [r7, #6]
 800a7f4:	683a      	ldr	r2, [r7, #0]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	e00b      	b.n	800a814 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a7fc:	88fb      	ldrh	r3, [r7, #6]
 800a7fe:	b2da      	uxtb	r2, r3
 800a800:	4b09      	ldr	r3, [pc, #36]	; (800a828 <tcp_get_next_optbyte+0x64>)
 800a802:	881b      	ldrh	r3, [r3, #0]
 800a804:	b2db      	uxtb	r3, r3
 800a806:	1ad3      	subs	r3, r2, r3
 800a808:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a80a:	4b06      	ldr	r3, [pc, #24]	; (800a824 <tcp_get_next_optbyte+0x60>)
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	797b      	ldrb	r3, [r7, #5]
 800a810:	4413      	add	r3, r2
 800a812:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a814:	4618      	mov	r0, r3
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	20008370 	.word	0x20008370
 800a824:	2000836c 	.word	0x2000836c
 800a828:	2000836a 	.word	0x2000836a
 800a82c:	20008364 	.word	0x20008364

0800a830 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d106      	bne.n	800a84c <tcp_parseopt+0x1c>
 800a83e:	4b32      	ldr	r3, [pc, #200]	; (800a908 <tcp_parseopt+0xd8>)
 800a840:	f240 727d 	movw	r2, #1917	; 0x77d
 800a844:	4931      	ldr	r1, [pc, #196]	; (800a90c <tcp_parseopt+0xdc>)
 800a846:	4832      	ldr	r0, [pc, #200]	; (800a910 <tcp_parseopt+0xe0>)
 800a848:	f004 f95c 	bl	800eb04 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a84c:	4b31      	ldr	r3, [pc, #196]	; (800a914 <tcp_parseopt+0xe4>)
 800a84e:	881b      	ldrh	r3, [r3, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d055      	beq.n	800a900 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a854:	4b30      	ldr	r3, [pc, #192]	; (800a918 <tcp_parseopt+0xe8>)
 800a856:	2200      	movs	r2, #0
 800a858:	801a      	strh	r2, [r3, #0]
 800a85a:	e045      	b.n	800a8e8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a85c:	f7ff ffb2 	bl	800a7c4 <tcp_get_next_optbyte>
 800a860:	4603      	mov	r3, r0
 800a862:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a864:	7bfb      	ldrb	r3, [r7, #15]
 800a866:	2b02      	cmp	r3, #2
 800a868:	d006      	beq.n	800a878 <tcp_parseopt+0x48>
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	dc2b      	bgt.n	800a8c6 <tcp_parseopt+0x96>
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d041      	beq.n	800a8f6 <tcp_parseopt+0xc6>
 800a872:	2b01      	cmp	r3, #1
 800a874:	d127      	bne.n	800a8c6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a876:	e037      	b.n	800a8e8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a878:	f7ff ffa4 	bl	800a7c4 <tcp_get_next_optbyte>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b04      	cmp	r3, #4
 800a880:	d13b      	bne.n	800a8fa <tcp_parseopt+0xca>
 800a882:	4b25      	ldr	r3, [pc, #148]	; (800a918 <tcp_parseopt+0xe8>)
 800a884:	881b      	ldrh	r3, [r3, #0]
 800a886:	3301      	adds	r3, #1
 800a888:	4a22      	ldr	r2, [pc, #136]	; (800a914 <tcp_parseopt+0xe4>)
 800a88a:	8812      	ldrh	r2, [r2, #0]
 800a88c:	4293      	cmp	r3, r2
 800a88e:	da34      	bge.n	800a8fa <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a890:	f7ff ff98 	bl	800a7c4 <tcp_get_next_optbyte>
 800a894:	4603      	mov	r3, r0
 800a896:	b29b      	uxth	r3, r3
 800a898:	021b      	lsls	r3, r3, #8
 800a89a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a89c:	f7ff ff92 	bl	800a7c4 <tcp_get_next_optbyte>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	b29a      	uxth	r2, r3
 800a8a4:	89bb      	ldrh	r3, [r7, #12]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a8aa:	89bb      	ldrh	r3, [r7, #12]
 800a8ac:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a8b0:	d804      	bhi.n	800a8bc <tcp_parseopt+0x8c>
 800a8b2:	89bb      	ldrh	r3, [r7, #12]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d001      	beq.n	800a8bc <tcp_parseopt+0x8c>
 800a8b8:	89ba      	ldrh	r2, [r7, #12]
 800a8ba:	e001      	b.n	800a8c0 <tcp_parseopt+0x90>
 800a8bc:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a8c4:	e010      	b.n	800a8e8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a8c6:	f7ff ff7d 	bl	800a7c4 <tcp_get_next_optbyte>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a8ce:	7afb      	ldrb	r3, [r7, #11]
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d914      	bls.n	800a8fe <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a8d4:	7afb      	ldrb	r3, [r7, #11]
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	4b0f      	ldr	r3, [pc, #60]	; (800a918 <tcp_parseopt+0xe8>)
 800a8da:	881b      	ldrh	r3, [r3, #0]
 800a8dc:	4413      	add	r3, r2
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	3b02      	subs	r3, #2
 800a8e2:	b29a      	uxth	r2, r3
 800a8e4:	4b0c      	ldr	r3, [pc, #48]	; (800a918 <tcp_parseopt+0xe8>)
 800a8e6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a8e8:	4b0b      	ldr	r3, [pc, #44]	; (800a918 <tcp_parseopt+0xe8>)
 800a8ea:	881a      	ldrh	r2, [r3, #0]
 800a8ec:	4b09      	ldr	r3, [pc, #36]	; (800a914 <tcp_parseopt+0xe4>)
 800a8ee:	881b      	ldrh	r3, [r3, #0]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d3b3      	bcc.n	800a85c <tcp_parseopt+0x2c>
 800a8f4:	e004      	b.n	800a900 <tcp_parseopt+0xd0>
          return;
 800a8f6:	bf00      	nop
 800a8f8:	e002      	b.n	800a900 <tcp_parseopt+0xd0>
            return;
 800a8fa:	bf00      	nop
 800a8fc:	e000      	b.n	800a900 <tcp_parseopt+0xd0>
            return;
 800a8fe:	bf00      	nop
      }
    }
  }
}
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	08011178 	.word	0x08011178
 800a90c:	080115dc 	.word	0x080115dc
 800a910:	080111c4 	.word	0x080111c4
 800a914:	20008368 	.word	0x20008368
 800a918:	20008370 	.word	0x20008370

0800a91c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a91c:	b480      	push	{r7}
 800a91e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a920:	4b05      	ldr	r3, [pc, #20]	; (800a938 <tcp_trigger_input_pcb_close+0x1c>)
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	f043 0310 	orr.w	r3, r3, #16
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	4b03      	ldr	r3, [pc, #12]	; (800a938 <tcp_trigger_input_pcb_close+0x1c>)
 800a92c:	701a      	strb	r2, [r3, #0]
}
 800a92e:	bf00      	nop
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr
 800a938:	20008381 	.word	0x20008381

0800a93c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00a      	beq.n	800a964 <tcp_route+0x28>
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	7a1b      	ldrb	r3, [r3, #8]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d006      	beq.n	800a964 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	7a1b      	ldrb	r3, [r3, #8]
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7fb fb5a 	bl	8006014 <netif_get_by_index>
 800a960:	4603      	mov	r3, r0
 800a962:	e003      	b.n	800a96c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f002 fe7d 	bl	800d664 <ip4_route>
 800a96a:	4603      	mov	r3, r0
  }
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3710      	adds	r7, #16
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a974:	b590      	push	{r4, r7, lr}
 800a976:	b087      	sub	sp, #28
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	603b      	str	r3, [r7, #0]
 800a980:	4613      	mov	r3, r2
 800a982:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d105      	bne.n	800a996 <tcp_create_segment+0x22>
 800a98a:	4b44      	ldr	r3, [pc, #272]	; (800aa9c <tcp_create_segment+0x128>)
 800a98c:	22a3      	movs	r2, #163	; 0xa3
 800a98e:	4944      	ldr	r1, [pc, #272]	; (800aaa0 <tcp_create_segment+0x12c>)
 800a990:	4844      	ldr	r0, [pc, #272]	; (800aaa4 <tcp_create_segment+0x130>)
 800a992:	f004 f8b7 	bl	800eb04 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d105      	bne.n	800a9a8 <tcp_create_segment+0x34>
 800a99c:	4b3f      	ldr	r3, [pc, #252]	; (800aa9c <tcp_create_segment+0x128>)
 800a99e:	22a4      	movs	r2, #164	; 0xa4
 800a9a0:	4941      	ldr	r1, [pc, #260]	; (800aaa8 <tcp_create_segment+0x134>)
 800a9a2:	4840      	ldr	r0, [pc, #256]	; (800aaa4 <tcp_create_segment+0x130>)
 800a9a4:	f004 f8ae 	bl	800eb04 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a9a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	f003 0304 	and.w	r3, r3, #4
 800a9b4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a9b6:	2003      	movs	r0, #3
 800a9b8:	f7fa ffa6 	bl	8005908 <memp_malloc>
 800a9bc:	6138      	str	r0, [r7, #16]
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d104      	bne.n	800a9ce <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a9c4:	68b8      	ldr	r0, [r7, #8]
 800a9c6:	f7fb fe85 	bl	80066d4 <pbuf_free>
    return NULL;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	e061      	b.n	800aa92 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a9d4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	68ba      	ldr	r2, [r7, #8]
 800a9e0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	891a      	ldrh	r2, [r3, #8]
 800a9e6:	7dfb      	ldrb	r3, [r7, #23]
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d205      	bcs.n	800a9fa <tcp_create_segment+0x86>
 800a9ee:	4b2b      	ldr	r3, [pc, #172]	; (800aa9c <tcp_create_segment+0x128>)
 800a9f0:	22b0      	movs	r2, #176	; 0xb0
 800a9f2:	492e      	ldr	r1, [pc, #184]	; (800aaac <tcp_create_segment+0x138>)
 800a9f4:	482b      	ldr	r0, [pc, #172]	; (800aaa4 <tcp_create_segment+0x130>)
 800a9f6:	f004 f885 	bl	800eb04 <iprintf>
  seg->len = p->tot_len - optlen;
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	891a      	ldrh	r2, [r3, #8]
 800a9fe:	7dfb      	ldrb	r3, [r7, #23]
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	1ad3      	subs	r3, r2, r3
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800aa0a:	2114      	movs	r1, #20
 800aa0c:	68b8      	ldr	r0, [r7, #8]
 800aa0e:	f7fb fdcb 	bl	80065a8 <pbuf_add_header>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d004      	beq.n	800aa22 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800aa18:	6938      	ldr	r0, [r7, #16]
 800aa1a:	f7fd f8ce 	bl	8007bba <tcp_seg_free>
    return NULL;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	e037      	b.n	800aa92 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	685a      	ldr	r2, [r3, #4]
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	8ada      	ldrh	r2, [r3, #22]
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	68dc      	ldr	r4, [r3, #12]
 800aa34:	4610      	mov	r0, r2
 800aa36:	f7fa faef 	bl	8005018 <lwip_htons>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	8b1a      	ldrh	r2, [r3, #24]
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	68dc      	ldr	r4, [r3, #12]
 800aa46:	4610      	mov	r0, r2
 800aa48:	f7fa fae6 	bl	8005018 <lwip_htons>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	68dc      	ldr	r4, [r3, #12]
 800aa54:	6838      	ldr	r0, [r7, #0]
 800aa56:	f7fa faf4 	bl	8005042 <lwip_htonl>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800aa5e:	7dfb      	ldrb	r3, [r7, #23]
 800aa60:	089b      	lsrs	r3, r3, #2
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	3305      	adds	r3, #5
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	031b      	lsls	r3, r3, #12
 800aa6c:	b29a      	uxth	r2, r3
 800aa6e:	79fb      	ldrb	r3, [r7, #7]
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	4313      	orrs	r3, r2
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	68dc      	ldr	r4, [r3, #12]
 800aa7a:	4610      	mov	r0, r2
 800aa7c:	f7fa facc 	bl	8005018 <lwip_htons>
 800aa80:	4603      	mov	r3, r0
 800aa82:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	749a      	strb	r2, [r3, #18]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	74da      	strb	r2, [r3, #19]
  return seg;
 800aa90:	693b      	ldr	r3, [r7, #16]
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	371c      	adds	r7, #28
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd90      	pop	{r4, r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	080115f8 	.word	0x080115f8
 800aaa0:	0801162c 	.word	0x0801162c
 800aaa4:	0801164c 	.word	0x0801164c
 800aaa8:	08011674 	.word	0x08011674
 800aaac:	08011698 	.word	0x08011698

0800aab0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800aab0:	b590      	push	{r4, r7, lr}
 800aab2:	b08b      	sub	sp, #44	; 0x2c
 800aab4:	af02      	add	r7, sp, #8
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	460b      	mov	r3, r1
 800aaba:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800aabc:	2300      	movs	r3, #0
 800aabe:	61fb      	str	r3, [r7, #28]
 800aac0:	2300      	movs	r3, #0
 800aac2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800aac4:	2300      	movs	r3, #0
 800aac6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d106      	bne.n	800aadc <tcp_split_unsent_seg+0x2c>
 800aace:	4b95      	ldr	r3, [pc, #596]	; (800ad24 <tcp_split_unsent_seg+0x274>)
 800aad0:	f240 324b 	movw	r2, #843	; 0x34b
 800aad4:	4994      	ldr	r1, [pc, #592]	; (800ad28 <tcp_split_unsent_seg+0x278>)
 800aad6:	4895      	ldr	r0, [pc, #596]	; (800ad2c <tcp_split_unsent_seg+0x27c>)
 800aad8:	f004 f814 	bl	800eb04 <iprintf>

  useg = pcb->unsent;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aae0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d102      	bne.n	800aaee <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800aae8:	f04f 33ff 	mov.w	r3, #4294967295
 800aaec:	e116      	b.n	800ad1c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800aaee:	887b      	ldrh	r3, [r7, #2]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d109      	bne.n	800ab08 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800aaf4:	4b8b      	ldr	r3, [pc, #556]	; (800ad24 <tcp_split_unsent_seg+0x274>)
 800aaf6:	f240 3253 	movw	r2, #851	; 0x353
 800aafa:	498d      	ldr	r1, [pc, #564]	; (800ad30 <tcp_split_unsent_seg+0x280>)
 800aafc:	488b      	ldr	r0, [pc, #556]	; (800ad2c <tcp_split_unsent_seg+0x27c>)
 800aafe:	f004 f801 	bl	800eb04 <iprintf>
    return ERR_VAL;
 800ab02:	f06f 0305 	mvn.w	r3, #5
 800ab06:	e109      	b.n	800ad1c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	891b      	ldrh	r3, [r3, #8]
 800ab0c:	887a      	ldrh	r2, [r7, #2]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d301      	bcc.n	800ab16 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ab12:	2300      	movs	r3, #0
 800ab14:	e102      	b.n	800ad1c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab1a:	887a      	ldrh	r2, [r7, #2]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d906      	bls.n	800ab2e <tcp_split_unsent_seg+0x7e>
 800ab20:	4b80      	ldr	r3, [pc, #512]	; (800ad24 <tcp_split_unsent_seg+0x274>)
 800ab22:	f240 325b 	movw	r2, #859	; 0x35b
 800ab26:	4983      	ldr	r1, [pc, #524]	; (800ad34 <tcp_split_unsent_seg+0x284>)
 800ab28:	4880      	ldr	r0, [pc, #512]	; (800ad2c <tcp_split_unsent_seg+0x27c>)
 800ab2a:	f003 ffeb 	bl	800eb04 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	891b      	ldrh	r3, [r3, #8]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d106      	bne.n	800ab44 <tcp_split_unsent_seg+0x94>
 800ab36:	4b7b      	ldr	r3, [pc, #492]	; (800ad24 <tcp_split_unsent_seg+0x274>)
 800ab38:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ab3c:	497e      	ldr	r1, [pc, #504]	; (800ad38 <tcp_split_unsent_seg+0x288>)
 800ab3e:	487b      	ldr	r0, [pc, #492]	; (800ad2c <tcp_split_unsent_seg+0x27c>)
 800ab40:	f003 ffe0 	bl	800eb04 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	7a9b      	ldrb	r3, [r3, #10]
 800ab48:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ab4a:	7bfb      	ldrb	r3, [r7, #15]
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	f003 0304 	and.w	r3, r3, #4
 800ab54:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	891a      	ldrh	r2, [r3, #8]
 800ab5a:	887b      	ldrh	r3, [r7, #2]
 800ab5c:	1ad3      	subs	r3, r2, r3
 800ab5e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ab60:	7bbb      	ldrb	r3, [r7, #14]
 800ab62:	b29a      	uxth	r2, r3
 800ab64:	89bb      	ldrh	r3, [r7, #12]
 800ab66:	4413      	add	r3, r2
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ab6e:	4619      	mov	r1, r3
 800ab70:	2036      	movs	r0, #54	; 0x36
 800ab72:	f7fb facb 	bl	800610c <pbuf_alloc>
 800ab76:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	f000 80b7 	beq.w	800acee <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	891a      	ldrh	r2, [r3, #8]
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	891b      	ldrh	r3, [r3, #8]
 800ab8a:	1ad3      	subs	r3, r2, r3
 800ab8c:	b29a      	uxth	r2, r3
 800ab8e:	887b      	ldrh	r3, [r7, #2]
 800ab90:	4413      	add	r3, r2
 800ab92:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	6858      	ldr	r0, [r3, #4]
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	685a      	ldr	r2, [r3, #4]
 800ab9c:	7bbb      	ldrb	r3, [r7, #14]
 800ab9e:	18d1      	adds	r1, r2, r3
 800aba0:	897b      	ldrh	r3, [r7, #10]
 800aba2:	89ba      	ldrh	r2, [r7, #12]
 800aba4:	f7fb ff80 	bl	8006aa8 <pbuf_copy_partial>
 800aba8:	4603      	mov	r3, r0
 800abaa:	461a      	mov	r2, r3
 800abac:	89bb      	ldrh	r3, [r7, #12]
 800abae:	4293      	cmp	r3, r2
 800abb0:	f040 809f 	bne.w	800acf2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	899b      	ldrh	r3, [r3, #12]
 800abba:	b29b      	uxth	r3, r3
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7fa fa2b 	bl	8005018 <lwip_htons>
 800abc2:	4603      	mov	r3, r0
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abca:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800abcc:	2300      	movs	r3, #0
 800abce:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800abd0:	7efb      	ldrb	r3, [r7, #27]
 800abd2:	f003 0308 	and.w	r3, r3, #8
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d007      	beq.n	800abea <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800abda:	7efb      	ldrb	r3, [r7, #27]
 800abdc:	f023 0308 	bic.w	r3, r3, #8
 800abe0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800abe2:	7ebb      	ldrb	r3, [r7, #26]
 800abe4:	f043 0308 	orr.w	r3, r3, #8
 800abe8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800abea:	7efb      	ldrb	r3, [r7, #27]
 800abec:	f003 0301 	and.w	r3, r3, #1
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d007      	beq.n	800ac04 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800abf4:	7efb      	ldrb	r3, [r7, #27]
 800abf6:	f023 0301 	bic.w	r3, r3, #1
 800abfa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800abfc:	7ebb      	ldrb	r3, [r7, #26]
 800abfe:	f043 0301 	orr.w	r3, r3, #1
 800ac02:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fa fa19 	bl	8005042 <lwip_htonl>
 800ac10:	4602      	mov	r2, r0
 800ac12:	887b      	ldrh	r3, [r7, #2]
 800ac14:	18d1      	adds	r1, r2, r3
 800ac16:	7eba      	ldrb	r2, [r7, #26]
 800ac18:	7bfb      	ldrb	r3, [r7, #15]
 800ac1a:	9300      	str	r3, [sp, #0]
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	6939      	ldr	r1, [r7, #16]
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f7ff fea7 	bl	800a974 <tcp_create_segment>
 800ac26:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d063      	beq.n	800acf6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7fb fdd6 	bl	80067e4 <pbuf_clen>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac42:	1a9b      	subs	r3, r3, r2
 800ac44:	b29a      	uxth	r2, r3
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	6858      	ldr	r0, [r3, #4]
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	891a      	ldrh	r2, [r3, #8]
 800ac56:	89bb      	ldrh	r3, [r7, #12]
 800ac58:	1ad3      	subs	r3, r2, r3
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	f7fb fbb3 	bl	80063c8 <pbuf_realloc>
  useg->len -= remainder;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	891a      	ldrh	r2, [r3, #8]
 800ac66:	89bb      	ldrh	r3, [r7, #12]
 800ac68:	1ad3      	subs	r3, r2, r3
 800ac6a:	b29a      	uxth	r2, r3
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	899b      	ldrh	r3, [r3, #12]
 800ac76:	b29c      	uxth	r4, r3
 800ac78:	7efb      	ldrb	r3, [r7, #27]
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7fa f9cb 	bl	8005018 <lwip_htons>
 800ac82:	4603      	mov	r3, r0
 800ac84:	461a      	mov	r2, r3
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	4322      	orrs	r2, r4
 800ac8c:	b292      	uxth	r2, r2
 800ac8e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	4618      	mov	r0, r3
 800ac96:	f7fb fda5 	bl	80067e4 <pbuf_clen>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aca4:	4413      	add	r3, r2
 800aca6:	b29a      	uxth	r2, r3
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fb fd96 	bl	80067e4 <pbuf_clen>
 800acb8:	4603      	mov	r3, r0
 800acba:	461a      	mov	r2, r3
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800acc2:	4413      	add	r3, r2
 800acc4:	b29a      	uxth	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	69fa      	ldr	r2, [r7, #28]
 800acd8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800acda:	69fb      	ldr	r3, [r7, #28]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d103      	bne.n	800acea <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800acea:	2300      	movs	r3, #0
 800acec:	e016      	b.n	800ad1c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800acee:	bf00      	nop
 800acf0:	e002      	b.n	800acf8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800acf2:	bf00      	nop
 800acf4:	e000      	b.n	800acf8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800acf6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d006      	beq.n	800ad0c <tcp_split_unsent_seg+0x25c>
 800acfe:	4b09      	ldr	r3, [pc, #36]	; (800ad24 <tcp_split_unsent_seg+0x274>)
 800ad00:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ad04:	490d      	ldr	r1, [pc, #52]	; (800ad3c <tcp_split_unsent_seg+0x28c>)
 800ad06:	4809      	ldr	r0, [pc, #36]	; (800ad2c <tcp_split_unsent_seg+0x27c>)
 800ad08:	f003 fefc 	bl	800eb04 <iprintf>
  if (p != NULL) {
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d002      	beq.n	800ad18 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ad12:	6938      	ldr	r0, [r7, #16]
 800ad14:	f7fb fcde 	bl	80066d4 <pbuf_free>
  }

  return ERR_MEM;
 800ad18:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3724      	adds	r7, #36	; 0x24
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd90      	pop	{r4, r7, pc}
 800ad24:	080115f8 	.word	0x080115f8
 800ad28:	0801198c 	.word	0x0801198c
 800ad2c:	0801164c 	.word	0x0801164c
 800ad30:	080119b0 	.word	0x080119b0
 800ad34:	080119d4 	.word	0x080119d4
 800ad38:	080119e4 	.word	0x080119e4
 800ad3c:	080119f4 	.word	0x080119f4

0800ad40 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ad40:	b590      	push	{r4, r7, lr}
 800ad42:	b085      	sub	sp, #20
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d106      	bne.n	800ad5c <tcp_send_fin+0x1c>
 800ad4e:	4b21      	ldr	r3, [pc, #132]	; (800add4 <tcp_send_fin+0x94>)
 800ad50:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800ad54:	4920      	ldr	r1, [pc, #128]	; (800add8 <tcp_send_fin+0x98>)
 800ad56:	4821      	ldr	r0, [pc, #132]	; (800addc <tcp_send_fin+0x9c>)
 800ad58:	f003 fed4 	bl	800eb04 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d02e      	beq.n	800adc2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad68:	60fb      	str	r3, [r7, #12]
 800ad6a:	e002      	b.n	800ad72 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d1f8      	bne.n	800ad6c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	899b      	ldrh	r3, [r3, #12]
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7fa f948 	bl	8005018 <lwip_htons>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	f003 0307 	and.w	r3, r3, #7
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d116      	bne.n	800adc2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	899b      	ldrh	r3, [r3, #12]
 800ad9a:	b29c      	uxth	r4, r3
 800ad9c:	2001      	movs	r0, #1
 800ad9e:	f7fa f93b 	bl	8005018 <lwip_htons>
 800ada2:	4603      	mov	r3, r0
 800ada4:	461a      	mov	r2, r3
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	4322      	orrs	r2, r4
 800adac:	b292      	uxth	r2, r2
 800adae:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	8b5b      	ldrh	r3, [r3, #26]
 800adb4:	f043 0320 	orr.w	r3, r3, #32
 800adb8:	b29a      	uxth	r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800adbe:	2300      	movs	r3, #0
 800adc0:	e004      	b.n	800adcc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800adc2:	2101      	movs	r1, #1
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 f80b 	bl	800ade0 <tcp_enqueue_flags>
 800adca:	4603      	mov	r3, r0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3714      	adds	r7, #20
 800add0:	46bd      	mov	sp, r7
 800add2:	bd90      	pop	{r4, r7, pc}
 800add4:	080115f8 	.word	0x080115f8
 800add8:	08011a00 	.word	0x08011a00
 800addc:	0801164c 	.word	0x0801164c

0800ade0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b08a      	sub	sp, #40	; 0x28
 800ade4:	af02      	add	r7, sp, #8
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	460b      	mov	r3, r1
 800adea:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800adec:	2300      	movs	r3, #0
 800adee:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800adf0:	2300      	movs	r3, #0
 800adf2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800adf4:	78fb      	ldrb	r3, [r7, #3]
 800adf6:	f003 0303 	and.w	r3, r3, #3
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d106      	bne.n	800ae0c <tcp_enqueue_flags+0x2c>
 800adfe:	4b67      	ldr	r3, [pc, #412]	; (800af9c <tcp_enqueue_flags+0x1bc>)
 800ae00:	f240 4211 	movw	r2, #1041	; 0x411
 800ae04:	4966      	ldr	r1, [pc, #408]	; (800afa0 <tcp_enqueue_flags+0x1c0>)
 800ae06:	4867      	ldr	r0, [pc, #412]	; (800afa4 <tcp_enqueue_flags+0x1c4>)
 800ae08:	f003 fe7c 	bl	800eb04 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d106      	bne.n	800ae20 <tcp_enqueue_flags+0x40>
 800ae12:	4b62      	ldr	r3, [pc, #392]	; (800af9c <tcp_enqueue_flags+0x1bc>)
 800ae14:	f240 4213 	movw	r2, #1043	; 0x413
 800ae18:	4963      	ldr	r1, [pc, #396]	; (800afa8 <tcp_enqueue_flags+0x1c8>)
 800ae1a:	4862      	ldr	r0, [pc, #392]	; (800afa4 <tcp_enqueue_flags+0x1c4>)
 800ae1c:	f003 fe72 	bl	800eb04 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ae20:	78fb      	ldrb	r3, [r7, #3]
 800ae22:	f003 0302 	and.w	r3, r3, #2
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d001      	beq.n	800ae2e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ae2e:	7ffb      	ldrb	r3, [r7, #31]
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	f003 0304 	and.w	r3, r3, #4
 800ae38:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ae3a:	7dfb      	ldrb	r3, [r7, #23]
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ae42:	4619      	mov	r1, r3
 800ae44:	2036      	movs	r0, #54	; 0x36
 800ae46:	f7fb f961 	bl	800610c <pbuf_alloc>
 800ae4a:	6138      	str	r0, [r7, #16]
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d109      	bne.n	800ae66 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	8b5b      	ldrh	r3, [r3, #26]
 800ae56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae5a:	b29a      	uxth	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ae60:	f04f 33ff 	mov.w	r3, #4294967295
 800ae64:	e095      	b.n	800af92 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	895a      	ldrh	r2, [r3, #10]
 800ae6a:	7dfb      	ldrb	r3, [r7, #23]
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d206      	bcs.n	800ae80 <tcp_enqueue_flags+0xa0>
 800ae72:	4b4a      	ldr	r3, [pc, #296]	; (800af9c <tcp_enqueue_flags+0x1bc>)
 800ae74:	f240 4239 	movw	r2, #1081	; 0x439
 800ae78:	494c      	ldr	r1, [pc, #304]	; (800afac <tcp_enqueue_flags+0x1cc>)
 800ae7a:	484a      	ldr	r0, [pc, #296]	; (800afa4 <tcp_enqueue_flags+0x1c4>)
 800ae7c:	f003 fe42 	bl	800eb04 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ae84:	78fa      	ldrb	r2, [r7, #3]
 800ae86:	7ffb      	ldrb	r3, [r7, #31]
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	6939      	ldr	r1, [r7, #16]
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f7ff fd70 	bl	800a974 <tcp_create_segment>
 800ae94:	60f8      	str	r0, [r7, #12]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d109      	bne.n	800aeb0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	8b5b      	ldrh	r3, [r3, #26]
 800aea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aea4:	b29a      	uxth	r2, r3
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800aeaa:	f04f 33ff 	mov.w	r3, #4294967295
 800aeae:	e070      	b.n	800af92 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	68db      	ldr	r3, [r3, #12]
 800aeb4:	f003 0303 	and.w	r3, r3, #3
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d006      	beq.n	800aeca <tcp_enqueue_flags+0xea>
 800aebc:	4b37      	ldr	r3, [pc, #220]	; (800af9c <tcp_enqueue_flags+0x1bc>)
 800aebe:	f240 4242 	movw	r2, #1090	; 0x442
 800aec2:	493b      	ldr	r1, [pc, #236]	; (800afb0 <tcp_enqueue_flags+0x1d0>)
 800aec4:	4837      	ldr	r0, [pc, #220]	; (800afa4 <tcp_enqueue_flags+0x1c4>)
 800aec6:	f003 fe1d 	bl	800eb04 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	891b      	ldrh	r3, [r3, #8]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d006      	beq.n	800aee0 <tcp_enqueue_flags+0x100>
 800aed2:	4b32      	ldr	r3, [pc, #200]	; (800af9c <tcp_enqueue_flags+0x1bc>)
 800aed4:	f240 4243 	movw	r2, #1091	; 0x443
 800aed8:	4936      	ldr	r1, [pc, #216]	; (800afb4 <tcp_enqueue_flags+0x1d4>)
 800aeda:	4832      	ldr	r0, [pc, #200]	; (800afa4 <tcp_enqueue_flags+0x1c4>)
 800aedc:	f003 fe12 	bl	800eb04 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d103      	bne.n	800aef0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	68fa      	ldr	r2, [r7, #12]
 800aeec:	66da      	str	r2, [r3, #108]	; 0x6c
 800aeee:	e00d      	b.n	800af0c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aef4:	61bb      	str	r3, [r7, #24]
 800aef6:	e002      	b.n	800aefe <tcp_enqueue_flags+0x11e>
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	61bb      	str	r3, [r7, #24]
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d1f8      	bne.n	800aef8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800af14:	78fb      	ldrb	r3, [r7, #3]
 800af16:	f003 0302 	and.w	r3, r3, #2
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d104      	bne.n	800af28 <tcp_enqueue_flags+0x148>
 800af1e:	78fb      	ldrb	r3, [r7, #3]
 800af20:	f003 0301 	and.w	r3, r3, #1
 800af24:	2b00      	cmp	r3, #0
 800af26:	d004      	beq.n	800af32 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af2c:	1c5a      	adds	r2, r3, #1
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800af32:	78fb      	ldrb	r3, [r7, #3]
 800af34:	f003 0301 	and.w	r3, r3, #1
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d006      	beq.n	800af4a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	8b5b      	ldrh	r3, [r3, #26]
 800af40:	f043 0320 	orr.w	r3, r3, #32
 800af44:	b29a      	uxth	r2, r3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	4618      	mov	r0, r3
 800af50:	f7fb fc48 	bl	80067e4 <pbuf_clen>
 800af54:	4603      	mov	r3, r0
 800af56:	461a      	mov	r2, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800af5e:	4413      	add	r3, r2
 800af60:	b29a      	uxth	r2, r3
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d00e      	beq.n	800af90 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af76:	2b00      	cmp	r3, #0
 800af78:	d10a      	bne.n	800af90 <tcp_enqueue_flags+0x1b0>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d106      	bne.n	800af90 <tcp_enqueue_flags+0x1b0>
 800af82:	4b06      	ldr	r3, [pc, #24]	; (800af9c <tcp_enqueue_flags+0x1bc>)
 800af84:	f240 4265 	movw	r2, #1125	; 0x465
 800af88:	490b      	ldr	r1, [pc, #44]	; (800afb8 <tcp_enqueue_flags+0x1d8>)
 800af8a:	4806      	ldr	r0, [pc, #24]	; (800afa4 <tcp_enqueue_flags+0x1c4>)
 800af8c:	f003 fdba 	bl	800eb04 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3720      	adds	r7, #32
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	080115f8 	.word	0x080115f8
 800afa0:	08011a1c 	.word	0x08011a1c
 800afa4:	0801164c 	.word	0x0801164c
 800afa8:	08011a74 	.word	0x08011a74
 800afac:	08011a94 	.word	0x08011a94
 800afb0:	08011ad0 	.word	0x08011ad0
 800afb4:	08011ae8 	.word	0x08011ae8
 800afb8:	08011b14 	.word	0x08011b14

0800afbc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800afbc:	b5b0      	push	{r4, r5, r7, lr}
 800afbe:	b08a      	sub	sp, #40	; 0x28
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d106      	bne.n	800afd8 <tcp_output+0x1c>
 800afca:	4b8a      	ldr	r3, [pc, #552]	; (800b1f4 <tcp_output+0x238>)
 800afcc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800afd0:	4989      	ldr	r1, [pc, #548]	; (800b1f8 <tcp_output+0x23c>)
 800afd2:	488a      	ldr	r0, [pc, #552]	; (800b1fc <tcp_output+0x240>)
 800afd4:	f003 fd96 	bl	800eb04 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	7d1b      	ldrb	r3, [r3, #20]
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d106      	bne.n	800afee <tcp_output+0x32>
 800afe0:	4b84      	ldr	r3, [pc, #528]	; (800b1f4 <tcp_output+0x238>)
 800afe2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800afe6:	4986      	ldr	r1, [pc, #536]	; (800b200 <tcp_output+0x244>)
 800afe8:	4884      	ldr	r0, [pc, #528]	; (800b1fc <tcp_output+0x240>)
 800afea:	f003 fd8b 	bl	800eb04 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800afee:	4b85      	ldr	r3, [pc, #532]	; (800b204 <tcp_output+0x248>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d101      	bne.n	800affc <tcp_output+0x40>
    return ERR_OK;
 800aff8:	2300      	movs	r3, #0
 800affa:	e1ce      	b.n	800b39a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b008:	4293      	cmp	r3, r2
 800b00a:	bf28      	it	cs
 800b00c:	4613      	movcs	r3, r2
 800b00e:	b29b      	uxth	r3, r3
 800b010:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b016:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d10b      	bne.n	800b036 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	8b5b      	ldrh	r3, [r3, #26]
 800b022:	f003 0302 	and.w	r3, r3, #2
 800b026:	2b00      	cmp	r3, #0
 800b028:	f000 81aa 	beq.w	800b380 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 fdcb 	bl	800bbc8 <tcp_send_empty_ack>
 800b032:	4603      	mov	r3, r0
 800b034:	e1b1      	b.n	800b39a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b036:	6879      	ldr	r1, [r7, #4]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	3304      	adds	r3, #4
 800b03c:	461a      	mov	r2, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f7ff fc7c 	bl	800a93c <tcp_route>
 800b044:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d102      	bne.n	800b052 <tcp_output+0x96>
    return ERR_RTE;
 800b04c:	f06f 0303 	mvn.w	r3, #3
 800b050:	e1a3      	b.n	800b39a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d003      	beq.n	800b060 <tcp_output+0xa4>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d111      	bne.n	800b084 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d002      	beq.n	800b06c <tcp_output+0xb0>
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	3304      	adds	r3, #4
 800b06a:	e000      	b.n	800b06e <tcp_output+0xb2>
 800b06c:	2300      	movs	r3, #0
 800b06e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d102      	bne.n	800b07c <tcp_output+0xc0>
      return ERR_RTE;
 800b076:	f06f 0303 	mvn.w	r3, #3
 800b07a:	e18e      	b.n	800b39a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7f9 ffd9 	bl	8005042 <lwip_htonl>
 800b090:	4602      	mov	r2, r0
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b096:	1ad3      	subs	r3, r2, r3
 800b098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b09a:	8912      	ldrh	r2, [r2, #8]
 800b09c:	4413      	add	r3, r2
 800b09e:	69ba      	ldr	r2, [r7, #24]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d227      	bcs.n	800b0f4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d114      	bne.n	800b0dc <tcp_output+0x120>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d110      	bne.n	800b0dc <tcp_output+0x120>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d10b      	bne.n	800b0dc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	8b5b      	ldrh	r3, [r3, #26]
 800b0e0:	f003 0302 	and.w	r3, r3, #2
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	f000 814d 	beq.w	800b384 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 fd6c 	bl	800bbc8 <tcp_send_empty_ack>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	e152      	b.n	800b39a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b100:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b102:	6a3b      	ldr	r3, [r7, #32]
 800b104:	2b00      	cmp	r3, #0
 800b106:	f000 811c 	beq.w	800b342 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b10a:	e002      	b.n	800b112 <tcp_output+0x156>
 800b10c:	6a3b      	ldr	r3, [r7, #32]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	623b      	str	r3, [r7, #32]
 800b112:	6a3b      	ldr	r3, [r7, #32]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1f8      	bne.n	800b10c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b11a:	e112      	b.n	800b342 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11e:	68db      	ldr	r3, [r3, #12]
 800b120:	899b      	ldrh	r3, [r3, #12]
 800b122:	b29b      	uxth	r3, r3
 800b124:	4618      	mov	r0, r3
 800b126:	f7f9 ff77 	bl	8005018 <lwip_htons>
 800b12a:	4603      	mov	r3, r0
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	f003 0304 	and.w	r3, r3, #4
 800b132:	2b00      	cmp	r3, #0
 800b134:	d006      	beq.n	800b144 <tcp_output+0x188>
 800b136:	4b2f      	ldr	r3, [pc, #188]	; (800b1f4 <tcp_output+0x238>)
 800b138:	f240 5236 	movw	r2, #1334	; 0x536
 800b13c:	4932      	ldr	r1, [pc, #200]	; (800b208 <tcp_output+0x24c>)
 800b13e:	482f      	ldr	r0, [pc, #188]	; (800b1fc <tcp_output+0x240>)
 800b140:	f003 fce0 	bl	800eb04 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d01f      	beq.n	800b18c <tcp_output+0x1d0>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	8b5b      	ldrh	r3, [r3, #26]
 800b150:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b154:	2b00      	cmp	r3, #0
 800b156:	d119      	bne.n	800b18c <tcp_output+0x1d0>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00b      	beq.n	800b178 <tcp_output+0x1bc>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d110      	bne.n	800b18c <tcp_output+0x1d0>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b16e:	891a      	ldrh	r2, [r3, #8]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b174:	429a      	cmp	r2, r3
 800b176:	d209      	bcs.n	800b18c <tcp_output+0x1d0>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d004      	beq.n	800b18c <tcp_output+0x1d0>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b188:	2b08      	cmp	r3, #8
 800b18a:	d901      	bls.n	800b190 <tcp_output+0x1d4>
 800b18c:	2301      	movs	r3, #1
 800b18e:	e000      	b.n	800b192 <tcp_output+0x1d6>
 800b190:	2300      	movs	r3, #0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d106      	bne.n	800b1a4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	8b5b      	ldrh	r3, [r3, #26]
 800b19a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	f000 80e4 	beq.w	800b36c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	7d1b      	ldrb	r3, [r3, #20]
 800b1a8:	2b02      	cmp	r3, #2
 800b1aa:	d00d      	beq.n	800b1c8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ae:	68db      	ldr	r3, [r3, #12]
 800b1b0:	899b      	ldrh	r3, [r3, #12]
 800b1b2:	b29c      	uxth	r4, r3
 800b1b4:	2010      	movs	r0, #16
 800b1b6:	f7f9 ff2f 	bl	8005018 <lwip_htons>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	461a      	mov	r2, r3
 800b1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c0:	68db      	ldr	r3, [r3, #12]
 800b1c2:	4322      	orrs	r2, r4
 800b1c4:	b292      	uxth	r2, r2
 800b1c6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b1c8:	697a      	ldr	r2, [r7, #20]
 800b1ca:	6879      	ldr	r1, [r7, #4]
 800b1cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1ce:	f000 f909 	bl	800b3e4 <tcp_output_segment>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b1d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d016      	beq.n	800b20c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	8b5b      	ldrh	r3, [r3, #26]
 800b1e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	835a      	strh	r2, [r3, #26]
      return err;
 800b1ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1f0:	e0d3      	b.n	800b39a <tcp_output+0x3de>
 800b1f2:	bf00      	nop
 800b1f4:	080115f8 	.word	0x080115f8
 800b1f8:	08011b3c 	.word	0x08011b3c
 800b1fc:	0801164c 	.word	0x0801164c
 800b200:	08011b54 	.word	0x08011b54
 800b204:	20008388 	.word	0x20008388
 800b208:	08011b7c 	.word	0x08011b7c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	7d1b      	ldrb	r3, [r3, #20]
 800b218:	2b02      	cmp	r3, #2
 800b21a:	d006      	beq.n	800b22a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	8b5b      	ldrh	r3, [r3, #26]
 800b220:	f023 0303 	bic.w	r3, r3, #3
 800b224:	b29a      	uxth	r2, r3
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	4618      	mov	r0, r3
 800b232:	f7f9 ff06 	bl	8005042 <lwip_htonl>
 800b236:	4604      	mov	r4, r0
 800b238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23a:	891b      	ldrh	r3, [r3, #8]
 800b23c:	461d      	mov	r5, r3
 800b23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b240:	68db      	ldr	r3, [r3, #12]
 800b242:	899b      	ldrh	r3, [r3, #12]
 800b244:	b29b      	uxth	r3, r3
 800b246:	4618      	mov	r0, r3
 800b248:	f7f9 fee6 	bl	8005018 <lwip_htons>
 800b24c:	4603      	mov	r3, r0
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	f003 0303 	and.w	r3, r3, #3
 800b254:	2b00      	cmp	r3, #0
 800b256:	d001      	beq.n	800b25c <tcp_output+0x2a0>
 800b258:	2301      	movs	r3, #1
 800b25a:	e000      	b.n	800b25e <tcp_output+0x2a2>
 800b25c:	2300      	movs	r3, #0
 800b25e:	442b      	add	r3, r5
 800b260:	4423      	add	r3, r4
 800b262:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	1ad3      	subs	r3, r2, r3
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	da02      	bge.n	800b276 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	68ba      	ldr	r2, [r7, #8]
 800b274:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b278:	891b      	ldrh	r3, [r3, #8]
 800b27a:	461c      	mov	r4, r3
 800b27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	899b      	ldrh	r3, [r3, #12]
 800b282:	b29b      	uxth	r3, r3
 800b284:	4618      	mov	r0, r3
 800b286:	f7f9 fec7 	bl	8005018 <lwip_htons>
 800b28a:	4603      	mov	r3, r0
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	f003 0303 	and.w	r3, r3, #3
 800b292:	2b00      	cmp	r3, #0
 800b294:	d001      	beq.n	800b29a <tcp_output+0x2de>
 800b296:	2301      	movs	r3, #1
 800b298:	e000      	b.n	800b29c <tcp_output+0x2e0>
 800b29a:	2300      	movs	r3, #0
 800b29c:	4423      	add	r3, r4
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d049      	beq.n	800b336 <tcp_output+0x37a>
      seg->next = NULL;
 800b2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d105      	bne.n	800b2bc <tcp_output+0x300>
        pcb->unacked = seg;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2b4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800b2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b8:	623b      	str	r3, [r7, #32]
 800b2ba:	e03f      	b.n	800b33c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7f9 febd 	bl	8005042 <lwip_htonl>
 800b2c8:	4604      	mov	r4, r0
 800b2ca:	6a3b      	ldr	r3, [r7, #32]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7f9 feb6 	bl	8005042 <lwip_htonl>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	1ae3      	subs	r3, r4, r3
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	da24      	bge.n	800b328 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	3370      	adds	r3, #112	; 0x70
 800b2e2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b2e4:	e002      	b.n	800b2ec <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b2e6:	69fb      	ldr	r3, [r7, #28]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d011      	beq.n	800b318 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	68db      	ldr	r3, [r3, #12]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7f9 fea0 	bl	8005042 <lwip_htonl>
 800b302:	4604      	mov	r4, r0
 800b304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7f9 fe99 	bl	8005042 <lwip_htonl>
 800b310:	4603      	mov	r3, r0
 800b312:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b314:	2b00      	cmp	r3, #0
 800b316:	dbe6      	blt.n	800b2e6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b324:	601a      	str	r2, [r3, #0]
 800b326:	e009      	b.n	800b33c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b328:	6a3b      	ldr	r3, [r7, #32]
 800b32a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b32c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b32e:	6a3b      	ldr	r3, [r7, #32]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	623b      	str	r3, [r7, #32]
 800b334:	e002      	b.n	800b33c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b336:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b338:	f7fc fc3f 	bl	8007bba <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b340:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800b342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b344:	2b00      	cmp	r3, #0
 800b346:	d012      	beq.n	800b36e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	4618      	mov	r0, r3
 800b350:	f7f9 fe77 	bl	8005042 <lwip_htonl>
 800b354:	4602      	mov	r2, r0
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b35a:	1ad3      	subs	r3, r2, r3
 800b35c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b35e:	8912      	ldrh	r2, [r2, #8]
 800b360:	4413      	add	r3, r2
  while (seg != NULL &&
 800b362:	69ba      	ldr	r2, [r7, #24]
 800b364:	429a      	cmp	r2, r3
 800b366:	f4bf aed9 	bcs.w	800b11c <tcp_output+0x160>
 800b36a:	e000      	b.n	800b36e <tcp_output+0x3b2>
      break;
 800b36c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b372:	2b00      	cmp	r3, #0
 800b374:	d108      	bne.n	800b388 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800b37e:	e004      	b.n	800b38a <tcp_output+0x3ce>
    goto output_done;
 800b380:	bf00      	nop
 800b382:	e002      	b.n	800b38a <tcp_output+0x3ce>
    goto output_done;
 800b384:	bf00      	nop
 800b386:	e000      	b.n	800b38a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b388:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	8b5b      	ldrh	r3, [r3, #26]
 800b38e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b392:	b29a      	uxth	r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3728      	adds	r7, #40	; 0x28
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bdb0      	pop	{r4, r5, r7, pc}
 800b3a2:	bf00      	nop

0800b3a4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d106      	bne.n	800b3c0 <tcp_output_segment_busy+0x1c>
 800b3b2:	4b09      	ldr	r3, [pc, #36]	; (800b3d8 <tcp_output_segment_busy+0x34>)
 800b3b4:	f240 529a 	movw	r2, #1434	; 0x59a
 800b3b8:	4908      	ldr	r1, [pc, #32]	; (800b3dc <tcp_output_segment_busy+0x38>)
 800b3ba:	4809      	ldr	r0, [pc, #36]	; (800b3e0 <tcp_output_segment_busy+0x3c>)
 800b3bc:	f003 fba2 	bl	800eb04 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	7b9b      	ldrb	r3, [r3, #14]
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d001      	beq.n	800b3ce <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e000      	b.n	800b3d0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b3ce:	2300      	movs	r3, #0
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3708      	adds	r7, #8
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	080115f8 	.word	0x080115f8
 800b3dc:	08011b94 	.word	0x08011b94
 800b3e0:	0801164c 	.word	0x0801164c

0800b3e4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b3e4:	b5b0      	push	{r4, r5, r7, lr}
 800b3e6:	b08c      	sub	sp, #48	; 0x30
 800b3e8:	af04      	add	r7, sp, #16
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d106      	bne.n	800b404 <tcp_output_segment+0x20>
 800b3f6:	4b63      	ldr	r3, [pc, #396]	; (800b584 <tcp_output_segment+0x1a0>)
 800b3f8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b3fc:	4962      	ldr	r1, [pc, #392]	; (800b588 <tcp_output_segment+0x1a4>)
 800b3fe:	4863      	ldr	r0, [pc, #396]	; (800b58c <tcp_output_segment+0x1a8>)
 800b400:	f003 fb80 	bl	800eb04 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d106      	bne.n	800b418 <tcp_output_segment+0x34>
 800b40a:	4b5e      	ldr	r3, [pc, #376]	; (800b584 <tcp_output_segment+0x1a0>)
 800b40c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b410:	495f      	ldr	r1, [pc, #380]	; (800b590 <tcp_output_segment+0x1ac>)
 800b412:	485e      	ldr	r0, [pc, #376]	; (800b58c <tcp_output_segment+0x1a8>)
 800b414:	f003 fb76 	bl	800eb04 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d106      	bne.n	800b42c <tcp_output_segment+0x48>
 800b41e:	4b59      	ldr	r3, [pc, #356]	; (800b584 <tcp_output_segment+0x1a0>)
 800b420:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b424:	495b      	ldr	r1, [pc, #364]	; (800b594 <tcp_output_segment+0x1b0>)
 800b426:	4859      	ldr	r0, [pc, #356]	; (800b58c <tcp_output_segment+0x1a8>)
 800b428:	f003 fb6c 	bl	800eb04 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b42c:	68f8      	ldr	r0, [r7, #12]
 800b42e:	f7ff ffb9 	bl	800b3a4 <tcp_output_segment_busy>
 800b432:	4603      	mov	r3, r0
 800b434:	2b00      	cmp	r3, #0
 800b436:	d001      	beq.n	800b43c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b438:	2300      	movs	r3, #0
 800b43a:	e09f      	b.n	800b57c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	68dc      	ldr	r4, [r3, #12]
 800b444:	4610      	mov	r0, r2
 800b446:	f7f9 fdfc 	bl	8005042 <lwip_htonl>
 800b44a:	4603      	mov	r3, r0
 800b44c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	68dc      	ldr	r4, [r3, #12]
 800b456:	4610      	mov	r0, r2
 800b458:	f7f9 fdde 	bl	8005018 <lwip_htons>
 800b45c:	4603      	mov	r3, r0
 800b45e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b464:	68ba      	ldr	r2, [r7, #8]
 800b466:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b468:	441a      	add	r2, r3
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	68db      	ldr	r3, [r3, #12]
 800b472:	3314      	adds	r3, #20
 800b474:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	7a9b      	ldrb	r3, [r3, #10]
 800b47a:	f003 0301 	and.w	r3, r3, #1
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d015      	beq.n	800b4ae <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	3304      	adds	r3, #4
 800b486:	461a      	mov	r2, r3
 800b488:	6879      	ldr	r1, [r7, #4]
 800b48a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b48e:	f7fc fe8b 	bl	80081a8 <tcp_eff_send_mss_netif>
 800b492:	4603      	mov	r3, r0
 800b494:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b496:	8b7b      	ldrh	r3, [r7, #26]
 800b498:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b49c:	4618      	mov	r0, r3
 800b49e:	f7f9 fdd0 	bl	8005042 <lwip_htonl>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b4a8:	69fb      	ldr	r3, [r7, #28]
 800b4aa:	3304      	adds	r3, #4
 800b4ac:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	da02      	bge.n	800b4be <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d10c      	bne.n	800b4e0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b4c6:	4b34      	ldr	r3, [pc, #208]	; (800b598 <tcp_output_segment+0x1b4>)
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	68db      	ldr	r3, [r3, #12]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7f9 fdb4 	bl	8005042 <lwip_htonl>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	68da      	ldr	r2, [r3, #12]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	1ad3      	subs	r3, r2, r3
 800b4ec:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	8959      	ldrh	r1, [r3, #10]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	8b3a      	ldrh	r2, [r7, #24]
 800b4fa:	1a8a      	subs	r2, r1, r2
 800b4fc:	b292      	uxth	r2, r2
 800b4fe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	8919      	ldrh	r1, [r3, #8]
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	8b3a      	ldrh	r2, [r7, #24]
 800b50c:	1a8a      	subs	r2, r1, r2
 800b50e:	b292      	uxth	r2, r2
 800b510:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	68fa      	ldr	r2, [r7, #12]
 800b518:	68d2      	ldr	r2, [r2, #12]
 800b51a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	68db      	ldr	r3, [r3, #12]
 800b520:	2200      	movs	r2, #0
 800b522:	741a      	strb	r2, [r3, #16]
 800b524:	2200      	movs	r2, #0
 800b526:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	f103 0214 	add.w	r2, r3, #20
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	7a9b      	ldrb	r3, [r3, #10]
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	f003 0304 	and.w	r3, r3, #4
 800b53a:	4413      	add	r3, r2
 800b53c:	69fa      	ldr	r2, [r7, #28]
 800b53e:	429a      	cmp	r2, r3
 800b540:	d006      	beq.n	800b550 <tcp_output_segment+0x16c>
 800b542:	4b10      	ldr	r3, [pc, #64]	; (800b584 <tcp_output_segment+0x1a0>)
 800b544:	f240 621c 	movw	r2, #1564	; 0x61c
 800b548:	4914      	ldr	r1, [pc, #80]	; (800b59c <tcp_output_segment+0x1b8>)
 800b54a:	4810      	ldr	r0, [pc, #64]	; (800b58c <tcp_output_segment+0x1a8>)
 800b54c:	f003 fada 	bl	800eb04 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	6858      	ldr	r0, [r3, #4]
 800b554:	68b9      	ldr	r1, [r7, #8]
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	1d1c      	adds	r4, r3, #4
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	7add      	ldrb	r5, [r3, #11]
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	7a9b      	ldrb	r3, [r3, #10]
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	9202      	str	r2, [sp, #8]
 800b566:	2206      	movs	r2, #6
 800b568:	9201      	str	r2, [sp, #4]
 800b56a:	9300      	str	r3, [sp, #0]
 800b56c:	462b      	mov	r3, r5
 800b56e:	4622      	mov	r2, r4
 800b570:	f002 fa36 	bl	800d9e0 <ip4_output_if>
 800b574:	4603      	mov	r3, r0
 800b576:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b578:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3720      	adds	r7, #32
 800b580:	46bd      	mov	sp, r7
 800b582:	bdb0      	pop	{r4, r5, r7, pc}
 800b584:	080115f8 	.word	0x080115f8
 800b588:	08011bbc 	.word	0x08011bbc
 800b58c:	0801164c 	.word	0x0801164c
 800b590:	08011bdc 	.word	0x08011bdc
 800b594:	08011bfc 	.word	0x08011bfc
 800b598:	2000833c 	.word	0x2000833c
 800b59c:	08011c20 	.word	0x08011c20

0800b5a0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b5a0:	b5b0      	push	{r4, r5, r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d106      	bne.n	800b5bc <tcp_rexmit_rto_prepare+0x1c>
 800b5ae:	4b31      	ldr	r3, [pc, #196]	; (800b674 <tcp_rexmit_rto_prepare+0xd4>)
 800b5b0:	f240 6263 	movw	r2, #1635	; 0x663
 800b5b4:	4930      	ldr	r1, [pc, #192]	; (800b678 <tcp_rexmit_rto_prepare+0xd8>)
 800b5b6:	4831      	ldr	r0, [pc, #196]	; (800b67c <tcp_rexmit_rto_prepare+0xdc>)
 800b5b8:	f003 faa4 	bl	800eb04 <iprintf>

  if (pcb->unacked == NULL) {
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d102      	bne.n	800b5ca <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b5c4:	f06f 0305 	mvn.w	r3, #5
 800b5c8:	e050      	b.n	800b66c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5ce:	60fb      	str	r3, [r7, #12]
 800b5d0:	e00b      	b.n	800b5ea <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b5d2:	68f8      	ldr	r0, [r7, #12]
 800b5d4:	f7ff fee6 	bl	800b3a4 <tcp_output_segment_busy>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d002      	beq.n	800b5e4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b5de:	f06f 0305 	mvn.w	r3, #5
 800b5e2:	e043      	b.n	800b66c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	60fb      	str	r3, [r7, #12]
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1ef      	bne.n	800b5d2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b5f2:	68f8      	ldr	r0, [r7, #12]
 800b5f4:	f7ff fed6 	bl	800b3a4 <tcp_output_segment_busy>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d002      	beq.n	800b604 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b5fe:	f06f 0305 	mvn.w	r3, #5
 800b602:	e033      	b.n	800b66c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2200      	movs	r2, #0
 800b618:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	8b5b      	ldrh	r3, [r3, #26]
 800b61e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b622:	b29a      	uxth	r2, r3
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	4618      	mov	r0, r3
 800b630:	f7f9 fd07 	bl	8005042 <lwip_htonl>
 800b634:	4604      	mov	r4, r0
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	891b      	ldrh	r3, [r3, #8]
 800b63a:	461d      	mov	r5, r3
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	899b      	ldrh	r3, [r3, #12]
 800b642:	b29b      	uxth	r3, r3
 800b644:	4618      	mov	r0, r3
 800b646:	f7f9 fce7 	bl	8005018 <lwip_htons>
 800b64a:	4603      	mov	r3, r0
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	f003 0303 	and.w	r3, r3, #3
 800b652:	2b00      	cmp	r3, #0
 800b654:	d001      	beq.n	800b65a <tcp_rexmit_rto_prepare+0xba>
 800b656:	2301      	movs	r3, #1
 800b658:	e000      	b.n	800b65c <tcp_rexmit_rto_prepare+0xbc>
 800b65a:	2300      	movs	r3, #0
 800b65c:	442b      	add	r3, r5
 800b65e:	18e2      	adds	r2, r4, r3
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3710      	adds	r7, #16
 800b670:	46bd      	mov	sp, r7
 800b672:	bdb0      	pop	{r4, r5, r7, pc}
 800b674:	080115f8 	.word	0x080115f8
 800b678:	08011c34 	.word	0x08011c34
 800b67c:	0801164c 	.word	0x0801164c

0800b680 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d106      	bne.n	800b69c <tcp_rexmit_rto_commit+0x1c>
 800b68e:	4b0d      	ldr	r3, [pc, #52]	; (800b6c4 <tcp_rexmit_rto_commit+0x44>)
 800b690:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b694:	490c      	ldr	r1, [pc, #48]	; (800b6c8 <tcp_rexmit_rto_commit+0x48>)
 800b696:	480d      	ldr	r0, [pc, #52]	; (800b6cc <tcp_rexmit_rto_commit+0x4c>)
 800b698:	f003 fa34 	bl	800eb04 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b6a2:	2bff      	cmp	r3, #255	; 0xff
 800b6a4:	d007      	beq.n	800b6b6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b6ac:	3301      	adds	r3, #1
 800b6ae:	b2da      	uxtb	r2, r3
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f7ff fc80 	bl	800afbc <tcp_output>
}
 800b6bc:	bf00      	nop
 800b6be:	3708      	adds	r7, #8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	080115f8 	.word	0x080115f8
 800b6c8:	08011c58 	.word	0x08011c58
 800b6cc:	0801164c 	.word	0x0801164c

0800b6d0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d106      	bne.n	800b6ec <tcp_rexmit_rto+0x1c>
 800b6de:	4b0a      	ldr	r3, [pc, #40]	; (800b708 <tcp_rexmit_rto+0x38>)
 800b6e0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b6e4:	4909      	ldr	r1, [pc, #36]	; (800b70c <tcp_rexmit_rto+0x3c>)
 800b6e6:	480a      	ldr	r0, [pc, #40]	; (800b710 <tcp_rexmit_rto+0x40>)
 800b6e8:	f003 fa0c 	bl	800eb04 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f7ff ff57 	bl	800b5a0 <tcp_rexmit_rto_prepare>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d102      	bne.n	800b6fe <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f7ff ffc1 	bl	800b680 <tcp_rexmit_rto_commit>
  }
}
 800b6fe:	bf00      	nop
 800b700:	3708      	adds	r7, #8
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	080115f8 	.word	0x080115f8
 800b70c:	08011c7c 	.word	0x08011c7c
 800b710:	0801164c 	.word	0x0801164c

0800b714 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b714:	b590      	push	{r4, r7, lr}
 800b716:	b085      	sub	sp, #20
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d106      	bne.n	800b730 <tcp_rexmit+0x1c>
 800b722:	4b2f      	ldr	r3, [pc, #188]	; (800b7e0 <tcp_rexmit+0xcc>)
 800b724:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b728:	492e      	ldr	r1, [pc, #184]	; (800b7e4 <tcp_rexmit+0xd0>)
 800b72a:	482f      	ldr	r0, [pc, #188]	; (800b7e8 <tcp_rexmit+0xd4>)
 800b72c:	f003 f9ea 	bl	800eb04 <iprintf>

  if (pcb->unacked == NULL) {
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b734:	2b00      	cmp	r3, #0
 800b736:	d102      	bne.n	800b73e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b738:	f06f 0305 	mvn.w	r3, #5
 800b73c:	e04c      	b.n	800b7d8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b742:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b744:	68b8      	ldr	r0, [r7, #8]
 800b746:	f7ff fe2d 	bl	800b3a4 <tcp_output_segment_busy>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d002      	beq.n	800b756 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b750:	f06f 0305 	mvn.w	r3, #5
 800b754:	e040      	b.n	800b7d8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	336c      	adds	r3, #108	; 0x6c
 800b762:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b764:	e002      	b.n	800b76c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d011      	beq.n	800b798 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	4618      	mov	r0, r3
 800b77e:	f7f9 fc60 	bl	8005042 <lwip_htonl>
 800b782:	4604      	mov	r4, r0
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7f9 fc59 	bl	8005042 <lwip_htonl>
 800b790:	4603      	mov	r3, r0
 800b792:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b794:	2b00      	cmp	r3, #0
 800b796:	dbe6      	blt.n	800b766 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	68ba      	ldr	r2, [r7, #8]
 800b7a4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d103      	bne.n	800b7b6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b7bc:	2bff      	cmp	r3, #255	; 0xff
 800b7be:	d007      	beq.n	800b7d0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	b2da      	uxtb	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b7d6:	2300      	movs	r3, #0
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3714      	adds	r7, #20
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd90      	pop	{r4, r7, pc}
 800b7e0:	080115f8 	.word	0x080115f8
 800b7e4:	08011c98 	.word	0x08011c98
 800b7e8:	0801164c 	.word	0x0801164c

0800b7ec <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d106      	bne.n	800b808 <tcp_rexmit_fast+0x1c>
 800b7fa:	4b2a      	ldr	r3, [pc, #168]	; (800b8a4 <tcp_rexmit_fast+0xb8>)
 800b7fc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b800:	4929      	ldr	r1, [pc, #164]	; (800b8a8 <tcp_rexmit_fast+0xbc>)
 800b802:	482a      	ldr	r0, [pc, #168]	; (800b8ac <tcp_rexmit_fast+0xc0>)
 800b804:	f003 f97e 	bl	800eb04 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d044      	beq.n	800b89a <tcp_rexmit_fast+0xae>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	8b5b      	ldrh	r3, [r3, #26]
 800b814:	f003 0304 	and.w	r3, r3, #4
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d13e      	bne.n	800b89a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f7ff ff79 	bl	800b714 <tcp_rexmit>
 800b822:	4603      	mov	r3, r0
 800b824:	2b00      	cmp	r3, #0
 800b826:	d138      	bne.n	800b89a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b834:	4293      	cmp	r3, r2
 800b836:	bf28      	it	cs
 800b838:	4613      	movcs	r3, r2
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	0fda      	lsrs	r2, r3, #31
 800b83e:	4413      	add	r3, r2
 800b840:	105b      	asrs	r3, r3, #1
 800b842:	b29a      	uxth	r2, r3
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b850:	461a      	mov	r2, r3
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b856:	005b      	lsls	r3, r3, #1
 800b858:	429a      	cmp	r2, r3
 800b85a:	d206      	bcs.n	800b86a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b860:	005b      	lsls	r3, r3, #1
 800b862:	b29a      	uxth	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b874:	4619      	mov	r1, r3
 800b876:	0049      	lsls	r1, r1, #1
 800b878:	440b      	add	r3, r1
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	4413      	add	r3, r2
 800b87e:	b29a      	uxth	r2, r3
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	8b5b      	ldrh	r3, [r3, #26]
 800b88a:	f043 0304 	orr.w	r3, r3, #4
 800b88e:	b29a      	uxth	r2, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b89a:	bf00      	nop
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	080115f8 	.word	0x080115f8
 800b8a8:	08011cb0 	.word	0x08011cb0
 800b8ac:	0801164c 	.word	0x0801164c

0800b8b0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b086      	sub	sp, #24
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	607b      	str	r3, [r7, #4]
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	817b      	strh	r3, [r7, #10]
 800b8be:	4613      	mov	r3, r2
 800b8c0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b8c2:	897a      	ldrh	r2, [r7, #10]
 800b8c4:	893b      	ldrh	r3, [r7, #8]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	3314      	adds	r3, #20
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	2022      	movs	r0, #34	; 0x22
 800b8d6:	f7fa fc19 	bl	800610c <pbuf_alloc>
 800b8da:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d04d      	beq.n	800b97e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b8e2:	897b      	ldrh	r3, [r7, #10]
 800b8e4:	3313      	adds	r3, #19
 800b8e6:	697a      	ldr	r2, [r7, #20]
 800b8e8:	8952      	ldrh	r2, [r2, #10]
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	db06      	blt.n	800b8fc <tcp_output_alloc_header_common+0x4c>
 800b8ee:	4b26      	ldr	r3, [pc, #152]	; (800b988 <tcp_output_alloc_header_common+0xd8>)
 800b8f0:	f240 7223 	movw	r2, #1827	; 0x723
 800b8f4:	4925      	ldr	r1, [pc, #148]	; (800b98c <tcp_output_alloc_header_common+0xdc>)
 800b8f6:	4826      	ldr	r0, [pc, #152]	; (800b990 <tcp_output_alloc_header_common+0xe0>)
 800b8f8:	f003 f904 	bl	800eb04 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b902:	8c3b      	ldrh	r3, [r7, #32]
 800b904:	4618      	mov	r0, r3
 800b906:	f7f9 fb87 	bl	8005018 <lwip_htons>
 800b90a:	4603      	mov	r3, r0
 800b90c:	461a      	mov	r2, r3
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b912:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b914:	4618      	mov	r0, r3
 800b916:	f7f9 fb7f 	bl	8005018 <lwip_htons>
 800b91a:	4603      	mov	r3, r0
 800b91c:	461a      	mov	r2, r3
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b928:	68f8      	ldr	r0, [r7, #12]
 800b92a:	f7f9 fb8a 	bl	8005042 <lwip_htonl>
 800b92e:	4602      	mov	r2, r0
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b934:	897b      	ldrh	r3, [r7, #10]
 800b936:	089b      	lsrs	r3, r3, #2
 800b938:	b29b      	uxth	r3, r3
 800b93a:	3305      	adds	r3, #5
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	031b      	lsls	r3, r3, #12
 800b940:	b29a      	uxth	r2, r3
 800b942:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b946:	b29b      	uxth	r3, r3
 800b948:	4313      	orrs	r3, r2
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7f9 fb63 	bl	8005018 <lwip_htons>
 800b952:	4603      	mov	r3, r0
 800b954:	461a      	mov	r2, r3
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b95a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7f9 fb5b 	bl	8005018 <lwip_htons>
 800b962:	4603      	mov	r3, r0
 800b964:	461a      	mov	r2, r3
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	2200      	movs	r2, #0
 800b96e:	741a      	strb	r2, [r3, #16]
 800b970:	2200      	movs	r2, #0
 800b972:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	2200      	movs	r2, #0
 800b978:	749a      	strb	r2, [r3, #18]
 800b97a:	2200      	movs	r2, #0
 800b97c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b97e:	697b      	ldr	r3, [r7, #20]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3718      	adds	r7, #24
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}
 800b988:	080115f8 	.word	0x080115f8
 800b98c:	08011cd0 	.word	0x08011cd0
 800b990:	0801164c 	.word	0x0801164c

0800b994 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b994:	b5b0      	push	{r4, r5, r7, lr}
 800b996:	b08a      	sub	sp, #40	; 0x28
 800b998:	af04      	add	r7, sp, #16
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	607b      	str	r3, [r7, #4]
 800b99e:	460b      	mov	r3, r1
 800b9a0:	817b      	strh	r3, [r7, #10]
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d106      	bne.n	800b9ba <tcp_output_alloc_header+0x26>
 800b9ac:	4b15      	ldr	r3, [pc, #84]	; (800ba04 <tcp_output_alloc_header+0x70>)
 800b9ae:	f240 7242 	movw	r2, #1858	; 0x742
 800b9b2:	4915      	ldr	r1, [pc, #84]	; (800ba08 <tcp_output_alloc_header+0x74>)
 800b9b4:	4815      	ldr	r0, [pc, #84]	; (800ba0c <tcp_output_alloc_header+0x78>)
 800b9b6:	f003 f8a5 	bl	800eb04 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	8adb      	ldrh	r3, [r3, #22]
 800b9c2:	68fa      	ldr	r2, [r7, #12]
 800b9c4:	8b12      	ldrh	r2, [r2, #24]
 800b9c6:	68f9      	ldr	r1, [r7, #12]
 800b9c8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b9ca:	893d      	ldrh	r5, [r7, #8]
 800b9cc:	897c      	ldrh	r4, [r7, #10]
 800b9ce:	9103      	str	r1, [sp, #12]
 800b9d0:	2110      	movs	r1, #16
 800b9d2:	9102      	str	r1, [sp, #8]
 800b9d4:	9201      	str	r2, [sp, #4]
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	462a      	mov	r2, r5
 800b9dc:	4621      	mov	r1, r4
 800b9de:	f7ff ff67 	bl	800b8b0 <tcp_output_alloc_header_common>
 800b9e2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d006      	beq.n	800b9f8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b9f2:	441a      	add	r2, r3
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b9f8:	697b      	ldr	r3, [r7, #20]
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3718      	adds	r7, #24
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bdb0      	pop	{r4, r5, r7, pc}
 800ba02:	bf00      	nop
 800ba04:	080115f8 	.word	0x080115f8
 800ba08:	08011d00 	.word	0x08011d00
 800ba0c:	0801164c 	.word	0x0801164c

0800ba10 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b088      	sub	sp, #32
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	4611      	mov	r1, r2
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	460b      	mov	r3, r1
 800ba20:	71fb      	strb	r3, [r7, #7]
 800ba22:	4613      	mov	r3, r2
 800ba24:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ba26:	2300      	movs	r3, #0
 800ba28:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d106      	bne.n	800ba3e <tcp_output_fill_options+0x2e>
 800ba30:	4b13      	ldr	r3, [pc, #76]	; (800ba80 <tcp_output_fill_options+0x70>)
 800ba32:	f240 7256 	movw	r2, #1878	; 0x756
 800ba36:	4913      	ldr	r1, [pc, #76]	; (800ba84 <tcp_output_fill_options+0x74>)
 800ba38:	4813      	ldr	r0, [pc, #76]	; (800ba88 <tcp_output_fill_options+0x78>)
 800ba3a:	f003 f863 	bl	800eb04 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	3314      	adds	r3, #20
 800ba48:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	f103 0214 	add.w	r2, r3, #20
 800ba50:	8bfb      	ldrh	r3, [r7, #30]
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	4619      	mov	r1, r3
 800ba56:	79fb      	ldrb	r3, [r7, #7]
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	f003 0304 	and.w	r3, r3, #4
 800ba5e:	440b      	add	r3, r1
 800ba60:	4413      	add	r3, r2
 800ba62:	697a      	ldr	r2, [r7, #20]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d006      	beq.n	800ba76 <tcp_output_fill_options+0x66>
 800ba68:	4b05      	ldr	r3, [pc, #20]	; (800ba80 <tcp_output_fill_options+0x70>)
 800ba6a:	f240 7275 	movw	r2, #1909	; 0x775
 800ba6e:	4907      	ldr	r1, [pc, #28]	; (800ba8c <tcp_output_fill_options+0x7c>)
 800ba70:	4805      	ldr	r0, [pc, #20]	; (800ba88 <tcp_output_fill_options+0x78>)
 800ba72:	f003 f847 	bl	800eb04 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ba76:	bf00      	nop
 800ba78:	3720      	adds	r7, #32
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	080115f8 	.word	0x080115f8
 800ba84:	08011d28 	.word	0x08011d28
 800ba88:	0801164c 	.word	0x0801164c
 800ba8c:	08011c20 	.word	0x08011c20

0800ba90 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b08a      	sub	sp, #40	; 0x28
 800ba94:	af04      	add	r7, sp, #16
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	607a      	str	r2, [r7, #4]
 800ba9c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d106      	bne.n	800bab2 <tcp_output_control_segment+0x22>
 800baa4:	4b1c      	ldr	r3, [pc, #112]	; (800bb18 <tcp_output_control_segment+0x88>)
 800baa6:	f240 7287 	movw	r2, #1927	; 0x787
 800baaa:	491c      	ldr	r1, [pc, #112]	; (800bb1c <tcp_output_control_segment+0x8c>)
 800baac:	481c      	ldr	r0, [pc, #112]	; (800bb20 <tcp_output_control_segment+0x90>)
 800baae:	f003 f829 	bl	800eb04 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800bab2:	683a      	ldr	r2, [r7, #0]
 800bab4:	6879      	ldr	r1, [r7, #4]
 800bab6:	68f8      	ldr	r0, [r7, #12]
 800bab8:	f7fe ff40 	bl	800a93c <tcp_route>
 800babc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d102      	bne.n	800baca <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800bac4:	23fc      	movs	r3, #252	; 0xfc
 800bac6:	75fb      	strb	r3, [r7, #23]
 800bac8:	e01c      	b.n	800bb04 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d006      	beq.n	800bade <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	7adb      	ldrb	r3, [r3, #11]
 800bad4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	7a9b      	ldrb	r3, [r3, #10]
 800bada:	757b      	strb	r3, [r7, #21]
 800badc:	e003      	b.n	800bae6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800bade:	23ff      	movs	r3, #255	; 0xff
 800bae0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800bae2:	2300      	movs	r3, #0
 800bae4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800bae6:	7dba      	ldrb	r2, [r7, #22]
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	9302      	str	r3, [sp, #8]
 800baec:	2306      	movs	r3, #6
 800baee:	9301      	str	r3, [sp, #4]
 800baf0:	7d7b      	ldrb	r3, [r7, #21]
 800baf2:	9300      	str	r3, [sp, #0]
 800baf4:	4613      	mov	r3, r2
 800baf6:	683a      	ldr	r2, [r7, #0]
 800baf8:	6879      	ldr	r1, [r7, #4]
 800bafa:	68b8      	ldr	r0, [r7, #8]
 800bafc:	f001 ff70 	bl	800d9e0 <ip4_output_if>
 800bb00:	4603      	mov	r3, r0
 800bb02:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800bb04:	68b8      	ldr	r0, [r7, #8]
 800bb06:	f7fa fde5 	bl	80066d4 <pbuf_free>
  return err;
 800bb0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3718      	adds	r7, #24
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	080115f8 	.word	0x080115f8
 800bb1c:	08011d50 	.word	0x08011d50
 800bb20:	0801164c 	.word	0x0801164c

0800bb24 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800bb24:	b590      	push	{r4, r7, lr}
 800bb26:	b08b      	sub	sp, #44	; 0x2c
 800bb28:	af04      	add	r7, sp, #16
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	607a      	str	r2, [r7, #4]
 800bb30:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d106      	bne.n	800bb46 <tcp_rst+0x22>
 800bb38:	4b1f      	ldr	r3, [pc, #124]	; (800bbb8 <tcp_rst+0x94>)
 800bb3a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800bb3e:	491f      	ldr	r1, [pc, #124]	; (800bbbc <tcp_rst+0x98>)
 800bb40:	481f      	ldr	r0, [pc, #124]	; (800bbc0 <tcp_rst+0x9c>)
 800bb42:	f002 ffdf 	bl	800eb04 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800bb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d106      	bne.n	800bb5a <tcp_rst+0x36>
 800bb4c:	4b1a      	ldr	r3, [pc, #104]	; (800bbb8 <tcp_rst+0x94>)
 800bb4e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800bb52:	491c      	ldr	r1, [pc, #112]	; (800bbc4 <tcp_rst+0xa0>)
 800bb54:	481a      	ldr	r0, [pc, #104]	; (800bbc0 <tcp_rst+0x9c>)
 800bb56:	f002 ffd5 	bl	800eb04 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800bb5e:	f246 0308 	movw	r3, #24584	; 0x6008
 800bb62:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800bb64:	7dfb      	ldrb	r3, [r7, #23]
 800bb66:	b29c      	uxth	r4, r3
 800bb68:	68b8      	ldr	r0, [r7, #8]
 800bb6a:	f7f9 fa6a 	bl	8005042 <lwip_htonl>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	8abb      	ldrh	r3, [r7, #20]
 800bb72:	9303      	str	r3, [sp, #12]
 800bb74:	2314      	movs	r3, #20
 800bb76:	9302      	str	r3, [sp, #8]
 800bb78:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bb7a:	9301      	str	r3, [sp, #4]
 800bb7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bb7e:	9300      	str	r3, [sp, #0]
 800bb80:	4613      	mov	r3, r2
 800bb82:	2200      	movs	r2, #0
 800bb84:	4621      	mov	r1, r4
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f7ff fe92 	bl	800b8b0 <tcp_output_alloc_header_common>
 800bb8c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00c      	beq.n	800bbae <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bb94:	7dfb      	ldrb	r3, [r7, #23]
 800bb96:	2200      	movs	r2, #0
 800bb98:	6939      	ldr	r1, [r7, #16]
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	f7ff ff38 	bl	800ba10 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800bba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba2:	683a      	ldr	r2, [r7, #0]
 800bba4:	6939      	ldr	r1, [r7, #16]
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f7ff ff72 	bl	800ba90 <tcp_output_control_segment>
 800bbac:	e000      	b.n	800bbb0 <tcp_rst+0x8c>
    return;
 800bbae:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800bbb0:	371c      	adds	r7, #28
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd90      	pop	{r4, r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	080115f8 	.word	0x080115f8
 800bbbc:	08011d7c 	.word	0x08011d7c
 800bbc0:	0801164c 	.word	0x0801164c
 800bbc4:	08011d98 	.word	0x08011d98

0800bbc8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800bbc8:	b590      	push	{r4, r7, lr}
 800bbca:	b087      	sub	sp, #28
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d106      	bne.n	800bbec <tcp_send_empty_ack+0x24>
 800bbde:	4b28      	ldr	r3, [pc, #160]	; (800bc80 <tcp_send_empty_ack+0xb8>)
 800bbe0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800bbe4:	4927      	ldr	r1, [pc, #156]	; (800bc84 <tcp_send_empty_ack+0xbc>)
 800bbe6:	4828      	ldr	r0, [pc, #160]	; (800bc88 <tcp_send_empty_ack+0xc0>)
 800bbe8:	f002 ff8c 	bl	800eb04 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bbec:	7dfb      	ldrb	r3, [r7, #23]
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	f003 0304 	and.w	r3, r3, #4
 800bbf6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800bbf8:	7d7b      	ldrb	r3, [r7, #21]
 800bbfa:	b29c      	uxth	r4, r3
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7f9 fa1e 	bl	8005042 <lwip_htonl>
 800bc06:	4603      	mov	r3, r0
 800bc08:	2200      	movs	r2, #0
 800bc0a:	4621      	mov	r1, r4
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f7ff fec1 	bl	800b994 <tcp_output_alloc_header>
 800bc12:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d109      	bne.n	800bc2e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	8b5b      	ldrh	r3, [r3, #26]
 800bc1e:	f043 0303 	orr.w	r3, r3, #3
 800bc22:	b29a      	uxth	r2, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800bc28:	f06f 0301 	mvn.w	r3, #1
 800bc2c:	e023      	b.n	800bc76 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800bc2e:	7dbb      	ldrb	r3, [r7, #22]
 800bc30:	7dfa      	ldrb	r2, [r7, #23]
 800bc32:	6939      	ldr	r1, [r7, #16]
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f7ff feeb 	bl	800ba10 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	3304      	adds	r3, #4
 800bc40:	6939      	ldr	r1, [r7, #16]
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f7ff ff24 	bl	800ba90 <tcp_output_control_segment>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800bc4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d007      	beq.n	800bc64 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	8b5b      	ldrh	r3, [r3, #26]
 800bc58:	f043 0303 	orr.w	r3, r3, #3
 800bc5c:	b29a      	uxth	r2, r3
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	835a      	strh	r2, [r3, #26]
 800bc62:	e006      	b.n	800bc72 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	8b5b      	ldrh	r3, [r3, #26]
 800bc68:	f023 0303 	bic.w	r3, r3, #3
 800bc6c:	b29a      	uxth	r2, r3
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800bc72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	371c      	adds	r7, #28
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd90      	pop	{r4, r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	080115f8 	.word	0x080115f8
 800bc84:	08011db4 	.word	0x08011db4
 800bc88:	0801164c 	.word	0x0801164c

0800bc8c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800bc8c:	b590      	push	{r4, r7, lr}
 800bc8e:	b087      	sub	sp, #28
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bc94:	2300      	movs	r3, #0
 800bc96:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d106      	bne.n	800bcac <tcp_keepalive+0x20>
 800bc9e:	4b18      	ldr	r3, [pc, #96]	; (800bd00 <tcp_keepalive+0x74>)
 800bca0:	f640 0224 	movw	r2, #2084	; 0x824
 800bca4:	4917      	ldr	r1, [pc, #92]	; (800bd04 <tcp_keepalive+0x78>)
 800bca6:	4818      	ldr	r0, [pc, #96]	; (800bd08 <tcp_keepalive+0x7c>)
 800bca8:	f002 ff2c 	bl	800eb04 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800bcac:	7dfb      	ldrb	r3, [r7, #23]
 800bcae:	b29c      	uxth	r4, r3
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcb4:	3b01      	subs	r3, #1
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7f9 f9c3 	bl	8005042 <lwip_htonl>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	4621      	mov	r1, r4
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f7ff fe66 	bl	800b994 <tcp_output_alloc_header>
 800bcc8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d102      	bne.n	800bcd6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800bcd0:	f04f 33ff 	mov.w	r3, #4294967295
 800bcd4:	e010      	b.n	800bcf8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	6939      	ldr	r1, [r7, #16]
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f7ff fe97 	bl	800ba10 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	3304      	adds	r3, #4
 800bce8:	6939      	ldr	r1, [r7, #16]
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f7ff fed0 	bl	800ba90 <tcp_output_control_segment>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bcf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	371c      	adds	r7, #28
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd90      	pop	{r4, r7, pc}
 800bd00:	080115f8 	.word	0x080115f8
 800bd04:	08011dd4 	.word	0x08011dd4
 800bd08:	0801164c 	.word	0x0801164c

0800bd0c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800bd0c:	b590      	push	{r4, r7, lr}
 800bd0e:	b08b      	sub	sp, #44	; 0x2c
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bd14:	2300      	movs	r3, #0
 800bd16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d106      	bne.n	800bd2e <tcp_zero_window_probe+0x22>
 800bd20:	4b4c      	ldr	r3, [pc, #304]	; (800be54 <tcp_zero_window_probe+0x148>)
 800bd22:	f640 024f 	movw	r2, #2127	; 0x84f
 800bd26:	494c      	ldr	r1, [pc, #304]	; (800be58 <tcp_zero_window_probe+0x14c>)
 800bd28:	484c      	ldr	r0, [pc, #304]	; (800be5c <tcp_zero_window_probe+0x150>)
 800bd2a:	f002 feeb 	bl	800eb04 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd32:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800bd34:	6a3b      	ldr	r3, [r7, #32]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d101      	bne.n	800bd3e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	e086      	b.n	800be4c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bd44:	2bff      	cmp	r3, #255	; 0xff
 800bd46:	d007      	beq.n	800bd58 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bd4e:	3301      	adds	r3, #1
 800bd50:	b2da      	uxtb	r2, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bd58:	6a3b      	ldr	r3, [r7, #32]
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	899b      	ldrh	r3, [r3, #12]
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7f9 f959 	bl	8005018 <lwip_htons>
 800bd66:	4603      	mov	r3, r0
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	f003 0301 	and.w	r3, r3, #1
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d005      	beq.n	800bd7e <tcp_zero_window_probe+0x72>
 800bd72:	6a3b      	ldr	r3, [r7, #32]
 800bd74:	891b      	ldrh	r3, [r3, #8]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d101      	bne.n	800bd7e <tcp_zero_window_probe+0x72>
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e000      	b.n	800bd80 <tcp_zero_window_probe+0x74>
 800bd7e:	2300      	movs	r3, #0
 800bd80:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800bd82:	7ffb      	ldrb	r3, [r7, #31]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	bf0c      	ite	eq
 800bd88:	2301      	moveq	r3, #1
 800bd8a:	2300      	movne	r3, #0
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bd90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd94:	b299      	uxth	r1, r3
 800bd96:	6a3b      	ldr	r3, [r7, #32]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	8bba      	ldrh	r2, [r7, #28]
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f7ff fdf8 	bl	800b994 <tcp_output_alloc_header>
 800bda4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800bda6:	69bb      	ldr	r3, [r7, #24]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d102      	bne.n	800bdb2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800bdac:	f04f 33ff 	mov.w	r3, #4294967295
 800bdb0:	e04c      	b.n	800be4c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800bdb2:	69bb      	ldr	r3, [r7, #24]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800bdb8:	7ffb      	ldrb	r3, [r7, #31]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d011      	beq.n	800bde2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	899b      	ldrh	r3, [r3, #12]
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	b21b      	sxth	r3, r3
 800bdc6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bdca:	b21c      	sxth	r4, r3
 800bdcc:	2011      	movs	r0, #17
 800bdce:	f7f9 f923 	bl	8005018 <lwip_htons>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	b21b      	sxth	r3, r3
 800bdd6:	4323      	orrs	r3, r4
 800bdd8:	b21b      	sxth	r3, r3
 800bdda:	b29a      	uxth	r2, r3
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	819a      	strh	r2, [r3, #12]
 800bde0:	e010      	b.n	800be04 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800bde2:	69bb      	ldr	r3, [r7, #24]
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	3314      	adds	r3, #20
 800bde8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800bdea:	6a3b      	ldr	r3, [r7, #32]
 800bdec:	6858      	ldr	r0, [r3, #4]
 800bdee:	6a3b      	ldr	r3, [r7, #32]
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	891a      	ldrh	r2, [r3, #8]
 800bdf4:	6a3b      	ldr	r3, [r7, #32]
 800bdf6:	891b      	ldrh	r3, [r3, #8]
 800bdf8:	1ad3      	subs	r3, r2, r3
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	6939      	ldr	r1, [r7, #16]
 800be00:	f7fa fe52 	bl	8006aa8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800be04:	6a3b      	ldr	r3, [r7, #32]
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7f9 f919 	bl	8005042 <lwip_htonl>
 800be10:	4603      	mov	r3, r0
 800be12:	3301      	adds	r3, #1
 800be14:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	1ad3      	subs	r3, r2, r3
 800be1e:	2b00      	cmp	r3, #0
 800be20:	da02      	bge.n	800be28 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800be28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be2c:	2200      	movs	r2, #0
 800be2e:	69b9      	ldr	r1, [r7, #24]
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f7ff fded 	bl	800ba10 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800be36:	687a      	ldr	r2, [r7, #4]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	3304      	adds	r3, #4
 800be3c:	69b9      	ldr	r1, [r7, #24]
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f7ff fe26 	bl	800ba90 <tcp_output_control_segment>
 800be44:	4603      	mov	r3, r0
 800be46:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800be48:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	372c      	adds	r7, #44	; 0x2c
 800be50:	46bd      	mov	sp, r7
 800be52:	bd90      	pop	{r4, r7, pc}
 800be54:	080115f8 	.word	0x080115f8
 800be58:	08011df0 	.word	0x08011df0
 800be5c:	0801164c 	.word	0x0801164c

0800be60 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800be68:	f7fa ff0c 	bl	8006c84 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800be6c:	4b0a      	ldr	r3, [pc, #40]	; (800be98 <tcpip_tcp_timer+0x38>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d103      	bne.n	800be7c <tcpip_tcp_timer+0x1c>
 800be74:	4b09      	ldr	r3, [pc, #36]	; (800be9c <tcpip_tcp_timer+0x3c>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d005      	beq.n	800be88 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800be7c:	2200      	movs	r2, #0
 800be7e:	4908      	ldr	r1, [pc, #32]	; (800bea0 <tcpip_tcp_timer+0x40>)
 800be80:	20fa      	movs	r0, #250	; 0xfa
 800be82:	f000 f8f3 	bl	800c06c <sys_timeout>
 800be86:	e003      	b.n	800be90 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800be88:	4b06      	ldr	r3, [pc, #24]	; (800bea4 <tcpip_tcp_timer+0x44>)
 800be8a:	2200      	movs	r2, #0
 800be8c:	601a      	str	r2, [r3, #0]
  }
}
 800be8e:	bf00      	nop
 800be90:	bf00      	nop
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	20008348 	.word	0x20008348
 800be9c:	2000834c 	.word	0x2000834c
 800bea0:	0800be61 	.word	0x0800be61
 800bea4:	20008394 	.word	0x20008394

0800bea8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800beac:	4b0a      	ldr	r3, [pc, #40]	; (800bed8 <tcp_timer_needed+0x30>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d10f      	bne.n	800bed4 <tcp_timer_needed+0x2c>
 800beb4:	4b09      	ldr	r3, [pc, #36]	; (800bedc <tcp_timer_needed+0x34>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d103      	bne.n	800bec4 <tcp_timer_needed+0x1c>
 800bebc:	4b08      	ldr	r3, [pc, #32]	; (800bee0 <tcp_timer_needed+0x38>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d007      	beq.n	800bed4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800bec4:	4b04      	ldr	r3, [pc, #16]	; (800bed8 <tcp_timer_needed+0x30>)
 800bec6:	2201      	movs	r2, #1
 800bec8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800beca:	2200      	movs	r2, #0
 800becc:	4905      	ldr	r1, [pc, #20]	; (800bee4 <tcp_timer_needed+0x3c>)
 800bece:	20fa      	movs	r0, #250	; 0xfa
 800bed0:	f000 f8cc 	bl	800c06c <sys_timeout>
  }
}
 800bed4:	bf00      	nop
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	20008394 	.word	0x20008394
 800bedc:	20008348 	.word	0x20008348
 800bee0:	2000834c 	.word	0x2000834c
 800bee4:	0800be61 	.word	0x0800be61

0800bee8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b086      	sub	sp, #24
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bef4:	2006      	movs	r0, #6
 800bef6:	f7f9 fd07 	bl	8005908 <memp_malloc>
 800befa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d109      	bne.n	800bf16 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d151      	bne.n	800bfac <sys_timeout_abs+0xc4>
 800bf08:	4b2a      	ldr	r3, [pc, #168]	; (800bfb4 <sys_timeout_abs+0xcc>)
 800bf0a:	22be      	movs	r2, #190	; 0xbe
 800bf0c:	492a      	ldr	r1, [pc, #168]	; (800bfb8 <sys_timeout_abs+0xd0>)
 800bf0e:	482b      	ldr	r0, [pc, #172]	; (800bfbc <sys_timeout_abs+0xd4>)
 800bf10:	f002 fdf8 	bl	800eb04 <iprintf>
    return;
 800bf14:	e04a      	b.n	800bfac <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	68ba      	ldr	r2, [r7, #8]
 800bf20:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	68fa      	ldr	r2, [r7, #12]
 800bf2c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800bf2e:	4b24      	ldr	r3, [pc, #144]	; (800bfc0 <sys_timeout_abs+0xd8>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d103      	bne.n	800bf3e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800bf36:	4a22      	ldr	r2, [pc, #136]	; (800bfc0 <sys_timeout_abs+0xd8>)
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	6013      	str	r3, [r2, #0]
    return;
 800bf3c:	e037      	b.n	800bfae <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	685a      	ldr	r2, [r3, #4]
 800bf42:	4b1f      	ldr	r3, [pc, #124]	; (800bfc0 <sys_timeout_abs+0xd8>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	1ad3      	subs	r3, r2, r3
 800bf4a:	0fdb      	lsrs	r3, r3, #31
 800bf4c:	f003 0301 	and.w	r3, r3, #1
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d007      	beq.n	800bf66 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800bf56:	4b1a      	ldr	r3, [pc, #104]	; (800bfc0 <sys_timeout_abs+0xd8>)
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800bf5e:	4a18      	ldr	r2, [pc, #96]	; (800bfc0 <sys_timeout_abs+0xd8>)
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	6013      	str	r3, [r2, #0]
 800bf64:	e023      	b.n	800bfae <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800bf66:	4b16      	ldr	r3, [pc, #88]	; (800bfc0 <sys_timeout_abs+0xd8>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	617b      	str	r3, [r7, #20]
 800bf6c:	e01a      	b.n	800bfa4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00b      	beq.n	800bf8e <sys_timeout_abs+0xa6>
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	685a      	ldr	r2, [r3, #4]
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	0fdb      	lsrs	r3, r3, #31
 800bf84:	f003 0301 	and.w	r3, r3, #1
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d007      	beq.n	800bf9e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	681a      	ldr	r2, [r3, #0]
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	693a      	ldr	r2, [r7, #16]
 800bf9a:	601a      	str	r2, [r3, #0]
        break;
 800bf9c:	e007      	b.n	800bfae <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	617b      	str	r3, [r7, #20]
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d1e1      	bne.n	800bf6e <sys_timeout_abs+0x86>
 800bfaa:	e000      	b.n	800bfae <sys_timeout_abs+0xc6>
    return;
 800bfac:	bf00      	nop
      }
    }
  }
}
 800bfae:	3718      	adds	r7, #24
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	08011e14 	.word	0x08011e14
 800bfb8:	08011e48 	.word	0x08011e48
 800bfbc:	08011e88 	.word	0x08011e88
 800bfc0:	2000838c 	.word	0x2000838c

0800bfc4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b086      	sub	sp, #24
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	4798      	blx	r3

  now = sys_now();
 800bfd6:	f7f8 fe07 	bl	8004be8 <sys_now>
 800bfda:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	681a      	ldr	r2, [r3, #0]
 800bfe0:	4b0f      	ldr	r3, [pc, #60]	; (800c020 <lwip_cyclic_timer+0x5c>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	1ad3      	subs	r3, r2, r3
 800bfee:	0fdb      	lsrs	r3, r3, #31
 800bff0:	f003 0301 	and.w	r3, r3, #1
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d009      	beq.n	800c00e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	4413      	add	r3, r2
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	4907      	ldr	r1, [pc, #28]	; (800c024 <lwip_cyclic_timer+0x60>)
 800c006:	4618      	mov	r0, r3
 800c008:	f7ff ff6e 	bl	800bee8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c00c:	e004      	b.n	800c018 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	4904      	ldr	r1, [pc, #16]	; (800c024 <lwip_cyclic_timer+0x60>)
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	f7ff ff68 	bl	800bee8 <sys_timeout_abs>
}
 800c018:	bf00      	nop
 800c01a:	3718      	adds	r7, #24
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	20008390 	.word	0x20008390
 800c024:	0800bfc5 	.word	0x0800bfc5

0800c028 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c02e:	2301      	movs	r3, #1
 800c030:	607b      	str	r3, [r7, #4]
 800c032:	e00e      	b.n	800c052 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c034:	4a0b      	ldr	r2, [pc, #44]	; (800c064 <sys_timeouts_init+0x3c>)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	00db      	lsls	r3, r3, #3
 800c040:	4a08      	ldr	r2, [pc, #32]	; (800c064 <sys_timeouts_init+0x3c>)
 800c042:	4413      	add	r3, r2
 800c044:	461a      	mov	r2, r3
 800c046:	4908      	ldr	r1, [pc, #32]	; (800c068 <sys_timeouts_init+0x40>)
 800c048:	f000 f810 	bl	800c06c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	3301      	adds	r3, #1
 800c050:	607b      	str	r3, [r7, #4]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2b02      	cmp	r3, #2
 800c056:	d9ed      	bls.n	800c034 <sys_timeouts_init+0xc>
  }
}
 800c058:	bf00      	nop
 800c05a:	bf00      	nop
 800c05c:	3708      	adds	r7, #8
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	08012a00 	.word	0x08012a00
 800c068:	0800bfc5 	.word	0x0800bfc5

0800c06c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b086      	sub	sp, #24
 800c070:	af00      	add	r7, sp, #0
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	60b9      	str	r1, [r7, #8]
 800c076:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c07e:	d306      	bcc.n	800c08e <sys_timeout+0x22>
 800c080:	4b0a      	ldr	r3, [pc, #40]	; (800c0ac <sys_timeout+0x40>)
 800c082:	f240 1229 	movw	r2, #297	; 0x129
 800c086:	490a      	ldr	r1, [pc, #40]	; (800c0b0 <sys_timeout+0x44>)
 800c088:	480a      	ldr	r0, [pc, #40]	; (800c0b4 <sys_timeout+0x48>)
 800c08a:	f002 fd3b 	bl	800eb04 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c08e:	f7f8 fdab 	bl	8004be8 <sys_now>
 800c092:	4602      	mov	r2, r0
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	4413      	add	r3, r2
 800c098:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	68b9      	ldr	r1, [r7, #8]
 800c09e:	6978      	ldr	r0, [r7, #20]
 800c0a0:	f7ff ff22 	bl	800bee8 <sys_timeout_abs>
#endif
}
 800c0a4:	bf00      	nop
 800c0a6:	3718      	adds	r7, #24
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}
 800c0ac:	08011e14 	.word	0x08011e14
 800c0b0:	08011eb0 	.word	0x08011eb0
 800c0b4:	08011e88 	.word	0x08011e88

0800c0b8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c0be:	f7f8 fd93 	bl	8004be8 <sys_now>
 800c0c2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c0c4:	4b1a      	ldr	r3, [pc, #104]	; (800c130 <sys_check_timeouts+0x78>)
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	b2db      	uxtb	r3, r3
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d001      	beq.n	800c0d2 <sys_check_timeouts+0x1a>
 800c0ce:	f7f9 ffc7 	bl	8006060 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c0d2:	4b18      	ldr	r3, [pc, #96]	; (800c134 <sys_check_timeouts+0x7c>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d022      	beq.n	800c124 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	685b      	ldr	r3, [r3, #4]
 800c0e2:	68fa      	ldr	r2, [r7, #12]
 800c0e4:	1ad3      	subs	r3, r2, r3
 800c0e6:	0fdb      	lsrs	r3, r3, #31
 800c0e8:	f003 0301 	and.w	r3, r3, #1
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d11a      	bne.n	800c128 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	4a0f      	ldr	r2, [pc, #60]	; (800c134 <sys_check_timeouts+0x7c>)
 800c0f8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	689b      	ldr	r3, [r3, #8]
 800c0fe:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	4a0b      	ldr	r2, [pc, #44]	; (800c138 <sys_check_timeouts+0x80>)
 800c10c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c10e:	68b9      	ldr	r1, [r7, #8]
 800c110:	2006      	movs	r0, #6
 800c112:	f7f9 fc69 	bl	80059e8 <memp_free>
    if (handler != NULL) {
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d0d3      	beq.n	800c0c4 <sys_check_timeouts+0xc>
      handler(arg);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6838      	ldr	r0, [r7, #0]
 800c120:	4798      	blx	r3
  do {
 800c122:	e7cf      	b.n	800c0c4 <sys_check_timeouts+0xc>
      return;
 800c124:	bf00      	nop
 800c126:	e000      	b.n	800c12a <sys_check_timeouts+0x72>
      return;
 800c128:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c12a:	3710      	adds	r7, #16
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	20008339 	.word	0x20008339
 800c134:	2000838c 	.word	0x2000838c
 800c138:	20008390 	.word	0x20008390

0800c13c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c140:	f002 fcf8 	bl	800eb34 <rand>
 800c144:	4603      	mov	r3, r0
 800c146:	b29b      	uxth	r3, r3
 800c148:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c152:	b29a      	uxth	r2, r3
 800c154:	4b01      	ldr	r3, [pc, #4]	; (800c15c <udp_init+0x20>)
 800c156:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c158:	bf00      	nop
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	20000080 	.word	0x20000080

0800c160 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	60f8      	str	r0, [r7, #12]
 800c168:	60b9      	str	r1, [r7, #8]
 800c16a:	4613      	mov	r3, r2
 800c16c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d105      	bne.n	800c180 <udp_input_local_match+0x20>
 800c174:	4b27      	ldr	r3, [pc, #156]	; (800c214 <udp_input_local_match+0xb4>)
 800c176:	2287      	movs	r2, #135	; 0x87
 800c178:	4927      	ldr	r1, [pc, #156]	; (800c218 <udp_input_local_match+0xb8>)
 800c17a:	4828      	ldr	r0, [pc, #160]	; (800c21c <udp_input_local_match+0xbc>)
 800c17c:	f002 fcc2 	bl	800eb04 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d105      	bne.n	800c192 <udp_input_local_match+0x32>
 800c186:	4b23      	ldr	r3, [pc, #140]	; (800c214 <udp_input_local_match+0xb4>)
 800c188:	2288      	movs	r2, #136	; 0x88
 800c18a:	4925      	ldr	r1, [pc, #148]	; (800c220 <udp_input_local_match+0xc0>)
 800c18c:	4823      	ldr	r0, [pc, #140]	; (800c21c <udp_input_local_match+0xbc>)
 800c18e:	f002 fcb9 	bl	800eb04 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	7a1b      	ldrb	r3, [r3, #8]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d00b      	beq.n	800c1b2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	7a1a      	ldrb	r2, [r3, #8]
 800c19e:	4b21      	ldr	r3, [pc, #132]	; (800c224 <udp_input_local_match+0xc4>)
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d001      	beq.n	800c1b2 <udp_input_local_match+0x52>
    return 0;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	e02b      	b.n	800c20a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c1b2:	79fb      	ldrb	r3, [r7, #7]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d018      	beq.n	800c1ea <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d013      	beq.n	800c1e6 <udp_input_local_match+0x86>
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d00f      	beq.n	800c1e6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c1c6:	4b17      	ldr	r3, [pc, #92]	; (800c224 <udp_input_local_match+0xc4>)
 800c1c8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ce:	d00a      	beq.n	800c1e6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	4b13      	ldr	r3, [pc, #76]	; (800c224 <udp_input_local_match+0xc4>)
 800c1d6:	695b      	ldr	r3, [r3, #20]
 800c1d8:	405a      	eors	r2, r3
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	3308      	adds	r3, #8
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d110      	bne.n	800c208 <udp_input_local_match+0xa8>
          return 1;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e00f      	b.n	800c20a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d009      	beq.n	800c204 <udp_input_local_match+0xa4>
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d005      	beq.n	800c204 <udp_input_local_match+0xa4>
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	4b09      	ldr	r3, [pc, #36]	; (800c224 <udp_input_local_match+0xc4>)
 800c1fe:	695b      	ldr	r3, [r3, #20]
 800c200:	429a      	cmp	r2, r3
 800c202:	d101      	bne.n	800c208 <udp_input_local_match+0xa8>
        return 1;
 800c204:	2301      	movs	r3, #1
 800c206:	e000      	b.n	800c20a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c208:	2300      	movs	r3, #0
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3710      	adds	r7, #16
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	08011efc 	.word	0x08011efc
 800c218:	08011f2c 	.word	0x08011f2c
 800c21c:	08011f50 	.word	0x08011f50
 800c220:	08011f78 	.word	0x08011f78
 800c224:	20004dcc 	.word	0x20004dcc

0800c228 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c228:	b590      	push	{r4, r7, lr}
 800c22a:	b08d      	sub	sp, #52	; 0x34
 800c22c:	af02      	add	r7, sp, #8
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c232:	2300      	movs	r3, #0
 800c234:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d105      	bne.n	800c248 <udp_input+0x20>
 800c23c:	4b7c      	ldr	r3, [pc, #496]	; (800c430 <udp_input+0x208>)
 800c23e:	22cf      	movs	r2, #207	; 0xcf
 800c240:	497c      	ldr	r1, [pc, #496]	; (800c434 <udp_input+0x20c>)
 800c242:	487d      	ldr	r0, [pc, #500]	; (800c438 <udp_input+0x210>)
 800c244:	f002 fc5e 	bl	800eb04 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d105      	bne.n	800c25a <udp_input+0x32>
 800c24e:	4b78      	ldr	r3, [pc, #480]	; (800c430 <udp_input+0x208>)
 800c250:	22d0      	movs	r2, #208	; 0xd0
 800c252:	497a      	ldr	r1, [pc, #488]	; (800c43c <udp_input+0x214>)
 800c254:	4878      	ldr	r0, [pc, #480]	; (800c438 <udp_input+0x210>)
 800c256:	f002 fc55 	bl	800eb04 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	895b      	ldrh	r3, [r3, #10]
 800c25e:	2b07      	cmp	r3, #7
 800c260:	d803      	bhi.n	800c26a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f7fa fa36 	bl	80066d4 <pbuf_free>
    goto end;
 800c268:	e0de      	b.n	800c428 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c270:	4b73      	ldr	r3, [pc, #460]	; (800c440 <udp_input+0x218>)
 800c272:	695b      	ldr	r3, [r3, #20]
 800c274:	4a72      	ldr	r2, [pc, #456]	; (800c440 <udp_input+0x218>)
 800c276:	6812      	ldr	r2, [r2, #0]
 800c278:	4611      	mov	r1, r2
 800c27a:	4618      	mov	r0, r3
 800c27c:	f001 fc88 	bl	800db90 <ip4_addr_isbroadcast_u32>
 800c280:	4603      	mov	r3, r0
 800c282:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	881b      	ldrh	r3, [r3, #0]
 800c288:	b29b      	uxth	r3, r3
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7f8 fec4 	bl	8005018 <lwip_htons>
 800c290:	4603      	mov	r3, r0
 800c292:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	885b      	ldrh	r3, [r3, #2]
 800c298:	b29b      	uxth	r3, r3
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7f8 febc 	bl	8005018 <lwip_htons>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c2b0:	4b64      	ldr	r3, [pc, #400]	; (800c444 <udp_input+0x21c>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	627b      	str	r3, [r7, #36]	; 0x24
 800c2b6:	e054      	b.n	800c362 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ba:	8a5b      	ldrh	r3, [r3, #18]
 800c2bc:	89fa      	ldrh	r2, [r7, #14]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d14a      	bne.n	800c358 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c2c2:	7cfb      	ldrb	r3, [r7, #19]
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	6839      	ldr	r1, [r7, #0]
 800c2c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2ca:	f7ff ff49 	bl	800c160 <udp_input_local_match>
 800c2ce:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d041      	beq.n	800c358 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d6:	7c1b      	ldrb	r3, [r3, #16]
 800c2d8:	f003 0304 	and.w	r3, r3, #4
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d11d      	bne.n	800c31c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d102      	bne.n	800c2ec <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e8:	61fb      	str	r3, [r7, #28]
 800c2ea:	e017      	b.n	800c31c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c2ec:	7cfb      	ldrb	r3, [r7, #19]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d014      	beq.n	800c31c <udp_input+0xf4>
 800c2f2:	4b53      	ldr	r3, [pc, #332]	; (800c440 <udp_input+0x218>)
 800c2f4:	695b      	ldr	r3, [r3, #20]
 800c2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2fa:	d10f      	bne.n	800c31c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	3304      	adds	r3, #4
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	429a      	cmp	r2, r3
 800c308:	d008      	beq.n	800c31c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	3304      	adds	r3, #4
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	429a      	cmp	r2, r3
 800c316:	d101      	bne.n	800c31c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31e:	8a9b      	ldrh	r3, [r3, #20]
 800c320:	8a3a      	ldrh	r2, [r7, #16]
 800c322:	429a      	cmp	r2, r3
 800c324:	d118      	bne.n	800c358 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c328:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d005      	beq.n	800c33a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c330:	685a      	ldr	r2, [r3, #4]
 800c332:	4b43      	ldr	r3, [pc, #268]	; (800c440 <udp_input+0x218>)
 800c334:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c336:	429a      	cmp	r2, r3
 800c338:	d10e      	bne.n	800c358 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c33a:	6a3b      	ldr	r3, [r7, #32]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d014      	beq.n	800c36a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c342:	68da      	ldr	r2, [r3, #12]
 800c344:	6a3b      	ldr	r3, [r7, #32]
 800c346:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c348:	4b3e      	ldr	r3, [pc, #248]	; (800c444 <udp_input+0x21c>)
 800c34a:	681a      	ldr	r2, [r3, #0]
 800c34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c350:	4a3c      	ldr	r2, [pc, #240]	; (800c444 <udp_input+0x21c>)
 800c352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c354:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c356:	e008      	b.n	800c36a <udp_input+0x142>
      }
    }

    prev = pcb;
 800c358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35e:	68db      	ldr	r3, [r3, #12]
 800c360:	627b      	str	r3, [r7, #36]	; 0x24
 800c362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c364:	2b00      	cmp	r3, #0
 800c366:	d1a7      	bne.n	800c2b8 <udp_input+0x90>
 800c368:	e000      	b.n	800c36c <udp_input+0x144>
        break;
 800c36a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d101      	bne.n	800c376 <udp_input+0x14e>
    pcb = uncon_pcb;
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d002      	beq.n	800c382 <udp_input+0x15a>
    for_us = 1;
 800c37c:	2301      	movs	r3, #1
 800c37e:	76fb      	strb	r3, [r7, #27]
 800c380:	e00a      	b.n	800c398 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	3304      	adds	r3, #4
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	4b2d      	ldr	r3, [pc, #180]	; (800c440 <udp_input+0x218>)
 800c38a:	695b      	ldr	r3, [r3, #20]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	bf0c      	ite	eq
 800c390:	2301      	moveq	r3, #1
 800c392:	2300      	movne	r3, #0
 800c394:	b2db      	uxtb	r3, r3
 800c396:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c398:	7efb      	ldrb	r3, [r7, #27]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d041      	beq.n	800c422 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c39e:	2108      	movs	r1, #8
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f7fa f911 	bl	80065c8 <pbuf_remove_header>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d00a      	beq.n	800c3c2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c3ac:	4b20      	ldr	r3, [pc, #128]	; (800c430 <udp_input+0x208>)
 800c3ae:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c3b2:	4925      	ldr	r1, [pc, #148]	; (800c448 <udp_input+0x220>)
 800c3b4:	4820      	ldr	r0, [pc, #128]	; (800c438 <udp_input+0x210>)
 800c3b6:	f002 fba5 	bl	800eb04 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f7fa f98a 	bl	80066d4 <pbuf_free>
      goto end;
 800c3c0:	e032      	b.n	800c428 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d012      	beq.n	800c3ee <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ca:	699b      	ldr	r3, [r3, #24]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d00a      	beq.n	800c3e6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d2:	699c      	ldr	r4, [r3, #24]
 800c3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d6:	69d8      	ldr	r0, [r3, #28]
 800c3d8:	8a3b      	ldrh	r3, [r7, #16]
 800c3da:	9300      	str	r3, [sp, #0]
 800c3dc:	4b1b      	ldr	r3, [pc, #108]	; (800c44c <udp_input+0x224>)
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c3e2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c3e4:	e021      	b.n	800c42a <udp_input+0x202>
        pbuf_free(p);
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f7fa f974 	bl	80066d4 <pbuf_free>
        goto end;
 800c3ec:	e01c      	b.n	800c428 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c3ee:	7cfb      	ldrb	r3, [r7, #19]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d112      	bne.n	800c41a <udp_input+0x1f2>
 800c3f4:	4b12      	ldr	r3, [pc, #72]	; (800c440 <udp_input+0x218>)
 800c3f6:	695b      	ldr	r3, [r3, #20]
 800c3f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3fc:	2be0      	cmp	r3, #224	; 0xe0
 800c3fe:	d00c      	beq.n	800c41a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c400:	4b0f      	ldr	r3, [pc, #60]	; (800c440 <udp_input+0x218>)
 800c402:	899b      	ldrh	r3, [r3, #12]
 800c404:	3308      	adds	r3, #8
 800c406:	b29b      	uxth	r3, r3
 800c408:	b21b      	sxth	r3, r3
 800c40a:	4619      	mov	r1, r3
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f7fa f94e 	bl	80066ae <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c412:	2103      	movs	r1, #3
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f001 f89b 	bl	800d550 <icmp_dest_unreach>
      pbuf_free(p);
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f7fa f95a 	bl	80066d4 <pbuf_free>
  return;
 800c420:	e003      	b.n	800c42a <udp_input+0x202>
    pbuf_free(p);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f7fa f956 	bl	80066d4 <pbuf_free>
  return;
 800c428:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c42a:	372c      	adds	r7, #44	; 0x2c
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd90      	pop	{r4, r7, pc}
 800c430:	08011efc 	.word	0x08011efc
 800c434:	08011fa0 	.word	0x08011fa0
 800c438:	08011f50 	.word	0x08011f50
 800c43c:	08011fb8 	.word	0x08011fb8
 800c440:	20004dcc 	.word	0x20004dcc
 800c444:	20008398 	.word	0x20008398
 800c448:	08011fd4 	.word	0x08011fd4
 800c44c:	20004ddc 	.word	0x20004ddc

0800c450 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c450:	b480      	push	{r7}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d01e      	beq.n	800c49e <udp_netif_ip_addr_changed+0x4e>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d01a      	beq.n	800c49e <udp_netif_ip_addr_changed+0x4e>
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d017      	beq.n	800c49e <udp_netif_ip_addr_changed+0x4e>
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d013      	beq.n	800c49e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c476:	4b0d      	ldr	r3, [pc, #52]	; (800c4ac <udp_netif_ip_addr_changed+0x5c>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	60fb      	str	r3, [r7, #12]
 800c47c:	e00c      	b.n	800c498 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	429a      	cmp	r2, r3
 800c488:	d103      	bne.n	800c492 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	681a      	ldr	r2, [r3, #0]
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	60fb      	str	r3, [r7, #12]
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1ef      	bne.n	800c47e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c49e:	bf00      	nop
 800c4a0:	3714      	adds	r7, #20
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a8:	4770      	bx	lr
 800c4aa:	bf00      	nop
 800c4ac:	20008398 	.word	0x20008398

0800c4b0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c4b8:	4915      	ldr	r1, [pc, #84]	; (800c510 <etharp_free_entry+0x60>)
 800c4ba:	687a      	ldr	r2, [r7, #4]
 800c4bc:	4613      	mov	r3, r2
 800c4be:	005b      	lsls	r3, r3, #1
 800c4c0:	4413      	add	r3, r2
 800c4c2:	00db      	lsls	r3, r3, #3
 800c4c4:	440b      	add	r3, r1
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d013      	beq.n	800c4f4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c4cc:	4910      	ldr	r1, [pc, #64]	; (800c510 <etharp_free_entry+0x60>)
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	4613      	mov	r3, r2
 800c4d2:	005b      	lsls	r3, r3, #1
 800c4d4:	4413      	add	r3, r2
 800c4d6:	00db      	lsls	r3, r3, #3
 800c4d8:	440b      	add	r3, r1
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7fa f8f9 	bl	80066d4 <pbuf_free>
    arp_table[i].q = NULL;
 800c4e2:	490b      	ldr	r1, [pc, #44]	; (800c510 <etharp_free_entry+0x60>)
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	4613      	mov	r3, r2
 800c4e8:	005b      	lsls	r3, r3, #1
 800c4ea:	4413      	add	r3, r2
 800c4ec:	00db      	lsls	r3, r3, #3
 800c4ee:	440b      	add	r3, r1
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c4f4:	4906      	ldr	r1, [pc, #24]	; (800c510 <etharp_free_entry+0x60>)
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	005b      	lsls	r3, r3, #1
 800c4fc:	4413      	add	r3, r2
 800c4fe:	00db      	lsls	r3, r3, #3
 800c500:	440b      	add	r3, r1
 800c502:	3314      	adds	r3, #20
 800c504:	2200      	movs	r2, #0
 800c506:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c508:	bf00      	nop
 800c50a:	3708      	adds	r7, #8
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	2000839c 	.word	0x2000839c

0800c514 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c51a:	2300      	movs	r3, #0
 800c51c:	607b      	str	r3, [r7, #4]
 800c51e:	e096      	b.n	800c64e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c520:	494f      	ldr	r1, [pc, #316]	; (800c660 <etharp_tmr+0x14c>)
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	4613      	mov	r3, r2
 800c526:	005b      	lsls	r3, r3, #1
 800c528:	4413      	add	r3, r2
 800c52a:	00db      	lsls	r3, r3, #3
 800c52c:	440b      	add	r3, r1
 800c52e:	3314      	adds	r3, #20
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c534:	78fb      	ldrb	r3, [r7, #3]
 800c536:	2b00      	cmp	r3, #0
 800c538:	f000 8086 	beq.w	800c648 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c53c:	4948      	ldr	r1, [pc, #288]	; (800c660 <etharp_tmr+0x14c>)
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	4613      	mov	r3, r2
 800c542:	005b      	lsls	r3, r3, #1
 800c544:	4413      	add	r3, r2
 800c546:	00db      	lsls	r3, r3, #3
 800c548:	440b      	add	r3, r1
 800c54a:	3312      	adds	r3, #18
 800c54c:	881b      	ldrh	r3, [r3, #0]
 800c54e:	3301      	adds	r3, #1
 800c550:	b298      	uxth	r0, r3
 800c552:	4943      	ldr	r1, [pc, #268]	; (800c660 <etharp_tmr+0x14c>)
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	4613      	mov	r3, r2
 800c558:	005b      	lsls	r3, r3, #1
 800c55a:	4413      	add	r3, r2
 800c55c:	00db      	lsls	r3, r3, #3
 800c55e:	440b      	add	r3, r1
 800c560:	3312      	adds	r3, #18
 800c562:	4602      	mov	r2, r0
 800c564:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c566:	493e      	ldr	r1, [pc, #248]	; (800c660 <etharp_tmr+0x14c>)
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	4613      	mov	r3, r2
 800c56c:	005b      	lsls	r3, r3, #1
 800c56e:	4413      	add	r3, r2
 800c570:	00db      	lsls	r3, r3, #3
 800c572:	440b      	add	r3, r1
 800c574:	3312      	adds	r3, #18
 800c576:	881b      	ldrh	r3, [r3, #0]
 800c578:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c57c:	d215      	bcs.n	800c5aa <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c57e:	4938      	ldr	r1, [pc, #224]	; (800c660 <etharp_tmr+0x14c>)
 800c580:	687a      	ldr	r2, [r7, #4]
 800c582:	4613      	mov	r3, r2
 800c584:	005b      	lsls	r3, r3, #1
 800c586:	4413      	add	r3, r2
 800c588:	00db      	lsls	r3, r3, #3
 800c58a:	440b      	add	r3, r1
 800c58c:	3314      	adds	r3, #20
 800c58e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c590:	2b01      	cmp	r3, #1
 800c592:	d10e      	bne.n	800c5b2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c594:	4932      	ldr	r1, [pc, #200]	; (800c660 <etharp_tmr+0x14c>)
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	4613      	mov	r3, r2
 800c59a:	005b      	lsls	r3, r3, #1
 800c59c:	4413      	add	r3, r2
 800c59e:	00db      	lsls	r3, r3, #3
 800c5a0:	440b      	add	r3, r1
 800c5a2:	3312      	adds	r3, #18
 800c5a4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c5a6:	2b04      	cmp	r3, #4
 800c5a8:	d903      	bls.n	800c5b2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f7ff ff80 	bl	800c4b0 <etharp_free_entry>
 800c5b0:	e04a      	b.n	800c648 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c5b2:	492b      	ldr	r1, [pc, #172]	; (800c660 <etharp_tmr+0x14c>)
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	005b      	lsls	r3, r3, #1
 800c5ba:	4413      	add	r3, r2
 800c5bc:	00db      	lsls	r3, r3, #3
 800c5be:	440b      	add	r3, r1
 800c5c0:	3314      	adds	r3, #20
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	2b03      	cmp	r3, #3
 800c5c6:	d10a      	bne.n	800c5de <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c5c8:	4925      	ldr	r1, [pc, #148]	; (800c660 <etharp_tmr+0x14c>)
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	4613      	mov	r3, r2
 800c5ce:	005b      	lsls	r3, r3, #1
 800c5d0:	4413      	add	r3, r2
 800c5d2:	00db      	lsls	r3, r3, #3
 800c5d4:	440b      	add	r3, r1
 800c5d6:	3314      	adds	r3, #20
 800c5d8:	2204      	movs	r2, #4
 800c5da:	701a      	strb	r2, [r3, #0]
 800c5dc:	e034      	b.n	800c648 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c5de:	4920      	ldr	r1, [pc, #128]	; (800c660 <etharp_tmr+0x14c>)
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	4613      	mov	r3, r2
 800c5e4:	005b      	lsls	r3, r3, #1
 800c5e6:	4413      	add	r3, r2
 800c5e8:	00db      	lsls	r3, r3, #3
 800c5ea:	440b      	add	r3, r1
 800c5ec:	3314      	adds	r3, #20
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	2b04      	cmp	r3, #4
 800c5f2:	d10a      	bne.n	800c60a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c5f4:	491a      	ldr	r1, [pc, #104]	; (800c660 <etharp_tmr+0x14c>)
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	4613      	mov	r3, r2
 800c5fa:	005b      	lsls	r3, r3, #1
 800c5fc:	4413      	add	r3, r2
 800c5fe:	00db      	lsls	r3, r3, #3
 800c600:	440b      	add	r3, r1
 800c602:	3314      	adds	r3, #20
 800c604:	2202      	movs	r2, #2
 800c606:	701a      	strb	r2, [r3, #0]
 800c608:	e01e      	b.n	800c648 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c60a:	4915      	ldr	r1, [pc, #84]	; (800c660 <etharp_tmr+0x14c>)
 800c60c:	687a      	ldr	r2, [r7, #4]
 800c60e:	4613      	mov	r3, r2
 800c610:	005b      	lsls	r3, r3, #1
 800c612:	4413      	add	r3, r2
 800c614:	00db      	lsls	r3, r3, #3
 800c616:	440b      	add	r3, r1
 800c618:	3314      	adds	r3, #20
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d113      	bne.n	800c648 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c620:	490f      	ldr	r1, [pc, #60]	; (800c660 <etharp_tmr+0x14c>)
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	4613      	mov	r3, r2
 800c626:	005b      	lsls	r3, r3, #1
 800c628:	4413      	add	r3, r2
 800c62a:	00db      	lsls	r3, r3, #3
 800c62c:	440b      	add	r3, r1
 800c62e:	3308      	adds	r3, #8
 800c630:	6818      	ldr	r0, [r3, #0]
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	4613      	mov	r3, r2
 800c636:	005b      	lsls	r3, r3, #1
 800c638:	4413      	add	r3, r2
 800c63a:	00db      	lsls	r3, r3, #3
 800c63c:	4a08      	ldr	r2, [pc, #32]	; (800c660 <etharp_tmr+0x14c>)
 800c63e:	4413      	add	r3, r2
 800c640:	3304      	adds	r3, #4
 800c642:	4619      	mov	r1, r3
 800c644:	f000 fe6e 	bl	800d324 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	3301      	adds	r3, #1
 800c64c:	607b      	str	r3, [r7, #4]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2b09      	cmp	r3, #9
 800c652:	f77f af65 	ble.w	800c520 <etharp_tmr+0xc>
      }
    }
  }
}
 800c656:	bf00      	nop
 800c658:	bf00      	nop
 800c65a:	3708      	adds	r7, #8
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}
 800c660:	2000839c 	.word	0x2000839c

0800c664 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b08a      	sub	sp, #40	; 0x28
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	460b      	mov	r3, r1
 800c66e:	607a      	str	r2, [r7, #4]
 800c670:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c672:	230a      	movs	r3, #10
 800c674:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c676:	230a      	movs	r3, #10
 800c678:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c67a:	230a      	movs	r3, #10
 800c67c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c67e:	2300      	movs	r3, #0
 800c680:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c682:	230a      	movs	r3, #10
 800c684:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c686:	2300      	movs	r3, #0
 800c688:	83bb      	strh	r3, [r7, #28]
 800c68a:	2300      	movs	r3, #0
 800c68c:	837b      	strh	r3, [r7, #26]
 800c68e:	2300      	movs	r3, #0
 800c690:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c692:	2300      	movs	r3, #0
 800c694:	843b      	strh	r3, [r7, #32]
 800c696:	e0ae      	b.n	800c7f6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c698:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c69c:	49a6      	ldr	r1, [pc, #664]	; (800c938 <etharp_find_entry+0x2d4>)
 800c69e:	4613      	mov	r3, r2
 800c6a0:	005b      	lsls	r3, r3, #1
 800c6a2:	4413      	add	r3, r2
 800c6a4:	00db      	lsls	r3, r3, #3
 800c6a6:	440b      	add	r3, r1
 800c6a8:	3314      	adds	r3, #20
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c6ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c6b2:	2b0a      	cmp	r3, #10
 800c6b4:	d105      	bne.n	800c6c2 <etharp_find_entry+0x5e>
 800c6b6:	7dfb      	ldrb	r3, [r7, #23]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d102      	bne.n	800c6c2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c6bc:	8c3b      	ldrh	r3, [r7, #32]
 800c6be:	847b      	strh	r3, [r7, #34]	; 0x22
 800c6c0:	e095      	b.n	800c7ee <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c6c2:	7dfb      	ldrb	r3, [r7, #23]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	f000 8092 	beq.w	800c7ee <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c6ca:	7dfb      	ldrb	r3, [r7, #23]
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	d009      	beq.n	800c6e4 <etharp_find_entry+0x80>
 800c6d0:	7dfb      	ldrb	r3, [r7, #23]
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d806      	bhi.n	800c6e4 <etharp_find_entry+0x80>
 800c6d6:	4b99      	ldr	r3, [pc, #612]	; (800c93c <etharp_find_entry+0x2d8>)
 800c6d8:	f240 1223 	movw	r2, #291	; 0x123
 800c6dc:	4998      	ldr	r1, [pc, #608]	; (800c940 <etharp_find_entry+0x2dc>)
 800c6de:	4899      	ldr	r0, [pc, #612]	; (800c944 <etharp_find_entry+0x2e0>)
 800c6e0:	f002 fa10 	bl	800eb04 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d020      	beq.n	800c72c <etharp_find_entry+0xc8>
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	6819      	ldr	r1, [r3, #0]
 800c6ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c6f2:	4891      	ldr	r0, [pc, #580]	; (800c938 <etharp_find_entry+0x2d4>)
 800c6f4:	4613      	mov	r3, r2
 800c6f6:	005b      	lsls	r3, r3, #1
 800c6f8:	4413      	add	r3, r2
 800c6fa:	00db      	lsls	r3, r3, #3
 800c6fc:	4403      	add	r3, r0
 800c6fe:	3304      	adds	r3, #4
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4299      	cmp	r1, r3
 800c704:	d112      	bne.n	800c72c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d00c      	beq.n	800c726 <etharp_find_entry+0xc2>
 800c70c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c710:	4989      	ldr	r1, [pc, #548]	; (800c938 <etharp_find_entry+0x2d4>)
 800c712:	4613      	mov	r3, r2
 800c714:	005b      	lsls	r3, r3, #1
 800c716:	4413      	add	r3, r2
 800c718:	00db      	lsls	r3, r3, #3
 800c71a:	440b      	add	r3, r1
 800c71c:	3308      	adds	r3, #8
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	429a      	cmp	r2, r3
 800c724:	d102      	bne.n	800c72c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c726:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c72a:	e100      	b.n	800c92e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c72c:	7dfb      	ldrb	r3, [r7, #23]
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d140      	bne.n	800c7b4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c732:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c736:	4980      	ldr	r1, [pc, #512]	; (800c938 <etharp_find_entry+0x2d4>)
 800c738:	4613      	mov	r3, r2
 800c73a:	005b      	lsls	r3, r3, #1
 800c73c:	4413      	add	r3, r2
 800c73e:	00db      	lsls	r3, r3, #3
 800c740:	440b      	add	r3, r1
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d01a      	beq.n	800c77e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c748:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c74c:	497a      	ldr	r1, [pc, #488]	; (800c938 <etharp_find_entry+0x2d4>)
 800c74e:	4613      	mov	r3, r2
 800c750:	005b      	lsls	r3, r3, #1
 800c752:	4413      	add	r3, r2
 800c754:	00db      	lsls	r3, r3, #3
 800c756:	440b      	add	r3, r1
 800c758:	3312      	adds	r3, #18
 800c75a:	881b      	ldrh	r3, [r3, #0]
 800c75c:	8bba      	ldrh	r2, [r7, #28]
 800c75e:	429a      	cmp	r2, r3
 800c760:	d845      	bhi.n	800c7ee <etharp_find_entry+0x18a>
            old_queue = i;
 800c762:	8c3b      	ldrh	r3, [r7, #32]
 800c764:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c766:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c76a:	4973      	ldr	r1, [pc, #460]	; (800c938 <etharp_find_entry+0x2d4>)
 800c76c:	4613      	mov	r3, r2
 800c76e:	005b      	lsls	r3, r3, #1
 800c770:	4413      	add	r3, r2
 800c772:	00db      	lsls	r3, r3, #3
 800c774:	440b      	add	r3, r1
 800c776:	3312      	adds	r3, #18
 800c778:	881b      	ldrh	r3, [r3, #0]
 800c77a:	83bb      	strh	r3, [r7, #28]
 800c77c:	e037      	b.n	800c7ee <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c77e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c782:	496d      	ldr	r1, [pc, #436]	; (800c938 <etharp_find_entry+0x2d4>)
 800c784:	4613      	mov	r3, r2
 800c786:	005b      	lsls	r3, r3, #1
 800c788:	4413      	add	r3, r2
 800c78a:	00db      	lsls	r3, r3, #3
 800c78c:	440b      	add	r3, r1
 800c78e:	3312      	adds	r3, #18
 800c790:	881b      	ldrh	r3, [r3, #0]
 800c792:	8b7a      	ldrh	r2, [r7, #26]
 800c794:	429a      	cmp	r2, r3
 800c796:	d82a      	bhi.n	800c7ee <etharp_find_entry+0x18a>
            old_pending = i;
 800c798:	8c3b      	ldrh	r3, [r7, #32]
 800c79a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c79c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c7a0:	4965      	ldr	r1, [pc, #404]	; (800c938 <etharp_find_entry+0x2d4>)
 800c7a2:	4613      	mov	r3, r2
 800c7a4:	005b      	lsls	r3, r3, #1
 800c7a6:	4413      	add	r3, r2
 800c7a8:	00db      	lsls	r3, r3, #3
 800c7aa:	440b      	add	r3, r1
 800c7ac:	3312      	adds	r3, #18
 800c7ae:	881b      	ldrh	r3, [r3, #0]
 800c7b0:	837b      	strh	r3, [r7, #26]
 800c7b2:	e01c      	b.n	800c7ee <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c7b4:	7dfb      	ldrb	r3, [r7, #23]
 800c7b6:	2b01      	cmp	r3, #1
 800c7b8:	d919      	bls.n	800c7ee <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c7ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c7be:	495e      	ldr	r1, [pc, #376]	; (800c938 <etharp_find_entry+0x2d4>)
 800c7c0:	4613      	mov	r3, r2
 800c7c2:	005b      	lsls	r3, r3, #1
 800c7c4:	4413      	add	r3, r2
 800c7c6:	00db      	lsls	r3, r3, #3
 800c7c8:	440b      	add	r3, r1
 800c7ca:	3312      	adds	r3, #18
 800c7cc:	881b      	ldrh	r3, [r3, #0]
 800c7ce:	8b3a      	ldrh	r2, [r7, #24]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d80c      	bhi.n	800c7ee <etharp_find_entry+0x18a>
            old_stable = i;
 800c7d4:	8c3b      	ldrh	r3, [r7, #32]
 800c7d6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c7d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c7dc:	4956      	ldr	r1, [pc, #344]	; (800c938 <etharp_find_entry+0x2d4>)
 800c7de:	4613      	mov	r3, r2
 800c7e0:	005b      	lsls	r3, r3, #1
 800c7e2:	4413      	add	r3, r2
 800c7e4:	00db      	lsls	r3, r3, #3
 800c7e6:	440b      	add	r3, r1
 800c7e8:	3312      	adds	r3, #18
 800c7ea:	881b      	ldrh	r3, [r3, #0]
 800c7ec:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c7ee:	8c3b      	ldrh	r3, [r7, #32]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	b29b      	uxth	r3, r3
 800c7f4:	843b      	strh	r3, [r7, #32]
 800c7f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c7fa:	2b09      	cmp	r3, #9
 800c7fc:	f77f af4c 	ble.w	800c698 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c800:	7afb      	ldrb	r3, [r7, #11]
 800c802:	f003 0302 	and.w	r3, r3, #2
 800c806:	2b00      	cmp	r3, #0
 800c808:	d108      	bne.n	800c81c <etharp_find_entry+0x1b8>
 800c80a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c80e:	2b0a      	cmp	r3, #10
 800c810:	d107      	bne.n	800c822 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c812:	7afb      	ldrb	r3, [r7, #11]
 800c814:	f003 0301 	and.w	r3, r3, #1
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d102      	bne.n	800c822 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c81c:	f04f 33ff 	mov.w	r3, #4294967295
 800c820:	e085      	b.n	800c92e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c822:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c826:	2b09      	cmp	r3, #9
 800c828:	dc02      	bgt.n	800c830 <etharp_find_entry+0x1cc>
    i = empty;
 800c82a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c82c:	843b      	strh	r3, [r7, #32]
 800c82e:	e039      	b.n	800c8a4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c830:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c834:	2b09      	cmp	r3, #9
 800c836:	dc14      	bgt.n	800c862 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c838:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c83a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c83c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c840:	493d      	ldr	r1, [pc, #244]	; (800c938 <etharp_find_entry+0x2d4>)
 800c842:	4613      	mov	r3, r2
 800c844:	005b      	lsls	r3, r3, #1
 800c846:	4413      	add	r3, r2
 800c848:	00db      	lsls	r3, r3, #3
 800c84a:	440b      	add	r3, r1
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d018      	beq.n	800c884 <etharp_find_entry+0x220>
 800c852:	4b3a      	ldr	r3, [pc, #232]	; (800c93c <etharp_find_entry+0x2d8>)
 800c854:	f240 126d 	movw	r2, #365	; 0x16d
 800c858:	493b      	ldr	r1, [pc, #236]	; (800c948 <etharp_find_entry+0x2e4>)
 800c85a:	483a      	ldr	r0, [pc, #232]	; (800c944 <etharp_find_entry+0x2e0>)
 800c85c:	f002 f952 	bl	800eb04 <iprintf>
 800c860:	e010      	b.n	800c884 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c862:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c866:	2b09      	cmp	r3, #9
 800c868:	dc02      	bgt.n	800c870 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c86a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c86c:	843b      	strh	r3, [r7, #32]
 800c86e:	e009      	b.n	800c884 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c870:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c874:	2b09      	cmp	r3, #9
 800c876:	dc02      	bgt.n	800c87e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c878:	8bfb      	ldrh	r3, [r7, #30]
 800c87a:	843b      	strh	r3, [r7, #32]
 800c87c:	e002      	b.n	800c884 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c87e:	f04f 33ff 	mov.w	r3, #4294967295
 800c882:	e054      	b.n	800c92e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c884:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c888:	2b09      	cmp	r3, #9
 800c88a:	dd06      	ble.n	800c89a <etharp_find_entry+0x236>
 800c88c:	4b2b      	ldr	r3, [pc, #172]	; (800c93c <etharp_find_entry+0x2d8>)
 800c88e:	f240 127f 	movw	r2, #383	; 0x17f
 800c892:	492e      	ldr	r1, [pc, #184]	; (800c94c <etharp_find_entry+0x2e8>)
 800c894:	482b      	ldr	r0, [pc, #172]	; (800c944 <etharp_find_entry+0x2e0>)
 800c896:	f002 f935 	bl	800eb04 <iprintf>
    etharp_free_entry(i);
 800c89a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7ff fe06 	bl	800c4b0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c8a4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c8a8:	2b09      	cmp	r3, #9
 800c8aa:	dd06      	ble.n	800c8ba <etharp_find_entry+0x256>
 800c8ac:	4b23      	ldr	r3, [pc, #140]	; (800c93c <etharp_find_entry+0x2d8>)
 800c8ae:	f240 1283 	movw	r2, #387	; 0x183
 800c8b2:	4926      	ldr	r1, [pc, #152]	; (800c94c <etharp_find_entry+0x2e8>)
 800c8b4:	4823      	ldr	r0, [pc, #140]	; (800c944 <etharp_find_entry+0x2e0>)
 800c8b6:	f002 f925 	bl	800eb04 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c8ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c8be:	491e      	ldr	r1, [pc, #120]	; (800c938 <etharp_find_entry+0x2d4>)
 800c8c0:	4613      	mov	r3, r2
 800c8c2:	005b      	lsls	r3, r3, #1
 800c8c4:	4413      	add	r3, r2
 800c8c6:	00db      	lsls	r3, r3, #3
 800c8c8:	440b      	add	r3, r1
 800c8ca:	3314      	adds	r3, #20
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d006      	beq.n	800c8e0 <etharp_find_entry+0x27c>
 800c8d2:	4b1a      	ldr	r3, [pc, #104]	; (800c93c <etharp_find_entry+0x2d8>)
 800c8d4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c8d8:	491d      	ldr	r1, [pc, #116]	; (800c950 <etharp_find_entry+0x2ec>)
 800c8da:	481a      	ldr	r0, [pc, #104]	; (800c944 <etharp_find_entry+0x2e0>)
 800c8dc:	f002 f912 	bl	800eb04 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d00b      	beq.n	800c8fe <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c8e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	6819      	ldr	r1, [r3, #0]
 800c8ee:	4812      	ldr	r0, [pc, #72]	; (800c938 <etharp_find_entry+0x2d4>)
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	005b      	lsls	r3, r3, #1
 800c8f4:	4413      	add	r3, r2
 800c8f6:	00db      	lsls	r3, r3, #3
 800c8f8:	4403      	add	r3, r0
 800c8fa:	3304      	adds	r3, #4
 800c8fc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c8fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c902:	490d      	ldr	r1, [pc, #52]	; (800c938 <etharp_find_entry+0x2d4>)
 800c904:	4613      	mov	r3, r2
 800c906:	005b      	lsls	r3, r3, #1
 800c908:	4413      	add	r3, r2
 800c90a:	00db      	lsls	r3, r3, #3
 800c90c:	440b      	add	r3, r1
 800c90e:	3312      	adds	r3, #18
 800c910:	2200      	movs	r2, #0
 800c912:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c914:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c918:	4907      	ldr	r1, [pc, #28]	; (800c938 <etharp_find_entry+0x2d4>)
 800c91a:	4613      	mov	r3, r2
 800c91c:	005b      	lsls	r3, r3, #1
 800c91e:	4413      	add	r3, r2
 800c920:	00db      	lsls	r3, r3, #3
 800c922:	440b      	add	r3, r1
 800c924:	3308      	adds	r3, #8
 800c926:	687a      	ldr	r2, [r7, #4]
 800c928:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c92a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3728      	adds	r7, #40	; 0x28
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
 800c936:	bf00      	nop
 800c938:	2000839c 	.word	0x2000839c
 800c93c:	08012260 	.word	0x08012260
 800c940:	08012298 	.word	0x08012298
 800c944:	080122d8 	.word	0x080122d8
 800c948:	08012300 	.word	0x08012300
 800c94c:	08012318 	.word	0x08012318
 800c950:	0801232c 	.word	0x0801232c

0800c954 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b088      	sub	sp, #32
 800c958:	af02      	add	r7, sp, #8
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	60b9      	str	r1, [r7, #8]
 800c95e:	607a      	str	r2, [r7, #4]
 800c960:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c968:	2b06      	cmp	r3, #6
 800c96a:	d006      	beq.n	800c97a <etharp_update_arp_entry+0x26>
 800c96c:	4b48      	ldr	r3, [pc, #288]	; (800ca90 <etharp_update_arp_entry+0x13c>)
 800c96e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c972:	4948      	ldr	r1, [pc, #288]	; (800ca94 <etharp_update_arp_entry+0x140>)
 800c974:	4848      	ldr	r0, [pc, #288]	; (800ca98 <etharp_update_arp_entry+0x144>)
 800c976:	f002 f8c5 	bl	800eb04 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d012      	beq.n	800c9a6 <etharp_update_arp_entry+0x52>
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d00e      	beq.n	800c9a6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	68f9      	ldr	r1, [r7, #12]
 800c98e:	4618      	mov	r0, r3
 800c990:	f001 f8fe 	bl	800db90 <ip4_addr_isbroadcast_u32>
 800c994:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c996:	2b00      	cmp	r3, #0
 800c998:	d105      	bne.n	800c9a6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c9a2:	2be0      	cmp	r3, #224	; 0xe0
 800c9a4:	d102      	bne.n	800c9ac <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c9a6:	f06f 030f 	mvn.w	r3, #15
 800c9aa:	e06c      	b.n	800ca86 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c9ac:	78fb      	ldrb	r3, [r7, #3]
 800c9ae:	68fa      	ldr	r2, [r7, #12]
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	68b8      	ldr	r0, [r7, #8]
 800c9b4:	f7ff fe56 	bl	800c664 <etharp_find_entry>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c9bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	da02      	bge.n	800c9ca <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c9c4:	8afb      	ldrh	r3, [r7, #22]
 800c9c6:	b25b      	sxtb	r3, r3
 800c9c8:	e05d      	b.n	800ca86 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c9ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c9ce:	4933      	ldr	r1, [pc, #204]	; (800ca9c <etharp_update_arp_entry+0x148>)
 800c9d0:	4613      	mov	r3, r2
 800c9d2:	005b      	lsls	r3, r3, #1
 800c9d4:	4413      	add	r3, r2
 800c9d6:	00db      	lsls	r3, r3, #3
 800c9d8:	440b      	add	r3, r1
 800c9da:	3314      	adds	r3, #20
 800c9dc:	2202      	movs	r2, #2
 800c9de:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c9e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c9e4:	492d      	ldr	r1, [pc, #180]	; (800ca9c <etharp_update_arp_entry+0x148>)
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	005b      	lsls	r3, r3, #1
 800c9ea:	4413      	add	r3, r2
 800c9ec:	00db      	lsls	r3, r3, #3
 800c9ee:	440b      	add	r3, r1
 800c9f0:	3308      	adds	r3, #8
 800c9f2:	68fa      	ldr	r2, [r7, #12]
 800c9f4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c9f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c9fa:	4613      	mov	r3, r2
 800c9fc:	005b      	lsls	r3, r3, #1
 800c9fe:	4413      	add	r3, r2
 800ca00:	00db      	lsls	r3, r3, #3
 800ca02:	3308      	adds	r3, #8
 800ca04:	4a25      	ldr	r2, [pc, #148]	; (800ca9c <etharp_update_arp_entry+0x148>)
 800ca06:	4413      	add	r3, r2
 800ca08:	3304      	adds	r3, #4
 800ca0a:	2206      	movs	r2, #6
 800ca0c:	6879      	ldr	r1, [r7, #4]
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f002 f848 	bl	800eaa4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ca14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ca18:	4920      	ldr	r1, [pc, #128]	; (800ca9c <etharp_update_arp_entry+0x148>)
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	005b      	lsls	r3, r3, #1
 800ca1e:	4413      	add	r3, r2
 800ca20:	00db      	lsls	r3, r3, #3
 800ca22:	440b      	add	r3, r1
 800ca24:	3312      	adds	r3, #18
 800ca26:	2200      	movs	r2, #0
 800ca28:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ca2a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ca2e:	491b      	ldr	r1, [pc, #108]	; (800ca9c <etharp_update_arp_entry+0x148>)
 800ca30:	4613      	mov	r3, r2
 800ca32:	005b      	lsls	r3, r3, #1
 800ca34:	4413      	add	r3, r2
 800ca36:	00db      	lsls	r3, r3, #3
 800ca38:	440b      	add	r3, r1
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d021      	beq.n	800ca84 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ca40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ca44:	4915      	ldr	r1, [pc, #84]	; (800ca9c <etharp_update_arp_entry+0x148>)
 800ca46:	4613      	mov	r3, r2
 800ca48:	005b      	lsls	r3, r3, #1
 800ca4a:	4413      	add	r3, r2
 800ca4c:	00db      	lsls	r3, r3, #3
 800ca4e:	440b      	add	r3, r1
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ca54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ca58:	4910      	ldr	r1, [pc, #64]	; (800ca9c <etharp_update_arp_entry+0x148>)
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	005b      	lsls	r3, r3, #1
 800ca5e:	4413      	add	r3, r2
 800ca60:	00db      	lsls	r3, r3, #3
 800ca62:	440b      	add	r3, r1
 800ca64:	2200      	movs	r2, #0
 800ca66:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ca6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca72:	9300      	str	r3, [sp, #0]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6939      	ldr	r1, [r7, #16]
 800ca78:	68f8      	ldr	r0, [r7, #12]
 800ca7a:	f001 ff97 	bl	800e9ac <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ca7e:	6938      	ldr	r0, [r7, #16]
 800ca80:	f7f9 fe28 	bl	80066d4 <pbuf_free>
  }
  return ERR_OK;
 800ca84:	2300      	movs	r3, #0
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3718      	adds	r7, #24
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	08012260 	.word	0x08012260
 800ca94:	08012358 	.word	0x08012358
 800ca98:	080122d8 	.word	0x080122d8
 800ca9c:	2000839c 	.word	0x2000839c

0800caa0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800caa8:	2300      	movs	r3, #0
 800caaa:	60fb      	str	r3, [r7, #12]
 800caac:	e01e      	b.n	800caec <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800caae:	4913      	ldr	r1, [pc, #76]	; (800cafc <etharp_cleanup_netif+0x5c>)
 800cab0:	68fa      	ldr	r2, [r7, #12]
 800cab2:	4613      	mov	r3, r2
 800cab4:	005b      	lsls	r3, r3, #1
 800cab6:	4413      	add	r3, r2
 800cab8:	00db      	lsls	r3, r3, #3
 800caba:	440b      	add	r3, r1
 800cabc:	3314      	adds	r3, #20
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800cac2:	7afb      	ldrb	r3, [r7, #11]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d00e      	beq.n	800cae6 <etharp_cleanup_netif+0x46>
 800cac8:	490c      	ldr	r1, [pc, #48]	; (800cafc <etharp_cleanup_netif+0x5c>)
 800caca:	68fa      	ldr	r2, [r7, #12]
 800cacc:	4613      	mov	r3, r2
 800cace:	005b      	lsls	r3, r3, #1
 800cad0:	4413      	add	r3, r2
 800cad2:	00db      	lsls	r3, r3, #3
 800cad4:	440b      	add	r3, r1
 800cad6:	3308      	adds	r3, #8
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	429a      	cmp	r2, r3
 800cade:	d102      	bne.n	800cae6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800cae0:	68f8      	ldr	r0, [r7, #12]
 800cae2:	f7ff fce5 	bl	800c4b0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	3301      	adds	r3, #1
 800caea:	60fb      	str	r3, [r7, #12]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	2b09      	cmp	r3, #9
 800caf0:	dddd      	ble.n	800caae <etharp_cleanup_netif+0xe>
    }
  }
}
 800caf2:	bf00      	nop
 800caf4:	bf00      	nop
 800caf6:	3710      	adds	r7, #16
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	2000839c 	.word	0x2000839c

0800cb00 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800cb00:	b5b0      	push	{r4, r5, r7, lr}
 800cb02:	b08a      	sub	sp, #40	; 0x28
 800cb04:	af04      	add	r7, sp, #16
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d107      	bne.n	800cb20 <etharp_input+0x20>
 800cb10:	4b3d      	ldr	r3, [pc, #244]	; (800cc08 <etharp_input+0x108>)
 800cb12:	f240 228a 	movw	r2, #650	; 0x28a
 800cb16:	493d      	ldr	r1, [pc, #244]	; (800cc0c <etharp_input+0x10c>)
 800cb18:	483d      	ldr	r0, [pc, #244]	; (800cc10 <etharp_input+0x110>)
 800cb1a:	f001 fff3 	bl	800eb04 <iprintf>
 800cb1e:	e06f      	b.n	800cc00 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	881b      	ldrh	r3, [r3, #0]
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb30:	d10c      	bne.n	800cb4c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cb36:	2b06      	cmp	r3, #6
 800cb38:	d108      	bne.n	800cb4c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cb3e:	2b04      	cmp	r3, #4
 800cb40:	d104      	bne.n	800cb4c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	885b      	ldrh	r3, [r3, #2]
 800cb46:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cb48:	2b08      	cmp	r3, #8
 800cb4a:	d003      	beq.n	800cb54 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f7f9 fdc1 	bl	80066d4 <pbuf_free>
    return;
 800cb52:	e055      	b.n	800cc00 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	330e      	adds	r3, #14
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	3318      	adds	r3, #24
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	3304      	adds	r3, #4
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d102      	bne.n	800cb74 <etharp_input+0x74>
    for_us = 0;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	75fb      	strb	r3, [r7, #23]
 800cb72:	e009      	b.n	800cb88 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800cb74:	68ba      	ldr	r2, [r7, #8]
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	3304      	adds	r3, #4
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	bf0c      	ite	eq
 800cb80:	2301      	moveq	r3, #1
 800cb82:	2300      	movne	r3, #0
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	f103 0208 	add.w	r2, r3, #8
 800cb8e:	7dfb      	ldrb	r3, [r7, #23]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d001      	beq.n	800cb98 <etharp_input+0x98>
 800cb94:	2301      	movs	r3, #1
 800cb96:	e000      	b.n	800cb9a <etharp_input+0x9a>
 800cb98:	2302      	movs	r3, #2
 800cb9a:	f107 010c 	add.w	r1, r7, #12
 800cb9e:	6838      	ldr	r0, [r7, #0]
 800cba0:	f7ff fed8 	bl	800c954 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	88db      	ldrh	r3, [r3, #6]
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbae:	d003      	beq.n	800cbb8 <etharp_input+0xb8>
 800cbb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbb4:	d01e      	beq.n	800cbf4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800cbb6:	e020      	b.n	800cbfa <etharp_input+0xfa>
      if (for_us) {
 800cbb8:	7dfb      	ldrb	r3, [r7, #23]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d01c      	beq.n	800cbf8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800cbd4:	693a      	ldr	r2, [r7, #16]
 800cbd6:	3208      	adds	r2, #8
        etharp_raw(netif,
 800cbd8:	2102      	movs	r1, #2
 800cbda:	9103      	str	r1, [sp, #12]
 800cbdc:	f107 010c 	add.w	r1, r7, #12
 800cbe0:	9102      	str	r1, [sp, #8]
 800cbe2:	9201      	str	r2, [sp, #4]
 800cbe4:	9300      	str	r3, [sp, #0]
 800cbe6:	462b      	mov	r3, r5
 800cbe8:	4622      	mov	r2, r4
 800cbea:	4601      	mov	r1, r0
 800cbec:	6838      	ldr	r0, [r7, #0]
 800cbee:	f000 faeb 	bl	800d1c8 <etharp_raw>
      break;
 800cbf2:	e001      	b.n	800cbf8 <etharp_input+0xf8>
      break;
 800cbf4:	bf00      	nop
 800cbf6:	e000      	b.n	800cbfa <etharp_input+0xfa>
      break;
 800cbf8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f7f9 fd6a 	bl	80066d4 <pbuf_free>
}
 800cc00:	3718      	adds	r7, #24
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bdb0      	pop	{r4, r5, r7, pc}
 800cc06:	bf00      	nop
 800cc08:	08012260 	.word	0x08012260
 800cc0c:	080123b0 	.word	0x080123b0
 800cc10:	080122d8 	.word	0x080122d8

0800cc14 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b086      	sub	sp, #24
 800cc18:	af02      	add	r7, sp, #8
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	60b9      	str	r1, [r7, #8]
 800cc1e:	4613      	mov	r3, r2
 800cc20:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800cc22:	79fa      	ldrb	r2, [r7, #7]
 800cc24:	4944      	ldr	r1, [pc, #272]	; (800cd38 <etharp_output_to_arp_index+0x124>)
 800cc26:	4613      	mov	r3, r2
 800cc28:	005b      	lsls	r3, r3, #1
 800cc2a:	4413      	add	r3, r2
 800cc2c:	00db      	lsls	r3, r3, #3
 800cc2e:	440b      	add	r3, r1
 800cc30:	3314      	adds	r3, #20
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d806      	bhi.n	800cc46 <etharp_output_to_arp_index+0x32>
 800cc38:	4b40      	ldr	r3, [pc, #256]	; (800cd3c <etharp_output_to_arp_index+0x128>)
 800cc3a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800cc3e:	4940      	ldr	r1, [pc, #256]	; (800cd40 <etharp_output_to_arp_index+0x12c>)
 800cc40:	4840      	ldr	r0, [pc, #256]	; (800cd44 <etharp_output_to_arp_index+0x130>)
 800cc42:	f001 ff5f 	bl	800eb04 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800cc46:	79fa      	ldrb	r2, [r7, #7]
 800cc48:	493b      	ldr	r1, [pc, #236]	; (800cd38 <etharp_output_to_arp_index+0x124>)
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	005b      	lsls	r3, r3, #1
 800cc4e:	4413      	add	r3, r2
 800cc50:	00db      	lsls	r3, r3, #3
 800cc52:	440b      	add	r3, r1
 800cc54:	3314      	adds	r3, #20
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	2b02      	cmp	r3, #2
 800cc5a:	d153      	bne.n	800cd04 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800cc5c:	79fa      	ldrb	r2, [r7, #7]
 800cc5e:	4936      	ldr	r1, [pc, #216]	; (800cd38 <etharp_output_to_arp_index+0x124>)
 800cc60:	4613      	mov	r3, r2
 800cc62:	005b      	lsls	r3, r3, #1
 800cc64:	4413      	add	r3, r2
 800cc66:	00db      	lsls	r3, r3, #3
 800cc68:	440b      	add	r3, r1
 800cc6a:	3312      	adds	r3, #18
 800cc6c:	881b      	ldrh	r3, [r3, #0]
 800cc6e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800cc72:	d919      	bls.n	800cca8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800cc74:	79fa      	ldrb	r2, [r7, #7]
 800cc76:	4613      	mov	r3, r2
 800cc78:	005b      	lsls	r3, r3, #1
 800cc7a:	4413      	add	r3, r2
 800cc7c:	00db      	lsls	r3, r3, #3
 800cc7e:	4a2e      	ldr	r2, [pc, #184]	; (800cd38 <etharp_output_to_arp_index+0x124>)
 800cc80:	4413      	add	r3, r2
 800cc82:	3304      	adds	r3, #4
 800cc84:	4619      	mov	r1, r3
 800cc86:	68f8      	ldr	r0, [r7, #12]
 800cc88:	f000 fb4c 	bl	800d324 <etharp_request>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d138      	bne.n	800cd04 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cc92:	79fa      	ldrb	r2, [r7, #7]
 800cc94:	4928      	ldr	r1, [pc, #160]	; (800cd38 <etharp_output_to_arp_index+0x124>)
 800cc96:	4613      	mov	r3, r2
 800cc98:	005b      	lsls	r3, r3, #1
 800cc9a:	4413      	add	r3, r2
 800cc9c:	00db      	lsls	r3, r3, #3
 800cc9e:	440b      	add	r3, r1
 800cca0:	3314      	adds	r3, #20
 800cca2:	2203      	movs	r2, #3
 800cca4:	701a      	strb	r2, [r3, #0]
 800cca6:	e02d      	b.n	800cd04 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800cca8:	79fa      	ldrb	r2, [r7, #7]
 800ccaa:	4923      	ldr	r1, [pc, #140]	; (800cd38 <etharp_output_to_arp_index+0x124>)
 800ccac:	4613      	mov	r3, r2
 800ccae:	005b      	lsls	r3, r3, #1
 800ccb0:	4413      	add	r3, r2
 800ccb2:	00db      	lsls	r3, r3, #3
 800ccb4:	440b      	add	r3, r1
 800ccb6:	3312      	adds	r3, #18
 800ccb8:	881b      	ldrh	r3, [r3, #0]
 800ccba:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ccbe:	d321      	bcc.n	800cd04 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ccc0:	79fa      	ldrb	r2, [r7, #7]
 800ccc2:	4613      	mov	r3, r2
 800ccc4:	005b      	lsls	r3, r3, #1
 800ccc6:	4413      	add	r3, r2
 800ccc8:	00db      	lsls	r3, r3, #3
 800ccca:	4a1b      	ldr	r2, [pc, #108]	; (800cd38 <etharp_output_to_arp_index+0x124>)
 800cccc:	4413      	add	r3, r2
 800ccce:	1d19      	adds	r1, r3, #4
 800ccd0:	79fa      	ldrb	r2, [r7, #7]
 800ccd2:	4613      	mov	r3, r2
 800ccd4:	005b      	lsls	r3, r3, #1
 800ccd6:	4413      	add	r3, r2
 800ccd8:	00db      	lsls	r3, r3, #3
 800ccda:	3308      	adds	r3, #8
 800ccdc:	4a16      	ldr	r2, [pc, #88]	; (800cd38 <etharp_output_to_arp_index+0x124>)
 800ccde:	4413      	add	r3, r2
 800cce0:	3304      	adds	r3, #4
 800cce2:	461a      	mov	r2, r3
 800cce4:	68f8      	ldr	r0, [r7, #12]
 800cce6:	f000 fafb 	bl	800d2e0 <etharp_request_dst>
 800ccea:	4603      	mov	r3, r0
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d109      	bne.n	800cd04 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ccf0:	79fa      	ldrb	r2, [r7, #7]
 800ccf2:	4911      	ldr	r1, [pc, #68]	; (800cd38 <etharp_output_to_arp_index+0x124>)
 800ccf4:	4613      	mov	r3, r2
 800ccf6:	005b      	lsls	r3, r3, #1
 800ccf8:	4413      	add	r3, r2
 800ccfa:	00db      	lsls	r3, r3, #3
 800ccfc:	440b      	add	r3, r1
 800ccfe:	3314      	adds	r3, #20
 800cd00:	2203      	movs	r2, #3
 800cd02:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800cd0a:	79fa      	ldrb	r2, [r7, #7]
 800cd0c:	4613      	mov	r3, r2
 800cd0e:	005b      	lsls	r3, r3, #1
 800cd10:	4413      	add	r3, r2
 800cd12:	00db      	lsls	r3, r3, #3
 800cd14:	3308      	adds	r3, #8
 800cd16:	4a08      	ldr	r2, [pc, #32]	; (800cd38 <etharp_output_to_arp_index+0x124>)
 800cd18:	4413      	add	r3, r2
 800cd1a:	3304      	adds	r3, #4
 800cd1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cd20:	9200      	str	r2, [sp, #0]
 800cd22:	460a      	mov	r2, r1
 800cd24:	68b9      	ldr	r1, [r7, #8]
 800cd26:	68f8      	ldr	r0, [r7, #12]
 800cd28:	f001 fe40 	bl	800e9ac <ethernet_output>
 800cd2c:	4603      	mov	r3, r0
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3710      	adds	r7, #16
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	2000839c 	.word	0x2000839c
 800cd3c:	08012260 	.word	0x08012260
 800cd40:	080123d0 	.word	0x080123d0
 800cd44:	080122d8 	.word	0x080122d8

0800cd48 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b08a      	sub	sp, #40	; 0x28
 800cd4c:	af02      	add	r7, sp, #8
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d106      	bne.n	800cd6c <etharp_output+0x24>
 800cd5e:	4b73      	ldr	r3, [pc, #460]	; (800cf2c <etharp_output+0x1e4>)
 800cd60:	f240 321e 	movw	r2, #798	; 0x31e
 800cd64:	4972      	ldr	r1, [pc, #456]	; (800cf30 <etharp_output+0x1e8>)
 800cd66:	4873      	ldr	r0, [pc, #460]	; (800cf34 <etharp_output+0x1ec>)
 800cd68:	f001 fecc 	bl	800eb04 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d106      	bne.n	800cd80 <etharp_output+0x38>
 800cd72:	4b6e      	ldr	r3, [pc, #440]	; (800cf2c <etharp_output+0x1e4>)
 800cd74:	f240 321f 	movw	r2, #799	; 0x31f
 800cd78:	496f      	ldr	r1, [pc, #444]	; (800cf38 <etharp_output+0x1f0>)
 800cd7a:	486e      	ldr	r0, [pc, #440]	; (800cf34 <etharp_output+0x1ec>)
 800cd7c:	f001 fec2 	bl	800eb04 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d106      	bne.n	800cd94 <etharp_output+0x4c>
 800cd86:	4b69      	ldr	r3, [pc, #420]	; (800cf2c <etharp_output+0x1e4>)
 800cd88:	f44f 7248 	mov.w	r2, #800	; 0x320
 800cd8c:	496b      	ldr	r1, [pc, #428]	; (800cf3c <etharp_output+0x1f4>)
 800cd8e:	4869      	ldr	r0, [pc, #420]	; (800cf34 <etharp_output+0x1ec>)
 800cd90:	f001 feb8 	bl	800eb04 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	68f9      	ldr	r1, [r7, #12]
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f000 fef8 	bl	800db90 <ip4_addr_isbroadcast_u32>
 800cda0:	4603      	mov	r3, r0
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d002      	beq.n	800cdac <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800cda6:	4b66      	ldr	r3, [pc, #408]	; (800cf40 <etharp_output+0x1f8>)
 800cda8:	61fb      	str	r3, [r7, #28]
 800cdaa:	e0af      	b.n	800cf0c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cdb4:	2be0      	cmp	r3, #224	; 0xe0
 800cdb6:	d118      	bne.n	800cdea <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800cdb8:	2301      	movs	r3, #1
 800cdba:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800cdc0:	235e      	movs	r3, #94	; 0x5e
 800cdc2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	3302      	adds	r3, #2
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	3303      	adds	r3, #3
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800cde2:	f107 0310 	add.w	r3, r7, #16
 800cde6:	61fb      	str	r3, [r7, #28]
 800cde8:	e090      	b.n	800cf0c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	3304      	adds	r3, #4
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	405a      	eors	r2, r3
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	3308      	adds	r3, #8
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4013      	ands	r3, r2
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d012      	beq.n	800ce28 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ce08:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d00b      	beq.n	800ce28 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	330c      	adds	r3, #12
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d003      	beq.n	800ce22 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	330c      	adds	r3, #12
 800ce1e:	61bb      	str	r3, [r7, #24]
 800ce20:	e002      	b.n	800ce28 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ce22:	f06f 0303 	mvn.w	r3, #3
 800ce26:	e07d      	b.n	800cf24 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ce28:	4b46      	ldr	r3, [pc, #280]	; (800cf44 <etharp_output+0x1fc>)
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	4a46      	ldr	r2, [pc, #280]	; (800cf48 <etharp_output+0x200>)
 800ce30:	460b      	mov	r3, r1
 800ce32:	005b      	lsls	r3, r3, #1
 800ce34:	440b      	add	r3, r1
 800ce36:	00db      	lsls	r3, r3, #3
 800ce38:	4413      	add	r3, r2
 800ce3a:	3314      	adds	r3, #20
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	2b01      	cmp	r3, #1
 800ce40:	d925      	bls.n	800ce8e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ce42:	4b40      	ldr	r3, [pc, #256]	; (800cf44 <etharp_output+0x1fc>)
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	4619      	mov	r1, r3
 800ce48:	4a3f      	ldr	r2, [pc, #252]	; (800cf48 <etharp_output+0x200>)
 800ce4a:	460b      	mov	r3, r1
 800ce4c:	005b      	lsls	r3, r3, #1
 800ce4e:	440b      	add	r3, r1
 800ce50:	00db      	lsls	r3, r3, #3
 800ce52:	4413      	add	r3, r2
 800ce54:	3308      	adds	r3, #8
 800ce56:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ce58:	68fa      	ldr	r2, [r7, #12]
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d117      	bne.n	800ce8e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ce5e:	69bb      	ldr	r3, [r7, #24]
 800ce60:	681a      	ldr	r2, [r3, #0]
 800ce62:	4b38      	ldr	r3, [pc, #224]	; (800cf44 <etharp_output+0x1fc>)
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	4618      	mov	r0, r3
 800ce68:	4937      	ldr	r1, [pc, #220]	; (800cf48 <etharp_output+0x200>)
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	005b      	lsls	r3, r3, #1
 800ce6e:	4403      	add	r3, r0
 800ce70:	00db      	lsls	r3, r3, #3
 800ce72:	440b      	add	r3, r1
 800ce74:	3304      	adds	r3, #4
 800ce76:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d108      	bne.n	800ce8e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ce7c:	4b31      	ldr	r3, [pc, #196]	; (800cf44 <etharp_output+0x1fc>)
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	461a      	mov	r2, r3
 800ce82:	68b9      	ldr	r1, [r7, #8]
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f7ff fec5 	bl	800cc14 <etharp_output_to_arp_index>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	e04a      	b.n	800cf24 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ce8e:	2300      	movs	r3, #0
 800ce90:	75fb      	strb	r3, [r7, #23]
 800ce92:	e031      	b.n	800cef8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ce94:	7dfa      	ldrb	r2, [r7, #23]
 800ce96:	492c      	ldr	r1, [pc, #176]	; (800cf48 <etharp_output+0x200>)
 800ce98:	4613      	mov	r3, r2
 800ce9a:	005b      	lsls	r3, r3, #1
 800ce9c:	4413      	add	r3, r2
 800ce9e:	00db      	lsls	r3, r3, #3
 800cea0:	440b      	add	r3, r1
 800cea2:	3314      	adds	r3, #20
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	2b01      	cmp	r3, #1
 800cea8:	d923      	bls.n	800cef2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800ceaa:	7dfa      	ldrb	r2, [r7, #23]
 800ceac:	4926      	ldr	r1, [pc, #152]	; (800cf48 <etharp_output+0x200>)
 800ceae:	4613      	mov	r3, r2
 800ceb0:	005b      	lsls	r3, r3, #1
 800ceb2:	4413      	add	r3, r2
 800ceb4:	00db      	lsls	r3, r3, #3
 800ceb6:	440b      	add	r3, r1
 800ceb8:	3308      	adds	r3, #8
 800ceba:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cebc:	68fa      	ldr	r2, [r7, #12]
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d117      	bne.n	800cef2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800cec2:	69bb      	ldr	r3, [r7, #24]
 800cec4:	6819      	ldr	r1, [r3, #0]
 800cec6:	7dfa      	ldrb	r2, [r7, #23]
 800cec8:	481f      	ldr	r0, [pc, #124]	; (800cf48 <etharp_output+0x200>)
 800ceca:	4613      	mov	r3, r2
 800cecc:	005b      	lsls	r3, r3, #1
 800cece:	4413      	add	r3, r2
 800ced0:	00db      	lsls	r3, r3, #3
 800ced2:	4403      	add	r3, r0
 800ced4:	3304      	adds	r3, #4
 800ced6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800ced8:	4299      	cmp	r1, r3
 800ceda:	d10a      	bne.n	800cef2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800cedc:	4a19      	ldr	r2, [pc, #100]	; (800cf44 <etharp_output+0x1fc>)
 800cede:	7dfb      	ldrb	r3, [r7, #23]
 800cee0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800cee2:	7dfb      	ldrb	r3, [r7, #23]
 800cee4:	461a      	mov	r2, r3
 800cee6:	68b9      	ldr	r1, [r7, #8]
 800cee8:	68f8      	ldr	r0, [r7, #12]
 800ceea:	f7ff fe93 	bl	800cc14 <etharp_output_to_arp_index>
 800ceee:	4603      	mov	r3, r0
 800cef0:	e018      	b.n	800cf24 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cef2:	7dfb      	ldrb	r3, [r7, #23]
 800cef4:	3301      	adds	r3, #1
 800cef6:	75fb      	strb	r3, [r7, #23]
 800cef8:	7dfb      	ldrb	r3, [r7, #23]
 800cefa:	2b09      	cmp	r3, #9
 800cefc:	d9ca      	bls.n	800ce94 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800cefe:	68ba      	ldr	r2, [r7, #8]
 800cf00:	69b9      	ldr	r1, [r7, #24]
 800cf02:	68f8      	ldr	r0, [r7, #12]
 800cf04:	f000 f822 	bl	800cf4c <etharp_query>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	e00b      	b.n	800cf24 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cf12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf16:	9300      	str	r3, [sp, #0]
 800cf18:	69fb      	ldr	r3, [r7, #28]
 800cf1a:	68b9      	ldr	r1, [r7, #8]
 800cf1c:	68f8      	ldr	r0, [r7, #12]
 800cf1e:	f001 fd45 	bl	800e9ac <ethernet_output>
 800cf22:	4603      	mov	r3, r0
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3720      	adds	r7, #32
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}
 800cf2c:	08012260 	.word	0x08012260
 800cf30:	080123b0 	.word	0x080123b0
 800cf34:	080122d8 	.word	0x080122d8
 800cf38:	08012400 	.word	0x08012400
 800cf3c:	080123a0 	.word	0x080123a0
 800cf40:	08012a1c 	.word	0x08012a1c
 800cf44:	2000848c 	.word	0x2000848c
 800cf48:	2000839c 	.word	0x2000839c

0800cf4c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b08c      	sub	sp, #48	; 0x30
 800cf50:	af02      	add	r7, sp, #8
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	60b9      	str	r1, [r7, #8]
 800cf56:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	3326      	adds	r3, #38	; 0x26
 800cf5c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800cf5e:	23ff      	movs	r3, #255	; 0xff
 800cf60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800cf64:	2300      	movs	r3, #0
 800cf66:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	68f9      	ldr	r1, [r7, #12]
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f000 fe0e 	bl	800db90 <ip4_addr_isbroadcast_u32>
 800cf74:	4603      	mov	r3, r0
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d10c      	bne.n	800cf94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cf82:	2be0      	cmp	r3, #224	; 0xe0
 800cf84:	d006      	beq.n	800cf94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d003      	beq.n	800cf94 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d102      	bne.n	800cf9a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cf94:	f06f 030f 	mvn.w	r3, #15
 800cf98:	e101      	b.n	800d19e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800cf9a:	68fa      	ldr	r2, [r7, #12]
 800cf9c:	2101      	movs	r1, #1
 800cf9e:	68b8      	ldr	r0, [r7, #8]
 800cfa0:	f7ff fb60 	bl	800c664 <etharp_find_entry>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800cfa8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	da02      	bge.n	800cfb6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800cfb0:	8a7b      	ldrh	r3, [r7, #18]
 800cfb2:	b25b      	sxtb	r3, r3
 800cfb4:	e0f3      	b.n	800d19e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800cfb6:	8a7b      	ldrh	r3, [r7, #18]
 800cfb8:	2b7e      	cmp	r3, #126	; 0x7e
 800cfba:	d906      	bls.n	800cfca <etharp_query+0x7e>
 800cfbc:	4b7a      	ldr	r3, [pc, #488]	; (800d1a8 <etharp_query+0x25c>)
 800cfbe:	f240 32c1 	movw	r2, #961	; 0x3c1
 800cfc2:	497a      	ldr	r1, [pc, #488]	; (800d1ac <etharp_query+0x260>)
 800cfc4:	487a      	ldr	r0, [pc, #488]	; (800d1b0 <etharp_query+0x264>)
 800cfc6:	f001 fd9d 	bl	800eb04 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800cfca:	8a7b      	ldrh	r3, [r7, #18]
 800cfcc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800cfce:	7c7a      	ldrb	r2, [r7, #17]
 800cfd0:	4978      	ldr	r1, [pc, #480]	; (800d1b4 <etharp_query+0x268>)
 800cfd2:	4613      	mov	r3, r2
 800cfd4:	005b      	lsls	r3, r3, #1
 800cfd6:	4413      	add	r3, r2
 800cfd8:	00db      	lsls	r3, r3, #3
 800cfda:	440b      	add	r3, r1
 800cfdc:	3314      	adds	r3, #20
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d115      	bne.n	800d010 <etharp_query+0xc4>
    is_new_entry = 1;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800cfe8:	7c7a      	ldrb	r2, [r7, #17]
 800cfea:	4972      	ldr	r1, [pc, #456]	; (800d1b4 <etharp_query+0x268>)
 800cfec:	4613      	mov	r3, r2
 800cfee:	005b      	lsls	r3, r3, #1
 800cff0:	4413      	add	r3, r2
 800cff2:	00db      	lsls	r3, r3, #3
 800cff4:	440b      	add	r3, r1
 800cff6:	3314      	adds	r3, #20
 800cff8:	2201      	movs	r2, #1
 800cffa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800cffc:	7c7a      	ldrb	r2, [r7, #17]
 800cffe:	496d      	ldr	r1, [pc, #436]	; (800d1b4 <etharp_query+0x268>)
 800d000:	4613      	mov	r3, r2
 800d002:	005b      	lsls	r3, r3, #1
 800d004:	4413      	add	r3, r2
 800d006:	00db      	lsls	r3, r3, #3
 800d008:	440b      	add	r3, r1
 800d00a:	3308      	adds	r3, #8
 800d00c:	68fa      	ldr	r2, [r7, #12]
 800d00e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d010:	7c7a      	ldrb	r2, [r7, #17]
 800d012:	4968      	ldr	r1, [pc, #416]	; (800d1b4 <etharp_query+0x268>)
 800d014:	4613      	mov	r3, r2
 800d016:	005b      	lsls	r3, r3, #1
 800d018:	4413      	add	r3, r2
 800d01a:	00db      	lsls	r3, r3, #3
 800d01c:	440b      	add	r3, r1
 800d01e:	3314      	adds	r3, #20
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	2b01      	cmp	r3, #1
 800d024:	d011      	beq.n	800d04a <etharp_query+0xfe>
 800d026:	7c7a      	ldrb	r2, [r7, #17]
 800d028:	4962      	ldr	r1, [pc, #392]	; (800d1b4 <etharp_query+0x268>)
 800d02a:	4613      	mov	r3, r2
 800d02c:	005b      	lsls	r3, r3, #1
 800d02e:	4413      	add	r3, r2
 800d030:	00db      	lsls	r3, r3, #3
 800d032:	440b      	add	r3, r1
 800d034:	3314      	adds	r3, #20
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d806      	bhi.n	800d04a <etharp_query+0xfe>
 800d03c:	4b5a      	ldr	r3, [pc, #360]	; (800d1a8 <etharp_query+0x25c>)
 800d03e:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d042:	495d      	ldr	r1, [pc, #372]	; (800d1b8 <etharp_query+0x26c>)
 800d044:	485a      	ldr	r0, [pc, #360]	; (800d1b0 <etharp_query+0x264>)
 800d046:	f001 fd5d 	bl	800eb04 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d04a:	6a3b      	ldr	r3, [r7, #32]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d102      	bne.n	800d056 <etharp_query+0x10a>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d10c      	bne.n	800d070 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d056:	68b9      	ldr	r1, [r7, #8]
 800d058:	68f8      	ldr	r0, [r7, #12]
 800d05a:	f000 f963 	bl	800d324 <etharp_request>
 800d05e:	4603      	mov	r3, r0
 800d060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d102      	bne.n	800d070 <etharp_query+0x124>
      return result;
 800d06a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d06e:	e096      	b.n	800d19e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d106      	bne.n	800d084 <etharp_query+0x138>
 800d076:	4b4c      	ldr	r3, [pc, #304]	; (800d1a8 <etharp_query+0x25c>)
 800d078:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d07c:	494f      	ldr	r1, [pc, #316]	; (800d1bc <etharp_query+0x270>)
 800d07e:	484c      	ldr	r0, [pc, #304]	; (800d1b0 <etharp_query+0x264>)
 800d080:	f001 fd40 	bl	800eb04 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d084:	7c7a      	ldrb	r2, [r7, #17]
 800d086:	494b      	ldr	r1, [pc, #300]	; (800d1b4 <etharp_query+0x268>)
 800d088:	4613      	mov	r3, r2
 800d08a:	005b      	lsls	r3, r3, #1
 800d08c:	4413      	add	r3, r2
 800d08e:	00db      	lsls	r3, r3, #3
 800d090:	440b      	add	r3, r1
 800d092:	3314      	adds	r3, #20
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	2b01      	cmp	r3, #1
 800d098:	d917      	bls.n	800d0ca <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d09a:	4a49      	ldr	r2, [pc, #292]	; (800d1c0 <etharp_query+0x274>)
 800d09c:	7c7b      	ldrb	r3, [r7, #17]
 800d09e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d0a0:	7c7a      	ldrb	r2, [r7, #17]
 800d0a2:	4613      	mov	r3, r2
 800d0a4:	005b      	lsls	r3, r3, #1
 800d0a6:	4413      	add	r3, r2
 800d0a8:	00db      	lsls	r3, r3, #3
 800d0aa:	3308      	adds	r3, #8
 800d0ac:	4a41      	ldr	r2, [pc, #260]	; (800d1b4 <etharp_query+0x268>)
 800d0ae:	4413      	add	r3, r2
 800d0b0:	3304      	adds	r3, #4
 800d0b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d0b6:	9200      	str	r2, [sp, #0]
 800d0b8:	697a      	ldr	r2, [r7, #20]
 800d0ba:	6879      	ldr	r1, [r7, #4]
 800d0bc:	68f8      	ldr	r0, [r7, #12]
 800d0be:	f001 fc75 	bl	800e9ac <ethernet_output>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d0c8:	e067      	b.n	800d19a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d0ca:	7c7a      	ldrb	r2, [r7, #17]
 800d0cc:	4939      	ldr	r1, [pc, #228]	; (800d1b4 <etharp_query+0x268>)
 800d0ce:	4613      	mov	r3, r2
 800d0d0:	005b      	lsls	r3, r3, #1
 800d0d2:	4413      	add	r3, r2
 800d0d4:	00db      	lsls	r3, r3, #3
 800d0d6:	440b      	add	r3, r1
 800d0d8:	3314      	adds	r3, #20
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	d15c      	bne.n	800d19a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d0e8:	e01c      	b.n	800d124 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d0ea:	69fb      	ldr	r3, [r7, #28]
 800d0ec:	895a      	ldrh	r2, [r3, #10]
 800d0ee:	69fb      	ldr	r3, [r7, #28]
 800d0f0:	891b      	ldrh	r3, [r3, #8]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d10a      	bne.n	800d10c <etharp_query+0x1c0>
 800d0f6:	69fb      	ldr	r3, [r7, #28]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d006      	beq.n	800d10c <etharp_query+0x1c0>
 800d0fe:	4b2a      	ldr	r3, [pc, #168]	; (800d1a8 <etharp_query+0x25c>)
 800d100:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d104:	492f      	ldr	r1, [pc, #188]	; (800d1c4 <etharp_query+0x278>)
 800d106:	482a      	ldr	r0, [pc, #168]	; (800d1b0 <etharp_query+0x264>)
 800d108:	f001 fcfc 	bl	800eb04 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	7b1b      	ldrb	r3, [r3, #12]
 800d110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d114:	2b00      	cmp	r3, #0
 800d116:	d002      	beq.n	800d11e <etharp_query+0x1d2>
        copy_needed = 1;
 800d118:	2301      	movs	r3, #1
 800d11a:	61bb      	str	r3, [r7, #24]
        break;
 800d11c:	e005      	b.n	800d12a <etharp_query+0x1de>
      }
      p = p->next;
 800d11e:	69fb      	ldr	r3, [r7, #28]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d124:	69fb      	ldr	r3, [r7, #28]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d1df      	bne.n	800d0ea <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d12a:	69bb      	ldr	r3, [r7, #24]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d007      	beq.n	800d140 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d136:	200e      	movs	r0, #14
 800d138:	f7f9 fd28 	bl	8006b8c <pbuf_clone>
 800d13c:	61f8      	str	r0, [r7, #28]
 800d13e:	e004      	b.n	800d14a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d144:	69f8      	ldr	r0, [r7, #28]
 800d146:	f7f9 fb65 	bl	8006814 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d14a:	69fb      	ldr	r3, [r7, #28]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d021      	beq.n	800d194 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d150:	7c7a      	ldrb	r2, [r7, #17]
 800d152:	4918      	ldr	r1, [pc, #96]	; (800d1b4 <etharp_query+0x268>)
 800d154:	4613      	mov	r3, r2
 800d156:	005b      	lsls	r3, r3, #1
 800d158:	4413      	add	r3, r2
 800d15a:	00db      	lsls	r3, r3, #3
 800d15c:	440b      	add	r3, r1
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d00a      	beq.n	800d17a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d164:	7c7a      	ldrb	r2, [r7, #17]
 800d166:	4913      	ldr	r1, [pc, #76]	; (800d1b4 <etharp_query+0x268>)
 800d168:	4613      	mov	r3, r2
 800d16a:	005b      	lsls	r3, r3, #1
 800d16c:	4413      	add	r3, r2
 800d16e:	00db      	lsls	r3, r3, #3
 800d170:	440b      	add	r3, r1
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4618      	mov	r0, r3
 800d176:	f7f9 faad 	bl	80066d4 <pbuf_free>
      }
      arp_table[i].q = p;
 800d17a:	7c7a      	ldrb	r2, [r7, #17]
 800d17c:	490d      	ldr	r1, [pc, #52]	; (800d1b4 <etharp_query+0x268>)
 800d17e:	4613      	mov	r3, r2
 800d180:	005b      	lsls	r3, r3, #1
 800d182:	4413      	add	r3, r2
 800d184:	00db      	lsls	r3, r3, #3
 800d186:	440b      	add	r3, r1
 800d188:	69fa      	ldr	r2, [r7, #28]
 800d18a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d18c:	2300      	movs	r3, #0
 800d18e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d192:	e002      	b.n	800d19a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d194:	23ff      	movs	r3, #255	; 0xff
 800d196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d19a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3728      	adds	r7, #40	; 0x28
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	08012260 	.word	0x08012260
 800d1ac:	0801240c 	.word	0x0801240c
 800d1b0:	080122d8 	.word	0x080122d8
 800d1b4:	2000839c 	.word	0x2000839c
 800d1b8:	0801241c 	.word	0x0801241c
 800d1bc:	08012400 	.word	0x08012400
 800d1c0:	2000848c 	.word	0x2000848c
 800d1c4:	08012444 	.word	0x08012444

0800d1c8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b08a      	sub	sp, #40	; 0x28
 800d1cc:	af02      	add	r7, sp, #8
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	60b9      	str	r1, [r7, #8]
 800d1d2:	607a      	str	r2, [r7, #4]
 800d1d4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d106      	bne.n	800d1ee <etharp_raw+0x26>
 800d1e0:	4b3a      	ldr	r3, [pc, #232]	; (800d2cc <etharp_raw+0x104>)
 800d1e2:	f240 4257 	movw	r2, #1111	; 0x457
 800d1e6:	493a      	ldr	r1, [pc, #232]	; (800d2d0 <etharp_raw+0x108>)
 800d1e8:	483a      	ldr	r0, [pc, #232]	; (800d2d4 <etharp_raw+0x10c>)
 800d1ea:	f001 fc8b 	bl	800eb04 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d1ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d1f2:	211c      	movs	r1, #28
 800d1f4:	200e      	movs	r0, #14
 800d1f6:	f7f8 ff89 	bl	800610c <pbuf_alloc>
 800d1fa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d1fc:	69bb      	ldr	r3, [r7, #24]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d102      	bne.n	800d208 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d202:	f04f 33ff 	mov.w	r3, #4294967295
 800d206:	e05d      	b.n	800d2c4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d208:	69bb      	ldr	r3, [r7, #24]
 800d20a:	895b      	ldrh	r3, [r3, #10]
 800d20c:	2b1b      	cmp	r3, #27
 800d20e:	d806      	bhi.n	800d21e <etharp_raw+0x56>
 800d210:	4b2e      	ldr	r3, [pc, #184]	; (800d2cc <etharp_raw+0x104>)
 800d212:	f240 4262 	movw	r2, #1122	; 0x462
 800d216:	4930      	ldr	r1, [pc, #192]	; (800d2d8 <etharp_raw+0x110>)
 800d218:	482e      	ldr	r0, [pc, #184]	; (800d2d4 <etharp_raw+0x10c>)
 800d21a:	f001 fc73 	bl	800eb04 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	685b      	ldr	r3, [r3, #4]
 800d222:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d224:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d226:	4618      	mov	r0, r3
 800d228:	f7f7 fef6 	bl	8005018 <lwip_htons>
 800d22c:	4603      	mov	r3, r0
 800d22e:	461a      	mov	r2, r3
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d23a:	2b06      	cmp	r3, #6
 800d23c:	d006      	beq.n	800d24c <etharp_raw+0x84>
 800d23e:	4b23      	ldr	r3, [pc, #140]	; (800d2cc <etharp_raw+0x104>)
 800d240:	f240 4269 	movw	r2, #1129	; 0x469
 800d244:	4925      	ldr	r1, [pc, #148]	; (800d2dc <etharp_raw+0x114>)
 800d246:	4823      	ldr	r0, [pc, #140]	; (800d2d4 <etharp_raw+0x10c>)
 800d248:	f001 fc5c 	bl	800eb04 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	3308      	adds	r3, #8
 800d250:	2206      	movs	r2, #6
 800d252:	6839      	ldr	r1, [r7, #0]
 800d254:	4618      	mov	r0, r3
 800d256:	f001 fc25 	bl	800eaa4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	3312      	adds	r3, #18
 800d25e:	2206      	movs	r2, #6
 800d260:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d262:	4618      	mov	r0, r3
 800d264:	f001 fc1e 	bl	800eaa4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	330e      	adds	r3, #14
 800d26c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d26e:	6812      	ldr	r2, [r2, #0]
 800d270:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	3318      	adds	r3, #24
 800d276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d278:	6812      	ldr	r2, [r2, #0]
 800d27a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	2200      	movs	r2, #0
 800d280:	701a      	strb	r2, [r3, #0]
 800d282:	2200      	movs	r2, #0
 800d284:	f042 0201 	orr.w	r2, r2, #1
 800d288:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	2200      	movs	r2, #0
 800d28e:	f042 0208 	orr.w	r2, r2, #8
 800d292:	709a      	strb	r2, [r3, #2]
 800d294:	2200      	movs	r2, #0
 800d296:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	2206      	movs	r2, #6
 800d29c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	2204      	movs	r2, #4
 800d2a2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d2a4:	f640 0306 	movw	r3, #2054	; 0x806
 800d2a8:	9300      	str	r3, [sp, #0]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	68ba      	ldr	r2, [r7, #8]
 800d2ae:	69b9      	ldr	r1, [r7, #24]
 800d2b0:	68f8      	ldr	r0, [r7, #12]
 800d2b2:	f001 fb7b 	bl	800e9ac <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d2b6:	69b8      	ldr	r0, [r7, #24]
 800d2b8:	f7f9 fa0c 	bl	80066d4 <pbuf_free>
  p = NULL;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d2c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3720      	adds	r7, #32
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}
 800d2cc:	08012260 	.word	0x08012260
 800d2d0:	080123b0 	.word	0x080123b0
 800d2d4:	080122d8 	.word	0x080122d8
 800d2d8:	08012460 	.word	0x08012460
 800d2dc:	08012494 	.word	0x08012494

0800d2e0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b088      	sub	sp, #32
 800d2e4:	af04      	add	r7, sp, #16
 800d2e6:	60f8      	str	r0, [r7, #12]
 800d2e8:	60b9      	str	r1, [r7, #8]
 800d2ea:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d2fc:	2201      	movs	r2, #1
 800d2fe:	9203      	str	r2, [sp, #12]
 800d300:	68ba      	ldr	r2, [r7, #8]
 800d302:	9202      	str	r2, [sp, #8]
 800d304:	4a06      	ldr	r2, [pc, #24]	; (800d320 <etharp_request_dst+0x40>)
 800d306:	9201      	str	r2, [sp, #4]
 800d308:	9300      	str	r3, [sp, #0]
 800d30a:	4603      	mov	r3, r0
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	68f8      	ldr	r0, [r7, #12]
 800d310:	f7ff ff5a 	bl	800d1c8 <etharp_raw>
 800d314:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d316:	4618      	mov	r0, r3
 800d318:	3710      	adds	r7, #16
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
 800d31e:	bf00      	nop
 800d320:	08012a24 	.word	0x08012a24

0800d324 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d32e:	4a05      	ldr	r2, [pc, #20]	; (800d344 <etharp_request+0x20>)
 800d330:	6839      	ldr	r1, [r7, #0]
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f7ff ffd4 	bl	800d2e0 <etharp_request_dst>
 800d338:	4603      	mov	r3, r0
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3708      	adds	r7, #8
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
 800d342:	bf00      	nop
 800d344:	08012a1c 	.word	0x08012a1c

0800d348 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b08e      	sub	sp, #56	; 0x38
 800d34c:	af04      	add	r7, sp, #16
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d352:	4b79      	ldr	r3, [pc, #484]	; (800d538 <icmp_input+0x1f0>)
 800d354:	689b      	ldr	r3, [r3, #8]
 800d356:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	f003 030f 	and.w	r3, r3, #15
 800d360:	b2db      	uxtb	r3, r3
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	b2db      	uxtb	r3, r3
 800d366:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d368:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d36a:	2b13      	cmp	r3, #19
 800d36c:	f240 80cd 	bls.w	800d50a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	895b      	ldrh	r3, [r3, #10]
 800d374:	2b03      	cmp	r3, #3
 800d376:	f240 80ca 	bls.w	800d50e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d384:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d388:	2b00      	cmp	r3, #0
 800d38a:	f000 80b7 	beq.w	800d4fc <icmp_input+0x1b4>
 800d38e:	2b08      	cmp	r3, #8
 800d390:	f040 80b7 	bne.w	800d502 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d394:	4b69      	ldr	r3, [pc, #420]	; (800d53c <icmp_input+0x1f4>)
 800d396:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d398:	4b67      	ldr	r3, [pc, #412]	; (800d538 <icmp_input+0x1f0>)
 800d39a:	695b      	ldr	r3, [r3, #20]
 800d39c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d3a0:	2be0      	cmp	r3, #224	; 0xe0
 800d3a2:	f000 80bb 	beq.w	800d51c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d3a6:	4b64      	ldr	r3, [pc, #400]	; (800d538 <icmp_input+0x1f0>)
 800d3a8:	695b      	ldr	r3, [r3, #20]
 800d3aa:	4a63      	ldr	r2, [pc, #396]	; (800d538 <icmp_input+0x1f0>)
 800d3ac:	6812      	ldr	r2, [r2, #0]
 800d3ae:	4611      	mov	r1, r2
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f000 fbed 	bl	800db90 <ip4_addr_isbroadcast_u32>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f040 80b1 	bne.w	800d520 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	891b      	ldrh	r3, [r3, #8]
 800d3c2:	2b07      	cmp	r3, #7
 800d3c4:	f240 80a5 	bls.w	800d512 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d3c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3ca:	330e      	adds	r3, #14
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f7f9 f8ea 	bl	80065a8 <pbuf_add_header>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d04b      	beq.n	800d472 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	891a      	ldrh	r2, [r3, #8]
 800d3de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3e0:	4413      	add	r3, r2
 800d3e2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	891b      	ldrh	r3, [r3, #8]
 800d3e8:	8b7a      	ldrh	r2, [r7, #26]
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	f0c0 809a 	bcc.w	800d524 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d3f0:	8b7b      	ldrh	r3, [r7, #26]
 800d3f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	200e      	movs	r0, #14
 800d3fa:	f7f8 fe87 	bl	800610c <pbuf_alloc>
 800d3fe:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	2b00      	cmp	r3, #0
 800d404:	f000 8090 	beq.w	800d528 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	895b      	ldrh	r3, [r3, #10]
 800d40c:	461a      	mov	r2, r3
 800d40e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d410:	3308      	adds	r3, #8
 800d412:	429a      	cmp	r2, r3
 800d414:	d203      	bcs.n	800d41e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d416:	6978      	ldr	r0, [r7, #20]
 800d418:	f7f9 f95c 	bl	80066d4 <pbuf_free>
          goto icmperr;
 800d41c:	e085      	b.n	800d52a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d424:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d426:	4618      	mov	r0, r3
 800d428:	f001 fb3c 	bl	800eaa4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d42c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d42e:	4619      	mov	r1, r3
 800d430:	6978      	ldr	r0, [r7, #20]
 800d432:	f7f9 f8c9 	bl	80065c8 <pbuf_remove_header>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d009      	beq.n	800d450 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d43c:	4b40      	ldr	r3, [pc, #256]	; (800d540 <icmp_input+0x1f8>)
 800d43e:	22b6      	movs	r2, #182	; 0xb6
 800d440:	4940      	ldr	r1, [pc, #256]	; (800d544 <icmp_input+0x1fc>)
 800d442:	4841      	ldr	r0, [pc, #260]	; (800d548 <icmp_input+0x200>)
 800d444:	f001 fb5e 	bl	800eb04 <iprintf>
          pbuf_free(r);
 800d448:	6978      	ldr	r0, [r7, #20]
 800d44a:	f7f9 f943 	bl	80066d4 <pbuf_free>
          goto icmperr;
 800d44e:	e06c      	b.n	800d52a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d450:	6879      	ldr	r1, [r7, #4]
 800d452:	6978      	ldr	r0, [r7, #20]
 800d454:	f7f9 fa56 	bl	8006904 <pbuf_copy>
 800d458:	4603      	mov	r3, r0
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d003      	beq.n	800d466 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d45e:	6978      	ldr	r0, [r7, #20]
 800d460:	f7f9 f938 	bl	80066d4 <pbuf_free>
          goto icmperr;
 800d464:	e061      	b.n	800d52a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f7f9 f934 	bl	80066d4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	607b      	str	r3, [r7, #4]
 800d470:	e00f      	b.n	800d492 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d472:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d474:	330e      	adds	r3, #14
 800d476:	4619      	mov	r1, r3
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f7f9 f8a5 	bl	80065c8 <pbuf_remove_header>
 800d47e:	4603      	mov	r3, r0
 800d480:	2b00      	cmp	r3, #0
 800d482:	d006      	beq.n	800d492 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d484:	4b2e      	ldr	r3, [pc, #184]	; (800d540 <icmp_input+0x1f8>)
 800d486:	22c7      	movs	r2, #199	; 0xc7
 800d488:	4930      	ldr	r1, [pc, #192]	; (800d54c <icmp_input+0x204>)
 800d48a:	482f      	ldr	r0, [pc, #188]	; (800d548 <icmp_input+0x200>)
 800d48c:	f001 fb3a 	bl	800eb04 <iprintf>
          goto icmperr;
 800d490:	e04b      	b.n	800d52a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d498:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d49a:	4619      	mov	r1, r3
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f7f9 f883 	bl	80065a8 <pbuf_add_header>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d12b      	bne.n	800d500 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	685b      	ldr	r3, [r3, #4]
 800d4ac:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d4ae:	69fb      	ldr	r3, [r7, #28]
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d4b6:	4b20      	ldr	r3, [pc, #128]	; (800d538 <icmp_input+0x1f0>)
 800d4b8:	691a      	ldr	r2, [r3, #16]
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	709a      	strb	r2, [r3, #2]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	22ff      	movs	r2, #255	; 0xff
 800d4d2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	729a      	strb	r2, [r3, #10]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	9302      	str	r3, [sp, #8]
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	9301      	str	r3, [sp, #4]
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	9300      	str	r3, [sp, #0]
 800d4ea:	23ff      	movs	r3, #255	; 0xff
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	69f9      	ldr	r1, [r7, #28]
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f000 fa75 	bl	800d9e0 <ip4_output_if>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d4fa:	e001      	b.n	800d500 <icmp_input+0x1b8>
      break;
 800d4fc:	bf00      	nop
 800d4fe:	e000      	b.n	800d502 <icmp_input+0x1ba>
      break;
 800d500:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f7f9 f8e6 	bl	80066d4 <pbuf_free>
  return;
 800d508:	e013      	b.n	800d532 <icmp_input+0x1ea>
    goto lenerr;
 800d50a:	bf00      	nop
 800d50c:	e002      	b.n	800d514 <icmp_input+0x1cc>
    goto lenerr;
 800d50e:	bf00      	nop
 800d510:	e000      	b.n	800d514 <icmp_input+0x1cc>
        goto lenerr;
 800d512:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f7f9 f8dd 	bl	80066d4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d51a:	e00a      	b.n	800d532 <icmp_input+0x1ea>
        goto icmperr;
 800d51c:	bf00      	nop
 800d51e:	e004      	b.n	800d52a <icmp_input+0x1e2>
        goto icmperr;
 800d520:	bf00      	nop
 800d522:	e002      	b.n	800d52a <icmp_input+0x1e2>
          goto icmperr;
 800d524:	bf00      	nop
 800d526:	e000      	b.n	800d52a <icmp_input+0x1e2>
          goto icmperr;
 800d528:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f7f9 f8d2 	bl	80066d4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d530:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d532:	3728      	adds	r7, #40	; 0x28
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	20004dcc 	.word	0x20004dcc
 800d53c:	20004de0 	.word	0x20004de0
 800d540:	080124d8 	.word	0x080124d8
 800d544:	08012510 	.word	0x08012510
 800d548:	08012548 	.word	0x08012548
 800d54c:	08012570 	.word	0x08012570

0800d550 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	460b      	mov	r3, r1
 800d55a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d55c:	78fb      	ldrb	r3, [r7, #3]
 800d55e:	461a      	mov	r2, r3
 800d560:	2103      	movs	r1, #3
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 f814 	bl	800d590 <icmp_send_response>
}
 800d568:	bf00      	nop
 800d56a:	3708      	adds	r7, #8
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	460b      	mov	r3, r1
 800d57a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d57c:	78fb      	ldrb	r3, [r7, #3]
 800d57e:	461a      	mov	r2, r3
 800d580:	210b      	movs	r1, #11
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f000 f804 	bl	800d590 <icmp_send_response>
}
 800d588:	bf00      	nop
 800d58a:	3708      	adds	r7, #8
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b08c      	sub	sp, #48	; 0x30
 800d594:	af04      	add	r7, sp, #16
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	460b      	mov	r3, r1
 800d59a:	70fb      	strb	r3, [r7, #3]
 800d59c:	4613      	mov	r3, r2
 800d59e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d5a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d5a4:	2124      	movs	r1, #36	; 0x24
 800d5a6:	2022      	movs	r0, #34	; 0x22
 800d5a8:	f7f8 fdb0 	bl	800610c <pbuf_alloc>
 800d5ac:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d5ae:	69fb      	ldr	r3, [r7, #28]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d04c      	beq.n	800d64e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d5b4:	69fb      	ldr	r3, [r7, #28]
 800d5b6:	895b      	ldrh	r3, [r3, #10]
 800d5b8:	2b23      	cmp	r3, #35	; 0x23
 800d5ba:	d806      	bhi.n	800d5ca <icmp_send_response+0x3a>
 800d5bc:	4b26      	ldr	r3, [pc, #152]	; (800d658 <icmp_send_response+0xc8>)
 800d5be:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d5c2:	4926      	ldr	r1, [pc, #152]	; (800d65c <icmp_send_response+0xcc>)
 800d5c4:	4826      	ldr	r0, [pc, #152]	; (800d660 <icmp_send_response+0xd0>)
 800d5c6:	f001 fa9d 	bl	800eb04 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d5d0:	69fb      	ldr	r3, [r7, #28]
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	78fa      	ldrb	r2, [r7, #3]
 800d5da:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	78ba      	ldrb	r2, [r7, #2]
 800d5e0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	711a      	strb	r2, [r3, #4]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	719a      	strb	r2, [r3, #6]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d5f6:	69fb      	ldr	r3, [r7, #28]
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	f103 0008 	add.w	r0, r3, #8
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	685b      	ldr	r3, [r3, #4]
 800d602:	221c      	movs	r2, #28
 800d604:	4619      	mov	r1, r3
 800d606:	f001 fa4d 	bl	800eaa4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d60a:	69bb      	ldr	r3, [r7, #24]
 800d60c:	68db      	ldr	r3, [r3, #12]
 800d60e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d610:	f107 030c 	add.w	r3, r7, #12
 800d614:	4618      	mov	r0, r3
 800d616:	f000 f825 	bl	800d664 <ip4_route>
 800d61a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d011      	beq.n	800d646 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	2200      	movs	r2, #0
 800d626:	709a      	strb	r2, [r3, #2]
 800d628:	2200      	movs	r2, #0
 800d62a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d62c:	f107 020c 	add.w	r2, r7, #12
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	9302      	str	r3, [sp, #8]
 800d634:	2301      	movs	r3, #1
 800d636:	9301      	str	r3, [sp, #4]
 800d638:	2300      	movs	r3, #0
 800d63a:	9300      	str	r3, [sp, #0]
 800d63c:	23ff      	movs	r3, #255	; 0xff
 800d63e:	2100      	movs	r1, #0
 800d640:	69f8      	ldr	r0, [r7, #28]
 800d642:	f000 f9cd 	bl	800d9e0 <ip4_output_if>
  }
  pbuf_free(q);
 800d646:	69f8      	ldr	r0, [r7, #28]
 800d648:	f7f9 f844 	bl	80066d4 <pbuf_free>
 800d64c:	e000      	b.n	800d650 <icmp_send_response+0xc0>
    return;
 800d64e:	bf00      	nop
}
 800d650:	3720      	adds	r7, #32
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop
 800d658:	080124d8 	.word	0x080124d8
 800d65c:	080125a4 	.word	0x080125a4
 800d660:	08012548 	.word	0x08012548

0800d664 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d664:	b480      	push	{r7}
 800d666:	b085      	sub	sp, #20
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d66c:	4b33      	ldr	r3, [pc, #204]	; (800d73c <ip4_route+0xd8>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	60fb      	str	r3, [r7, #12]
 800d672:	e036      	b.n	800d6e2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d67a:	f003 0301 	and.w	r3, r3, #1
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	2b00      	cmp	r3, #0
 800d682:	d02b      	beq.n	800d6dc <ip4_route+0x78>
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d68a:	089b      	lsrs	r3, r3, #2
 800d68c:	f003 0301 	and.w	r3, r3, #1
 800d690:	b2db      	uxtb	r3, r3
 800d692:	2b00      	cmp	r3, #0
 800d694:	d022      	beq.n	800d6dc <ip4_route+0x78>
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	3304      	adds	r3, #4
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d01d      	beq.n	800d6dc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681a      	ldr	r2, [r3, #0]
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	3304      	adds	r3, #4
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	405a      	eors	r2, r3
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	3308      	adds	r3, #8
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	4013      	ands	r3, r2
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d101      	bne.n	800d6bc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	e038      	b.n	800d72e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d6c2:	f003 0302 	and.w	r3, r3, #2
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d108      	bne.n	800d6dc <ip4_route+0x78>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681a      	ldr	r2, [r3, #0]
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	330c      	adds	r3, #12
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d101      	bne.n	800d6dc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	e028      	b.n	800d72e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	60fb      	str	r3, [r7, #12]
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d1c5      	bne.n	800d674 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d6e8:	4b15      	ldr	r3, [pc, #84]	; (800d740 <ip4_route+0xdc>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d01a      	beq.n	800d726 <ip4_route+0xc2>
 800d6f0:	4b13      	ldr	r3, [pc, #76]	; (800d740 <ip4_route+0xdc>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d6f8:	f003 0301 	and.w	r3, r3, #1
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d012      	beq.n	800d726 <ip4_route+0xc2>
 800d700:	4b0f      	ldr	r3, [pc, #60]	; (800d740 <ip4_route+0xdc>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d708:	f003 0304 	and.w	r3, r3, #4
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d00a      	beq.n	800d726 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d710:	4b0b      	ldr	r3, [pc, #44]	; (800d740 <ip4_route+0xdc>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	3304      	adds	r3, #4
 800d716:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d004      	beq.n	800d726 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	b2db      	uxtb	r3, r3
 800d722:	2b7f      	cmp	r3, #127	; 0x7f
 800d724:	d101      	bne.n	800d72a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d726:	2300      	movs	r3, #0
 800d728:	e001      	b.n	800d72e <ip4_route+0xca>
  }

  return netif_default;
 800d72a:	4b05      	ldr	r3, [pc, #20]	; (800d740 <ip4_route+0xdc>)
 800d72c:	681b      	ldr	r3, [r3, #0]
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3714      	adds	r7, #20
 800d732:	46bd      	mov	sp, r7
 800d734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d738:	4770      	bx	lr
 800d73a:	bf00      	nop
 800d73c:	20008330 	.word	0x20008330
 800d740:	20008334 	.word	0x20008334

0800d744 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d752:	f003 0301 	and.w	r3, r3, #1
 800d756:	b2db      	uxtb	r3, r3
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d016      	beq.n	800d78a <ip4_input_accept+0x46>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	3304      	adds	r3, #4
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d011      	beq.n	800d78a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d766:	4b0b      	ldr	r3, [pc, #44]	; (800d794 <ip4_input_accept+0x50>)
 800d768:	695a      	ldr	r2, [r3, #20]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	3304      	adds	r3, #4
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	429a      	cmp	r2, r3
 800d772:	d008      	beq.n	800d786 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d774:	4b07      	ldr	r3, [pc, #28]	; (800d794 <ip4_input_accept+0x50>)
 800d776:	695b      	ldr	r3, [r3, #20]
 800d778:	6879      	ldr	r1, [r7, #4]
 800d77a:	4618      	mov	r0, r3
 800d77c:	f000 fa08 	bl	800db90 <ip4_addr_isbroadcast_u32>
 800d780:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d782:	2b00      	cmp	r3, #0
 800d784:	d001      	beq.n	800d78a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d786:	2301      	movs	r3, #1
 800d788:	e000      	b.n	800d78c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d78a:	2300      	movs	r3, #0
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3708      	adds	r7, #8
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}
 800d794:	20004dcc 	.word	0x20004dcc

0800d798 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b086      	sub	sp, #24
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	091b      	lsrs	r3, r3, #4
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	2b04      	cmp	r3, #4
 800d7b2:	d004      	beq.n	800d7be <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f7f8 ff8d 	bl	80066d4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	e107      	b.n	800d9ce <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	781b      	ldrb	r3, [r3, #0]
 800d7c2:	f003 030f 	and.w	r3, r3, #15
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	009b      	lsls	r3, r3, #2
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	885b      	ldrh	r3, [r3, #2]
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f7f7 fc1f 	bl	8005018 <lwip_htons>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	891b      	ldrh	r3, [r3, #8]
 800d7e2:	89ba      	ldrh	r2, [r7, #12]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d204      	bcs.n	800d7f2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d7e8:	89bb      	ldrh	r3, [r7, #12]
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f7f8 fdeb 	bl	80063c8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	895b      	ldrh	r3, [r3, #10]
 800d7f6:	89fa      	ldrh	r2, [r7, #14]
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d807      	bhi.n	800d80c <ip4_input+0x74>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	891b      	ldrh	r3, [r3, #8]
 800d800:	89ba      	ldrh	r2, [r7, #12]
 800d802:	429a      	cmp	r2, r3
 800d804:	d802      	bhi.n	800d80c <ip4_input+0x74>
 800d806:	89fb      	ldrh	r3, [r7, #14]
 800d808:	2b13      	cmp	r3, #19
 800d80a:	d804      	bhi.n	800d816 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f7f8 ff61 	bl	80066d4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d812:	2300      	movs	r3, #0
 800d814:	e0db      	b.n	800d9ce <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	691b      	ldr	r3, [r3, #16]
 800d81a:	4a6f      	ldr	r2, [pc, #444]	; (800d9d8 <ip4_input+0x240>)
 800d81c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	4a6d      	ldr	r2, [pc, #436]	; (800d9d8 <ip4_input+0x240>)
 800d824:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d826:	4b6c      	ldr	r3, [pc, #432]	; (800d9d8 <ip4_input+0x240>)
 800d828:	695b      	ldr	r3, [r3, #20]
 800d82a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d82e:	2be0      	cmp	r3, #224	; 0xe0
 800d830:	d112      	bne.n	800d858 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d838:	f003 0301 	and.w	r3, r3, #1
 800d83c:	b2db      	uxtb	r3, r3
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d007      	beq.n	800d852 <ip4_input+0xba>
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	3304      	adds	r3, #4
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d002      	beq.n	800d852 <ip4_input+0xba>
      netif = inp;
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	613b      	str	r3, [r7, #16]
 800d850:	e02a      	b.n	800d8a8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d852:	2300      	movs	r3, #0
 800d854:	613b      	str	r3, [r7, #16]
 800d856:	e027      	b.n	800d8a8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d858:	6838      	ldr	r0, [r7, #0]
 800d85a:	f7ff ff73 	bl	800d744 <ip4_input_accept>
 800d85e:	4603      	mov	r3, r0
 800d860:	2b00      	cmp	r3, #0
 800d862:	d002      	beq.n	800d86a <ip4_input+0xd2>
      netif = inp;
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	613b      	str	r3, [r7, #16]
 800d868:	e01e      	b.n	800d8a8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d86a:	2300      	movs	r3, #0
 800d86c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d86e:	4b5a      	ldr	r3, [pc, #360]	; (800d9d8 <ip4_input+0x240>)
 800d870:	695b      	ldr	r3, [r3, #20]
 800d872:	b2db      	uxtb	r3, r3
 800d874:	2b7f      	cmp	r3, #127	; 0x7f
 800d876:	d017      	beq.n	800d8a8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d878:	4b58      	ldr	r3, [pc, #352]	; (800d9dc <ip4_input+0x244>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	613b      	str	r3, [r7, #16]
 800d87e:	e00e      	b.n	800d89e <ip4_input+0x106>
          if (netif == inp) {
 800d880:	693a      	ldr	r2, [r7, #16]
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	429a      	cmp	r2, r3
 800d886:	d006      	beq.n	800d896 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d888:	6938      	ldr	r0, [r7, #16]
 800d88a:	f7ff ff5b 	bl	800d744 <ip4_input_accept>
 800d88e:	4603      	mov	r3, r0
 800d890:	2b00      	cmp	r3, #0
 800d892:	d108      	bne.n	800d8a6 <ip4_input+0x10e>
 800d894:	e000      	b.n	800d898 <ip4_input+0x100>
            continue;
 800d896:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	613b      	str	r3, [r7, #16]
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d1ed      	bne.n	800d880 <ip4_input+0xe8>
 800d8a4:	e000      	b.n	800d8a8 <ip4_input+0x110>
            break;
 800d8a6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d8a8:	4b4b      	ldr	r3, [pc, #300]	; (800d9d8 <ip4_input+0x240>)
 800d8aa:	691b      	ldr	r3, [r3, #16]
 800d8ac:	6839      	ldr	r1, [r7, #0]
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f000 f96e 	bl	800db90 <ip4_addr_isbroadcast_u32>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d105      	bne.n	800d8c6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d8ba:	4b47      	ldr	r3, [pc, #284]	; (800d9d8 <ip4_input+0x240>)
 800d8bc:	691b      	ldr	r3, [r3, #16]
 800d8be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d8c2:	2be0      	cmp	r3, #224	; 0xe0
 800d8c4:	d104      	bne.n	800d8d0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f7f8 ff04 	bl	80066d4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	e07e      	b.n	800d9ce <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d104      	bne.n	800d8e0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f7f8 fefc 	bl	80066d4 <pbuf_free>
    return ERR_OK;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	e076      	b.n	800d9ce <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	88db      	ldrh	r3, [r3, #6]
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d8ec:	4013      	ands	r3, r2
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d00b      	beq.n	800d90a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 fc92 	bl	800e21c <ip4_reass>
 800d8f8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d101      	bne.n	800d904 <ip4_input+0x16c>
      return ERR_OK;
 800d900:	2300      	movs	r3, #0
 800d902:	e064      	b.n	800d9ce <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d90a:	4a33      	ldr	r2, [pc, #204]	; (800d9d8 <ip4_input+0x240>)
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d910:	4a31      	ldr	r2, [pc, #196]	; (800d9d8 <ip4_input+0x240>)
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d916:	4a30      	ldr	r2, [pc, #192]	; (800d9d8 <ip4_input+0x240>)
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	f003 030f 	and.w	r3, r3, #15
 800d924:	b2db      	uxtb	r3, r3
 800d926:	009b      	lsls	r3, r3, #2
 800d928:	b2db      	uxtb	r3, r3
 800d92a:	b29a      	uxth	r2, r3
 800d92c:	4b2a      	ldr	r3, [pc, #168]	; (800d9d8 <ip4_input+0x240>)
 800d92e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d930:	89fb      	ldrh	r3, [r7, #14]
 800d932:	4619      	mov	r1, r3
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f7f8 fe47 	bl	80065c8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	7a5b      	ldrb	r3, [r3, #9]
 800d93e:	2b11      	cmp	r3, #17
 800d940:	d006      	beq.n	800d950 <ip4_input+0x1b8>
 800d942:	2b11      	cmp	r3, #17
 800d944:	dc13      	bgt.n	800d96e <ip4_input+0x1d6>
 800d946:	2b01      	cmp	r3, #1
 800d948:	d00c      	beq.n	800d964 <ip4_input+0x1cc>
 800d94a:	2b06      	cmp	r3, #6
 800d94c:	d005      	beq.n	800d95a <ip4_input+0x1c2>
 800d94e:	e00e      	b.n	800d96e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d950:	6839      	ldr	r1, [r7, #0]
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f7fe fc68 	bl	800c228 <udp_input>
        break;
 800d958:	e026      	b.n	800d9a8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d95a:	6839      	ldr	r1, [r7, #0]
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f7fa fce1 	bl	8008324 <tcp_input>
        break;
 800d962:	e021      	b.n	800d9a8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d964:	6839      	ldr	r1, [r7, #0]
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f7ff fcee 	bl	800d348 <icmp_input>
        break;
 800d96c:	e01c      	b.n	800d9a8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d96e:	4b1a      	ldr	r3, [pc, #104]	; (800d9d8 <ip4_input+0x240>)
 800d970:	695b      	ldr	r3, [r3, #20]
 800d972:	6939      	ldr	r1, [r7, #16]
 800d974:	4618      	mov	r0, r3
 800d976:	f000 f90b 	bl	800db90 <ip4_addr_isbroadcast_u32>
 800d97a:	4603      	mov	r3, r0
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d10f      	bne.n	800d9a0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d980:	4b15      	ldr	r3, [pc, #84]	; (800d9d8 <ip4_input+0x240>)
 800d982:	695b      	ldr	r3, [r3, #20]
 800d984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d988:	2be0      	cmp	r3, #224	; 0xe0
 800d98a:	d009      	beq.n	800d9a0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d98c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d990:	4619      	mov	r1, r3
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f7f8 fe8b 	bl	80066ae <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d998:	2102      	movs	r1, #2
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f7ff fdd8 	bl	800d550 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f7f8 fe97 	bl	80066d4 <pbuf_free>
        break;
 800d9a6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d9a8:	4b0b      	ldr	r3, [pc, #44]	; (800d9d8 <ip4_input+0x240>)
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d9ae:	4b0a      	ldr	r3, [pc, #40]	; (800d9d8 <ip4_input+0x240>)
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d9b4:	4b08      	ldr	r3, [pc, #32]	; (800d9d8 <ip4_input+0x240>)
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d9ba:	4b07      	ldr	r3, [pc, #28]	; (800d9d8 <ip4_input+0x240>)
 800d9bc:	2200      	movs	r2, #0
 800d9be:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d9c0:	4b05      	ldr	r3, [pc, #20]	; (800d9d8 <ip4_input+0x240>)
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d9c6:	4b04      	ldr	r3, [pc, #16]	; (800d9d8 <ip4_input+0x240>)
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d9cc:	2300      	movs	r3, #0
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3718      	adds	r7, #24
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	20004dcc 	.word	0x20004dcc
 800d9dc:	20008330 	.word	0x20008330

0800d9e0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b08a      	sub	sp, #40	; 0x28
 800d9e4:	af04      	add	r7, sp, #16
 800d9e6:	60f8      	str	r0, [r7, #12]
 800d9e8:	60b9      	str	r1, [r7, #8]
 800d9ea:	607a      	str	r2, [r7, #4]
 800d9ec:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d009      	beq.n	800da0c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d003      	beq.n	800da06 <ip4_output_if+0x26>
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d102      	bne.n	800da0c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800da06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da08:	3304      	adds	r3, #4
 800da0a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800da0c:	78fa      	ldrb	r2, [r7, #3]
 800da0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da10:	9302      	str	r3, [sp, #8]
 800da12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800da16:	9301      	str	r3, [sp, #4]
 800da18:	f897 3020 	ldrb.w	r3, [r7, #32]
 800da1c:	9300      	str	r3, [sp, #0]
 800da1e:	4613      	mov	r3, r2
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	6979      	ldr	r1, [r7, #20]
 800da24:	68f8      	ldr	r0, [r7, #12]
 800da26:	f000 f805 	bl	800da34 <ip4_output_if_src>
 800da2a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3718      	adds	r7, #24
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}

0800da34 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b088      	sub	sp, #32
 800da38:	af00      	add	r7, sp, #0
 800da3a:	60f8      	str	r0, [r7, #12]
 800da3c:	60b9      	str	r1, [r7, #8]
 800da3e:	607a      	str	r2, [r7, #4]
 800da40:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	7b9b      	ldrb	r3, [r3, #14]
 800da46:	2b01      	cmp	r3, #1
 800da48:	d006      	beq.n	800da58 <ip4_output_if_src+0x24>
 800da4a:	4b4b      	ldr	r3, [pc, #300]	; (800db78 <ip4_output_if_src+0x144>)
 800da4c:	f44f 7255 	mov.w	r2, #852	; 0x354
 800da50:	494a      	ldr	r1, [pc, #296]	; (800db7c <ip4_output_if_src+0x148>)
 800da52:	484b      	ldr	r0, [pc, #300]	; (800db80 <ip4_output_if_src+0x14c>)
 800da54:	f001 f856 	bl	800eb04 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d060      	beq.n	800db20 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800da5e:	2314      	movs	r3, #20
 800da60:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800da62:	2114      	movs	r1, #20
 800da64:	68f8      	ldr	r0, [r7, #12]
 800da66:	f7f8 fd9f 	bl	80065a8 <pbuf_add_header>
 800da6a:	4603      	mov	r3, r0
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d002      	beq.n	800da76 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800da70:	f06f 0301 	mvn.w	r3, #1
 800da74:	e07c      	b.n	800db70 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	685b      	ldr	r3, [r3, #4]
 800da7a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	895b      	ldrh	r3, [r3, #10]
 800da80:	2b13      	cmp	r3, #19
 800da82:	d806      	bhi.n	800da92 <ip4_output_if_src+0x5e>
 800da84:	4b3c      	ldr	r3, [pc, #240]	; (800db78 <ip4_output_if_src+0x144>)
 800da86:	f44f 7262 	mov.w	r2, #904	; 0x388
 800da8a:	493e      	ldr	r1, [pc, #248]	; (800db84 <ip4_output_if_src+0x150>)
 800da8c:	483c      	ldr	r0, [pc, #240]	; (800db80 <ip4_output_if_src+0x14c>)
 800da8e:	f001 f839 	bl	800eb04 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800da92:	69fb      	ldr	r3, [r7, #28]
 800da94:	78fa      	ldrb	r2, [r7, #3]
 800da96:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800da98:	69fb      	ldr	r3, [r7, #28]
 800da9a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800da9e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681a      	ldr	r2, [r3, #0]
 800daa4:	69fb      	ldr	r3, [r7, #28]
 800daa6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800daa8:	8b7b      	ldrh	r3, [r7, #26]
 800daaa:	089b      	lsrs	r3, r3, #2
 800daac:	b29b      	uxth	r3, r3
 800daae:	b2db      	uxtb	r3, r3
 800dab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dab4:	b2da      	uxtb	r2, r3
 800dab6:	69fb      	ldr	r3, [r7, #28]
 800dab8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800daba:	69fb      	ldr	r3, [r7, #28]
 800dabc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800dac0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	891b      	ldrh	r3, [r3, #8]
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7f7 faa6 	bl	8005018 <lwip_htons>
 800dacc:	4603      	mov	r3, r0
 800dace:	461a      	mov	r2, r3
 800dad0:	69fb      	ldr	r3, [r7, #28]
 800dad2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800dad4:	69fb      	ldr	r3, [r7, #28]
 800dad6:	2200      	movs	r2, #0
 800dad8:	719a      	strb	r2, [r3, #6]
 800dada:	2200      	movs	r2, #0
 800dadc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800dade:	4b2a      	ldr	r3, [pc, #168]	; (800db88 <ip4_output_if_src+0x154>)
 800dae0:	881b      	ldrh	r3, [r3, #0]
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7f7 fa98 	bl	8005018 <lwip_htons>
 800dae8:	4603      	mov	r3, r0
 800daea:	461a      	mov	r2, r3
 800daec:	69fb      	ldr	r3, [r7, #28]
 800daee:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800daf0:	4b25      	ldr	r3, [pc, #148]	; (800db88 <ip4_output_if_src+0x154>)
 800daf2:	881b      	ldrh	r3, [r3, #0]
 800daf4:	3301      	adds	r3, #1
 800daf6:	b29a      	uxth	r2, r3
 800daf8:	4b23      	ldr	r3, [pc, #140]	; (800db88 <ip4_output_if_src+0x154>)
 800dafa:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d104      	bne.n	800db0c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800db02:	4b22      	ldr	r3, [pc, #136]	; (800db8c <ip4_output_if_src+0x158>)
 800db04:	681a      	ldr	r2, [r3, #0]
 800db06:	69fb      	ldr	r3, [r7, #28]
 800db08:	60da      	str	r2, [r3, #12]
 800db0a:	e003      	b.n	800db14 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	681a      	ldr	r2, [r3, #0]
 800db10:	69fb      	ldr	r3, [r7, #28]
 800db12:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800db14:	69fb      	ldr	r3, [r7, #28]
 800db16:	2200      	movs	r2, #0
 800db18:	729a      	strb	r2, [r3, #10]
 800db1a:	2200      	movs	r2, #0
 800db1c:	72da      	strb	r2, [r3, #11]
 800db1e:	e00f      	b.n	800db40 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	895b      	ldrh	r3, [r3, #10]
 800db24:	2b13      	cmp	r3, #19
 800db26:	d802      	bhi.n	800db2e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800db28:	f06f 0301 	mvn.w	r3, #1
 800db2c:	e020      	b.n	800db70 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	691b      	ldr	r3, [r3, #16]
 800db38:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800db3a:	f107 0314 	add.w	r3, r7, #20
 800db3e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800db40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800db44:	2b00      	cmp	r3, #0
 800db46:	d00c      	beq.n	800db62 <ip4_output_if_src+0x12e>
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	891a      	ldrh	r2, [r3, #8]
 800db4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800db50:	429a      	cmp	r2, r3
 800db52:	d906      	bls.n	800db62 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800db58:	68f8      	ldr	r0, [r7, #12]
 800db5a:	f000 fd53 	bl	800e604 <ip4_frag>
 800db5e:	4603      	mov	r3, r0
 800db60:	e006      	b.n	800db70 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800db62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db64:	695b      	ldr	r3, [r3, #20]
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	68f9      	ldr	r1, [r7, #12]
 800db6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db6c:	4798      	blx	r3
 800db6e:	4603      	mov	r3, r0
}
 800db70:	4618      	mov	r0, r3
 800db72:	3720      	adds	r7, #32
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	080125d0 	.word	0x080125d0
 800db7c:	08012604 	.word	0x08012604
 800db80:	08012610 	.word	0x08012610
 800db84:	08012638 	.word	0x08012638
 800db88:	2000848e 	.word	0x2000848e
 800db8c:	08012a18 	.word	0x08012a18

0800db90 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800db90:	b480      	push	{r7}
 800db92:	b085      	sub	sp, #20
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dba4:	d002      	beq.n	800dbac <ip4_addr_isbroadcast_u32+0x1c>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d101      	bne.n	800dbb0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800dbac:	2301      	movs	r3, #1
 800dbae:	e02a      	b.n	800dc06 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dbb6:	f003 0302 	and.w	r3, r3, #2
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d101      	bne.n	800dbc2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	e021      	b.n	800dc06 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	3304      	adds	r3, #4
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	687a      	ldr	r2, [r7, #4]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d101      	bne.n	800dbd2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	e019      	b.n	800dc06 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800dbd2:	68fa      	ldr	r2, [r7, #12]
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	3304      	adds	r3, #4
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	405a      	eors	r2, r3
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	3308      	adds	r3, #8
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	4013      	ands	r3, r2
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d10d      	bne.n	800dc04 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	3308      	adds	r3, #8
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	43da      	mvns	r2, r3
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	3308      	adds	r3, #8
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	d101      	bne.n	800dc04 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800dc00:	2301      	movs	r3, #1
 800dc02:	e000      	b.n	800dc06 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800dc04:	2300      	movs	r3, #0
  }
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3714      	adds	r7, #20
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc10:	4770      	bx	lr
	...

0800dc14 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800dc1e:	4b12      	ldr	r3, [pc, #72]	; (800dc68 <ip_reass_tmr+0x54>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800dc24:	e018      	b.n	800dc58 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	7fdb      	ldrb	r3, [r3, #31]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d00b      	beq.n	800dc46 <ip_reass_tmr+0x32>
      r->timer--;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	7fdb      	ldrb	r3, [r3, #31]
 800dc32:	3b01      	subs	r3, #1
 800dc34:	b2da      	uxtb	r2, r3
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	60fb      	str	r3, [r7, #12]
 800dc44:	e008      	b.n	800dc58 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800dc50:	68b9      	ldr	r1, [r7, #8]
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f000 f80a 	bl	800dc6c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d1e3      	bne.n	800dc26 <ip_reass_tmr+0x12>
    }
  }
}
 800dc5e:	bf00      	nop
 800dc60:	bf00      	nop
 800dc62:	3710      	adds	r7, #16
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	20008490 	.word	0x20008490

0800dc6c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b088      	sub	sp, #32
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800dc76:	2300      	movs	r3, #0
 800dc78:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800dc7a:	683a      	ldr	r2, [r7, #0]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d105      	bne.n	800dc8e <ip_reass_free_complete_datagram+0x22>
 800dc82:	4b45      	ldr	r3, [pc, #276]	; (800dd98 <ip_reass_free_complete_datagram+0x12c>)
 800dc84:	22ab      	movs	r2, #171	; 0xab
 800dc86:	4945      	ldr	r1, [pc, #276]	; (800dd9c <ip_reass_free_complete_datagram+0x130>)
 800dc88:	4845      	ldr	r0, [pc, #276]	; (800dda0 <ip_reass_free_complete_datagram+0x134>)
 800dc8a:	f000 ff3b 	bl	800eb04 <iprintf>
  if (prev != NULL) {
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d00a      	beq.n	800dcaa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	687a      	ldr	r2, [r7, #4]
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d005      	beq.n	800dcaa <ip_reass_free_complete_datagram+0x3e>
 800dc9e:	4b3e      	ldr	r3, [pc, #248]	; (800dd98 <ip_reass_free_complete_datagram+0x12c>)
 800dca0:	22ad      	movs	r2, #173	; 0xad
 800dca2:	4940      	ldr	r1, [pc, #256]	; (800dda4 <ip_reass_free_complete_datagram+0x138>)
 800dca4:	483e      	ldr	r0, [pc, #248]	; (800dda0 <ip_reass_free_complete_datagram+0x134>)
 800dca6:	f000 ff2d 	bl	800eb04 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	889b      	ldrh	r3, [r3, #4]
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d12a      	bne.n	800dd12 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	681a      	ldr	r2, [r3, #0]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800dcca:	69bb      	ldr	r3, [r7, #24]
 800dccc:	6858      	ldr	r0, [r3, #4]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	3308      	adds	r3, #8
 800dcd2:	2214      	movs	r2, #20
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	f000 fee5 	bl	800eaa4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800dcda:	2101      	movs	r1, #1
 800dcdc:	69b8      	ldr	r0, [r7, #24]
 800dcde:	f7ff fc47 	bl	800d570 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800dce2:	69b8      	ldr	r0, [r7, #24]
 800dce4:	f7f8 fd7e 	bl	80067e4 <pbuf_clen>
 800dce8:	4603      	mov	r3, r0
 800dcea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800dcec:	8bfa      	ldrh	r2, [r7, #30]
 800dcee:	8a7b      	ldrh	r3, [r7, #18]
 800dcf0:	4413      	add	r3, r2
 800dcf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcf6:	db05      	blt.n	800dd04 <ip_reass_free_complete_datagram+0x98>
 800dcf8:	4b27      	ldr	r3, [pc, #156]	; (800dd98 <ip_reass_free_complete_datagram+0x12c>)
 800dcfa:	22bc      	movs	r2, #188	; 0xbc
 800dcfc:	492a      	ldr	r1, [pc, #168]	; (800dda8 <ip_reass_free_complete_datagram+0x13c>)
 800dcfe:	4828      	ldr	r0, [pc, #160]	; (800dda0 <ip_reass_free_complete_datagram+0x134>)
 800dd00:	f000 ff00 	bl	800eb04 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800dd04:	8bfa      	ldrh	r2, [r7, #30]
 800dd06:	8a7b      	ldrh	r3, [r7, #18]
 800dd08:	4413      	add	r3, r2
 800dd0a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800dd0c:	69b8      	ldr	r0, [r7, #24]
 800dd0e:	f7f8 fce1 	bl	80066d4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800dd18:	e01f      	b.n	800dd5a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800dd1a:	69bb      	ldr	r3, [r7, #24]
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800dd20:	69bb      	ldr	r3, [r7, #24]
 800dd22:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800dd2a:	68f8      	ldr	r0, [r7, #12]
 800dd2c:	f7f8 fd5a 	bl	80067e4 <pbuf_clen>
 800dd30:	4603      	mov	r3, r0
 800dd32:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800dd34:	8bfa      	ldrh	r2, [r7, #30]
 800dd36:	8a7b      	ldrh	r3, [r7, #18]
 800dd38:	4413      	add	r3, r2
 800dd3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd3e:	db05      	blt.n	800dd4c <ip_reass_free_complete_datagram+0xe0>
 800dd40:	4b15      	ldr	r3, [pc, #84]	; (800dd98 <ip_reass_free_complete_datagram+0x12c>)
 800dd42:	22cc      	movs	r2, #204	; 0xcc
 800dd44:	4918      	ldr	r1, [pc, #96]	; (800dda8 <ip_reass_free_complete_datagram+0x13c>)
 800dd46:	4816      	ldr	r0, [pc, #88]	; (800dda0 <ip_reass_free_complete_datagram+0x134>)
 800dd48:	f000 fedc 	bl	800eb04 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800dd4c:	8bfa      	ldrh	r2, [r7, #30]
 800dd4e:	8a7b      	ldrh	r3, [r7, #18]
 800dd50:	4413      	add	r3, r2
 800dd52:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800dd54:	68f8      	ldr	r0, [r7, #12]
 800dd56:	f7f8 fcbd 	bl	80066d4 <pbuf_free>
  while (p != NULL) {
 800dd5a:	69bb      	ldr	r3, [r7, #24]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d1dc      	bne.n	800dd1a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800dd60:	6839      	ldr	r1, [r7, #0]
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f000 f8c2 	bl	800deec <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800dd68:	4b10      	ldr	r3, [pc, #64]	; (800ddac <ip_reass_free_complete_datagram+0x140>)
 800dd6a:	881b      	ldrh	r3, [r3, #0]
 800dd6c:	8bfa      	ldrh	r2, [r7, #30]
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d905      	bls.n	800dd7e <ip_reass_free_complete_datagram+0x112>
 800dd72:	4b09      	ldr	r3, [pc, #36]	; (800dd98 <ip_reass_free_complete_datagram+0x12c>)
 800dd74:	22d2      	movs	r2, #210	; 0xd2
 800dd76:	490e      	ldr	r1, [pc, #56]	; (800ddb0 <ip_reass_free_complete_datagram+0x144>)
 800dd78:	4809      	ldr	r0, [pc, #36]	; (800dda0 <ip_reass_free_complete_datagram+0x134>)
 800dd7a:	f000 fec3 	bl	800eb04 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800dd7e:	4b0b      	ldr	r3, [pc, #44]	; (800ddac <ip_reass_free_complete_datagram+0x140>)
 800dd80:	881a      	ldrh	r2, [r3, #0]
 800dd82:	8bfb      	ldrh	r3, [r7, #30]
 800dd84:	1ad3      	subs	r3, r2, r3
 800dd86:	b29a      	uxth	r2, r3
 800dd88:	4b08      	ldr	r3, [pc, #32]	; (800ddac <ip_reass_free_complete_datagram+0x140>)
 800dd8a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800dd8c:	8bfb      	ldrh	r3, [r7, #30]
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3720      	adds	r7, #32
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	08012668 	.word	0x08012668
 800dd9c:	080126a4 	.word	0x080126a4
 800dda0:	080126b0 	.word	0x080126b0
 800dda4:	080126d8 	.word	0x080126d8
 800dda8:	080126ec 	.word	0x080126ec
 800ddac:	20008494 	.word	0x20008494
 800ddb0:	0801270c 	.word	0x0801270c

0800ddb4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b08a      	sub	sp, #40	; 0x28
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ddd2:	4b28      	ldr	r3, [pc, #160]	; (800de74 <ip_reass_remove_oldest_datagram+0xc0>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ddd8:	e030      	b.n	800de3c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ddda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dddc:	695a      	ldr	r2, [r3, #20]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	68db      	ldr	r3, [r3, #12]
 800dde2:	429a      	cmp	r2, r3
 800dde4:	d10c      	bne.n	800de00 <ip_reass_remove_oldest_datagram+0x4c>
 800dde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde8:	699a      	ldr	r2, [r3, #24]
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	691b      	ldr	r3, [r3, #16]
 800ddee:	429a      	cmp	r2, r3
 800ddf0:	d106      	bne.n	800de00 <ip_reass_remove_oldest_datagram+0x4c>
 800ddf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf4:	899a      	ldrh	r2, [r3, #12]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	889b      	ldrh	r3, [r3, #4]
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d014      	beq.n	800de2a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	3301      	adds	r3, #1
 800de04:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800de06:	6a3b      	ldr	r3, [r7, #32]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d104      	bne.n	800de16 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800de0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800de10:	69fb      	ldr	r3, [r7, #28]
 800de12:	61bb      	str	r3, [r7, #24]
 800de14:	e009      	b.n	800de2a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800de16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de18:	7fda      	ldrb	r2, [r3, #31]
 800de1a:	6a3b      	ldr	r3, [r7, #32]
 800de1c:	7fdb      	ldrb	r3, [r3, #31]
 800de1e:	429a      	cmp	r2, r3
 800de20:	d803      	bhi.n	800de2a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800de22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de24:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800de26:	69fb      	ldr	r3, [r7, #28]
 800de28:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800de2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d001      	beq.n	800de36 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800de32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de34:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800de36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800de3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d1cb      	bne.n	800ddda <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800de42:	6a3b      	ldr	r3, [r7, #32]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d008      	beq.n	800de5a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800de48:	69b9      	ldr	r1, [r7, #24]
 800de4a:	6a38      	ldr	r0, [r7, #32]
 800de4c:	f7ff ff0e 	bl	800dc6c <ip_reass_free_complete_datagram>
 800de50:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800de52:	697a      	ldr	r2, [r7, #20]
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	4413      	add	r3, r2
 800de58:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800de5a:	697a      	ldr	r2, [r7, #20]
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	429a      	cmp	r2, r3
 800de60:	da02      	bge.n	800de68 <ip_reass_remove_oldest_datagram+0xb4>
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	2b01      	cmp	r3, #1
 800de66:	dcac      	bgt.n	800ddc2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800de68:	697b      	ldr	r3, [r7, #20]
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3728      	adds	r7, #40	; 0x28
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	20008490 	.word	0x20008490

0800de78 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800de82:	2004      	movs	r0, #4
 800de84:	f7f7 fd40 	bl	8005908 <memp_malloc>
 800de88:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d110      	bne.n	800deb2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800de90:	6839      	ldr	r1, [r7, #0]
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f7ff ff8e 	bl	800ddb4 <ip_reass_remove_oldest_datagram>
 800de98:	4602      	mov	r2, r0
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	4293      	cmp	r3, r2
 800de9e:	dc03      	bgt.n	800dea8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dea0:	2004      	movs	r0, #4
 800dea2:	f7f7 fd31 	bl	8005908 <memp_malloc>
 800dea6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d101      	bne.n	800deb2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800deae:	2300      	movs	r3, #0
 800deb0:	e016      	b.n	800dee0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800deb2:	2220      	movs	r2, #32
 800deb4:	2100      	movs	r1, #0
 800deb6:	68f8      	ldr	r0, [r7, #12]
 800deb8:	f000 fe1c 	bl	800eaf4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	220f      	movs	r2, #15
 800dec0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800dec2:	4b09      	ldr	r3, [pc, #36]	; (800dee8 <ip_reass_enqueue_new_datagram+0x70>)
 800dec4:	681a      	ldr	r2, [r3, #0]
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800deca:	4a07      	ldr	r2, [pc, #28]	; (800dee8 <ip_reass_enqueue_new_datagram+0x70>)
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	3308      	adds	r3, #8
 800ded4:	2214      	movs	r2, #20
 800ded6:	6879      	ldr	r1, [r7, #4]
 800ded8:	4618      	mov	r0, r3
 800deda:	f000 fde3 	bl	800eaa4 <memcpy>
  return ipr;
 800dede:	68fb      	ldr	r3, [r7, #12]
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3710      	adds	r7, #16
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	20008490 	.word	0x20008490

0800deec <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b082      	sub	sp, #8
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800def6:	4b10      	ldr	r3, [pc, #64]	; (800df38 <ip_reass_dequeue_datagram+0x4c>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	687a      	ldr	r2, [r7, #4]
 800defc:	429a      	cmp	r2, r3
 800defe:	d104      	bne.n	800df0a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	4a0c      	ldr	r2, [pc, #48]	; (800df38 <ip_reass_dequeue_datagram+0x4c>)
 800df06:	6013      	str	r3, [r2, #0]
 800df08:	e00d      	b.n	800df26 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d106      	bne.n	800df1e <ip_reass_dequeue_datagram+0x32>
 800df10:	4b0a      	ldr	r3, [pc, #40]	; (800df3c <ip_reass_dequeue_datagram+0x50>)
 800df12:	f240 1245 	movw	r2, #325	; 0x145
 800df16:	490a      	ldr	r1, [pc, #40]	; (800df40 <ip_reass_dequeue_datagram+0x54>)
 800df18:	480a      	ldr	r0, [pc, #40]	; (800df44 <ip_reass_dequeue_datagram+0x58>)
 800df1a:	f000 fdf3 	bl	800eb04 <iprintf>
    prev->next = ipr->next;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681a      	ldr	r2, [r3, #0]
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800df26:	6879      	ldr	r1, [r7, #4]
 800df28:	2004      	movs	r0, #4
 800df2a:	f7f7 fd5d 	bl	80059e8 <memp_free>
}
 800df2e:	bf00      	nop
 800df30:	3708      	adds	r7, #8
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
 800df36:	bf00      	nop
 800df38:	20008490 	.word	0x20008490
 800df3c:	08012668 	.word	0x08012668
 800df40:	08012730 	.word	0x08012730
 800df44:	080126b0 	.word	0x080126b0

0800df48 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b08c      	sub	sp, #48	; 0x30
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	60f8      	str	r0, [r7, #12]
 800df50:	60b9      	str	r1, [r7, #8]
 800df52:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800df54:	2300      	movs	r3, #0
 800df56:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800df58:	2301      	movs	r3, #1
 800df5a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800df62:	69fb      	ldr	r3, [r7, #28]
 800df64:	885b      	ldrh	r3, [r3, #2]
 800df66:	b29b      	uxth	r3, r3
 800df68:	4618      	mov	r0, r3
 800df6a:	f7f7 f855 	bl	8005018 <lwip_htons>
 800df6e:	4603      	mov	r3, r0
 800df70:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800df72:	69fb      	ldr	r3, [r7, #28]
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	f003 030f 	and.w	r3, r3, #15
 800df7a:	b2db      	uxtb	r3, r3
 800df7c:	009b      	lsls	r3, r3, #2
 800df7e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800df80:	7e7b      	ldrb	r3, [r7, #25]
 800df82:	b29b      	uxth	r3, r3
 800df84:	8b7a      	ldrh	r2, [r7, #26]
 800df86:	429a      	cmp	r2, r3
 800df88:	d202      	bcs.n	800df90 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800df8a:	f04f 33ff 	mov.w	r3, #4294967295
 800df8e:	e135      	b.n	800e1fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800df90:	7e7b      	ldrb	r3, [r7, #25]
 800df92:	b29b      	uxth	r3, r3
 800df94:	8b7a      	ldrh	r2, [r7, #26]
 800df96:	1ad3      	subs	r3, r2, r3
 800df98:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800df9a:	69fb      	ldr	r3, [r7, #28]
 800df9c:	88db      	ldrh	r3, [r3, #6]
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7f7 f839 	bl	8005018 <lwip_htons>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	00db      	lsls	r3, r3, #3
 800dfb0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	685b      	ldr	r3, [r3, #4]
 800dfb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800dfb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfba:	2200      	movs	r2, #0
 800dfbc:	701a      	strb	r2, [r3, #0]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	705a      	strb	r2, [r3, #1]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	709a      	strb	r2, [r3, #2]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800dfca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfcc:	8afa      	ldrh	r2, [r7, #22]
 800dfce:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800dfd0:	8afa      	ldrh	r2, [r7, #22]
 800dfd2:	8b7b      	ldrh	r3, [r7, #26]
 800dfd4:	4413      	add	r3, r2
 800dfd6:	b29a      	uxth	r2, r3
 800dfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfda:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800dfdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfde:	88db      	ldrh	r3, [r3, #6]
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	8afa      	ldrh	r2, [r7, #22]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d902      	bls.n	800dfee <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dfe8:	f04f 33ff 	mov.w	r3, #4294967295
 800dfec:	e106      	b.n	800e1fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	627b      	str	r3, [r7, #36]	; 0x24
 800dff4:	e068      	b.n	800e0c8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800dff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800dffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dffe:	889b      	ldrh	r3, [r3, #4]
 800e000:	b29a      	uxth	r2, r3
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	889b      	ldrh	r3, [r3, #4]
 800e006:	b29b      	uxth	r3, r3
 800e008:	429a      	cmp	r2, r3
 800e00a:	d235      	bcs.n	800e078 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e00e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e010:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e014:	2b00      	cmp	r3, #0
 800e016:	d020      	beq.n	800e05a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01a:	889b      	ldrh	r3, [r3, #4]
 800e01c:	b29a      	uxth	r2, r3
 800e01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e020:	88db      	ldrh	r3, [r3, #6]
 800e022:	b29b      	uxth	r3, r3
 800e024:	429a      	cmp	r2, r3
 800e026:	d307      	bcc.n	800e038 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e02a:	88db      	ldrh	r3, [r3, #6]
 800e02c:	b29a      	uxth	r2, r3
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	889b      	ldrh	r3, [r3, #4]
 800e032:	b29b      	uxth	r3, r3
 800e034:	429a      	cmp	r2, r3
 800e036:	d902      	bls.n	800e03e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e038:	f04f 33ff 	mov.w	r3, #4294967295
 800e03c:	e0de      	b.n	800e1fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e040:	68ba      	ldr	r2, [r7, #8]
 800e042:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e046:	88db      	ldrh	r3, [r3, #6]
 800e048:	b29a      	uxth	r2, r3
 800e04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e04c:	889b      	ldrh	r3, [r3, #4]
 800e04e:	b29b      	uxth	r3, r3
 800e050:	429a      	cmp	r2, r3
 800e052:	d03d      	beq.n	800e0d0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e054:	2300      	movs	r3, #0
 800e056:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e058:	e03a      	b.n	800e0d0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e05c:	88db      	ldrh	r3, [r3, #6]
 800e05e:	b29a      	uxth	r2, r3
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	889b      	ldrh	r3, [r3, #4]
 800e064:	b29b      	uxth	r3, r3
 800e066:	429a      	cmp	r2, r3
 800e068:	d902      	bls.n	800e070 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e06a:	f04f 33ff 	mov.w	r3, #4294967295
 800e06e:	e0c5      	b.n	800e1fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	68ba      	ldr	r2, [r7, #8]
 800e074:	605a      	str	r2, [r3, #4]
      break;
 800e076:	e02b      	b.n	800e0d0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e07a:	889b      	ldrh	r3, [r3, #4]
 800e07c:	b29a      	uxth	r2, r3
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	889b      	ldrh	r3, [r3, #4]
 800e082:	b29b      	uxth	r3, r3
 800e084:	429a      	cmp	r2, r3
 800e086:	d102      	bne.n	800e08e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e088:	f04f 33ff 	mov.w	r3, #4294967295
 800e08c:	e0b6      	b.n	800e1fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e090:	889b      	ldrh	r3, [r3, #4]
 800e092:	b29a      	uxth	r2, r3
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	88db      	ldrh	r3, [r3, #6]
 800e098:	b29b      	uxth	r3, r3
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d202      	bcs.n	800e0a4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e09e:	f04f 33ff 	mov.w	r3, #4294967295
 800e0a2:	e0ab      	b.n	800e1fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d009      	beq.n	800e0be <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ac:	88db      	ldrh	r3, [r3, #6]
 800e0ae:	b29a      	uxth	r2, r3
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	889b      	ldrh	r3, [r3, #4]
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d001      	beq.n	800e0be <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d193      	bne.n	800dff6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e0ce:	e000      	b.n	800e0d2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e0d0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d12d      	bne.n	800e134 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d01c      	beq.n	800e118 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e0:	88db      	ldrh	r3, [r3, #6]
 800e0e2:	b29a      	uxth	r2, r3
 800e0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e6:	889b      	ldrh	r3, [r3, #4]
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d906      	bls.n	800e0fc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e0ee:	4b45      	ldr	r3, [pc, #276]	; (800e204 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e0f0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e0f4:	4944      	ldr	r1, [pc, #272]	; (800e208 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e0f6:	4845      	ldr	r0, [pc, #276]	; (800e20c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e0f8:	f000 fd04 	bl	800eb04 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0fe:	68ba      	ldr	r2, [r7, #8]
 800e100:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e104:	88db      	ldrh	r3, [r3, #6]
 800e106:	b29a      	uxth	r2, r3
 800e108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e10a:	889b      	ldrh	r3, [r3, #4]
 800e10c:	b29b      	uxth	r3, r3
 800e10e:	429a      	cmp	r2, r3
 800e110:	d010      	beq.n	800e134 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e112:	2300      	movs	r3, #0
 800e114:	623b      	str	r3, [r7, #32]
 800e116:	e00d      	b.n	800e134 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	685b      	ldr	r3, [r3, #4]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d006      	beq.n	800e12e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e120:	4b38      	ldr	r3, [pc, #224]	; (800e204 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e122:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e126:	493a      	ldr	r1, [pc, #232]	; (800e210 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e128:	4838      	ldr	r0, [pc, #224]	; (800e20c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e12a:	f000 fceb 	bl	800eb04 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	68ba      	ldr	r2, [r7, #8]
 800e132:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d105      	bne.n	800e146 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	7f9b      	ldrb	r3, [r3, #30]
 800e13e:	f003 0301 	and.w	r3, r3, #1
 800e142:	2b00      	cmp	r3, #0
 800e144:	d059      	beq.n	800e1fa <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e146:	6a3b      	ldr	r3, [r7, #32]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d04f      	beq.n	800e1ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d006      	beq.n	800e162 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	685b      	ldr	r3, [r3, #4]
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	889b      	ldrh	r3, [r3, #4]
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d002      	beq.n	800e168 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e162:	2300      	movs	r3, #0
 800e164:	623b      	str	r3, [r7, #32]
 800e166:	e041      	b.n	800e1ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e16a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e172:	e012      	b.n	800e19a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17c:	88db      	ldrh	r3, [r3, #6]
 800e17e:	b29a      	uxth	r2, r3
 800e180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e182:	889b      	ldrh	r3, [r3, #4]
 800e184:	b29b      	uxth	r3, r3
 800e186:	429a      	cmp	r2, r3
 800e188:	d002      	beq.n	800e190 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e18a:	2300      	movs	r3, #0
 800e18c:	623b      	str	r3, [r7, #32]
            break;
 800e18e:	e007      	b.n	800e1a0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e192:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d1e9      	bne.n	800e174 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e1a0:	6a3b      	ldr	r3, [r7, #32]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d022      	beq.n	800e1ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	685b      	ldr	r3, [r3, #4]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d106      	bne.n	800e1bc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e1ae:	4b15      	ldr	r3, [pc, #84]	; (800e204 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e1b0:	f240 12df 	movw	r2, #479	; 0x1df
 800e1b4:	4917      	ldr	r1, [pc, #92]	; (800e214 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e1b6:	4815      	ldr	r0, [pc, #84]	; (800e20c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e1b8:	f000 fca4 	bl	800eb04 <iprintf>
          LWIP_ASSERT("sanity check",
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	685b      	ldr	r3, [r3, #4]
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d106      	bne.n	800e1d6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e1c8:	4b0e      	ldr	r3, [pc, #56]	; (800e204 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e1ca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e1ce:	4911      	ldr	r1, [pc, #68]	; (800e214 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e1d0:	480e      	ldr	r0, [pc, #56]	; (800e20c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e1d2:	f000 fc97 	bl	800eb04 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d006      	beq.n	800e1ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e1de:	4b09      	ldr	r3, [pc, #36]	; (800e204 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e1e0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e1e4:	490c      	ldr	r1, [pc, #48]	; (800e218 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e1e6:	4809      	ldr	r0, [pc, #36]	; (800e20c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e1e8:	f000 fc8c 	bl	800eb04 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e1ec:	6a3b      	ldr	r3, [r7, #32]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	bf14      	ite	ne
 800e1f2:	2301      	movne	r3, #1
 800e1f4:	2300      	moveq	r3, #0
 800e1f6:	b2db      	uxtb	r3, r3
 800e1f8:	e000      	b.n	800e1fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e1fa:	2300      	movs	r3, #0
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3730      	adds	r7, #48	; 0x30
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}
 800e204:	08012668 	.word	0x08012668
 800e208:	0801274c 	.word	0x0801274c
 800e20c:	080126b0 	.word	0x080126b0
 800e210:	0801276c 	.word	0x0801276c
 800e214:	080127a4 	.word	0x080127a4
 800e218:	080127b4 	.word	0x080127b4

0800e21c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b08e      	sub	sp, #56	; 0x38
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	f003 030f 	and.w	r3, r3, #15
 800e232:	b2db      	uxtb	r3, r3
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	b2db      	uxtb	r3, r3
 800e238:	2b14      	cmp	r3, #20
 800e23a:	f040 8171 	bne.w	800e520 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e240:	88db      	ldrh	r3, [r3, #6]
 800e242:	b29b      	uxth	r3, r3
 800e244:	4618      	mov	r0, r3
 800e246:	f7f6 fee7 	bl	8005018 <lwip_htons>
 800e24a:	4603      	mov	r3, r0
 800e24c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e250:	b29b      	uxth	r3, r3
 800e252:	00db      	lsls	r3, r3, #3
 800e254:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e258:	885b      	ldrh	r3, [r3, #2]
 800e25a:	b29b      	uxth	r3, r3
 800e25c:	4618      	mov	r0, r3
 800e25e:	f7f6 fedb 	bl	8005018 <lwip_htons>
 800e262:	4603      	mov	r3, r0
 800e264:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e268:	781b      	ldrb	r3, [r3, #0]
 800e26a:	f003 030f 	and.w	r3, r3, #15
 800e26e:	b2db      	uxtb	r3, r3
 800e270:	009b      	lsls	r3, r3, #2
 800e272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e276:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e27e:	429a      	cmp	r2, r3
 800e280:	f0c0 8150 	bcc.w	800e524 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e284:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e288:	b29b      	uxth	r3, r3
 800e28a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e28c:	1ad3      	subs	r3, r2, r3
 800e28e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f7f8 faa7 	bl	80067e4 <pbuf_clen>
 800e296:	4603      	mov	r3, r0
 800e298:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e29a:	4b8c      	ldr	r3, [pc, #560]	; (800e4cc <ip4_reass+0x2b0>)
 800e29c:	881b      	ldrh	r3, [r3, #0]
 800e29e:	461a      	mov	r2, r3
 800e2a0:	8c3b      	ldrh	r3, [r7, #32]
 800e2a2:	4413      	add	r3, r2
 800e2a4:	2b0a      	cmp	r3, #10
 800e2a6:	dd10      	ble.n	800e2ca <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e2a8:	8c3b      	ldrh	r3, [r7, #32]
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2ae:	f7ff fd81 	bl	800ddb4 <ip_reass_remove_oldest_datagram>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	f000 8137 	beq.w	800e528 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e2ba:	4b84      	ldr	r3, [pc, #528]	; (800e4cc <ip4_reass+0x2b0>)
 800e2bc:	881b      	ldrh	r3, [r3, #0]
 800e2be:	461a      	mov	r2, r3
 800e2c0:	8c3b      	ldrh	r3, [r7, #32]
 800e2c2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e2c4:	2b0a      	cmp	r3, #10
 800e2c6:	f300 812f 	bgt.w	800e528 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e2ca:	4b81      	ldr	r3, [pc, #516]	; (800e4d0 <ip4_reass+0x2b4>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	633b      	str	r3, [r7, #48]	; 0x30
 800e2d0:	e015      	b.n	800e2fe <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d4:	695a      	ldr	r2, [r3, #20]
 800e2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d8:	68db      	ldr	r3, [r3, #12]
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d10c      	bne.n	800e2f8 <ip4_reass+0xdc>
 800e2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e0:	699a      	ldr	r2, [r3, #24]
 800e2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e4:	691b      	ldr	r3, [r3, #16]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d106      	bne.n	800e2f8 <ip4_reass+0xdc>
 800e2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ec:	899a      	ldrh	r2, [r3, #12]
 800e2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f0:	889b      	ldrh	r3, [r3, #4]
 800e2f2:	b29b      	uxth	r3, r3
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d006      	beq.n	800e306 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	633b      	str	r3, [r7, #48]	; 0x30
 800e2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e300:	2b00      	cmp	r3, #0
 800e302:	d1e6      	bne.n	800e2d2 <ip4_reass+0xb6>
 800e304:	e000      	b.n	800e308 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e306:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d109      	bne.n	800e322 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e30e:	8c3b      	ldrh	r3, [r7, #32]
 800e310:	4619      	mov	r1, r3
 800e312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e314:	f7ff fdb0 	bl	800de78 <ip_reass_enqueue_new_datagram>
 800e318:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d11c      	bne.n	800e35a <ip4_reass+0x13e>
      goto nullreturn;
 800e320:	e105      	b.n	800e52e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e324:	88db      	ldrh	r3, [r3, #6]
 800e326:	b29b      	uxth	r3, r3
 800e328:	4618      	mov	r0, r3
 800e32a:	f7f6 fe75 	bl	8005018 <lwip_htons>
 800e32e:	4603      	mov	r3, r0
 800e330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e334:	2b00      	cmp	r3, #0
 800e336:	d110      	bne.n	800e35a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e33a:	89db      	ldrh	r3, [r3, #14]
 800e33c:	4618      	mov	r0, r3
 800e33e:	f7f6 fe6b 	bl	8005018 <lwip_htons>
 800e342:	4603      	mov	r3, r0
 800e344:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d006      	beq.n	800e35a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e34e:	3308      	adds	r3, #8
 800e350:	2214      	movs	r2, #20
 800e352:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e354:	4618      	mov	r0, r3
 800e356:	f000 fba5 	bl	800eaa4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35c:	88db      	ldrh	r3, [r3, #6]
 800e35e:	b29b      	uxth	r3, r3
 800e360:	f003 0320 	and.w	r3, r3, #32
 800e364:	2b00      	cmp	r3, #0
 800e366:	bf0c      	ite	eq
 800e368:	2301      	moveq	r3, #1
 800e36a:	2300      	movne	r3, #0
 800e36c:	b2db      	uxtb	r3, r3
 800e36e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e370:	69fb      	ldr	r3, [r7, #28]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d00e      	beq.n	800e394 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e376:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e378:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e37a:	4413      	add	r3, r2
 800e37c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e37e:	8b7a      	ldrh	r2, [r7, #26]
 800e380:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e382:	429a      	cmp	r2, r3
 800e384:	f0c0 80a0 	bcc.w	800e4c8 <ip4_reass+0x2ac>
 800e388:	8b7b      	ldrh	r3, [r7, #26]
 800e38a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e38e:	4293      	cmp	r3, r2
 800e390:	f200 809a 	bhi.w	800e4c8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e394:	69fa      	ldr	r2, [r7, #28]
 800e396:	6879      	ldr	r1, [r7, #4]
 800e398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e39a:	f7ff fdd5 	bl	800df48 <ip_reass_chain_frag_into_datagram_and_validate>
 800e39e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3a6:	f000 809b 	beq.w	800e4e0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e3aa:	4b48      	ldr	r3, [pc, #288]	; (800e4cc <ip4_reass+0x2b0>)
 800e3ac:	881a      	ldrh	r2, [r3, #0]
 800e3ae:	8c3b      	ldrh	r3, [r7, #32]
 800e3b0:	4413      	add	r3, r2
 800e3b2:	b29a      	uxth	r2, r3
 800e3b4:	4b45      	ldr	r3, [pc, #276]	; (800e4cc <ip4_reass+0x2b0>)
 800e3b6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d00d      	beq.n	800e3da <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e3be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e3c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3c2:	4413      	add	r3, r2
 800e3c4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c8:	8a7a      	ldrh	r2, [r7, #18]
 800e3ca:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ce:	7f9b      	ldrb	r3, [r3, #30]
 800e3d0:	f043 0301 	orr.w	r3, r3, #1
 800e3d4:	b2da      	uxtb	r2, r3
 800e3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3d8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	2b01      	cmp	r3, #1
 800e3de:	d171      	bne.n	800e4c4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3e2:	8b9b      	ldrh	r3, [r3, #28]
 800e3e4:	3314      	adds	r3, #20
 800e3e6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ea:	685b      	ldr	r3, [r3, #4]
 800e3ec:	685b      	ldr	r3, [r3, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f4:	685b      	ldr	r3, [r3, #4]
 800e3f6:	685b      	ldr	r3, [r3, #4]
 800e3f8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3fc:	3308      	adds	r3, #8
 800e3fe:	2214      	movs	r2, #20
 800e400:	4619      	mov	r1, r3
 800e402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e404:	f000 fb4e 	bl	800eaa4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e408:	8a3b      	ldrh	r3, [r7, #16]
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7f6 fe04 	bl	8005018 <lwip_htons>
 800e410:	4603      	mov	r3, r0
 800e412:	461a      	mov	r2, r3
 800e414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e416:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41a:	2200      	movs	r2, #0
 800e41c:	719a      	strb	r2, [r3, #6]
 800e41e:	2200      	movs	r2, #0
 800e420:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e424:	2200      	movs	r2, #0
 800e426:	729a      	strb	r2, [r3, #10]
 800e428:	2200      	movs	r2, #0
 800e42a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e432:	e00d      	b.n	800e450 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e43a:	2114      	movs	r1, #20
 800e43c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e43e:	f7f8 f8c3 	bl	80065c8 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e442:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f7f8 fa07 	bl	8006858 <pbuf_cat>
      r = iprh->next_pbuf;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e452:	2b00      	cmp	r3, #0
 800e454:	d1ee      	bne.n	800e434 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e456:	4b1e      	ldr	r3, [pc, #120]	; (800e4d0 <ip4_reass+0x2b4>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d102      	bne.n	800e466 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e460:	2300      	movs	r3, #0
 800e462:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e464:	e010      	b.n	800e488 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e466:	4b1a      	ldr	r3, [pc, #104]	; (800e4d0 <ip4_reass+0x2b4>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e46c:	e007      	b.n	800e47e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e474:	429a      	cmp	r2, r3
 800e476:	d006      	beq.n	800e486 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e480:	2b00      	cmp	r3, #0
 800e482:	d1f4      	bne.n	800e46e <ip4_reass+0x252>
 800e484:	e000      	b.n	800e488 <ip4_reass+0x26c>
          break;
 800e486:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e488:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e48a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e48c:	f7ff fd2e 	bl	800deec <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f7f8 f9a7 	bl	80067e4 <pbuf_clen>
 800e496:	4603      	mov	r3, r0
 800e498:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e49a:	4b0c      	ldr	r3, [pc, #48]	; (800e4cc <ip4_reass+0x2b0>)
 800e49c:	881b      	ldrh	r3, [r3, #0]
 800e49e:	8c3a      	ldrh	r2, [r7, #32]
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d906      	bls.n	800e4b2 <ip4_reass+0x296>
 800e4a4:	4b0b      	ldr	r3, [pc, #44]	; (800e4d4 <ip4_reass+0x2b8>)
 800e4a6:	f240 229b 	movw	r2, #667	; 0x29b
 800e4aa:	490b      	ldr	r1, [pc, #44]	; (800e4d8 <ip4_reass+0x2bc>)
 800e4ac:	480b      	ldr	r0, [pc, #44]	; (800e4dc <ip4_reass+0x2c0>)
 800e4ae:	f000 fb29 	bl	800eb04 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e4b2:	4b06      	ldr	r3, [pc, #24]	; (800e4cc <ip4_reass+0x2b0>)
 800e4b4:	881a      	ldrh	r2, [r3, #0]
 800e4b6:	8c3b      	ldrh	r3, [r7, #32]
 800e4b8:	1ad3      	subs	r3, r2, r3
 800e4ba:	b29a      	uxth	r2, r3
 800e4bc:	4b03      	ldr	r3, [pc, #12]	; (800e4cc <ip4_reass+0x2b0>)
 800e4be:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	e038      	b.n	800e536 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	e036      	b.n	800e536 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e4c8:	bf00      	nop
 800e4ca:	e00a      	b.n	800e4e2 <ip4_reass+0x2c6>
 800e4cc:	20008494 	.word	0x20008494
 800e4d0:	20008490 	.word	0x20008490
 800e4d4:	08012668 	.word	0x08012668
 800e4d8:	080127d8 	.word	0x080127d8
 800e4dc:	080126b0 	.word	0x080126b0
    goto nullreturn_ipr;
 800e4e0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d106      	bne.n	800e4f6 <ip4_reass+0x2da>
 800e4e8:	4b15      	ldr	r3, [pc, #84]	; (800e540 <ip4_reass+0x324>)
 800e4ea:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e4ee:	4915      	ldr	r1, [pc, #84]	; (800e544 <ip4_reass+0x328>)
 800e4f0:	4815      	ldr	r0, [pc, #84]	; (800e548 <ip4_reass+0x32c>)
 800e4f2:	f000 fb07 	bl	800eb04 <iprintf>
  if (ipr->p == NULL) {
 800e4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f8:	685b      	ldr	r3, [r3, #4]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d116      	bne.n	800e52c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e4fe:	4b13      	ldr	r3, [pc, #76]	; (800e54c <ip4_reass+0x330>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e504:	429a      	cmp	r2, r3
 800e506:	d006      	beq.n	800e516 <ip4_reass+0x2fa>
 800e508:	4b0d      	ldr	r3, [pc, #52]	; (800e540 <ip4_reass+0x324>)
 800e50a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e50e:	4910      	ldr	r1, [pc, #64]	; (800e550 <ip4_reass+0x334>)
 800e510:	480d      	ldr	r0, [pc, #52]	; (800e548 <ip4_reass+0x32c>)
 800e512:	f000 faf7 	bl	800eb04 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e516:	2100      	movs	r1, #0
 800e518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e51a:	f7ff fce7 	bl	800deec <ip_reass_dequeue_datagram>
 800e51e:	e006      	b.n	800e52e <ip4_reass+0x312>
    goto nullreturn;
 800e520:	bf00      	nop
 800e522:	e004      	b.n	800e52e <ip4_reass+0x312>
    goto nullreturn;
 800e524:	bf00      	nop
 800e526:	e002      	b.n	800e52e <ip4_reass+0x312>
      goto nullreturn;
 800e528:	bf00      	nop
 800e52a:	e000      	b.n	800e52e <ip4_reass+0x312>
  }

nullreturn:
 800e52c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f7f8 f8d0 	bl	80066d4 <pbuf_free>
  return NULL;
 800e534:	2300      	movs	r3, #0
}
 800e536:	4618      	mov	r0, r3
 800e538:	3738      	adds	r7, #56	; 0x38
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}
 800e53e:	bf00      	nop
 800e540:	08012668 	.word	0x08012668
 800e544:	080127f4 	.word	0x080127f4
 800e548:	080126b0 	.word	0x080126b0
 800e54c:	20008490 	.word	0x20008490
 800e550:	08012800 	.word	0x08012800

0800e554 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e558:	2005      	movs	r0, #5
 800e55a:	f7f7 f9d5 	bl	8005908 <memp_malloc>
 800e55e:	4603      	mov	r3, r0
}
 800e560:	4618      	mov	r0, r3
 800e562:	bd80      	pop	{r7, pc}

0800e564 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d106      	bne.n	800e580 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e572:	4b07      	ldr	r3, [pc, #28]	; (800e590 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e574:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e578:	4906      	ldr	r1, [pc, #24]	; (800e594 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e57a:	4807      	ldr	r0, [pc, #28]	; (800e598 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e57c:	f000 fac2 	bl	800eb04 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e580:	6879      	ldr	r1, [r7, #4]
 800e582:	2005      	movs	r0, #5
 800e584:	f7f7 fa30 	bl	80059e8 <memp_free>
}
 800e588:	bf00      	nop
 800e58a:	3708      	adds	r7, #8
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}
 800e590:	08012668 	.word	0x08012668
 800e594:	08012820 	.word	0x08012820
 800e598:	080126b0 	.word	0x080126b0

0800e59c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b084      	sub	sp, #16
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d106      	bne.n	800e5bc <ipfrag_free_pbuf_custom+0x20>
 800e5ae:	4b11      	ldr	r3, [pc, #68]	; (800e5f4 <ipfrag_free_pbuf_custom+0x58>)
 800e5b0:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e5b4:	4910      	ldr	r1, [pc, #64]	; (800e5f8 <ipfrag_free_pbuf_custom+0x5c>)
 800e5b6:	4811      	ldr	r0, [pc, #68]	; (800e5fc <ipfrag_free_pbuf_custom+0x60>)
 800e5b8:	f000 faa4 	bl	800eb04 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e5bc:	68fa      	ldr	r2, [r7, #12]
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d006      	beq.n	800e5d2 <ipfrag_free_pbuf_custom+0x36>
 800e5c4:	4b0b      	ldr	r3, [pc, #44]	; (800e5f4 <ipfrag_free_pbuf_custom+0x58>)
 800e5c6:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e5ca:	490d      	ldr	r1, [pc, #52]	; (800e600 <ipfrag_free_pbuf_custom+0x64>)
 800e5cc:	480b      	ldr	r0, [pc, #44]	; (800e5fc <ipfrag_free_pbuf_custom+0x60>)
 800e5ce:	f000 fa99 	bl	800eb04 <iprintf>
  if (pcr->original != NULL) {
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	695b      	ldr	r3, [r3, #20]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d004      	beq.n	800e5e4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	695b      	ldr	r3, [r3, #20]
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7f8 f878 	bl	80066d4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e5e4:	68f8      	ldr	r0, [r7, #12]
 800e5e6:	f7ff ffbd 	bl	800e564 <ip_frag_free_pbuf_custom_ref>
}
 800e5ea:	bf00      	nop
 800e5ec:	3710      	adds	r7, #16
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	08012668 	.word	0x08012668
 800e5f8:	0801282c 	.word	0x0801282c
 800e5fc:	080126b0 	.word	0x080126b0
 800e600:	08012838 	.word	0x08012838

0800e604 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b094      	sub	sp, #80	; 0x50
 800e608:	af02      	add	r7, sp, #8
 800e60a:	60f8      	str	r0, [r7, #12]
 800e60c:	60b9      	str	r1, [r7, #8]
 800e60e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e610:	2300      	movs	r3, #0
 800e612:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e61a:	3b14      	subs	r3, #20
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	da00      	bge.n	800e622 <ip4_frag+0x1e>
 800e620:	3307      	adds	r3, #7
 800e622:	10db      	asrs	r3, r3, #3
 800e624:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e626:	2314      	movs	r3, #20
 800e628:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e632:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e636:	781b      	ldrb	r3, [r3, #0]
 800e638:	f003 030f 	and.w	r3, r3, #15
 800e63c:	b2db      	uxtb	r3, r3
 800e63e:	009b      	lsls	r3, r3, #2
 800e640:	b2db      	uxtb	r3, r3
 800e642:	2b14      	cmp	r3, #20
 800e644:	d002      	beq.n	800e64c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e646:	f06f 0305 	mvn.w	r3, #5
 800e64a:	e110      	b.n	800e86e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	895b      	ldrh	r3, [r3, #10]
 800e650:	2b13      	cmp	r3, #19
 800e652:	d809      	bhi.n	800e668 <ip4_frag+0x64>
 800e654:	4b88      	ldr	r3, [pc, #544]	; (800e878 <ip4_frag+0x274>)
 800e656:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e65a:	4988      	ldr	r1, [pc, #544]	; (800e87c <ip4_frag+0x278>)
 800e65c:	4888      	ldr	r0, [pc, #544]	; (800e880 <ip4_frag+0x27c>)
 800e65e:	f000 fa51 	bl	800eb04 <iprintf>
 800e662:	f06f 0305 	mvn.w	r3, #5
 800e666:	e102      	b.n	800e86e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e66a:	88db      	ldrh	r3, [r3, #6]
 800e66c:	b29b      	uxth	r3, r3
 800e66e:	4618      	mov	r0, r3
 800e670:	f7f6 fcd2 	bl	8005018 <lwip_htons>
 800e674:	4603      	mov	r3, r0
 800e676:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e678:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e67a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e67e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e682:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e688:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	891b      	ldrh	r3, [r3, #8]
 800e68e:	3b14      	subs	r3, #20
 800e690:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e694:	e0e1      	b.n	800e85a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e696:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e698:	00db      	lsls	r3, r3, #3
 800e69a:	b29b      	uxth	r3, r3
 800e69c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e6a0:	4293      	cmp	r3, r2
 800e6a2:	bf28      	it	cs
 800e6a4:	4613      	movcs	r3, r2
 800e6a6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e6a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e6ac:	2114      	movs	r1, #20
 800e6ae:	200e      	movs	r0, #14
 800e6b0:	f7f7 fd2c 	bl	800610c <pbuf_alloc>
 800e6b4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	f000 80d5 	beq.w	800e868 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c0:	895b      	ldrh	r3, [r3, #10]
 800e6c2:	2b13      	cmp	r3, #19
 800e6c4:	d806      	bhi.n	800e6d4 <ip4_frag+0xd0>
 800e6c6:	4b6c      	ldr	r3, [pc, #432]	; (800e878 <ip4_frag+0x274>)
 800e6c8:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e6cc:	496d      	ldr	r1, [pc, #436]	; (800e884 <ip4_frag+0x280>)
 800e6ce:	486c      	ldr	r0, [pc, #432]	; (800e880 <ip4_frag+0x27c>)
 800e6d0:	f000 fa18 	bl	800eb04 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d6:	685b      	ldr	r3, [r3, #4]
 800e6d8:	2214      	movs	r2, #20
 800e6da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f000 f9e1 	bl	800eaa4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e4:	685b      	ldr	r3, [r3, #4]
 800e6e6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e6e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e6ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e6ee:	e064      	b.n	800e7ba <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	895a      	ldrh	r2, [r3, #10]
 800e6f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e6f6:	1ad3      	subs	r3, r2, r3
 800e6f8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	895b      	ldrh	r3, [r3, #10]
 800e6fe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e700:	429a      	cmp	r2, r3
 800e702:	d906      	bls.n	800e712 <ip4_frag+0x10e>
 800e704:	4b5c      	ldr	r3, [pc, #368]	; (800e878 <ip4_frag+0x274>)
 800e706:	f240 322d 	movw	r2, #813	; 0x32d
 800e70a:	495f      	ldr	r1, [pc, #380]	; (800e888 <ip4_frag+0x284>)
 800e70c:	485c      	ldr	r0, [pc, #368]	; (800e880 <ip4_frag+0x27c>)
 800e70e:	f000 f9f9 	bl	800eb04 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e712:	8bfa      	ldrh	r2, [r7, #30]
 800e714:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e718:	4293      	cmp	r3, r2
 800e71a:	bf28      	it	cs
 800e71c:	4613      	movcs	r3, r2
 800e71e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e722:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e726:	2b00      	cmp	r3, #0
 800e728:	d105      	bne.n	800e736 <ip4_frag+0x132>
        poff = 0;
 800e72a:	2300      	movs	r3, #0
 800e72c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	60fb      	str	r3, [r7, #12]
        continue;
 800e734:	e041      	b.n	800e7ba <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e736:	f7ff ff0d 	bl	800e554 <ip_frag_alloc_pbuf_custom_ref>
 800e73a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e73c:	69bb      	ldr	r3, [r7, #24]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d103      	bne.n	800e74a <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e742:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e744:	f7f7 ffc6 	bl	80066d4 <pbuf_free>
        goto memerr;
 800e748:	e08f      	b.n	800e86a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e74a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e750:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e752:	4413      	add	r3, r2
 800e754:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e758:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e75c:	9201      	str	r2, [sp, #4]
 800e75e:	9300      	str	r3, [sp, #0]
 800e760:	4603      	mov	r3, r0
 800e762:	2241      	movs	r2, #65	; 0x41
 800e764:	2000      	movs	r0, #0
 800e766:	f7f7 fdfb 	bl	8006360 <pbuf_alloced_custom>
 800e76a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d106      	bne.n	800e780 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e772:	69b8      	ldr	r0, [r7, #24]
 800e774:	f7ff fef6 	bl	800e564 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e778:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e77a:	f7f7 ffab 	bl	80066d4 <pbuf_free>
        goto memerr;
 800e77e:	e074      	b.n	800e86a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e780:	68f8      	ldr	r0, [r7, #12]
 800e782:	f7f8 f847 	bl	8006814 <pbuf_ref>
      pcr->original = p;
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	68fa      	ldr	r2, [r7, #12]
 800e78a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e78c:	69bb      	ldr	r3, [r7, #24]
 800e78e:	4a3f      	ldr	r2, [pc, #252]	; (800e88c <ip4_frag+0x288>)
 800e790:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e792:	6979      	ldr	r1, [r7, #20]
 800e794:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e796:	f7f8 f85f 	bl	8006858 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e79a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e79e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e7a2:	1ad3      	subs	r3, r2, r3
 800e7a4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e7a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d004      	beq.n	800e7ba <ip4_frag+0x1b6>
        poff = 0;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e7ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d196      	bne.n	800e6f0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e7c2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e7c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e7c8:	4413      	add	r3, r2
 800e7ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e7d0:	f1a3 0213 	sub.w	r2, r3, #19
 800e7d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	bfcc      	ite	gt
 800e7dc:	2301      	movgt	r3, #1
 800e7de:	2300      	movle	r3, #0
 800e7e0:	b2db      	uxtb	r3, r3
 800e7e2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e7e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e7e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e7ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e7ee:	6a3b      	ldr	r3, [r7, #32]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d002      	beq.n	800e7fa <ip4_frag+0x1f6>
 800e7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d003      	beq.n	800e802 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e7fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e7fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e800:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e802:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e804:	4618      	mov	r0, r3
 800e806:	f7f6 fc07 	bl	8005018 <lwip_htons>
 800e80a:	4603      	mov	r3, r0
 800e80c:	461a      	mov	r2, r3
 800e80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e810:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e812:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e814:	3314      	adds	r3, #20
 800e816:	b29b      	uxth	r3, r3
 800e818:	4618      	mov	r0, r3
 800e81a:	f7f6 fbfd 	bl	8005018 <lwip_htons>
 800e81e:	4603      	mov	r3, r0
 800e820:	461a      	mov	r2, r3
 800e822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e824:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e828:	2200      	movs	r2, #0
 800e82a:	729a      	strb	r2, [r3, #10]
 800e82c:	2200      	movs	r2, #0
 800e82e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	695b      	ldr	r3, [r3, #20]
 800e834:	687a      	ldr	r2, [r7, #4]
 800e836:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e838:	68b8      	ldr	r0, [r7, #8]
 800e83a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e83c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e83e:	f7f7 ff49 	bl	80066d4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e842:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e846:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e848:	1ad3      	subs	r3, r2, r3
 800e84a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e84e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e852:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e854:	4413      	add	r3, r2
 800e856:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e85a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e85e:	2b00      	cmp	r3, #0
 800e860:	f47f af19 	bne.w	800e696 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e864:	2300      	movs	r3, #0
 800e866:	e002      	b.n	800e86e <ip4_frag+0x26a>
      goto memerr;
 800e868:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e86a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3748      	adds	r7, #72	; 0x48
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}
 800e876:	bf00      	nop
 800e878:	08012668 	.word	0x08012668
 800e87c:	08012844 	.word	0x08012844
 800e880:	080126b0 	.word	0x080126b0
 800e884:	08012860 	.word	0x08012860
 800e888:	08012880 	.word	0x08012880
 800e88c:	0800e59d 	.word	0x0800e59d

0800e890 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b086      	sub	sp, #24
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e89a:	230e      	movs	r3, #14
 800e89c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	895b      	ldrh	r3, [r3, #10]
 800e8a2:	2b0e      	cmp	r3, #14
 800e8a4:	d96e      	bls.n	800e984 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	7bdb      	ldrb	r3, [r3, #15]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d106      	bne.n	800e8bc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e8b4:	3301      	adds	r3, #1
 800e8b6:	b2da      	uxtb	r2, r3
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	685b      	ldr	r3, [r3, #4]
 800e8c0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e8c2:	693b      	ldr	r3, [r7, #16]
 800e8c4:	7b1a      	ldrb	r2, [r3, #12]
 800e8c6:	7b5b      	ldrb	r3, [r3, #13]
 800e8c8:	021b      	lsls	r3, r3, #8
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	f003 0301 	and.w	r3, r3, #1
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d023      	beq.n	800e922 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	2b01      	cmp	r3, #1
 800e8e0:	d10f      	bne.n	800e902 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	785b      	ldrb	r3, [r3, #1]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d11b      	bne.n	800e922 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e8ee:	2b5e      	cmp	r3, #94	; 0x5e
 800e8f0:	d117      	bne.n	800e922 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	7b5b      	ldrb	r3, [r3, #13]
 800e8f6:	f043 0310 	orr.w	r3, r3, #16
 800e8fa:	b2da      	uxtb	r2, r3
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	735a      	strb	r2, [r3, #13]
 800e900:	e00f      	b.n	800e922 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	2206      	movs	r2, #6
 800e906:	4928      	ldr	r1, [pc, #160]	; (800e9a8 <ethernet_input+0x118>)
 800e908:	4618      	mov	r0, r3
 800e90a:	f000 f8bb 	bl	800ea84 <memcmp>
 800e90e:	4603      	mov	r3, r0
 800e910:	2b00      	cmp	r3, #0
 800e912:	d106      	bne.n	800e922 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	7b5b      	ldrb	r3, [r3, #13]
 800e918:	f043 0308 	orr.w	r3, r3, #8
 800e91c:	b2da      	uxtb	r2, r3
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e922:	89fb      	ldrh	r3, [r7, #14]
 800e924:	2b08      	cmp	r3, #8
 800e926:	d003      	beq.n	800e930 <ethernet_input+0xa0>
 800e928:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e92c:	d014      	beq.n	800e958 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e92e:	e032      	b.n	800e996 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e936:	f003 0308 	and.w	r3, r3, #8
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d024      	beq.n	800e988 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e93e:	8afb      	ldrh	r3, [r7, #22]
 800e940:	4619      	mov	r1, r3
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f7f7 fe40 	bl	80065c8 <pbuf_remove_header>
 800e948:	4603      	mov	r3, r0
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d11e      	bne.n	800e98c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e94e:	6839      	ldr	r1, [r7, #0]
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f7fe ff21 	bl	800d798 <ip4_input>
      break;
 800e956:	e013      	b.n	800e980 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e95e:	f003 0308 	and.w	r3, r3, #8
 800e962:	2b00      	cmp	r3, #0
 800e964:	d014      	beq.n	800e990 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e966:	8afb      	ldrh	r3, [r7, #22]
 800e968:	4619      	mov	r1, r3
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f7f7 fe2c 	bl	80065c8 <pbuf_remove_header>
 800e970:	4603      	mov	r3, r0
 800e972:	2b00      	cmp	r3, #0
 800e974:	d10e      	bne.n	800e994 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e976:	6839      	ldr	r1, [r7, #0]
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f7fe f8c1 	bl	800cb00 <etharp_input>
      break;
 800e97e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e980:	2300      	movs	r3, #0
 800e982:	e00c      	b.n	800e99e <ethernet_input+0x10e>
    goto free_and_return;
 800e984:	bf00      	nop
 800e986:	e006      	b.n	800e996 <ethernet_input+0x106>
        goto free_and_return;
 800e988:	bf00      	nop
 800e98a:	e004      	b.n	800e996 <ethernet_input+0x106>
        goto free_and_return;
 800e98c:	bf00      	nop
 800e98e:	e002      	b.n	800e996 <ethernet_input+0x106>
        goto free_and_return;
 800e990:	bf00      	nop
 800e992:	e000      	b.n	800e996 <ethernet_input+0x106>
        goto free_and_return;
 800e994:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f7f7 fe9c 	bl	80066d4 <pbuf_free>
  return ERR_OK;
 800e99c:	2300      	movs	r3, #0
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3718      	adds	r7, #24
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	08012a1c 	.word	0x08012a1c

0800e9ac <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b086      	sub	sp, #24
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	60f8      	str	r0, [r7, #12]
 800e9b4:	60b9      	str	r1, [r7, #8]
 800e9b6:	607a      	str	r2, [r7, #4]
 800e9b8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e9ba:	8c3b      	ldrh	r3, [r7, #32]
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f7f6 fb2b 	bl	8005018 <lwip_htons>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e9c6:	210e      	movs	r1, #14
 800e9c8:	68b8      	ldr	r0, [r7, #8]
 800e9ca:	f7f7 fded 	bl	80065a8 <pbuf_add_header>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d125      	bne.n	800ea20 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	8afa      	ldrh	r2, [r7, #22]
 800e9de:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	2206      	movs	r2, #6
 800e9e4:	6839      	ldr	r1, [r7, #0]
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f000 f85c 	bl	800eaa4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e9ec:	693b      	ldr	r3, [r7, #16]
 800e9ee:	3306      	adds	r3, #6
 800e9f0:	2206      	movs	r2, #6
 800e9f2:	6879      	ldr	r1, [r7, #4]
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f000 f855 	bl	800eaa4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ea00:	2b06      	cmp	r3, #6
 800ea02:	d006      	beq.n	800ea12 <ethernet_output+0x66>
 800ea04:	4b0a      	ldr	r3, [pc, #40]	; (800ea30 <ethernet_output+0x84>)
 800ea06:	f44f 7299 	mov.w	r2, #306	; 0x132
 800ea0a:	490a      	ldr	r1, [pc, #40]	; (800ea34 <ethernet_output+0x88>)
 800ea0c:	480a      	ldr	r0, [pc, #40]	; (800ea38 <ethernet_output+0x8c>)
 800ea0e:	f000 f879 	bl	800eb04 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	699b      	ldr	r3, [r3, #24]
 800ea16:	68b9      	ldr	r1, [r7, #8]
 800ea18:	68f8      	ldr	r0, [r7, #12]
 800ea1a:	4798      	blx	r3
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	e002      	b.n	800ea26 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800ea20:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800ea22:	f06f 0301 	mvn.w	r3, #1
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3718      	adds	r7, #24
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	08012890 	.word	0x08012890
 800ea34:	080128c8 	.word	0x080128c8
 800ea38:	080128fc 	.word	0x080128fc

0800ea3c <__libc_init_array>:
 800ea3c:	b570      	push	{r4, r5, r6, lr}
 800ea3e:	4d0d      	ldr	r5, [pc, #52]	; (800ea74 <__libc_init_array+0x38>)
 800ea40:	4c0d      	ldr	r4, [pc, #52]	; (800ea78 <__libc_init_array+0x3c>)
 800ea42:	1b64      	subs	r4, r4, r5
 800ea44:	10a4      	asrs	r4, r4, #2
 800ea46:	2600      	movs	r6, #0
 800ea48:	42a6      	cmp	r6, r4
 800ea4a:	d109      	bne.n	800ea60 <__libc_init_array+0x24>
 800ea4c:	4d0b      	ldr	r5, [pc, #44]	; (800ea7c <__libc_init_array+0x40>)
 800ea4e:	4c0c      	ldr	r4, [pc, #48]	; (800ea80 <__libc_init_array+0x44>)
 800ea50:	f001 fa5c 	bl	800ff0c <_init>
 800ea54:	1b64      	subs	r4, r4, r5
 800ea56:	10a4      	asrs	r4, r4, #2
 800ea58:	2600      	movs	r6, #0
 800ea5a:	42a6      	cmp	r6, r4
 800ea5c:	d105      	bne.n	800ea6a <__libc_init_array+0x2e>
 800ea5e:	bd70      	pop	{r4, r5, r6, pc}
 800ea60:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea64:	4798      	blx	r3
 800ea66:	3601      	adds	r6, #1
 800ea68:	e7ee      	b.n	800ea48 <__libc_init_array+0xc>
 800ea6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea6e:	4798      	blx	r3
 800ea70:	3601      	adds	r6, #1
 800ea72:	e7f2      	b.n	800ea5a <__libc_init_array+0x1e>
 800ea74:	08012b7c 	.word	0x08012b7c
 800ea78:	08012b7c 	.word	0x08012b7c
 800ea7c:	08012b7c 	.word	0x08012b7c
 800ea80:	08012b80 	.word	0x08012b80

0800ea84 <memcmp>:
 800ea84:	b510      	push	{r4, lr}
 800ea86:	3901      	subs	r1, #1
 800ea88:	4402      	add	r2, r0
 800ea8a:	4290      	cmp	r0, r2
 800ea8c:	d101      	bne.n	800ea92 <memcmp+0xe>
 800ea8e:	2000      	movs	r0, #0
 800ea90:	e005      	b.n	800ea9e <memcmp+0x1a>
 800ea92:	7803      	ldrb	r3, [r0, #0]
 800ea94:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ea98:	42a3      	cmp	r3, r4
 800ea9a:	d001      	beq.n	800eaa0 <memcmp+0x1c>
 800ea9c:	1b18      	subs	r0, r3, r4
 800ea9e:	bd10      	pop	{r4, pc}
 800eaa0:	3001      	adds	r0, #1
 800eaa2:	e7f2      	b.n	800ea8a <memcmp+0x6>

0800eaa4 <memcpy>:
 800eaa4:	440a      	add	r2, r1
 800eaa6:	4291      	cmp	r1, r2
 800eaa8:	f100 33ff 	add.w	r3, r0, #4294967295
 800eaac:	d100      	bne.n	800eab0 <memcpy+0xc>
 800eaae:	4770      	bx	lr
 800eab0:	b510      	push	{r4, lr}
 800eab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eaba:	4291      	cmp	r1, r2
 800eabc:	d1f9      	bne.n	800eab2 <memcpy+0xe>
 800eabe:	bd10      	pop	{r4, pc}

0800eac0 <memmove>:
 800eac0:	4288      	cmp	r0, r1
 800eac2:	b510      	push	{r4, lr}
 800eac4:	eb01 0402 	add.w	r4, r1, r2
 800eac8:	d902      	bls.n	800ead0 <memmove+0x10>
 800eaca:	4284      	cmp	r4, r0
 800eacc:	4623      	mov	r3, r4
 800eace:	d807      	bhi.n	800eae0 <memmove+0x20>
 800ead0:	1e43      	subs	r3, r0, #1
 800ead2:	42a1      	cmp	r1, r4
 800ead4:	d008      	beq.n	800eae8 <memmove+0x28>
 800ead6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eada:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eade:	e7f8      	b.n	800ead2 <memmove+0x12>
 800eae0:	4402      	add	r2, r0
 800eae2:	4601      	mov	r1, r0
 800eae4:	428a      	cmp	r2, r1
 800eae6:	d100      	bne.n	800eaea <memmove+0x2a>
 800eae8:	bd10      	pop	{r4, pc}
 800eaea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eaee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eaf2:	e7f7      	b.n	800eae4 <memmove+0x24>

0800eaf4 <memset>:
 800eaf4:	4402      	add	r2, r0
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	4293      	cmp	r3, r2
 800eafa:	d100      	bne.n	800eafe <memset+0xa>
 800eafc:	4770      	bx	lr
 800eafe:	f803 1b01 	strb.w	r1, [r3], #1
 800eb02:	e7f9      	b.n	800eaf8 <memset+0x4>

0800eb04 <iprintf>:
 800eb04:	b40f      	push	{r0, r1, r2, r3}
 800eb06:	4b0a      	ldr	r3, [pc, #40]	; (800eb30 <iprintf+0x2c>)
 800eb08:	b513      	push	{r0, r1, r4, lr}
 800eb0a:	681c      	ldr	r4, [r3, #0]
 800eb0c:	b124      	cbz	r4, 800eb18 <iprintf+0x14>
 800eb0e:	69a3      	ldr	r3, [r4, #24]
 800eb10:	b913      	cbnz	r3, 800eb18 <iprintf+0x14>
 800eb12:	4620      	mov	r0, r4
 800eb14:	f000 f8e2 	bl	800ecdc <__sinit>
 800eb18:	ab05      	add	r3, sp, #20
 800eb1a:	9a04      	ldr	r2, [sp, #16]
 800eb1c:	68a1      	ldr	r1, [r4, #8]
 800eb1e:	9301      	str	r3, [sp, #4]
 800eb20:	4620      	mov	r0, r4
 800eb22:	f000 fbfb 	bl	800f31c <_vfiprintf_r>
 800eb26:	b002      	add	sp, #8
 800eb28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb2c:	b004      	add	sp, #16
 800eb2e:	4770      	bx	lr
 800eb30:	20000084 	.word	0x20000084

0800eb34 <rand>:
 800eb34:	4b16      	ldr	r3, [pc, #88]	; (800eb90 <rand+0x5c>)
 800eb36:	b510      	push	{r4, lr}
 800eb38:	681c      	ldr	r4, [r3, #0]
 800eb3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eb3c:	b9b3      	cbnz	r3, 800eb6c <rand+0x38>
 800eb3e:	2018      	movs	r0, #24
 800eb40:	f000 f97e 	bl	800ee40 <malloc>
 800eb44:	63a0      	str	r0, [r4, #56]	; 0x38
 800eb46:	b928      	cbnz	r0, 800eb54 <rand+0x20>
 800eb48:	4602      	mov	r2, r0
 800eb4a:	4b12      	ldr	r3, [pc, #72]	; (800eb94 <rand+0x60>)
 800eb4c:	4812      	ldr	r0, [pc, #72]	; (800eb98 <rand+0x64>)
 800eb4e:	214e      	movs	r1, #78	; 0x4e
 800eb50:	f000 f84e 	bl	800ebf0 <__assert_func>
 800eb54:	4a11      	ldr	r2, [pc, #68]	; (800eb9c <rand+0x68>)
 800eb56:	4b12      	ldr	r3, [pc, #72]	; (800eba0 <rand+0x6c>)
 800eb58:	e9c0 2300 	strd	r2, r3, [r0]
 800eb5c:	4b11      	ldr	r3, [pc, #68]	; (800eba4 <rand+0x70>)
 800eb5e:	6083      	str	r3, [r0, #8]
 800eb60:	230b      	movs	r3, #11
 800eb62:	8183      	strh	r3, [r0, #12]
 800eb64:	2201      	movs	r2, #1
 800eb66:	2300      	movs	r3, #0
 800eb68:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800eb6c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800eb6e:	4a0e      	ldr	r2, [pc, #56]	; (800eba8 <rand+0x74>)
 800eb70:	6920      	ldr	r0, [r4, #16]
 800eb72:	6963      	ldr	r3, [r4, #20]
 800eb74:	490d      	ldr	r1, [pc, #52]	; (800ebac <rand+0x78>)
 800eb76:	4342      	muls	r2, r0
 800eb78:	fb01 2203 	mla	r2, r1, r3, r2
 800eb7c:	fba0 0101 	umull	r0, r1, r0, r1
 800eb80:	1c43      	adds	r3, r0, #1
 800eb82:	eb42 0001 	adc.w	r0, r2, r1
 800eb86:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800eb8a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800eb8e:	bd10      	pop	{r4, pc}
 800eb90:	20000084 	.word	0x20000084
 800eb94:	08012a30 	.word	0x08012a30
 800eb98:	08012a47 	.word	0x08012a47
 800eb9c:	abcd330e 	.word	0xabcd330e
 800eba0:	e66d1234 	.word	0xe66d1234
 800eba4:	0005deec 	.word	0x0005deec
 800eba8:	5851f42d 	.word	0x5851f42d
 800ebac:	4c957f2d 	.word	0x4c957f2d

0800ebb0 <siprintf>:
 800ebb0:	b40e      	push	{r1, r2, r3}
 800ebb2:	b500      	push	{lr}
 800ebb4:	b09c      	sub	sp, #112	; 0x70
 800ebb6:	ab1d      	add	r3, sp, #116	; 0x74
 800ebb8:	9002      	str	r0, [sp, #8]
 800ebba:	9006      	str	r0, [sp, #24]
 800ebbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ebc0:	4809      	ldr	r0, [pc, #36]	; (800ebe8 <siprintf+0x38>)
 800ebc2:	9107      	str	r1, [sp, #28]
 800ebc4:	9104      	str	r1, [sp, #16]
 800ebc6:	4909      	ldr	r1, [pc, #36]	; (800ebec <siprintf+0x3c>)
 800ebc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebcc:	9105      	str	r1, [sp, #20]
 800ebce:	6800      	ldr	r0, [r0, #0]
 800ebd0:	9301      	str	r3, [sp, #4]
 800ebd2:	a902      	add	r1, sp, #8
 800ebd4:	f000 fa78 	bl	800f0c8 <_svfiprintf_r>
 800ebd8:	9b02      	ldr	r3, [sp, #8]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	701a      	strb	r2, [r3, #0]
 800ebde:	b01c      	add	sp, #112	; 0x70
 800ebe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebe4:	b003      	add	sp, #12
 800ebe6:	4770      	bx	lr
 800ebe8:	20000084 	.word	0x20000084
 800ebec:	ffff0208 	.word	0xffff0208

0800ebf0 <__assert_func>:
 800ebf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ebf2:	4614      	mov	r4, r2
 800ebf4:	461a      	mov	r2, r3
 800ebf6:	4b09      	ldr	r3, [pc, #36]	; (800ec1c <__assert_func+0x2c>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	4605      	mov	r5, r0
 800ebfc:	68d8      	ldr	r0, [r3, #12]
 800ebfe:	b14c      	cbz	r4, 800ec14 <__assert_func+0x24>
 800ec00:	4b07      	ldr	r3, [pc, #28]	; (800ec20 <__assert_func+0x30>)
 800ec02:	9100      	str	r1, [sp, #0]
 800ec04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec08:	4906      	ldr	r1, [pc, #24]	; (800ec24 <__assert_func+0x34>)
 800ec0a:	462b      	mov	r3, r5
 800ec0c:	f000 f8e4 	bl	800edd8 <fiprintf>
 800ec10:	f000 ff6e 	bl	800faf0 <abort>
 800ec14:	4b04      	ldr	r3, [pc, #16]	; (800ec28 <__assert_func+0x38>)
 800ec16:	461c      	mov	r4, r3
 800ec18:	e7f3      	b.n	800ec02 <__assert_func+0x12>
 800ec1a:	bf00      	nop
 800ec1c:	20000084 	.word	0x20000084
 800ec20:	08012aa2 	.word	0x08012aa2
 800ec24:	08012aaf 	.word	0x08012aaf
 800ec28:	08012add 	.word	0x08012add

0800ec2c <std>:
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	b510      	push	{r4, lr}
 800ec30:	4604      	mov	r4, r0
 800ec32:	e9c0 3300 	strd	r3, r3, [r0]
 800ec36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec3a:	6083      	str	r3, [r0, #8]
 800ec3c:	8181      	strh	r1, [r0, #12]
 800ec3e:	6643      	str	r3, [r0, #100]	; 0x64
 800ec40:	81c2      	strh	r2, [r0, #14]
 800ec42:	6183      	str	r3, [r0, #24]
 800ec44:	4619      	mov	r1, r3
 800ec46:	2208      	movs	r2, #8
 800ec48:	305c      	adds	r0, #92	; 0x5c
 800ec4a:	f7ff ff53 	bl	800eaf4 <memset>
 800ec4e:	4b05      	ldr	r3, [pc, #20]	; (800ec64 <std+0x38>)
 800ec50:	6263      	str	r3, [r4, #36]	; 0x24
 800ec52:	4b05      	ldr	r3, [pc, #20]	; (800ec68 <std+0x3c>)
 800ec54:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec56:	4b05      	ldr	r3, [pc, #20]	; (800ec6c <std+0x40>)
 800ec58:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ec5a:	4b05      	ldr	r3, [pc, #20]	; (800ec70 <std+0x44>)
 800ec5c:	6224      	str	r4, [r4, #32]
 800ec5e:	6323      	str	r3, [r4, #48]	; 0x30
 800ec60:	bd10      	pop	{r4, pc}
 800ec62:	bf00      	nop
 800ec64:	0800f8c5 	.word	0x0800f8c5
 800ec68:	0800f8e7 	.word	0x0800f8e7
 800ec6c:	0800f91f 	.word	0x0800f91f
 800ec70:	0800f943 	.word	0x0800f943

0800ec74 <_cleanup_r>:
 800ec74:	4901      	ldr	r1, [pc, #4]	; (800ec7c <_cleanup_r+0x8>)
 800ec76:	f000 b8c1 	b.w	800edfc <_fwalk_reent>
 800ec7a:	bf00      	nop
 800ec7c:	0800fc2d 	.word	0x0800fc2d

0800ec80 <__sfmoreglue>:
 800ec80:	b570      	push	{r4, r5, r6, lr}
 800ec82:	2268      	movs	r2, #104	; 0x68
 800ec84:	1e4d      	subs	r5, r1, #1
 800ec86:	4355      	muls	r5, r2
 800ec88:	460e      	mov	r6, r1
 800ec8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ec8e:	f000 f94b 	bl	800ef28 <_malloc_r>
 800ec92:	4604      	mov	r4, r0
 800ec94:	b140      	cbz	r0, 800eca8 <__sfmoreglue+0x28>
 800ec96:	2100      	movs	r1, #0
 800ec98:	e9c0 1600 	strd	r1, r6, [r0]
 800ec9c:	300c      	adds	r0, #12
 800ec9e:	60a0      	str	r0, [r4, #8]
 800eca0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eca4:	f7ff ff26 	bl	800eaf4 <memset>
 800eca8:	4620      	mov	r0, r4
 800ecaa:	bd70      	pop	{r4, r5, r6, pc}

0800ecac <__sfp_lock_acquire>:
 800ecac:	4801      	ldr	r0, [pc, #4]	; (800ecb4 <__sfp_lock_acquire+0x8>)
 800ecae:	f000 b8c5 	b.w	800ee3c <__retarget_lock_acquire_recursive>
 800ecb2:	bf00      	nop
 800ecb4:	2000849d 	.word	0x2000849d

0800ecb8 <__sfp_lock_release>:
 800ecb8:	4801      	ldr	r0, [pc, #4]	; (800ecc0 <__sfp_lock_release+0x8>)
 800ecba:	f000 b8c0 	b.w	800ee3e <__retarget_lock_release_recursive>
 800ecbe:	bf00      	nop
 800ecc0:	2000849d 	.word	0x2000849d

0800ecc4 <__sinit_lock_acquire>:
 800ecc4:	4801      	ldr	r0, [pc, #4]	; (800eccc <__sinit_lock_acquire+0x8>)
 800ecc6:	f000 b8b9 	b.w	800ee3c <__retarget_lock_acquire_recursive>
 800ecca:	bf00      	nop
 800eccc:	2000849e 	.word	0x2000849e

0800ecd0 <__sinit_lock_release>:
 800ecd0:	4801      	ldr	r0, [pc, #4]	; (800ecd8 <__sinit_lock_release+0x8>)
 800ecd2:	f000 b8b4 	b.w	800ee3e <__retarget_lock_release_recursive>
 800ecd6:	bf00      	nop
 800ecd8:	2000849e 	.word	0x2000849e

0800ecdc <__sinit>:
 800ecdc:	b510      	push	{r4, lr}
 800ecde:	4604      	mov	r4, r0
 800ece0:	f7ff fff0 	bl	800ecc4 <__sinit_lock_acquire>
 800ece4:	69a3      	ldr	r3, [r4, #24]
 800ece6:	b11b      	cbz	r3, 800ecf0 <__sinit+0x14>
 800ece8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecec:	f7ff bff0 	b.w	800ecd0 <__sinit_lock_release>
 800ecf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ecf4:	6523      	str	r3, [r4, #80]	; 0x50
 800ecf6:	4b13      	ldr	r3, [pc, #76]	; (800ed44 <__sinit+0x68>)
 800ecf8:	4a13      	ldr	r2, [pc, #76]	; (800ed48 <__sinit+0x6c>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	62a2      	str	r2, [r4, #40]	; 0x28
 800ecfe:	42a3      	cmp	r3, r4
 800ed00:	bf04      	itt	eq
 800ed02:	2301      	moveq	r3, #1
 800ed04:	61a3      	streq	r3, [r4, #24]
 800ed06:	4620      	mov	r0, r4
 800ed08:	f000 f820 	bl	800ed4c <__sfp>
 800ed0c:	6060      	str	r0, [r4, #4]
 800ed0e:	4620      	mov	r0, r4
 800ed10:	f000 f81c 	bl	800ed4c <__sfp>
 800ed14:	60a0      	str	r0, [r4, #8]
 800ed16:	4620      	mov	r0, r4
 800ed18:	f000 f818 	bl	800ed4c <__sfp>
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	60e0      	str	r0, [r4, #12]
 800ed20:	2104      	movs	r1, #4
 800ed22:	6860      	ldr	r0, [r4, #4]
 800ed24:	f7ff ff82 	bl	800ec2c <std>
 800ed28:	68a0      	ldr	r0, [r4, #8]
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	2109      	movs	r1, #9
 800ed2e:	f7ff ff7d 	bl	800ec2c <std>
 800ed32:	68e0      	ldr	r0, [r4, #12]
 800ed34:	2202      	movs	r2, #2
 800ed36:	2112      	movs	r1, #18
 800ed38:	f7ff ff78 	bl	800ec2c <std>
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	61a3      	str	r3, [r4, #24]
 800ed40:	e7d2      	b.n	800ece8 <__sinit+0xc>
 800ed42:	bf00      	nop
 800ed44:	08012a2c 	.word	0x08012a2c
 800ed48:	0800ec75 	.word	0x0800ec75

0800ed4c <__sfp>:
 800ed4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed4e:	4607      	mov	r7, r0
 800ed50:	f7ff ffac 	bl	800ecac <__sfp_lock_acquire>
 800ed54:	4b1e      	ldr	r3, [pc, #120]	; (800edd0 <__sfp+0x84>)
 800ed56:	681e      	ldr	r6, [r3, #0]
 800ed58:	69b3      	ldr	r3, [r6, #24]
 800ed5a:	b913      	cbnz	r3, 800ed62 <__sfp+0x16>
 800ed5c:	4630      	mov	r0, r6
 800ed5e:	f7ff ffbd 	bl	800ecdc <__sinit>
 800ed62:	3648      	adds	r6, #72	; 0x48
 800ed64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ed68:	3b01      	subs	r3, #1
 800ed6a:	d503      	bpl.n	800ed74 <__sfp+0x28>
 800ed6c:	6833      	ldr	r3, [r6, #0]
 800ed6e:	b30b      	cbz	r3, 800edb4 <__sfp+0x68>
 800ed70:	6836      	ldr	r6, [r6, #0]
 800ed72:	e7f7      	b.n	800ed64 <__sfp+0x18>
 800ed74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ed78:	b9d5      	cbnz	r5, 800edb0 <__sfp+0x64>
 800ed7a:	4b16      	ldr	r3, [pc, #88]	; (800edd4 <__sfp+0x88>)
 800ed7c:	60e3      	str	r3, [r4, #12]
 800ed7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ed82:	6665      	str	r5, [r4, #100]	; 0x64
 800ed84:	f000 f859 	bl	800ee3a <__retarget_lock_init_recursive>
 800ed88:	f7ff ff96 	bl	800ecb8 <__sfp_lock_release>
 800ed8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ed90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ed94:	6025      	str	r5, [r4, #0]
 800ed96:	61a5      	str	r5, [r4, #24]
 800ed98:	2208      	movs	r2, #8
 800ed9a:	4629      	mov	r1, r5
 800ed9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eda0:	f7ff fea8 	bl	800eaf4 <memset>
 800eda4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eda8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800edac:	4620      	mov	r0, r4
 800edae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edb0:	3468      	adds	r4, #104	; 0x68
 800edb2:	e7d9      	b.n	800ed68 <__sfp+0x1c>
 800edb4:	2104      	movs	r1, #4
 800edb6:	4638      	mov	r0, r7
 800edb8:	f7ff ff62 	bl	800ec80 <__sfmoreglue>
 800edbc:	4604      	mov	r4, r0
 800edbe:	6030      	str	r0, [r6, #0]
 800edc0:	2800      	cmp	r0, #0
 800edc2:	d1d5      	bne.n	800ed70 <__sfp+0x24>
 800edc4:	f7ff ff78 	bl	800ecb8 <__sfp_lock_release>
 800edc8:	230c      	movs	r3, #12
 800edca:	603b      	str	r3, [r7, #0]
 800edcc:	e7ee      	b.n	800edac <__sfp+0x60>
 800edce:	bf00      	nop
 800edd0:	08012a2c 	.word	0x08012a2c
 800edd4:	ffff0001 	.word	0xffff0001

0800edd8 <fiprintf>:
 800edd8:	b40e      	push	{r1, r2, r3}
 800edda:	b503      	push	{r0, r1, lr}
 800eddc:	4601      	mov	r1, r0
 800edde:	ab03      	add	r3, sp, #12
 800ede0:	4805      	ldr	r0, [pc, #20]	; (800edf8 <fiprintf+0x20>)
 800ede2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ede6:	6800      	ldr	r0, [r0, #0]
 800ede8:	9301      	str	r3, [sp, #4]
 800edea:	f000 fa97 	bl	800f31c <_vfiprintf_r>
 800edee:	b002      	add	sp, #8
 800edf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800edf4:	b003      	add	sp, #12
 800edf6:	4770      	bx	lr
 800edf8:	20000084 	.word	0x20000084

0800edfc <_fwalk_reent>:
 800edfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee00:	4606      	mov	r6, r0
 800ee02:	4688      	mov	r8, r1
 800ee04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ee08:	2700      	movs	r7, #0
 800ee0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee0e:	f1b9 0901 	subs.w	r9, r9, #1
 800ee12:	d505      	bpl.n	800ee20 <_fwalk_reent+0x24>
 800ee14:	6824      	ldr	r4, [r4, #0]
 800ee16:	2c00      	cmp	r4, #0
 800ee18:	d1f7      	bne.n	800ee0a <_fwalk_reent+0xe>
 800ee1a:	4638      	mov	r0, r7
 800ee1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee20:	89ab      	ldrh	r3, [r5, #12]
 800ee22:	2b01      	cmp	r3, #1
 800ee24:	d907      	bls.n	800ee36 <_fwalk_reent+0x3a>
 800ee26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	d003      	beq.n	800ee36 <_fwalk_reent+0x3a>
 800ee2e:	4629      	mov	r1, r5
 800ee30:	4630      	mov	r0, r6
 800ee32:	47c0      	blx	r8
 800ee34:	4307      	orrs	r7, r0
 800ee36:	3568      	adds	r5, #104	; 0x68
 800ee38:	e7e9      	b.n	800ee0e <_fwalk_reent+0x12>

0800ee3a <__retarget_lock_init_recursive>:
 800ee3a:	4770      	bx	lr

0800ee3c <__retarget_lock_acquire_recursive>:
 800ee3c:	4770      	bx	lr

0800ee3e <__retarget_lock_release_recursive>:
 800ee3e:	4770      	bx	lr

0800ee40 <malloc>:
 800ee40:	4b02      	ldr	r3, [pc, #8]	; (800ee4c <malloc+0xc>)
 800ee42:	4601      	mov	r1, r0
 800ee44:	6818      	ldr	r0, [r3, #0]
 800ee46:	f000 b86f 	b.w	800ef28 <_malloc_r>
 800ee4a:	bf00      	nop
 800ee4c:	20000084 	.word	0x20000084

0800ee50 <_free_r>:
 800ee50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee52:	2900      	cmp	r1, #0
 800ee54:	d044      	beq.n	800eee0 <_free_r+0x90>
 800ee56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee5a:	9001      	str	r0, [sp, #4]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	f1a1 0404 	sub.w	r4, r1, #4
 800ee62:	bfb8      	it	lt
 800ee64:	18e4      	addlt	r4, r4, r3
 800ee66:	f000 ff95 	bl	800fd94 <__malloc_lock>
 800ee6a:	4a1e      	ldr	r2, [pc, #120]	; (800eee4 <_free_r+0x94>)
 800ee6c:	9801      	ldr	r0, [sp, #4]
 800ee6e:	6813      	ldr	r3, [r2, #0]
 800ee70:	b933      	cbnz	r3, 800ee80 <_free_r+0x30>
 800ee72:	6063      	str	r3, [r4, #4]
 800ee74:	6014      	str	r4, [r2, #0]
 800ee76:	b003      	add	sp, #12
 800ee78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee7c:	f000 bf90 	b.w	800fda0 <__malloc_unlock>
 800ee80:	42a3      	cmp	r3, r4
 800ee82:	d908      	bls.n	800ee96 <_free_r+0x46>
 800ee84:	6825      	ldr	r5, [r4, #0]
 800ee86:	1961      	adds	r1, r4, r5
 800ee88:	428b      	cmp	r3, r1
 800ee8a:	bf01      	itttt	eq
 800ee8c:	6819      	ldreq	r1, [r3, #0]
 800ee8e:	685b      	ldreq	r3, [r3, #4]
 800ee90:	1949      	addeq	r1, r1, r5
 800ee92:	6021      	streq	r1, [r4, #0]
 800ee94:	e7ed      	b.n	800ee72 <_free_r+0x22>
 800ee96:	461a      	mov	r2, r3
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	b10b      	cbz	r3, 800eea0 <_free_r+0x50>
 800ee9c:	42a3      	cmp	r3, r4
 800ee9e:	d9fa      	bls.n	800ee96 <_free_r+0x46>
 800eea0:	6811      	ldr	r1, [r2, #0]
 800eea2:	1855      	adds	r5, r2, r1
 800eea4:	42a5      	cmp	r5, r4
 800eea6:	d10b      	bne.n	800eec0 <_free_r+0x70>
 800eea8:	6824      	ldr	r4, [r4, #0]
 800eeaa:	4421      	add	r1, r4
 800eeac:	1854      	adds	r4, r2, r1
 800eeae:	42a3      	cmp	r3, r4
 800eeb0:	6011      	str	r1, [r2, #0]
 800eeb2:	d1e0      	bne.n	800ee76 <_free_r+0x26>
 800eeb4:	681c      	ldr	r4, [r3, #0]
 800eeb6:	685b      	ldr	r3, [r3, #4]
 800eeb8:	6053      	str	r3, [r2, #4]
 800eeba:	4421      	add	r1, r4
 800eebc:	6011      	str	r1, [r2, #0]
 800eebe:	e7da      	b.n	800ee76 <_free_r+0x26>
 800eec0:	d902      	bls.n	800eec8 <_free_r+0x78>
 800eec2:	230c      	movs	r3, #12
 800eec4:	6003      	str	r3, [r0, #0]
 800eec6:	e7d6      	b.n	800ee76 <_free_r+0x26>
 800eec8:	6825      	ldr	r5, [r4, #0]
 800eeca:	1961      	adds	r1, r4, r5
 800eecc:	428b      	cmp	r3, r1
 800eece:	bf04      	itt	eq
 800eed0:	6819      	ldreq	r1, [r3, #0]
 800eed2:	685b      	ldreq	r3, [r3, #4]
 800eed4:	6063      	str	r3, [r4, #4]
 800eed6:	bf04      	itt	eq
 800eed8:	1949      	addeq	r1, r1, r5
 800eeda:	6021      	streq	r1, [r4, #0]
 800eedc:	6054      	str	r4, [r2, #4]
 800eede:	e7ca      	b.n	800ee76 <_free_r+0x26>
 800eee0:	b003      	add	sp, #12
 800eee2:	bd30      	pop	{r4, r5, pc}
 800eee4:	200084a0 	.word	0x200084a0

0800eee8 <sbrk_aligned>:
 800eee8:	b570      	push	{r4, r5, r6, lr}
 800eeea:	4e0e      	ldr	r6, [pc, #56]	; (800ef24 <sbrk_aligned+0x3c>)
 800eeec:	460c      	mov	r4, r1
 800eeee:	6831      	ldr	r1, [r6, #0]
 800eef0:	4605      	mov	r5, r0
 800eef2:	b911      	cbnz	r1, 800eefa <sbrk_aligned+0x12>
 800eef4:	f000 fcd6 	bl	800f8a4 <_sbrk_r>
 800eef8:	6030      	str	r0, [r6, #0]
 800eefa:	4621      	mov	r1, r4
 800eefc:	4628      	mov	r0, r5
 800eefe:	f000 fcd1 	bl	800f8a4 <_sbrk_r>
 800ef02:	1c43      	adds	r3, r0, #1
 800ef04:	d00a      	beq.n	800ef1c <sbrk_aligned+0x34>
 800ef06:	1cc4      	adds	r4, r0, #3
 800ef08:	f024 0403 	bic.w	r4, r4, #3
 800ef0c:	42a0      	cmp	r0, r4
 800ef0e:	d007      	beq.n	800ef20 <sbrk_aligned+0x38>
 800ef10:	1a21      	subs	r1, r4, r0
 800ef12:	4628      	mov	r0, r5
 800ef14:	f000 fcc6 	bl	800f8a4 <_sbrk_r>
 800ef18:	3001      	adds	r0, #1
 800ef1a:	d101      	bne.n	800ef20 <sbrk_aligned+0x38>
 800ef1c:	f04f 34ff 	mov.w	r4, #4294967295
 800ef20:	4620      	mov	r0, r4
 800ef22:	bd70      	pop	{r4, r5, r6, pc}
 800ef24:	200084a4 	.word	0x200084a4

0800ef28 <_malloc_r>:
 800ef28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef2c:	1ccd      	adds	r5, r1, #3
 800ef2e:	f025 0503 	bic.w	r5, r5, #3
 800ef32:	3508      	adds	r5, #8
 800ef34:	2d0c      	cmp	r5, #12
 800ef36:	bf38      	it	cc
 800ef38:	250c      	movcc	r5, #12
 800ef3a:	2d00      	cmp	r5, #0
 800ef3c:	4607      	mov	r7, r0
 800ef3e:	db01      	blt.n	800ef44 <_malloc_r+0x1c>
 800ef40:	42a9      	cmp	r1, r5
 800ef42:	d905      	bls.n	800ef50 <_malloc_r+0x28>
 800ef44:	230c      	movs	r3, #12
 800ef46:	603b      	str	r3, [r7, #0]
 800ef48:	2600      	movs	r6, #0
 800ef4a:	4630      	mov	r0, r6
 800ef4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef50:	4e2e      	ldr	r6, [pc, #184]	; (800f00c <_malloc_r+0xe4>)
 800ef52:	f000 ff1f 	bl	800fd94 <__malloc_lock>
 800ef56:	6833      	ldr	r3, [r6, #0]
 800ef58:	461c      	mov	r4, r3
 800ef5a:	bb34      	cbnz	r4, 800efaa <_malloc_r+0x82>
 800ef5c:	4629      	mov	r1, r5
 800ef5e:	4638      	mov	r0, r7
 800ef60:	f7ff ffc2 	bl	800eee8 <sbrk_aligned>
 800ef64:	1c43      	adds	r3, r0, #1
 800ef66:	4604      	mov	r4, r0
 800ef68:	d14d      	bne.n	800f006 <_malloc_r+0xde>
 800ef6a:	6834      	ldr	r4, [r6, #0]
 800ef6c:	4626      	mov	r6, r4
 800ef6e:	2e00      	cmp	r6, #0
 800ef70:	d140      	bne.n	800eff4 <_malloc_r+0xcc>
 800ef72:	6823      	ldr	r3, [r4, #0]
 800ef74:	4631      	mov	r1, r6
 800ef76:	4638      	mov	r0, r7
 800ef78:	eb04 0803 	add.w	r8, r4, r3
 800ef7c:	f000 fc92 	bl	800f8a4 <_sbrk_r>
 800ef80:	4580      	cmp	r8, r0
 800ef82:	d13a      	bne.n	800effa <_malloc_r+0xd2>
 800ef84:	6821      	ldr	r1, [r4, #0]
 800ef86:	3503      	adds	r5, #3
 800ef88:	1a6d      	subs	r5, r5, r1
 800ef8a:	f025 0503 	bic.w	r5, r5, #3
 800ef8e:	3508      	adds	r5, #8
 800ef90:	2d0c      	cmp	r5, #12
 800ef92:	bf38      	it	cc
 800ef94:	250c      	movcc	r5, #12
 800ef96:	4629      	mov	r1, r5
 800ef98:	4638      	mov	r0, r7
 800ef9a:	f7ff ffa5 	bl	800eee8 <sbrk_aligned>
 800ef9e:	3001      	adds	r0, #1
 800efa0:	d02b      	beq.n	800effa <_malloc_r+0xd2>
 800efa2:	6823      	ldr	r3, [r4, #0]
 800efa4:	442b      	add	r3, r5
 800efa6:	6023      	str	r3, [r4, #0]
 800efa8:	e00e      	b.n	800efc8 <_malloc_r+0xa0>
 800efaa:	6822      	ldr	r2, [r4, #0]
 800efac:	1b52      	subs	r2, r2, r5
 800efae:	d41e      	bmi.n	800efee <_malloc_r+0xc6>
 800efb0:	2a0b      	cmp	r2, #11
 800efb2:	d916      	bls.n	800efe2 <_malloc_r+0xba>
 800efb4:	1961      	adds	r1, r4, r5
 800efb6:	42a3      	cmp	r3, r4
 800efb8:	6025      	str	r5, [r4, #0]
 800efba:	bf18      	it	ne
 800efbc:	6059      	strne	r1, [r3, #4]
 800efbe:	6863      	ldr	r3, [r4, #4]
 800efc0:	bf08      	it	eq
 800efc2:	6031      	streq	r1, [r6, #0]
 800efc4:	5162      	str	r2, [r4, r5]
 800efc6:	604b      	str	r3, [r1, #4]
 800efc8:	4638      	mov	r0, r7
 800efca:	f104 060b 	add.w	r6, r4, #11
 800efce:	f000 fee7 	bl	800fda0 <__malloc_unlock>
 800efd2:	f026 0607 	bic.w	r6, r6, #7
 800efd6:	1d23      	adds	r3, r4, #4
 800efd8:	1af2      	subs	r2, r6, r3
 800efda:	d0b6      	beq.n	800ef4a <_malloc_r+0x22>
 800efdc:	1b9b      	subs	r3, r3, r6
 800efde:	50a3      	str	r3, [r4, r2]
 800efe0:	e7b3      	b.n	800ef4a <_malloc_r+0x22>
 800efe2:	6862      	ldr	r2, [r4, #4]
 800efe4:	42a3      	cmp	r3, r4
 800efe6:	bf0c      	ite	eq
 800efe8:	6032      	streq	r2, [r6, #0]
 800efea:	605a      	strne	r2, [r3, #4]
 800efec:	e7ec      	b.n	800efc8 <_malloc_r+0xa0>
 800efee:	4623      	mov	r3, r4
 800eff0:	6864      	ldr	r4, [r4, #4]
 800eff2:	e7b2      	b.n	800ef5a <_malloc_r+0x32>
 800eff4:	4634      	mov	r4, r6
 800eff6:	6876      	ldr	r6, [r6, #4]
 800eff8:	e7b9      	b.n	800ef6e <_malloc_r+0x46>
 800effa:	230c      	movs	r3, #12
 800effc:	603b      	str	r3, [r7, #0]
 800effe:	4638      	mov	r0, r7
 800f000:	f000 fece 	bl	800fda0 <__malloc_unlock>
 800f004:	e7a1      	b.n	800ef4a <_malloc_r+0x22>
 800f006:	6025      	str	r5, [r4, #0]
 800f008:	e7de      	b.n	800efc8 <_malloc_r+0xa0>
 800f00a:	bf00      	nop
 800f00c:	200084a0 	.word	0x200084a0

0800f010 <__ssputs_r>:
 800f010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f014:	688e      	ldr	r6, [r1, #8]
 800f016:	429e      	cmp	r6, r3
 800f018:	4682      	mov	sl, r0
 800f01a:	460c      	mov	r4, r1
 800f01c:	4690      	mov	r8, r2
 800f01e:	461f      	mov	r7, r3
 800f020:	d838      	bhi.n	800f094 <__ssputs_r+0x84>
 800f022:	898a      	ldrh	r2, [r1, #12]
 800f024:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f028:	d032      	beq.n	800f090 <__ssputs_r+0x80>
 800f02a:	6825      	ldr	r5, [r4, #0]
 800f02c:	6909      	ldr	r1, [r1, #16]
 800f02e:	eba5 0901 	sub.w	r9, r5, r1
 800f032:	6965      	ldr	r5, [r4, #20]
 800f034:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f038:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f03c:	3301      	adds	r3, #1
 800f03e:	444b      	add	r3, r9
 800f040:	106d      	asrs	r5, r5, #1
 800f042:	429d      	cmp	r5, r3
 800f044:	bf38      	it	cc
 800f046:	461d      	movcc	r5, r3
 800f048:	0553      	lsls	r3, r2, #21
 800f04a:	d531      	bpl.n	800f0b0 <__ssputs_r+0xa0>
 800f04c:	4629      	mov	r1, r5
 800f04e:	f7ff ff6b 	bl	800ef28 <_malloc_r>
 800f052:	4606      	mov	r6, r0
 800f054:	b950      	cbnz	r0, 800f06c <__ssputs_r+0x5c>
 800f056:	230c      	movs	r3, #12
 800f058:	f8ca 3000 	str.w	r3, [sl]
 800f05c:	89a3      	ldrh	r3, [r4, #12]
 800f05e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f062:	81a3      	strh	r3, [r4, #12]
 800f064:	f04f 30ff 	mov.w	r0, #4294967295
 800f068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f06c:	6921      	ldr	r1, [r4, #16]
 800f06e:	464a      	mov	r2, r9
 800f070:	f7ff fd18 	bl	800eaa4 <memcpy>
 800f074:	89a3      	ldrh	r3, [r4, #12]
 800f076:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f07a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f07e:	81a3      	strh	r3, [r4, #12]
 800f080:	6126      	str	r6, [r4, #16]
 800f082:	6165      	str	r5, [r4, #20]
 800f084:	444e      	add	r6, r9
 800f086:	eba5 0509 	sub.w	r5, r5, r9
 800f08a:	6026      	str	r6, [r4, #0]
 800f08c:	60a5      	str	r5, [r4, #8]
 800f08e:	463e      	mov	r6, r7
 800f090:	42be      	cmp	r6, r7
 800f092:	d900      	bls.n	800f096 <__ssputs_r+0x86>
 800f094:	463e      	mov	r6, r7
 800f096:	6820      	ldr	r0, [r4, #0]
 800f098:	4632      	mov	r2, r6
 800f09a:	4641      	mov	r1, r8
 800f09c:	f7ff fd10 	bl	800eac0 <memmove>
 800f0a0:	68a3      	ldr	r3, [r4, #8]
 800f0a2:	1b9b      	subs	r3, r3, r6
 800f0a4:	60a3      	str	r3, [r4, #8]
 800f0a6:	6823      	ldr	r3, [r4, #0]
 800f0a8:	4433      	add	r3, r6
 800f0aa:	6023      	str	r3, [r4, #0]
 800f0ac:	2000      	movs	r0, #0
 800f0ae:	e7db      	b.n	800f068 <__ssputs_r+0x58>
 800f0b0:	462a      	mov	r2, r5
 800f0b2:	f000 fe7b 	bl	800fdac <_realloc_r>
 800f0b6:	4606      	mov	r6, r0
 800f0b8:	2800      	cmp	r0, #0
 800f0ba:	d1e1      	bne.n	800f080 <__ssputs_r+0x70>
 800f0bc:	6921      	ldr	r1, [r4, #16]
 800f0be:	4650      	mov	r0, sl
 800f0c0:	f7ff fec6 	bl	800ee50 <_free_r>
 800f0c4:	e7c7      	b.n	800f056 <__ssputs_r+0x46>
	...

0800f0c8 <_svfiprintf_r>:
 800f0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0cc:	4698      	mov	r8, r3
 800f0ce:	898b      	ldrh	r3, [r1, #12]
 800f0d0:	061b      	lsls	r3, r3, #24
 800f0d2:	b09d      	sub	sp, #116	; 0x74
 800f0d4:	4607      	mov	r7, r0
 800f0d6:	460d      	mov	r5, r1
 800f0d8:	4614      	mov	r4, r2
 800f0da:	d50e      	bpl.n	800f0fa <_svfiprintf_r+0x32>
 800f0dc:	690b      	ldr	r3, [r1, #16]
 800f0de:	b963      	cbnz	r3, 800f0fa <_svfiprintf_r+0x32>
 800f0e0:	2140      	movs	r1, #64	; 0x40
 800f0e2:	f7ff ff21 	bl	800ef28 <_malloc_r>
 800f0e6:	6028      	str	r0, [r5, #0]
 800f0e8:	6128      	str	r0, [r5, #16]
 800f0ea:	b920      	cbnz	r0, 800f0f6 <_svfiprintf_r+0x2e>
 800f0ec:	230c      	movs	r3, #12
 800f0ee:	603b      	str	r3, [r7, #0]
 800f0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0f4:	e0d1      	b.n	800f29a <_svfiprintf_r+0x1d2>
 800f0f6:	2340      	movs	r3, #64	; 0x40
 800f0f8:	616b      	str	r3, [r5, #20]
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	9309      	str	r3, [sp, #36]	; 0x24
 800f0fe:	2320      	movs	r3, #32
 800f100:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f104:	f8cd 800c 	str.w	r8, [sp, #12]
 800f108:	2330      	movs	r3, #48	; 0x30
 800f10a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f2b4 <_svfiprintf_r+0x1ec>
 800f10e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f112:	f04f 0901 	mov.w	r9, #1
 800f116:	4623      	mov	r3, r4
 800f118:	469a      	mov	sl, r3
 800f11a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f11e:	b10a      	cbz	r2, 800f124 <_svfiprintf_r+0x5c>
 800f120:	2a25      	cmp	r2, #37	; 0x25
 800f122:	d1f9      	bne.n	800f118 <_svfiprintf_r+0x50>
 800f124:	ebba 0b04 	subs.w	fp, sl, r4
 800f128:	d00b      	beq.n	800f142 <_svfiprintf_r+0x7a>
 800f12a:	465b      	mov	r3, fp
 800f12c:	4622      	mov	r2, r4
 800f12e:	4629      	mov	r1, r5
 800f130:	4638      	mov	r0, r7
 800f132:	f7ff ff6d 	bl	800f010 <__ssputs_r>
 800f136:	3001      	adds	r0, #1
 800f138:	f000 80aa 	beq.w	800f290 <_svfiprintf_r+0x1c8>
 800f13c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f13e:	445a      	add	r2, fp
 800f140:	9209      	str	r2, [sp, #36]	; 0x24
 800f142:	f89a 3000 	ldrb.w	r3, [sl]
 800f146:	2b00      	cmp	r3, #0
 800f148:	f000 80a2 	beq.w	800f290 <_svfiprintf_r+0x1c8>
 800f14c:	2300      	movs	r3, #0
 800f14e:	f04f 32ff 	mov.w	r2, #4294967295
 800f152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f156:	f10a 0a01 	add.w	sl, sl, #1
 800f15a:	9304      	str	r3, [sp, #16]
 800f15c:	9307      	str	r3, [sp, #28]
 800f15e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f162:	931a      	str	r3, [sp, #104]	; 0x68
 800f164:	4654      	mov	r4, sl
 800f166:	2205      	movs	r2, #5
 800f168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f16c:	4851      	ldr	r0, [pc, #324]	; (800f2b4 <_svfiprintf_r+0x1ec>)
 800f16e:	f7f1 f83f 	bl	80001f0 <memchr>
 800f172:	9a04      	ldr	r2, [sp, #16]
 800f174:	b9d8      	cbnz	r0, 800f1ae <_svfiprintf_r+0xe6>
 800f176:	06d0      	lsls	r0, r2, #27
 800f178:	bf44      	itt	mi
 800f17a:	2320      	movmi	r3, #32
 800f17c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f180:	0711      	lsls	r1, r2, #28
 800f182:	bf44      	itt	mi
 800f184:	232b      	movmi	r3, #43	; 0x2b
 800f186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f18a:	f89a 3000 	ldrb.w	r3, [sl]
 800f18e:	2b2a      	cmp	r3, #42	; 0x2a
 800f190:	d015      	beq.n	800f1be <_svfiprintf_r+0xf6>
 800f192:	9a07      	ldr	r2, [sp, #28]
 800f194:	4654      	mov	r4, sl
 800f196:	2000      	movs	r0, #0
 800f198:	f04f 0c0a 	mov.w	ip, #10
 800f19c:	4621      	mov	r1, r4
 800f19e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1a2:	3b30      	subs	r3, #48	; 0x30
 800f1a4:	2b09      	cmp	r3, #9
 800f1a6:	d94e      	bls.n	800f246 <_svfiprintf_r+0x17e>
 800f1a8:	b1b0      	cbz	r0, 800f1d8 <_svfiprintf_r+0x110>
 800f1aa:	9207      	str	r2, [sp, #28]
 800f1ac:	e014      	b.n	800f1d8 <_svfiprintf_r+0x110>
 800f1ae:	eba0 0308 	sub.w	r3, r0, r8
 800f1b2:	fa09 f303 	lsl.w	r3, r9, r3
 800f1b6:	4313      	orrs	r3, r2
 800f1b8:	9304      	str	r3, [sp, #16]
 800f1ba:	46a2      	mov	sl, r4
 800f1bc:	e7d2      	b.n	800f164 <_svfiprintf_r+0x9c>
 800f1be:	9b03      	ldr	r3, [sp, #12]
 800f1c0:	1d19      	adds	r1, r3, #4
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	9103      	str	r1, [sp, #12]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	bfbb      	ittet	lt
 800f1ca:	425b      	neglt	r3, r3
 800f1cc:	f042 0202 	orrlt.w	r2, r2, #2
 800f1d0:	9307      	strge	r3, [sp, #28]
 800f1d2:	9307      	strlt	r3, [sp, #28]
 800f1d4:	bfb8      	it	lt
 800f1d6:	9204      	strlt	r2, [sp, #16]
 800f1d8:	7823      	ldrb	r3, [r4, #0]
 800f1da:	2b2e      	cmp	r3, #46	; 0x2e
 800f1dc:	d10c      	bne.n	800f1f8 <_svfiprintf_r+0x130>
 800f1de:	7863      	ldrb	r3, [r4, #1]
 800f1e0:	2b2a      	cmp	r3, #42	; 0x2a
 800f1e2:	d135      	bne.n	800f250 <_svfiprintf_r+0x188>
 800f1e4:	9b03      	ldr	r3, [sp, #12]
 800f1e6:	1d1a      	adds	r2, r3, #4
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	9203      	str	r2, [sp, #12]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	bfb8      	it	lt
 800f1f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f1f4:	3402      	adds	r4, #2
 800f1f6:	9305      	str	r3, [sp, #20]
 800f1f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f2c4 <_svfiprintf_r+0x1fc>
 800f1fc:	7821      	ldrb	r1, [r4, #0]
 800f1fe:	2203      	movs	r2, #3
 800f200:	4650      	mov	r0, sl
 800f202:	f7f0 fff5 	bl	80001f0 <memchr>
 800f206:	b140      	cbz	r0, 800f21a <_svfiprintf_r+0x152>
 800f208:	2340      	movs	r3, #64	; 0x40
 800f20a:	eba0 000a 	sub.w	r0, r0, sl
 800f20e:	fa03 f000 	lsl.w	r0, r3, r0
 800f212:	9b04      	ldr	r3, [sp, #16]
 800f214:	4303      	orrs	r3, r0
 800f216:	3401      	adds	r4, #1
 800f218:	9304      	str	r3, [sp, #16]
 800f21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f21e:	4826      	ldr	r0, [pc, #152]	; (800f2b8 <_svfiprintf_r+0x1f0>)
 800f220:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f224:	2206      	movs	r2, #6
 800f226:	f7f0 ffe3 	bl	80001f0 <memchr>
 800f22a:	2800      	cmp	r0, #0
 800f22c:	d038      	beq.n	800f2a0 <_svfiprintf_r+0x1d8>
 800f22e:	4b23      	ldr	r3, [pc, #140]	; (800f2bc <_svfiprintf_r+0x1f4>)
 800f230:	bb1b      	cbnz	r3, 800f27a <_svfiprintf_r+0x1b2>
 800f232:	9b03      	ldr	r3, [sp, #12]
 800f234:	3307      	adds	r3, #7
 800f236:	f023 0307 	bic.w	r3, r3, #7
 800f23a:	3308      	adds	r3, #8
 800f23c:	9303      	str	r3, [sp, #12]
 800f23e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f240:	4433      	add	r3, r6
 800f242:	9309      	str	r3, [sp, #36]	; 0x24
 800f244:	e767      	b.n	800f116 <_svfiprintf_r+0x4e>
 800f246:	fb0c 3202 	mla	r2, ip, r2, r3
 800f24a:	460c      	mov	r4, r1
 800f24c:	2001      	movs	r0, #1
 800f24e:	e7a5      	b.n	800f19c <_svfiprintf_r+0xd4>
 800f250:	2300      	movs	r3, #0
 800f252:	3401      	adds	r4, #1
 800f254:	9305      	str	r3, [sp, #20]
 800f256:	4619      	mov	r1, r3
 800f258:	f04f 0c0a 	mov.w	ip, #10
 800f25c:	4620      	mov	r0, r4
 800f25e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f262:	3a30      	subs	r2, #48	; 0x30
 800f264:	2a09      	cmp	r2, #9
 800f266:	d903      	bls.n	800f270 <_svfiprintf_r+0x1a8>
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d0c5      	beq.n	800f1f8 <_svfiprintf_r+0x130>
 800f26c:	9105      	str	r1, [sp, #20]
 800f26e:	e7c3      	b.n	800f1f8 <_svfiprintf_r+0x130>
 800f270:	fb0c 2101 	mla	r1, ip, r1, r2
 800f274:	4604      	mov	r4, r0
 800f276:	2301      	movs	r3, #1
 800f278:	e7f0      	b.n	800f25c <_svfiprintf_r+0x194>
 800f27a:	ab03      	add	r3, sp, #12
 800f27c:	9300      	str	r3, [sp, #0]
 800f27e:	462a      	mov	r2, r5
 800f280:	4b0f      	ldr	r3, [pc, #60]	; (800f2c0 <_svfiprintf_r+0x1f8>)
 800f282:	a904      	add	r1, sp, #16
 800f284:	4638      	mov	r0, r7
 800f286:	f3af 8000 	nop.w
 800f28a:	1c42      	adds	r2, r0, #1
 800f28c:	4606      	mov	r6, r0
 800f28e:	d1d6      	bne.n	800f23e <_svfiprintf_r+0x176>
 800f290:	89ab      	ldrh	r3, [r5, #12]
 800f292:	065b      	lsls	r3, r3, #25
 800f294:	f53f af2c 	bmi.w	800f0f0 <_svfiprintf_r+0x28>
 800f298:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f29a:	b01d      	add	sp, #116	; 0x74
 800f29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2a0:	ab03      	add	r3, sp, #12
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	462a      	mov	r2, r5
 800f2a6:	4b06      	ldr	r3, [pc, #24]	; (800f2c0 <_svfiprintf_r+0x1f8>)
 800f2a8:	a904      	add	r1, sp, #16
 800f2aa:	4638      	mov	r0, r7
 800f2ac:	f000 f9d4 	bl	800f658 <_printf_i>
 800f2b0:	e7eb      	b.n	800f28a <_svfiprintf_r+0x1c2>
 800f2b2:	bf00      	nop
 800f2b4:	08012b40 	.word	0x08012b40
 800f2b8:	08012b4a 	.word	0x08012b4a
 800f2bc:	00000000 	.word	0x00000000
 800f2c0:	0800f011 	.word	0x0800f011
 800f2c4:	08012b46 	.word	0x08012b46

0800f2c8 <__sfputc_r>:
 800f2c8:	6893      	ldr	r3, [r2, #8]
 800f2ca:	3b01      	subs	r3, #1
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	b410      	push	{r4}
 800f2d0:	6093      	str	r3, [r2, #8]
 800f2d2:	da08      	bge.n	800f2e6 <__sfputc_r+0x1e>
 800f2d4:	6994      	ldr	r4, [r2, #24]
 800f2d6:	42a3      	cmp	r3, r4
 800f2d8:	db01      	blt.n	800f2de <__sfputc_r+0x16>
 800f2da:	290a      	cmp	r1, #10
 800f2dc:	d103      	bne.n	800f2e6 <__sfputc_r+0x1e>
 800f2de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2e2:	f000 bb33 	b.w	800f94c <__swbuf_r>
 800f2e6:	6813      	ldr	r3, [r2, #0]
 800f2e8:	1c58      	adds	r0, r3, #1
 800f2ea:	6010      	str	r0, [r2, #0]
 800f2ec:	7019      	strb	r1, [r3, #0]
 800f2ee:	4608      	mov	r0, r1
 800f2f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2f4:	4770      	bx	lr

0800f2f6 <__sfputs_r>:
 800f2f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2f8:	4606      	mov	r6, r0
 800f2fa:	460f      	mov	r7, r1
 800f2fc:	4614      	mov	r4, r2
 800f2fe:	18d5      	adds	r5, r2, r3
 800f300:	42ac      	cmp	r4, r5
 800f302:	d101      	bne.n	800f308 <__sfputs_r+0x12>
 800f304:	2000      	movs	r0, #0
 800f306:	e007      	b.n	800f318 <__sfputs_r+0x22>
 800f308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f30c:	463a      	mov	r2, r7
 800f30e:	4630      	mov	r0, r6
 800f310:	f7ff ffda 	bl	800f2c8 <__sfputc_r>
 800f314:	1c43      	adds	r3, r0, #1
 800f316:	d1f3      	bne.n	800f300 <__sfputs_r+0xa>
 800f318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f31c <_vfiprintf_r>:
 800f31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f320:	460d      	mov	r5, r1
 800f322:	b09d      	sub	sp, #116	; 0x74
 800f324:	4614      	mov	r4, r2
 800f326:	4698      	mov	r8, r3
 800f328:	4606      	mov	r6, r0
 800f32a:	b118      	cbz	r0, 800f334 <_vfiprintf_r+0x18>
 800f32c:	6983      	ldr	r3, [r0, #24]
 800f32e:	b90b      	cbnz	r3, 800f334 <_vfiprintf_r+0x18>
 800f330:	f7ff fcd4 	bl	800ecdc <__sinit>
 800f334:	4b89      	ldr	r3, [pc, #548]	; (800f55c <_vfiprintf_r+0x240>)
 800f336:	429d      	cmp	r5, r3
 800f338:	d11b      	bne.n	800f372 <_vfiprintf_r+0x56>
 800f33a:	6875      	ldr	r5, [r6, #4]
 800f33c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f33e:	07d9      	lsls	r1, r3, #31
 800f340:	d405      	bmi.n	800f34e <_vfiprintf_r+0x32>
 800f342:	89ab      	ldrh	r3, [r5, #12]
 800f344:	059a      	lsls	r2, r3, #22
 800f346:	d402      	bmi.n	800f34e <_vfiprintf_r+0x32>
 800f348:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f34a:	f7ff fd77 	bl	800ee3c <__retarget_lock_acquire_recursive>
 800f34e:	89ab      	ldrh	r3, [r5, #12]
 800f350:	071b      	lsls	r3, r3, #28
 800f352:	d501      	bpl.n	800f358 <_vfiprintf_r+0x3c>
 800f354:	692b      	ldr	r3, [r5, #16]
 800f356:	b9eb      	cbnz	r3, 800f394 <_vfiprintf_r+0x78>
 800f358:	4629      	mov	r1, r5
 800f35a:	4630      	mov	r0, r6
 800f35c:	f000 fb5a 	bl	800fa14 <__swsetup_r>
 800f360:	b1c0      	cbz	r0, 800f394 <_vfiprintf_r+0x78>
 800f362:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f364:	07dc      	lsls	r4, r3, #31
 800f366:	d50e      	bpl.n	800f386 <_vfiprintf_r+0x6a>
 800f368:	f04f 30ff 	mov.w	r0, #4294967295
 800f36c:	b01d      	add	sp, #116	; 0x74
 800f36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f372:	4b7b      	ldr	r3, [pc, #492]	; (800f560 <_vfiprintf_r+0x244>)
 800f374:	429d      	cmp	r5, r3
 800f376:	d101      	bne.n	800f37c <_vfiprintf_r+0x60>
 800f378:	68b5      	ldr	r5, [r6, #8]
 800f37a:	e7df      	b.n	800f33c <_vfiprintf_r+0x20>
 800f37c:	4b79      	ldr	r3, [pc, #484]	; (800f564 <_vfiprintf_r+0x248>)
 800f37e:	429d      	cmp	r5, r3
 800f380:	bf08      	it	eq
 800f382:	68f5      	ldreq	r5, [r6, #12]
 800f384:	e7da      	b.n	800f33c <_vfiprintf_r+0x20>
 800f386:	89ab      	ldrh	r3, [r5, #12]
 800f388:	0598      	lsls	r0, r3, #22
 800f38a:	d4ed      	bmi.n	800f368 <_vfiprintf_r+0x4c>
 800f38c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f38e:	f7ff fd56 	bl	800ee3e <__retarget_lock_release_recursive>
 800f392:	e7e9      	b.n	800f368 <_vfiprintf_r+0x4c>
 800f394:	2300      	movs	r3, #0
 800f396:	9309      	str	r3, [sp, #36]	; 0x24
 800f398:	2320      	movs	r3, #32
 800f39a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f39e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3a2:	2330      	movs	r3, #48	; 0x30
 800f3a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f568 <_vfiprintf_r+0x24c>
 800f3a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3ac:	f04f 0901 	mov.w	r9, #1
 800f3b0:	4623      	mov	r3, r4
 800f3b2:	469a      	mov	sl, r3
 800f3b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3b8:	b10a      	cbz	r2, 800f3be <_vfiprintf_r+0xa2>
 800f3ba:	2a25      	cmp	r2, #37	; 0x25
 800f3bc:	d1f9      	bne.n	800f3b2 <_vfiprintf_r+0x96>
 800f3be:	ebba 0b04 	subs.w	fp, sl, r4
 800f3c2:	d00b      	beq.n	800f3dc <_vfiprintf_r+0xc0>
 800f3c4:	465b      	mov	r3, fp
 800f3c6:	4622      	mov	r2, r4
 800f3c8:	4629      	mov	r1, r5
 800f3ca:	4630      	mov	r0, r6
 800f3cc:	f7ff ff93 	bl	800f2f6 <__sfputs_r>
 800f3d0:	3001      	adds	r0, #1
 800f3d2:	f000 80aa 	beq.w	800f52a <_vfiprintf_r+0x20e>
 800f3d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3d8:	445a      	add	r2, fp
 800f3da:	9209      	str	r2, [sp, #36]	; 0x24
 800f3dc:	f89a 3000 	ldrb.w	r3, [sl]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	f000 80a2 	beq.w	800f52a <_vfiprintf_r+0x20e>
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	f04f 32ff 	mov.w	r2, #4294967295
 800f3ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f3f0:	f10a 0a01 	add.w	sl, sl, #1
 800f3f4:	9304      	str	r3, [sp, #16]
 800f3f6:	9307      	str	r3, [sp, #28]
 800f3f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f3fc:	931a      	str	r3, [sp, #104]	; 0x68
 800f3fe:	4654      	mov	r4, sl
 800f400:	2205      	movs	r2, #5
 800f402:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f406:	4858      	ldr	r0, [pc, #352]	; (800f568 <_vfiprintf_r+0x24c>)
 800f408:	f7f0 fef2 	bl	80001f0 <memchr>
 800f40c:	9a04      	ldr	r2, [sp, #16]
 800f40e:	b9d8      	cbnz	r0, 800f448 <_vfiprintf_r+0x12c>
 800f410:	06d1      	lsls	r1, r2, #27
 800f412:	bf44      	itt	mi
 800f414:	2320      	movmi	r3, #32
 800f416:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f41a:	0713      	lsls	r3, r2, #28
 800f41c:	bf44      	itt	mi
 800f41e:	232b      	movmi	r3, #43	; 0x2b
 800f420:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f424:	f89a 3000 	ldrb.w	r3, [sl]
 800f428:	2b2a      	cmp	r3, #42	; 0x2a
 800f42a:	d015      	beq.n	800f458 <_vfiprintf_r+0x13c>
 800f42c:	9a07      	ldr	r2, [sp, #28]
 800f42e:	4654      	mov	r4, sl
 800f430:	2000      	movs	r0, #0
 800f432:	f04f 0c0a 	mov.w	ip, #10
 800f436:	4621      	mov	r1, r4
 800f438:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f43c:	3b30      	subs	r3, #48	; 0x30
 800f43e:	2b09      	cmp	r3, #9
 800f440:	d94e      	bls.n	800f4e0 <_vfiprintf_r+0x1c4>
 800f442:	b1b0      	cbz	r0, 800f472 <_vfiprintf_r+0x156>
 800f444:	9207      	str	r2, [sp, #28]
 800f446:	e014      	b.n	800f472 <_vfiprintf_r+0x156>
 800f448:	eba0 0308 	sub.w	r3, r0, r8
 800f44c:	fa09 f303 	lsl.w	r3, r9, r3
 800f450:	4313      	orrs	r3, r2
 800f452:	9304      	str	r3, [sp, #16]
 800f454:	46a2      	mov	sl, r4
 800f456:	e7d2      	b.n	800f3fe <_vfiprintf_r+0xe2>
 800f458:	9b03      	ldr	r3, [sp, #12]
 800f45a:	1d19      	adds	r1, r3, #4
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	9103      	str	r1, [sp, #12]
 800f460:	2b00      	cmp	r3, #0
 800f462:	bfbb      	ittet	lt
 800f464:	425b      	neglt	r3, r3
 800f466:	f042 0202 	orrlt.w	r2, r2, #2
 800f46a:	9307      	strge	r3, [sp, #28]
 800f46c:	9307      	strlt	r3, [sp, #28]
 800f46e:	bfb8      	it	lt
 800f470:	9204      	strlt	r2, [sp, #16]
 800f472:	7823      	ldrb	r3, [r4, #0]
 800f474:	2b2e      	cmp	r3, #46	; 0x2e
 800f476:	d10c      	bne.n	800f492 <_vfiprintf_r+0x176>
 800f478:	7863      	ldrb	r3, [r4, #1]
 800f47a:	2b2a      	cmp	r3, #42	; 0x2a
 800f47c:	d135      	bne.n	800f4ea <_vfiprintf_r+0x1ce>
 800f47e:	9b03      	ldr	r3, [sp, #12]
 800f480:	1d1a      	adds	r2, r3, #4
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	9203      	str	r2, [sp, #12]
 800f486:	2b00      	cmp	r3, #0
 800f488:	bfb8      	it	lt
 800f48a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f48e:	3402      	adds	r4, #2
 800f490:	9305      	str	r3, [sp, #20]
 800f492:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f578 <_vfiprintf_r+0x25c>
 800f496:	7821      	ldrb	r1, [r4, #0]
 800f498:	2203      	movs	r2, #3
 800f49a:	4650      	mov	r0, sl
 800f49c:	f7f0 fea8 	bl	80001f0 <memchr>
 800f4a0:	b140      	cbz	r0, 800f4b4 <_vfiprintf_r+0x198>
 800f4a2:	2340      	movs	r3, #64	; 0x40
 800f4a4:	eba0 000a 	sub.w	r0, r0, sl
 800f4a8:	fa03 f000 	lsl.w	r0, r3, r0
 800f4ac:	9b04      	ldr	r3, [sp, #16]
 800f4ae:	4303      	orrs	r3, r0
 800f4b0:	3401      	adds	r4, #1
 800f4b2:	9304      	str	r3, [sp, #16]
 800f4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4b8:	482c      	ldr	r0, [pc, #176]	; (800f56c <_vfiprintf_r+0x250>)
 800f4ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f4be:	2206      	movs	r2, #6
 800f4c0:	f7f0 fe96 	bl	80001f0 <memchr>
 800f4c4:	2800      	cmp	r0, #0
 800f4c6:	d03f      	beq.n	800f548 <_vfiprintf_r+0x22c>
 800f4c8:	4b29      	ldr	r3, [pc, #164]	; (800f570 <_vfiprintf_r+0x254>)
 800f4ca:	bb1b      	cbnz	r3, 800f514 <_vfiprintf_r+0x1f8>
 800f4cc:	9b03      	ldr	r3, [sp, #12]
 800f4ce:	3307      	adds	r3, #7
 800f4d0:	f023 0307 	bic.w	r3, r3, #7
 800f4d4:	3308      	adds	r3, #8
 800f4d6:	9303      	str	r3, [sp, #12]
 800f4d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4da:	443b      	add	r3, r7
 800f4dc:	9309      	str	r3, [sp, #36]	; 0x24
 800f4de:	e767      	b.n	800f3b0 <_vfiprintf_r+0x94>
 800f4e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f4e4:	460c      	mov	r4, r1
 800f4e6:	2001      	movs	r0, #1
 800f4e8:	e7a5      	b.n	800f436 <_vfiprintf_r+0x11a>
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	3401      	adds	r4, #1
 800f4ee:	9305      	str	r3, [sp, #20]
 800f4f0:	4619      	mov	r1, r3
 800f4f2:	f04f 0c0a 	mov.w	ip, #10
 800f4f6:	4620      	mov	r0, r4
 800f4f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4fc:	3a30      	subs	r2, #48	; 0x30
 800f4fe:	2a09      	cmp	r2, #9
 800f500:	d903      	bls.n	800f50a <_vfiprintf_r+0x1ee>
 800f502:	2b00      	cmp	r3, #0
 800f504:	d0c5      	beq.n	800f492 <_vfiprintf_r+0x176>
 800f506:	9105      	str	r1, [sp, #20]
 800f508:	e7c3      	b.n	800f492 <_vfiprintf_r+0x176>
 800f50a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f50e:	4604      	mov	r4, r0
 800f510:	2301      	movs	r3, #1
 800f512:	e7f0      	b.n	800f4f6 <_vfiprintf_r+0x1da>
 800f514:	ab03      	add	r3, sp, #12
 800f516:	9300      	str	r3, [sp, #0]
 800f518:	462a      	mov	r2, r5
 800f51a:	4b16      	ldr	r3, [pc, #88]	; (800f574 <_vfiprintf_r+0x258>)
 800f51c:	a904      	add	r1, sp, #16
 800f51e:	4630      	mov	r0, r6
 800f520:	f3af 8000 	nop.w
 800f524:	4607      	mov	r7, r0
 800f526:	1c78      	adds	r0, r7, #1
 800f528:	d1d6      	bne.n	800f4d8 <_vfiprintf_r+0x1bc>
 800f52a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f52c:	07d9      	lsls	r1, r3, #31
 800f52e:	d405      	bmi.n	800f53c <_vfiprintf_r+0x220>
 800f530:	89ab      	ldrh	r3, [r5, #12]
 800f532:	059a      	lsls	r2, r3, #22
 800f534:	d402      	bmi.n	800f53c <_vfiprintf_r+0x220>
 800f536:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f538:	f7ff fc81 	bl	800ee3e <__retarget_lock_release_recursive>
 800f53c:	89ab      	ldrh	r3, [r5, #12]
 800f53e:	065b      	lsls	r3, r3, #25
 800f540:	f53f af12 	bmi.w	800f368 <_vfiprintf_r+0x4c>
 800f544:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f546:	e711      	b.n	800f36c <_vfiprintf_r+0x50>
 800f548:	ab03      	add	r3, sp, #12
 800f54a:	9300      	str	r3, [sp, #0]
 800f54c:	462a      	mov	r2, r5
 800f54e:	4b09      	ldr	r3, [pc, #36]	; (800f574 <_vfiprintf_r+0x258>)
 800f550:	a904      	add	r1, sp, #16
 800f552:	4630      	mov	r0, r6
 800f554:	f000 f880 	bl	800f658 <_printf_i>
 800f558:	e7e4      	b.n	800f524 <_vfiprintf_r+0x208>
 800f55a:	bf00      	nop
 800f55c:	08012b00 	.word	0x08012b00
 800f560:	08012b20 	.word	0x08012b20
 800f564:	08012ae0 	.word	0x08012ae0
 800f568:	08012b40 	.word	0x08012b40
 800f56c:	08012b4a 	.word	0x08012b4a
 800f570:	00000000 	.word	0x00000000
 800f574:	0800f2f7 	.word	0x0800f2f7
 800f578:	08012b46 	.word	0x08012b46

0800f57c <_printf_common>:
 800f57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f580:	4616      	mov	r6, r2
 800f582:	4699      	mov	r9, r3
 800f584:	688a      	ldr	r2, [r1, #8]
 800f586:	690b      	ldr	r3, [r1, #16]
 800f588:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f58c:	4293      	cmp	r3, r2
 800f58e:	bfb8      	it	lt
 800f590:	4613      	movlt	r3, r2
 800f592:	6033      	str	r3, [r6, #0]
 800f594:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f598:	4607      	mov	r7, r0
 800f59a:	460c      	mov	r4, r1
 800f59c:	b10a      	cbz	r2, 800f5a2 <_printf_common+0x26>
 800f59e:	3301      	adds	r3, #1
 800f5a0:	6033      	str	r3, [r6, #0]
 800f5a2:	6823      	ldr	r3, [r4, #0]
 800f5a4:	0699      	lsls	r1, r3, #26
 800f5a6:	bf42      	ittt	mi
 800f5a8:	6833      	ldrmi	r3, [r6, #0]
 800f5aa:	3302      	addmi	r3, #2
 800f5ac:	6033      	strmi	r3, [r6, #0]
 800f5ae:	6825      	ldr	r5, [r4, #0]
 800f5b0:	f015 0506 	ands.w	r5, r5, #6
 800f5b4:	d106      	bne.n	800f5c4 <_printf_common+0x48>
 800f5b6:	f104 0a19 	add.w	sl, r4, #25
 800f5ba:	68e3      	ldr	r3, [r4, #12]
 800f5bc:	6832      	ldr	r2, [r6, #0]
 800f5be:	1a9b      	subs	r3, r3, r2
 800f5c0:	42ab      	cmp	r3, r5
 800f5c2:	dc26      	bgt.n	800f612 <_printf_common+0x96>
 800f5c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f5c8:	1e13      	subs	r3, r2, #0
 800f5ca:	6822      	ldr	r2, [r4, #0]
 800f5cc:	bf18      	it	ne
 800f5ce:	2301      	movne	r3, #1
 800f5d0:	0692      	lsls	r2, r2, #26
 800f5d2:	d42b      	bmi.n	800f62c <_printf_common+0xb0>
 800f5d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f5d8:	4649      	mov	r1, r9
 800f5da:	4638      	mov	r0, r7
 800f5dc:	47c0      	blx	r8
 800f5de:	3001      	adds	r0, #1
 800f5e0:	d01e      	beq.n	800f620 <_printf_common+0xa4>
 800f5e2:	6823      	ldr	r3, [r4, #0]
 800f5e4:	68e5      	ldr	r5, [r4, #12]
 800f5e6:	6832      	ldr	r2, [r6, #0]
 800f5e8:	f003 0306 	and.w	r3, r3, #6
 800f5ec:	2b04      	cmp	r3, #4
 800f5ee:	bf08      	it	eq
 800f5f0:	1aad      	subeq	r5, r5, r2
 800f5f2:	68a3      	ldr	r3, [r4, #8]
 800f5f4:	6922      	ldr	r2, [r4, #16]
 800f5f6:	bf0c      	ite	eq
 800f5f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f5fc:	2500      	movne	r5, #0
 800f5fe:	4293      	cmp	r3, r2
 800f600:	bfc4      	itt	gt
 800f602:	1a9b      	subgt	r3, r3, r2
 800f604:	18ed      	addgt	r5, r5, r3
 800f606:	2600      	movs	r6, #0
 800f608:	341a      	adds	r4, #26
 800f60a:	42b5      	cmp	r5, r6
 800f60c:	d11a      	bne.n	800f644 <_printf_common+0xc8>
 800f60e:	2000      	movs	r0, #0
 800f610:	e008      	b.n	800f624 <_printf_common+0xa8>
 800f612:	2301      	movs	r3, #1
 800f614:	4652      	mov	r2, sl
 800f616:	4649      	mov	r1, r9
 800f618:	4638      	mov	r0, r7
 800f61a:	47c0      	blx	r8
 800f61c:	3001      	adds	r0, #1
 800f61e:	d103      	bne.n	800f628 <_printf_common+0xac>
 800f620:	f04f 30ff 	mov.w	r0, #4294967295
 800f624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f628:	3501      	adds	r5, #1
 800f62a:	e7c6      	b.n	800f5ba <_printf_common+0x3e>
 800f62c:	18e1      	adds	r1, r4, r3
 800f62e:	1c5a      	adds	r2, r3, #1
 800f630:	2030      	movs	r0, #48	; 0x30
 800f632:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f636:	4422      	add	r2, r4
 800f638:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f63c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f640:	3302      	adds	r3, #2
 800f642:	e7c7      	b.n	800f5d4 <_printf_common+0x58>
 800f644:	2301      	movs	r3, #1
 800f646:	4622      	mov	r2, r4
 800f648:	4649      	mov	r1, r9
 800f64a:	4638      	mov	r0, r7
 800f64c:	47c0      	blx	r8
 800f64e:	3001      	adds	r0, #1
 800f650:	d0e6      	beq.n	800f620 <_printf_common+0xa4>
 800f652:	3601      	adds	r6, #1
 800f654:	e7d9      	b.n	800f60a <_printf_common+0x8e>
	...

0800f658 <_printf_i>:
 800f658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f65c:	7e0f      	ldrb	r7, [r1, #24]
 800f65e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f660:	2f78      	cmp	r7, #120	; 0x78
 800f662:	4691      	mov	r9, r2
 800f664:	4680      	mov	r8, r0
 800f666:	460c      	mov	r4, r1
 800f668:	469a      	mov	sl, r3
 800f66a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f66e:	d807      	bhi.n	800f680 <_printf_i+0x28>
 800f670:	2f62      	cmp	r7, #98	; 0x62
 800f672:	d80a      	bhi.n	800f68a <_printf_i+0x32>
 800f674:	2f00      	cmp	r7, #0
 800f676:	f000 80d8 	beq.w	800f82a <_printf_i+0x1d2>
 800f67a:	2f58      	cmp	r7, #88	; 0x58
 800f67c:	f000 80a3 	beq.w	800f7c6 <_printf_i+0x16e>
 800f680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f684:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f688:	e03a      	b.n	800f700 <_printf_i+0xa8>
 800f68a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f68e:	2b15      	cmp	r3, #21
 800f690:	d8f6      	bhi.n	800f680 <_printf_i+0x28>
 800f692:	a101      	add	r1, pc, #4	; (adr r1, 800f698 <_printf_i+0x40>)
 800f694:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f698:	0800f6f1 	.word	0x0800f6f1
 800f69c:	0800f705 	.word	0x0800f705
 800f6a0:	0800f681 	.word	0x0800f681
 800f6a4:	0800f681 	.word	0x0800f681
 800f6a8:	0800f681 	.word	0x0800f681
 800f6ac:	0800f681 	.word	0x0800f681
 800f6b0:	0800f705 	.word	0x0800f705
 800f6b4:	0800f681 	.word	0x0800f681
 800f6b8:	0800f681 	.word	0x0800f681
 800f6bc:	0800f681 	.word	0x0800f681
 800f6c0:	0800f681 	.word	0x0800f681
 800f6c4:	0800f811 	.word	0x0800f811
 800f6c8:	0800f735 	.word	0x0800f735
 800f6cc:	0800f7f3 	.word	0x0800f7f3
 800f6d0:	0800f681 	.word	0x0800f681
 800f6d4:	0800f681 	.word	0x0800f681
 800f6d8:	0800f833 	.word	0x0800f833
 800f6dc:	0800f681 	.word	0x0800f681
 800f6e0:	0800f735 	.word	0x0800f735
 800f6e4:	0800f681 	.word	0x0800f681
 800f6e8:	0800f681 	.word	0x0800f681
 800f6ec:	0800f7fb 	.word	0x0800f7fb
 800f6f0:	682b      	ldr	r3, [r5, #0]
 800f6f2:	1d1a      	adds	r2, r3, #4
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	602a      	str	r2, [r5, #0]
 800f6f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f700:	2301      	movs	r3, #1
 800f702:	e0a3      	b.n	800f84c <_printf_i+0x1f4>
 800f704:	6820      	ldr	r0, [r4, #0]
 800f706:	6829      	ldr	r1, [r5, #0]
 800f708:	0606      	lsls	r6, r0, #24
 800f70a:	f101 0304 	add.w	r3, r1, #4
 800f70e:	d50a      	bpl.n	800f726 <_printf_i+0xce>
 800f710:	680e      	ldr	r6, [r1, #0]
 800f712:	602b      	str	r3, [r5, #0]
 800f714:	2e00      	cmp	r6, #0
 800f716:	da03      	bge.n	800f720 <_printf_i+0xc8>
 800f718:	232d      	movs	r3, #45	; 0x2d
 800f71a:	4276      	negs	r6, r6
 800f71c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f720:	485e      	ldr	r0, [pc, #376]	; (800f89c <_printf_i+0x244>)
 800f722:	230a      	movs	r3, #10
 800f724:	e019      	b.n	800f75a <_printf_i+0x102>
 800f726:	680e      	ldr	r6, [r1, #0]
 800f728:	602b      	str	r3, [r5, #0]
 800f72a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f72e:	bf18      	it	ne
 800f730:	b236      	sxthne	r6, r6
 800f732:	e7ef      	b.n	800f714 <_printf_i+0xbc>
 800f734:	682b      	ldr	r3, [r5, #0]
 800f736:	6820      	ldr	r0, [r4, #0]
 800f738:	1d19      	adds	r1, r3, #4
 800f73a:	6029      	str	r1, [r5, #0]
 800f73c:	0601      	lsls	r1, r0, #24
 800f73e:	d501      	bpl.n	800f744 <_printf_i+0xec>
 800f740:	681e      	ldr	r6, [r3, #0]
 800f742:	e002      	b.n	800f74a <_printf_i+0xf2>
 800f744:	0646      	lsls	r6, r0, #25
 800f746:	d5fb      	bpl.n	800f740 <_printf_i+0xe8>
 800f748:	881e      	ldrh	r6, [r3, #0]
 800f74a:	4854      	ldr	r0, [pc, #336]	; (800f89c <_printf_i+0x244>)
 800f74c:	2f6f      	cmp	r7, #111	; 0x6f
 800f74e:	bf0c      	ite	eq
 800f750:	2308      	moveq	r3, #8
 800f752:	230a      	movne	r3, #10
 800f754:	2100      	movs	r1, #0
 800f756:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f75a:	6865      	ldr	r5, [r4, #4]
 800f75c:	60a5      	str	r5, [r4, #8]
 800f75e:	2d00      	cmp	r5, #0
 800f760:	bfa2      	ittt	ge
 800f762:	6821      	ldrge	r1, [r4, #0]
 800f764:	f021 0104 	bicge.w	r1, r1, #4
 800f768:	6021      	strge	r1, [r4, #0]
 800f76a:	b90e      	cbnz	r6, 800f770 <_printf_i+0x118>
 800f76c:	2d00      	cmp	r5, #0
 800f76e:	d04d      	beq.n	800f80c <_printf_i+0x1b4>
 800f770:	4615      	mov	r5, r2
 800f772:	fbb6 f1f3 	udiv	r1, r6, r3
 800f776:	fb03 6711 	mls	r7, r3, r1, r6
 800f77a:	5dc7      	ldrb	r7, [r0, r7]
 800f77c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f780:	4637      	mov	r7, r6
 800f782:	42bb      	cmp	r3, r7
 800f784:	460e      	mov	r6, r1
 800f786:	d9f4      	bls.n	800f772 <_printf_i+0x11a>
 800f788:	2b08      	cmp	r3, #8
 800f78a:	d10b      	bne.n	800f7a4 <_printf_i+0x14c>
 800f78c:	6823      	ldr	r3, [r4, #0]
 800f78e:	07de      	lsls	r6, r3, #31
 800f790:	d508      	bpl.n	800f7a4 <_printf_i+0x14c>
 800f792:	6923      	ldr	r3, [r4, #16]
 800f794:	6861      	ldr	r1, [r4, #4]
 800f796:	4299      	cmp	r1, r3
 800f798:	bfde      	ittt	le
 800f79a:	2330      	movle	r3, #48	; 0x30
 800f79c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f7a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f7a4:	1b52      	subs	r2, r2, r5
 800f7a6:	6122      	str	r2, [r4, #16]
 800f7a8:	f8cd a000 	str.w	sl, [sp]
 800f7ac:	464b      	mov	r3, r9
 800f7ae:	aa03      	add	r2, sp, #12
 800f7b0:	4621      	mov	r1, r4
 800f7b2:	4640      	mov	r0, r8
 800f7b4:	f7ff fee2 	bl	800f57c <_printf_common>
 800f7b8:	3001      	adds	r0, #1
 800f7ba:	d14c      	bne.n	800f856 <_printf_i+0x1fe>
 800f7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f7c0:	b004      	add	sp, #16
 800f7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7c6:	4835      	ldr	r0, [pc, #212]	; (800f89c <_printf_i+0x244>)
 800f7c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f7cc:	6829      	ldr	r1, [r5, #0]
 800f7ce:	6823      	ldr	r3, [r4, #0]
 800f7d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800f7d4:	6029      	str	r1, [r5, #0]
 800f7d6:	061d      	lsls	r5, r3, #24
 800f7d8:	d514      	bpl.n	800f804 <_printf_i+0x1ac>
 800f7da:	07df      	lsls	r7, r3, #31
 800f7dc:	bf44      	itt	mi
 800f7de:	f043 0320 	orrmi.w	r3, r3, #32
 800f7e2:	6023      	strmi	r3, [r4, #0]
 800f7e4:	b91e      	cbnz	r6, 800f7ee <_printf_i+0x196>
 800f7e6:	6823      	ldr	r3, [r4, #0]
 800f7e8:	f023 0320 	bic.w	r3, r3, #32
 800f7ec:	6023      	str	r3, [r4, #0]
 800f7ee:	2310      	movs	r3, #16
 800f7f0:	e7b0      	b.n	800f754 <_printf_i+0xfc>
 800f7f2:	6823      	ldr	r3, [r4, #0]
 800f7f4:	f043 0320 	orr.w	r3, r3, #32
 800f7f8:	6023      	str	r3, [r4, #0]
 800f7fa:	2378      	movs	r3, #120	; 0x78
 800f7fc:	4828      	ldr	r0, [pc, #160]	; (800f8a0 <_printf_i+0x248>)
 800f7fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f802:	e7e3      	b.n	800f7cc <_printf_i+0x174>
 800f804:	0659      	lsls	r1, r3, #25
 800f806:	bf48      	it	mi
 800f808:	b2b6      	uxthmi	r6, r6
 800f80a:	e7e6      	b.n	800f7da <_printf_i+0x182>
 800f80c:	4615      	mov	r5, r2
 800f80e:	e7bb      	b.n	800f788 <_printf_i+0x130>
 800f810:	682b      	ldr	r3, [r5, #0]
 800f812:	6826      	ldr	r6, [r4, #0]
 800f814:	6961      	ldr	r1, [r4, #20]
 800f816:	1d18      	adds	r0, r3, #4
 800f818:	6028      	str	r0, [r5, #0]
 800f81a:	0635      	lsls	r5, r6, #24
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	d501      	bpl.n	800f824 <_printf_i+0x1cc>
 800f820:	6019      	str	r1, [r3, #0]
 800f822:	e002      	b.n	800f82a <_printf_i+0x1d2>
 800f824:	0670      	lsls	r0, r6, #25
 800f826:	d5fb      	bpl.n	800f820 <_printf_i+0x1c8>
 800f828:	8019      	strh	r1, [r3, #0]
 800f82a:	2300      	movs	r3, #0
 800f82c:	6123      	str	r3, [r4, #16]
 800f82e:	4615      	mov	r5, r2
 800f830:	e7ba      	b.n	800f7a8 <_printf_i+0x150>
 800f832:	682b      	ldr	r3, [r5, #0]
 800f834:	1d1a      	adds	r2, r3, #4
 800f836:	602a      	str	r2, [r5, #0]
 800f838:	681d      	ldr	r5, [r3, #0]
 800f83a:	6862      	ldr	r2, [r4, #4]
 800f83c:	2100      	movs	r1, #0
 800f83e:	4628      	mov	r0, r5
 800f840:	f7f0 fcd6 	bl	80001f0 <memchr>
 800f844:	b108      	cbz	r0, 800f84a <_printf_i+0x1f2>
 800f846:	1b40      	subs	r0, r0, r5
 800f848:	6060      	str	r0, [r4, #4]
 800f84a:	6863      	ldr	r3, [r4, #4]
 800f84c:	6123      	str	r3, [r4, #16]
 800f84e:	2300      	movs	r3, #0
 800f850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f854:	e7a8      	b.n	800f7a8 <_printf_i+0x150>
 800f856:	6923      	ldr	r3, [r4, #16]
 800f858:	462a      	mov	r2, r5
 800f85a:	4649      	mov	r1, r9
 800f85c:	4640      	mov	r0, r8
 800f85e:	47d0      	blx	sl
 800f860:	3001      	adds	r0, #1
 800f862:	d0ab      	beq.n	800f7bc <_printf_i+0x164>
 800f864:	6823      	ldr	r3, [r4, #0]
 800f866:	079b      	lsls	r3, r3, #30
 800f868:	d413      	bmi.n	800f892 <_printf_i+0x23a>
 800f86a:	68e0      	ldr	r0, [r4, #12]
 800f86c:	9b03      	ldr	r3, [sp, #12]
 800f86e:	4298      	cmp	r0, r3
 800f870:	bfb8      	it	lt
 800f872:	4618      	movlt	r0, r3
 800f874:	e7a4      	b.n	800f7c0 <_printf_i+0x168>
 800f876:	2301      	movs	r3, #1
 800f878:	4632      	mov	r2, r6
 800f87a:	4649      	mov	r1, r9
 800f87c:	4640      	mov	r0, r8
 800f87e:	47d0      	blx	sl
 800f880:	3001      	adds	r0, #1
 800f882:	d09b      	beq.n	800f7bc <_printf_i+0x164>
 800f884:	3501      	adds	r5, #1
 800f886:	68e3      	ldr	r3, [r4, #12]
 800f888:	9903      	ldr	r1, [sp, #12]
 800f88a:	1a5b      	subs	r3, r3, r1
 800f88c:	42ab      	cmp	r3, r5
 800f88e:	dcf2      	bgt.n	800f876 <_printf_i+0x21e>
 800f890:	e7eb      	b.n	800f86a <_printf_i+0x212>
 800f892:	2500      	movs	r5, #0
 800f894:	f104 0619 	add.w	r6, r4, #25
 800f898:	e7f5      	b.n	800f886 <_printf_i+0x22e>
 800f89a:	bf00      	nop
 800f89c:	08012b51 	.word	0x08012b51
 800f8a0:	08012b62 	.word	0x08012b62

0800f8a4 <_sbrk_r>:
 800f8a4:	b538      	push	{r3, r4, r5, lr}
 800f8a6:	4d06      	ldr	r5, [pc, #24]	; (800f8c0 <_sbrk_r+0x1c>)
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	4604      	mov	r4, r0
 800f8ac:	4608      	mov	r0, r1
 800f8ae:	602b      	str	r3, [r5, #0]
 800f8b0:	f7f1 fb6e 	bl	8000f90 <_sbrk>
 800f8b4:	1c43      	adds	r3, r0, #1
 800f8b6:	d102      	bne.n	800f8be <_sbrk_r+0x1a>
 800f8b8:	682b      	ldr	r3, [r5, #0]
 800f8ba:	b103      	cbz	r3, 800f8be <_sbrk_r+0x1a>
 800f8bc:	6023      	str	r3, [r4, #0]
 800f8be:	bd38      	pop	{r3, r4, r5, pc}
 800f8c0:	20008498 	.word	0x20008498

0800f8c4 <__sread>:
 800f8c4:	b510      	push	{r4, lr}
 800f8c6:	460c      	mov	r4, r1
 800f8c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8cc:	f000 fa9e 	bl	800fe0c <_read_r>
 800f8d0:	2800      	cmp	r0, #0
 800f8d2:	bfab      	itete	ge
 800f8d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f8d6:	89a3      	ldrhlt	r3, [r4, #12]
 800f8d8:	181b      	addge	r3, r3, r0
 800f8da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f8de:	bfac      	ite	ge
 800f8e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800f8e2:	81a3      	strhlt	r3, [r4, #12]
 800f8e4:	bd10      	pop	{r4, pc}

0800f8e6 <__swrite>:
 800f8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ea:	461f      	mov	r7, r3
 800f8ec:	898b      	ldrh	r3, [r1, #12]
 800f8ee:	05db      	lsls	r3, r3, #23
 800f8f0:	4605      	mov	r5, r0
 800f8f2:	460c      	mov	r4, r1
 800f8f4:	4616      	mov	r6, r2
 800f8f6:	d505      	bpl.n	800f904 <__swrite+0x1e>
 800f8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8fc:	2302      	movs	r3, #2
 800f8fe:	2200      	movs	r2, #0
 800f900:	f000 f9d0 	bl	800fca4 <_lseek_r>
 800f904:	89a3      	ldrh	r3, [r4, #12]
 800f906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f90a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f90e:	81a3      	strh	r3, [r4, #12]
 800f910:	4632      	mov	r2, r6
 800f912:	463b      	mov	r3, r7
 800f914:	4628      	mov	r0, r5
 800f916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f91a:	f000 b869 	b.w	800f9f0 <_write_r>

0800f91e <__sseek>:
 800f91e:	b510      	push	{r4, lr}
 800f920:	460c      	mov	r4, r1
 800f922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f926:	f000 f9bd 	bl	800fca4 <_lseek_r>
 800f92a:	1c43      	adds	r3, r0, #1
 800f92c:	89a3      	ldrh	r3, [r4, #12]
 800f92e:	bf15      	itete	ne
 800f930:	6560      	strne	r0, [r4, #84]	; 0x54
 800f932:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f936:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f93a:	81a3      	strheq	r3, [r4, #12]
 800f93c:	bf18      	it	ne
 800f93e:	81a3      	strhne	r3, [r4, #12]
 800f940:	bd10      	pop	{r4, pc}

0800f942 <__sclose>:
 800f942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f946:	f000 b8db 	b.w	800fb00 <_close_r>
	...

0800f94c <__swbuf_r>:
 800f94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f94e:	460e      	mov	r6, r1
 800f950:	4614      	mov	r4, r2
 800f952:	4605      	mov	r5, r0
 800f954:	b118      	cbz	r0, 800f95e <__swbuf_r+0x12>
 800f956:	6983      	ldr	r3, [r0, #24]
 800f958:	b90b      	cbnz	r3, 800f95e <__swbuf_r+0x12>
 800f95a:	f7ff f9bf 	bl	800ecdc <__sinit>
 800f95e:	4b21      	ldr	r3, [pc, #132]	; (800f9e4 <__swbuf_r+0x98>)
 800f960:	429c      	cmp	r4, r3
 800f962:	d12b      	bne.n	800f9bc <__swbuf_r+0x70>
 800f964:	686c      	ldr	r4, [r5, #4]
 800f966:	69a3      	ldr	r3, [r4, #24]
 800f968:	60a3      	str	r3, [r4, #8]
 800f96a:	89a3      	ldrh	r3, [r4, #12]
 800f96c:	071a      	lsls	r2, r3, #28
 800f96e:	d52f      	bpl.n	800f9d0 <__swbuf_r+0x84>
 800f970:	6923      	ldr	r3, [r4, #16]
 800f972:	b36b      	cbz	r3, 800f9d0 <__swbuf_r+0x84>
 800f974:	6923      	ldr	r3, [r4, #16]
 800f976:	6820      	ldr	r0, [r4, #0]
 800f978:	1ac0      	subs	r0, r0, r3
 800f97a:	6963      	ldr	r3, [r4, #20]
 800f97c:	b2f6      	uxtb	r6, r6
 800f97e:	4283      	cmp	r3, r0
 800f980:	4637      	mov	r7, r6
 800f982:	dc04      	bgt.n	800f98e <__swbuf_r+0x42>
 800f984:	4621      	mov	r1, r4
 800f986:	4628      	mov	r0, r5
 800f988:	f000 f950 	bl	800fc2c <_fflush_r>
 800f98c:	bb30      	cbnz	r0, 800f9dc <__swbuf_r+0x90>
 800f98e:	68a3      	ldr	r3, [r4, #8]
 800f990:	3b01      	subs	r3, #1
 800f992:	60a3      	str	r3, [r4, #8]
 800f994:	6823      	ldr	r3, [r4, #0]
 800f996:	1c5a      	adds	r2, r3, #1
 800f998:	6022      	str	r2, [r4, #0]
 800f99a:	701e      	strb	r6, [r3, #0]
 800f99c:	6963      	ldr	r3, [r4, #20]
 800f99e:	3001      	adds	r0, #1
 800f9a0:	4283      	cmp	r3, r0
 800f9a2:	d004      	beq.n	800f9ae <__swbuf_r+0x62>
 800f9a4:	89a3      	ldrh	r3, [r4, #12]
 800f9a6:	07db      	lsls	r3, r3, #31
 800f9a8:	d506      	bpl.n	800f9b8 <__swbuf_r+0x6c>
 800f9aa:	2e0a      	cmp	r6, #10
 800f9ac:	d104      	bne.n	800f9b8 <__swbuf_r+0x6c>
 800f9ae:	4621      	mov	r1, r4
 800f9b0:	4628      	mov	r0, r5
 800f9b2:	f000 f93b 	bl	800fc2c <_fflush_r>
 800f9b6:	b988      	cbnz	r0, 800f9dc <__swbuf_r+0x90>
 800f9b8:	4638      	mov	r0, r7
 800f9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9bc:	4b0a      	ldr	r3, [pc, #40]	; (800f9e8 <__swbuf_r+0x9c>)
 800f9be:	429c      	cmp	r4, r3
 800f9c0:	d101      	bne.n	800f9c6 <__swbuf_r+0x7a>
 800f9c2:	68ac      	ldr	r4, [r5, #8]
 800f9c4:	e7cf      	b.n	800f966 <__swbuf_r+0x1a>
 800f9c6:	4b09      	ldr	r3, [pc, #36]	; (800f9ec <__swbuf_r+0xa0>)
 800f9c8:	429c      	cmp	r4, r3
 800f9ca:	bf08      	it	eq
 800f9cc:	68ec      	ldreq	r4, [r5, #12]
 800f9ce:	e7ca      	b.n	800f966 <__swbuf_r+0x1a>
 800f9d0:	4621      	mov	r1, r4
 800f9d2:	4628      	mov	r0, r5
 800f9d4:	f000 f81e 	bl	800fa14 <__swsetup_r>
 800f9d8:	2800      	cmp	r0, #0
 800f9da:	d0cb      	beq.n	800f974 <__swbuf_r+0x28>
 800f9dc:	f04f 37ff 	mov.w	r7, #4294967295
 800f9e0:	e7ea      	b.n	800f9b8 <__swbuf_r+0x6c>
 800f9e2:	bf00      	nop
 800f9e4:	08012b00 	.word	0x08012b00
 800f9e8:	08012b20 	.word	0x08012b20
 800f9ec:	08012ae0 	.word	0x08012ae0

0800f9f0 <_write_r>:
 800f9f0:	b538      	push	{r3, r4, r5, lr}
 800f9f2:	4d07      	ldr	r5, [pc, #28]	; (800fa10 <_write_r+0x20>)
 800f9f4:	4604      	mov	r4, r0
 800f9f6:	4608      	mov	r0, r1
 800f9f8:	4611      	mov	r1, r2
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	602a      	str	r2, [r5, #0]
 800f9fe:	461a      	mov	r2, r3
 800fa00:	f7f1 fa75 	bl	8000eee <_write>
 800fa04:	1c43      	adds	r3, r0, #1
 800fa06:	d102      	bne.n	800fa0e <_write_r+0x1e>
 800fa08:	682b      	ldr	r3, [r5, #0]
 800fa0a:	b103      	cbz	r3, 800fa0e <_write_r+0x1e>
 800fa0c:	6023      	str	r3, [r4, #0]
 800fa0e:	bd38      	pop	{r3, r4, r5, pc}
 800fa10:	20008498 	.word	0x20008498

0800fa14 <__swsetup_r>:
 800fa14:	4b32      	ldr	r3, [pc, #200]	; (800fae0 <__swsetup_r+0xcc>)
 800fa16:	b570      	push	{r4, r5, r6, lr}
 800fa18:	681d      	ldr	r5, [r3, #0]
 800fa1a:	4606      	mov	r6, r0
 800fa1c:	460c      	mov	r4, r1
 800fa1e:	b125      	cbz	r5, 800fa2a <__swsetup_r+0x16>
 800fa20:	69ab      	ldr	r3, [r5, #24]
 800fa22:	b913      	cbnz	r3, 800fa2a <__swsetup_r+0x16>
 800fa24:	4628      	mov	r0, r5
 800fa26:	f7ff f959 	bl	800ecdc <__sinit>
 800fa2a:	4b2e      	ldr	r3, [pc, #184]	; (800fae4 <__swsetup_r+0xd0>)
 800fa2c:	429c      	cmp	r4, r3
 800fa2e:	d10f      	bne.n	800fa50 <__swsetup_r+0x3c>
 800fa30:	686c      	ldr	r4, [r5, #4]
 800fa32:	89a3      	ldrh	r3, [r4, #12]
 800fa34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa38:	0719      	lsls	r1, r3, #28
 800fa3a:	d42c      	bmi.n	800fa96 <__swsetup_r+0x82>
 800fa3c:	06dd      	lsls	r5, r3, #27
 800fa3e:	d411      	bmi.n	800fa64 <__swsetup_r+0x50>
 800fa40:	2309      	movs	r3, #9
 800fa42:	6033      	str	r3, [r6, #0]
 800fa44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fa48:	81a3      	strh	r3, [r4, #12]
 800fa4a:	f04f 30ff 	mov.w	r0, #4294967295
 800fa4e:	e03e      	b.n	800face <__swsetup_r+0xba>
 800fa50:	4b25      	ldr	r3, [pc, #148]	; (800fae8 <__swsetup_r+0xd4>)
 800fa52:	429c      	cmp	r4, r3
 800fa54:	d101      	bne.n	800fa5a <__swsetup_r+0x46>
 800fa56:	68ac      	ldr	r4, [r5, #8]
 800fa58:	e7eb      	b.n	800fa32 <__swsetup_r+0x1e>
 800fa5a:	4b24      	ldr	r3, [pc, #144]	; (800faec <__swsetup_r+0xd8>)
 800fa5c:	429c      	cmp	r4, r3
 800fa5e:	bf08      	it	eq
 800fa60:	68ec      	ldreq	r4, [r5, #12]
 800fa62:	e7e6      	b.n	800fa32 <__swsetup_r+0x1e>
 800fa64:	0758      	lsls	r0, r3, #29
 800fa66:	d512      	bpl.n	800fa8e <__swsetup_r+0x7a>
 800fa68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa6a:	b141      	cbz	r1, 800fa7e <__swsetup_r+0x6a>
 800fa6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa70:	4299      	cmp	r1, r3
 800fa72:	d002      	beq.n	800fa7a <__swsetup_r+0x66>
 800fa74:	4630      	mov	r0, r6
 800fa76:	f7ff f9eb 	bl	800ee50 <_free_r>
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	6363      	str	r3, [r4, #52]	; 0x34
 800fa7e:	89a3      	ldrh	r3, [r4, #12]
 800fa80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fa84:	81a3      	strh	r3, [r4, #12]
 800fa86:	2300      	movs	r3, #0
 800fa88:	6063      	str	r3, [r4, #4]
 800fa8a:	6923      	ldr	r3, [r4, #16]
 800fa8c:	6023      	str	r3, [r4, #0]
 800fa8e:	89a3      	ldrh	r3, [r4, #12]
 800fa90:	f043 0308 	orr.w	r3, r3, #8
 800fa94:	81a3      	strh	r3, [r4, #12]
 800fa96:	6923      	ldr	r3, [r4, #16]
 800fa98:	b94b      	cbnz	r3, 800faae <__swsetup_r+0x9a>
 800fa9a:	89a3      	ldrh	r3, [r4, #12]
 800fa9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800faa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800faa4:	d003      	beq.n	800faae <__swsetup_r+0x9a>
 800faa6:	4621      	mov	r1, r4
 800faa8:	4630      	mov	r0, r6
 800faaa:	f000 f933 	bl	800fd14 <__smakebuf_r>
 800faae:	89a0      	ldrh	r0, [r4, #12]
 800fab0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fab4:	f010 0301 	ands.w	r3, r0, #1
 800fab8:	d00a      	beq.n	800fad0 <__swsetup_r+0xbc>
 800faba:	2300      	movs	r3, #0
 800fabc:	60a3      	str	r3, [r4, #8]
 800fabe:	6963      	ldr	r3, [r4, #20]
 800fac0:	425b      	negs	r3, r3
 800fac2:	61a3      	str	r3, [r4, #24]
 800fac4:	6923      	ldr	r3, [r4, #16]
 800fac6:	b943      	cbnz	r3, 800fada <__swsetup_r+0xc6>
 800fac8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800facc:	d1ba      	bne.n	800fa44 <__swsetup_r+0x30>
 800face:	bd70      	pop	{r4, r5, r6, pc}
 800fad0:	0781      	lsls	r1, r0, #30
 800fad2:	bf58      	it	pl
 800fad4:	6963      	ldrpl	r3, [r4, #20]
 800fad6:	60a3      	str	r3, [r4, #8]
 800fad8:	e7f4      	b.n	800fac4 <__swsetup_r+0xb0>
 800fada:	2000      	movs	r0, #0
 800fadc:	e7f7      	b.n	800face <__swsetup_r+0xba>
 800fade:	bf00      	nop
 800fae0:	20000084 	.word	0x20000084
 800fae4:	08012b00 	.word	0x08012b00
 800fae8:	08012b20 	.word	0x08012b20
 800faec:	08012ae0 	.word	0x08012ae0

0800faf0 <abort>:
 800faf0:	b508      	push	{r3, lr}
 800faf2:	2006      	movs	r0, #6
 800faf4:	f000 f9c4 	bl	800fe80 <raise>
 800faf8:	2001      	movs	r0, #1
 800fafa:	f7f1 f9d1 	bl	8000ea0 <_exit>
	...

0800fb00 <_close_r>:
 800fb00:	b538      	push	{r3, r4, r5, lr}
 800fb02:	4d06      	ldr	r5, [pc, #24]	; (800fb1c <_close_r+0x1c>)
 800fb04:	2300      	movs	r3, #0
 800fb06:	4604      	mov	r4, r0
 800fb08:	4608      	mov	r0, r1
 800fb0a:	602b      	str	r3, [r5, #0]
 800fb0c:	f7f1 fa0b 	bl	8000f26 <_close>
 800fb10:	1c43      	adds	r3, r0, #1
 800fb12:	d102      	bne.n	800fb1a <_close_r+0x1a>
 800fb14:	682b      	ldr	r3, [r5, #0]
 800fb16:	b103      	cbz	r3, 800fb1a <_close_r+0x1a>
 800fb18:	6023      	str	r3, [r4, #0]
 800fb1a:	bd38      	pop	{r3, r4, r5, pc}
 800fb1c:	20008498 	.word	0x20008498

0800fb20 <__sflush_r>:
 800fb20:	898a      	ldrh	r2, [r1, #12]
 800fb22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb26:	4605      	mov	r5, r0
 800fb28:	0710      	lsls	r0, r2, #28
 800fb2a:	460c      	mov	r4, r1
 800fb2c:	d458      	bmi.n	800fbe0 <__sflush_r+0xc0>
 800fb2e:	684b      	ldr	r3, [r1, #4]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	dc05      	bgt.n	800fb40 <__sflush_r+0x20>
 800fb34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	dc02      	bgt.n	800fb40 <__sflush_r+0x20>
 800fb3a:	2000      	movs	r0, #0
 800fb3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb42:	2e00      	cmp	r6, #0
 800fb44:	d0f9      	beq.n	800fb3a <__sflush_r+0x1a>
 800fb46:	2300      	movs	r3, #0
 800fb48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fb4c:	682f      	ldr	r7, [r5, #0]
 800fb4e:	602b      	str	r3, [r5, #0]
 800fb50:	d032      	beq.n	800fbb8 <__sflush_r+0x98>
 800fb52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fb54:	89a3      	ldrh	r3, [r4, #12]
 800fb56:	075a      	lsls	r2, r3, #29
 800fb58:	d505      	bpl.n	800fb66 <__sflush_r+0x46>
 800fb5a:	6863      	ldr	r3, [r4, #4]
 800fb5c:	1ac0      	subs	r0, r0, r3
 800fb5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fb60:	b10b      	cbz	r3, 800fb66 <__sflush_r+0x46>
 800fb62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fb64:	1ac0      	subs	r0, r0, r3
 800fb66:	2300      	movs	r3, #0
 800fb68:	4602      	mov	r2, r0
 800fb6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb6c:	6a21      	ldr	r1, [r4, #32]
 800fb6e:	4628      	mov	r0, r5
 800fb70:	47b0      	blx	r6
 800fb72:	1c43      	adds	r3, r0, #1
 800fb74:	89a3      	ldrh	r3, [r4, #12]
 800fb76:	d106      	bne.n	800fb86 <__sflush_r+0x66>
 800fb78:	6829      	ldr	r1, [r5, #0]
 800fb7a:	291d      	cmp	r1, #29
 800fb7c:	d82c      	bhi.n	800fbd8 <__sflush_r+0xb8>
 800fb7e:	4a2a      	ldr	r2, [pc, #168]	; (800fc28 <__sflush_r+0x108>)
 800fb80:	40ca      	lsrs	r2, r1
 800fb82:	07d6      	lsls	r6, r2, #31
 800fb84:	d528      	bpl.n	800fbd8 <__sflush_r+0xb8>
 800fb86:	2200      	movs	r2, #0
 800fb88:	6062      	str	r2, [r4, #4]
 800fb8a:	04d9      	lsls	r1, r3, #19
 800fb8c:	6922      	ldr	r2, [r4, #16]
 800fb8e:	6022      	str	r2, [r4, #0]
 800fb90:	d504      	bpl.n	800fb9c <__sflush_r+0x7c>
 800fb92:	1c42      	adds	r2, r0, #1
 800fb94:	d101      	bne.n	800fb9a <__sflush_r+0x7a>
 800fb96:	682b      	ldr	r3, [r5, #0]
 800fb98:	b903      	cbnz	r3, 800fb9c <__sflush_r+0x7c>
 800fb9a:	6560      	str	r0, [r4, #84]	; 0x54
 800fb9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb9e:	602f      	str	r7, [r5, #0]
 800fba0:	2900      	cmp	r1, #0
 800fba2:	d0ca      	beq.n	800fb3a <__sflush_r+0x1a>
 800fba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fba8:	4299      	cmp	r1, r3
 800fbaa:	d002      	beq.n	800fbb2 <__sflush_r+0x92>
 800fbac:	4628      	mov	r0, r5
 800fbae:	f7ff f94f 	bl	800ee50 <_free_r>
 800fbb2:	2000      	movs	r0, #0
 800fbb4:	6360      	str	r0, [r4, #52]	; 0x34
 800fbb6:	e7c1      	b.n	800fb3c <__sflush_r+0x1c>
 800fbb8:	6a21      	ldr	r1, [r4, #32]
 800fbba:	2301      	movs	r3, #1
 800fbbc:	4628      	mov	r0, r5
 800fbbe:	47b0      	blx	r6
 800fbc0:	1c41      	adds	r1, r0, #1
 800fbc2:	d1c7      	bne.n	800fb54 <__sflush_r+0x34>
 800fbc4:	682b      	ldr	r3, [r5, #0]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d0c4      	beq.n	800fb54 <__sflush_r+0x34>
 800fbca:	2b1d      	cmp	r3, #29
 800fbcc:	d001      	beq.n	800fbd2 <__sflush_r+0xb2>
 800fbce:	2b16      	cmp	r3, #22
 800fbd0:	d101      	bne.n	800fbd6 <__sflush_r+0xb6>
 800fbd2:	602f      	str	r7, [r5, #0]
 800fbd4:	e7b1      	b.n	800fb3a <__sflush_r+0x1a>
 800fbd6:	89a3      	ldrh	r3, [r4, #12]
 800fbd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbdc:	81a3      	strh	r3, [r4, #12]
 800fbde:	e7ad      	b.n	800fb3c <__sflush_r+0x1c>
 800fbe0:	690f      	ldr	r7, [r1, #16]
 800fbe2:	2f00      	cmp	r7, #0
 800fbe4:	d0a9      	beq.n	800fb3a <__sflush_r+0x1a>
 800fbe6:	0793      	lsls	r3, r2, #30
 800fbe8:	680e      	ldr	r6, [r1, #0]
 800fbea:	bf08      	it	eq
 800fbec:	694b      	ldreq	r3, [r1, #20]
 800fbee:	600f      	str	r7, [r1, #0]
 800fbf0:	bf18      	it	ne
 800fbf2:	2300      	movne	r3, #0
 800fbf4:	eba6 0807 	sub.w	r8, r6, r7
 800fbf8:	608b      	str	r3, [r1, #8]
 800fbfa:	f1b8 0f00 	cmp.w	r8, #0
 800fbfe:	dd9c      	ble.n	800fb3a <__sflush_r+0x1a>
 800fc00:	6a21      	ldr	r1, [r4, #32]
 800fc02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fc04:	4643      	mov	r3, r8
 800fc06:	463a      	mov	r2, r7
 800fc08:	4628      	mov	r0, r5
 800fc0a:	47b0      	blx	r6
 800fc0c:	2800      	cmp	r0, #0
 800fc0e:	dc06      	bgt.n	800fc1e <__sflush_r+0xfe>
 800fc10:	89a3      	ldrh	r3, [r4, #12]
 800fc12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc16:	81a3      	strh	r3, [r4, #12]
 800fc18:	f04f 30ff 	mov.w	r0, #4294967295
 800fc1c:	e78e      	b.n	800fb3c <__sflush_r+0x1c>
 800fc1e:	4407      	add	r7, r0
 800fc20:	eba8 0800 	sub.w	r8, r8, r0
 800fc24:	e7e9      	b.n	800fbfa <__sflush_r+0xda>
 800fc26:	bf00      	nop
 800fc28:	20400001 	.word	0x20400001

0800fc2c <_fflush_r>:
 800fc2c:	b538      	push	{r3, r4, r5, lr}
 800fc2e:	690b      	ldr	r3, [r1, #16]
 800fc30:	4605      	mov	r5, r0
 800fc32:	460c      	mov	r4, r1
 800fc34:	b913      	cbnz	r3, 800fc3c <_fflush_r+0x10>
 800fc36:	2500      	movs	r5, #0
 800fc38:	4628      	mov	r0, r5
 800fc3a:	bd38      	pop	{r3, r4, r5, pc}
 800fc3c:	b118      	cbz	r0, 800fc46 <_fflush_r+0x1a>
 800fc3e:	6983      	ldr	r3, [r0, #24]
 800fc40:	b90b      	cbnz	r3, 800fc46 <_fflush_r+0x1a>
 800fc42:	f7ff f84b 	bl	800ecdc <__sinit>
 800fc46:	4b14      	ldr	r3, [pc, #80]	; (800fc98 <_fflush_r+0x6c>)
 800fc48:	429c      	cmp	r4, r3
 800fc4a:	d11b      	bne.n	800fc84 <_fflush_r+0x58>
 800fc4c:	686c      	ldr	r4, [r5, #4]
 800fc4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d0ef      	beq.n	800fc36 <_fflush_r+0xa>
 800fc56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fc58:	07d0      	lsls	r0, r2, #31
 800fc5a:	d404      	bmi.n	800fc66 <_fflush_r+0x3a>
 800fc5c:	0599      	lsls	r1, r3, #22
 800fc5e:	d402      	bmi.n	800fc66 <_fflush_r+0x3a>
 800fc60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc62:	f7ff f8eb 	bl	800ee3c <__retarget_lock_acquire_recursive>
 800fc66:	4628      	mov	r0, r5
 800fc68:	4621      	mov	r1, r4
 800fc6a:	f7ff ff59 	bl	800fb20 <__sflush_r>
 800fc6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc70:	07da      	lsls	r2, r3, #31
 800fc72:	4605      	mov	r5, r0
 800fc74:	d4e0      	bmi.n	800fc38 <_fflush_r+0xc>
 800fc76:	89a3      	ldrh	r3, [r4, #12]
 800fc78:	059b      	lsls	r3, r3, #22
 800fc7a:	d4dd      	bmi.n	800fc38 <_fflush_r+0xc>
 800fc7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc7e:	f7ff f8de 	bl	800ee3e <__retarget_lock_release_recursive>
 800fc82:	e7d9      	b.n	800fc38 <_fflush_r+0xc>
 800fc84:	4b05      	ldr	r3, [pc, #20]	; (800fc9c <_fflush_r+0x70>)
 800fc86:	429c      	cmp	r4, r3
 800fc88:	d101      	bne.n	800fc8e <_fflush_r+0x62>
 800fc8a:	68ac      	ldr	r4, [r5, #8]
 800fc8c:	e7df      	b.n	800fc4e <_fflush_r+0x22>
 800fc8e:	4b04      	ldr	r3, [pc, #16]	; (800fca0 <_fflush_r+0x74>)
 800fc90:	429c      	cmp	r4, r3
 800fc92:	bf08      	it	eq
 800fc94:	68ec      	ldreq	r4, [r5, #12]
 800fc96:	e7da      	b.n	800fc4e <_fflush_r+0x22>
 800fc98:	08012b00 	.word	0x08012b00
 800fc9c:	08012b20 	.word	0x08012b20
 800fca0:	08012ae0 	.word	0x08012ae0

0800fca4 <_lseek_r>:
 800fca4:	b538      	push	{r3, r4, r5, lr}
 800fca6:	4d07      	ldr	r5, [pc, #28]	; (800fcc4 <_lseek_r+0x20>)
 800fca8:	4604      	mov	r4, r0
 800fcaa:	4608      	mov	r0, r1
 800fcac:	4611      	mov	r1, r2
 800fcae:	2200      	movs	r2, #0
 800fcb0:	602a      	str	r2, [r5, #0]
 800fcb2:	461a      	mov	r2, r3
 800fcb4:	f7f1 f95e 	bl	8000f74 <_lseek>
 800fcb8:	1c43      	adds	r3, r0, #1
 800fcba:	d102      	bne.n	800fcc2 <_lseek_r+0x1e>
 800fcbc:	682b      	ldr	r3, [r5, #0]
 800fcbe:	b103      	cbz	r3, 800fcc2 <_lseek_r+0x1e>
 800fcc0:	6023      	str	r3, [r4, #0]
 800fcc2:	bd38      	pop	{r3, r4, r5, pc}
 800fcc4:	20008498 	.word	0x20008498

0800fcc8 <__swhatbuf_r>:
 800fcc8:	b570      	push	{r4, r5, r6, lr}
 800fcca:	460e      	mov	r6, r1
 800fccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcd0:	2900      	cmp	r1, #0
 800fcd2:	b096      	sub	sp, #88	; 0x58
 800fcd4:	4614      	mov	r4, r2
 800fcd6:	461d      	mov	r5, r3
 800fcd8:	da08      	bge.n	800fcec <__swhatbuf_r+0x24>
 800fcda:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fcde:	2200      	movs	r2, #0
 800fce0:	602a      	str	r2, [r5, #0]
 800fce2:	061a      	lsls	r2, r3, #24
 800fce4:	d410      	bmi.n	800fd08 <__swhatbuf_r+0x40>
 800fce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fcea:	e00e      	b.n	800fd0a <__swhatbuf_r+0x42>
 800fcec:	466a      	mov	r2, sp
 800fcee:	f000 f8e3 	bl	800feb8 <_fstat_r>
 800fcf2:	2800      	cmp	r0, #0
 800fcf4:	dbf1      	blt.n	800fcda <__swhatbuf_r+0x12>
 800fcf6:	9a01      	ldr	r2, [sp, #4]
 800fcf8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fcfc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fd00:	425a      	negs	r2, r3
 800fd02:	415a      	adcs	r2, r3
 800fd04:	602a      	str	r2, [r5, #0]
 800fd06:	e7ee      	b.n	800fce6 <__swhatbuf_r+0x1e>
 800fd08:	2340      	movs	r3, #64	; 0x40
 800fd0a:	2000      	movs	r0, #0
 800fd0c:	6023      	str	r3, [r4, #0]
 800fd0e:	b016      	add	sp, #88	; 0x58
 800fd10:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fd14 <__smakebuf_r>:
 800fd14:	898b      	ldrh	r3, [r1, #12]
 800fd16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fd18:	079d      	lsls	r5, r3, #30
 800fd1a:	4606      	mov	r6, r0
 800fd1c:	460c      	mov	r4, r1
 800fd1e:	d507      	bpl.n	800fd30 <__smakebuf_r+0x1c>
 800fd20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fd24:	6023      	str	r3, [r4, #0]
 800fd26:	6123      	str	r3, [r4, #16]
 800fd28:	2301      	movs	r3, #1
 800fd2a:	6163      	str	r3, [r4, #20]
 800fd2c:	b002      	add	sp, #8
 800fd2e:	bd70      	pop	{r4, r5, r6, pc}
 800fd30:	ab01      	add	r3, sp, #4
 800fd32:	466a      	mov	r2, sp
 800fd34:	f7ff ffc8 	bl	800fcc8 <__swhatbuf_r>
 800fd38:	9900      	ldr	r1, [sp, #0]
 800fd3a:	4605      	mov	r5, r0
 800fd3c:	4630      	mov	r0, r6
 800fd3e:	f7ff f8f3 	bl	800ef28 <_malloc_r>
 800fd42:	b948      	cbnz	r0, 800fd58 <__smakebuf_r+0x44>
 800fd44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd48:	059a      	lsls	r2, r3, #22
 800fd4a:	d4ef      	bmi.n	800fd2c <__smakebuf_r+0x18>
 800fd4c:	f023 0303 	bic.w	r3, r3, #3
 800fd50:	f043 0302 	orr.w	r3, r3, #2
 800fd54:	81a3      	strh	r3, [r4, #12]
 800fd56:	e7e3      	b.n	800fd20 <__smakebuf_r+0xc>
 800fd58:	4b0d      	ldr	r3, [pc, #52]	; (800fd90 <__smakebuf_r+0x7c>)
 800fd5a:	62b3      	str	r3, [r6, #40]	; 0x28
 800fd5c:	89a3      	ldrh	r3, [r4, #12]
 800fd5e:	6020      	str	r0, [r4, #0]
 800fd60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd64:	81a3      	strh	r3, [r4, #12]
 800fd66:	9b00      	ldr	r3, [sp, #0]
 800fd68:	6163      	str	r3, [r4, #20]
 800fd6a:	9b01      	ldr	r3, [sp, #4]
 800fd6c:	6120      	str	r0, [r4, #16]
 800fd6e:	b15b      	cbz	r3, 800fd88 <__smakebuf_r+0x74>
 800fd70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd74:	4630      	mov	r0, r6
 800fd76:	f000 f8b1 	bl	800fedc <_isatty_r>
 800fd7a:	b128      	cbz	r0, 800fd88 <__smakebuf_r+0x74>
 800fd7c:	89a3      	ldrh	r3, [r4, #12]
 800fd7e:	f023 0303 	bic.w	r3, r3, #3
 800fd82:	f043 0301 	orr.w	r3, r3, #1
 800fd86:	81a3      	strh	r3, [r4, #12]
 800fd88:	89a0      	ldrh	r0, [r4, #12]
 800fd8a:	4305      	orrs	r5, r0
 800fd8c:	81a5      	strh	r5, [r4, #12]
 800fd8e:	e7cd      	b.n	800fd2c <__smakebuf_r+0x18>
 800fd90:	0800ec75 	.word	0x0800ec75

0800fd94 <__malloc_lock>:
 800fd94:	4801      	ldr	r0, [pc, #4]	; (800fd9c <__malloc_lock+0x8>)
 800fd96:	f7ff b851 	b.w	800ee3c <__retarget_lock_acquire_recursive>
 800fd9a:	bf00      	nop
 800fd9c:	2000849c 	.word	0x2000849c

0800fda0 <__malloc_unlock>:
 800fda0:	4801      	ldr	r0, [pc, #4]	; (800fda8 <__malloc_unlock+0x8>)
 800fda2:	f7ff b84c 	b.w	800ee3e <__retarget_lock_release_recursive>
 800fda6:	bf00      	nop
 800fda8:	2000849c 	.word	0x2000849c

0800fdac <_realloc_r>:
 800fdac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdb0:	4680      	mov	r8, r0
 800fdb2:	4614      	mov	r4, r2
 800fdb4:	460e      	mov	r6, r1
 800fdb6:	b921      	cbnz	r1, 800fdc2 <_realloc_r+0x16>
 800fdb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdbc:	4611      	mov	r1, r2
 800fdbe:	f7ff b8b3 	b.w	800ef28 <_malloc_r>
 800fdc2:	b92a      	cbnz	r2, 800fdd0 <_realloc_r+0x24>
 800fdc4:	f7ff f844 	bl	800ee50 <_free_r>
 800fdc8:	4625      	mov	r5, r4
 800fdca:	4628      	mov	r0, r5
 800fdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdd0:	f000 f894 	bl	800fefc <_malloc_usable_size_r>
 800fdd4:	4284      	cmp	r4, r0
 800fdd6:	4607      	mov	r7, r0
 800fdd8:	d802      	bhi.n	800fde0 <_realloc_r+0x34>
 800fdda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fdde:	d812      	bhi.n	800fe06 <_realloc_r+0x5a>
 800fde0:	4621      	mov	r1, r4
 800fde2:	4640      	mov	r0, r8
 800fde4:	f7ff f8a0 	bl	800ef28 <_malloc_r>
 800fde8:	4605      	mov	r5, r0
 800fdea:	2800      	cmp	r0, #0
 800fdec:	d0ed      	beq.n	800fdca <_realloc_r+0x1e>
 800fdee:	42bc      	cmp	r4, r7
 800fdf0:	4622      	mov	r2, r4
 800fdf2:	4631      	mov	r1, r6
 800fdf4:	bf28      	it	cs
 800fdf6:	463a      	movcs	r2, r7
 800fdf8:	f7fe fe54 	bl	800eaa4 <memcpy>
 800fdfc:	4631      	mov	r1, r6
 800fdfe:	4640      	mov	r0, r8
 800fe00:	f7ff f826 	bl	800ee50 <_free_r>
 800fe04:	e7e1      	b.n	800fdca <_realloc_r+0x1e>
 800fe06:	4635      	mov	r5, r6
 800fe08:	e7df      	b.n	800fdca <_realloc_r+0x1e>
	...

0800fe0c <_read_r>:
 800fe0c:	b538      	push	{r3, r4, r5, lr}
 800fe0e:	4d07      	ldr	r5, [pc, #28]	; (800fe2c <_read_r+0x20>)
 800fe10:	4604      	mov	r4, r0
 800fe12:	4608      	mov	r0, r1
 800fe14:	4611      	mov	r1, r2
 800fe16:	2200      	movs	r2, #0
 800fe18:	602a      	str	r2, [r5, #0]
 800fe1a:	461a      	mov	r2, r3
 800fe1c:	f7f1 f84a 	bl	8000eb4 <_read>
 800fe20:	1c43      	adds	r3, r0, #1
 800fe22:	d102      	bne.n	800fe2a <_read_r+0x1e>
 800fe24:	682b      	ldr	r3, [r5, #0]
 800fe26:	b103      	cbz	r3, 800fe2a <_read_r+0x1e>
 800fe28:	6023      	str	r3, [r4, #0]
 800fe2a:	bd38      	pop	{r3, r4, r5, pc}
 800fe2c:	20008498 	.word	0x20008498

0800fe30 <_raise_r>:
 800fe30:	291f      	cmp	r1, #31
 800fe32:	b538      	push	{r3, r4, r5, lr}
 800fe34:	4604      	mov	r4, r0
 800fe36:	460d      	mov	r5, r1
 800fe38:	d904      	bls.n	800fe44 <_raise_r+0x14>
 800fe3a:	2316      	movs	r3, #22
 800fe3c:	6003      	str	r3, [r0, #0]
 800fe3e:	f04f 30ff 	mov.w	r0, #4294967295
 800fe42:	bd38      	pop	{r3, r4, r5, pc}
 800fe44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fe46:	b112      	cbz	r2, 800fe4e <_raise_r+0x1e>
 800fe48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fe4c:	b94b      	cbnz	r3, 800fe62 <_raise_r+0x32>
 800fe4e:	4620      	mov	r0, r4
 800fe50:	f000 f830 	bl	800feb4 <_getpid_r>
 800fe54:	462a      	mov	r2, r5
 800fe56:	4601      	mov	r1, r0
 800fe58:	4620      	mov	r0, r4
 800fe5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe5e:	f000 b817 	b.w	800fe90 <_kill_r>
 800fe62:	2b01      	cmp	r3, #1
 800fe64:	d00a      	beq.n	800fe7c <_raise_r+0x4c>
 800fe66:	1c59      	adds	r1, r3, #1
 800fe68:	d103      	bne.n	800fe72 <_raise_r+0x42>
 800fe6a:	2316      	movs	r3, #22
 800fe6c:	6003      	str	r3, [r0, #0]
 800fe6e:	2001      	movs	r0, #1
 800fe70:	e7e7      	b.n	800fe42 <_raise_r+0x12>
 800fe72:	2400      	movs	r4, #0
 800fe74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fe78:	4628      	mov	r0, r5
 800fe7a:	4798      	blx	r3
 800fe7c:	2000      	movs	r0, #0
 800fe7e:	e7e0      	b.n	800fe42 <_raise_r+0x12>

0800fe80 <raise>:
 800fe80:	4b02      	ldr	r3, [pc, #8]	; (800fe8c <raise+0xc>)
 800fe82:	4601      	mov	r1, r0
 800fe84:	6818      	ldr	r0, [r3, #0]
 800fe86:	f7ff bfd3 	b.w	800fe30 <_raise_r>
 800fe8a:	bf00      	nop
 800fe8c:	20000084 	.word	0x20000084

0800fe90 <_kill_r>:
 800fe90:	b538      	push	{r3, r4, r5, lr}
 800fe92:	4d07      	ldr	r5, [pc, #28]	; (800feb0 <_kill_r+0x20>)
 800fe94:	2300      	movs	r3, #0
 800fe96:	4604      	mov	r4, r0
 800fe98:	4608      	mov	r0, r1
 800fe9a:	4611      	mov	r1, r2
 800fe9c:	602b      	str	r3, [r5, #0]
 800fe9e:	f7f0 ffed 	bl	8000e7c <_kill>
 800fea2:	1c43      	adds	r3, r0, #1
 800fea4:	d102      	bne.n	800feac <_kill_r+0x1c>
 800fea6:	682b      	ldr	r3, [r5, #0]
 800fea8:	b103      	cbz	r3, 800feac <_kill_r+0x1c>
 800feaa:	6023      	str	r3, [r4, #0]
 800feac:	bd38      	pop	{r3, r4, r5, pc}
 800feae:	bf00      	nop
 800feb0:	20008498 	.word	0x20008498

0800feb4 <_getpid_r>:
 800feb4:	f7f0 bfda 	b.w	8000e6c <_getpid>

0800feb8 <_fstat_r>:
 800feb8:	b538      	push	{r3, r4, r5, lr}
 800feba:	4d07      	ldr	r5, [pc, #28]	; (800fed8 <_fstat_r+0x20>)
 800febc:	2300      	movs	r3, #0
 800febe:	4604      	mov	r4, r0
 800fec0:	4608      	mov	r0, r1
 800fec2:	4611      	mov	r1, r2
 800fec4:	602b      	str	r3, [r5, #0]
 800fec6:	f7f1 f83a 	bl	8000f3e <_fstat>
 800feca:	1c43      	adds	r3, r0, #1
 800fecc:	d102      	bne.n	800fed4 <_fstat_r+0x1c>
 800fece:	682b      	ldr	r3, [r5, #0]
 800fed0:	b103      	cbz	r3, 800fed4 <_fstat_r+0x1c>
 800fed2:	6023      	str	r3, [r4, #0]
 800fed4:	bd38      	pop	{r3, r4, r5, pc}
 800fed6:	bf00      	nop
 800fed8:	20008498 	.word	0x20008498

0800fedc <_isatty_r>:
 800fedc:	b538      	push	{r3, r4, r5, lr}
 800fede:	4d06      	ldr	r5, [pc, #24]	; (800fef8 <_isatty_r+0x1c>)
 800fee0:	2300      	movs	r3, #0
 800fee2:	4604      	mov	r4, r0
 800fee4:	4608      	mov	r0, r1
 800fee6:	602b      	str	r3, [r5, #0]
 800fee8:	f7f1 f839 	bl	8000f5e <_isatty>
 800feec:	1c43      	adds	r3, r0, #1
 800feee:	d102      	bne.n	800fef6 <_isatty_r+0x1a>
 800fef0:	682b      	ldr	r3, [r5, #0]
 800fef2:	b103      	cbz	r3, 800fef6 <_isatty_r+0x1a>
 800fef4:	6023      	str	r3, [r4, #0]
 800fef6:	bd38      	pop	{r3, r4, r5, pc}
 800fef8:	20008498 	.word	0x20008498

0800fefc <_malloc_usable_size_r>:
 800fefc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff00:	1f18      	subs	r0, r3, #4
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	bfbc      	itt	lt
 800ff06:	580b      	ldrlt	r3, [r1, r0]
 800ff08:	18c0      	addlt	r0, r0, r3
 800ff0a:	4770      	bx	lr

0800ff0c <_init>:
 800ff0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff0e:	bf00      	nop
 800ff10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff12:	bc08      	pop	{r3}
 800ff14:	469e      	mov	lr, r3
 800ff16:	4770      	bx	lr

0800ff18 <_fini>:
 800ff18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff1a:	bf00      	nop
 800ff1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff1e:	bc08      	pop	{r3}
 800ff20:	469e      	mov	lr, r3
 800ff22:	4770      	bx	lr
