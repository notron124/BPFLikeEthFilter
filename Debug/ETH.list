
ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb7c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c50  0800fd2c  0800fd2c  0001fd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801297c  0801297c  000300c0  2**0
                  CONTENTS
  4 .ARM          00000008  0801297c  0801297c  0002297c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012984  08012984  000300c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012984  08012984  00022984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012988  08012988  00022988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0801298c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300c0  2**0
                  CONTENTS
 10 .bss          000083ac  200000c0  200000c0  000300c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000846c  2000846c  000300c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cd32  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000523e  00000000  00000000  0004ce22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  00052060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013e8  00000000  00000000  000534e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fd31  00000000  00000000  000548d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000244ff  00000000  00000000  00084601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec927  00000000  00000000  000a8b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00195427  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005cd4  00000000  00000000  00195478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000c0 	.word	0x200000c0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800fd14 	.word	0x0800fd14

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c4 	.word	0x200000c4
 80001ec:	0800fd14 	.word	0x0800fd14

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <jt>:
         { BPF_RET, 0, 0, 1 },
         { BPF_RET, 0, 0, 0 }
};

void jt(uint8_t destination)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
   _index = destination;
 800059e:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <jt+0x1c>)
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	7013      	strb	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	200000e8 	.word	0x200000e8

080005b4 <jf>:

void jf(uint8_t destination)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
   _index = destination;
 80005be:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <jf+0x1c>)
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	7013      	strb	r3, [r2, #0]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	200000e8 	.word	0x200000e8

080005d4 <jmp>:

void jmp(uint8_t *pdata, uint32_t k)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
   mypData = pdata;
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <jmp+0x44>)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	6013      	str	r3, [r2, #0]
   mypData += X + k;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <jmp+0x44>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <jmp+0x48>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4619      	mov	r1, r3
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	440b      	add	r3, r1
 80005f2:	4413      	add	r3, r2
 80005f4:	4a08      	ldr	r2, [pc, #32]	; (8000618 <jmp+0x44>)
 80005f6:	6013      	str	r3, [r2, #0]
   X = 0;
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <jmp+0x48>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
   _index++;
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <jmp+0x4c>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <jmp+0x4c>)
 8000608:	701a      	strb	r2, [r3, #0]
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	200000e0 	.word	0x200000e0
 800061c:	200000e9 	.word	0x200000e9
 8000620:	200000e8 	.word	0x200000e8

08000624 <ldxb>:


void ldxb(uint32_t k, uint8_t *pdata)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
   mypData = pdata;
 800062e:	4a0c      	ldr	r2, [pc, #48]	; (8000660 <ldxb+0x3c>)
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	6013      	str	r3, [r2, #0]
   mypData += k;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <ldxb+0x3c>)
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4413      	add	r3, r2
 800063c:	4a08      	ldr	r2, [pc, #32]	; (8000660 <ldxb+0x3c>)
 800063e:	6013      	str	r3, [r2, #0]
   X = 4*(*mypData & 0x0F);
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <ldxb+0x3c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	f003 030f 	and.w	r3, r3, #15
 800064a:	b2db      	uxtb	r3, r3
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <ldxb+0x40>)
 8000652:	701a      	strb	r2, [r3, #0]
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	200000e0 	.word	0x200000e0
 8000664:	200000e9 	.word	0x200000e9

08000668 <getKSize>:

uint8_t getKSize(uint32_t k)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
   uint8_t size = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	73fb      	strb	r3, [r7, #15]

   while (k != 0)
 8000674:	e005      	b.n	8000682 <getKSize+0x1a>
   {
      size++;
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	3301      	adds	r3, #1
 800067a:	73fb      	strb	r3, [r7, #15]
      k = k >> 8;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	0a1b      	lsrs	r3, r3, #8
 8000680:	607b      	str	r3, [r7, #4]
   while (k != 0)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1f6      	bne.n	8000676 <getKSize+0xe>
   }

   return size;
 8000688:	7bfb      	ldrb	r3, [r7, #15]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
	...

08000698 <jset>:

void jset(uint32_t k, struct sock_filter *filter)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
   uint8_t kSize = getKSize(k);
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f7ff ffe0 	bl	8000668 <getKSize>
 80006a8:	4603      	mov	r3, r0
 80006aa:	72bb      	strb	r3, [r7, #10]
   uint32_t actualData = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]

   for (uint8_t i = 0; i < kSize; i++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	72fb      	strb	r3, [r7, #11]
 80006b4:	e011      	b.n	80006da <jset+0x42>
   {
      actualData = actualData << 8;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	021b      	lsls	r3, r3, #8
 80006ba:	60fb      	str	r3, [r7, #12]
      actualData += *mypData;
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <jset+0x84>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4413      	add	r3, r2
 80006c8:	60fb      	str	r3, [r7, #12]
      mypData++;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <jset+0x84>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	3301      	adds	r3, #1
 80006d0:	4a12      	ldr	r2, [pc, #72]	; (800071c <jset+0x84>)
 80006d2:	6013      	str	r3, [r2, #0]
   for (uint8_t i = 0; i < kSize; i++)
 80006d4:	7afb      	ldrb	r3, [r7, #11]
 80006d6:	3301      	adds	r3, #1
 80006d8:	72fb      	strb	r3, [r7, #11]
 80006da:	7afa      	ldrb	r2, [r7, #11]
 80006dc:	7abb      	ldrb	r3, [r7, #10]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d3e9      	bcc.n	80006b6 <jset+0x1e>
   }

   if ((actualData & 0x1FFF) == 0)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d109      	bne.n	8000700 <jset+0x68>
      jt(filter[_index].jt);
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <jset+0x88>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	4413      	add	r3, r2
 80006f6:	789b      	ldrb	r3, [r3, #2]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ff4b 	bl	8000594 <jt>
   else
      jf(filter[_index].jf);
}
 80006fe:	e008      	b.n	8000712 <jset+0x7a>
      jf(filter[_index].jf);
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <jset+0x88>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	00db      	lsls	r3, r3, #3
 8000706:	683a      	ldr	r2, [r7, #0]
 8000708:	4413      	add	r3, r2
 800070a:	78db      	ldrb	r3, [r3, #3]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff51 	bl	80005b4 <jf>
}
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200000e0 	.word	0x200000e0
 8000720:	200000e8 	.word	0x200000e8

08000724 <jeq>:

void jeq(uint32_t k, struct sock_filter *filter)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
   uint8_t kSize = getKSize(k);
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff ff9a 	bl	8000668 <getKSize>
 8000734:	4603      	mov	r3, r0
 8000736:	72bb      	strb	r3, [r7, #10]
   uint32_t actualData = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]

   for (uint8_t i = 0; i < kSize; i++)
 800073c:	2300      	movs	r3, #0
 800073e:	72fb      	strb	r3, [r7, #11]
 8000740:	e011      	b.n	8000766 <jeq+0x42>
   {
      actualData = actualData << 8;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	021b      	lsls	r3, r3, #8
 8000746:	60fb      	str	r3, [r7, #12]
      actualData += *mypData;
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <jeq+0x80>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	461a      	mov	r2, r3
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	4413      	add	r3, r2
 8000754:	60fb      	str	r3, [r7, #12]
      mypData++;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <jeq+0x80>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	3301      	adds	r3, #1
 800075c:	4a11      	ldr	r2, [pc, #68]	; (80007a4 <jeq+0x80>)
 800075e:	6013      	str	r3, [r2, #0]
   for (uint8_t i = 0; i < kSize; i++)
 8000760:	7afb      	ldrb	r3, [r7, #11]
 8000762:	3301      	adds	r3, #1
 8000764:	72fb      	strb	r3, [r7, #11]
 8000766:	7afa      	ldrb	r2, [r7, #11]
 8000768:	7abb      	ldrb	r3, [r7, #10]
 800076a:	429a      	cmp	r2, r3
 800076c:	d3e9      	bcc.n	8000742 <jeq+0x1e>
   }

   if (actualData == k)
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	429a      	cmp	r2, r3
 8000774:	d109      	bne.n	800078a <jeq+0x66>
      jt(filter[_index].jt);
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <jeq+0x84>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	683a      	ldr	r2, [r7, #0]
 800077e:	4413      	add	r3, r2
 8000780:	789b      	ldrb	r3, [r3, #2]
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff06 	bl	8000594 <jt>
   else
      jf(filter[_index].jf);
}
 8000788:	e008      	b.n	800079c <jeq+0x78>
      jf(filter[_index].jf);
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <jeq+0x84>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	00db      	lsls	r3, r3, #3
 8000790:	683a      	ldr	r2, [r7, #0]
 8000792:	4413      	add	r3, r2
 8000794:	78db      	ldrb	r3, [r3, #3]
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff0c 	bl	80005b4 <jf>
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200000e0 	.word	0x200000e0
 80007a8:	200000e8 	.word	0x200000e8

080007ac <Filter>:

uint8_t Filter(uint8_t *pdata, struct sock_filter *filter)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
   uint8_t output = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]
   uint16_t size = 10;
 80007ba:	230a      	movs	r3, #10
 80007bc:	81bb      	strh	r3, [r7, #12]
   while (_index < size)
 80007be:	e053      	b.n	8000868 <Filter+0xbc>
   {
      switch(filter[_index].code)
 80007c0:	4b2f      	ldr	r3, [pc, #188]	; (8000880 <Filter+0xd4>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	4413      	add	r3, r2
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	2b80      	cmp	r3, #128	; 0x80
 80007ce:	d03a      	beq.n	8000846 <Filter+0x9a>
 80007d0:	2b80      	cmp	r3, #128	; 0x80
 80007d2:	dc43      	bgt.n	800085c <Filter+0xb0>
 80007d4:	2b50      	cmp	r3, #80	; 0x50
 80007d6:	d02b      	beq.n	8000830 <Filter+0x84>
 80007d8:	2b50      	cmp	r3, #80	; 0x50
 80007da:	dc3f      	bgt.n	800085c <Filter+0xb0>
 80007dc:	2b40      	cmp	r3, #64	; 0x40
 80007de:	d01c      	beq.n	800081a <Filter+0x6e>
 80007e0:	2b40      	cmp	r3, #64	; 0x40
 80007e2:	dc3b      	bgt.n	800085c <Filter+0xb0>
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d002      	beq.n	80007ee <Filter+0x42>
 80007e8:	2b10      	cmp	r3, #16
 80007ea:	d00b      	beq.n	8000804 <Filter+0x58>
 80007ec:	e036      	b.n	800085c <Filter+0xb0>
      {
      case BPF_JMP:
         jmp(pdata, filter[_index].k);
 80007ee:	4b24      	ldr	r3, [pc, #144]	; (8000880 <Filter+0xd4>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	683a      	ldr	r2, [r7, #0]
 80007f6:	4413      	add	r3, r2
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	4619      	mov	r1, r3
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff fee9 	bl	80005d4 <jmp>
         break;
 8000802:	e031      	b.n	8000868 <Filter+0xbc>

      case BPF_JEQ:
         jeq(filter[_index].k, filter);
 8000804:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <Filter+0xd4>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	683a      	ldr	r2, [r7, #0]
 800080c:	4413      	add	r3, r2
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	6839      	ldr	r1, [r7, #0]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ff86 	bl	8000724 <jeq>
         break;
 8000818:	e026      	b.n	8000868 <Filter+0xbc>

      case BPF_JSET:
         jset(filter[_index].k, filter);
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <Filter+0xd4>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	4413      	add	r3, r2
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	6839      	ldr	r1, [r7, #0]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff35 	bl	8000698 <jset>
         break;
 800082e:	e01b      	b.n	8000868 <Filter+0xbc>

      case BPF_LDXB:
         ldxb(filter[_index].k, pdata);
 8000830:	4b13      	ldr	r3, [pc, #76]	; (8000880 <Filter+0xd4>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	683a      	ldr	r2, [r7, #0]
 8000838:	4413      	add	r3, r2
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	6879      	ldr	r1, [r7, #4]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fef0 	bl	8000624 <ldxb>
         break;
 8000844:	e010      	b.n	8000868 <Filter+0xbc>

      case BPF_RET:
         output = filter[_index].k;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <Filter+0xd4>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	00db      	lsls	r3, r3, #3
 800084c:	683a      	ldr	r2, [r7, #0]
 800084e:	4413      	add	r3, r2
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	73fb      	strb	r3, [r7, #15]
         _index = 10;
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <Filter+0xd4>)
 8000856:	220a      	movs	r2, #10
 8000858:	701a      	strb	r2, [r3, #0]
         break;
 800085a:	e005      	b.n	8000868 <Filter+0xbc>

      default:
         output = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	73fb      	strb	r3, [r7, #15]
         _index = 10;
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <Filter+0xd4>)
 8000862:	220a      	movs	r2, #10
 8000864:	701a      	strb	r2, [r3, #0]
         break;
 8000866:	bf00      	nop
   while (_index < size)
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <Filter+0xd4>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b29b      	uxth	r3, r3
 800086e:	89ba      	ldrh	r2, [r7, #12]
 8000870:	429a      	cmp	r2, r3
 8000872:	d8a5      	bhi.n	80007c0 <Filter+0x14>
      }
   }
   return output;
 8000874:	7bfb      	ldrb	r3, [r7, #15]
   _index = 0;
}
 8000876:	4618      	mov	r0, r3
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200000e8 	.word	0x200000e8

08000884 <KeyInit>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void KeyInit(struct Key_TypeDef *keyx, struct Keys_Properties *keyprop)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
   keyx->GPIOx = USER_Btn_GPIO_Port;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a10      	ldr	r2, [pc, #64]	; (80008d4 <KeyInit+0x50>)
 8000892:	601a      	str	r2, [r3, #0]
   keyx->pin = USER_Btn_Pin;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800089a:	809a      	strh	r2, [r3, #4]
   keyx->shortPressID = 0;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2200      	movs	r2, #0
 80008a0:	721a      	strb	r2, [r3, #8]
   keyx->longPressID = 4;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2204      	movs	r2, #4
 80008a6:	725a      	strb	r2, [r3, #9]
   keyx->flags.autorepeat = 0;
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	7a93      	ldrb	r3, [r2, #10]
 80008ac:	f36f 0300 	bfc	r3, #0, #1
 80008b0:	7293      	strb	r3, [r2, #10]
   keyprop->autorepeatSpeed = 50;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	2232      	movs	r2, #50	; 0x32
 80008b6:	711a      	strb	r2, [r3, #4]
   keyprop->shortPressDelay = 50;
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	2232      	movs	r2, #50	; 0x32
 80008bc:	701a      	strb	r2, [r3, #0]
   keyprop->longPressDelay = 1000;
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008c4:	805a      	strh	r2, [r3, #2]
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40020800 	.word	0x40020800

080008d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008dc:	f000 fc90 	bl	8001200 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e0:	f000 f834 	bl	800094c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e4:	f000 f8c6 	bl	8000a74 <MX_GPIO_Init>
  MX_LWIP_Init();
 80008e8:	f003 fd70 	bl	80043cc <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  MX_USART3_UART_Init();
 80008ec:	f000 f898 	bl	8000a20 <MX_USART3_UART_Init>
  KeyInit(&key1, &keysProperties);
 80008f0:	490f      	ldr	r1, [pc, #60]	; (8000930 <main+0x58>)
 80008f2:	4810      	ldr	r0, [pc, #64]	; (8000934 <main+0x5c>)
 80008f4:	f7ff ffc6 	bl	8000884 <KeyInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
     MX_LWIP_Process();
 80008f8:	f003 feb4 	bl	8004664 <MX_LWIP_Process>

     if (KEY_READY)
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <main+0x60>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	2b00      	cmp	r3, #0
 8000906:	d0f7      	beq.n	80008f8 <main+0x20>
     {
    	 RESET_KEY_READY;
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <main+0x60>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	f023 0301 	bic.w	r3, r3, #1
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <main+0x60>)
 8000914:	701a      	strb	r2, [r3, #0]
    	 sprintf(data, "Amount of passed packets: %lu\r\n", filteredCounter);
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <main+0x64>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	461a      	mov	r2, r3
 800091c:	4908      	ldr	r1, [pc, #32]	; (8000940 <main+0x68>)
 800091e:	4809      	ldr	r0, [pc, #36]	; (8000944 <main+0x6c>)
 8000920:	f00e f84a 	bl	800e9b8 <siprintf>
    	 HAL_UART_Transmit_IT(&huart3, data, sizeof(data));
 8000924:	2220      	movs	r2, #32
 8000926:	4907      	ldr	r1, [pc, #28]	; (8000944 <main+0x6c>)
 8000928:	4807      	ldr	r0, [pc, #28]	; (8000948 <main+0x70>)
 800092a:	f002 fe44 	bl	80035b6 <HAL_UART_Transmit_IT>
     MX_LWIP_Process();
 800092e:	e7e3      	b.n	80008f8 <main+0x20>
 8000930:	2000013c 	.word	0x2000013c
 8000934:	20000130 	.word	0x20000130
 8000938:	200000dc 	.word	0x200000dc
 800093c:	200000e4 	.word	0x200000e4
 8000940:	0800fd2c 	.word	0x0800fd2c
 8000944:	20000144 	.word	0x20000144
 8000948:	200000ec 	.word	0x200000ec

0800094c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b094      	sub	sp, #80	; 0x50
 8000950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000952:	f107 0320 	add.w	r3, r7, #32
 8000956:	2230      	movs	r2, #48	; 0x30
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f00d ffce 	bl	800e8fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000970:	2300      	movs	r3, #0
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	4b28      	ldr	r3, [pc, #160]	; (8000a18 <SystemClock_Config+0xcc>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	4a27      	ldr	r2, [pc, #156]	; (8000a18 <SystemClock_Config+0xcc>)
 800097a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097e:	6413      	str	r3, [r2, #64]	; 0x40
 8000980:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <SystemClock_Config+0xcc>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800098c:	2300      	movs	r3, #0
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <SystemClock_Config+0xd0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a21      	ldr	r2, [pc, #132]	; (8000a1c <SystemClock_Config+0xd0>)
 8000996:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <SystemClock_Config+0xd0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a8:	2301      	movs	r3, #1
 80009aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b2:	2302      	movs	r3, #2
 80009b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009bc:	2304      	movs	r3, #4
 80009be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009c0:	23a8      	movs	r3, #168	; 0xa8
 80009c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009c8:	2307      	movs	r3, #7
 80009ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009cc:	f107 0320 	add.w	r3, r7, #32
 80009d0:	4618      	mov	r0, r3
 80009d2:	f002 f90b 	bl	8002bec <HAL_RCC_OscConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009dc:	f000 f8f8 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e0:	230f      	movs	r3, #15
 80009e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e4:	2302      	movs	r3, #2
 80009e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2105      	movs	r1, #5
 80009fe:	4618      	mov	r0, r3
 8000a00:	f002 fb6c 	bl	80030dc <HAL_RCC_ClockConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a0a:	f000 f8e1 	bl	8000bd0 <Error_Handler>
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3750      	adds	r7, #80	; 0x50
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40007000 	.word	0x40007000

08000a20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_USART3_UART_Init+0x4c>)
 8000a26:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <MX_USART3_UART_Init+0x50>)
 8000a28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_USART3_UART_Init+0x4c>)
 8000a2c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8000a30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_USART3_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_USART3_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_USART3_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_USART3_UART_Init+0x4c>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_USART3_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_USART3_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_USART3_UART_Init+0x4c>)
 8000a58:	f002 fd60 	bl	800351c <HAL_UART_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a62:	f000 f8b5 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200000ec 	.word	0x200000ec
 8000a70:	40004800 	.word	0x40004800

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08c      	sub	sp, #48	; 0x30
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61bb      	str	r3, [r7, #24]
 8000a8e:	4b4c      	ldr	r3, [pc, #304]	; (8000bc0 <MX_GPIO_Init+0x14c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a4b      	ldr	r2, [pc, #300]	; (8000bc0 <MX_GPIO_Init+0x14c>)
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b49      	ldr	r3, [pc, #292]	; (8000bc0 <MX_GPIO_Init+0x14c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0304 	and.w	r3, r3, #4
 8000aa2:	61bb      	str	r3, [r7, #24]
 8000aa4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	4b45      	ldr	r3, [pc, #276]	; (8000bc0 <MX_GPIO_Init+0x14c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a44      	ldr	r2, [pc, #272]	; (8000bc0 <MX_GPIO_Init+0x14c>)
 8000ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b42      	ldr	r3, [pc, #264]	; (8000bc0 <MX_GPIO_Init+0x14c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b3e      	ldr	r3, [pc, #248]	; (8000bc0 <MX_GPIO_Init+0x14c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a3d      	ldr	r2, [pc, #244]	; (8000bc0 <MX_GPIO_Init+0x14c>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b3b      	ldr	r3, [pc, #236]	; (8000bc0 <MX_GPIO_Init+0x14c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b37      	ldr	r3, [pc, #220]	; (8000bc0 <MX_GPIO_Init+0x14c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a36      	ldr	r2, [pc, #216]	; (8000bc0 <MX_GPIO_Init+0x14c>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b34      	ldr	r3, [pc, #208]	; (8000bc0 <MX_GPIO_Init+0x14c>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	4b30      	ldr	r3, [pc, #192]	; (8000bc0 <MX_GPIO_Init+0x14c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a2f      	ldr	r2, [pc, #188]	; (8000bc0 <MX_GPIO_Init+0x14c>)
 8000b04:	f043 0308 	orr.w	r3, r3, #8
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b2d      	ldr	r3, [pc, #180]	; (8000bc0 <MX_GPIO_Init+0x14c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <MX_GPIO_Init+0x14c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a28      	ldr	r2, [pc, #160]	; (8000bc0 <MX_GPIO_Init+0x14c>)
 8000b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b26      	ldr	r3, [pc, #152]	; (8000bc0 <MX_GPIO_Init+0x14c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b38:	4822      	ldr	r0, [pc, #136]	; (8000bc4 <MX_GPIO_Init+0x150>)
 8000b3a:	f002 f83d 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2140      	movs	r1, #64	; 0x40
 8000b42:	4821      	ldr	r0, [pc, #132]	; (8000bc8 <MX_GPIO_Init+0x154>)
 8000b44:	f002 f838 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481b      	ldr	r0, [pc, #108]	; (8000bcc <MX_GPIO_Init+0x158>)
 8000b60:	f001 fe7e 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b64:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <MX_GPIO_Init+0x150>)
 8000b7e:	f001 fe6f 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b82:	2340      	movs	r3, #64	; 0x40
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <MX_GPIO_Init+0x154>)
 8000b9a:	f001 fe61 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b9e:	2380      	movs	r3, #128	; 0x80
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_GPIO_Init+0x154>)
 8000bb2:	f001 fe55 	bl	8002860 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb6:	bf00      	nop
 8000bb8:	3730      	adds	r7, #48	; 0x30
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020400 	.word	0x40020400
 8000bc8:	40021800 	.word	0x40021800
 8000bcc:	40020800 	.word	0x40020800

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <Error_Handler+0x8>
	...

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <HAL_MspInit+0x4c>)
 8000bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <HAL_MspInit+0x4c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800

08000c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a1d      	ldr	r2, [pc, #116]	; (8000cc0 <HAL_UART_MspInit+0x94>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d134      	bne.n	8000cb8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <HAL_UART_MspInit+0x98>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	4a1b      	ldr	r2, [pc, #108]	; (8000cc4 <HAL_UART_MspInit+0x98>)
 8000c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5e:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <HAL_UART_MspInit+0x98>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <HAL_UART_MspInit+0x98>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <HAL_UART_MspInit+0x98>)
 8000c74:	f043 0308 	orr.w	r3, r3, #8
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_UART_MspInit+0x98>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c98:	2307      	movs	r3, #7
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <HAL_UART_MspInit+0x9c>)
 8000ca4:	f001 fddc 	bl	8002860 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	2027      	movs	r0, #39	; 0x27
 8000cae:	f000 fc18 	bl	80014e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cb2:	2027      	movs	r0, #39	; 0x27
 8000cb4:	f000 fc31 	bl	800151a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cb8:	bf00      	nop
 8000cba:	3728      	adds	r7, #40	; 0x28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40004800 	.word	0x40004800
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020c00 	.word	0x40020c00

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <MemManage_Handler+0x4>

08000cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d18:	f000 fac4 	bl	80012a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <USART3_IRQHandler+0x10>)
 8000d26:	f002 fc8b 	bl	8003640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200000ec 	.word	0x200000ec

08000d34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return 1;
 8000d38:	2301      	movs	r3, #1
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_kill>:

int _kill(int pid, int sig)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d4e:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <_kill+0x20>)
 8000d50:	2216      	movs	r2, #22
 8000d52:	601a      	str	r2, [r3, #0]
  return -1;
 8000d54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	2000845c 	.word	0x2000845c

08000d68 <_exit>:

void _exit (int status)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ffe5 	bl	8000d44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d7a:	e7fe      	b.n	8000d7a <_exit+0x12>

08000d7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	e00a      	b.n	8000da4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d8e:	f3af 8000 	nop.w
 8000d92:	4601      	mov	r1, r0
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	60ba      	str	r2, [r7, #8]
 8000d9a:	b2ca      	uxtb	r2, r1
 8000d9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	3301      	adds	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	dbf0      	blt.n	8000d8e <_read+0x12>
  }

  return len;
 8000dac:	687b      	ldr	r3, [r7, #4]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	60f8      	str	r0, [r7, #12]
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	e009      	b.n	8000ddc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	60ba      	str	r2, [r7, #8]
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	dbf1      	blt.n	8000dc8 <_write+0x12>
  }
  return len;
 8000de4:	687b      	ldr	r3, [r7, #4]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <_close>:

int _close(int file)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
 8000e0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e16:	605a      	str	r2, [r3, #4]
  return 0;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <_isatty>:

int _isatty(int file)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e2e:	2301      	movs	r3, #1
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e60:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <_sbrk+0x5c>)
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <_sbrk+0x60>)
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <_sbrk+0x64>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <_sbrk+0x68>)
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d205      	bcs.n	8000e94 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <_sbrk+0x6c>)
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e92:	e009      	b.n	8000ea8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <_sbrk+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <_sbrk+0x64>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <_sbrk+0x64>)
 8000ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	371c      	adds	r7, #28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	20030000 	.word	0x20030000
 8000eb8:	00000400 	.word	0x00000400
 8000ebc:	20000164 	.word	0x20000164
 8000ec0:	20008470 	.word	0x20008470
 8000ec4:	2000845c 	.word	0x2000845c

08000ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <SystemInit+0x20>)
 8000ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <SystemInit+0x20>)
 8000ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f24 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef0:	480d      	ldr	r0, [pc, #52]	; (8000f28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ef2:	490e      	ldr	r1, [pc, #56]	; (8000f2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ef4:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef8:	e002      	b.n	8000f00 <LoopCopyDataInit>

08000efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efe:	3304      	adds	r3, #4

08000f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f04:	d3f9      	bcc.n	8000efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f06:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f08:	4c0b      	ldr	r4, [pc, #44]	; (8000f38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f0c:	e001      	b.n	8000f12 <LoopFillZerobss>

08000f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f10:	3204      	adds	r2, #4

08000f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f14:	d3fb      	bcc.n	8000f0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f16:	f7ff ffd7 	bl	8000ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1a:	f00d fc93 	bl	800e844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1e:	f7ff fcdb 	bl	80008d8 <main>
  bx  lr    
 8000f22:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f24:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f2c:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8000f30:	0801298c 	.word	0x0801298c
  ldr r2, =_sbss
 8000f34:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8000f38:	2000846c 	.word	0x2000846c

08000f3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC_IRQHandler>

08000f3e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d00b      	beq.n	8000f66 <LAN8742_RegisterBusIO+0x28>
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d007      	beq.n	8000f66 <LAN8742_RegisterBusIO+0x28>
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <LAN8742_RegisterBusIO+0x28>
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d102      	bne.n	8000f6c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	e014      	b.n	8000f96 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	691a      	ldr	r2, [r3, #16]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d17c      	bne.n	80010bc <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d002      	beq.n	8000fd0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2220      	movs	r2, #32
 8000fd4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	e01c      	b.n	8001016 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	f107 0208 	add.w	r2, r7, #8
 8000fe4:	2112      	movs	r1, #18
 8000fe6:	6978      	ldr	r0, [r7, #20]
 8000fe8:	4798      	blx	r3
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	da03      	bge.n	8000ff8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000ff0:	f06f 0304 	mvn.w	r3, #4
 8000ff4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000ff6:	e00b      	b.n	8001010 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	f003 031f 	and.w	r3, r3, #31
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	429a      	cmp	r2, r3
 8001002:	d105      	bne.n	8001010 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
         break;
 800100e:	e005      	b.n	800101c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	3301      	adds	r3, #1
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	2b1f      	cmp	r3, #31
 800101a:	d9df      	bls.n	8000fdc <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b1f      	cmp	r3, #31
 8001022:	d902      	bls.n	800102a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001024:	f06f 0302 	mvn.w	r3, #2
 8001028:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d145      	bne.n	80010bc <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6810      	ldr	r0, [r2, #0]
 8001038:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800103c:	2100      	movs	r1, #0
 800103e:	4798      	blx	r3
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	db37      	blt.n	80010b6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	6810      	ldr	r0, [r2, #0]
 800104e:	f107 0208 	add.w	r2, r7, #8
 8001052:	2100      	movs	r1, #0
 8001054:	4798      	blx	r3
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	db28      	blt.n	80010ae <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4798      	blx	r3
 8001062:	4603      	mov	r3, r0
 8001064:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001066:	e01c      	b.n	80010a2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4798      	blx	r3
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800107a:	d80e      	bhi.n	800109a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6810      	ldr	r0, [r2, #0]
 8001084:	f107 0208 	add.w	r2, r7, #8
 8001088:	2100      	movs	r1, #0
 800108a:	4798      	blx	r3
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	da07      	bge.n	80010a2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001092:	f06f 0304 	mvn.w	r3, #4
 8001096:	613b      	str	r3, [r7, #16]
                 break;
 8001098:	e010      	b.n	80010bc <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800109a:	f06f 0301 	mvn.w	r3, #1
 800109e:	613b      	str	r3, [r7, #16]
               break;
 80010a0:	e00c      	b.n	80010bc <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1dd      	bne.n	8001068 <LAN8742_Init+0xc6>
 80010ac:	e006      	b.n	80010bc <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80010ae:	f06f 0304 	mvn.w	r3, #4
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	e002      	b.n	80010bc <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80010b6:	f06f 0303 	mvn.w	r3, #3
 80010ba:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d112      	bne.n	80010e8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	4798      	blx	r3
 80010c8:	4603      	mov	r3, r0
 80010ca:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80010cc:	bf00      	nop
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	4798      	blx	r3
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010e0:	d9f5      	bls.n	80010ce <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80010e8:	693b      	ldr	r3, [r7, #16]
 }
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6810      	ldr	r0, [r2, #0]
 8001106:	f107 020c 	add.w	r2, r7, #12
 800110a:	2101      	movs	r1, #1
 800110c:	4798      	blx	r3
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	da02      	bge.n	800111a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001114:	f06f 0304 	mvn.w	r3, #4
 8001118:	e06e      	b.n	80011f8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	6810      	ldr	r0, [r2, #0]
 8001122:	f107 020c 	add.w	r2, r7, #12
 8001126:	2101      	movs	r1, #1
 8001128:	4798      	blx	r3
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	da02      	bge.n	8001136 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001130:	f06f 0304 	mvn.w	r3, #4
 8001134:	e060      	b.n	80011f8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001140:	2301      	movs	r3, #1
 8001142:	e059      	b.n	80011f8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	6810      	ldr	r0, [r2, #0]
 800114c:	f107 020c 	add.w	r2, r7, #12
 8001150:	2100      	movs	r1, #0
 8001152:	4798      	blx	r3
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	da02      	bge.n	8001160 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800115a:	f06f 0304 	mvn.w	r3, #4
 800115e:	e04b      	b.n	80011f8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d11b      	bne.n	80011a2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d006      	beq.n	8001182 <LAN8742_GetLinkState+0x90>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800117e:	2302      	movs	r3, #2
 8001180:	e03a      	b.n	80011f8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800118c:	2303      	movs	r3, #3
 800118e:	e033      	b.n	80011f8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800119a:	2304      	movs	r3, #4
 800119c:	e02c      	b.n	80011f8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800119e:	2305      	movs	r3, #5
 80011a0:	e02a      	b.n	80011f8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	6810      	ldr	r0, [r2, #0]
 80011aa:	f107 020c 	add.w	r2, r7, #12
 80011ae:	211f      	movs	r1, #31
 80011b0:	4798      	blx	r3
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	da02      	bge.n	80011be <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80011b8:	f06f 0304 	mvn.w	r3, #4
 80011bc:	e01c      	b.n	80011f8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80011c8:	2306      	movs	r3, #6
 80011ca:	e015      	b.n	80011f8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 031c 	and.w	r3, r3, #28
 80011d2:	2b18      	cmp	r3, #24
 80011d4:	d101      	bne.n	80011da <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80011d6:	2302      	movs	r3, #2
 80011d8:	e00e      	b.n	80011f8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f003 031c 	and.w	r3, r3, #28
 80011e0:	2b08      	cmp	r3, #8
 80011e2:	d101      	bne.n	80011e8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e007      	b.n	80011f8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 031c 	and.w	r3, r3, #28
 80011ee:	2b14      	cmp	r3, #20
 80011f0:	d101      	bne.n	80011f6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80011f2:	2304      	movs	r3, #4
 80011f4:	e000      	b.n	80011f8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80011f6:	2305      	movs	r3, #5
    }				
  }
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <HAL_Init+0x40>)
 800120a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800120e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <HAL_Init+0x40>)
 8001216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800121a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <HAL_Init+0x40>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a07      	ldr	r2, [pc, #28]	; (8001240 <HAL_Init+0x40>)
 8001222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001228:	2003      	movs	r0, #3
 800122a:	f000 f94f 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122e:	2000      	movs	r0, #0
 8001230:	f000 f808 	bl	8001244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001234:	f7ff fcd2 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023c00 	.word	0x40023c00

08001244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_InitTick+0x54>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x58>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125a:	fbb3 f3f1 	udiv	r3, r3, r1
 800125e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f967 	bl	8001536 <HAL_SYSTICK_Config>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e00e      	b.n	8001290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b0f      	cmp	r3, #15
 8001276:	d80a      	bhi.n	800128e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001278:	2200      	movs	r2, #0
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f000 f92f 	bl	80014e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001284:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <HAL_InitTick+0x5c>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	e000      	b.n	8001290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000030 	.word	0x20000030
 800129c:	20000038 	.word	0x20000038
 80012a0:	20000034 	.word	0x20000034

080012a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_IncTick+0x20>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_IncTick+0x24>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <HAL_IncTick+0x24>)
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000038 	.word	0x20000038
 80012c8:	20000168 	.word	0x20000168

080012cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <HAL_GetTick+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000168 	.word	0x20000168

080012e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ec:	f7ff ffee 	bl	80012cc <HAL_GetTick>
 80012f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012fc:	d005      	beq.n	800130a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_Delay+0x44>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4413      	add	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800130a:	bf00      	nop
 800130c:	f7ff ffde 	bl	80012cc <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	429a      	cmp	r2, r3
 800131a:	d8f7      	bhi.n	800130c <HAL_Delay+0x28>
  {
  }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000038 	.word	0x20000038

0800132c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001348:	4013      	ands	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800135c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	60d3      	str	r3, [r2, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <__NVIC_GetPriorityGrouping+0x18>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	f003 0307 	and.w	r3, r3, #7
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	db0b      	blt.n	80013ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	f003 021f 	and.w	r2, r3, #31
 80013a8:	4907      	ldr	r1, [pc, #28]	; (80013c8 <__NVIC_EnableIRQ+0x38>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	095b      	lsrs	r3, r3, #5
 80013b0:	2001      	movs	r0, #1
 80013b2:	fa00 f202 	lsl.w	r2, r0, r2
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000e100 	.word	0xe000e100

080013cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db0a      	blt.n	80013f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	490c      	ldr	r1, [pc, #48]	; (8001418 <__NVIC_SetPriority+0x4c>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	440b      	add	r3, r1
 80013f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f4:	e00a      	b.n	800140c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4908      	ldr	r1, [pc, #32]	; (800141c <__NVIC_SetPriority+0x50>)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	3b04      	subs	r3, #4
 8001404:	0112      	lsls	r2, r2, #4
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	440b      	add	r3, r1
 800140a:	761a      	strb	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f1c3 0307 	rsb	r3, r3, #7
 800143a:	2b04      	cmp	r3, #4
 800143c:	bf28      	it	cs
 800143e:	2304      	movcs	r3, #4
 8001440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3304      	adds	r3, #4
 8001446:	2b06      	cmp	r3, #6
 8001448:	d902      	bls.n	8001450 <NVIC_EncodePriority+0x30>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3b03      	subs	r3, #3
 800144e:	e000      	b.n	8001452 <NVIC_EncodePriority+0x32>
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	f04f 32ff 	mov.w	r2, #4294967295
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001468:	f04f 31ff 	mov.w	r1, #4294967295
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	43d9      	mvns	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	4313      	orrs	r3, r2
         );
}
 800147a:	4618      	mov	r0, r3
 800147c:	3724      	adds	r7, #36	; 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001498:	d301      	bcc.n	800149e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149a:	2301      	movs	r3, #1
 800149c:	e00f      	b.n	80014be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <SysTick_Config+0x40>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a6:	210f      	movs	r1, #15
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f7ff ff8e 	bl	80013cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <SysTick_Config+0x40>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <SysTick_Config+0x40>)
 80014b8:	2207      	movs	r2, #7
 80014ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	e000e010 	.word	0xe000e010

080014cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff29 	bl	800132c <__NVIC_SetPriorityGrouping>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f4:	f7ff ff3e 	bl	8001374 <__NVIC_GetPriorityGrouping>
 80014f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	6978      	ldr	r0, [r7, #20]
 8001500:	f7ff ff8e 	bl	8001420 <NVIC_EncodePriority>
 8001504:	4602      	mov	r2, r0
 8001506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff5d 	bl	80013cc <__NVIC_SetPriority>
}
 8001512:	bf00      	nop
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff31 	bl	8001390 <__NVIC_EnableIRQ>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ffa2 	bl	8001488 <SysTick_Config>
 8001544:	4603      	mov	r3, r0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800155c:	f7ff feb6 	bl	80012cc <HAL_GetTick>
 8001560:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d008      	beq.n	8001580 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2280      	movs	r2, #128	; 0x80
 8001572:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e052      	b.n	8001626 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0216 	bic.w	r2, r2, #22
 800158e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	695a      	ldr	r2, [r3, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800159e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d103      	bne.n	80015b0 <HAL_DMA_Abort+0x62>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d007      	beq.n	80015c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0208 	bic.w	r2, r2, #8
 80015be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0201 	bic.w	r2, r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015d0:	e013      	b.n	80015fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015d2:	f7ff fe7b 	bl	80012cc <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b05      	cmp	r3, #5
 80015de:	d90c      	bls.n	80015fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2220      	movs	r2, #32
 80015e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2203      	movs	r2, #3
 80015ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e015      	b.n	8001626 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1e4      	bne.n	80015d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160c:	223f      	movs	r2, #63	; 0x3f
 800160e:	409a      	lsls	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d004      	beq.n	800164c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2280      	movs	r2, #128	; 0x80
 8001646:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e00c      	b.n	8001666 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2205      	movs	r2, #5
 8001650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0201 	bic.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e06c      	b.n	8001760 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800168c:	2b00      	cmp	r3, #0
 800168e:	d106      	bne.n	800169e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2223      	movs	r2, #35	; 0x23
 8001694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f003 f9b1 	bl	8004a00 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	4b31      	ldr	r3, [pc, #196]	; (8001768 <HAL_ETH_Init+0xf4>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	4a30      	ldr	r2, [pc, #192]	; (8001768 <HAL_ETH_Init+0xf4>)
 80016a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ac:	6453      	str	r3, [r2, #68]	; 0x44
 80016ae:	4b2e      	ldr	r3, [pc, #184]	; (8001768 <HAL_ETH_Init+0xf4>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80016ba:	4b2c      	ldr	r3, [pc, #176]	; (800176c <HAL_ETH_Init+0xf8>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4a2b      	ldr	r2, [pc, #172]	; (800176c <HAL_ETH_Init+0xf8>)
 80016c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80016c4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80016c6:	4b29      	ldr	r3, [pc, #164]	; (800176c <HAL_ETH_Init+0xf8>)
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	4927      	ldr	r1, [pc, #156]	; (800176c <HAL_ETH_Init+0xf8>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80016d4:	4b25      	ldr	r3, [pc, #148]	; (800176c <HAL_ETH_Init+0xf8>)
 80016d6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016f0:	f7ff fdec 	bl	80012cc <HAL_GetTick>
 80016f4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016f6:	e011      	b.n	800171c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80016f8:	f7ff fde8 	bl	80012cc <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001706:	d909      	bls.n	800171c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2204      	movs	r2, #4
 800170c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	22e0      	movs	r2, #224	; 0xe0
 8001714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e021      	b.n	8001760 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1e4      	bne.n	80016f8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 fdf0 	bl	8002314 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 fe97 	bl	8002468 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 feed 	bl	800251a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	461a      	mov	r2, r3
 8001746:	2100      	movs	r1, #0
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 fe55 	bl	80023f8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2210      	movs	r2, #16
 800175a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40023800 	.word	0x40023800
 800176c:	40013800 	.word	0x40013800

08001770 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800177e:	2b10      	cmp	r3, #16
 8001780:	d150      	bne.n	8001824 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2223      	movs	r2, #35	; 0x23
 8001786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2204      	movs	r2, #4
 800178e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f9fd 	bl	8001b90 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 0208 	orr.w	r2, r2, #8
 80017a4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017ae:	2001      	movs	r0, #1
 80017b0:	f7ff fd98 	bl	80012e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0204 	orr.w	r2, r2, #4
 80017ca:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017d4:	2001      	movs	r0, #1
 80017d6:	f7ff fd85 	bl	80012e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 fc36 	bl	8002054 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017fe:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	f043 0302 	orr.w	r3, r3, #2
 8001812:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001816:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2223      	movs	r2, #35	; 0x23
 800181c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	e000      	b.n	8001826 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
  }
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b084      	sub	sp, #16
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800183c:	2b23      	cmp	r3, #35	; 0x23
 800183e:	d14a      	bne.n	80018d6 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2223      	movs	r2, #35	; 0x23
 8001844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800185a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800185e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	f023 0302 	bic.w	r3, r3, #2
 8001872:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001876:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0204 	bic.w	r2, r2, #4
 8001886:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001890:	2001      	movs	r0, #1
 8001892:	f7ff fd27 	bl	80012e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 fbd8 	bl	8002054 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0208 	bic.w	r2, r2, #8
 80018b2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018bc:	2001      	movs	r0, #1
 80018be:	f7ff fd11 	bl	80012e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2210      	movs	r2, #16
 80018ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e000      	b.n	80018d8 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
  }
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d109      	bne.n	8001906 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018f8:	f043 0201 	orr.w	r2, r3, #1
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e07c      	b.n	8001a00 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800190c:	2b23      	cmp	r3, #35	; 0x23
 800190e:	d176      	bne.n	80019fe <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001910:	2200      	movs	r2, #0
 8001912:	68b9      	ldr	r1, [r7, #8]
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 fe6d 	bl	80025f4 <ETH_Prepare_Tx_Descriptors>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d009      	beq.n	8001934 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001926:	f043 0202 	orr.w	r2, r3, #2
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e065      	b.n	8001a00 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001934:	f3bf 8f4f 	dsb	sy
}
 8001938:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3206      	adds	r2, #6
 8001942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001946:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	629a      	str	r2, [r3, #40]	; 0x28
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	2b03      	cmp	r3, #3
 8001958:	d904      	bls.n	8001964 <HAL_ETH_Transmit+0x84>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195e:	1f1a      	subs	r2, r3, #4
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	3106      	adds	r1, #6
 8001970:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001974:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001978:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800197a:	f7ff fca7 	bl	80012cc <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001980:	e037      	b.n	80019f2 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d011      	beq.n	80019b8 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800199a:	f043 0208 	orr.w	r2, r3, #8
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ac:	695a      	ldr	r2, [r3, #20]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e023      	b.n	8001a00 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019be:	d018      	beq.n	80019f2 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80019c0:	f7ff fc84 	bl	80012cc <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d302      	bcc.n	80019d6 <HAL_ETH_Transmit+0xf6>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10d      	bne.n	80019f2 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019dc:	f043 0204 	orr.w	r2, r3, #4
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80019ec:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e006      	b.n	8001a00 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	dbc3      	blt.n	8001982 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e000      	b.n	8001a00 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
  }
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d109      	bne.n	8001a34 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a26:	f043 0201 	orr.w	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0a8      	b.n	8001b86 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a3a:	2b23      	cmp	r3, #35	; 0x23
 8001a3c:	d001      	beq.n	8001a42 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0a1      	b.n	8001b86 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a46:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	3212      	adds	r2, #18
 8001a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a52:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a58:	f1c3 0304 	rsb	r3, r3, #4
 8001a5c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a5e:	e06a      	b.n	8001b36 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d007      	beq.n	8001a7c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	699a      	ldr	r2, [r3, #24]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	69da      	ldr	r2, [r3, #28]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d103      	bne.n	8001a90 <HAL_ETH_ReadData+0x88>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d040      	beq.n	8001b12 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00c      	beq.n	8001ad4 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	0c1b      	lsrs	r3, r3, #16
 8001ac0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001ac4:	3b04      	subs	r3, #4
 8001ac6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001aec:	461a      	mov	r2, r3
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	f003 f955 	bl	8004da0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	441a      	add	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3301      	adds	r3, #1
 8001b16:	61fb      	str	r3, [r7, #28]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d902      	bls.n	8001b24 <HAL_ETH_ReadData+0x11c>
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3b04      	subs	r3, #4
 8001b22:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	3212      	adds	r2, #18
 8001b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3301      	adds	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	db06      	blt.n	8001b4c <HAL_ETH_ReadData+0x144>
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d202      	bcs.n	8001b4c <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d089      	beq.n	8001a60 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	441a      	add	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f815 	bl	8001b90 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69fa      	ldr	r2, [r7, #28]
 8001b6a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d108      	bne.n	8001b84 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	e000      	b.n	8001b86 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3720      	adds	r7, #32
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ba4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	3212      	adds	r2, #18
 8001bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bb6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001bb8:	e040      	b.n	8001c3c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d112      	bne.n	8001be8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001bc2:	f107 030c 	add.w	r3, r7, #12
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 f8ba 	bl	8004d40 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d102      	bne.n	8001bd8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	74fb      	strb	r3, [r7, #19]
 8001bd6:	e007      	b.n	8001be8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	461a      	mov	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001be8:	7cfb      	ldrb	r3, [r7, #19]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d026      	beq.n	8001c3c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d103      	bne.n	8001bfe <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	4a1e      	ldr	r2, [pc, #120]	; (8001c74 <ETH_UpdateDescriptor+0xe4>)
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	e003      	b.n	8001c06 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001c04:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c06:	f3bf 8f5f 	dmb	sy
}
 8001c0a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d902      	bls.n	8001c2a <ETH_UpdateDescriptor+0x9a>
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	3b04      	subs	r3, #4
 8001c28:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	3212      	adds	r2, #18
 8001c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c34:	617b      	str	r3, [r7, #20]
      desccount--;
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <ETH_UpdateDescriptor+0xb8>
 8001c42:	7cfb      	ldrb	r3, [r7, #19]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1b8      	bne.n	8001bba <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d00c      	beq.n	8001c6c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	3720      	adds	r7, #32
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	80004600 	.word	0x80004600

08001c78 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 031c 	and.w	r3, r3, #28
 8001c94:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	02db      	lsls	r3, r3, #11
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	019b      	lsls	r3, r3, #6
 8001ca6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f023 0302 	bic.w	r3, r3, #2
 8001cb6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001cc8:	f7ff fb00 	bl	80012cc <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cce:	e00d      	b.n	8001cec <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001cd0:	f7ff fafc 	bl	80012cc <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cde:	d301      	bcc.n	8001ce4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e010      	b.n	8001d06 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1ec      	bne.n	8001cd0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b086      	sub	sp, #24
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f003 031c 	and.w	r3, r3, #28
 8001d2a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	02db      	lsls	r3, r3, #11
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	019b      	lsls	r3, r3, #6
 8001d3c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d68:	f7ff fab0 	bl	80012cc <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d6e:	e00d      	b.n	8001d8c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001d70:	f7ff faac 	bl	80012cc <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d7e:	d301      	bcc.n	8001d84 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e009      	b.n	8001d98 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1ec      	bne.n	8001d70 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0d9      	b.n	8001f68 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	bf14      	ite	ne
 8001dc2:	2301      	movne	r3, #1
 8001dc4:	2300      	moveq	r3, #0
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf0c      	ite	eq
 8001dec:	2301      	moveq	r3, #1
 8001dee:	2300      	movne	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	461a      	mov	r2, r3
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf14      	ite	ne
 8001e08:	2301      	movne	r3, #1
 8001e0a:	2300      	moveq	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	bf0c      	ite	eq
 8001e22:	2301      	moveq	r3, #1
 8001e24:	2300      	movne	r3, #0
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf14      	ite	ne
 8001e3c:	2301      	movne	r3, #1
 8001e3e:	2300      	moveq	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	461a      	mov	r2, r3
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	bf0c      	ite	eq
 8001e72:	2301      	moveq	r3, #1
 8001e74:	2300      	movne	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf0c      	ite	eq
 8001e8c:	2301      	moveq	r3, #1
 8001e8e:	2300      	movne	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	bf14      	ite	ne
 8001ea6:	2301      	movne	r3, #1
 8001ea8:	2300      	moveq	r3, #0
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	bf14      	ite	ne
 8001ece:	2301      	movne	r3, #1
 8001ed0:	2300      	moveq	r3, #0
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf14      	ite	ne
 8001ee8:	2301      	movne	r3, #1
 8001eea:	2300      	moveq	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	461a      	mov	r2, r3
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	0c1b      	lsrs	r3, r3, #16
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf14      	ite	ne
 8001f3c:	2301      	movne	r3, #1
 8001f3e:	2300      	moveq	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	461a      	mov	r2, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	bf14      	ite	ne
 8001f58:	2301      	movne	r3, #1
 8001f5a:	2300      	moveq	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e00b      	b.n	8001fa0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d105      	bne.n	8001f9e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001f92:	6839      	ldr	r1, [r7, #0]
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f883 	bl	80020a0 <ETH_SetMACConfig>

    return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e000      	b.n	8001fa0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
  }
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f023 031c 	bic.w	r3, r3, #28
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001fc0:	f001 fa78 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 8001fc4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	4a1d      	ldr	r2, [pc, #116]	; (8002040 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d908      	bls.n	8001fe0 <HAL_ETH_SetMDIOClockRange+0x38>
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	4a1c      	ldr	r2, [pc, #112]	; (8002044 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d804      	bhi.n	8001fe0 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f043 0308 	orr.w	r3, r3, #8
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	e027      	b.n	8002030 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	4a18      	ldr	r2, [pc, #96]	; (8002044 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d908      	bls.n	8001ffa <HAL_ETH_SetMDIOClockRange+0x52>
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4a17      	ldr	r2, [pc, #92]	; (8002048 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d204      	bcs.n	8001ffa <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f043 030c 	orr.w	r3, r3, #12
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	e01a      	b.n	8002030 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	4a12      	ldr	r2, [pc, #72]	; (8002048 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d303      	bcc.n	800200a <HAL_ETH_SetMDIOClockRange+0x62>
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	4a11      	ldr	r2, [pc, #68]	; (800204c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d911      	bls.n	800202e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	4a0f      	ldr	r2, [pc, #60]	; (800204c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d908      	bls.n	8002024 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d804      	bhi.n	8002024 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f043 0304 	orr.w	r3, r3, #4
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	e005      	b.n	8002030 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f043 0310 	orr.w	r3, r3, #16
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	e000      	b.n	8002030 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800202e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	611a      	str	r2, [r3, #16]
}
 8002038:	bf00      	nop
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	01312cff 	.word	0x01312cff
 8002044:	02160ebf 	.word	0x02160ebf
 8002048:	03938700 	.word	0x03938700
 800204c:	05f5e0ff 	.word	0x05f5e0ff
 8002050:	08f0d17f 	.word	0x08f0d17f

08002054 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002072:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002076:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002084:	2001      	movs	r0, #1
 8002086:	f7ff f92d 	bl	80012e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002094:	6193      	str	r3, [r2, #24]
}
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4b51      	ldr	r3, [pc, #324]	; (80021fc <ETH_SetMACConfig+0x15c>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	7c1b      	ldrb	r3, [r3, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d102      	bne.n	80020c8 <ETH_SetMACConfig+0x28>
 80020c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80020c6:	e000      	b.n	80020ca <ETH_SetMACConfig+0x2a>
 80020c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	7c5b      	ldrb	r3, [r3, #17]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d102      	bne.n	80020d8 <ETH_SetMACConfig+0x38>
 80020d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020d6:	e000      	b.n	80020da <ETH_SetMACConfig+0x3a>
 80020d8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020da:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80020e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	7fdb      	ldrb	r3, [r3, #31]
 80020e6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80020e8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	7f92      	ldrb	r2, [r2, #30]
 80020f4:	2a00      	cmp	r2, #0
 80020f6:	d102      	bne.n	80020fe <ETH_SetMACConfig+0x5e>
 80020f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020fc:	e000      	b.n	8002100 <ETH_SetMACConfig+0x60>
 80020fe:	2200      	movs	r2, #0
                        macconf->Speed |
 8002100:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	7f1b      	ldrb	r3, [r3, #28]
 8002106:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002108:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800210e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	791b      	ldrb	r3, [r3, #4]
 8002114:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002116:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800211e:	2a00      	cmp	r2, #0
 8002120:	d102      	bne.n	8002128 <ETH_SetMACConfig+0x88>
 8002122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002126:	e000      	b.n	800212a <ETH_SetMACConfig+0x8a>
 8002128:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800212a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	7bdb      	ldrb	r3, [r3, #15]
 8002130:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002132:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002138:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002140:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002142:	4313      	orrs	r3, r2
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4313      	orrs	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800215a:	2001      	movs	r0, #1
 800215c:	f7ff f8c2 	bl	80012e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002176:	4013      	ands	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800217e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002186:	2a00      	cmp	r2, #0
 8002188:	d101      	bne.n	800218e <ETH_SetMACConfig+0xee>
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	e000      	b.n	8002190 <ETH_SetMACConfig+0xf0>
 800218e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002190:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002196:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800219e:	2a01      	cmp	r2, #1
 80021a0:	d101      	bne.n	80021a6 <ETH_SetMACConfig+0x106>
 80021a2:	2208      	movs	r2, #8
 80021a4:	e000      	b.n	80021a8 <ETH_SetMACConfig+0x108>
 80021a6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80021a8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80021b0:	2a01      	cmp	r2, #1
 80021b2:	d101      	bne.n	80021b8 <ETH_SetMACConfig+0x118>
 80021b4:	2204      	movs	r2, #4
 80021b6:	e000      	b.n	80021ba <ETH_SetMACConfig+0x11a>
 80021b8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80021ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80021c2:	2a01      	cmp	r2, #1
 80021c4:	d101      	bne.n	80021ca <ETH_SetMACConfig+0x12a>
 80021c6:	2202      	movs	r2, #2
 80021c8:	e000      	b.n	80021cc <ETH_SetMACConfig+0x12c>
 80021ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021cc:	4313      	orrs	r3, r2
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021e4:	2001      	movs	r0, #1
 80021e6:	f7ff f87d 	bl	80012e4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	619a      	str	r2, [r3, #24]
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	ff20810f 	.word	0xff20810f

08002200 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <ETH_SetDMAConfig+0x110>)
 800221a:	4013      	ands	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	7b1b      	ldrb	r3, [r3, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d102      	bne.n	800222c <ETH_SetDMAConfig+0x2c>
 8002226:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800222a:	e000      	b.n	800222e <ETH_SetDMAConfig+0x2e>
 800222c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	7b5b      	ldrb	r3, [r3, #13]
 8002232:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002234:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	7f52      	ldrb	r2, [r2, #29]
 800223a:	2a00      	cmp	r2, #0
 800223c:	d102      	bne.n	8002244 <ETH_SetDMAConfig+0x44>
 800223e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002242:	e000      	b.n	8002246 <ETH_SetDMAConfig+0x46>
 8002244:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002246:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	7b9b      	ldrb	r3, [r3, #14]
 800224c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800224e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002254:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	7f1b      	ldrb	r3, [r3, #28]
 800225a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800225c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	7f9b      	ldrb	r3, [r3, #30]
 8002262:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002264:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800226a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002272:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002274:	4313      	orrs	r3, r2
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002284:	461a      	mov	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002296:	2001      	movs	r0, #1
 8002298:	f7ff f824 	bl	80012e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a4:	461a      	mov	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	791b      	ldrb	r3, [r3, #4]
 80022ae:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022b4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80022ba:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80022c0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022c8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80022ca:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80022d2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80022d8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022e6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f4:	2001      	movs	r0, #1
 80022f6:	f7fe fff5 	bl	80012e4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002302:	461a      	mov	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6013      	str	r3, [r2, #0]
}
 8002308:	bf00      	nop
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	f8de3f23 	.word	0xf8de3f23

08002314 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b0a6      	sub	sp, #152	; 0x98
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800231c:	2301      	movs	r3, #1
 800231e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002322:	2301      	movs	r3, #1
 8002324:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002328:	2300      	movs	r3, #0
 800232a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800232c:	2300      	movs	r3, #0
 800232e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002332:	2301      	movs	r3, #1
 8002334:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800233e:	2301      	movs	r3, #1
 8002340:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002344:	2300      	movs	r3, #0
 8002346:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002350:	2300      	movs	r3, #0
 8002352:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002354:	2300      	movs	r3, #0
 8002356:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800235a:	2300      	movs	r3, #0
 800235c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800235e:	2300      	movs	r3, #0
 8002360:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800236a:	2300      	movs	r3, #0
 800236c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002376:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800237a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800237c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002380:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002388:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800238c:	4619      	mov	r1, r3
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff fe86 	bl	80020a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002394:	2301      	movs	r3, #1
 8002396:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002398:	2301      	movs	r3, #1
 800239a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800239c:	2301      	movs	r3, #1
 800239e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80023a2:	2301      	movs	r3, #1
 80023a4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80023aa:	2300      	movs	r3, #0
 80023ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80023b6:	2300      	movs	r3, #0
 80023b8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80023ba:	2301      	movs	r3, #1
 80023bc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80023c0:	2301      	movs	r3, #1
 80023c2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80023c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023c8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023ce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80023d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80023d6:	2301      	movs	r3, #1
 80023d8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80023e4:	f107 0308 	add.w	r3, r7, #8
 80023e8:	4619      	mov	r1, r3
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ff08 	bl	8002200 <ETH_SetDMAConfig>
}
 80023f0:	bf00      	nop
 80023f2:	3798      	adds	r7, #152	; 0x98
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3305      	adds	r3, #5
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	3204      	adds	r2, #4
 8002410:	7812      	ldrb	r2, [r2, #0]
 8002412:	4313      	orrs	r3, r2
 8002414:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <ETH_MACAddressConfig+0x68>)
 800241a:	4413      	add	r3, r2
 800241c:	461a      	mov	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3303      	adds	r3, #3
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	061a      	lsls	r2, r3, #24
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3302      	adds	r3, #2
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	041b      	lsls	r3, r3, #16
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3301      	adds	r3, #1
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	4313      	orrs	r3, r2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	7812      	ldrb	r2, [r2, #0]
 8002442:	4313      	orrs	r3, r2
 8002444:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <ETH_MACAddressConfig+0x6c>)
 800244a:	4413      	add	r3, r2
 800244c:	461a      	mov	r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	6013      	str	r3, [r2, #0]
}
 8002452:	bf00      	nop
 8002454:	371c      	adds	r7, #28
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40028040 	.word	0x40028040
 8002464:	40028044 	.word	0x40028044

08002468 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	e03e      	b.n	80024f4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68d9      	ldr	r1, [r3, #12]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2200      	movs	r2, #0
 8002492:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2200      	movs	r2, #0
 800249e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	3206      	adds	r2, #6
 80024a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d80c      	bhi.n	80024d8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68d9      	ldr	r1, [r3, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	440b      	add	r3, r1
 80024d0:	461a      	mov	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	e004      	b.n	80024e2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	461a      	mov	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	3301      	adds	r3, #1
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d9bd      	bls.n	8002476 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800250c:	611a      	str	r2, [r3, #16]
}
 800250e:	bf00      	nop
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800251a:	b480      	push	{r7}
 800251c:	b085      	sub	sp, #20
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	e046      	b.n	80025b6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6919      	ldr	r1, [r3, #16]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	440b      	add	r3, r1
 8002538:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2200      	movs	r2, #0
 8002544:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2200      	movs	r2, #0
 800254a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2200      	movs	r2, #0
 8002550:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2200      	movs	r2, #0
 8002556:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2200      	movs	r2, #0
 800255c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002564:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800256c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800257a:	68b9      	ldr	r1, [r7, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	3212      	adds	r2, #18
 8002582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d80c      	bhi.n	80025a6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6919      	ldr	r1, [r3, #16]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	440b      	add	r3, r1
 800259e:	461a      	mov	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	60da      	str	r2, [r3, #12]
 80025a4:	e004      	b.n	80025b0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	461a      	mov	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	3301      	adds	r3, #1
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d9b5      	bls.n	8002528 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691a      	ldr	r2, [r3, #16]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e6:	60da      	str	r2, [r3, #12]
}
 80025e8:	bf00      	nop
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b08d      	sub	sp, #52	; 0x34
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	3318      	adds	r3, #24
 8002604:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800261a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800261e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002636:	d007      	beq.n	8002648 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263c:	3304      	adds	r3, #4
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002648:	2302      	movs	r3, #2
 800264a:	e103      	b.n	8002854 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	3301      	adds	r3, #1
 8002650:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002664:	f023 031f 	bic.w	r3, r3, #31
 8002668:	69fa      	ldr	r2, [r7, #28]
 800266a:	6852      	ldr	r2, [r2, #4]
 800266c:	431a      	orrs	r2, r3
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d008      	beq.n	8002690 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	431a      	orrs	r2, r3
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80026d2:	f3bf 8f5f 	dmb	sy
}
 80026d6:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80026e4:	e084      	b.n	80027f0 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d006      	beq.n	8002706 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	e005      	b.n	8002712 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002714:	3301      	adds	r3, #1
 8002716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271a:	2b03      	cmp	r3, #3
 800271c:	d902      	bls.n	8002724 <ETH_Prepare_Tx_Descriptors+0x130>
 800271e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002720:	3b04      	subs	r3, #4
 8002722:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800272c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002742:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002746:	d007      	beq.n	8002758 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274c:	3304      	adds	r3, #4
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d029      	beq.n	80027ac <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002764:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002766:	2300      	movs	r3, #0
 8002768:	62bb      	str	r3, [r7, #40]	; 0x28
 800276a:	e019      	b.n	80027a0 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 800276c:	f3bf 8f5f 	dmb	sy
}
 8002770:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002780:	3301      	adds	r3, #1
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002786:	2b03      	cmp	r3, #3
 8002788:	d902      	bls.n	8002790 <ETH_Prepare_Tx_Descriptors+0x19c>
 800278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278c:	3b04      	subs	r3, #4
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002798:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279c:	3301      	adds	r3, #1
 800279e:	62bb      	str	r3, [r7, #40]	; 0x28
 80027a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d3e1      	bcc.n	800276c <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80027a8:	2302      	movs	r3, #2
 80027aa:	e053      	b.n	8002854 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	3301      	adds	r3, #1
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80027ca:	f023 031f 	bic.w	r3, r3, #31
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	6852      	ldr	r2, [r2, #4]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	3301      	adds	r3, #1
 80027dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80027de:	f3bf 8f5f 	dmb	sy
}
 80027e2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f47f af76 	bne.w	80026e6 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d006      	beq.n	800280e <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	e005      	b.n	800281a <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800282a:	6979      	ldr	r1, [r7, #20]
 800282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282e:	3304      	adds	r3, #4
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800283a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800283c:	b672      	cpsid	i
}
 800283e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	4413      	add	r3, r2
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800284e:	b662      	cpsie	i
}
 8002850:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3734      	adds	r7, #52	; 0x34
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002860:	b480      	push	{r7}
 8002862:	b089      	sub	sp, #36	; 0x24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	e177      	b.n	8002b6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800287c:	2201      	movs	r2, #1
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	429a      	cmp	r2, r3
 8002896:	f040 8166 	bne.w	8002b66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d005      	beq.n	80028b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d130      	bne.n	8002914 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	2203      	movs	r2, #3
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e8:	2201      	movs	r2, #1
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 0201 	and.w	r2, r3, #1
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	2b03      	cmp	r3, #3
 800291e:	d017      	beq.n	8002950 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	2203      	movs	r2, #3
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d123      	bne.n	80029a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	08da      	lsrs	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3208      	adds	r2, #8
 8002964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002968:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	220f      	movs	r2, #15
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	08da      	lsrs	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3208      	adds	r2, #8
 800299e:	69b9      	ldr	r1, [r7, #24]
 80029a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2203      	movs	r2, #3
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0203 	and.w	r2, r3, #3
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80c0 	beq.w	8002b66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b66      	ldr	r3, [pc, #408]	; (8002b84 <HAL_GPIO_Init+0x324>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	4a65      	ldr	r2, [pc, #404]	; (8002b84 <HAL_GPIO_Init+0x324>)
 80029f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f4:	6453      	str	r3, [r2, #68]	; 0x44
 80029f6:	4b63      	ldr	r3, [pc, #396]	; (8002b84 <HAL_GPIO_Init+0x324>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a02:	4a61      	ldr	r2, [pc, #388]	; (8002b88 <HAL_GPIO_Init+0x328>)
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	3302      	adds	r3, #2
 8002a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	220f      	movs	r2, #15
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a58      	ldr	r2, [pc, #352]	; (8002b8c <HAL_GPIO_Init+0x32c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d037      	beq.n	8002a9e <HAL_GPIO_Init+0x23e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a57      	ldr	r2, [pc, #348]	; (8002b90 <HAL_GPIO_Init+0x330>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d031      	beq.n	8002a9a <HAL_GPIO_Init+0x23a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a56      	ldr	r2, [pc, #344]	; (8002b94 <HAL_GPIO_Init+0x334>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d02b      	beq.n	8002a96 <HAL_GPIO_Init+0x236>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a55      	ldr	r2, [pc, #340]	; (8002b98 <HAL_GPIO_Init+0x338>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d025      	beq.n	8002a92 <HAL_GPIO_Init+0x232>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a54      	ldr	r2, [pc, #336]	; (8002b9c <HAL_GPIO_Init+0x33c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d01f      	beq.n	8002a8e <HAL_GPIO_Init+0x22e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a53      	ldr	r2, [pc, #332]	; (8002ba0 <HAL_GPIO_Init+0x340>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d019      	beq.n	8002a8a <HAL_GPIO_Init+0x22a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a52      	ldr	r2, [pc, #328]	; (8002ba4 <HAL_GPIO_Init+0x344>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d013      	beq.n	8002a86 <HAL_GPIO_Init+0x226>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a51      	ldr	r2, [pc, #324]	; (8002ba8 <HAL_GPIO_Init+0x348>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00d      	beq.n	8002a82 <HAL_GPIO_Init+0x222>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a50      	ldr	r2, [pc, #320]	; (8002bac <HAL_GPIO_Init+0x34c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d007      	beq.n	8002a7e <HAL_GPIO_Init+0x21e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a4f      	ldr	r2, [pc, #316]	; (8002bb0 <HAL_GPIO_Init+0x350>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d101      	bne.n	8002a7a <HAL_GPIO_Init+0x21a>
 8002a76:	2309      	movs	r3, #9
 8002a78:	e012      	b.n	8002aa0 <HAL_GPIO_Init+0x240>
 8002a7a:	230a      	movs	r3, #10
 8002a7c:	e010      	b.n	8002aa0 <HAL_GPIO_Init+0x240>
 8002a7e:	2308      	movs	r3, #8
 8002a80:	e00e      	b.n	8002aa0 <HAL_GPIO_Init+0x240>
 8002a82:	2307      	movs	r3, #7
 8002a84:	e00c      	b.n	8002aa0 <HAL_GPIO_Init+0x240>
 8002a86:	2306      	movs	r3, #6
 8002a88:	e00a      	b.n	8002aa0 <HAL_GPIO_Init+0x240>
 8002a8a:	2305      	movs	r3, #5
 8002a8c:	e008      	b.n	8002aa0 <HAL_GPIO_Init+0x240>
 8002a8e:	2304      	movs	r3, #4
 8002a90:	e006      	b.n	8002aa0 <HAL_GPIO_Init+0x240>
 8002a92:	2303      	movs	r3, #3
 8002a94:	e004      	b.n	8002aa0 <HAL_GPIO_Init+0x240>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e002      	b.n	8002aa0 <HAL_GPIO_Init+0x240>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <HAL_GPIO_Init+0x240>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	f002 0203 	and.w	r2, r2, #3
 8002aa6:	0092      	lsls	r2, r2, #2
 8002aa8:	4093      	lsls	r3, r2
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ab0:	4935      	ldr	r1, [pc, #212]	; (8002b88 <HAL_GPIO_Init+0x328>)
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	089b      	lsrs	r3, r3, #2
 8002ab6:	3302      	adds	r3, #2
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002abe:	4b3d      	ldr	r3, [pc, #244]	; (8002bb4 <HAL_GPIO_Init+0x354>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4013      	ands	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ae2:	4a34      	ldr	r2, [pc, #208]	; (8002bb4 <HAL_GPIO_Init+0x354>)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae8:	4b32      	ldr	r3, [pc, #200]	; (8002bb4 <HAL_GPIO_Init+0x354>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b0c:	4a29      	ldr	r2, [pc, #164]	; (8002bb4 <HAL_GPIO_Init+0x354>)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b12:	4b28      	ldr	r3, [pc, #160]	; (8002bb4 <HAL_GPIO_Init+0x354>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b36:	4a1f      	ldr	r2, [pc, #124]	; (8002bb4 <HAL_GPIO_Init+0x354>)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b3c:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <HAL_GPIO_Init+0x354>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b60:	4a14      	ldr	r2, [pc, #80]	; (8002bb4 <HAL_GPIO_Init+0x354>)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	61fb      	str	r3, [r7, #28]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	2b0f      	cmp	r3, #15
 8002b70:	f67f ae84 	bls.w	800287c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop
 8002b78:	3724      	adds	r7, #36	; 0x24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40013800 	.word	0x40013800
 8002b8c:	40020000 	.word	0x40020000
 8002b90:	40020400 	.word	0x40020400
 8002b94:	40020800 	.word	0x40020800
 8002b98:	40020c00 	.word	0x40020c00
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	40021400 	.word	0x40021400
 8002ba4:	40021800 	.word	0x40021800
 8002ba8:	40021c00 	.word	0x40021c00
 8002bac:	40022000 	.word	0x40022000
 8002bb0:	40022400 	.word	0x40022400
 8002bb4:	40013c00 	.word	0x40013c00

08002bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	807b      	strh	r3, [r7, #2]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc8:	787b      	ldrb	r3, [r7, #1]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bce:	887a      	ldrh	r2, [r7, #2]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bd4:	e003      	b.n	8002bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bd6:	887b      	ldrh	r3, [r7, #2]
 8002bd8:	041a      	lsls	r2, r3, #16
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	619a      	str	r2, [r3, #24]
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e267      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d075      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c0a:	4b88      	ldr	r3, [pc, #544]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d00c      	beq.n	8002c30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c16:	4b85      	ldr	r3, [pc, #532]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d112      	bne.n	8002c48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c22:	4b82      	ldr	r3, [pc, #520]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c2e:	d10b      	bne.n	8002c48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c30:	4b7e      	ldr	r3, [pc, #504]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d05b      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x108>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d157      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e242      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c50:	d106      	bne.n	8002c60 <HAL_RCC_OscConfig+0x74>
 8002c52:	4b76      	ldr	r3, [pc, #472]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a75      	ldr	r2, [pc, #468]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e01d      	b.n	8002c9c <HAL_RCC_OscConfig+0xb0>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCC_OscConfig+0x98>
 8002c6a:	4b70      	ldr	r3, [pc, #448]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a6f      	ldr	r2, [pc, #444]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	4b6d      	ldr	r3, [pc, #436]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a6c      	ldr	r2, [pc, #432]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e00b      	b.n	8002c9c <HAL_RCC_OscConfig+0xb0>
 8002c84:	4b69      	ldr	r3, [pc, #420]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a68      	ldr	r2, [pc, #416]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	4b66      	ldr	r3, [pc, #408]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a65      	ldr	r2, [pc, #404]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d013      	beq.n	8002ccc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7fe fb12 	bl	80012cc <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cac:	f7fe fb0e 	bl	80012cc <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	; 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e207      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	4b5b      	ldr	r3, [pc, #364]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0xc0>
 8002cca:	e014      	b.n	8002cf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fafe 	bl	80012cc <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd4:	f7fe fafa 	bl	80012cc <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b64      	cmp	r3, #100	; 0x64
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e1f3      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce6:	4b51      	ldr	r3, [pc, #324]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0xe8>
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d063      	beq.n	8002dca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d02:	4b4a      	ldr	r3, [pc, #296]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00b      	beq.n	8002d26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d0e:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	d11c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d1a:	4b44      	ldr	r3, [pc, #272]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d116      	bne.n	8002d54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d26:	4b41      	ldr	r3, [pc, #260]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <HAL_RCC_OscConfig+0x152>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d001      	beq.n	8002d3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e1c7      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3e:	4b3b      	ldr	r3, [pc, #236]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4937      	ldr	r1, [pc, #220]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d52:	e03a      	b.n	8002dca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d020      	beq.n	8002d9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d5c:	4b34      	ldr	r3, [pc, #208]	; (8002e30 <HAL_RCC_OscConfig+0x244>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d62:	f7fe fab3 	bl	80012cc <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d6a:	f7fe faaf 	bl	80012cc <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e1a8      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7c:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0f0      	beq.n	8002d6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d88:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4925      	ldr	r1, [pc, #148]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	600b      	str	r3, [r1, #0]
 8002d9c:	e015      	b.n	8002dca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d9e:	4b24      	ldr	r3, [pc, #144]	; (8002e30 <HAL_RCC_OscConfig+0x244>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da4:	f7fe fa92 	bl	80012cc <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dac:	f7fe fa8e 	bl	80012cc <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e187      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dbe:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d036      	beq.n	8002e44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d016      	beq.n	8002e0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dde:	4b15      	ldr	r3, [pc, #84]	; (8002e34 <HAL_RCC_OscConfig+0x248>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de4:	f7fe fa72 	bl	80012cc <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dec:	f7fe fa6e 	bl	80012cc <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e167      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfe:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x200>
 8002e0a:	e01b      	b.n	8002e44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e0c:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <HAL_RCC_OscConfig+0x248>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e12:	f7fe fa5b 	bl	80012cc <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e18:	e00e      	b.n	8002e38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e1a:	f7fe fa57 	bl	80012cc <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d907      	bls.n	8002e38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e150      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	42470000 	.word	0x42470000
 8002e34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e38:	4b88      	ldr	r3, [pc, #544]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1ea      	bne.n	8002e1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8097 	beq.w	8002f80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e52:	2300      	movs	r3, #0
 8002e54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e56:	4b81      	ldr	r3, [pc, #516]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10f      	bne.n	8002e82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	4b7d      	ldr	r3, [pc, #500]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	4a7c      	ldr	r2, [pc, #496]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e70:	6413      	str	r3, [r2, #64]	; 0x40
 8002e72:	4b7a      	ldr	r3, [pc, #488]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e82:	4b77      	ldr	r3, [pc, #476]	; (8003060 <HAL_RCC_OscConfig+0x474>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d118      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e8e:	4b74      	ldr	r3, [pc, #464]	; (8003060 <HAL_RCC_OscConfig+0x474>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a73      	ldr	r2, [pc, #460]	; (8003060 <HAL_RCC_OscConfig+0x474>)
 8002e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e9a:	f7fe fa17 	bl	80012cc <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea2:	f7fe fa13 	bl	80012cc <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e10c      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb4:	4b6a      	ldr	r3, [pc, #424]	; (8003060 <HAL_RCC_OscConfig+0x474>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x2ea>
 8002ec8:	4b64      	ldr	r3, [pc, #400]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ecc:	4a63      	ldr	r2, [pc, #396]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed4:	e01c      	b.n	8002f10 <HAL_RCC_OscConfig+0x324>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b05      	cmp	r3, #5
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x30c>
 8002ede:	4b5f      	ldr	r3, [pc, #380]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	4a5e      	ldr	r2, [pc, #376]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002ee4:	f043 0304 	orr.w	r3, r3, #4
 8002ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eea:	4b5c      	ldr	r3, [pc, #368]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eee:	4a5b      	ldr	r2, [pc, #364]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef6:	e00b      	b.n	8002f10 <HAL_RCC_OscConfig+0x324>
 8002ef8:	4b58      	ldr	r3, [pc, #352]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efc:	4a57      	ldr	r2, [pc, #348]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002efe:	f023 0301 	bic.w	r3, r3, #1
 8002f02:	6713      	str	r3, [r2, #112]	; 0x70
 8002f04:	4b55      	ldr	r3, [pc, #340]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f08:	4a54      	ldr	r2, [pc, #336]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002f0a:	f023 0304 	bic.w	r3, r3, #4
 8002f0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d015      	beq.n	8002f44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f18:	f7fe f9d8 	bl	80012cc <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1e:	e00a      	b.n	8002f36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f20:	f7fe f9d4 	bl	80012cc <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e0cb      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f36:	4b49      	ldr	r3, [pc, #292]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0ee      	beq.n	8002f20 <HAL_RCC_OscConfig+0x334>
 8002f42:	e014      	b.n	8002f6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f44:	f7fe f9c2 	bl	80012cc <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f4c:	f7fe f9be 	bl	80012cc <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e0b5      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f62:	4b3e      	ldr	r3, [pc, #248]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1ee      	bne.n	8002f4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f6e:	7dfb      	ldrb	r3, [r7, #23]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f74:	4b39      	ldr	r3, [pc, #228]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	4a38      	ldr	r2, [pc, #224]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 80a1 	beq.w	80030cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f8a:	4b34      	ldr	r3, [pc, #208]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d05c      	beq.n	8003050 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d141      	bne.n	8003022 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9e:	4b31      	ldr	r3, [pc, #196]	; (8003064 <HAL_RCC_OscConfig+0x478>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa4:	f7fe f992 	bl	80012cc <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fac:	f7fe f98e 	bl	80012cc <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e087      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fbe:	4b27      	ldr	r3, [pc, #156]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69da      	ldr	r2, [r3, #28]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	019b      	lsls	r3, r3, #6
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	085b      	lsrs	r3, r3, #1
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	041b      	lsls	r3, r3, #16
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	061b      	lsls	r3, r3, #24
 8002fee:	491b      	ldr	r1, [pc, #108]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff4:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <HAL_RCC_OscConfig+0x478>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7fe f967 	bl	80012cc <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003002:	f7fe f963 	bl	80012cc <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e05c      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x416>
 8003020:	e054      	b.n	80030cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003022:	4b10      	ldr	r3, [pc, #64]	; (8003064 <HAL_RCC_OscConfig+0x478>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7fe f950 	bl	80012cc <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003030:	f7fe f94c 	bl	80012cc <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e045      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x444>
 800304e:	e03d      	b.n	80030cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d107      	bne.n	8003068 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e038      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
 800305c:	40023800 	.word	0x40023800
 8003060:	40007000 	.word	0x40007000
 8003064:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_RCC_OscConfig+0x4ec>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d028      	beq.n	80030c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003080:	429a      	cmp	r2, r3
 8003082:	d121      	bne.n	80030c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308e:	429a      	cmp	r2, r3
 8003090:	d11a      	bne.n	80030c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003098:	4013      	ands	r3, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800309e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d111      	bne.n	80030c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	085b      	lsrs	r3, r3, #1
 80030b0:	3b01      	subs	r3, #1
 80030b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d107      	bne.n	80030c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40023800 	.word	0x40023800

080030dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0cc      	b.n	800328a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030f0:	4b68      	ldr	r3, [pc, #416]	; (8003294 <HAL_RCC_ClockConfig+0x1b8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d90c      	bls.n	8003118 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fe:	4b65      	ldr	r3, [pc, #404]	; (8003294 <HAL_RCC_ClockConfig+0x1b8>)
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b63      	ldr	r3, [pc, #396]	; (8003294 <HAL_RCC_ClockConfig+0x1b8>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d001      	beq.n	8003118 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0b8      	b.n	800328a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d020      	beq.n	8003166 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003130:	4b59      	ldr	r3, [pc, #356]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4a58      	ldr	r2, [pc, #352]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800313a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003148:	4b53      	ldr	r3, [pc, #332]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	4a52      	ldr	r2, [pc, #328]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003152:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003154:	4b50      	ldr	r3, [pc, #320]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	494d      	ldr	r1, [pc, #308]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d044      	beq.n	80031fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d107      	bne.n	800318a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317a:	4b47      	ldr	r3, [pc, #284]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d119      	bne.n	80031ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e07f      	b.n	800328a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d003      	beq.n	800319a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003196:	2b03      	cmp	r3, #3
 8003198:	d107      	bne.n	80031aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319a:	4b3f      	ldr	r3, [pc, #252]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d109      	bne.n	80031ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e06f      	b.n	800328a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031aa:	4b3b      	ldr	r3, [pc, #236]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e067      	b.n	800328a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ba:	4b37      	ldr	r3, [pc, #220]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f023 0203 	bic.w	r2, r3, #3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	4934      	ldr	r1, [pc, #208]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031cc:	f7fe f87e 	bl	80012cc <HAL_GetTick>
 80031d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d2:	e00a      	b.n	80031ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d4:	f7fe f87a 	bl	80012cc <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e04f      	b.n	800328a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ea:	4b2b      	ldr	r3, [pc, #172]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 020c 	and.w	r2, r3, #12
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d1eb      	bne.n	80031d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031fc:	4b25      	ldr	r3, [pc, #148]	; (8003294 <HAL_RCC_ClockConfig+0x1b8>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 030f 	and.w	r3, r3, #15
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d20c      	bcs.n	8003224 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320a:	4b22      	ldr	r3, [pc, #136]	; (8003294 <HAL_RCC_ClockConfig+0x1b8>)
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003212:	4b20      	ldr	r3, [pc, #128]	; (8003294 <HAL_RCC_ClockConfig+0x1b8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e032      	b.n	800328a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4916      	ldr	r1, [pc, #88]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	4313      	orrs	r3, r2
 8003240:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800324e:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	490e      	ldr	r1, [pc, #56]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	4313      	orrs	r3, r2
 8003260:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003262:	f000 f821 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 8003266:	4602      	mov	r2, r0
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	091b      	lsrs	r3, r3, #4
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	490a      	ldr	r1, [pc, #40]	; (800329c <HAL_RCC_ClockConfig+0x1c0>)
 8003274:	5ccb      	ldrb	r3, [r1, r3]
 8003276:	fa22 f303 	lsr.w	r3, r2, r3
 800327a:	4a09      	ldr	r2, [pc, #36]	; (80032a0 <HAL_RCC_ClockConfig+0x1c4>)
 800327c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800327e:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7fd ffde 	bl	8001244 <HAL_InitTick>

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40023c00 	.word	0x40023c00
 8003298:	40023800 	.word	0x40023800
 800329c:	0801272c 	.word	0x0801272c
 80032a0:	20000030 	.word	0x20000030
 80032a4:	20000034 	.word	0x20000034

080032a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ac:	b094      	sub	sp, #80	; 0x50
 80032ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	647b      	str	r3, [r7, #68]	; 0x44
 80032b4:	2300      	movs	r3, #0
 80032b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b8:	2300      	movs	r3, #0
 80032ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032c0:	4b79      	ldr	r3, [pc, #484]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d00d      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x40>
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	f200 80e1 	bhi.w	8003494 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <HAL_RCC_GetSysClockFreq+0x34>
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d003      	beq.n	80032e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032da:	e0db      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032dc:	4b73      	ldr	r3, [pc, #460]	; (80034ac <HAL_RCC_GetSysClockFreq+0x204>)
 80032de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80032e0:	e0db      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032e2:	4b73      	ldr	r3, [pc, #460]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80032e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032e6:	e0d8      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032e8:	4b6f      	ldr	r3, [pc, #444]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032f2:	4b6d      	ldr	r3, [pc, #436]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d063      	beq.n	80033c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032fe:	4b6a      	ldr	r3, [pc, #424]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	099b      	lsrs	r3, r3, #6
 8003304:	2200      	movs	r2, #0
 8003306:	63bb      	str	r3, [r7, #56]	; 0x38
 8003308:	63fa      	str	r2, [r7, #60]	; 0x3c
 800330a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003310:	633b      	str	r3, [r7, #48]	; 0x30
 8003312:	2300      	movs	r3, #0
 8003314:	637b      	str	r3, [r7, #52]	; 0x34
 8003316:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800331a:	4622      	mov	r2, r4
 800331c:	462b      	mov	r3, r5
 800331e:	f04f 0000 	mov.w	r0, #0
 8003322:	f04f 0100 	mov.w	r1, #0
 8003326:	0159      	lsls	r1, r3, #5
 8003328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800332c:	0150      	lsls	r0, r2, #5
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4621      	mov	r1, r4
 8003334:	1a51      	subs	r1, r2, r1
 8003336:	6139      	str	r1, [r7, #16]
 8003338:	4629      	mov	r1, r5
 800333a:	eb63 0301 	sbc.w	r3, r3, r1
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800334c:	4659      	mov	r1, fp
 800334e:	018b      	lsls	r3, r1, #6
 8003350:	4651      	mov	r1, sl
 8003352:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003356:	4651      	mov	r1, sl
 8003358:	018a      	lsls	r2, r1, #6
 800335a:	4651      	mov	r1, sl
 800335c:	ebb2 0801 	subs.w	r8, r2, r1
 8003360:	4659      	mov	r1, fp
 8003362:	eb63 0901 	sbc.w	r9, r3, r1
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003372:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003376:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800337a:	4690      	mov	r8, r2
 800337c:	4699      	mov	r9, r3
 800337e:	4623      	mov	r3, r4
 8003380:	eb18 0303 	adds.w	r3, r8, r3
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	462b      	mov	r3, r5
 8003388:	eb49 0303 	adc.w	r3, r9, r3
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800339a:	4629      	mov	r1, r5
 800339c:	024b      	lsls	r3, r1, #9
 800339e:	4621      	mov	r1, r4
 80033a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033a4:	4621      	mov	r1, r4
 80033a6:	024a      	lsls	r2, r1, #9
 80033a8:	4610      	mov	r0, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ae:	2200      	movs	r2, #0
 80033b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80033b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033b8:	f7fc ff6a 	bl	8000290 <__aeabi_uldivmod>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4613      	mov	r3, r2
 80033c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033c4:	e058      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c6:	4b38      	ldr	r3, [pc, #224]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	099b      	lsrs	r3, r3, #6
 80033cc:	2200      	movs	r2, #0
 80033ce:	4618      	mov	r0, r3
 80033d0:	4611      	mov	r1, r2
 80033d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033d6:	623b      	str	r3, [r7, #32]
 80033d8:	2300      	movs	r3, #0
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
 80033dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033e0:	4642      	mov	r2, r8
 80033e2:	464b      	mov	r3, r9
 80033e4:	f04f 0000 	mov.w	r0, #0
 80033e8:	f04f 0100 	mov.w	r1, #0
 80033ec:	0159      	lsls	r1, r3, #5
 80033ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033f2:	0150      	lsls	r0, r2, #5
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4641      	mov	r1, r8
 80033fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80033fe:	4649      	mov	r1, r9
 8003400:	eb63 0b01 	sbc.w	fp, r3, r1
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003410:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003414:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003418:	ebb2 040a 	subs.w	r4, r2, sl
 800341c:	eb63 050b 	sbc.w	r5, r3, fp
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	00eb      	lsls	r3, r5, #3
 800342a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800342e:	00e2      	lsls	r2, r4, #3
 8003430:	4614      	mov	r4, r2
 8003432:	461d      	mov	r5, r3
 8003434:	4643      	mov	r3, r8
 8003436:	18e3      	adds	r3, r4, r3
 8003438:	603b      	str	r3, [r7, #0]
 800343a:	464b      	mov	r3, r9
 800343c:	eb45 0303 	adc.w	r3, r5, r3
 8003440:	607b      	str	r3, [r7, #4]
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800344e:	4629      	mov	r1, r5
 8003450:	028b      	lsls	r3, r1, #10
 8003452:	4621      	mov	r1, r4
 8003454:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003458:	4621      	mov	r1, r4
 800345a:	028a      	lsls	r2, r1, #10
 800345c:	4610      	mov	r0, r2
 800345e:	4619      	mov	r1, r3
 8003460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003462:	2200      	movs	r2, #0
 8003464:	61bb      	str	r3, [r7, #24]
 8003466:	61fa      	str	r2, [r7, #28]
 8003468:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800346c:	f7fc ff10 	bl	8000290 <__aeabi_uldivmod>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4613      	mov	r3, r2
 8003476:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003478:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	0c1b      	lsrs	r3, r3, #16
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	3301      	adds	r3, #1
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003488:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800348a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800348c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003490:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003492:	e002      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003494:	4b05      	ldr	r3, [pc, #20]	; (80034ac <HAL_RCC_GetSysClockFreq+0x204>)
 8003496:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800349a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800349c:	4618      	mov	r0, r3
 800349e:	3750      	adds	r7, #80	; 0x50
 80034a0:	46bd      	mov	sp, r7
 80034a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034a6:	bf00      	nop
 80034a8:	40023800 	.word	0x40023800
 80034ac:	00f42400 	.word	0x00f42400
 80034b0:	007a1200 	.word	0x007a1200

080034b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b8:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034ba:	681b      	ldr	r3, [r3, #0]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000030 	.word	0x20000030

080034cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034d0:	f7ff fff0 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 80034d4:	4602      	mov	r2, r0
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	0a9b      	lsrs	r3, r3, #10
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	4903      	ldr	r1, [pc, #12]	; (80034f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e2:	5ccb      	ldrb	r3, [r1, r3]
 80034e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40023800 	.word	0x40023800
 80034f0:	0801273c 	.word	0x0801273c

080034f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034f8:	f7ff ffdc 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b05      	ldr	r3, [pc, #20]	; (8003514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	0b5b      	lsrs	r3, r3, #13
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	4903      	ldr	r1, [pc, #12]	; (8003518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003510:	4618      	mov	r0, r3
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40023800 	.word	0x40023800
 8003518:	0801273c 	.word	0x0801273c

0800351c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e03f      	b.n	80035ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fd fb72 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2224      	movs	r2, #36	; 0x24
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800355e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 fcbf 	bl	8003ee4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003574:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003584:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003594:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b085      	sub	sp, #20
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	4613      	mov	r3, r2
 80035c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	d130      	bne.n	8003632 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_UART_Transmit_IT+0x26>
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e029      	b.n	8003634 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_UART_Transmit_IT+0x38>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e022      	b.n	8003634 <HAL_UART_Transmit_IT+0x7e>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	88fa      	ldrh	r2, [r7, #6]
 8003600:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	88fa      	ldrh	r2, [r7, #6]
 8003606:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2221      	movs	r2, #33	; 0x21
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800362c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	e000      	b.n	8003634 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003632:	2302      	movs	r3, #2
  }
}
 8003634:	4618      	mov	r0, r3
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b0ba      	sub	sp, #232	; 0xe8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003666:	2300      	movs	r3, #0
 8003668:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800366c:	2300      	movs	r3, #0
 800366e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800367e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10f      	bne.n	80036a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368a:	f003 0320 	and.w	r3, r3, #32
 800368e:	2b00      	cmp	r3, #0
 8003690:	d009      	beq.n	80036a6 <HAL_UART_IRQHandler+0x66>
 8003692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003696:	f003 0320 	and.w	r3, r3, #32
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 fb65 	bl	8003d6e <UART_Receive_IT>
      return;
 80036a4:	e256      	b.n	8003b54 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 80de 	beq.w	800386c <HAL_UART_IRQHandler+0x22c>
 80036b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d106      	bne.n	80036ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80d1 	beq.w	800386c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00b      	beq.n	80036ee <HAL_UART_IRQHandler+0xae>
 80036d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f043 0201 	orr.w	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00b      	beq.n	8003712 <HAL_UART_IRQHandler+0xd2>
 80036fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d005      	beq.n	8003712 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f043 0202 	orr.w	r2, r3, #2
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00b      	beq.n	8003736 <HAL_UART_IRQHandler+0xf6>
 800371e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f043 0204 	orr.w	r2, r3, #4
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d011      	beq.n	8003766 <HAL_UART_IRQHandler+0x126>
 8003742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b00      	cmp	r3, #0
 800374c:	d105      	bne.n	800375a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800374e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f043 0208 	orr.w	r2, r3, #8
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 81ed 	beq.w	8003b4a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_UART_IRQHandler+0x14e>
 800377c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 faf0 	bl	8003d6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003798:	2b40      	cmp	r3, #64	; 0x40
 800379a:	bf0c      	ite	eq
 800379c:	2301      	moveq	r3, #1
 800379e:	2300      	movne	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <HAL_UART_IRQHandler+0x17a>
 80037b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d04f      	beq.n	800385a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f9f8 	bl	8003bb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ca:	2b40      	cmp	r3, #64	; 0x40
 80037cc:	d141      	bne.n	8003852 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3314      	adds	r3, #20
 80037d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037dc:	e853 3f00 	ldrex	r3, [r3]
 80037e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3314      	adds	r3, #20
 80037f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003802:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003806:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800380a:	e841 2300 	strex	r3, r2, [r1]
 800380e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1d9      	bne.n	80037ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381e:	2b00      	cmp	r3, #0
 8003820:	d013      	beq.n	800384a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003826:	4a7d      	ldr	r2, [pc, #500]	; (8003a1c <HAL_UART_IRQHandler+0x3dc>)
 8003828:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	4618      	mov	r0, r3
 8003830:	f7fd fefd 	bl	800162e <HAL_DMA_Abort_IT>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d016      	beq.n	8003868 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003844:	4610      	mov	r0, r2
 8003846:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003848:	e00e      	b.n	8003868 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f99a 	bl	8003b84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003850:	e00a      	b.n	8003868 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f996 	bl	8003b84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003858:	e006      	b.n	8003868 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f992 	bl	8003b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003866:	e170      	b.n	8003b4a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003868:	bf00      	nop
    return;
 800386a:	e16e      	b.n	8003b4a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	2b01      	cmp	r3, #1
 8003872:	f040 814a 	bne.w	8003b0a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 8143 	beq.w	8003b0a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 813c 	beq.w	8003b0a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003892:	2300      	movs	r3, #0
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b2:	2b40      	cmp	r3, #64	; 0x40
 80038b4:	f040 80b4 	bne.w	8003a20 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 8140 	beq.w	8003b4e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038d6:	429a      	cmp	r2, r3
 80038d8:	f080 8139 	bcs.w	8003b4e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ee:	f000 8088 	beq.w	8003a02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	330c      	adds	r3, #12
 80038f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003900:	e853 3f00 	ldrex	r3, [r3]
 8003904:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003908:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800390c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003910:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	330c      	adds	r3, #12
 800391a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800391e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003922:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003926:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800392a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800392e:	e841 2300 	strex	r3, r2, [r1]
 8003932:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003936:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1d9      	bne.n	80038f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3314      	adds	r3, #20
 8003944:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003948:	e853 3f00 	ldrex	r3, [r3]
 800394c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800394e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003950:	f023 0301 	bic.w	r3, r3, #1
 8003954:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3314      	adds	r3, #20
 800395e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003962:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003966:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003968:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800396a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800396e:	e841 2300 	strex	r3, r2, [r1]
 8003972:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1e1      	bne.n	800393e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	3314      	adds	r3, #20
 8003980:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003984:	e853 3f00 	ldrex	r3, [r3]
 8003988:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800398a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800398c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003990:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3314      	adds	r3, #20
 800399a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800399e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039a6:	e841 2300 	strex	r3, r2, [r1]
 80039aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1e3      	bne.n	800397a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	330c      	adds	r3, #12
 80039c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ca:	e853 3f00 	ldrex	r3, [r3]
 80039ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039d2:	f023 0310 	bic.w	r3, r3, #16
 80039d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	330c      	adds	r3, #12
 80039e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80039e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80039e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e3      	bne.n	80039c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fd fda6 	bl	800154e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	4619      	mov	r1, r3
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f8c0 	bl	8003b98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a18:	e099      	b.n	8003b4e <HAL_UART_IRQHandler+0x50e>
 8003a1a:	bf00      	nop
 8003a1c:	08003c77 	.word	0x08003c77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 808b 	beq.w	8003b52 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003a3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8086 	beq.w	8003b52 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	330c      	adds	r3, #12
 8003a4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a50:	e853 3f00 	ldrex	r3, [r3]
 8003a54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	330c      	adds	r3, #12
 8003a66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a6a:	647a      	str	r2, [r7, #68]	; 0x44
 8003a6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a72:	e841 2300 	strex	r3, r2, [r1]
 8003a76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1e3      	bne.n	8003a46 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	3314      	adds	r3, #20
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	623b      	str	r3, [r7, #32]
   return(result);
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3314      	adds	r3, #20
 8003a9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003aa2:	633a      	str	r2, [r7, #48]	; 0x30
 8003aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aaa:	e841 2300 	strex	r3, r2, [r1]
 8003aae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1e3      	bne.n	8003a7e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	330c      	adds	r3, #12
 8003aca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	e853 3f00 	ldrex	r3, [r3]
 8003ad2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0310 	bic.w	r3, r3, #16
 8003ada:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	330c      	adds	r3, #12
 8003ae4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ae8:	61fa      	str	r2, [r7, #28]
 8003aea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aec:	69b9      	ldr	r1, [r7, #24]
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	e841 2300 	strex	r3, r2, [r1]
 8003af4:	617b      	str	r3, [r7, #20]
   return(result);
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e3      	bne.n	8003ac4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003afc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b00:	4619      	mov	r1, r3
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f848 	bl	8003b98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b08:	e023      	b.n	8003b52 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d009      	beq.n	8003b2a <HAL_UART_IRQHandler+0x4ea>
 8003b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f8bb 	bl	8003c9e <UART_Transmit_IT>
    return;
 8003b28:	e014      	b.n	8003b54 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00e      	beq.n	8003b54 <HAL_UART_IRQHandler+0x514>
 8003b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d008      	beq.n	8003b54 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f8fb 	bl	8003d3e <UART_EndTransmit_IT>
    return;
 8003b48:	e004      	b.n	8003b54 <HAL_UART_IRQHandler+0x514>
    return;
 8003b4a:	bf00      	nop
 8003b4c:	e002      	b.n	8003b54 <HAL_UART_IRQHandler+0x514>
      return;
 8003b4e:	bf00      	nop
 8003b50:	e000      	b.n	8003b54 <HAL_UART_IRQHandler+0x514>
      return;
 8003b52:	bf00      	nop
  }
}
 8003b54:	37e8      	adds	r7, #232	; 0xe8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop

08003b5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b095      	sub	sp, #84	; 0x54
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	330c      	adds	r3, #12
 8003bbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc2:	e853 3f00 	ldrex	r3, [r3]
 8003bc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	330c      	adds	r3, #12
 8003bd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bd8:	643a      	str	r2, [r7, #64]	; 0x40
 8003bda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003be0:	e841 2300 	strex	r3, r2, [r1]
 8003be4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e5      	bne.n	8003bb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3314      	adds	r3, #20
 8003bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3314      	adds	r3, #20
 8003c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e5      	bne.n	8003bec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d119      	bne.n	8003c5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	330c      	adds	r3, #12
 8003c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	e853 3f00 	ldrex	r3, [r3]
 8003c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f023 0310 	bic.w	r3, r3, #16
 8003c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	330c      	adds	r3, #12
 8003c46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c48:	61ba      	str	r2, [r7, #24]
 8003c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	6979      	ldr	r1, [r7, #20]
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	e841 2300 	strex	r3, r2, [r1]
 8003c54:	613b      	str	r3, [r7, #16]
   return(result);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e5      	bne.n	8003c28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c6a:	bf00      	nop
 8003c6c:	3754      	adds	r7, #84	; 0x54
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b084      	sub	sp, #16
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f7ff ff77 	bl	8003b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c96:	bf00      	nop
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b085      	sub	sp, #20
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b21      	cmp	r3, #33	; 0x21
 8003cb0:	d13e      	bne.n	8003d30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cba:	d114      	bne.n	8003ce6 <UART_Transmit_IT+0x48>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d110      	bne.n	8003ce6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	1c9a      	adds	r2, r3, #2
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	621a      	str	r2, [r3, #32]
 8003ce4:	e008      	b.n	8003cf8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	1c59      	adds	r1, r3, #1
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6211      	str	r1, [r2, #32]
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	4619      	mov	r1, r3
 8003d06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10f      	bne.n	8003d2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e000      	b.n	8003d32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
  }
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7ff fefc 	bl	8003b5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b08c      	sub	sp, #48	; 0x30
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b22      	cmp	r3, #34	; 0x22
 8003d80:	f040 80ab 	bne.w	8003eda <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d8c:	d117      	bne.n	8003dbe <UART_Receive_IT+0x50>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d113      	bne.n	8003dbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db6:	1c9a      	adds	r2, r3, #2
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	629a      	str	r2, [r3, #40]	; 0x28
 8003dbc:	e026      	b.n	8003e0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd0:	d007      	beq.n	8003de2 <UART_Receive_IT+0x74>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10a      	bne.n	8003df0 <UART_Receive_IT+0x82>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d106      	bne.n	8003df0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dec:	701a      	strb	r2, [r3, #0]
 8003dee:	e008      	b.n	8003e02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d15a      	bne.n	8003ed6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0220 	bic.w	r2, r2, #32
 8003e2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695a      	ldr	r2, [r3, #20]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d135      	bne.n	8003ecc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	330c      	adds	r3, #12
 8003e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	e853 3f00 	ldrex	r3, [r3]
 8003e74:	613b      	str	r3, [r7, #16]
   return(result);
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f023 0310 	bic.w	r3, r3, #16
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	330c      	adds	r3, #12
 8003e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e86:	623a      	str	r2, [r7, #32]
 8003e88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8a:	69f9      	ldr	r1, [r7, #28]
 8003e8c:	6a3a      	ldr	r2, [r7, #32]
 8003e8e:	e841 2300 	strex	r3, r2, [r1]
 8003e92:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1e5      	bne.n	8003e66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0310 	and.w	r3, r3, #16
 8003ea4:	2b10      	cmp	r3, #16
 8003ea6:	d10a      	bne.n	8003ebe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7ff fe67 	bl	8003b98 <HAL_UARTEx_RxEventCallback>
 8003eca:	e002      	b.n	8003ed2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff fe4f 	bl	8003b70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e002      	b.n	8003edc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e000      	b.n	8003edc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003eda:	2302      	movs	r3, #2
  }
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3730      	adds	r7, #48	; 0x30
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ee8:	b0c0      	sub	sp, #256	; 0x100
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f00:	68d9      	ldr	r1, [r3, #12]
 8003f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	ea40 0301 	orr.w	r3, r0, r1
 8003f0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f3c:	f021 010c 	bic.w	r1, r1, #12
 8003f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f4a:	430b      	orrs	r3, r1
 8003f4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5e:	6999      	ldr	r1, [r3, #24]
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	ea40 0301 	orr.w	r3, r0, r1
 8003f6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	4b8f      	ldr	r3, [pc, #572]	; (80041b0 <UART_SetConfig+0x2cc>)
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d005      	beq.n	8003f84 <UART_SetConfig+0xa0>
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4b8d      	ldr	r3, [pc, #564]	; (80041b4 <UART_SetConfig+0x2d0>)
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d104      	bne.n	8003f8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f84:	f7ff fab6 	bl	80034f4 <HAL_RCC_GetPCLK2Freq>
 8003f88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f8c:	e003      	b.n	8003f96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f8e:	f7ff fa9d 	bl	80034cc <HAL_RCC_GetPCLK1Freq>
 8003f92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa0:	f040 810c 	bne.w	80041bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003fae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003fb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003fb6:	4622      	mov	r2, r4
 8003fb8:	462b      	mov	r3, r5
 8003fba:	1891      	adds	r1, r2, r2
 8003fbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fbe:	415b      	adcs	r3, r3
 8003fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fc6:	4621      	mov	r1, r4
 8003fc8:	eb12 0801 	adds.w	r8, r2, r1
 8003fcc:	4629      	mov	r1, r5
 8003fce:	eb43 0901 	adc.w	r9, r3, r1
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fe6:	4690      	mov	r8, r2
 8003fe8:	4699      	mov	r9, r3
 8003fea:	4623      	mov	r3, r4
 8003fec:	eb18 0303 	adds.w	r3, r8, r3
 8003ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ff4:	462b      	mov	r3, r5
 8003ff6:	eb49 0303 	adc.w	r3, r9, r3
 8003ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800400a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800400e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004012:	460b      	mov	r3, r1
 8004014:	18db      	adds	r3, r3, r3
 8004016:	653b      	str	r3, [r7, #80]	; 0x50
 8004018:	4613      	mov	r3, r2
 800401a:	eb42 0303 	adc.w	r3, r2, r3
 800401e:	657b      	str	r3, [r7, #84]	; 0x54
 8004020:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004024:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004028:	f7fc f932 	bl	8000290 <__aeabi_uldivmod>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4b61      	ldr	r3, [pc, #388]	; (80041b8 <UART_SetConfig+0x2d4>)
 8004032:	fba3 2302 	umull	r2, r3, r3, r2
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	011c      	lsls	r4, r3, #4
 800403a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800403e:	2200      	movs	r2, #0
 8004040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004044:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004048:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800404c:	4642      	mov	r2, r8
 800404e:	464b      	mov	r3, r9
 8004050:	1891      	adds	r1, r2, r2
 8004052:	64b9      	str	r1, [r7, #72]	; 0x48
 8004054:	415b      	adcs	r3, r3
 8004056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004058:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800405c:	4641      	mov	r1, r8
 800405e:	eb12 0a01 	adds.w	sl, r2, r1
 8004062:	4649      	mov	r1, r9
 8004064:	eb43 0b01 	adc.w	fp, r3, r1
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004074:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004078:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800407c:	4692      	mov	sl, r2
 800407e:	469b      	mov	fp, r3
 8004080:	4643      	mov	r3, r8
 8004082:	eb1a 0303 	adds.w	r3, sl, r3
 8004086:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800408a:	464b      	mov	r3, r9
 800408c:	eb4b 0303 	adc.w	r3, fp, r3
 8004090:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80040a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80040a8:	460b      	mov	r3, r1
 80040aa:	18db      	adds	r3, r3, r3
 80040ac:	643b      	str	r3, [r7, #64]	; 0x40
 80040ae:	4613      	mov	r3, r2
 80040b0:	eb42 0303 	adc.w	r3, r2, r3
 80040b4:	647b      	str	r3, [r7, #68]	; 0x44
 80040b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040be:	f7fc f8e7 	bl	8000290 <__aeabi_uldivmod>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4611      	mov	r1, r2
 80040c8:	4b3b      	ldr	r3, [pc, #236]	; (80041b8 <UART_SetConfig+0x2d4>)
 80040ca:	fba3 2301 	umull	r2, r3, r3, r1
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	2264      	movs	r2, #100	; 0x64
 80040d2:	fb02 f303 	mul.w	r3, r2, r3
 80040d6:	1acb      	subs	r3, r1, r3
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040de:	4b36      	ldr	r3, [pc, #216]	; (80041b8 <UART_SetConfig+0x2d4>)
 80040e0:	fba3 2302 	umull	r2, r3, r3, r2
 80040e4:	095b      	lsrs	r3, r3, #5
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040ec:	441c      	add	r4, r3
 80040ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040f2:	2200      	movs	r2, #0
 80040f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004100:	4642      	mov	r2, r8
 8004102:	464b      	mov	r3, r9
 8004104:	1891      	adds	r1, r2, r2
 8004106:	63b9      	str	r1, [r7, #56]	; 0x38
 8004108:	415b      	adcs	r3, r3
 800410a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800410c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004110:	4641      	mov	r1, r8
 8004112:	1851      	adds	r1, r2, r1
 8004114:	6339      	str	r1, [r7, #48]	; 0x30
 8004116:	4649      	mov	r1, r9
 8004118:	414b      	adcs	r3, r1
 800411a:	637b      	str	r3, [r7, #52]	; 0x34
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004128:	4659      	mov	r1, fp
 800412a:	00cb      	lsls	r3, r1, #3
 800412c:	4651      	mov	r1, sl
 800412e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004132:	4651      	mov	r1, sl
 8004134:	00ca      	lsls	r2, r1, #3
 8004136:	4610      	mov	r0, r2
 8004138:	4619      	mov	r1, r3
 800413a:	4603      	mov	r3, r0
 800413c:	4642      	mov	r2, r8
 800413e:	189b      	adds	r3, r3, r2
 8004140:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004144:	464b      	mov	r3, r9
 8004146:	460a      	mov	r2, r1
 8004148:	eb42 0303 	adc.w	r3, r2, r3
 800414c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800415c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004160:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004164:	460b      	mov	r3, r1
 8004166:	18db      	adds	r3, r3, r3
 8004168:	62bb      	str	r3, [r7, #40]	; 0x28
 800416a:	4613      	mov	r3, r2
 800416c:	eb42 0303 	adc.w	r3, r2, r3
 8004170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004172:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004176:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800417a:	f7fc f889 	bl	8000290 <__aeabi_uldivmod>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4b0d      	ldr	r3, [pc, #52]	; (80041b8 <UART_SetConfig+0x2d4>)
 8004184:	fba3 1302 	umull	r1, r3, r3, r2
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	2164      	movs	r1, #100	; 0x64
 800418c:	fb01 f303 	mul.w	r3, r1, r3
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	3332      	adds	r3, #50	; 0x32
 8004196:	4a08      	ldr	r2, [pc, #32]	; (80041b8 <UART_SetConfig+0x2d4>)
 8004198:	fba2 2303 	umull	r2, r3, r2, r3
 800419c:	095b      	lsrs	r3, r3, #5
 800419e:	f003 0207 	and.w	r2, r3, #7
 80041a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4422      	add	r2, r4
 80041aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041ac:	e105      	b.n	80043ba <UART_SetConfig+0x4d6>
 80041ae:	bf00      	nop
 80041b0:	40011000 	.word	0x40011000
 80041b4:	40011400 	.word	0x40011400
 80041b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041c0:	2200      	movs	r2, #0
 80041c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041ce:	4642      	mov	r2, r8
 80041d0:	464b      	mov	r3, r9
 80041d2:	1891      	adds	r1, r2, r2
 80041d4:	6239      	str	r1, [r7, #32]
 80041d6:	415b      	adcs	r3, r3
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
 80041da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041de:	4641      	mov	r1, r8
 80041e0:	1854      	adds	r4, r2, r1
 80041e2:	4649      	mov	r1, r9
 80041e4:	eb43 0501 	adc.w	r5, r3, r1
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	00eb      	lsls	r3, r5, #3
 80041f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041f6:	00e2      	lsls	r2, r4, #3
 80041f8:	4614      	mov	r4, r2
 80041fa:	461d      	mov	r5, r3
 80041fc:	4643      	mov	r3, r8
 80041fe:	18e3      	adds	r3, r4, r3
 8004200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004204:	464b      	mov	r3, r9
 8004206:	eb45 0303 	adc.w	r3, r5, r3
 800420a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800420e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800421a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800422a:	4629      	mov	r1, r5
 800422c:	008b      	lsls	r3, r1, #2
 800422e:	4621      	mov	r1, r4
 8004230:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004234:	4621      	mov	r1, r4
 8004236:	008a      	lsls	r2, r1, #2
 8004238:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800423c:	f7fc f828 	bl	8000290 <__aeabi_uldivmod>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4b60      	ldr	r3, [pc, #384]	; (80043c8 <UART_SetConfig+0x4e4>)
 8004246:	fba3 2302 	umull	r2, r3, r3, r2
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	011c      	lsls	r4, r3, #4
 800424e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004252:	2200      	movs	r2, #0
 8004254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004258:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800425c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004260:	4642      	mov	r2, r8
 8004262:	464b      	mov	r3, r9
 8004264:	1891      	adds	r1, r2, r2
 8004266:	61b9      	str	r1, [r7, #24]
 8004268:	415b      	adcs	r3, r3
 800426a:	61fb      	str	r3, [r7, #28]
 800426c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004270:	4641      	mov	r1, r8
 8004272:	1851      	adds	r1, r2, r1
 8004274:	6139      	str	r1, [r7, #16]
 8004276:	4649      	mov	r1, r9
 8004278:	414b      	adcs	r3, r1
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004288:	4659      	mov	r1, fp
 800428a:	00cb      	lsls	r3, r1, #3
 800428c:	4651      	mov	r1, sl
 800428e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004292:	4651      	mov	r1, sl
 8004294:	00ca      	lsls	r2, r1, #3
 8004296:	4610      	mov	r0, r2
 8004298:	4619      	mov	r1, r3
 800429a:	4603      	mov	r3, r0
 800429c:	4642      	mov	r2, r8
 800429e:	189b      	adds	r3, r3, r2
 80042a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042a4:	464b      	mov	r3, r9
 80042a6:	460a      	mov	r2, r1
 80042a8:	eb42 0303 	adc.w	r3, r2, r3
 80042ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80042ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042c8:	4649      	mov	r1, r9
 80042ca:	008b      	lsls	r3, r1, #2
 80042cc:	4641      	mov	r1, r8
 80042ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042d2:	4641      	mov	r1, r8
 80042d4:	008a      	lsls	r2, r1, #2
 80042d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042da:	f7fb ffd9 	bl	8000290 <__aeabi_uldivmod>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4b39      	ldr	r3, [pc, #228]	; (80043c8 <UART_SetConfig+0x4e4>)
 80042e4:	fba3 1302 	umull	r1, r3, r3, r2
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	2164      	movs	r1, #100	; 0x64
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	3332      	adds	r3, #50	; 0x32
 80042f6:	4a34      	ldr	r2, [pc, #208]	; (80043c8 <UART_SetConfig+0x4e4>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004302:	441c      	add	r4, r3
 8004304:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004308:	2200      	movs	r2, #0
 800430a:	673b      	str	r3, [r7, #112]	; 0x70
 800430c:	677a      	str	r2, [r7, #116]	; 0x74
 800430e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004312:	4642      	mov	r2, r8
 8004314:	464b      	mov	r3, r9
 8004316:	1891      	adds	r1, r2, r2
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	415b      	adcs	r3, r3
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004322:	4641      	mov	r1, r8
 8004324:	1851      	adds	r1, r2, r1
 8004326:	6039      	str	r1, [r7, #0]
 8004328:	4649      	mov	r1, r9
 800432a:	414b      	adcs	r3, r1
 800432c:	607b      	str	r3, [r7, #4]
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800433a:	4659      	mov	r1, fp
 800433c:	00cb      	lsls	r3, r1, #3
 800433e:	4651      	mov	r1, sl
 8004340:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004344:	4651      	mov	r1, sl
 8004346:	00ca      	lsls	r2, r1, #3
 8004348:	4610      	mov	r0, r2
 800434a:	4619      	mov	r1, r3
 800434c:	4603      	mov	r3, r0
 800434e:	4642      	mov	r2, r8
 8004350:	189b      	adds	r3, r3, r2
 8004352:	66bb      	str	r3, [r7, #104]	; 0x68
 8004354:	464b      	mov	r3, r9
 8004356:	460a      	mov	r2, r1
 8004358:	eb42 0303 	adc.w	r3, r2, r3
 800435c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800435e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	663b      	str	r3, [r7, #96]	; 0x60
 8004368:	667a      	str	r2, [r7, #100]	; 0x64
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004376:	4649      	mov	r1, r9
 8004378:	008b      	lsls	r3, r1, #2
 800437a:	4641      	mov	r1, r8
 800437c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004380:	4641      	mov	r1, r8
 8004382:	008a      	lsls	r2, r1, #2
 8004384:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004388:	f7fb ff82 	bl	8000290 <__aeabi_uldivmod>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4b0d      	ldr	r3, [pc, #52]	; (80043c8 <UART_SetConfig+0x4e4>)
 8004392:	fba3 1302 	umull	r1, r3, r3, r2
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	2164      	movs	r1, #100	; 0x64
 800439a:	fb01 f303 	mul.w	r3, r1, r3
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	3332      	adds	r3, #50	; 0x32
 80043a4:	4a08      	ldr	r2, [pc, #32]	; (80043c8 <UART_SetConfig+0x4e4>)
 80043a6:	fba2 2303 	umull	r2, r3, r2, r3
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	f003 020f 	and.w	r2, r3, #15
 80043b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4422      	add	r2, r4
 80043b8:	609a      	str	r2, [r3, #8]
}
 80043ba:	bf00      	nop
 80043bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043c0:	46bd      	mov	sp, r7
 80043c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043c6:	bf00      	nop
 80043c8:	51eb851f 	.word	0x51eb851f

080043cc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 80043d2:	4b8d      	ldr	r3, [pc, #564]	; (8004608 <MX_LWIP_Init+0x23c>)
 80043d4:	220a      	movs	r2, #10
 80043d6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 80043d8:	4b8b      	ldr	r3, [pc, #556]	; (8004608 <MX_LWIP_Init+0x23c>)
 80043da:	2200      	movs	r2, #0
 80043dc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 80043de:	4b8a      	ldr	r3, [pc, #552]	; (8004608 <MX_LWIP_Init+0x23c>)
 80043e0:	2202      	movs	r2, #2
 80043e2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80043e4:	4b88      	ldr	r3, [pc, #544]	; (8004608 <MX_LWIP_Init+0x23c>)
 80043e6:	220a      	movs	r2, #10
 80043e8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80043ea:	4b88      	ldr	r3, [pc, #544]	; (800460c <MX_LWIP_Init+0x240>)
 80043ec:	22ff      	movs	r2, #255	; 0xff
 80043ee:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80043f0:	4b86      	ldr	r3, [pc, #536]	; (800460c <MX_LWIP_Init+0x240>)
 80043f2:	22ff      	movs	r2, #255	; 0xff
 80043f4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80043f6:	4b85      	ldr	r3, [pc, #532]	; (800460c <MX_LWIP_Init+0x240>)
 80043f8:	22ff      	movs	r2, #255	; 0xff
 80043fa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80043fc:	4b83      	ldr	r3, [pc, #524]	; (800460c <MX_LWIP_Init+0x240>)
 80043fe:	2200      	movs	r2, #0
 8004400:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8004402:	4b83      	ldr	r3, [pc, #524]	; (8004610 <MX_LWIP_Init+0x244>)
 8004404:	220a      	movs	r2, #10
 8004406:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8004408:	4b81      	ldr	r3, [pc, #516]	; (8004610 <MX_LWIP_Init+0x244>)
 800440a:	2200      	movs	r2, #0
 800440c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 2;
 800440e:	4b80      	ldr	r3, [pc, #512]	; (8004610 <MX_LWIP_Init+0x244>)
 8004410:	2202      	movs	r2, #2
 8004412:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004414:	4b7e      	ldr	r3, [pc, #504]	; (8004610 <MX_LWIP_Init+0x244>)
 8004416:	2201      	movs	r2, #1
 8004418:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800441a:	f000 fd2f 	bl	8004e7c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800441e:	4b7a      	ldr	r3, [pc, #488]	; (8004608 <MX_LWIP_Init+0x23c>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	061a      	lsls	r2, r3, #24
 8004424:	4b78      	ldr	r3, [pc, #480]	; (8004608 <MX_LWIP_Init+0x23c>)
 8004426:	785b      	ldrb	r3, [r3, #1]
 8004428:	041b      	lsls	r3, r3, #16
 800442a:	431a      	orrs	r2, r3
 800442c:	4b76      	ldr	r3, [pc, #472]	; (8004608 <MX_LWIP_Init+0x23c>)
 800442e:	789b      	ldrb	r3, [r3, #2]
 8004430:	021b      	lsls	r3, r3, #8
 8004432:	4313      	orrs	r3, r2
 8004434:	4a74      	ldr	r2, [pc, #464]	; (8004608 <MX_LWIP_Init+0x23c>)
 8004436:	78d2      	ldrb	r2, [r2, #3]
 8004438:	4313      	orrs	r3, r2
 800443a:	061a      	lsls	r2, r3, #24
 800443c:	4b72      	ldr	r3, [pc, #456]	; (8004608 <MX_LWIP_Init+0x23c>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	0619      	lsls	r1, r3, #24
 8004442:	4b71      	ldr	r3, [pc, #452]	; (8004608 <MX_LWIP_Init+0x23c>)
 8004444:	785b      	ldrb	r3, [r3, #1]
 8004446:	041b      	lsls	r3, r3, #16
 8004448:	4319      	orrs	r1, r3
 800444a:	4b6f      	ldr	r3, [pc, #444]	; (8004608 <MX_LWIP_Init+0x23c>)
 800444c:	789b      	ldrb	r3, [r3, #2]
 800444e:	021b      	lsls	r3, r3, #8
 8004450:	430b      	orrs	r3, r1
 8004452:	496d      	ldr	r1, [pc, #436]	; (8004608 <MX_LWIP_Init+0x23c>)
 8004454:	78c9      	ldrb	r1, [r1, #3]
 8004456:	430b      	orrs	r3, r1
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800445e:	431a      	orrs	r2, r3
 8004460:	4b69      	ldr	r3, [pc, #420]	; (8004608 <MX_LWIP_Init+0x23c>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	0619      	lsls	r1, r3, #24
 8004466:	4b68      	ldr	r3, [pc, #416]	; (8004608 <MX_LWIP_Init+0x23c>)
 8004468:	785b      	ldrb	r3, [r3, #1]
 800446a:	041b      	lsls	r3, r3, #16
 800446c:	4319      	orrs	r1, r3
 800446e:	4b66      	ldr	r3, [pc, #408]	; (8004608 <MX_LWIP_Init+0x23c>)
 8004470:	789b      	ldrb	r3, [r3, #2]
 8004472:	021b      	lsls	r3, r3, #8
 8004474:	430b      	orrs	r3, r1
 8004476:	4964      	ldr	r1, [pc, #400]	; (8004608 <MX_LWIP_Init+0x23c>)
 8004478:	78c9      	ldrb	r1, [r1, #3]
 800447a:	430b      	orrs	r3, r1
 800447c:	0a1b      	lsrs	r3, r3, #8
 800447e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004482:	431a      	orrs	r2, r3
 8004484:	4b60      	ldr	r3, [pc, #384]	; (8004608 <MX_LWIP_Init+0x23c>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	0619      	lsls	r1, r3, #24
 800448a:	4b5f      	ldr	r3, [pc, #380]	; (8004608 <MX_LWIP_Init+0x23c>)
 800448c:	785b      	ldrb	r3, [r3, #1]
 800448e:	041b      	lsls	r3, r3, #16
 8004490:	4319      	orrs	r1, r3
 8004492:	4b5d      	ldr	r3, [pc, #372]	; (8004608 <MX_LWIP_Init+0x23c>)
 8004494:	789b      	ldrb	r3, [r3, #2]
 8004496:	021b      	lsls	r3, r3, #8
 8004498:	430b      	orrs	r3, r1
 800449a:	495b      	ldr	r1, [pc, #364]	; (8004608 <MX_LWIP_Init+0x23c>)
 800449c:	78c9      	ldrb	r1, [r1, #3]
 800449e:	430b      	orrs	r3, r1
 80044a0:	0e1b      	lsrs	r3, r3, #24
 80044a2:	4313      	orrs	r3, r2
 80044a4:	4a5b      	ldr	r2, [pc, #364]	; (8004614 <MX_LWIP_Init+0x248>)
 80044a6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80044a8:	4b58      	ldr	r3, [pc, #352]	; (800460c <MX_LWIP_Init+0x240>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	061a      	lsls	r2, r3, #24
 80044ae:	4b57      	ldr	r3, [pc, #348]	; (800460c <MX_LWIP_Init+0x240>)
 80044b0:	785b      	ldrb	r3, [r3, #1]
 80044b2:	041b      	lsls	r3, r3, #16
 80044b4:	431a      	orrs	r2, r3
 80044b6:	4b55      	ldr	r3, [pc, #340]	; (800460c <MX_LWIP_Init+0x240>)
 80044b8:	789b      	ldrb	r3, [r3, #2]
 80044ba:	021b      	lsls	r3, r3, #8
 80044bc:	4313      	orrs	r3, r2
 80044be:	4a53      	ldr	r2, [pc, #332]	; (800460c <MX_LWIP_Init+0x240>)
 80044c0:	78d2      	ldrb	r2, [r2, #3]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	061a      	lsls	r2, r3, #24
 80044c6:	4b51      	ldr	r3, [pc, #324]	; (800460c <MX_LWIP_Init+0x240>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	0619      	lsls	r1, r3, #24
 80044cc:	4b4f      	ldr	r3, [pc, #316]	; (800460c <MX_LWIP_Init+0x240>)
 80044ce:	785b      	ldrb	r3, [r3, #1]
 80044d0:	041b      	lsls	r3, r3, #16
 80044d2:	4319      	orrs	r1, r3
 80044d4:	4b4d      	ldr	r3, [pc, #308]	; (800460c <MX_LWIP_Init+0x240>)
 80044d6:	789b      	ldrb	r3, [r3, #2]
 80044d8:	021b      	lsls	r3, r3, #8
 80044da:	430b      	orrs	r3, r1
 80044dc:	494b      	ldr	r1, [pc, #300]	; (800460c <MX_LWIP_Init+0x240>)
 80044de:	78c9      	ldrb	r1, [r1, #3]
 80044e0:	430b      	orrs	r3, r1
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044e8:	431a      	orrs	r2, r3
 80044ea:	4b48      	ldr	r3, [pc, #288]	; (800460c <MX_LWIP_Init+0x240>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	0619      	lsls	r1, r3, #24
 80044f0:	4b46      	ldr	r3, [pc, #280]	; (800460c <MX_LWIP_Init+0x240>)
 80044f2:	785b      	ldrb	r3, [r3, #1]
 80044f4:	041b      	lsls	r3, r3, #16
 80044f6:	4319      	orrs	r1, r3
 80044f8:	4b44      	ldr	r3, [pc, #272]	; (800460c <MX_LWIP_Init+0x240>)
 80044fa:	789b      	ldrb	r3, [r3, #2]
 80044fc:	021b      	lsls	r3, r3, #8
 80044fe:	430b      	orrs	r3, r1
 8004500:	4942      	ldr	r1, [pc, #264]	; (800460c <MX_LWIP_Init+0x240>)
 8004502:	78c9      	ldrb	r1, [r1, #3]
 8004504:	430b      	orrs	r3, r1
 8004506:	0a1b      	lsrs	r3, r3, #8
 8004508:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800450c:	431a      	orrs	r2, r3
 800450e:	4b3f      	ldr	r3, [pc, #252]	; (800460c <MX_LWIP_Init+0x240>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	0619      	lsls	r1, r3, #24
 8004514:	4b3d      	ldr	r3, [pc, #244]	; (800460c <MX_LWIP_Init+0x240>)
 8004516:	785b      	ldrb	r3, [r3, #1]
 8004518:	041b      	lsls	r3, r3, #16
 800451a:	4319      	orrs	r1, r3
 800451c:	4b3b      	ldr	r3, [pc, #236]	; (800460c <MX_LWIP_Init+0x240>)
 800451e:	789b      	ldrb	r3, [r3, #2]
 8004520:	021b      	lsls	r3, r3, #8
 8004522:	430b      	orrs	r3, r1
 8004524:	4939      	ldr	r1, [pc, #228]	; (800460c <MX_LWIP_Init+0x240>)
 8004526:	78c9      	ldrb	r1, [r1, #3]
 8004528:	430b      	orrs	r3, r1
 800452a:	0e1b      	lsrs	r3, r3, #24
 800452c:	4313      	orrs	r3, r2
 800452e:	4a3a      	ldr	r2, [pc, #232]	; (8004618 <MX_LWIP_Init+0x24c>)
 8004530:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004532:	4b37      	ldr	r3, [pc, #220]	; (8004610 <MX_LWIP_Init+0x244>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	061a      	lsls	r2, r3, #24
 8004538:	4b35      	ldr	r3, [pc, #212]	; (8004610 <MX_LWIP_Init+0x244>)
 800453a:	785b      	ldrb	r3, [r3, #1]
 800453c:	041b      	lsls	r3, r3, #16
 800453e:	431a      	orrs	r2, r3
 8004540:	4b33      	ldr	r3, [pc, #204]	; (8004610 <MX_LWIP_Init+0x244>)
 8004542:	789b      	ldrb	r3, [r3, #2]
 8004544:	021b      	lsls	r3, r3, #8
 8004546:	4313      	orrs	r3, r2
 8004548:	4a31      	ldr	r2, [pc, #196]	; (8004610 <MX_LWIP_Init+0x244>)
 800454a:	78d2      	ldrb	r2, [r2, #3]
 800454c:	4313      	orrs	r3, r2
 800454e:	061a      	lsls	r2, r3, #24
 8004550:	4b2f      	ldr	r3, [pc, #188]	; (8004610 <MX_LWIP_Init+0x244>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	0619      	lsls	r1, r3, #24
 8004556:	4b2e      	ldr	r3, [pc, #184]	; (8004610 <MX_LWIP_Init+0x244>)
 8004558:	785b      	ldrb	r3, [r3, #1]
 800455a:	041b      	lsls	r3, r3, #16
 800455c:	4319      	orrs	r1, r3
 800455e:	4b2c      	ldr	r3, [pc, #176]	; (8004610 <MX_LWIP_Init+0x244>)
 8004560:	789b      	ldrb	r3, [r3, #2]
 8004562:	021b      	lsls	r3, r3, #8
 8004564:	430b      	orrs	r3, r1
 8004566:	492a      	ldr	r1, [pc, #168]	; (8004610 <MX_LWIP_Init+0x244>)
 8004568:	78c9      	ldrb	r1, [r1, #3]
 800456a:	430b      	orrs	r3, r1
 800456c:	021b      	lsls	r3, r3, #8
 800456e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004572:	431a      	orrs	r2, r3
 8004574:	4b26      	ldr	r3, [pc, #152]	; (8004610 <MX_LWIP_Init+0x244>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	0619      	lsls	r1, r3, #24
 800457a:	4b25      	ldr	r3, [pc, #148]	; (8004610 <MX_LWIP_Init+0x244>)
 800457c:	785b      	ldrb	r3, [r3, #1]
 800457e:	041b      	lsls	r3, r3, #16
 8004580:	4319      	orrs	r1, r3
 8004582:	4b23      	ldr	r3, [pc, #140]	; (8004610 <MX_LWIP_Init+0x244>)
 8004584:	789b      	ldrb	r3, [r3, #2]
 8004586:	021b      	lsls	r3, r3, #8
 8004588:	430b      	orrs	r3, r1
 800458a:	4921      	ldr	r1, [pc, #132]	; (8004610 <MX_LWIP_Init+0x244>)
 800458c:	78c9      	ldrb	r1, [r1, #3]
 800458e:	430b      	orrs	r3, r1
 8004590:	0a1b      	lsrs	r3, r3, #8
 8004592:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004596:	431a      	orrs	r2, r3
 8004598:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <MX_LWIP_Init+0x244>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	0619      	lsls	r1, r3, #24
 800459e:	4b1c      	ldr	r3, [pc, #112]	; (8004610 <MX_LWIP_Init+0x244>)
 80045a0:	785b      	ldrb	r3, [r3, #1]
 80045a2:	041b      	lsls	r3, r3, #16
 80045a4:	4319      	orrs	r1, r3
 80045a6:	4b1a      	ldr	r3, [pc, #104]	; (8004610 <MX_LWIP_Init+0x244>)
 80045a8:	789b      	ldrb	r3, [r3, #2]
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	430b      	orrs	r3, r1
 80045ae:	4918      	ldr	r1, [pc, #96]	; (8004610 <MX_LWIP_Init+0x244>)
 80045b0:	78c9      	ldrb	r1, [r1, #3]
 80045b2:	430b      	orrs	r3, r1
 80045b4:	0e1b      	lsrs	r3, r3, #24
 80045b6:	4313      	orrs	r3, r2
 80045b8:	4a18      	ldr	r2, [pc, #96]	; (800461c <MX_LWIP_Init+0x250>)
 80045ba:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80045bc:	4b18      	ldr	r3, [pc, #96]	; (8004620 <MX_LWIP_Init+0x254>)
 80045be:	9302      	str	r3, [sp, #8]
 80045c0:	4b18      	ldr	r3, [pc, #96]	; (8004624 <MX_LWIP_Init+0x258>)
 80045c2:	9301      	str	r3, [sp, #4]
 80045c4:	2300      	movs	r3, #0
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	4b14      	ldr	r3, [pc, #80]	; (800461c <MX_LWIP_Init+0x250>)
 80045ca:	4a13      	ldr	r2, [pc, #76]	; (8004618 <MX_LWIP_Init+0x24c>)
 80045cc:	4911      	ldr	r1, [pc, #68]	; (8004614 <MX_LWIP_Init+0x248>)
 80045ce:	4816      	ldr	r0, [pc, #88]	; (8004628 <MX_LWIP_Init+0x25c>)
 80045d0:	f001 f940 	bl	8005854 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80045d4:	4814      	ldr	r0, [pc, #80]	; (8004628 <MX_LWIP_Init+0x25c>)
 80045d6:	f001 faef 	bl	8005bb8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80045da:	4b13      	ldr	r3, [pc, #76]	; (8004628 <MX_LWIP_Init+0x25c>)
 80045dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80045e0:	089b      	lsrs	r3, r3, #2
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80045ec:	480e      	ldr	r0, [pc, #56]	; (8004628 <MX_LWIP_Init+0x25c>)
 80045ee:	f001 faf3 	bl	8005bd8 <netif_set_up>
 80045f2:	e002      	b.n	80045fa <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80045f4:	480c      	ldr	r0, [pc, #48]	; (8004628 <MX_LWIP_Init+0x25c>)
 80045f6:	f001 fb5b 	bl	8005cb0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80045fa:	490c      	ldr	r1, [pc, #48]	; (800462c <MX_LWIP_Init+0x260>)
 80045fc:	480a      	ldr	r0, [pc, #40]	; (8004628 <MX_LWIP_Init+0x25c>)
 80045fe:	f001 fbed 	bl	8005ddc <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004602:	bf00      	nop
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	200001b0 	.word	0x200001b0
 800460c:	200001b4 	.word	0x200001b4
 8004610:	200001b8 	.word	0x200001b8
 8004614:	200001a4 	.word	0x200001a4
 8004618:	200001a8 	.word	0x200001a8
 800461c:	200001ac 	.word	0x200001ac
 8004620:	0800e699 	.word	0x0800e699
 8004624:	08004961 	.word	0x08004961
 8004628:	20000170 	.word	0x20000170
 800462c:	08004681 	.word	0x08004681

08004630 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8004638:	f7fc fe48 	bl	80012cc <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	4b08      	ldr	r3, [pc, #32]	; (8004660 <Ethernet_Link_Periodic_Handle+0x30>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b63      	cmp	r3, #99	; 0x63
 8004646:	d907      	bls.n	8004658 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8004648:	f7fc fe40 	bl	80012cc <HAL_GetTick>
 800464c:	4603      	mov	r3, r0
 800464e:	4a04      	ldr	r2, [pc, #16]	; (8004660 <Ethernet_Link_Periodic_Handle+0x30>)
 8004650:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fae8 	bl	8004c28 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8004658:	bf00      	nop
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	2000016c 	.word	0x2000016c

08004664 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004668:	4804      	ldr	r0, [pc, #16]	; (800467c <MX_LWIP_Process+0x18>)
 800466a:	f000 f959 	bl	8004920 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800466e:	f007 fc27 	bl	800bec0 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8004672:	4802      	ldr	r0, [pc, #8]	; (800467c <MX_LWIP_Process+0x18>)
 8004674:	f7ff ffdc 	bl	8004630 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004678:	bf00      	nop
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000170 	.word	0x20000170

08004680 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80046a0:	4b40      	ldr	r3, [pc, #256]	; (80047a4 <low_level_init+0x110>)
 80046a2:	4a41      	ldr	r2, [pc, #260]	; (80047a8 <low_level_init+0x114>)
 80046a4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80046a6:	2300      	movs	r3, #0
 80046a8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80046aa:	2380      	movs	r3, #128	; 0x80
 80046ac:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80046ae:	23e1      	movs	r3, #225	; 0xe1
 80046b0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80046b2:	2300      	movs	r3, #0
 80046b4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80046b6:	2300      	movs	r3, #0
 80046b8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80046ba:	2300      	movs	r3, #0
 80046bc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80046be:	4a39      	ldr	r2, [pc, #228]	; (80047a4 <low_level_init+0x110>)
 80046c0:	f107 0308 	add.w	r3, r7, #8
 80046c4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80046c6:	4b37      	ldr	r3, [pc, #220]	; (80047a4 <low_level_init+0x110>)
 80046c8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80046cc:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80046ce:	4b35      	ldr	r3, [pc, #212]	; (80047a4 <low_level_init+0x110>)
 80046d0:	4a36      	ldr	r2, [pc, #216]	; (80047ac <low_level_init+0x118>)
 80046d2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80046d4:	4b33      	ldr	r3, [pc, #204]	; (80047a4 <low_level_init+0x110>)
 80046d6:	4a36      	ldr	r2, [pc, #216]	; (80047b0 <low_level_init+0x11c>)
 80046d8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80046da:	4b32      	ldr	r3, [pc, #200]	; (80047a4 <low_level_init+0x110>)
 80046dc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80046e0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80046e2:	4830      	ldr	r0, [pc, #192]	; (80047a4 <low_level_init+0x110>)
 80046e4:	f7fc ffc6 	bl	8001674 <HAL_ETH_Init>
 80046e8:	4603      	mov	r3, r0
 80046ea:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80046ec:	2238      	movs	r2, #56	; 0x38
 80046ee:	2100      	movs	r1, #0
 80046f0:	4830      	ldr	r0, [pc, #192]	; (80047b4 <low_level_init+0x120>)
 80046f2:	f00a f903 	bl	800e8fc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80046f6:	4b2f      	ldr	r3, [pc, #188]	; (80047b4 <low_level_init+0x120>)
 80046f8:	2221      	movs	r2, #33	; 0x21
 80046fa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80046fc:	4b2d      	ldr	r3, [pc, #180]	; (80047b4 <low_level_init+0x120>)
 80046fe:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8004702:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004704:	4b2b      	ldr	r3, [pc, #172]	; (80047b4 <low_level_init+0x120>)
 8004706:	2200      	movs	r2, #0
 8004708:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800470a:	482b      	ldr	r0, [pc, #172]	; (80047b8 <low_level_init+0x124>)
 800470c:	f000 ff6a 	bl	80055e4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2206      	movs	r2, #6
 8004714:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004718:	4b22      	ldr	r3, [pc, #136]	; (80047a4 <low_level_init+0x110>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	781a      	ldrb	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004724:	4b1f      	ldr	r3, [pc, #124]	; (80047a4 <low_level_init+0x110>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	785a      	ldrb	r2, [r3, #1]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004730:	4b1c      	ldr	r3, [pc, #112]	; (80047a4 <low_level_init+0x110>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	789a      	ldrb	r2, [r3, #2]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800473c:	4b19      	ldr	r3, [pc, #100]	; (80047a4 <low_level_init+0x110>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	78da      	ldrb	r2, [r3, #3]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004748:	4b16      	ldr	r3, [pc, #88]	; (80047a4 <low_level_init+0x110>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	791a      	ldrb	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004754:	4b13      	ldr	r3, [pc, #76]	; (80047a4 <low_level_init+0x110>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	795a      	ldrb	r2, [r3, #5]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004766:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800476e:	f043 030a 	orr.w	r3, r3, #10
 8004772:	b2da      	uxtb	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800477a:	4910      	ldr	r1, [pc, #64]	; (80047bc <low_level_init+0x128>)
 800477c:	4810      	ldr	r0, [pc, #64]	; (80047c0 <low_level_init+0x12c>)
 800477e:	f7fc fbde 	bl	8000f3e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004782:	480f      	ldr	r0, [pc, #60]	; (80047c0 <low_level_init+0x12c>)
 8004784:	f7fc fc0d 	bl	8000fa2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004788:	7bfb      	ldrb	r3, [r7, #15]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d103      	bne.n	8004796 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fa4a 	bl	8004c28 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004794:	e001      	b.n	800479a <low_level_init+0x106>
    Error_Handler();
 8004796:	f7fc fa1b 	bl	8000bd0 <Error_Handler>
}
 800479a:	bf00      	nop
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20004c88 	.word	0x20004c88
 80047a8:	40028000 	.word	0x40028000
 80047ac:	20004be8 	.word	0x20004be8
 80047b0:	20004b48 	.word	0x20004b48
 80047b4:	20004d38 	.word	0x20004d38
 80047b8:	08012744 	.word	0x08012744
 80047bc:	2000003c 	.word	0x2000003c
 80047c0:	20004d70 	.word	0x20004d70

080047c4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b092      	sub	sp, #72	; 0x48
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80047dc:	f107 030c 	add.w	r3, r7, #12
 80047e0:	2230      	movs	r2, #48	; 0x30
 80047e2:	2100      	movs	r1, #0
 80047e4:	4618      	mov	r0, r3
 80047e6:	f00a f889 	bl	800e8fc <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80047ea:	f107 030c 	add.w	r3, r7, #12
 80047ee:	2230      	movs	r2, #48	; 0x30
 80047f0:	2100      	movs	r1, #0
 80047f2:	4618      	mov	r0, r3
 80047f4:	f00a f882 	bl	800e8fc <memset>

  for(q = p; q != NULL; q = q->next)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	643b      	str	r3, [r7, #64]	; 0x40
 80047fc:	e045      	b.n	800488a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80047fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004800:	2b03      	cmp	r3, #3
 8004802:	d902      	bls.n	800480a <low_level_output+0x46>
      return ERR_IF;
 8004804:	f06f 030b 	mvn.w	r3, #11
 8004808:	e055      	b.n	80048b6 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800480a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800480c:	6859      	ldr	r1, [r3, #4]
 800480e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004810:	4613      	mov	r3, r2
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	4413      	add	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	3348      	adds	r3, #72	; 0x48
 800481a:	443b      	add	r3, r7
 800481c:	3b3c      	subs	r3, #60	; 0x3c
 800481e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004822:	895b      	ldrh	r3, [r3, #10]
 8004824:	4619      	mov	r1, r3
 8004826:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004828:	4613      	mov	r3, r2
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	3348      	adds	r3, #72	; 0x48
 8004832:	443b      	add	r3, r7
 8004834:	3b38      	subs	r3, #56	; 0x38
 8004836:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800483a:	2b00      	cmp	r3, #0
 800483c:	d011      	beq.n	8004862 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800483e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004840:	1e5a      	subs	r2, r3, #1
 8004842:	f107 000c 	add.w	r0, r7, #12
 8004846:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004848:	460b      	mov	r3, r1
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	440b      	add	r3, r1
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	18c1      	adds	r1, r0, r3
 8004852:	4613      	mov	r3, r2
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	4413      	add	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	3348      	adds	r3, #72	; 0x48
 800485c:	443b      	add	r3, r7
 800485e:	3b34      	subs	r3, #52	; 0x34
 8004860:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d109      	bne.n	800487e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800486a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800486c:	4613      	mov	r3, r2
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	4413      	add	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	3348      	adds	r3, #72	; 0x48
 8004876:	443b      	add	r3, r7
 8004878:	3b34      	subs	r3, #52	; 0x34
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800487e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004880:	3301      	adds	r3, #1
 8004882:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	643b      	str	r3, [r7, #64]	; 0x40
 800488a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1b6      	bne.n	80047fe <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	891b      	ldrh	r3, [r3, #8]
 8004894:	461a      	mov	r2, r3
 8004896:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <low_level_output+0xfc>)
 8004898:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800489a:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <low_level_output+0xfc>)
 800489c:	f107 030c 	add.w	r3, r7, #12
 80048a0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80048a2:	4a07      	ldr	r2, [pc, #28]	; (80048c0 <low_level_output+0xfc>)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80048a8:	2214      	movs	r2, #20
 80048aa:	4905      	ldr	r1, [pc, #20]	; (80048c0 <low_level_output+0xfc>)
 80048ac:	4805      	ldr	r0, [pc, #20]	; (80048c4 <low_level_output+0x100>)
 80048ae:	f7fd f817 	bl	80018e0 <HAL_ETH_Transmit>

  return errval;
 80048b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3748      	adds	r7, #72	; 0x48
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20004d38 	.word	0x20004d38
 80048c4:	20004c88 	.word	0x20004c88

080048c8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80048d4:	4b0e      	ldr	r3, [pc, #56]	; (8004910 <low_level_input+0x48>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d114      	bne.n	8004906 <low_level_input+0x3e>
  {
    if (HAL_ETH_ReadData(&heth, (void **)&p) == HAL_OK)
 80048dc:	f107 030c 	add.w	r3, r7, #12
 80048e0:	4619      	mov	r1, r3
 80048e2:	480c      	ldr	r0, [pc, #48]	; (8004914 <low_level_input+0x4c>)
 80048e4:	f7fd f890 	bl	8001a08 <HAL_ETH_ReadData>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10b      	bne.n	8004906 <low_level_input+0x3e>
    {
      LED2_TGL;
 80048ee:	4b0a      	ldr	r3, [pc, #40]	; (8004918 <low_level_input+0x50>)
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	4a09      	ldr	r2, [pc, #36]	; (8004918 <low_level_input+0x50>)
 80048f4:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80048f8:	6153      	str	r3, [r2, #20]

      if (Filter(p->payload, &INSTRUCTION_IP_TCP[0]))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	4907      	ldr	r1, [pc, #28]	; (800491c <low_level_input+0x54>)
 8004900:	4618      	mov	r0, r3
 8004902:	f7fb ff53 	bl	80007ac <Filter>

      }
    }
  }

  return p;
 8004906:	68fb      	ldr	r3, [r7, #12]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	20004b44 	.word	0x20004b44
 8004914:	20004c88 	.word	0x20004c88
 8004918:	40020400 	.word	0x40020400
 800491c:	20000000 	.word	0x20000000

08004920 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004928:	2300      	movs	r3, #0
 800492a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7ff ffcb 	bl	80048c8 <low_level_input>
 8004932:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	4798      	blx	r3
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f001 fdc6 	bl	80064dc <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1ea      	bne.n	800492c <ethernetif_input+0xc>
}
 8004956:	bf00      	nop
 8004958:	bf00      	nop
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <ethernetif_init+0x1c>
 800496e:	4b0e      	ldr	r3, [pc, #56]	; (80049a8 <ethernetif_init+0x48>)
 8004970:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8004974:	490d      	ldr	r1, [pc, #52]	; (80049ac <ethernetif_init+0x4c>)
 8004976:	480e      	ldr	r0, [pc, #56]	; (80049b0 <ethernetif_init+0x50>)
 8004978:	f009 ffc8 	bl	800e90c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2273      	movs	r2, #115	; 0x73
 8004980:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2274      	movs	r2, #116	; 0x74
 8004988:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a09      	ldr	r2, [pc, #36]	; (80049b4 <ethernetif_init+0x54>)
 8004990:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a08      	ldr	r2, [pc, #32]	; (80049b8 <ethernetif_init+0x58>)
 8004996:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7ff fe7b 	bl	8004694 <low_level_init>

  return ERR_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	0800fd4c 	.word	0x0800fd4c
 80049ac:	0800fd68 	.word	0x0800fd68
 80049b0:	0800fd78 	.word	0x0800fd78
 80049b4:	0800cb51 	.word	0x0800cb51
 80049b8:	080047c5 	.word	0x080047c5

080049bc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80049c8:	68f9      	ldr	r1, [r7, #12]
 80049ca:	4807      	ldr	r0, [pc, #28]	; (80049e8 <pbuf_free_custom+0x2c>)
 80049cc:	f000 feec 	bl	80057a8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80049d0:	4b06      	ldr	r3, [pc, #24]	; (80049ec <pbuf_free_custom+0x30>)
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d102      	bne.n	80049de <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80049d8:	4b04      	ldr	r3, [pc, #16]	; (80049ec <pbuf_free_custom+0x30>)
 80049da:	2200      	movs	r2, #0
 80049dc:	701a      	strb	r2, [r3, #0]
  }
}
 80049de:	bf00      	nop
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	08012744 	.word	0x08012744
 80049ec:	20004b44 	.word	0x20004b44

080049f0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80049f4:	f7fc fc6a 	bl	80012cc <HAL_GetTick>
 80049f8:	4603      	mov	r3, r0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b08e      	sub	sp, #56	; 0x38
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	605a      	str	r2, [r3, #4]
 8004a12:	609a      	str	r2, [r3, #8]
 8004a14:	60da      	str	r2, [r3, #12]
 8004a16:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a55      	ldr	r2, [pc, #340]	; (8004b74 <HAL_ETH_MspInit+0x174>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	f040 80a4 	bne.w	8004b6c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004a24:	2300      	movs	r3, #0
 8004a26:	623b      	str	r3, [r7, #32]
 8004a28:	4b53      	ldr	r3, [pc, #332]	; (8004b78 <HAL_ETH_MspInit+0x178>)
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	4a52      	ldr	r2, [pc, #328]	; (8004b78 <HAL_ETH_MspInit+0x178>)
 8004a2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a32:	6313      	str	r3, [r2, #48]	; 0x30
 8004a34:	4b50      	ldr	r3, [pc, #320]	; (8004b78 <HAL_ETH_MspInit+0x178>)
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3c:	623b      	str	r3, [r7, #32]
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	2300      	movs	r3, #0
 8004a42:	61fb      	str	r3, [r7, #28]
 8004a44:	4b4c      	ldr	r3, [pc, #304]	; (8004b78 <HAL_ETH_MspInit+0x178>)
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	4a4b      	ldr	r2, [pc, #300]	; (8004b78 <HAL_ETH_MspInit+0x178>)
 8004a4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8004a50:	4b49      	ldr	r3, [pc, #292]	; (8004b78 <HAL_ETH_MspInit+0x178>)
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61bb      	str	r3, [r7, #24]
 8004a60:	4b45      	ldr	r3, [pc, #276]	; (8004b78 <HAL_ETH_MspInit+0x178>)
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	4a44      	ldr	r2, [pc, #272]	; (8004b78 <HAL_ETH_MspInit+0x178>)
 8004a66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8004a6c:	4b42      	ldr	r3, [pc, #264]	; (8004b78 <HAL_ETH_MspInit+0x178>)
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a74:	61bb      	str	r3, [r7, #24]
 8004a76:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	4b3e      	ldr	r3, [pc, #248]	; (8004b78 <HAL_ETH_MspInit+0x178>)
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	4a3d      	ldr	r2, [pc, #244]	; (8004b78 <HAL_ETH_MspInit+0x178>)
 8004a82:	f043 0304 	orr.w	r3, r3, #4
 8004a86:	6313      	str	r3, [r2, #48]	; 0x30
 8004a88:	4b3b      	ldr	r3, [pc, #236]	; (8004b78 <HAL_ETH_MspInit+0x178>)
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	617b      	str	r3, [r7, #20]
 8004a92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a94:	2300      	movs	r3, #0
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	4b37      	ldr	r3, [pc, #220]	; (8004b78 <HAL_ETH_MspInit+0x178>)
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9c:	4a36      	ldr	r2, [pc, #216]	; (8004b78 <HAL_ETH_MspInit+0x178>)
 8004a9e:	f043 0301 	orr.w	r3, r3, #1
 8004aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8004aa4:	4b34      	ldr	r3, [pc, #208]	; (8004b78 <HAL_ETH_MspInit+0x178>)
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	4b30      	ldr	r3, [pc, #192]	; (8004b78 <HAL_ETH_MspInit+0x178>)
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab8:	4a2f      	ldr	r2, [pc, #188]	; (8004b78 <HAL_ETH_MspInit+0x178>)
 8004aba:	f043 0302 	orr.w	r3, r3, #2
 8004abe:	6313      	str	r3, [r2, #48]	; 0x30
 8004ac0:	4b2d      	ldr	r3, [pc, #180]	; (8004b78 <HAL_ETH_MspInit+0x178>)
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004acc:	2300      	movs	r3, #0
 8004ace:	60bb      	str	r3, [r7, #8]
 8004ad0:	4b29      	ldr	r3, [pc, #164]	; (8004b78 <HAL_ETH_MspInit+0x178>)
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	4a28      	ldr	r2, [pc, #160]	; (8004b78 <HAL_ETH_MspInit+0x178>)
 8004ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ada:	6313      	str	r3, [r2, #48]	; 0x30
 8004adc:	4b26      	ldr	r3, [pc, #152]	; (8004b78 <HAL_ETH_MspInit+0x178>)
 8004ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae4:	60bb      	str	r3, [r7, #8]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004ae8:	2332      	movs	r3, #50	; 0x32
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aec:	2302      	movs	r3, #2
 8004aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004af4:	2303      	movs	r3, #3
 8004af6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004af8:	230b      	movs	r3, #11
 8004afa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b00:	4619      	mov	r1, r3
 8004b02:	481e      	ldr	r0, [pc, #120]	; (8004b7c <HAL_ETH_MspInit+0x17c>)
 8004b04:	f7fd feac 	bl	8002860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004b08:	2386      	movs	r3, #134	; 0x86
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b14:	2303      	movs	r3, #3
 8004b16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b18:	230b      	movs	r3, #11
 8004b1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b20:	4619      	mov	r1, r3
 8004b22:	4817      	ldr	r0, [pc, #92]	; (8004b80 <HAL_ETH_MspInit+0x180>)
 8004b24:	f7fd fe9c 	bl	8002860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b2e:	2302      	movs	r3, #2
 8004b30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b36:	2303      	movs	r3, #3
 8004b38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b3a:	230b      	movs	r3, #11
 8004b3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b42:	4619      	mov	r1, r3
 8004b44:	480f      	ldr	r0, [pc, #60]	; (8004b84 <HAL_ETH_MspInit+0x184>)
 8004b46:	f7fd fe8b 	bl	8002860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004b4a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b50:	2302      	movs	r3, #2
 8004b52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b54:	2300      	movs	r3, #0
 8004b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b5c:	230b      	movs	r3, #11
 8004b5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b64:	4619      	mov	r1, r3
 8004b66:	4808      	ldr	r0, [pc, #32]	; (8004b88 <HAL_ETH_MspInit+0x188>)
 8004b68:	f7fd fe7a 	bl	8002860 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004b6c:	bf00      	nop
 8004b6e:	3738      	adds	r7, #56	; 0x38
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40028000 	.word	0x40028000
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	40020800 	.word	0x40020800
 8004b80:	40020000 	.word	0x40020000
 8004b84:	40020400 	.word	0x40020400
 8004b88:	40021800 	.word	0x40021800

08004b8c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004b90:	4802      	ldr	r0, [pc, #8]	; (8004b9c <ETH_PHY_IO_Init+0x10>)
 8004b92:	f7fd fa09 	bl	8001fa8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	20004c88 	.word	0x20004c88

08004ba0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  return 0;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	68f9      	ldr	r1, [r7, #12]
 8004bc2:	4807      	ldr	r0, [pc, #28]	; (8004be0 <ETH_PHY_IO_ReadReg+0x30>)
 8004bc4:	f7fd f858 	bl	8001c78 <HAL_ETH_ReadPHYRegister>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004bce:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd2:	e000      	b.n	8004bd6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20004c88 	.word	0x20004c88

08004be4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	68f9      	ldr	r1, [r7, #12]
 8004bf6:	4807      	ldr	r0, [pc, #28]	; (8004c14 <ETH_PHY_IO_WriteReg+0x30>)
 8004bf8:	f7fd f889 	bl	8001d0e <HAL_ETH_WritePHYRegister>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004c02:	f04f 33ff 	mov.w	r3, #4294967295
 8004c06:	e000      	b.n	8004c0a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20004c88 	.word	0x20004c88

08004c18 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004c1c:	f7fc fb56 	bl	80012cc <HAL_GetTick>
 8004c20:	4603      	mov	r3, r0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b0a0      	sub	sp, #128	; 0x80
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004c30:	f107 030c 	add.w	r3, r7, #12
 8004c34:	2264      	movs	r2, #100	; 0x64
 8004c36:	2100      	movs	r1, #0
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f009 fe5f 	bl	800e8fc <memset>
  int32_t PHYLinkState = 0;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c46:	2300      	movs	r3, #0
 8004c48:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004c4e:	483a      	ldr	r0, [pc, #232]	; (8004d38 <ethernet_link_check_state+0x110>)
 8004c50:	f7fc fa4f 	bl	80010f2 <LAN8742_GetLinkState>
 8004c54:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c5c:	089b      	lsrs	r3, r3, #2
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00c      	beq.n	8004c82 <ethernet_link_check_state+0x5a>
 8004c68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	dc09      	bgt.n	8004c82 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8004c6e:	4833      	ldr	r0, [pc, #204]	; (8004d3c <ethernet_link_check_state+0x114>)
 8004c70:	f7fc fddd 	bl	800182e <HAL_ETH_Stop>
    netif_set_down(netif);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f001 f81b 	bl	8005cb0 <netif_set_down>
    netif_set_link_down(netif);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f001 f87e 	bl	8005d7c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004c80:	e055      	b.n	8004d2e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d14e      	bne.n	8004d2e <ethernet_link_check_state+0x106>
 8004c90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	dd4b      	ble.n	8004d2e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004c96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c98:	3b02      	subs	r3, #2
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	d82a      	bhi.n	8004cf4 <ethernet_link_check_state+0xcc>
 8004c9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ca4 <ethernet_link_check_state+0x7c>)
 8004ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca4:	08004cb5 	.word	0x08004cb5
 8004ca8:	08004cc7 	.word	0x08004cc7
 8004cac:	08004cd7 	.word	0x08004cd7
 8004cb0:	08004ce7 	.word	0x08004ce7
      duplex = ETH_FULLDUPLEX_MODE;
 8004cb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004cb8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004cba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004cbe:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004cc4:	e017      	b.n	8004cf6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004cca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004cce:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004cd4:	e00f      	b.n	8004cf6 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004cd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004cda:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004ce4:	e007      	b.n	8004cf6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004cea:	2300      	movs	r3, #0
 8004cec:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004cf2:	e000      	b.n	8004cf6 <ethernet_link_check_state+0xce>
      break;
 8004cf4:	bf00      	nop
    if(linkchanged)
 8004cf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d018      	beq.n	8004d2e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004cfc:	f107 030c 	add.w	r3, r7, #12
 8004d00:	4619      	mov	r1, r3
 8004d02:	480e      	ldr	r0, [pc, #56]	; (8004d3c <ethernet_link_check_state+0x114>)
 8004d04:	f7fd f84c 	bl	8001da0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004d08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8004d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d0e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004d10:	f107 030c 	add.w	r3, r7, #12
 8004d14:	4619      	mov	r1, r3
 8004d16:	4809      	ldr	r0, [pc, #36]	; (8004d3c <ethernet_link_check_state+0x114>)
 8004d18:	f7fd f92c 	bl	8001f74 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004d1c:	4807      	ldr	r0, [pc, #28]	; (8004d3c <ethernet_link_check_state+0x114>)
 8004d1e:	f7fc fd27 	bl	8001770 <HAL_ETH_Start>
      netif_set_up(netif);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 ff58 	bl	8005bd8 <netif_set_up>
      netif_set_link_up(netif);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fff3 	bl	8005d14 <netif_set_link_up>
}
 8004d2e:	bf00      	nop
 8004d30:	3780      	adds	r7, #128	; 0x80
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20004d70 	.word	0x20004d70
 8004d3c:	20004c88 	.word	0x20004c88

08004d40 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004d48:	4812      	ldr	r0, [pc, #72]	; (8004d94 <HAL_ETH_RxAllocateCallback+0x54>)
 8004d4a:	f000 fcbf 	bl	80056cc <memp_malloc_pool>
 8004d4e:	60f8      	str	r0, [r7, #12]
  if (p)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d014      	beq.n	8004d80 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f103 0220 	add.w	r2, r3, #32
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4a0d      	ldr	r2, [pc, #52]	; (8004d98 <HAL_ETH_RxAllocateCallback+0x58>)
 8004d64:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004d6e:	9201      	str	r2, [sp, #4]
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2241      	movs	r2, #65	; 0x41
 8004d76:	2100      	movs	r1, #0
 8004d78:	2000      	movs	r0, #0
 8004d7a:	f001 f9f5 	bl	8006168 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004d7e:	e005      	b.n	8004d8c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004d80:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <HAL_ETH_RxAllocateCallback+0x5c>)
 8004d82:	2201      	movs	r2, #1
 8004d84:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	08012744 	.word	0x08012744
 8004d98:	080049bd 	.word	0x080049bd
 8004d9c:	20004b44 	.word	0x20004b44

08004da0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b089      	sub	sp, #36	; 0x24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
 8004dac:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004db6:	2300      	movs	r3, #0
 8004db8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3b20      	subs	r3, #32
 8004dbe:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	887a      	ldrh	r2, [r7, #2]
 8004dd0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d103      	bne.n	8004de2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	69fa      	ldr	r2, [r7, #28]
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	e003      	b.n	8004dea <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	69fa      	ldr	r2, [r7, #28]
 8004dee:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	61fb      	str	r3, [r7, #28]
 8004df6:	e009      	b.n	8004e0c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	891a      	ldrh	r2, [r3, #8]
 8004dfc:	887b      	ldrh	r3, [r7, #2]
 8004dfe:	4413      	add	r3, r2
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	61fb      	str	r3, [r7, #28]
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1f2      	bne.n	8004df8 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004e12:	bf00      	nop
 8004e14:	bf00      	nop
 8004e16:	3724      	adds	r7, #36	; 0x24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4603      	mov	r3, r0
 8004e28:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004e2a:	88fb      	ldrh	r3, [r7, #6]
 8004e2c:	021b      	lsls	r3, r3, #8
 8004e2e:	b21a      	sxth	r2, r3
 8004e30:	88fb      	ldrh	r3, [r7, #6]
 8004e32:	0a1b      	lsrs	r3, r3, #8
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	b21b      	sxth	r3, r3
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	b21b      	sxth	r3, r3
 8004e3c:	b29b      	uxth	r3, r3
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	061a      	lsls	r2, r3, #24
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	021b      	lsls	r3, r3, #8
 8004e5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	0a1b      	lsrs	r3, r3, #8
 8004e64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	0e1b      	lsrs	r3, r3, #24
 8004e6e:	4313      	orrs	r3, r2
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004e82:	2300      	movs	r3, #0
 8004e84:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004e86:	f000 f8d5 	bl	8005034 <mem_init>
  memp_init();
 8004e8a:	f000 fbdb 	bl	8005644 <memp_init>
  pbuf_init();
  netif_init();
 8004e8e:	f000 fcd9 	bl	8005844 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004e92:	f007 f857 	bl	800bf44 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004e96:	f001 fdaf 	bl	80069f8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004e9a:	f006 ffc9 	bl	800be30 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004e9e:	bf00      	nop
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	4603      	mov	r3, r0
 8004eb0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004eb2:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <ptr_to_mem+0x20>)
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	4413      	add	r3, r2
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	200053fc 	.word	0x200053fc

08004ecc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004ed4:	4b05      	ldr	r3, [pc, #20]	; (8004eec <mem_to_ptr+0x20>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	b29b      	uxth	r3, r3
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	200053fc 	.word	0x200053fc

08004ef0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004ef0:	b590      	push	{r4, r7, lr}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004ef8:	4b45      	ldr	r3, [pc, #276]	; (8005010 <plug_holes+0x120>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d206      	bcs.n	8004f10 <plug_holes+0x20>
 8004f02:	4b44      	ldr	r3, [pc, #272]	; (8005014 <plug_holes+0x124>)
 8004f04:	f240 12df 	movw	r2, #479	; 0x1df
 8004f08:	4943      	ldr	r1, [pc, #268]	; (8005018 <plug_holes+0x128>)
 8004f0a:	4844      	ldr	r0, [pc, #272]	; (800501c <plug_holes+0x12c>)
 8004f0c:	f009 fcfe 	bl	800e90c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004f10:	4b43      	ldr	r3, [pc, #268]	; (8005020 <plug_holes+0x130>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d306      	bcc.n	8004f28 <plug_holes+0x38>
 8004f1a:	4b3e      	ldr	r3, [pc, #248]	; (8005014 <plug_holes+0x124>)
 8004f1c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004f20:	4940      	ldr	r1, [pc, #256]	; (8005024 <plug_holes+0x134>)
 8004f22:	483e      	ldr	r0, [pc, #248]	; (800501c <plug_holes+0x12c>)
 8004f24:	f009 fcf2 	bl	800e90c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	791b      	ldrb	r3, [r3, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d006      	beq.n	8004f3e <plug_holes+0x4e>
 8004f30:	4b38      	ldr	r3, [pc, #224]	; (8005014 <plug_holes+0x124>)
 8004f32:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004f36:	493c      	ldr	r1, [pc, #240]	; (8005028 <plug_holes+0x138>)
 8004f38:	4838      	ldr	r0, [pc, #224]	; (800501c <plug_holes+0x12c>)
 8004f3a:	f009 fce7 	bl	800e90c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f46:	d906      	bls.n	8004f56 <plug_holes+0x66>
 8004f48:	4b32      	ldr	r3, [pc, #200]	; (8005014 <plug_holes+0x124>)
 8004f4a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004f4e:	4937      	ldr	r1, [pc, #220]	; (800502c <plug_holes+0x13c>)
 8004f50:	4832      	ldr	r0, [pc, #200]	; (800501c <plug_holes+0x12c>)
 8004f52:	f009 fcdb 	bl	800e90c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff ffa4 	bl	8004ea8 <ptr_to_mem>
 8004f60:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d024      	beq.n	8004fb4 <plug_holes+0xc4>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	791b      	ldrb	r3, [r3, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d120      	bne.n	8004fb4 <plug_holes+0xc4>
 8004f72:	4b2b      	ldr	r3, [pc, #172]	; (8005020 <plug_holes+0x130>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d01b      	beq.n	8004fb4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004f7c:	4b2c      	ldr	r3, [pc, #176]	; (8005030 <plug_holes+0x140>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d102      	bne.n	8004f8c <plug_holes+0x9c>
      lfree = mem;
 8004f86:	4a2a      	ldr	r2, [pc, #168]	; (8005030 <plug_holes+0x140>)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	881a      	ldrh	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f9c:	d00a      	beq.n	8004fb4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7ff ff80 	bl	8004ea8 <ptr_to_mem>
 8004fa8:	4604      	mov	r4, r0
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7ff ff8e 	bl	8004ecc <mem_to_ptr>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	885b      	ldrh	r3, [r3, #2]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff ff75 	bl	8004ea8 <ptr_to_mem>
 8004fbe:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d01f      	beq.n	8005008 <plug_holes+0x118>
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	791b      	ldrb	r3, [r3, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d11b      	bne.n	8005008 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004fd0:	4b17      	ldr	r3, [pc, #92]	; (8005030 <plug_holes+0x140>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d102      	bne.n	8004fe0 <plug_holes+0xf0>
      lfree = pmem;
 8004fda:	4a15      	ldr	r2, [pc, #84]	; (8005030 <plug_holes+0x140>)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	881a      	ldrh	r2, [r3, #0]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ff0:	d00a      	beq.n	8005008 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff ff56 	bl	8004ea8 <ptr_to_mem>
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	68b8      	ldr	r0, [r7, #8]
 8005000:	f7ff ff64 	bl	8004ecc <mem_to_ptr>
 8005004:	4603      	mov	r3, r0
 8005006:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005008:	bf00      	nop
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	bd90      	pop	{r4, r7, pc}
 8005010:	200053fc 	.word	0x200053fc
 8005014:	0800fda0 	.word	0x0800fda0
 8005018:	0800fdd0 	.word	0x0800fdd0
 800501c:	0800fde8 	.word	0x0800fde8
 8005020:	20005400 	.word	0x20005400
 8005024:	0800fe10 	.word	0x0800fe10
 8005028:	0800fe2c 	.word	0x0800fe2c
 800502c:	0800fe48 	.word	0x0800fe48
 8005030:	20005404 	.word	0x20005404

08005034 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800503a:	4b18      	ldr	r3, [pc, #96]	; (800509c <mem_init+0x68>)
 800503c:	3303      	adds	r3, #3
 800503e:	f023 0303 	bic.w	r3, r3, #3
 8005042:	461a      	mov	r2, r3
 8005044:	4b16      	ldr	r3, [pc, #88]	; (80050a0 <mem_init+0x6c>)
 8005046:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005048:	4b15      	ldr	r3, [pc, #84]	; (80050a0 <mem_init+0x6c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005054:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005062:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005066:	f7ff ff1f 	bl	8004ea8 <ptr_to_mem>
 800506a:	4603      	mov	r3, r0
 800506c:	4a0d      	ldr	r2, [pc, #52]	; (80050a4 <mem_init+0x70>)
 800506e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005070:	4b0c      	ldr	r3, [pc, #48]	; (80050a4 <mem_init+0x70>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2201      	movs	r2, #1
 8005076:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005078:	4b0a      	ldr	r3, [pc, #40]	; (80050a4 <mem_init+0x70>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005080:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005082:	4b08      	ldr	r3, [pc, #32]	; (80050a4 <mem_init+0x70>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800508a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800508c:	4b04      	ldr	r3, [pc, #16]	; (80050a0 <mem_init+0x6c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a05      	ldr	r2, [pc, #20]	; (80050a8 <mem_init+0x74>)
 8005092:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005094:	bf00      	nop
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	20004da8 	.word	0x20004da8
 80050a0:	200053fc 	.word	0x200053fc
 80050a4:	20005400 	.word	0x20005400
 80050a8:	20005404 	.word	0x20005404

080050ac <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7ff ff09 	bl	8004ecc <mem_to_ptr>
 80050ba:	4603      	mov	r3, r0
 80050bc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff fef0 	bl	8004ea8 <ptr_to_mem>
 80050c8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	885b      	ldrh	r3, [r3, #2]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff feea 	bl	8004ea8 <ptr_to_mem>
 80050d4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80050de:	d818      	bhi.n	8005112 <mem_link_valid+0x66>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	885b      	ldrh	r3, [r3, #2]
 80050e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80050e8:	d813      	bhi.n	8005112 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80050ee:	8afa      	ldrh	r2, [r7, #22]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d004      	beq.n	80050fe <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	881b      	ldrh	r3, [r3, #0]
 80050f8:	8afa      	ldrh	r2, [r7, #22]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d109      	bne.n	8005112 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80050fe:	4b08      	ldr	r3, [pc, #32]	; (8005120 <mem_link_valid+0x74>)
 8005100:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	429a      	cmp	r2, r3
 8005106:	d006      	beq.n	8005116 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	885b      	ldrh	r3, [r3, #2]
 800510c:	8afa      	ldrh	r2, [r7, #22]
 800510e:	429a      	cmp	r2, r3
 8005110:	d001      	beq.n	8005116 <mem_link_valid+0x6a>
    return 0;
 8005112:	2300      	movs	r3, #0
 8005114:	e000      	b.n	8005118 <mem_link_valid+0x6c>
  }
  return 1;
 8005116:	2301      	movs	r3, #1
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	20005400 	.word	0x20005400

08005124 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d04c      	beq.n	80051cc <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f003 0303 	and.w	r3, r3, #3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d007      	beq.n	800514c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800513c:	4b25      	ldr	r3, [pc, #148]	; (80051d4 <mem_free+0xb0>)
 800513e:	f240 2273 	movw	r2, #627	; 0x273
 8005142:	4925      	ldr	r1, [pc, #148]	; (80051d8 <mem_free+0xb4>)
 8005144:	4825      	ldr	r0, [pc, #148]	; (80051dc <mem_free+0xb8>)
 8005146:	f009 fbe1 	bl	800e90c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800514a:	e040      	b.n	80051ce <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3b08      	subs	r3, #8
 8005150:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005152:	4b23      	ldr	r3, [pc, #140]	; (80051e0 <mem_free+0xbc>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	429a      	cmp	r2, r3
 800515a:	d306      	bcc.n	800516a <mem_free+0x46>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f103 020c 	add.w	r2, r3, #12
 8005162:	4b20      	ldr	r3, [pc, #128]	; (80051e4 <mem_free+0xc0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d907      	bls.n	800517a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800516a:	4b1a      	ldr	r3, [pc, #104]	; (80051d4 <mem_free+0xb0>)
 800516c:	f240 227f 	movw	r2, #639	; 0x27f
 8005170:	491d      	ldr	r1, [pc, #116]	; (80051e8 <mem_free+0xc4>)
 8005172:	481a      	ldr	r0, [pc, #104]	; (80051dc <mem_free+0xb8>)
 8005174:	f009 fbca 	bl	800e90c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005178:	e029      	b.n	80051ce <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	791b      	ldrb	r3, [r3, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d107      	bne.n	8005192 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005182:	4b14      	ldr	r3, [pc, #80]	; (80051d4 <mem_free+0xb0>)
 8005184:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005188:	4918      	ldr	r1, [pc, #96]	; (80051ec <mem_free+0xc8>)
 800518a:	4814      	ldr	r0, [pc, #80]	; (80051dc <mem_free+0xb8>)
 800518c:	f009 fbbe 	bl	800e90c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005190:	e01d      	b.n	80051ce <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f7ff ff8a 	bl	80050ac <mem_link_valid>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d107      	bne.n	80051ae <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800519e:	4b0d      	ldr	r3, [pc, #52]	; (80051d4 <mem_free+0xb0>)
 80051a0:	f240 2295 	movw	r2, #661	; 0x295
 80051a4:	4912      	ldr	r1, [pc, #72]	; (80051f0 <mem_free+0xcc>)
 80051a6:	480d      	ldr	r0, [pc, #52]	; (80051dc <mem_free+0xb8>)
 80051a8:	f009 fbb0 	bl	800e90c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80051ac:	e00f      	b.n	80051ce <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80051b4:	4b0f      	ldr	r3, [pc, #60]	; (80051f4 <mem_free+0xd0>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d202      	bcs.n	80051c4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80051be:	4a0d      	ldr	r2, [pc, #52]	; (80051f4 <mem_free+0xd0>)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f7ff fe93 	bl	8004ef0 <plug_holes>
 80051ca:	e000      	b.n	80051ce <mem_free+0xaa>
    return;
 80051cc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	0800fda0 	.word	0x0800fda0
 80051d8:	0800fe74 	.word	0x0800fe74
 80051dc:	0800fde8 	.word	0x0800fde8
 80051e0:	200053fc 	.word	0x200053fc
 80051e4:	20005400 	.word	0x20005400
 80051e8:	0800fe98 	.word	0x0800fe98
 80051ec:	0800feb4 	.word	0x0800feb4
 80051f0:	0800fedc 	.word	0x0800fedc
 80051f4:	20005404 	.word	0x20005404

080051f8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005204:	887b      	ldrh	r3, [r7, #2]
 8005206:	3303      	adds	r3, #3
 8005208:	b29b      	uxth	r3, r3
 800520a:	f023 0303 	bic.w	r3, r3, #3
 800520e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005210:	8bfb      	ldrh	r3, [r7, #30]
 8005212:	2b0b      	cmp	r3, #11
 8005214:	d801      	bhi.n	800521a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005216:	230c      	movs	r3, #12
 8005218:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800521a:	8bfb      	ldrh	r3, [r7, #30]
 800521c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005220:	d803      	bhi.n	800522a <mem_trim+0x32>
 8005222:	8bfa      	ldrh	r2, [r7, #30]
 8005224:	887b      	ldrh	r3, [r7, #2]
 8005226:	429a      	cmp	r2, r3
 8005228:	d201      	bcs.n	800522e <mem_trim+0x36>
    return NULL;
 800522a:	2300      	movs	r3, #0
 800522c:	e0cc      	b.n	80053c8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800522e:	4b68      	ldr	r3, [pc, #416]	; (80053d0 <mem_trim+0x1d8>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	429a      	cmp	r2, r3
 8005236:	d304      	bcc.n	8005242 <mem_trim+0x4a>
 8005238:	4b66      	ldr	r3, [pc, #408]	; (80053d4 <mem_trim+0x1dc>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	429a      	cmp	r2, r3
 8005240:	d306      	bcc.n	8005250 <mem_trim+0x58>
 8005242:	4b65      	ldr	r3, [pc, #404]	; (80053d8 <mem_trim+0x1e0>)
 8005244:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005248:	4964      	ldr	r1, [pc, #400]	; (80053dc <mem_trim+0x1e4>)
 800524a:	4865      	ldr	r0, [pc, #404]	; (80053e0 <mem_trim+0x1e8>)
 800524c:	f009 fb5e 	bl	800e90c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005250:	4b5f      	ldr	r3, [pc, #380]	; (80053d0 <mem_trim+0x1d8>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	429a      	cmp	r2, r3
 8005258:	d304      	bcc.n	8005264 <mem_trim+0x6c>
 800525a:	4b5e      	ldr	r3, [pc, #376]	; (80053d4 <mem_trim+0x1dc>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	429a      	cmp	r2, r3
 8005262:	d301      	bcc.n	8005268 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	e0af      	b.n	80053c8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3b08      	subs	r3, #8
 800526c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800526e:	69b8      	ldr	r0, [r7, #24]
 8005270:	f7ff fe2c 	bl	8004ecc <mem_to_ptr>
 8005274:	4603      	mov	r3, r0
 8005276:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	881a      	ldrh	r2, [r3, #0]
 800527c:	8afb      	ldrh	r3, [r7, #22]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b08      	subs	r3, #8
 8005284:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005286:	8bfa      	ldrh	r2, [r7, #30]
 8005288:	8abb      	ldrh	r3, [r7, #20]
 800528a:	429a      	cmp	r2, r3
 800528c:	d906      	bls.n	800529c <mem_trim+0xa4>
 800528e:	4b52      	ldr	r3, [pc, #328]	; (80053d8 <mem_trim+0x1e0>)
 8005290:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005294:	4953      	ldr	r1, [pc, #332]	; (80053e4 <mem_trim+0x1ec>)
 8005296:	4852      	ldr	r0, [pc, #328]	; (80053e0 <mem_trim+0x1e8>)
 8005298:	f009 fb38 	bl	800e90c <iprintf>
  if (newsize > size) {
 800529c:	8bfa      	ldrh	r2, [r7, #30]
 800529e:	8abb      	ldrh	r3, [r7, #20]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d901      	bls.n	80052a8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80052a4:	2300      	movs	r3, #0
 80052a6:	e08f      	b.n	80053c8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80052a8:	8bfa      	ldrh	r2, [r7, #30]
 80052aa:	8abb      	ldrh	r3, [r7, #20]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d101      	bne.n	80052b4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	e089      	b.n	80053c8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff fdf5 	bl	8004ea8 <ptr_to_mem>
 80052be:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	791b      	ldrb	r3, [r3, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d13f      	bne.n	8005348 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80052d0:	d106      	bne.n	80052e0 <mem_trim+0xe8>
 80052d2:	4b41      	ldr	r3, [pc, #260]	; (80053d8 <mem_trim+0x1e0>)
 80052d4:	f240 22f5 	movw	r2, #757	; 0x2f5
 80052d8:	4943      	ldr	r1, [pc, #268]	; (80053e8 <mem_trim+0x1f0>)
 80052da:	4841      	ldr	r0, [pc, #260]	; (80053e0 <mem_trim+0x1e8>)
 80052dc:	f009 fb16 	bl	800e90c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80052e6:	8afa      	ldrh	r2, [r7, #22]
 80052e8:	8bfb      	ldrh	r3, [r7, #30]
 80052ea:	4413      	add	r3, r2
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3308      	adds	r3, #8
 80052f0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80052f2:	4b3e      	ldr	r3, [pc, #248]	; (80053ec <mem_trim+0x1f4>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d106      	bne.n	800530a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80052fc:	89fb      	ldrh	r3, [r7, #14]
 80052fe:	4618      	mov	r0, r3
 8005300:	f7ff fdd2 	bl	8004ea8 <ptr_to_mem>
 8005304:	4603      	mov	r3, r0
 8005306:	4a39      	ldr	r2, [pc, #228]	; (80053ec <mem_trim+0x1f4>)
 8005308:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800530a:	89fb      	ldrh	r3, [r7, #14]
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff fdcb 	bl	8004ea8 <ptr_to_mem>
 8005312:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	2200      	movs	r2, #0
 8005318:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	89ba      	ldrh	r2, [r7, #12]
 800531e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	8afa      	ldrh	r2, [r7, #22]
 8005324:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	89fa      	ldrh	r2, [r7, #14]
 800532a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005334:	d047      	beq.n	80053c6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff fdb4 	bl	8004ea8 <ptr_to_mem>
 8005340:	4602      	mov	r2, r0
 8005342:	89fb      	ldrh	r3, [r7, #14]
 8005344:	8053      	strh	r3, [r2, #2]
 8005346:	e03e      	b.n	80053c6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005348:	8bfb      	ldrh	r3, [r7, #30]
 800534a:	f103 0214 	add.w	r2, r3, #20
 800534e:	8abb      	ldrh	r3, [r7, #20]
 8005350:	429a      	cmp	r2, r3
 8005352:	d838      	bhi.n	80053c6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005354:	8afa      	ldrh	r2, [r7, #22]
 8005356:	8bfb      	ldrh	r3, [r7, #30]
 8005358:	4413      	add	r3, r2
 800535a:	b29b      	uxth	r3, r3
 800535c:	3308      	adds	r3, #8
 800535e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005368:	d106      	bne.n	8005378 <mem_trim+0x180>
 800536a:	4b1b      	ldr	r3, [pc, #108]	; (80053d8 <mem_trim+0x1e0>)
 800536c:	f240 3216 	movw	r2, #790	; 0x316
 8005370:	491d      	ldr	r1, [pc, #116]	; (80053e8 <mem_trim+0x1f0>)
 8005372:	481b      	ldr	r0, [pc, #108]	; (80053e0 <mem_trim+0x1e8>)
 8005374:	f009 faca 	bl	800e90c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005378:	89fb      	ldrh	r3, [r7, #14]
 800537a:	4618      	mov	r0, r3
 800537c:	f7ff fd94 	bl	8004ea8 <ptr_to_mem>
 8005380:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005382:	4b1a      	ldr	r3, [pc, #104]	; (80053ec <mem_trim+0x1f4>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	429a      	cmp	r2, r3
 800538a:	d202      	bcs.n	8005392 <mem_trim+0x19a>
      lfree = mem2;
 800538c:	4a17      	ldr	r2, [pc, #92]	; (80053ec <mem_trim+0x1f4>)
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	2200      	movs	r2, #0
 8005396:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	881a      	ldrh	r2, [r3, #0]
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	8afa      	ldrh	r2, [r7, #22]
 80053a4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	89fa      	ldrh	r2, [r7, #14]
 80053aa:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80053b4:	d007      	beq.n	80053c6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7ff fd74 	bl	8004ea8 <ptr_to_mem>
 80053c0:	4602      	mov	r2, r0
 80053c2:	89fb      	ldrh	r3, [r7, #14]
 80053c4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80053c6:	687b      	ldr	r3, [r7, #4]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3720      	adds	r7, #32
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	200053fc 	.word	0x200053fc
 80053d4:	20005400 	.word	0x20005400
 80053d8:	0800fda0 	.word	0x0800fda0
 80053dc:	0800ff10 	.word	0x0800ff10
 80053e0:	0800fde8 	.word	0x0800fde8
 80053e4:	0800ff28 	.word	0x0800ff28
 80053e8:	0800ff48 	.word	0x0800ff48
 80053ec:	20005404 	.word	0x20005404

080053f0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	4603      	mov	r3, r0
 80053f8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80053fa:	88fb      	ldrh	r3, [r7, #6]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <mem_malloc+0x14>
    return NULL;
 8005400:	2300      	movs	r3, #0
 8005402:	e0d9      	b.n	80055b8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005404:	88fb      	ldrh	r3, [r7, #6]
 8005406:	3303      	adds	r3, #3
 8005408:	b29b      	uxth	r3, r3
 800540a:	f023 0303 	bic.w	r3, r3, #3
 800540e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005410:	8bbb      	ldrh	r3, [r7, #28]
 8005412:	2b0b      	cmp	r3, #11
 8005414:	d801      	bhi.n	800541a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005416:	230c      	movs	r3, #12
 8005418:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800541a:	8bbb      	ldrh	r3, [r7, #28]
 800541c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005420:	d803      	bhi.n	800542a <mem_malloc+0x3a>
 8005422:	8bba      	ldrh	r2, [r7, #28]
 8005424:	88fb      	ldrh	r3, [r7, #6]
 8005426:	429a      	cmp	r2, r3
 8005428:	d201      	bcs.n	800542e <mem_malloc+0x3e>
    return NULL;
 800542a:	2300      	movs	r3, #0
 800542c:	e0c4      	b.n	80055b8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800542e:	4b64      	ldr	r3, [pc, #400]	; (80055c0 <mem_malloc+0x1d0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff fd4a 	bl	8004ecc <mem_to_ptr>
 8005438:	4603      	mov	r3, r0
 800543a:	83fb      	strh	r3, [r7, #30]
 800543c:	e0b4      	b.n	80055a8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800543e:	8bfb      	ldrh	r3, [r7, #30]
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff fd31 	bl	8004ea8 <ptr_to_mem>
 8005446:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	791b      	ldrb	r3, [r3, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	f040 80a4 	bne.w	800559a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	8bfb      	ldrh	r3, [r7, #30]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	f1a3 0208 	sub.w	r2, r3, #8
 8005460:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005462:	429a      	cmp	r2, r3
 8005464:	f0c0 8099 	bcc.w	800559a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	461a      	mov	r2, r3
 800546e:	8bfb      	ldrh	r3, [r7, #30]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	f1a3 0208 	sub.w	r2, r3, #8
 8005476:	8bbb      	ldrh	r3, [r7, #28]
 8005478:	3314      	adds	r3, #20
 800547a:	429a      	cmp	r2, r3
 800547c:	d333      	bcc.n	80054e6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800547e:	8bfa      	ldrh	r2, [r7, #30]
 8005480:	8bbb      	ldrh	r3, [r7, #28]
 8005482:	4413      	add	r3, r2
 8005484:	b29b      	uxth	r3, r3
 8005486:	3308      	adds	r3, #8
 8005488:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800548a:	8a7b      	ldrh	r3, [r7, #18]
 800548c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005490:	d106      	bne.n	80054a0 <mem_malloc+0xb0>
 8005492:	4b4c      	ldr	r3, [pc, #304]	; (80055c4 <mem_malloc+0x1d4>)
 8005494:	f240 3287 	movw	r2, #903	; 0x387
 8005498:	494b      	ldr	r1, [pc, #300]	; (80055c8 <mem_malloc+0x1d8>)
 800549a:	484c      	ldr	r0, [pc, #304]	; (80055cc <mem_malloc+0x1dc>)
 800549c:	f009 fa36 	bl	800e90c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80054a0:	8a7b      	ldrh	r3, [r7, #18]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff fd00 	bl	8004ea8 <ptr_to_mem>
 80054a8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	881a      	ldrh	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8bfa      	ldrh	r2, [r7, #30]
 80054bc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	8a7a      	ldrh	r2, [r7, #18]
 80054c2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	2201      	movs	r2, #1
 80054c8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80054d2:	d00b      	beq.n	80054ec <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff fce5 	bl	8004ea8 <ptr_to_mem>
 80054de:	4602      	mov	r2, r0
 80054e0:	8a7b      	ldrh	r3, [r7, #18]
 80054e2:	8053      	strh	r3, [r2, #2]
 80054e4:	e002      	b.n	80054ec <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2201      	movs	r2, #1
 80054ea:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80054ec:	4b34      	ldr	r3, [pc, #208]	; (80055c0 <mem_malloc+0x1d0>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d127      	bne.n	8005546 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80054f6:	4b32      	ldr	r3, [pc, #200]	; (80055c0 <mem_malloc+0x1d0>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80054fc:	e005      	b.n	800550a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f7ff fcd0 	bl	8004ea8 <ptr_to_mem>
 8005508:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	791b      	ldrb	r3, [r3, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d004      	beq.n	800551c <mem_malloc+0x12c>
 8005512:	4b2f      	ldr	r3, [pc, #188]	; (80055d0 <mem_malloc+0x1e0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	429a      	cmp	r2, r3
 800551a:	d1f0      	bne.n	80054fe <mem_malloc+0x10e>
          }
          lfree = cur;
 800551c:	4a28      	ldr	r2, [pc, #160]	; (80055c0 <mem_malloc+0x1d0>)
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005522:	4b27      	ldr	r3, [pc, #156]	; (80055c0 <mem_malloc+0x1d0>)
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	4b2a      	ldr	r3, [pc, #168]	; (80055d0 <mem_malloc+0x1e0>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d00b      	beq.n	8005546 <mem_malloc+0x156>
 800552e:	4b24      	ldr	r3, [pc, #144]	; (80055c0 <mem_malloc+0x1d0>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	791b      	ldrb	r3, [r3, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d006      	beq.n	8005546 <mem_malloc+0x156>
 8005538:	4b22      	ldr	r3, [pc, #136]	; (80055c4 <mem_malloc+0x1d4>)
 800553a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800553e:	4925      	ldr	r1, [pc, #148]	; (80055d4 <mem_malloc+0x1e4>)
 8005540:	4822      	ldr	r0, [pc, #136]	; (80055cc <mem_malloc+0x1dc>)
 8005542:	f009 f9e3 	bl	800e90c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005546:	8bba      	ldrh	r2, [r7, #28]
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	4413      	add	r3, r2
 800554c:	3308      	adds	r3, #8
 800554e:	4a20      	ldr	r2, [pc, #128]	; (80055d0 <mem_malloc+0x1e0>)
 8005550:	6812      	ldr	r2, [r2, #0]
 8005552:	4293      	cmp	r3, r2
 8005554:	d906      	bls.n	8005564 <mem_malloc+0x174>
 8005556:	4b1b      	ldr	r3, [pc, #108]	; (80055c4 <mem_malloc+0x1d4>)
 8005558:	f240 32b9 	movw	r2, #953	; 0x3b9
 800555c:	491e      	ldr	r1, [pc, #120]	; (80055d8 <mem_malloc+0x1e8>)
 800555e:	481b      	ldr	r0, [pc, #108]	; (80055cc <mem_malloc+0x1dc>)
 8005560:	f009 f9d4 	bl	800e90c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d006      	beq.n	800557c <mem_malloc+0x18c>
 800556e:	4b15      	ldr	r3, [pc, #84]	; (80055c4 <mem_malloc+0x1d4>)
 8005570:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005574:	4919      	ldr	r1, [pc, #100]	; (80055dc <mem_malloc+0x1ec>)
 8005576:	4815      	ldr	r0, [pc, #84]	; (80055cc <mem_malloc+0x1dc>)
 8005578:	f009 f9c8 	bl	800e90c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d006      	beq.n	8005594 <mem_malloc+0x1a4>
 8005586:	4b0f      	ldr	r3, [pc, #60]	; (80055c4 <mem_malloc+0x1d4>)
 8005588:	f240 32bd 	movw	r2, #957	; 0x3bd
 800558c:	4914      	ldr	r1, [pc, #80]	; (80055e0 <mem_malloc+0x1f0>)
 800558e:	480f      	ldr	r0, [pc, #60]	; (80055cc <mem_malloc+0x1dc>)
 8005590:	f009 f9bc 	bl	800e90c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	3308      	adds	r3, #8
 8005598:	e00e      	b.n	80055b8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800559a:	8bfb      	ldrh	r3, [r7, #30]
 800559c:	4618      	mov	r0, r3
 800559e:	f7ff fc83 	bl	8004ea8 <ptr_to_mem>
 80055a2:	4603      	mov	r3, r0
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80055a8:	8bfa      	ldrh	r2, [r7, #30]
 80055aa:	8bbb      	ldrh	r3, [r7, #28]
 80055ac:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80055b0:	429a      	cmp	r2, r3
 80055b2:	f4ff af44 	bcc.w	800543e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3720      	adds	r7, #32
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	20005404 	.word	0x20005404
 80055c4:	0800fda0 	.word	0x0800fda0
 80055c8:	0800ff48 	.word	0x0800ff48
 80055cc:	0800fde8 	.word	0x0800fde8
 80055d0:	20005400 	.word	0x20005400
 80055d4:	0800ff5c 	.word	0x0800ff5c
 80055d8:	0800ff78 	.word	0x0800ff78
 80055dc:	0800ffa8 	.word	0x0800ffa8
 80055e0:	0800ffd8 	.word	0x0800ffd8

080055e4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	3303      	adds	r3, #3
 80055fa:	f023 0303 	bic.w	r3, r3, #3
 80055fe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005600:	2300      	movs	r3, #0
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	e011      	b.n	800562a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	461a      	mov	r2, r3
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4413      	add	r3, r2
 8005622:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	3301      	adds	r3, #1
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	885b      	ldrh	r3, [r3, #2]
 800562e:	461a      	mov	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4293      	cmp	r3, r2
 8005634:	dbe7      	blt.n	8005606 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005636:	bf00      	nop
 8005638:	bf00      	nop
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800564a:	2300      	movs	r3, #0
 800564c:	80fb      	strh	r3, [r7, #6]
 800564e:	e009      	b.n	8005664 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005650:	88fb      	ldrh	r3, [r7, #6]
 8005652:	4a08      	ldr	r2, [pc, #32]	; (8005674 <memp_init+0x30>)
 8005654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff ffc3 	bl	80055e4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800565e:	88fb      	ldrh	r3, [r7, #6]
 8005660:	3301      	adds	r3, #1
 8005662:	80fb      	strh	r3, [r7, #6]
 8005664:	88fb      	ldrh	r3, [r7, #6]
 8005666:	2b08      	cmp	r3, #8
 8005668:	d9f2      	bls.n	8005650 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800566a:	bf00      	nop
 800566c:	bf00      	nop
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	080127bc 	.word	0x080127bc

08005678 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d012      	beq.n	80056b4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	6812      	ldr	r2, [r2, #0]
 8005696:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d006      	beq.n	80056b0 <do_memp_malloc_pool+0x38>
 80056a2:	4b07      	ldr	r3, [pc, #28]	; (80056c0 <do_memp_malloc_pool+0x48>)
 80056a4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80056a8:	4906      	ldr	r1, [pc, #24]	; (80056c4 <do_memp_malloc_pool+0x4c>)
 80056aa:	4807      	ldr	r0, [pc, #28]	; (80056c8 <do_memp_malloc_pool+0x50>)
 80056ac:	f009 f92e 	bl	800e90c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	e000      	b.n	80056b6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	0800fffc 	.word	0x0800fffc
 80056c4:	0801002c 	.word	0x0801002c
 80056c8:	08010050 	.word	0x08010050

080056cc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d106      	bne.n	80056e8 <memp_malloc_pool+0x1c>
 80056da:	4b0a      	ldr	r3, [pc, #40]	; (8005704 <memp_malloc_pool+0x38>)
 80056dc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80056e0:	4909      	ldr	r1, [pc, #36]	; (8005708 <memp_malloc_pool+0x3c>)
 80056e2:	480a      	ldr	r0, [pc, #40]	; (800570c <memp_malloc_pool+0x40>)
 80056e4:	f009 f912 	bl	800e90c <iprintf>
  if (desc == NULL) {
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <memp_malloc_pool+0x26>
    return NULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e003      	b.n	80056fa <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff ffc0 	bl	8005678 <do_memp_malloc_pool>
 80056f8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	0800fffc 	.word	0x0800fffc
 8005708:	08010078 	.word	0x08010078
 800570c:	08010050 	.word	0x08010050

08005710 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	4603      	mov	r3, r0
 8005718:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800571a:	79fb      	ldrb	r3, [r7, #7]
 800571c:	2b08      	cmp	r3, #8
 800571e:	d908      	bls.n	8005732 <memp_malloc+0x22>
 8005720:	4b0a      	ldr	r3, [pc, #40]	; (800574c <memp_malloc+0x3c>)
 8005722:	f240 1257 	movw	r2, #343	; 0x157
 8005726:	490a      	ldr	r1, [pc, #40]	; (8005750 <memp_malloc+0x40>)
 8005728:	480a      	ldr	r0, [pc, #40]	; (8005754 <memp_malloc+0x44>)
 800572a:	f009 f8ef 	bl	800e90c <iprintf>
 800572e:	2300      	movs	r3, #0
 8005730:	e008      	b.n	8005744 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005732:	79fb      	ldrb	r3, [r7, #7]
 8005734:	4a08      	ldr	r2, [pc, #32]	; (8005758 <memp_malloc+0x48>)
 8005736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800573a:	4618      	mov	r0, r3
 800573c:	f7ff ff9c 	bl	8005678 <do_memp_malloc_pool>
 8005740:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005742:	68fb      	ldr	r3, [r7, #12]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	0800fffc 	.word	0x0800fffc
 8005750:	0801008c 	.word	0x0801008c
 8005754:	08010050 	.word	0x08010050
 8005758:	080127bc 	.word	0x080127bc

0800575c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	f003 0303 	and.w	r3, r3, #3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d006      	beq.n	800577e <do_memp_free_pool+0x22>
 8005770:	4b0a      	ldr	r3, [pc, #40]	; (800579c <do_memp_free_pool+0x40>)
 8005772:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8005776:	490a      	ldr	r1, [pc, #40]	; (80057a0 <do_memp_free_pool+0x44>)
 8005778:	480a      	ldr	r0, [pc, #40]	; (80057a4 <do_memp_free_pool+0x48>)
 800577a:	f009 f8c7 	bl	800e90c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005794:	bf00      	nop
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	0800fffc 	.word	0x0800fffc
 80057a0:	080100ac 	.word	0x080100ac
 80057a4:	08010050 	.word	0x08010050

080057a8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d106      	bne.n	80057c6 <memp_free_pool+0x1e>
 80057b8:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <memp_free_pool+0x3c>)
 80057ba:	f240 1295 	movw	r2, #405	; 0x195
 80057be:	490a      	ldr	r1, [pc, #40]	; (80057e8 <memp_free_pool+0x40>)
 80057c0:	480a      	ldr	r0, [pc, #40]	; (80057ec <memp_free_pool+0x44>)
 80057c2:	f009 f8a3 	bl	800e90c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d007      	beq.n	80057dc <memp_free_pool+0x34>
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d004      	beq.n	80057dc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80057d2:	6839      	ldr	r1, [r7, #0]
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7ff ffc1 	bl	800575c <do_memp_free_pool>
 80057da:	e000      	b.n	80057de <memp_free_pool+0x36>
    return;
 80057dc:	bf00      	nop
}
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	0800fffc 	.word	0x0800fffc
 80057e8:	08010078 	.word	0x08010078
 80057ec:	08010050 	.word	0x08010050

080057f0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	4603      	mov	r3, r0
 80057f8:	6039      	str	r1, [r7, #0]
 80057fa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80057fc:	79fb      	ldrb	r3, [r7, #7]
 80057fe:	2b08      	cmp	r3, #8
 8005800:	d907      	bls.n	8005812 <memp_free+0x22>
 8005802:	4b0c      	ldr	r3, [pc, #48]	; (8005834 <memp_free+0x44>)
 8005804:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005808:	490b      	ldr	r1, [pc, #44]	; (8005838 <memp_free+0x48>)
 800580a:	480c      	ldr	r0, [pc, #48]	; (800583c <memp_free+0x4c>)
 800580c:	f009 f87e 	bl	800e90c <iprintf>
 8005810:	e00c      	b.n	800582c <memp_free+0x3c>

  if (mem == NULL) {
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d008      	beq.n	800582a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005818:	79fb      	ldrb	r3, [r7, #7]
 800581a:	4a09      	ldr	r2, [pc, #36]	; (8005840 <memp_free+0x50>)
 800581c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005820:	6839      	ldr	r1, [r7, #0]
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff ff9a 	bl	800575c <do_memp_free_pool>
 8005828:	e000      	b.n	800582c <memp_free+0x3c>
    return;
 800582a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	0800fffc 	.word	0x0800fffc
 8005838:	080100cc 	.word	0x080100cc
 800583c:	08010050 	.word	0x08010050
 8005840:	080127bc 	.word	0x080127bc

08005844 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005848:	bf00      	nop
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
	...

08005854 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d108      	bne.n	800587a <netif_add+0x26>
 8005868:	4b57      	ldr	r3, [pc, #348]	; (80059c8 <netif_add+0x174>)
 800586a:	f240 1227 	movw	r2, #295	; 0x127
 800586e:	4957      	ldr	r1, [pc, #348]	; (80059cc <netif_add+0x178>)
 8005870:	4857      	ldr	r0, [pc, #348]	; (80059d0 <netif_add+0x17c>)
 8005872:	f009 f84b 	bl	800e90c <iprintf>
 8005876:	2300      	movs	r3, #0
 8005878:	e0a2      	b.n	80059c0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	2b00      	cmp	r3, #0
 800587e:	d108      	bne.n	8005892 <netif_add+0x3e>
 8005880:	4b51      	ldr	r3, [pc, #324]	; (80059c8 <netif_add+0x174>)
 8005882:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005886:	4953      	ldr	r1, [pc, #332]	; (80059d4 <netif_add+0x180>)
 8005888:	4851      	ldr	r0, [pc, #324]	; (80059d0 <netif_add+0x17c>)
 800588a:	f009 f83f 	bl	800e90c <iprintf>
 800588e:	2300      	movs	r3, #0
 8005890:	e096      	b.n	80059c0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005898:	4b4f      	ldr	r3, [pc, #316]	; (80059d8 <netif_add+0x184>)
 800589a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80058a2:	4b4d      	ldr	r3, [pc, #308]	; (80059d8 <netif_add+0x184>)
 80058a4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80058ac:	4b4a      	ldr	r3, [pc, #296]	; (80059d8 <netif_add+0x184>)
 80058ae:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4a45      	ldr	r2, [pc, #276]	; (80059dc <netif_add+0x188>)
 80058c6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6a3a      	ldr	r2, [r7, #32]
 80058e0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80058e2:	4b3f      	ldr	r3, [pc, #252]	; (80059e0 <netif_add+0x18c>)
 80058e4:	781a      	ldrb	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058f0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	68b9      	ldr	r1, [r7, #8]
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f913 	bl	8005b24 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	4798      	blx	r3
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <netif_add+0xba>
    return NULL;
 800590a:	2300      	movs	r3, #0
 800590c:	e058      	b.n	80059c0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005914:	2bff      	cmp	r3, #255	; 0xff
 8005916:	d103      	bne.n	8005920 <netif_add+0xcc>
        netif->num = 0;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005920:	2300      	movs	r3, #0
 8005922:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005924:	4b2f      	ldr	r3, [pc, #188]	; (80059e4 <netif_add+0x190>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	617b      	str	r3, [r7, #20]
 800592a:	e02b      	b.n	8005984 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	429a      	cmp	r2, r3
 8005932:	d106      	bne.n	8005942 <netif_add+0xee>
 8005934:	4b24      	ldr	r3, [pc, #144]	; (80059c8 <netif_add+0x174>)
 8005936:	f240 128b 	movw	r2, #395	; 0x18b
 800593a:	492b      	ldr	r1, [pc, #172]	; (80059e8 <netif_add+0x194>)
 800593c:	4824      	ldr	r0, [pc, #144]	; (80059d0 <netif_add+0x17c>)
 800593e:	f008 ffe5 	bl	800e90c <iprintf>
        num_netifs++;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	3301      	adds	r3, #1
 8005946:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	2bff      	cmp	r3, #255	; 0xff
 800594c:	dd06      	ble.n	800595c <netif_add+0x108>
 800594e:	4b1e      	ldr	r3, [pc, #120]	; (80059c8 <netif_add+0x174>)
 8005950:	f240 128d 	movw	r2, #397	; 0x18d
 8005954:	4925      	ldr	r1, [pc, #148]	; (80059ec <netif_add+0x198>)
 8005956:	481e      	ldr	r0, [pc, #120]	; (80059d0 <netif_add+0x17c>)
 8005958:	f008 ffd8 	bl	800e90c <iprintf>
        if (netif2->num == netif->num) {
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005968:	429a      	cmp	r2, r3
 800596a:	d108      	bne.n	800597e <netif_add+0x12a>
          netif->num++;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005972:	3301      	adds	r3, #1
 8005974:	b2da      	uxtb	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800597c:	e005      	b.n	800598a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1d0      	bne.n	800592c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1be      	bne.n	800590e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005996:	2bfe      	cmp	r3, #254	; 0xfe
 8005998:	d103      	bne.n	80059a2 <netif_add+0x14e>
    netif_num = 0;
 800599a:	4b11      	ldr	r3, [pc, #68]	; (80059e0 <netif_add+0x18c>)
 800599c:	2200      	movs	r2, #0
 800599e:	701a      	strb	r2, [r3, #0]
 80059a0:	e006      	b.n	80059b0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059a8:	3301      	adds	r3, #1
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	4b0c      	ldr	r3, [pc, #48]	; (80059e0 <netif_add+0x18c>)
 80059ae:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80059b0:	4b0c      	ldr	r3, [pc, #48]	; (80059e4 <netif_add+0x190>)
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80059b8:	4a0a      	ldr	r2, [pc, #40]	; (80059e4 <netif_add+0x190>)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80059be:	68fb      	ldr	r3, [r7, #12]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3718      	adds	r7, #24
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	080100e8 	.word	0x080100e8
 80059cc:	0801017c 	.word	0x0801017c
 80059d0:	08010138 	.word	0x08010138
 80059d4:	08010198 	.word	0x08010198
 80059d8:	08012820 	.word	0x08012820
 80059dc:	08005dff 	.word	0x08005dff
 80059e0:	200082fc 	.word	0x200082fc
 80059e4:	200082f4 	.word	0x200082f4
 80059e8:	080101bc 	.word	0x080101bc
 80059ec:	080101d0 	.word	0x080101d0

080059f0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f002 fb43 	bl	8008088 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005a02:	6839      	ldr	r1, [r7, #0]
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f006 fc27 	bl	800c258 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
	...

08005a14 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d106      	bne.n	8005a34 <netif_do_set_ipaddr+0x20>
 8005a26:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <netif_do_set_ipaddr+0x88>)
 8005a28:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005a2c:	491c      	ldr	r1, [pc, #112]	; (8005aa0 <netif_do_set_ipaddr+0x8c>)
 8005a2e:	481d      	ldr	r0, [pc, #116]	; (8005aa4 <netif_do_set_ipaddr+0x90>)
 8005a30:	f008 ff6c 	bl	800e90c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d106      	bne.n	8005a48 <netif_do_set_ipaddr+0x34>
 8005a3a:	4b18      	ldr	r3, [pc, #96]	; (8005a9c <netif_do_set_ipaddr+0x88>)
 8005a3c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005a40:	4917      	ldr	r1, [pc, #92]	; (8005aa0 <netif_do_set_ipaddr+0x8c>)
 8005a42:	4818      	ldr	r0, [pc, #96]	; (8005aa4 <netif_do_set_ipaddr+0x90>)
 8005a44:	f008 ff62 	bl	800e90c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d01c      	beq.n	8005a90 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005a66:	f107 0314 	add.w	r3, r7, #20
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff ffbf 	bl	80059f0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <netif_do_set_ipaddr+0x6a>
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	e000      	b.n	8005a80 <netif_do_set_ipaddr+0x6c>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005a84:	2101      	movs	r1, #1
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f8d2 	bl	8005c30 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e000      	b.n	8005a92 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	080100e8 	.word	0x080100e8
 8005aa0:	08010200 	.word	0x08010200
 8005aa4:	08010138 	.word	0x08010138

08005aa8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	3308      	adds	r3, #8
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d00a      	beq.n	8005ad8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <netif_do_set_netmask+0x26>
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	e000      	b.n	8005ad0 <netif_do_set_netmask+0x28>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e000      	b.n	8005ada <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b085      	sub	sp, #20
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	60f8      	str	r0, [r7, #12]
 8005aee:	60b9      	str	r1, [r7, #8]
 8005af0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	330c      	adds	r3, #12
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d00a      	beq.n	8005b16 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <netif_do_set_gw+0x26>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	e000      	b.n	8005b0e <netif_do_set_gw+0x28>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005b12:	2301      	movs	r3, #1
 8005b14:	e000      	b.n	8005b18 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b088      	sub	sp, #32
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
 8005b30:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005b40:	4b1c      	ldr	r3, [pc, #112]	; (8005bb4 <netif_set_addr+0x90>)
 8005b42:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005b4a:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <netif_set_addr+0x90>)
 8005b4c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005b54:	4b17      	ldr	r3, [pc, #92]	; (8005bb4 <netif_set_addr+0x90>)
 8005b56:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <netif_set_addr+0x42>
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <netif_set_addr+0x46>
 8005b66:	2301      	movs	r3, #1
 8005b68:	e000      	b.n	8005b6c <netif_set_addr+0x48>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d006      	beq.n	8005b82 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005b74:	f107 0310 	add.w	r3, r7, #16
 8005b78:	461a      	mov	r2, r3
 8005b7a:	68b9      	ldr	r1, [r7, #8]
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f7ff ff49 	bl	8005a14 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	6879      	ldr	r1, [r7, #4]
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f7ff ff8e 	bl	8005aa8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	6839      	ldr	r1, [r7, #0]
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f7ff ffa8 	bl	8005ae6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d106      	bne.n	8005baa <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005b9c:	f107 0310 	add.w	r3, r7, #16
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	68b9      	ldr	r1, [r7, #8]
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f7ff ff35 	bl	8005a14 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005baa:	bf00      	nop
 8005bac:	3720      	adds	r7, #32
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	08012820 	.word	0x08012820

08005bb8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005bc0:	4a04      	ldr	r2, [pc, #16]	; (8005bd4 <netif_set_default+0x1c>)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	200082f8 	.word	0x200082f8

08005bd8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d107      	bne.n	8005bf6 <netif_set_up+0x1e>
 8005be6:	4b0f      	ldr	r3, [pc, #60]	; (8005c24 <netif_set_up+0x4c>)
 8005be8:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005bec:	490e      	ldr	r1, [pc, #56]	; (8005c28 <netif_set_up+0x50>)
 8005bee:	480f      	ldr	r0, [pc, #60]	; (8005c2c <netif_set_up+0x54>)
 8005bf0:	f008 fe8c 	bl	800e90c <iprintf>
 8005bf4:	e013      	b.n	8005c1e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10c      	bne.n	8005c1e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c0a:	f043 0301 	orr.w	r3, r3, #1
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005c16:	2103      	movs	r1, #3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f809 	bl	8005c30 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	080100e8 	.word	0x080100e8
 8005c28:	08010270 	.word	0x08010270
 8005c2c:	08010138 	.word	0x08010138

08005c30 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <netif_issue_reports+0x20>
 8005c42:	4b18      	ldr	r3, [pc, #96]	; (8005ca4 <netif_issue_reports+0x74>)
 8005c44:	f240 326d 	movw	r2, #877	; 0x36d
 8005c48:	4917      	ldr	r1, [pc, #92]	; (8005ca8 <netif_issue_reports+0x78>)
 8005c4a:	4818      	ldr	r0, [pc, #96]	; (8005cac <netif_issue_reports+0x7c>)
 8005c4c:	f008 fe5e 	bl	800e90c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c56:	f003 0304 	and.w	r3, r3, #4
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d01e      	beq.n	8005c9c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c64:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d017      	beq.n	8005c9c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005c6c:	78fb      	ldrb	r3, [r7, #3]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d013      	beq.n	8005c9e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00e      	beq.n	8005c9e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c86:	f003 0308 	and.w	r3, r3, #8
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d007      	beq.n	8005c9e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4619      	mov	r1, r3
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f007 fa49 	bl	800d12c <etharp_request>
 8005c9a:	e000      	b.n	8005c9e <netif_issue_reports+0x6e>
    return;
 8005c9c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	080100e8 	.word	0x080100e8
 8005ca8:	0801028c 	.word	0x0801028c
 8005cac:	08010138 	.word	0x08010138

08005cb0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d107      	bne.n	8005cce <netif_set_down+0x1e>
 8005cbe:	4b12      	ldr	r3, [pc, #72]	; (8005d08 <netif_set_down+0x58>)
 8005cc0:	f240 329b 	movw	r2, #923	; 0x39b
 8005cc4:	4911      	ldr	r1, [pc, #68]	; (8005d0c <netif_set_down+0x5c>)
 8005cc6:	4812      	ldr	r0, [pc, #72]	; (8005d10 <netif_set_down+0x60>)
 8005cc8:	f008 fe20 	bl	800e90c <iprintf>
 8005ccc:	e019      	b.n	8005d02 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d012      	beq.n	8005d02 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005ce2:	f023 0301 	bic.w	r3, r3, #1
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f006 fdd3 	bl	800c8a8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	080100e8 	.word	0x080100e8
 8005d0c:	080102b0 	.word	0x080102b0
 8005d10:	08010138 	.word	0x08010138

08005d14 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d107      	bne.n	8005d32 <netif_set_link_up+0x1e>
 8005d22:	4b13      	ldr	r3, [pc, #76]	; (8005d70 <netif_set_link_up+0x5c>)
 8005d24:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8005d28:	4912      	ldr	r1, [pc, #72]	; (8005d74 <netif_set_link_up+0x60>)
 8005d2a:	4813      	ldr	r0, [pc, #76]	; (8005d78 <netif_set_link_up+0x64>)
 8005d2c:	f008 fdee 	bl	800e90c <iprintf>
 8005d30:	e01b      	b.n	8005d6a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005d38:	f003 0304 	and.w	r3, r3, #4
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d114      	bne.n	8005d6a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005d46:	f043 0304 	orr.w	r3, r3, #4
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005d52:	2103      	movs	r1, #3
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7ff ff6b 	bl	8005c30 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <netif_set_link_up+0x56>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	080100e8 	.word	0x080100e8
 8005d74:	080102d0 	.word	0x080102d0
 8005d78:	08010138 	.word	0x08010138

08005d7c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d107      	bne.n	8005d9a <netif_set_link_down+0x1e>
 8005d8a:	4b11      	ldr	r3, [pc, #68]	; (8005dd0 <netif_set_link_down+0x54>)
 8005d8c:	f240 4206 	movw	r2, #1030	; 0x406
 8005d90:	4910      	ldr	r1, [pc, #64]	; (8005dd4 <netif_set_link_down+0x58>)
 8005d92:	4811      	ldr	r0, [pc, #68]	; (8005dd8 <netif_set_link_down+0x5c>)
 8005d94:	f008 fdba 	bl	800e90c <iprintf>
 8005d98:	e017      	b.n	8005dca <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d010      	beq.n	8005dca <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005dae:	f023 0304 	bic.w	r3, r3, #4
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <netif_set_link_down+0x4e>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	080100e8 	.word	0x080100e8
 8005dd4:	080102f4 	.word	0x080102f4
 8005dd8:	08010138 	.word	0x08010138

08005ddc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	61da      	str	r2, [r3, #28]
  }
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b085      	sub	sp, #20
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	60f8      	str	r0, [r7, #12]
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005e0a:	f06f 030b 	mvn.w	r3, #11
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
	...

08005e1c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	4603      	mov	r3, r0
 8005e24:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005e26:	79fb      	ldrb	r3, [r7, #7]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d013      	beq.n	8005e54 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005e2c:	4b0d      	ldr	r3, [pc, #52]	; (8005e64 <netif_get_by_index+0x48>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	e00c      	b.n	8005e4e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	79fa      	ldrb	r2, [r7, #7]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d101      	bne.n	8005e48 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	e006      	b.n	8005e56 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1ef      	bne.n	8005e34 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	200082f4 	.word	0x200082f4

08005e68 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005e6e:	4b0c      	ldr	r3, [pc, #48]	; (8005ea0 <pbuf_free_ooseq+0x38>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005e74:	4b0b      	ldr	r3, [pc, #44]	; (8005ea4 <pbuf_free_ooseq+0x3c>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	607b      	str	r3, [r7, #4]
 8005e7a:	e00a      	b.n	8005e92 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f002 f93d 	bl	8008104 <tcp_free_ooseq>
      return;
 8005e8a:	e005      	b.n	8005e98 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	607b      	str	r3, [r7, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1f1      	bne.n	8005e7c <pbuf_free_ooseq+0x14>
    }
  }
}
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	200082fd 	.word	0x200082fd
 8005ea4:	2000830c 	.word	0x2000830c

08005ea8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005eac:	4b03      	ldr	r3, [pc, #12]	; (8005ebc <pbuf_pool_is_empty+0x14>)
 8005eae:	2201      	movs	r2, #1
 8005eb0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005eb2:	bf00      	nop
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	200082fd 	.word	0x200082fd

08005ec0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	4611      	mov	r1, r2
 8005ecc:	461a      	mov	r2, r3
 8005ece:	460b      	mov	r3, r1
 8005ed0:	80fb      	strh	r3, [r7, #6]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	88fa      	ldrh	r2, [r7, #6]
 8005ee6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	88ba      	ldrh	r2, [r7, #4]
 8005eec:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005eee:	8b3b      	ldrh	r3, [r7, #24]
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	7f3a      	ldrb	r2, [r7, #28]
 8005efa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2201      	movs	r2, #1
 8005f00:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	73da      	strb	r2, [r3, #15]
}
 8005f08:	bf00      	nop
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08c      	sub	sp, #48	; 0x30
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	71fb      	strb	r3, [r7, #7]
 8005f1e:	460b      	mov	r3, r1
 8005f20:	80bb      	strh	r3, [r7, #4]
 8005f22:	4613      	mov	r3, r2
 8005f24:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005f26:	79fb      	ldrb	r3, [r7, #7]
 8005f28:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005f2a:	887b      	ldrh	r3, [r7, #2]
 8005f2c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005f30:	d07f      	beq.n	8006032 <pbuf_alloc+0x11e>
 8005f32:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005f36:	f300 80c8 	bgt.w	80060ca <pbuf_alloc+0x1b6>
 8005f3a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005f3e:	d010      	beq.n	8005f62 <pbuf_alloc+0x4e>
 8005f40:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005f44:	f300 80c1 	bgt.w	80060ca <pbuf_alloc+0x1b6>
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d002      	beq.n	8005f52 <pbuf_alloc+0x3e>
 8005f4c:	2b41      	cmp	r3, #65	; 0x41
 8005f4e:	f040 80bc 	bne.w	80060ca <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005f52:	887a      	ldrh	r2, [r7, #2]
 8005f54:	88bb      	ldrh	r3, [r7, #4]
 8005f56:	4619      	mov	r1, r3
 8005f58:	2000      	movs	r0, #0
 8005f5a:	f000 f8d1 	bl	8006100 <pbuf_alloc_reference>
 8005f5e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005f60:	e0bd      	b.n	80060de <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005f66:	2300      	movs	r3, #0
 8005f68:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005f6a:	88bb      	ldrh	r3, [r7, #4]
 8005f6c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005f6e:	2008      	movs	r0, #8
 8005f70:	f7ff fbce 	bl	8005710 <memp_malloc>
 8005f74:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d109      	bne.n	8005f90 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005f7c:	f7ff ff94 	bl	8005ea8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <pbuf_alloc+0x78>
            pbuf_free(p);
 8005f86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f88:	f000 faa8 	bl	80064dc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	e0a7      	b.n	80060e0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005f90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f92:	3303      	adds	r3, #3
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	f023 0303 	bic.w	r3, r3, #3
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	8b7a      	ldrh	r2, [r7, #26]
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	bf28      	it	cs
 8005fa8:	4613      	movcs	r3, r2
 8005faa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005fac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005fae:	3310      	adds	r3, #16
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	3303      	adds	r3, #3
 8005fb6:	f023 0303 	bic.w	r3, r3, #3
 8005fba:	4618      	mov	r0, r3
 8005fbc:	89f9      	ldrh	r1, [r7, #14]
 8005fbe:	8b7a      	ldrh	r2, [r7, #26]
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	9301      	str	r3, [sp, #4]
 8005fc4:	887b      	ldrh	r3, [r7, #2]
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4601      	mov	r1, r0
 8005fcc:	6938      	ldr	r0, [r7, #16]
 8005fce:	f7ff ff77 	bl	8005ec0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d006      	beq.n	8005fec <pbuf_alloc+0xd8>
 8005fde:	4b42      	ldr	r3, [pc, #264]	; (80060e8 <pbuf_alloc+0x1d4>)
 8005fe0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fe4:	4941      	ldr	r1, [pc, #260]	; (80060ec <pbuf_alloc+0x1d8>)
 8005fe6:	4842      	ldr	r0, [pc, #264]	; (80060f0 <pbuf_alloc+0x1dc>)
 8005fe8:	f008 fc90 	bl	800e90c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005fec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005fee:	3303      	adds	r3, #3
 8005ff0:	f023 0303 	bic.w	r3, r3, #3
 8005ff4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005ff8:	d106      	bne.n	8006008 <pbuf_alloc+0xf4>
 8005ffa:	4b3b      	ldr	r3, [pc, #236]	; (80060e8 <pbuf_alloc+0x1d4>)
 8005ffc:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006000:	493c      	ldr	r1, [pc, #240]	; (80060f4 <pbuf_alloc+0x1e0>)
 8006002:	483b      	ldr	r0, [pc, #236]	; (80060f0 <pbuf_alloc+0x1dc>)
 8006004:	f008 fc82 	bl	800e90c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	2b00      	cmp	r3, #0
 800600c:	d102      	bne.n	8006014 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	627b      	str	r3, [r7, #36]	; 0x24
 8006012:	e002      	b.n	800601a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800601e:	8b7a      	ldrh	r2, [r7, #26]
 8006020:	89fb      	ldrh	r3, [r7, #14]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800602a:	8b7b      	ldrh	r3, [r7, #26]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d19e      	bne.n	8005f6e <pbuf_alloc+0x5a>
      break;
 8006030:	e055      	b.n	80060de <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006032:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006034:	3303      	adds	r3, #3
 8006036:	b29b      	uxth	r3, r3
 8006038:	f023 0303 	bic.w	r3, r3, #3
 800603c:	b29a      	uxth	r2, r3
 800603e:	88bb      	ldrh	r3, [r7, #4]
 8006040:	3303      	adds	r3, #3
 8006042:	b29b      	uxth	r3, r3
 8006044:	f023 0303 	bic.w	r3, r3, #3
 8006048:	b29b      	uxth	r3, r3
 800604a:	4413      	add	r3, r2
 800604c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800604e:	8b3b      	ldrh	r3, [r7, #24]
 8006050:	3310      	adds	r3, #16
 8006052:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006054:	8b3a      	ldrh	r2, [r7, #24]
 8006056:	88bb      	ldrh	r3, [r7, #4]
 8006058:	3303      	adds	r3, #3
 800605a:	f023 0303 	bic.w	r3, r3, #3
 800605e:	429a      	cmp	r2, r3
 8006060:	d306      	bcc.n	8006070 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006062:	8afa      	ldrh	r2, [r7, #22]
 8006064:	88bb      	ldrh	r3, [r7, #4]
 8006066:	3303      	adds	r3, #3
 8006068:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800606c:	429a      	cmp	r2, r3
 800606e:	d201      	bcs.n	8006074 <pbuf_alloc+0x160>
        return NULL;
 8006070:	2300      	movs	r3, #0
 8006072:	e035      	b.n	80060e0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006074:	8afb      	ldrh	r3, [r7, #22]
 8006076:	4618      	mov	r0, r3
 8006078:	f7ff f9ba 	bl	80053f0 <mem_malloc>
 800607c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <pbuf_alloc+0x174>
        return NULL;
 8006084:	2300      	movs	r3, #0
 8006086:	e02b      	b.n	80060e0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006088:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800608a:	3310      	adds	r3, #16
 800608c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800608e:	4413      	add	r3, r2
 8006090:	3303      	adds	r3, #3
 8006092:	f023 0303 	bic.w	r3, r3, #3
 8006096:	4618      	mov	r0, r3
 8006098:	88b9      	ldrh	r1, [r7, #4]
 800609a:	88ba      	ldrh	r2, [r7, #4]
 800609c:	2300      	movs	r3, #0
 800609e:	9301      	str	r3, [sp, #4]
 80060a0:	887b      	ldrh	r3, [r7, #2]
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	460b      	mov	r3, r1
 80060a6:	4601      	mov	r1, r0
 80060a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060aa:	f7ff ff09 	bl	8005ec0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f003 0303 	and.w	r3, r3, #3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d010      	beq.n	80060dc <pbuf_alloc+0x1c8>
 80060ba:	4b0b      	ldr	r3, [pc, #44]	; (80060e8 <pbuf_alloc+0x1d4>)
 80060bc:	f44f 7291 	mov.w	r2, #290	; 0x122
 80060c0:	490d      	ldr	r1, [pc, #52]	; (80060f8 <pbuf_alloc+0x1e4>)
 80060c2:	480b      	ldr	r0, [pc, #44]	; (80060f0 <pbuf_alloc+0x1dc>)
 80060c4:	f008 fc22 	bl	800e90c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80060c8:	e008      	b.n	80060dc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80060ca:	4b07      	ldr	r3, [pc, #28]	; (80060e8 <pbuf_alloc+0x1d4>)
 80060cc:	f240 1227 	movw	r2, #295	; 0x127
 80060d0:	490a      	ldr	r1, [pc, #40]	; (80060fc <pbuf_alloc+0x1e8>)
 80060d2:	4807      	ldr	r0, [pc, #28]	; (80060f0 <pbuf_alloc+0x1dc>)
 80060d4:	f008 fc1a 	bl	800e90c <iprintf>
      return NULL;
 80060d8:	2300      	movs	r3, #0
 80060da:	e001      	b.n	80060e0 <pbuf_alloc+0x1cc>
      break;
 80060dc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3728      	adds	r7, #40	; 0x28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	08010318 	.word	0x08010318
 80060ec:	08010348 	.word	0x08010348
 80060f0:	08010378 	.word	0x08010378
 80060f4:	080103a0 	.word	0x080103a0
 80060f8:	080103d4 	.word	0x080103d4
 80060fc:	08010400 	.word	0x08010400

08006100 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af02      	add	r7, sp, #8
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	807b      	strh	r3, [r7, #2]
 800610c:	4613      	mov	r3, r2
 800610e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006110:	883b      	ldrh	r3, [r7, #0]
 8006112:	2b41      	cmp	r3, #65	; 0x41
 8006114:	d009      	beq.n	800612a <pbuf_alloc_reference+0x2a>
 8006116:	883b      	ldrh	r3, [r7, #0]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d006      	beq.n	800612a <pbuf_alloc_reference+0x2a>
 800611c:	4b0f      	ldr	r3, [pc, #60]	; (800615c <pbuf_alloc_reference+0x5c>)
 800611e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006122:	490f      	ldr	r1, [pc, #60]	; (8006160 <pbuf_alloc_reference+0x60>)
 8006124:	480f      	ldr	r0, [pc, #60]	; (8006164 <pbuf_alloc_reference+0x64>)
 8006126:	f008 fbf1 	bl	800e90c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800612a:	2007      	movs	r0, #7
 800612c:	f7ff faf0 	bl	8005710 <memp_malloc>
 8006130:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006138:	2300      	movs	r3, #0
 800613a:	e00b      	b.n	8006154 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800613c:	8879      	ldrh	r1, [r7, #2]
 800613e:	887a      	ldrh	r2, [r7, #2]
 8006140:	2300      	movs	r3, #0
 8006142:	9301      	str	r3, [sp, #4]
 8006144:	883b      	ldrh	r3, [r7, #0]
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	460b      	mov	r3, r1
 800614a:	6879      	ldr	r1, [r7, #4]
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f7ff feb7 	bl	8005ec0 <pbuf_init_alloced_pbuf>
  return p;
 8006152:	68fb      	ldr	r3, [r7, #12]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	08010318 	.word	0x08010318
 8006160:	0801041c 	.word	0x0801041c
 8006164:	08010378 	.word	0x08010378

08006168 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af02      	add	r7, sp, #8
 800616e:	607b      	str	r3, [r7, #4]
 8006170:	4603      	mov	r3, r0
 8006172:	73fb      	strb	r3, [r7, #15]
 8006174:	460b      	mov	r3, r1
 8006176:	81bb      	strh	r3, [r7, #12]
 8006178:	4613      	mov	r3, r2
 800617a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006180:	8a7b      	ldrh	r3, [r7, #18]
 8006182:	3303      	adds	r3, #3
 8006184:	f023 0203 	bic.w	r2, r3, #3
 8006188:	89bb      	ldrh	r3, [r7, #12]
 800618a:	441a      	add	r2, r3
 800618c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800618e:	429a      	cmp	r2, r3
 8006190:	d901      	bls.n	8006196 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006192:	2300      	movs	r3, #0
 8006194:	e018      	b.n	80061c8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d007      	beq.n	80061ac <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800619c:	8a7b      	ldrh	r3, [r7, #18]
 800619e:	3303      	adds	r3, #3
 80061a0:	f023 0303 	bic.w	r3, r3, #3
 80061a4:	6a3a      	ldr	r2, [r7, #32]
 80061a6:	4413      	add	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	e001      	b.n	80061b0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80061ac:	2300      	movs	r3, #0
 80061ae:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	89b9      	ldrh	r1, [r7, #12]
 80061b4:	89ba      	ldrh	r2, [r7, #12]
 80061b6:	2302      	movs	r3, #2
 80061b8:	9301      	str	r3, [sp, #4]
 80061ba:	897b      	ldrh	r3, [r7, #10]
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	460b      	mov	r3, r1
 80061c0:	6979      	ldr	r1, [r7, #20]
 80061c2:	f7ff fe7d 	bl	8005ec0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80061c6:	687b      	ldr	r3, [r7, #4]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d106      	bne.n	80061f0 <pbuf_realloc+0x20>
 80061e2:	4b3a      	ldr	r3, [pc, #232]	; (80062cc <pbuf_realloc+0xfc>)
 80061e4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80061e8:	4939      	ldr	r1, [pc, #228]	; (80062d0 <pbuf_realloc+0x100>)
 80061ea:	483a      	ldr	r0, [pc, #232]	; (80062d4 <pbuf_realloc+0x104>)
 80061ec:	f008 fb8e 	bl	800e90c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	891b      	ldrh	r3, [r3, #8]
 80061f4:	887a      	ldrh	r2, [r7, #2]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d263      	bcs.n	80062c2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	891a      	ldrh	r2, [r3, #8]
 80061fe:	887b      	ldrh	r3, [r7, #2]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006204:	887b      	ldrh	r3, [r7, #2]
 8006206:	817b      	strh	r3, [r7, #10]
  q = p;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800620c:	e018      	b.n	8006240 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	895b      	ldrh	r3, [r3, #10]
 8006212:	897a      	ldrh	r2, [r7, #10]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	891a      	ldrh	r2, [r3, #8]
 800621c:	893b      	ldrh	r3, [r7, #8]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	b29a      	uxth	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d106      	bne.n	8006240 <pbuf_realloc+0x70>
 8006232:	4b26      	ldr	r3, [pc, #152]	; (80062cc <pbuf_realloc+0xfc>)
 8006234:	f240 12af 	movw	r2, #431	; 0x1af
 8006238:	4927      	ldr	r1, [pc, #156]	; (80062d8 <pbuf_realloc+0x108>)
 800623a:	4826      	ldr	r0, [pc, #152]	; (80062d4 <pbuf_realloc+0x104>)
 800623c:	f008 fb66 	bl	800e90c <iprintf>
  while (rem_len > q->len) {
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	895b      	ldrh	r3, [r3, #10]
 8006244:	897a      	ldrh	r2, [r7, #10]
 8006246:	429a      	cmp	r2, r3
 8006248:	d8e1      	bhi.n	800620e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	7b1b      	ldrb	r3, [r3, #12]
 800624e:	f003 030f 	and.w	r3, r3, #15
 8006252:	2b00      	cmp	r3, #0
 8006254:	d121      	bne.n	800629a <pbuf_realloc+0xca>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	895b      	ldrh	r3, [r3, #10]
 800625a:	897a      	ldrh	r2, [r7, #10]
 800625c:	429a      	cmp	r2, r3
 800625e:	d01c      	beq.n	800629a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	7b5b      	ldrb	r3, [r3, #13]
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d116      	bne.n	800629a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	b29a      	uxth	r2, r3
 8006276:	897b      	ldrh	r3, [r7, #10]
 8006278:	4413      	add	r3, r2
 800627a:	b29b      	uxth	r3, r3
 800627c:	4619      	mov	r1, r3
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f7fe ffba 	bl	80051f8 <mem_trim>
 8006284:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d106      	bne.n	800629a <pbuf_realloc+0xca>
 800628c:	4b0f      	ldr	r3, [pc, #60]	; (80062cc <pbuf_realloc+0xfc>)
 800628e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006292:	4912      	ldr	r1, [pc, #72]	; (80062dc <pbuf_realloc+0x10c>)
 8006294:	480f      	ldr	r0, [pc, #60]	; (80062d4 <pbuf_realloc+0x104>)
 8006296:	f008 fb39 	bl	800e90c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	897a      	ldrh	r2, [r7, #10]
 800629e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	895a      	ldrh	r2, [r3, #10]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d004      	beq.n	80062ba <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 f911 	bl	80064dc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	e000      	b.n	80062c4 <pbuf_realloc+0xf4>
    return;
 80062c2:	bf00      	nop

}
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	08010318 	.word	0x08010318
 80062d0:	08010430 	.word	0x08010430
 80062d4:	08010378 	.word	0x08010378
 80062d8:	08010448 	.word	0x08010448
 80062dc:	08010460 	.word	0x08010460

080062e0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	4613      	mov	r3, r2
 80062ec:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d106      	bne.n	8006302 <pbuf_add_header_impl+0x22>
 80062f4:	4b2b      	ldr	r3, [pc, #172]	; (80063a4 <pbuf_add_header_impl+0xc4>)
 80062f6:	f240 12df 	movw	r2, #479	; 0x1df
 80062fa:	492b      	ldr	r1, [pc, #172]	; (80063a8 <pbuf_add_header_impl+0xc8>)
 80062fc:	482b      	ldr	r0, [pc, #172]	; (80063ac <pbuf_add_header_impl+0xcc>)
 80062fe:	f008 fb05 	bl	800e90c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <pbuf_add_header_impl+0x30>
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800630e:	d301      	bcc.n	8006314 <pbuf_add_header_impl+0x34>
    return 1;
 8006310:	2301      	movs	r3, #1
 8006312:	e043      	b.n	800639c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <pbuf_add_header_impl+0x3e>
    return 0;
 800631a:	2300      	movs	r3, #0
 800631c:	e03e      	b.n	800639c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	891a      	ldrh	r2, [r3, #8]
 8006326:	8a7b      	ldrh	r3, [r7, #18]
 8006328:	4413      	add	r3, r2
 800632a:	b29b      	uxth	r3, r3
 800632c:	8a7a      	ldrh	r2, [r7, #18]
 800632e:	429a      	cmp	r2, r3
 8006330:	d901      	bls.n	8006336 <pbuf_add_header_impl+0x56>
    return 1;
 8006332:	2301      	movs	r3, #1
 8006334:	e032      	b.n	800639c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	7b1b      	ldrb	r3, [r3, #12]
 800633a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800633c:	8a3b      	ldrh	r3, [r7, #16]
 800633e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00c      	beq.n	8006360 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	425b      	negs	r3, r3
 800634e:	4413      	add	r3, r2
 8006350:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3310      	adds	r3, #16
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	429a      	cmp	r2, r3
 800635a:	d20d      	bcs.n	8006378 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800635c:	2301      	movs	r3, #1
 800635e:	e01d      	b.n	800639c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006360:	79fb      	ldrb	r3, [r7, #7]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d006      	beq.n	8006374 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	425b      	negs	r3, r3
 800636e:	4413      	add	r3, r2
 8006370:	617b      	str	r3, [r7, #20]
 8006372:	e001      	b.n	8006378 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006374:	2301      	movs	r3, #1
 8006376:	e011      	b.n	800639c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	895a      	ldrh	r2, [r3, #10]
 8006382:	8a7b      	ldrh	r3, [r7, #18]
 8006384:	4413      	add	r3, r2
 8006386:	b29a      	uxth	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	891a      	ldrh	r2, [r3, #8]
 8006390:	8a7b      	ldrh	r3, [r7, #18]
 8006392:	4413      	add	r3, r2
 8006394:	b29a      	uxth	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	811a      	strh	r2, [r3, #8]


  return 0;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	08010318 	.word	0x08010318
 80063a8:	0801047c 	.word	0x0801047c
 80063ac:	08010378 	.word	0x08010378

080063b0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80063ba:	2200      	movs	r2, #0
 80063bc:	6839      	ldr	r1, [r7, #0]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff ff8e 	bl	80062e0 <pbuf_add_header_impl>
 80063c4:	4603      	mov	r3, r0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d106      	bne.n	80063ee <pbuf_remove_header+0x1e>
 80063e0:	4b20      	ldr	r3, [pc, #128]	; (8006464 <pbuf_remove_header+0x94>)
 80063e2:	f240 224b 	movw	r2, #587	; 0x24b
 80063e6:	4920      	ldr	r1, [pc, #128]	; (8006468 <pbuf_remove_header+0x98>)
 80063e8:	4820      	ldr	r0, [pc, #128]	; (800646c <pbuf_remove_header+0x9c>)
 80063ea:	f008 fa8f 	bl	800e90c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <pbuf_remove_header+0x2c>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063fa:	d301      	bcc.n	8006400 <pbuf_remove_header+0x30>
    return 1;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e02c      	b.n	800645a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <pbuf_remove_header+0x3a>
    return 0;
 8006406:	2300      	movs	r3, #0
 8006408:	e027      	b.n	800645a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	895b      	ldrh	r3, [r3, #10]
 8006412:	89fa      	ldrh	r2, [r7, #14]
 8006414:	429a      	cmp	r2, r3
 8006416:	d908      	bls.n	800642a <pbuf_remove_header+0x5a>
 8006418:	4b12      	ldr	r3, [pc, #72]	; (8006464 <pbuf_remove_header+0x94>)
 800641a:	f240 2255 	movw	r2, #597	; 0x255
 800641e:	4914      	ldr	r1, [pc, #80]	; (8006470 <pbuf_remove_header+0xa0>)
 8006420:	4812      	ldr	r0, [pc, #72]	; (800646c <pbuf_remove_header+0x9c>)
 8006422:	f008 fa73 	bl	800e90c <iprintf>
 8006426:	2301      	movs	r3, #1
 8006428:	e017      	b.n	800645a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	441a      	add	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	895a      	ldrh	r2, [r3, #10]
 8006440:	89fb      	ldrh	r3, [r7, #14]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	b29a      	uxth	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	891a      	ldrh	r2, [r3, #8]
 800644e:	89fb      	ldrh	r3, [r7, #14]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	b29a      	uxth	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	08010318 	.word	0x08010318
 8006468:	0801047c 	.word	0x0801047c
 800646c:	08010378 	.word	0x08010378
 8006470:	08010488 	.word	0x08010488

08006474 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	460b      	mov	r3, r1
 800647e:	807b      	strh	r3, [r7, #2]
 8006480:	4613      	mov	r3, r2
 8006482:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006484:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006488:	2b00      	cmp	r3, #0
 800648a:	da08      	bge.n	800649e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800648c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006490:	425b      	negs	r3, r3
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff ff9b 	bl	80063d0 <pbuf_remove_header>
 800649a:	4603      	mov	r3, r0
 800649c:	e007      	b.n	80064ae <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800649e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80064a2:	787a      	ldrb	r2, [r7, #1]
 80064a4:	4619      	mov	r1, r3
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7ff ff1a 	bl	80062e0 <pbuf_add_header_impl>
 80064ac:	4603      	mov	r3, r0
  }
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b082      	sub	sp, #8
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	460b      	mov	r3, r1
 80064c0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80064c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80064c6:	2201      	movs	r2, #1
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7ff ffd2 	bl	8006474 <pbuf_header_impl>
 80064d0:	4603      	mov	r3, r0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
	...

080064dc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10b      	bne.n	8006502 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d106      	bne.n	80064fe <pbuf_free+0x22>
 80064f0:	4b38      	ldr	r3, [pc, #224]	; (80065d4 <pbuf_free+0xf8>)
 80064f2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80064f6:	4938      	ldr	r1, [pc, #224]	; (80065d8 <pbuf_free+0xfc>)
 80064f8:	4838      	ldr	r0, [pc, #224]	; (80065dc <pbuf_free+0x100>)
 80064fa:	f008 fa07 	bl	800e90c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80064fe:	2300      	movs	r3, #0
 8006500:	e063      	b.n	80065ca <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006506:	e05c      	b.n	80065c2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	7b9b      	ldrb	r3, [r3, #14]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d106      	bne.n	800651e <pbuf_free+0x42>
 8006510:	4b30      	ldr	r3, [pc, #192]	; (80065d4 <pbuf_free+0xf8>)
 8006512:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006516:	4932      	ldr	r1, [pc, #200]	; (80065e0 <pbuf_free+0x104>)
 8006518:	4830      	ldr	r0, [pc, #192]	; (80065dc <pbuf_free+0x100>)
 800651a:	f008 f9f7 	bl	800e90c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	7b9b      	ldrb	r3, [r3, #14]
 8006522:	3b01      	subs	r3, #1
 8006524:	b2da      	uxtb	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	739a      	strb	r2, [r3, #14]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	7b9b      	ldrb	r3, [r3, #14]
 800652e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006530:	7dbb      	ldrb	r3, [r7, #22]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d143      	bne.n	80065be <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	7b1b      	ldrb	r3, [r3, #12]
 8006540:	f003 030f 	and.w	r3, r3, #15
 8006544:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	7b5b      	ldrb	r3, [r3, #13]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d011      	beq.n	8006576 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d106      	bne.n	800656c <pbuf_free+0x90>
 800655e:	4b1d      	ldr	r3, [pc, #116]	; (80065d4 <pbuf_free+0xf8>)
 8006560:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006564:	491f      	ldr	r1, [pc, #124]	; (80065e4 <pbuf_free+0x108>)
 8006566:	481d      	ldr	r0, [pc, #116]	; (80065dc <pbuf_free+0x100>)
 8006568:	f008 f9d0 	bl	800e90c <iprintf>
        pc->custom_free_function(p);
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	4798      	blx	r3
 8006574:	e01d      	b.n	80065b2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006576:	7bfb      	ldrb	r3, [r7, #15]
 8006578:	2b02      	cmp	r3, #2
 800657a:	d104      	bne.n	8006586 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800657c:	6879      	ldr	r1, [r7, #4]
 800657e:	2008      	movs	r0, #8
 8006580:	f7ff f936 	bl	80057f0 <memp_free>
 8006584:	e015      	b.n	80065b2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006586:	7bfb      	ldrb	r3, [r7, #15]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d104      	bne.n	8006596 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800658c:	6879      	ldr	r1, [r7, #4]
 800658e:	2007      	movs	r0, #7
 8006590:	f7ff f92e 	bl	80057f0 <memp_free>
 8006594:	e00d      	b.n	80065b2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d103      	bne.n	80065a4 <pbuf_free+0xc8>
          mem_free(p);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f7fe fdc1 	bl	8005124 <mem_free>
 80065a2:	e006      	b.n	80065b2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80065a4:	4b0b      	ldr	r3, [pc, #44]	; (80065d4 <pbuf_free+0xf8>)
 80065a6:	f240 320f 	movw	r2, #783	; 0x30f
 80065aa:	490f      	ldr	r1, [pc, #60]	; (80065e8 <pbuf_free+0x10c>)
 80065ac:	480b      	ldr	r0, [pc, #44]	; (80065dc <pbuf_free+0x100>)
 80065ae:	f008 f9ad 	bl	800e90c <iprintf>
        }
      }
      count++;
 80065b2:	7dfb      	ldrb	r3, [r7, #23]
 80065b4:	3301      	adds	r3, #1
 80065b6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	607b      	str	r3, [r7, #4]
 80065bc:	e001      	b.n	80065c2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80065be:	2300      	movs	r3, #0
 80065c0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d19f      	bne.n	8006508 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80065c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3718      	adds	r7, #24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	08010318 	.word	0x08010318
 80065d8:	0801047c 	.word	0x0801047c
 80065dc:	08010378 	.word	0x08010378
 80065e0:	080104a8 	.word	0x080104a8
 80065e4:	080104c0 	.word	0x080104c0
 80065e8:	080104e4 	.word	0x080104e4

080065ec <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80065f4:	2300      	movs	r3, #0
 80065f6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80065f8:	e005      	b.n	8006606 <pbuf_clen+0x1a>
    ++len;
 80065fa:	89fb      	ldrh	r3, [r7, #14]
 80065fc:	3301      	adds	r3, #1
 80065fe:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1f6      	bne.n	80065fa <pbuf_clen+0xe>
  }
  return len;
 800660c:	89fb      	ldrh	r3, [r7, #14]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
	...

0800661c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d010      	beq.n	800664c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	7b9b      	ldrb	r3, [r3, #14]
 800662e:	3301      	adds	r3, #1
 8006630:	b2da      	uxtb	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	7b9b      	ldrb	r3, [r3, #14]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d106      	bne.n	800664c <pbuf_ref+0x30>
 800663e:	4b05      	ldr	r3, [pc, #20]	; (8006654 <pbuf_ref+0x38>)
 8006640:	f240 3242 	movw	r2, #834	; 0x342
 8006644:	4904      	ldr	r1, [pc, #16]	; (8006658 <pbuf_ref+0x3c>)
 8006646:	4805      	ldr	r0, [pc, #20]	; (800665c <pbuf_ref+0x40>)
 8006648:	f008 f960 	bl	800e90c <iprintf>
  }
}
 800664c:	bf00      	nop
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	08010318 	.word	0x08010318
 8006658:	080104f8 	.word	0x080104f8
 800665c:	08010378 	.word	0x08010378

08006660 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <pbuf_cat+0x16>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d107      	bne.n	8006686 <pbuf_cat+0x26>
 8006676:	4b20      	ldr	r3, [pc, #128]	; (80066f8 <pbuf_cat+0x98>)
 8006678:	f240 3259 	movw	r2, #857	; 0x359
 800667c:	491f      	ldr	r1, [pc, #124]	; (80066fc <pbuf_cat+0x9c>)
 800667e:	4820      	ldr	r0, [pc, #128]	; (8006700 <pbuf_cat+0xa0>)
 8006680:	f008 f944 	bl	800e90c <iprintf>
 8006684:	e034      	b.n	80066f0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	60fb      	str	r3, [r7, #12]
 800668a:	e00a      	b.n	80066a2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	891a      	ldrh	r2, [r3, #8]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	891b      	ldrh	r3, [r3, #8]
 8006694:	4413      	add	r3, r2
 8006696:	b29a      	uxth	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1f0      	bne.n	800668c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	891a      	ldrh	r2, [r3, #8]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	895b      	ldrh	r3, [r3, #10]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d006      	beq.n	80066c4 <pbuf_cat+0x64>
 80066b6:	4b10      	ldr	r3, [pc, #64]	; (80066f8 <pbuf_cat+0x98>)
 80066b8:	f240 3262 	movw	r2, #866	; 0x362
 80066bc:	4911      	ldr	r1, [pc, #68]	; (8006704 <pbuf_cat+0xa4>)
 80066be:	4810      	ldr	r0, [pc, #64]	; (8006700 <pbuf_cat+0xa0>)
 80066c0:	f008 f924 	bl	800e90c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d006      	beq.n	80066da <pbuf_cat+0x7a>
 80066cc:	4b0a      	ldr	r3, [pc, #40]	; (80066f8 <pbuf_cat+0x98>)
 80066ce:	f240 3263 	movw	r2, #867	; 0x363
 80066d2:	490d      	ldr	r1, [pc, #52]	; (8006708 <pbuf_cat+0xa8>)
 80066d4:	480a      	ldr	r0, [pc, #40]	; (8006700 <pbuf_cat+0xa0>)
 80066d6:	f008 f919 	bl	800e90c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	891a      	ldrh	r2, [r3, #8]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	891b      	ldrh	r3, [r3, #8]
 80066e2:	4413      	add	r3, r2
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	08010318 	.word	0x08010318
 80066fc:	0801050c 	.word	0x0801050c
 8006700:	08010378 	.word	0x08010378
 8006704:	08010544 	.word	0x08010544
 8006708:	08010574 	.word	0x08010574

0800670c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006716:	2300      	movs	r3, #0
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	2300      	movs	r3, #0
 800671c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d008      	beq.n	8006736 <pbuf_copy+0x2a>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d005      	beq.n	8006736 <pbuf_copy+0x2a>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	891a      	ldrh	r2, [r3, #8]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	891b      	ldrh	r3, [r3, #8]
 8006732:	429a      	cmp	r2, r3
 8006734:	d209      	bcs.n	800674a <pbuf_copy+0x3e>
 8006736:	4b57      	ldr	r3, [pc, #348]	; (8006894 <pbuf_copy+0x188>)
 8006738:	f240 32c9 	movw	r2, #969	; 0x3c9
 800673c:	4956      	ldr	r1, [pc, #344]	; (8006898 <pbuf_copy+0x18c>)
 800673e:	4857      	ldr	r0, [pc, #348]	; (800689c <pbuf_copy+0x190>)
 8006740:	f008 f8e4 	bl	800e90c <iprintf>
 8006744:	f06f 030f 	mvn.w	r3, #15
 8006748:	e09f      	b.n	800688a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	895b      	ldrh	r3, [r3, #10]
 800674e:	461a      	mov	r2, r3
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	1ad2      	subs	r2, r2, r3
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	895b      	ldrh	r3, [r3, #10]
 8006758:	4619      	mov	r1, r3
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	1acb      	subs	r3, r1, r3
 800675e:	429a      	cmp	r2, r3
 8006760:	d306      	bcc.n	8006770 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	895b      	ldrh	r3, [r3, #10]
 8006766:	461a      	mov	r2, r3
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	e005      	b.n	800677c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	895b      	ldrh	r3, [r3, #10]
 8006774:	461a      	mov	r2, r3
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	18d0      	adds	r0, r2, r3
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	4413      	add	r3, r2
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4619      	mov	r1, r3
 8006790:	f008 f88c 	bl	800e8ac <memcpy>
    offset_to += len;
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4413      	add	r3, r2
 800679a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4413      	add	r3, r2
 80067a2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	895b      	ldrh	r3, [r3, #10]
 80067a8:	461a      	mov	r2, r3
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d906      	bls.n	80067be <pbuf_copy+0xb2>
 80067b0:	4b38      	ldr	r3, [pc, #224]	; (8006894 <pbuf_copy+0x188>)
 80067b2:	f240 32d9 	movw	r2, #985	; 0x3d9
 80067b6:	493a      	ldr	r1, [pc, #232]	; (80068a0 <pbuf_copy+0x194>)
 80067b8:	4838      	ldr	r0, [pc, #224]	; (800689c <pbuf_copy+0x190>)
 80067ba:	f008 f8a7 	bl	800e90c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	895b      	ldrh	r3, [r3, #10]
 80067c2:	461a      	mov	r2, r3
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d906      	bls.n	80067d8 <pbuf_copy+0xcc>
 80067ca:	4b32      	ldr	r3, [pc, #200]	; (8006894 <pbuf_copy+0x188>)
 80067cc:	f240 32da 	movw	r2, #986	; 0x3da
 80067d0:	4934      	ldr	r1, [pc, #208]	; (80068a4 <pbuf_copy+0x198>)
 80067d2:	4832      	ldr	r0, [pc, #200]	; (800689c <pbuf_copy+0x190>)
 80067d4:	f008 f89a 	bl	800e90c <iprintf>
    if (offset_from >= p_from->len) {
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	895b      	ldrh	r3, [r3, #10]
 80067dc:	461a      	mov	r2, r3
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d304      	bcc.n	80067ee <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	895b      	ldrh	r3, [r3, #10]
 80067f2:	461a      	mov	r2, r3
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d114      	bne.n	8006824 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10c      	bne.n	8006824 <pbuf_copy+0x118>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d009      	beq.n	8006824 <pbuf_copy+0x118>
 8006810:	4b20      	ldr	r3, [pc, #128]	; (8006894 <pbuf_copy+0x188>)
 8006812:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006816:	4924      	ldr	r1, [pc, #144]	; (80068a8 <pbuf_copy+0x19c>)
 8006818:	4820      	ldr	r0, [pc, #128]	; (800689c <pbuf_copy+0x190>)
 800681a:	f008 f877 	bl	800e90c <iprintf>
 800681e:	f06f 030f 	mvn.w	r3, #15
 8006822:	e032      	b.n	800688a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d013      	beq.n	8006852 <pbuf_copy+0x146>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	895a      	ldrh	r2, [r3, #10]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	891b      	ldrh	r3, [r3, #8]
 8006832:	429a      	cmp	r2, r3
 8006834:	d10d      	bne.n	8006852 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d009      	beq.n	8006852 <pbuf_copy+0x146>
 800683e:	4b15      	ldr	r3, [pc, #84]	; (8006894 <pbuf_copy+0x188>)
 8006840:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006844:	4919      	ldr	r1, [pc, #100]	; (80068ac <pbuf_copy+0x1a0>)
 8006846:	4815      	ldr	r0, [pc, #84]	; (800689c <pbuf_copy+0x190>)
 8006848:	f008 f860 	bl	800e90c <iprintf>
 800684c:	f06f 0305 	mvn.w	r3, #5
 8006850:	e01b      	b.n	800688a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d013      	beq.n	8006880 <pbuf_copy+0x174>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	895a      	ldrh	r2, [r3, #10]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	891b      	ldrh	r3, [r3, #8]
 8006860:	429a      	cmp	r2, r3
 8006862:	d10d      	bne.n	8006880 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d009      	beq.n	8006880 <pbuf_copy+0x174>
 800686c:	4b09      	ldr	r3, [pc, #36]	; (8006894 <pbuf_copy+0x188>)
 800686e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006872:	490e      	ldr	r1, [pc, #56]	; (80068ac <pbuf_copy+0x1a0>)
 8006874:	4809      	ldr	r0, [pc, #36]	; (800689c <pbuf_copy+0x190>)
 8006876:	f008 f849 	bl	800e90c <iprintf>
 800687a:	f06f 0305 	mvn.w	r3, #5
 800687e:	e004      	b.n	800688a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	f47f af61 	bne.w	800674a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3718      	adds	r7, #24
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	08010318 	.word	0x08010318
 8006898:	080105c0 	.word	0x080105c0
 800689c:	08010378 	.word	0x08010378
 80068a0:	080105f0 	.word	0x080105f0
 80068a4:	08010608 	.word	0x08010608
 80068a8:	08010624 	.word	0x08010624
 80068ac:	08010634 	.word	0x08010634

080068b0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b088      	sub	sp, #32
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	4611      	mov	r1, r2
 80068bc:	461a      	mov	r2, r3
 80068be:	460b      	mov	r3, r1
 80068c0:	80fb      	strh	r3, [r7, #6]
 80068c2:	4613      	mov	r3, r2
 80068c4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80068ca:	2300      	movs	r3, #0
 80068cc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d108      	bne.n	80068e6 <pbuf_copy_partial+0x36>
 80068d4:	4b2b      	ldr	r3, [pc, #172]	; (8006984 <pbuf_copy_partial+0xd4>)
 80068d6:	f240 420a 	movw	r2, #1034	; 0x40a
 80068da:	492b      	ldr	r1, [pc, #172]	; (8006988 <pbuf_copy_partial+0xd8>)
 80068dc:	482b      	ldr	r0, [pc, #172]	; (800698c <pbuf_copy_partial+0xdc>)
 80068de:	f008 f815 	bl	800e90c <iprintf>
 80068e2:	2300      	movs	r3, #0
 80068e4:	e04a      	b.n	800697c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d108      	bne.n	80068fe <pbuf_copy_partial+0x4e>
 80068ec:	4b25      	ldr	r3, [pc, #148]	; (8006984 <pbuf_copy_partial+0xd4>)
 80068ee:	f240 420b 	movw	r2, #1035	; 0x40b
 80068f2:	4927      	ldr	r1, [pc, #156]	; (8006990 <pbuf_copy_partial+0xe0>)
 80068f4:	4825      	ldr	r0, [pc, #148]	; (800698c <pbuf_copy_partial+0xdc>)
 80068f6:	f008 f809 	bl	800e90c <iprintf>
 80068fa:	2300      	movs	r3, #0
 80068fc:	e03e      	b.n	800697c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	61fb      	str	r3, [r7, #28]
 8006902:	e034      	b.n	800696e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006904:	88bb      	ldrh	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <pbuf_copy_partial+0x70>
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	895b      	ldrh	r3, [r3, #10]
 800690e:	88ba      	ldrh	r2, [r7, #4]
 8006910:	429a      	cmp	r2, r3
 8006912:	d305      	bcc.n	8006920 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	895b      	ldrh	r3, [r3, #10]
 8006918:	88ba      	ldrh	r2, [r7, #4]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	80bb      	strh	r3, [r7, #4]
 800691e:	e023      	b.n	8006968 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	895a      	ldrh	r2, [r3, #10]
 8006924:	88bb      	ldrh	r3, [r7, #4]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800692a:	8b3a      	ldrh	r2, [r7, #24]
 800692c:	88fb      	ldrh	r3, [r7, #6]
 800692e:	429a      	cmp	r2, r3
 8006930:	d901      	bls.n	8006936 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006932:	88fb      	ldrh	r3, [r7, #6]
 8006934:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006936:	8b7b      	ldrh	r3, [r7, #26]
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	18d0      	adds	r0, r2, r3
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	88bb      	ldrh	r3, [r7, #4]
 8006942:	4413      	add	r3, r2
 8006944:	8b3a      	ldrh	r2, [r7, #24]
 8006946:	4619      	mov	r1, r3
 8006948:	f007 ffb0 	bl	800e8ac <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800694c:	8afa      	ldrh	r2, [r7, #22]
 800694e:	8b3b      	ldrh	r3, [r7, #24]
 8006950:	4413      	add	r3, r2
 8006952:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006954:	8b7a      	ldrh	r2, [r7, #26]
 8006956:	8b3b      	ldrh	r3, [r7, #24]
 8006958:	4413      	add	r3, r2
 800695a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800695c:	88fa      	ldrh	r2, [r7, #6]
 800695e:	8b3b      	ldrh	r3, [r7, #24]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006964:	2300      	movs	r3, #0
 8006966:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	61fb      	str	r3, [r7, #28]
 800696e:	88fb      	ldrh	r3, [r7, #6]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <pbuf_copy_partial+0xca>
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1c4      	bne.n	8006904 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800697a:	8afb      	ldrh	r3, [r7, #22]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3720      	adds	r7, #32
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	08010318 	.word	0x08010318
 8006988:	08010660 	.word	0x08010660
 800698c:	08010378 	.word	0x08010378
 8006990:	08010680 	.word	0x08010680

08006994 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	4603      	mov	r3, r0
 800699c:	603a      	str	r2, [r7, #0]
 800699e:	71fb      	strb	r3, [r7, #7]
 80069a0:	460b      	mov	r3, r1
 80069a2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	8919      	ldrh	r1, [r3, #8]
 80069a8:	88ba      	ldrh	r2, [r7, #4]
 80069aa:	79fb      	ldrb	r3, [r7, #7]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff fab1 	bl	8005f14 <pbuf_alloc>
 80069b2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <pbuf_clone+0x2a>
    return NULL;
 80069ba:	2300      	movs	r3, #0
 80069bc:	e011      	b.n	80069e2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f7ff fea3 	bl	800670c <pbuf_copy>
 80069c6:	4603      	mov	r3, r0
 80069c8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80069ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d006      	beq.n	80069e0 <pbuf_clone+0x4c>
 80069d2:	4b06      	ldr	r3, [pc, #24]	; (80069ec <pbuf_clone+0x58>)
 80069d4:	f240 5224 	movw	r2, #1316	; 0x524
 80069d8:	4905      	ldr	r1, [pc, #20]	; (80069f0 <pbuf_clone+0x5c>)
 80069da:	4806      	ldr	r0, [pc, #24]	; (80069f4 <pbuf_clone+0x60>)
 80069dc:	f007 ff96 	bl	800e90c <iprintf>
  return q;
 80069e0:	68fb      	ldr	r3, [r7, #12]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	08010318 	.word	0x08010318
 80069f0:	0801078c 	.word	0x0801078c
 80069f4:	08010378 	.word	0x08010378

080069f8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80069fc:	f007 ff9e 	bl	800e93c <rand>
 8006a00:	4603      	mov	r3, r0
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	4b01      	ldr	r3, [pc, #4]	; (8006a18 <tcp_init+0x20>)
 8006a12:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006a14:	bf00      	nop
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	20000050 	.word	0x20000050

08006a1c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	7d1b      	ldrb	r3, [r3, #20]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d105      	bne.n	8006a38 <tcp_free+0x1c>
 8006a2c:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <tcp_free+0x2c>)
 8006a2e:	22d4      	movs	r2, #212	; 0xd4
 8006a30:	4906      	ldr	r1, [pc, #24]	; (8006a4c <tcp_free+0x30>)
 8006a32:	4807      	ldr	r0, [pc, #28]	; (8006a50 <tcp_free+0x34>)
 8006a34:	f007 ff6a 	bl	800e90c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006a38:	6879      	ldr	r1, [r7, #4]
 8006a3a:	2001      	movs	r0, #1
 8006a3c:	f7fe fed8 	bl	80057f0 <memp_free>
}
 8006a40:	bf00      	nop
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	08010818 	.word	0x08010818
 8006a4c:	08010848 	.word	0x08010848
 8006a50:	0801085c 	.word	0x0801085c

08006a54 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	7d1b      	ldrb	r3, [r3, #20]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d105      	bne.n	8006a70 <tcp_free_listen+0x1c>
 8006a64:	4b06      	ldr	r3, [pc, #24]	; (8006a80 <tcp_free_listen+0x2c>)
 8006a66:	22df      	movs	r2, #223	; 0xdf
 8006a68:	4906      	ldr	r1, [pc, #24]	; (8006a84 <tcp_free_listen+0x30>)
 8006a6a:	4807      	ldr	r0, [pc, #28]	; (8006a88 <tcp_free_listen+0x34>)
 8006a6c:	f007 ff4e 	bl	800e90c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006a70:	6879      	ldr	r1, [r7, #4]
 8006a72:	2002      	movs	r0, #2
 8006a74:	f7fe febc 	bl	80057f0 <memp_free>
}
 8006a78:	bf00      	nop
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	08010818 	.word	0x08010818
 8006a84:	08010884 	.word	0x08010884
 8006a88:	0801085c 	.word	0x0801085c

08006a8c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006a90:	f000 fea2 	bl	80077d8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006a94:	4b07      	ldr	r3, [pc, #28]	; (8006ab4 <tcp_tmr+0x28>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <tcp_tmr+0x28>)
 8006a9e:	701a      	strb	r2, [r3, #0]
 8006aa0:	4b04      	ldr	r3, [pc, #16]	; (8006ab4 <tcp_tmr+0x28>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006aac:	f000 fb54 	bl	8007158 <tcp_slowtmr>
  }
}
 8006ab0:	bf00      	nop
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	20008315 	.word	0x20008315

08006ab8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d105      	bne.n	8006ad4 <tcp_remove_listener+0x1c>
 8006ac8:	4b0d      	ldr	r3, [pc, #52]	; (8006b00 <tcp_remove_listener+0x48>)
 8006aca:	22ff      	movs	r2, #255	; 0xff
 8006acc:	490d      	ldr	r1, [pc, #52]	; (8006b04 <tcp_remove_listener+0x4c>)
 8006ace:	480e      	ldr	r0, [pc, #56]	; (8006b08 <tcp_remove_listener+0x50>)
 8006ad0:	f007 ff1c 	bl	800e90c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	e00a      	b.n	8006af0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d102      	bne.n	8006aea <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1f1      	bne.n	8006ada <tcp_remove_listener+0x22>
    }
  }
}
 8006af6:	bf00      	nop
 8006af8:	bf00      	nop
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	08010818 	.word	0x08010818
 8006b04:	080108a0 	.word	0x080108a0
 8006b08:	0801085c 	.word	0x0801085c

08006b0c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d106      	bne.n	8006b28 <tcp_listen_closed+0x1c>
 8006b1a:	4b14      	ldr	r3, [pc, #80]	; (8006b6c <tcp_listen_closed+0x60>)
 8006b1c:	f240 1211 	movw	r2, #273	; 0x111
 8006b20:	4913      	ldr	r1, [pc, #76]	; (8006b70 <tcp_listen_closed+0x64>)
 8006b22:	4814      	ldr	r0, [pc, #80]	; (8006b74 <tcp_listen_closed+0x68>)
 8006b24:	f007 fef2 	bl	800e90c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	7d1b      	ldrb	r3, [r3, #20]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d006      	beq.n	8006b3e <tcp_listen_closed+0x32>
 8006b30:	4b0e      	ldr	r3, [pc, #56]	; (8006b6c <tcp_listen_closed+0x60>)
 8006b32:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006b36:	4910      	ldr	r1, [pc, #64]	; (8006b78 <tcp_listen_closed+0x6c>)
 8006b38:	480e      	ldr	r0, [pc, #56]	; (8006b74 <tcp_listen_closed+0x68>)
 8006b3a:	f007 fee7 	bl	800e90c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006b3e:	2301      	movs	r3, #1
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	e00b      	b.n	8006b5c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006b44:	4a0d      	ldr	r2, [pc, #52]	; (8006b7c <tcp_listen_closed+0x70>)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	6879      	ldr	r1, [r7, #4]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7ff ffb1 	bl	8006ab8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d9f0      	bls.n	8006b44 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006b62:	bf00      	nop
 8006b64:	bf00      	nop
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	08010818 	.word	0x08010818
 8006b70:	080108c8 	.word	0x080108c8
 8006b74:	0801085c 	.word	0x0801085c
 8006b78:	080108d4 	.word	0x080108d4
 8006b7c:	080127f8 	.word	0x080127f8

08006b80 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006b80:	b5b0      	push	{r4, r5, r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af04      	add	r7, sp, #16
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d106      	bne.n	8006ba0 <tcp_close_shutdown+0x20>
 8006b92:	4b63      	ldr	r3, [pc, #396]	; (8006d20 <tcp_close_shutdown+0x1a0>)
 8006b94:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006b98:	4962      	ldr	r1, [pc, #392]	; (8006d24 <tcp_close_shutdown+0x1a4>)
 8006b9a:	4863      	ldr	r0, [pc, #396]	; (8006d28 <tcp_close_shutdown+0x1a8>)
 8006b9c:	f007 feb6 	bl	800e90c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006ba0:	78fb      	ldrb	r3, [r7, #3]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d066      	beq.n	8006c74 <tcp_close_shutdown+0xf4>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	7d1b      	ldrb	r3, [r3, #20]
 8006baa:	2b04      	cmp	r3, #4
 8006bac:	d003      	beq.n	8006bb6 <tcp_close_shutdown+0x36>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	7d1b      	ldrb	r3, [r3, #20]
 8006bb2:	2b07      	cmp	r3, #7
 8006bb4:	d15e      	bne.n	8006c74 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d104      	bne.n	8006bc8 <tcp_close_shutdown+0x48>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006bc6:	d055      	beq.n	8006c74 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	8b5b      	ldrh	r3, [r3, #26]
 8006bcc:	f003 0310 	and.w	r3, r3, #16
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d106      	bne.n	8006be2 <tcp_close_shutdown+0x62>
 8006bd4:	4b52      	ldr	r3, [pc, #328]	; (8006d20 <tcp_close_shutdown+0x1a0>)
 8006bd6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006bda:	4954      	ldr	r1, [pc, #336]	; (8006d2c <tcp_close_shutdown+0x1ac>)
 8006bdc:	4852      	ldr	r0, [pc, #328]	; (8006d28 <tcp_close_shutdown+0x1a8>)
 8006bde:	f007 fe95 	bl	800e90c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006bea:	687d      	ldr	r5, [r7, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3304      	adds	r3, #4
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	8ad2      	ldrh	r2, [r2, #22]
 8006bf4:	6879      	ldr	r1, [r7, #4]
 8006bf6:	8b09      	ldrh	r1, [r1, #24]
 8006bf8:	9102      	str	r1, [sp, #8]
 8006bfa:	9201      	str	r2, [sp, #4]
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	462b      	mov	r3, r5
 8006c00:	4622      	mov	r2, r4
 8006c02:	4601      	mov	r1, r0
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f004 fe91 	bl	800b92c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f001 f8c6 	bl	8007d9c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006c10:	4b47      	ldr	r3, [pc, #284]	; (8006d30 <tcp_close_shutdown+0x1b0>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d105      	bne.n	8006c26 <tcp_close_shutdown+0xa6>
 8006c1a:	4b45      	ldr	r3, [pc, #276]	; (8006d30 <tcp_close_shutdown+0x1b0>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	4a43      	ldr	r2, [pc, #268]	; (8006d30 <tcp_close_shutdown+0x1b0>)
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	e013      	b.n	8006c4e <tcp_close_shutdown+0xce>
 8006c26:	4b42      	ldr	r3, [pc, #264]	; (8006d30 <tcp_close_shutdown+0x1b0>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	60fb      	str	r3, [r7, #12]
 8006c2c:	e00c      	b.n	8006c48 <tcp_close_shutdown+0xc8>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d104      	bne.n	8006c42 <tcp_close_shutdown+0xc2>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68da      	ldr	r2, [r3, #12]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	60da      	str	r2, [r3, #12]
 8006c40:	e005      	b.n	8006c4e <tcp_close_shutdown+0xce>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1ef      	bne.n	8006c2e <tcp_close_shutdown+0xae>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	60da      	str	r2, [r3, #12]
 8006c54:	4b37      	ldr	r3, [pc, #220]	; (8006d34 <tcp_close_shutdown+0x1b4>)
 8006c56:	2201      	movs	r2, #1
 8006c58:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006c5a:	4b37      	ldr	r3, [pc, #220]	; (8006d38 <tcp_close_shutdown+0x1b8>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d102      	bne.n	8006c6a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006c64:	f003 fd5e 	bl	800a724 <tcp_trigger_input_pcb_close>
 8006c68:	e002      	b.n	8006c70 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7ff fed6 	bl	8006a1c <tcp_free>
      }
      return ERR_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	e050      	b.n	8006d16 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	7d1b      	ldrb	r3, [r3, #20]
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d03b      	beq.n	8006cf4 <tcp_close_shutdown+0x174>
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	dc44      	bgt.n	8006d0a <tcp_close_shutdown+0x18a>
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <tcp_close_shutdown+0x10a>
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d02a      	beq.n	8006cde <tcp_close_shutdown+0x15e>
 8006c88:	e03f      	b.n	8006d0a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	8adb      	ldrh	r3, [r3, #22]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d021      	beq.n	8006cd6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006c92:	4b2a      	ldr	r3, [pc, #168]	; (8006d3c <tcp_close_shutdown+0x1bc>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d105      	bne.n	8006ca8 <tcp_close_shutdown+0x128>
 8006c9c:	4b27      	ldr	r3, [pc, #156]	; (8006d3c <tcp_close_shutdown+0x1bc>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	4a26      	ldr	r2, [pc, #152]	; (8006d3c <tcp_close_shutdown+0x1bc>)
 8006ca4:	6013      	str	r3, [r2, #0]
 8006ca6:	e013      	b.n	8006cd0 <tcp_close_shutdown+0x150>
 8006ca8:	4b24      	ldr	r3, [pc, #144]	; (8006d3c <tcp_close_shutdown+0x1bc>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	60bb      	str	r3, [r7, #8]
 8006cae:	e00c      	b.n	8006cca <tcp_close_shutdown+0x14a>
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d104      	bne.n	8006cc4 <tcp_close_shutdown+0x144>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68da      	ldr	r2, [r3, #12]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	60da      	str	r2, [r3, #12]
 8006cc2:	e005      	b.n	8006cd0 <tcp_close_shutdown+0x150>
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	60bb      	str	r3, [r7, #8]
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1ef      	bne.n	8006cb0 <tcp_close_shutdown+0x130>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7ff fea0 	bl	8006a1c <tcp_free>
      break;
 8006cdc:	e01a      	b.n	8006d14 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7ff ff14 	bl	8006b0c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006ce4:	6879      	ldr	r1, [r7, #4]
 8006ce6:	4816      	ldr	r0, [pc, #88]	; (8006d40 <tcp_close_shutdown+0x1c0>)
 8006ce8:	f001 f8a8 	bl	8007e3c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7ff feb1 	bl	8006a54 <tcp_free_listen>
      break;
 8006cf2:	e00f      	b.n	8006d14 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	480e      	ldr	r0, [pc, #56]	; (8006d30 <tcp_close_shutdown+0x1b0>)
 8006cf8:	f001 f8a0 	bl	8007e3c <tcp_pcb_remove>
 8006cfc:	4b0d      	ldr	r3, [pc, #52]	; (8006d34 <tcp_close_shutdown+0x1b4>)
 8006cfe:	2201      	movs	r2, #1
 8006d00:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7ff fe8a 	bl	8006a1c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006d08:	e004      	b.n	8006d14 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f81a 	bl	8006d44 <tcp_close_shutdown_fin>
 8006d10:	4603      	mov	r3, r0
 8006d12:	e000      	b.n	8006d16 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	08010818 	.word	0x08010818
 8006d24:	080108ec 	.word	0x080108ec
 8006d28:	0801085c 	.word	0x0801085c
 8006d2c:	0801090c 	.word	0x0801090c
 8006d30:	2000830c 	.word	0x2000830c
 8006d34:	20008314 	.word	0x20008314
 8006d38:	2000834c 	.word	0x2000834c
 8006d3c:	20008304 	.word	0x20008304
 8006d40:	20008308 	.word	0x20008308

08006d44 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d106      	bne.n	8006d60 <tcp_close_shutdown_fin+0x1c>
 8006d52:	4b2e      	ldr	r3, [pc, #184]	; (8006e0c <tcp_close_shutdown_fin+0xc8>)
 8006d54:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006d58:	492d      	ldr	r1, [pc, #180]	; (8006e10 <tcp_close_shutdown_fin+0xcc>)
 8006d5a:	482e      	ldr	r0, [pc, #184]	; (8006e14 <tcp_close_shutdown_fin+0xd0>)
 8006d5c:	f007 fdd6 	bl	800e90c <iprintf>

  switch (pcb->state) {
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	7d1b      	ldrb	r3, [r3, #20]
 8006d64:	2b07      	cmp	r3, #7
 8006d66:	d020      	beq.n	8006daa <tcp_close_shutdown_fin+0x66>
 8006d68:	2b07      	cmp	r3, #7
 8006d6a:	dc2b      	bgt.n	8006dc4 <tcp_close_shutdown_fin+0x80>
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d002      	beq.n	8006d76 <tcp_close_shutdown_fin+0x32>
 8006d70:	2b04      	cmp	r3, #4
 8006d72:	d00d      	beq.n	8006d90 <tcp_close_shutdown_fin+0x4c>
 8006d74:	e026      	b.n	8006dc4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f003 fee6 	bl	800ab48 <tcp_send_fin>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d11f      	bne.n	8006dc8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2205      	movs	r2, #5
 8006d8c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006d8e:	e01b      	b.n	8006dc8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f003 fed9 	bl	800ab48 <tcp_send_fin>
 8006d96:	4603      	mov	r3, r0
 8006d98:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d114      	bne.n	8006dcc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2205      	movs	r2, #5
 8006da6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006da8:	e010      	b.n	8006dcc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f003 fecc 	bl	800ab48 <tcp_send_fin>
 8006db0:	4603      	mov	r3, r0
 8006db2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d109      	bne.n	8006dd0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2209      	movs	r2, #9
 8006dc0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006dc2:	e005      	b.n	8006dd0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	e01c      	b.n	8006e02 <tcp_close_shutdown_fin+0xbe>
      break;
 8006dc8:	bf00      	nop
 8006dca:	e002      	b.n	8006dd2 <tcp_close_shutdown_fin+0x8e>
      break;
 8006dcc:	bf00      	nop
 8006dce:	e000      	b.n	8006dd2 <tcp_close_shutdown_fin+0x8e>
      break;
 8006dd0:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d103      	bne.n	8006de2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f003 fff2 	bl	800adc4 <tcp_output>
 8006de0:	e00d      	b.n	8006dfe <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dea:	d108      	bne.n	8006dfe <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	8b5b      	ldrh	r3, [r3, #26]
 8006df0:	f043 0308 	orr.w	r3, r3, #8
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	e001      	b.n	8006e02 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	08010818 	.word	0x08010818
 8006e10:	080108c8 	.word	0x080108c8
 8006e14:	0801085c 	.word	0x0801085c

08006e18 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d109      	bne.n	8006e3a <tcp_close+0x22>
 8006e26:	4b0f      	ldr	r3, [pc, #60]	; (8006e64 <tcp_close+0x4c>)
 8006e28:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006e2c:	490e      	ldr	r1, [pc, #56]	; (8006e68 <tcp_close+0x50>)
 8006e2e:	480f      	ldr	r0, [pc, #60]	; (8006e6c <tcp_close+0x54>)
 8006e30:	f007 fd6c 	bl	800e90c <iprintf>
 8006e34:	f06f 030f 	mvn.w	r3, #15
 8006e38:	e00f      	b.n	8006e5a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	7d1b      	ldrb	r3, [r3, #20]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d006      	beq.n	8006e50 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	8b5b      	ldrh	r3, [r3, #26]
 8006e46:	f043 0310 	orr.w	r3, r3, #16
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006e50:	2101      	movs	r1, #1
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7ff fe94 	bl	8006b80 <tcp_close_shutdown>
 8006e58:	4603      	mov	r3, r0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	08010818 	.word	0x08010818
 8006e68:	08010928 	.word	0x08010928
 8006e6c:	0801085c 	.word	0x0801085c

08006e70 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b08e      	sub	sp, #56	; 0x38
 8006e74:	af04      	add	r7, sp, #16
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d107      	bne.n	8006e90 <tcp_abandon+0x20>
 8006e80:	4b52      	ldr	r3, [pc, #328]	; (8006fcc <tcp_abandon+0x15c>)
 8006e82:	f240 223d 	movw	r2, #573	; 0x23d
 8006e86:	4952      	ldr	r1, [pc, #328]	; (8006fd0 <tcp_abandon+0x160>)
 8006e88:	4852      	ldr	r0, [pc, #328]	; (8006fd4 <tcp_abandon+0x164>)
 8006e8a:	f007 fd3f 	bl	800e90c <iprintf>
 8006e8e:	e099      	b.n	8006fc4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	7d1b      	ldrb	r3, [r3, #20]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d106      	bne.n	8006ea6 <tcp_abandon+0x36>
 8006e98:	4b4c      	ldr	r3, [pc, #304]	; (8006fcc <tcp_abandon+0x15c>)
 8006e9a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006e9e:	494e      	ldr	r1, [pc, #312]	; (8006fd8 <tcp_abandon+0x168>)
 8006ea0:	484c      	ldr	r0, [pc, #304]	; (8006fd4 <tcp_abandon+0x164>)
 8006ea2:	f007 fd33 	bl	800e90c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	7d1b      	ldrb	r3, [r3, #20]
 8006eaa:	2b0a      	cmp	r3, #10
 8006eac:	d107      	bne.n	8006ebe <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006eae:	6879      	ldr	r1, [r7, #4]
 8006eb0:	484a      	ldr	r0, [pc, #296]	; (8006fdc <tcp_abandon+0x16c>)
 8006eb2:	f000 ffc3 	bl	8007e3c <tcp_pcb_remove>
    tcp_free(pcb);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7ff fdb0 	bl	8006a1c <tcp_free>
 8006ebc:	e082      	b.n	8006fc4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eca:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	7d1b      	ldrb	r3, [r3, #20]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d126      	bne.n	8006f36 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	8adb      	ldrh	r3, [r3, #22]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d02e      	beq.n	8006f4e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006ef0:	4b3b      	ldr	r3, [pc, #236]	; (8006fe0 <tcp_abandon+0x170>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d105      	bne.n	8006f06 <tcp_abandon+0x96>
 8006efa:	4b39      	ldr	r3, [pc, #228]	; (8006fe0 <tcp_abandon+0x170>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	4a37      	ldr	r2, [pc, #220]	; (8006fe0 <tcp_abandon+0x170>)
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	e013      	b.n	8006f2e <tcp_abandon+0xbe>
 8006f06:	4b36      	ldr	r3, [pc, #216]	; (8006fe0 <tcp_abandon+0x170>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	61fb      	str	r3, [r7, #28]
 8006f0c:	e00c      	b.n	8006f28 <tcp_abandon+0xb8>
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d104      	bne.n	8006f22 <tcp_abandon+0xb2>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68da      	ldr	r2, [r3, #12]
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	60da      	str	r2, [r3, #12]
 8006f20:	e005      	b.n	8006f2e <tcp_abandon+0xbe>
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	61fb      	str	r3, [r7, #28]
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1ef      	bne.n	8006f0e <tcp_abandon+0x9e>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	60da      	str	r2, [r3, #12]
 8006f34:	e00b      	b.n	8006f4e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	8adb      	ldrh	r3, [r3, #22]
 8006f3e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006f40:	6879      	ldr	r1, [r7, #4]
 8006f42:	4828      	ldr	r0, [pc, #160]	; (8006fe4 <tcp_abandon+0x174>)
 8006f44:	f000 ff7a 	bl	8007e3c <tcp_pcb_remove>
 8006f48:	4b27      	ldr	r3, [pc, #156]	; (8006fe8 <tcp_abandon+0x178>)
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d004      	beq.n	8006f60 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 fd1c 	bl	8007998 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d004      	beq.n	8006f72 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 fd13 	bl	8007998 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d004      	beq.n	8006f84 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 fd0a 	bl	8007998 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00e      	beq.n	8006fa8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006f8a:	6879      	ldr	r1, [r7, #4]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3304      	adds	r3, #4
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	8b12      	ldrh	r2, [r2, #24]
 8006f94:	9202      	str	r2, [sp, #8]
 8006f96:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006f98:	9201      	str	r2, [sp, #4]
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	69b9      	ldr	r1, [r7, #24]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f004 fcc2 	bl	800b92c <tcp_rst>
    }
    last_state = pcb->state;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	7d1b      	ldrb	r3, [r3, #20]
 8006fac:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f7ff fd34 	bl	8006a1c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d004      	beq.n	8006fc4 <tcp_abandon+0x154>
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	f06f 010c 	mvn.w	r1, #12
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	4798      	blx	r3
  }
}
 8006fc4:	3728      	adds	r7, #40	; 0x28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	08010818 	.word	0x08010818
 8006fd0:	0801095c 	.word	0x0801095c
 8006fd4:	0801085c 	.word	0x0801085c
 8006fd8:	08010978 	.word	0x08010978
 8006fdc:	20008310 	.word	0x20008310
 8006fe0:	20008304 	.word	0x20008304
 8006fe4:	2000830c 	.word	0x2000830c
 8006fe8:	20008314 	.word	0x20008314

08006fec <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7ff ff3a 	bl	8006e70 <tcp_abandon>
}
 8006ffc:	bf00      	nop
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d106      	bne.n	8007020 <tcp_update_rcv_ann_wnd+0x1c>
 8007012:	4b25      	ldr	r3, [pc, #148]	; (80070a8 <tcp_update_rcv_ann_wnd+0xa4>)
 8007014:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007018:	4924      	ldr	r1, [pc, #144]	; (80070ac <tcp_update_rcv_ann_wnd+0xa8>)
 800701a:	4825      	ldr	r0, [pc, #148]	; (80070b0 <tcp_update_rcv_ann_wnd+0xac>)
 800701c:	f007 fc76 	bl	800e90c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007028:	4413      	add	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007034:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007038:	bf28      	it	cs
 800703a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800703e:	b292      	uxth	r2, r2
 8007040:	4413      	add	r3, r2
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	db08      	blt.n	800705c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	e020      	b.n	800709e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b00      	cmp	r3, #0
 8007068:	dd03      	ble.n	8007072 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007070:	e014      	b.n	800709c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007084:	d306      	bcc.n	8007094 <tcp_update_rcv_ann_wnd+0x90>
 8007086:	4b08      	ldr	r3, [pc, #32]	; (80070a8 <tcp_update_rcv_ann_wnd+0xa4>)
 8007088:	f240 32b6 	movw	r2, #950	; 0x3b6
 800708c:	4909      	ldr	r1, [pc, #36]	; (80070b4 <tcp_update_rcv_ann_wnd+0xb0>)
 800708e:	4808      	ldr	r0, [pc, #32]	; (80070b0 <tcp_update_rcv_ann_wnd+0xac>)
 8007090:	f007 fc3c 	bl	800e90c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	b29a      	uxth	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800709c:	2300      	movs	r3, #0
  }
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	08010818 	.word	0x08010818
 80070ac:	08010a74 	.word	0x08010a74
 80070b0:	0801085c 	.word	0x0801085c
 80070b4:	08010a98 	.word	0x08010a98

080070b8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d107      	bne.n	80070da <tcp_recved+0x22>
 80070ca:	4b1f      	ldr	r3, [pc, #124]	; (8007148 <tcp_recved+0x90>)
 80070cc:	f240 32cf 	movw	r2, #975	; 0x3cf
 80070d0:	491e      	ldr	r1, [pc, #120]	; (800714c <tcp_recved+0x94>)
 80070d2:	481f      	ldr	r0, [pc, #124]	; (8007150 <tcp_recved+0x98>)
 80070d4:	f007 fc1a 	bl	800e90c <iprintf>
 80070d8:	e032      	b.n	8007140 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	7d1b      	ldrb	r3, [r3, #20]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d106      	bne.n	80070f0 <tcp_recved+0x38>
 80070e2:	4b19      	ldr	r3, [pc, #100]	; (8007148 <tcp_recved+0x90>)
 80070e4:	f240 32d2 	movw	r2, #978	; 0x3d2
 80070e8:	491a      	ldr	r1, [pc, #104]	; (8007154 <tcp_recved+0x9c>)
 80070ea:	4819      	ldr	r0, [pc, #100]	; (8007150 <tcp_recved+0x98>)
 80070ec:	f007 fc0e 	bl	800e90c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80070f4:	887b      	ldrh	r3, [r7, #2]
 80070f6:	4413      	add	r3, r2
 80070f8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80070fa:	89fb      	ldrh	r3, [r7, #14]
 80070fc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007100:	d804      	bhi.n	800710c <tcp_recved+0x54>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007106:	89fa      	ldrh	r2, [r7, #14]
 8007108:	429a      	cmp	r2, r3
 800710a:	d204      	bcs.n	8007116 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007112:	851a      	strh	r2, [r3, #40]	; 0x28
 8007114:	e002      	b.n	800711c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	89fa      	ldrh	r2, [r7, #14]
 800711a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7ff ff71 	bl	8007004 <tcp_update_rcv_ann_wnd>
 8007122:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800712a:	d309      	bcc.n	8007140 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	8b5b      	ldrh	r3, [r3, #26]
 8007130:	f043 0302 	orr.w	r3, r3, #2
 8007134:	b29a      	uxth	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f003 fe42 	bl	800adc4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	08010818 	.word	0x08010818
 800714c:	08010ab4 	.word	0x08010ab4
 8007150:	0801085c 	.word	0x0801085c
 8007154:	08010acc 	.word	0x08010acc

08007158 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007158:	b5b0      	push	{r4, r5, r7, lr}
 800715a:	b090      	sub	sp, #64	; 0x40
 800715c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007164:	4b94      	ldr	r3, [pc, #592]	; (80073b8 <tcp_slowtmr+0x260>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	3301      	adds	r3, #1
 800716a:	4a93      	ldr	r2, [pc, #588]	; (80073b8 <tcp_slowtmr+0x260>)
 800716c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800716e:	4b93      	ldr	r3, [pc, #588]	; (80073bc <tcp_slowtmr+0x264>)
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	3301      	adds	r3, #1
 8007174:	b2da      	uxtb	r2, r3
 8007176:	4b91      	ldr	r3, [pc, #580]	; (80073bc <tcp_slowtmr+0x264>)
 8007178:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800717a:	2300      	movs	r3, #0
 800717c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800717e:	4b90      	ldr	r3, [pc, #576]	; (80073c0 <tcp_slowtmr+0x268>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007184:	e29f      	b.n	80076c6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007188:	7d1b      	ldrb	r3, [r3, #20]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d106      	bne.n	800719c <tcp_slowtmr+0x44>
 800718e:	4b8d      	ldr	r3, [pc, #564]	; (80073c4 <tcp_slowtmr+0x26c>)
 8007190:	f240 42be 	movw	r2, #1214	; 0x4be
 8007194:	498c      	ldr	r1, [pc, #560]	; (80073c8 <tcp_slowtmr+0x270>)
 8007196:	488d      	ldr	r0, [pc, #564]	; (80073cc <tcp_slowtmr+0x274>)
 8007198:	f007 fbb8 	bl	800e90c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800719c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719e:	7d1b      	ldrb	r3, [r3, #20]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d106      	bne.n	80071b2 <tcp_slowtmr+0x5a>
 80071a4:	4b87      	ldr	r3, [pc, #540]	; (80073c4 <tcp_slowtmr+0x26c>)
 80071a6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80071aa:	4989      	ldr	r1, [pc, #548]	; (80073d0 <tcp_slowtmr+0x278>)
 80071ac:	4887      	ldr	r0, [pc, #540]	; (80073cc <tcp_slowtmr+0x274>)
 80071ae:	f007 fbad 	bl	800e90c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80071b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b4:	7d1b      	ldrb	r3, [r3, #20]
 80071b6:	2b0a      	cmp	r3, #10
 80071b8:	d106      	bne.n	80071c8 <tcp_slowtmr+0x70>
 80071ba:	4b82      	ldr	r3, [pc, #520]	; (80073c4 <tcp_slowtmr+0x26c>)
 80071bc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80071c0:	4984      	ldr	r1, [pc, #528]	; (80073d4 <tcp_slowtmr+0x27c>)
 80071c2:	4882      	ldr	r0, [pc, #520]	; (80073cc <tcp_slowtmr+0x274>)
 80071c4:	f007 fba2 	bl	800e90c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80071c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ca:	7f9a      	ldrb	r2, [r3, #30]
 80071cc:	4b7b      	ldr	r3, [pc, #492]	; (80073bc <tcp_slowtmr+0x264>)
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d105      	bne.n	80071e0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80071d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80071d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80071de:	e272      	b.n	80076c6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80071e0:	4b76      	ldr	r3, [pc, #472]	; (80073bc <tcp_slowtmr+0x264>)
 80071e2:	781a      	ldrb	r2, [r3, #0]
 80071e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80071ee:	2300      	movs	r3, #0
 80071f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80071f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f6:	7d1b      	ldrb	r3, [r3, #20]
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d10a      	bne.n	8007212 <tcp_slowtmr+0xba>
 80071fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007202:	2b05      	cmp	r3, #5
 8007204:	d905      	bls.n	8007212 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800720a:	3301      	adds	r3, #1
 800720c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007210:	e11e      	b.n	8007450 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007214:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007218:	2b0b      	cmp	r3, #11
 800721a:	d905      	bls.n	8007228 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800721c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007220:	3301      	adds	r3, #1
 8007222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007226:	e113      	b.n	8007450 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800722e:	2b00      	cmp	r3, #0
 8007230:	d075      	beq.n	800731e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007236:	2b00      	cmp	r3, #0
 8007238:	d006      	beq.n	8007248 <tcp_slowtmr+0xf0>
 800723a:	4b62      	ldr	r3, [pc, #392]	; (80073c4 <tcp_slowtmr+0x26c>)
 800723c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007240:	4965      	ldr	r1, [pc, #404]	; (80073d8 <tcp_slowtmr+0x280>)
 8007242:	4862      	ldr	r0, [pc, #392]	; (80073cc <tcp_slowtmr+0x274>)
 8007244:	f007 fb62 	bl	800e90c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800724c:	2b00      	cmp	r3, #0
 800724e:	d106      	bne.n	800725e <tcp_slowtmr+0x106>
 8007250:	4b5c      	ldr	r3, [pc, #368]	; (80073c4 <tcp_slowtmr+0x26c>)
 8007252:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007256:	4961      	ldr	r1, [pc, #388]	; (80073dc <tcp_slowtmr+0x284>)
 8007258:	485c      	ldr	r0, [pc, #368]	; (80073cc <tcp_slowtmr+0x274>)
 800725a:	f007 fb57 	bl	800e90c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800725e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007260:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007264:	2b0b      	cmp	r3, #11
 8007266:	d905      	bls.n	8007274 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800726c:	3301      	adds	r3, #1
 800726e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007272:	e0ed      	b.n	8007450 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007276:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800727a:	3b01      	subs	r3, #1
 800727c:	4a58      	ldr	r2, [pc, #352]	; (80073e0 <tcp_slowtmr+0x288>)
 800727e:	5cd3      	ldrb	r3, [r2, r3]
 8007280:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007284:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007288:	7c7a      	ldrb	r2, [r7, #17]
 800728a:	429a      	cmp	r2, r3
 800728c:	d907      	bls.n	800729e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800728e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007290:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007294:	3301      	adds	r3, #1
 8007296:	b2da      	uxtb	r2, r3
 8007298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800729e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80072a4:	7c7a      	ldrb	r2, [r7, #17]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	f200 80d2 	bhi.w	8007450 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80072ac:	2301      	movs	r3, #1
 80072ae:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80072b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d108      	bne.n	80072cc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80072ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072bc:	f004 fc2a 	bl	800bb14 <tcp_zero_window_probe>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d014      	beq.n	80072f0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80072c6:	2300      	movs	r3, #0
 80072c8:	623b      	str	r3, [r7, #32]
 80072ca:	e011      	b.n	80072f0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80072cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80072d2:	4619      	mov	r1, r3
 80072d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072d6:	f003 faef 	bl	800a8b8 <tcp_split_unsent_seg>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d107      	bne.n	80072f0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80072e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072e2:	f003 fd6f 	bl	800adc4 <tcp_output>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d101      	bne.n	80072f0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80072ec:	2300      	movs	r3, #0
 80072ee:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 80ac 	beq.w	8007450 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80072f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007302:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007306:	2b06      	cmp	r3, #6
 8007308:	f200 80a2 	bhi.w	8007450 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007312:	3301      	adds	r3, #1
 8007314:	b2da      	uxtb	r2, r3
 8007316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007318:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800731c:	e098      	b.n	8007450 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800731e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007320:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007324:	2b00      	cmp	r3, #0
 8007326:	db0f      	blt.n	8007348 <tcp_slowtmr+0x1f0>
 8007328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800732e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007332:	4293      	cmp	r3, r2
 8007334:	d008      	beq.n	8007348 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007338:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800733c:	b29b      	uxth	r3, r3
 800733e:	3301      	adds	r3, #1
 8007340:	b29b      	uxth	r3, r3
 8007342:	b21a      	sxth	r2, r3
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800734e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007350:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007354:	429a      	cmp	r2, r3
 8007356:	db7b      	blt.n	8007450 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007358:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800735a:	f004 f825 	bl	800b3a8 <tcp_rexmit_rto_prepare>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d007      	beq.n	8007374 <tcp_slowtmr+0x21c>
 8007364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007368:	2b00      	cmp	r3, #0
 800736a:	d171      	bne.n	8007450 <tcp_slowtmr+0x2f8>
 800736c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007370:	2b00      	cmp	r3, #0
 8007372:	d06d      	beq.n	8007450 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007376:	7d1b      	ldrb	r3, [r3, #20]
 8007378:	2b02      	cmp	r3, #2
 800737a:	d03a      	beq.n	80073f2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800737c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007382:	2b0c      	cmp	r3, #12
 8007384:	bf28      	it	cs
 8007386:	230c      	movcs	r3, #12
 8007388:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007390:	10db      	asrs	r3, r3, #3
 8007392:	b21b      	sxth	r3, r3
 8007394:	461a      	mov	r2, r3
 8007396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007398:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800739c:	4413      	add	r3, r2
 800739e:	7efa      	ldrb	r2, [r7, #27]
 80073a0:	4910      	ldr	r1, [pc, #64]	; (80073e4 <tcp_slowtmr+0x28c>)
 80073a2:	5c8a      	ldrb	r2, [r1, r2]
 80073a4:	4093      	lsls	r3, r2
 80073a6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80073ae:	4293      	cmp	r3, r2
 80073b0:	dc1a      	bgt.n	80073e8 <tcp_slowtmr+0x290>
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	b21a      	sxth	r2, r3
 80073b6:	e019      	b.n	80073ec <tcp_slowtmr+0x294>
 80073b8:	20008300 	.word	0x20008300
 80073bc:	20008316 	.word	0x20008316
 80073c0:	2000830c 	.word	0x2000830c
 80073c4:	08010818 	.word	0x08010818
 80073c8:	08010b5c 	.word	0x08010b5c
 80073cc:	0801085c 	.word	0x0801085c
 80073d0:	08010b88 	.word	0x08010b88
 80073d4:	08010bb4 	.word	0x08010bb4
 80073d8:	08010be4 	.word	0x08010be4
 80073dc:	08010c18 	.word	0x08010c18
 80073e0:	080127f0 	.word	0x080127f0
 80073e4:	080127e0 	.word	0x080127e0
 80073e8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80073ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f4:	2200      	movs	r2, #0
 80073f6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80073f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80073fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007400:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007404:	4293      	cmp	r3, r2
 8007406:	bf28      	it	cs
 8007408:	4613      	movcs	r3, r2
 800740a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800740c:	8a7b      	ldrh	r3, [r7, #18]
 800740e:	085b      	lsrs	r3, r3, #1
 8007410:	b29a      	uxth	r2, r3
 8007412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007414:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800741e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007420:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	b29b      	uxth	r3, r3
 8007426:	429a      	cmp	r2, r3
 8007428:	d206      	bcs.n	8007438 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800742a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800742e:	005b      	lsls	r3, r3, #1
 8007430:	b29a      	uxth	r2, r3
 8007432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007434:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800743c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007444:	2200      	movs	r2, #0
 8007446:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800744a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800744c:	f004 f81c 	bl	800b488 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007452:	7d1b      	ldrb	r3, [r3, #20]
 8007454:	2b06      	cmp	r3, #6
 8007456:	d111      	bne.n	800747c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745a:	8b5b      	ldrh	r3, [r3, #26]
 800745c:	f003 0310 	and.w	r3, r3, #16
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00b      	beq.n	800747c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007464:	4b9d      	ldr	r3, [pc, #628]	; (80076dc <tcp_slowtmr+0x584>)
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746a:	6a1b      	ldr	r3, [r3, #32]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	2b28      	cmp	r3, #40	; 0x28
 8007470:	d904      	bls.n	800747c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007476:	3301      	adds	r3, #1
 8007478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800747c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747e:	7a5b      	ldrb	r3, [r3, #9]
 8007480:	f003 0308 	and.w	r3, r3, #8
 8007484:	2b00      	cmp	r3, #0
 8007486:	d04c      	beq.n	8007522 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8007488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800748c:	2b04      	cmp	r3, #4
 800748e:	d003      	beq.n	8007498 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007492:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007494:	2b07      	cmp	r3, #7
 8007496:	d144      	bne.n	8007522 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007498:	4b90      	ldr	r3, [pc, #576]	; (80076dc <tcp_slowtmr+0x584>)
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749e:	6a1b      	ldr	r3, [r3, #32]
 80074a0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80074a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074a8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80074ac:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80074b0:	498b      	ldr	r1, [pc, #556]	; (80076e0 <tcp_slowtmr+0x588>)
 80074b2:	fba1 1303 	umull	r1, r3, r1, r3
 80074b6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d90a      	bls.n	80074d2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80074bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074c0:	3301      	adds	r3, #1
 80074c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80074c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074ca:	3301      	adds	r3, #1
 80074cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80074d0:	e027      	b.n	8007522 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80074d2:	4b82      	ldr	r3, [pc, #520]	; (80076dc <tcp_slowtmr+0x584>)
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80074dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074de:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80074e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80074e8:	4618      	mov	r0, r3
 80074ea:	4b7e      	ldr	r3, [pc, #504]	; (80076e4 <tcp_slowtmr+0x58c>)
 80074ec:	fb00 f303 	mul.w	r3, r0, r3
 80074f0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80074f2:	497b      	ldr	r1, [pc, #492]	; (80076e0 <tcp_slowtmr+0x588>)
 80074f4:	fba1 1303 	umull	r1, r3, r1, r3
 80074f8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d911      	bls.n	8007522 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80074fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007500:	f004 fac8 	bl	800ba94 <tcp_keepalive>
 8007504:	4603      	mov	r3, r0
 8007506:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800750a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800750e:	2b00      	cmp	r3, #0
 8007510:	d107      	bne.n	8007522 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8007512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007514:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007518:	3301      	adds	r3, #1
 800751a:	b2da      	uxtb	r2, r3
 800751c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007526:	2b00      	cmp	r3, #0
 8007528:	d011      	beq.n	800754e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800752a:	4b6c      	ldr	r3, [pc, #432]	; (80076dc <tcp_slowtmr+0x584>)
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	1ad2      	subs	r2, r2, r3
 8007534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007536:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800753a:	4619      	mov	r1, r3
 800753c:	460b      	mov	r3, r1
 800753e:	005b      	lsls	r3, r3, #1
 8007540:	440b      	add	r3, r1
 8007542:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007544:	429a      	cmp	r2, r3
 8007546:	d302      	bcc.n	800754e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007548:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800754a:	f000 fddb 	bl	8008104 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800754e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007550:	7d1b      	ldrb	r3, [r3, #20]
 8007552:	2b03      	cmp	r3, #3
 8007554:	d10b      	bne.n	800756e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007556:	4b61      	ldr	r3, [pc, #388]	; (80076dc <tcp_slowtmr+0x584>)
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	2b28      	cmp	r3, #40	; 0x28
 8007562:	d904      	bls.n	800756e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007568:	3301      	adds	r3, #1
 800756a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800756e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007570:	7d1b      	ldrb	r3, [r3, #20]
 8007572:	2b09      	cmp	r3, #9
 8007574:	d10b      	bne.n	800758e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007576:	4b59      	ldr	r3, [pc, #356]	; (80076dc <tcp_slowtmr+0x584>)
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	2bf0      	cmp	r3, #240	; 0xf0
 8007582:	d904      	bls.n	800758e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8007584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007588:	3301      	adds	r3, #1
 800758a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800758e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007592:	2b00      	cmp	r3, #0
 8007594:	d060      	beq.n	8007658 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800759c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800759e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075a0:	f000 fbfc 	bl	8007d9c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80075a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d010      	beq.n	80075cc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80075aa:	4b4f      	ldr	r3, [pc, #316]	; (80076e8 <tcp_slowtmr+0x590>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d106      	bne.n	80075c2 <tcp_slowtmr+0x46a>
 80075b4:	4b4d      	ldr	r3, [pc, #308]	; (80076ec <tcp_slowtmr+0x594>)
 80075b6:	f240 526d 	movw	r2, #1389	; 0x56d
 80075ba:	494d      	ldr	r1, [pc, #308]	; (80076f0 <tcp_slowtmr+0x598>)
 80075bc:	484d      	ldr	r0, [pc, #308]	; (80076f4 <tcp_slowtmr+0x59c>)
 80075be:	f007 f9a5 	bl	800e90c <iprintf>
        prev->next = pcb->next;
 80075c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c4:	68da      	ldr	r2, [r3, #12]
 80075c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c8:	60da      	str	r2, [r3, #12]
 80075ca:	e00f      	b.n	80075ec <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80075cc:	4b46      	ldr	r3, [pc, #280]	; (80076e8 <tcp_slowtmr+0x590>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d006      	beq.n	80075e4 <tcp_slowtmr+0x48c>
 80075d6:	4b45      	ldr	r3, [pc, #276]	; (80076ec <tcp_slowtmr+0x594>)
 80075d8:	f240 5271 	movw	r2, #1393	; 0x571
 80075dc:	4946      	ldr	r1, [pc, #280]	; (80076f8 <tcp_slowtmr+0x5a0>)
 80075de:	4845      	ldr	r0, [pc, #276]	; (80076f4 <tcp_slowtmr+0x59c>)
 80075e0:	f007 f994 	bl	800e90c <iprintf>
        tcp_active_pcbs = pcb->next;
 80075e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	4a3f      	ldr	r2, [pc, #252]	; (80076e8 <tcp_slowtmr+0x590>)
 80075ea:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80075ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d013      	beq.n	800761c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80075f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80075f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80075fc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80075fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007600:	3304      	adds	r3, #4
 8007602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007604:	8ad2      	ldrh	r2, [r2, #22]
 8007606:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007608:	8b09      	ldrh	r1, [r1, #24]
 800760a:	9102      	str	r1, [sp, #8]
 800760c:	9201      	str	r2, [sp, #4]
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	462b      	mov	r3, r5
 8007612:	4622      	mov	r2, r4
 8007614:	4601      	mov	r1, r0
 8007616:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007618:	f004 f988 	bl	800b92c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800761c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007624:	7d1b      	ldrb	r3, [r3, #20]
 8007626:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800762c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007632:	6838      	ldr	r0, [r7, #0]
 8007634:	f7ff f9f2 	bl	8006a1c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007638:	4b30      	ldr	r3, [pc, #192]	; (80076fc <tcp_slowtmr+0x5a4>)
 800763a:	2200      	movs	r2, #0
 800763c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d004      	beq.n	800764e <tcp_slowtmr+0x4f6>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f06f 010c 	mvn.w	r1, #12
 800764a:	68b8      	ldr	r0, [r7, #8]
 800764c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800764e:	4b2b      	ldr	r3, [pc, #172]	; (80076fc <tcp_slowtmr+0x5a4>)
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d037      	beq.n	80076c6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8007656:	e590      	b.n	800717a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800765c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007664:	7f1b      	ldrb	r3, [r3, #28]
 8007666:	3301      	adds	r3, #1
 8007668:	b2da      	uxtb	r2, r3
 800766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800766e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007670:	7f1a      	ldrb	r2, [r3, #28]
 8007672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007674:	7f5b      	ldrb	r3, [r3, #29]
 8007676:	429a      	cmp	r2, r3
 8007678:	d325      	bcc.n	80076c6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800767a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767c:	2200      	movs	r2, #0
 800767e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007680:	4b1e      	ldr	r3, [pc, #120]	; (80076fc <tcp_slowtmr+0x5a4>)
 8007682:	2200      	movs	r2, #0
 8007684:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00b      	beq.n	80076a8 <tcp_slowtmr+0x550>
 8007690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007698:	6912      	ldr	r2, [r2, #16]
 800769a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800769c:	4610      	mov	r0, r2
 800769e:	4798      	blx	r3
 80076a0:	4603      	mov	r3, r0
 80076a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80076a6:	e002      	b.n	80076ae <tcp_slowtmr+0x556>
 80076a8:	2300      	movs	r3, #0
 80076aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80076ae:	4b13      	ldr	r3, [pc, #76]	; (80076fc <tcp_slowtmr+0x5a4>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d000      	beq.n	80076b8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80076b6:	e560      	b.n	800717a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80076b8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d102      	bne.n	80076c6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80076c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076c2:	f003 fb7f 	bl	800adc4 <tcp_output>
  while (pcb != NULL) {
 80076c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f47f ad5c 	bne.w	8007186 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80076ce:	2300      	movs	r3, #0
 80076d0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80076d2:	4b0b      	ldr	r3, [pc, #44]	; (8007700 <tcp_slowtmr+0x5a8>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80076d8:	e067      	b.n	80077aa <tcp_slowtmr+0x652>
 80076da:	bf00      	nop
 80076dc:	20008300 	.word	0x20008300
 80076e0:	10624dd3 	.word	0x10624dd3
 80076e4:	000124f8 	.word	0x000124f8
 80076e8:	2000830c 	.word	0x2000830c
 80076ec:	08010818 	.word	0x08010818
 80076f0:	08010c50 	.word	0x08010c50
 80076f4:	0801085c 	.word	0x0801085c
 80076f8:	08010c7c 	.word	0x08010c7c
 80076fc:	20008314 	.word	0x20008314
 8007700:	20008310 	.word	0x20008310
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007706:	7d1b      	ldrb	r3, [r3, #20]
 8007708:	2b0a      	cmp	r3, #10
 800770a:	d006      	beq.n	800771a <tcp_slowtmr+0x5c2>
 800770c:	4b2b      	ldr	r3, [pc, #172]	; (80077bc <tcp_slowtmr+0x664>)
 800770e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8007712:	492b      	ldr	r1, [pc, #172]	; (80077c0 <tcp_slowtmr+0x668>)
 8007714:	482b      	ldr	r0, [pc, #172]	; (80077c4 <tcp_slowtmr+0x66c>)
 8007716:	f007 f8f9 	bl	800e90c <iprintf>
    pcb_remove = 0;
 800771a:	2300      	movs	r3, #0
 800771c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007720:	4b29      	ldr	r3, [pc, #164]	; (80077c8 <tcp_slowtmr+0x670>)
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007726:	6a1b      	ldr	r3, [r3, #32]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	2bf0      	cmp	r3, #240	; 0xf0
 800772c:	d904      	bls.n	8007738 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800772e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007732:	3301      	adds	r3, #1
 8007734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800773c:	2b00      	cmp	r3, #0
 800773e:	d02f      	beq.n	80077a0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007740:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007742:	f000 fb2b 	bl	8007d9c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007748:	2b00      	cmp	r3, #0
 800774a:	d010      	beq.n	800776e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800774c:	4b1f      	ldr	r3, [pc, #124]	; (80077cc <tcp_slowtmr+0x674>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007752:	429a      	cmp	r2, r3
 8007754:	d106      	bne.n	8007764 <tcp_slowtmr+0x60c>
 8007756:	4b19      	ldr	r3, [pc, #100]	; (80077bc <tcp_slowtmr+0x664>)
 8007758:	f240 52af 	movw	r2, #1455	; 0x5af
 800775c:	491c      	ldr	r1, [pc, #112]	; (80077d0 <tcp_slowtmr+0x678>)
 800775e:	4819      	ldr	r0, [pc, #100]	; (80077c4 <tcp_slowtmr+0x66c>)
 8007760:	f007 f8d4 	bl	800e90c <iprintf>
        prev->next = pcb->next;
 8007764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007766:	68da      	ldr	r2, [r3, #12]
 8007768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776a:	60da      	str	r2, [r3, #12]
 800776c:	e00f      	b.n	800778e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800776e:	4b17      	ldr	r3, [pc, #92]	; (80077cc <tcp_slowtmr+0x674>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007774:	429a      	cmp	r2, r3
 8007776:	d006      	beq.n	8007786 <tcp_slowtmr+0x62e>
 8007778:	4b10      	ldr	r3, [pc, #64]	; (80077bc <tcp_slowtmr+0x664>)
 800777a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800777e:	4915      	ldr	r1, [pc, #84]	; (80077d4 <tcp_slowtmr+0x67c>)
 8007780:	4810      	ldr	r0, [pc, #64]	; (80077c4 <tcp_slowtmr+0x66c>)
 8007782:	f007 f8c3 	bl	800e90c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	4a10      	ldr	r2, [pc, #64]	; (80077cc <tcp_slowtmr+0x674>)
 800778c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007798:	69f8      	ldr	r0, [r7, #28]
 800779a:	f7ff f93f 	bl	8006a1c <tcp_free>
 800779e:	e004      	b.n	80077aa <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80077a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80077a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80077aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1a9      	bne.n	8007704 <tcp_slowtmr+0x5ac>
    }
  }
}
 80077b0:	bf00      	nop
 80077b2:	bf00      	nop
 80077b4:	3730      	adds	r7, #48	; 0x30
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bdb0      	pop	{r4, r5, r7, pc}
 80077ba:	bf00      	nop
 80077bc:	08010818 	.word	0x08010818
 80077c0:	08010ca8 	.word	0x08010ca8
 80077c4:	0801085c 	.word	0x0801085c
 80077c8:	20008300 	.word	0x20008300
 80077cc:	20008310 	.word	0x20008310
 80077d0:	08010cd8 	.word	0x08010cd8
 80077d4:	08010d00 	.word	0x08010d00

080077d8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80077de:	4b2d      	ldr	r3, [pc, #180]	; (8007894 <tcp_fasttmr+0xbc>)
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	3301      	adds	r3, #1
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	4b2b      	ldr	r3, [pc, #172]	; (8007894 <tcp_fasttmr+0xbc>)
 80077e8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80077ea:	4b2b      	ldr	r3, [pc, #172]	; (8007898 <tcp_fasttmr+0xc0>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80077f0:	e048      	b.n	8007884 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	7f9a      	ldrb	r2, [r3, #30]
 80077f6:	4b27      	ldr	r3, [pc, #156]	; (8007894 <tcp_fasttmr+0xbc>)
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d03f      	beq.n	800787e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80077fe:	4b25      	ldr	r3, [pc, #148]	; (8007894 <tcp_fasttmr+0xbc>)
 8007800:	781a      	ldrb	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	8b5b      	ldrh	r3, [r3, #26]
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	2b00      	cmp	r3, #0
 8007810:	d010      	beq.n	8007834 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	8b5b      	ldrh	r3, [r3, #26]
 8007816:	f043 0302 	orr.w	r3, r3, #2
 800781a:	b29a      	uxth	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f003 facf 	bl	800adc4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	8b5b      	ldrh	r3, [r3, #26]
 800782a:	f023 0303 	bic.w	r3, r3, #3
 800782e:	b29a      	uxth	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	8b5b      	ldrh	r3, [r3, #26]
 8007838:	f003 0308 	and.w	r3, r3, #8
 800783c:	2b00      	cmp	r3, #0
 800783e:	d009      	beq.n	8007854 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	8b5b      	ldrh	r3, [r3, #26]
 8007844:	f023 0308 	bic.w	r3, r3, #8
 8007848:	b29a      	uxth	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7ff fa78 	bl	8006d44 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00a      	beq.n	8007878 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007862:	4b0e      	ldr	r3, [pc, #56]	; (800789c <tcp_fasttmr+0xc4>)
 8007864:	2200      	movs	r2, #0
 8007866:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f819 	bl	80078a0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800786e:	4b0b      	ldr	r3, [pc, #44]	; (800789c <tcp_fasttmr+0xc4>)
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d000      	beq.n	8007878 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007876:	e7b8      	b.n	80077ea <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	607b      	str	r3, [r7, #4]
 800787c:	e002      	b.n	8007884 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1b3      	bne.n	80077f2 <tcp_fasttmr+0x1a>
    }
  }
}
 800788a:	bf00      	nop
 800788c:	bf00      	nop
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	20008316 	.word	0x20008316
 8007898:	2000830c 	.word	0x2000830c
 800789c:	20008314 	.word	0x20008314

080078a0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80078a0:	b590      	push	{r4, r7, lr}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d109      	bne.n	80078c2 <tcp_process_refused_data+0x22>
 80078ae:	4b37      	ldr	r3, [pc, #220]	; (800798c <tcp_process_refused_data+0xec>)
 80078b0:	f240 6209 	movw	r2, #1545	; 0x609
 80078b4:	4936      	ldr	r1, [pc, #216]	; (8007990 <tcp_process_refused_data+0xf0>)
 80078b6:	4837      	ldr	r0, [pc, #220]	; (8007994 <tcp_process_refused_data+0xf4>)
 80078b8:	f007 f828 	bl	800e90c <iprintf>
 80078bc:	f06f 030f 	mvn.w	r3, #15
 80078c0:	e060      	b.n	8007984 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078c6:	7b5b      	ldrb	r3, [r3, #13]
 80078c8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078ce:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00b      	beq.n	80078f8 <tcp_process_refused_data+0x58>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6918      	ldr	r0, [r3, #16]
 80078ea:	2300      	movs	r3, #0
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	6879      	ldr	r1, [r7, #4]
 80078f0:	47a0      	blx	r4
 80078f2:	4603      	mov	r3, r0
 80078f4:	73fb      	strb	r3, [r7, #15]
 80078f6:	e007      	b.n	8007908 <tcp_process_refused_data+0x68>
 80078f8:	2300      	movs	r3, #0
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	6879      	ldr	r1, [r7, #4]
 80078fe:	2000      	movs	r0, #0
 8007900:	f000 f8a4 	bl	8007a4c <tcp_recv_null>
 8007904:	4603      	mov	r3, r0
 8007906:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d12a      	bne.n	8007966 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007910:	7bbb      	ldrb	r3, [r7, #14]
 8007912:	f003 0320 	and.w	r3, r3, #32
 8007916:	2b00      	cmp	r3, #0
 8007918:	d033      	beq.n	8007982 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800791e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007922:	d005      	beq.n	8007930 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007928:	3301      	adds	r3, #1
 800792a:	b29a      	uxth	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00b      	beq.n	8007952 <tcp_process_refused_data+0xb2>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6918      	ldr	r0, [r3, #16]
 8007944:	2300      	movs	r3, #0
 8007946:	2200      	movs	r2, #0
 8007948:	6879      	ldr	r1, [r7, #4]
 800794a:	47a0      	blx	r4
 800794c:	4603      	mov	r3, r0
 800794e:	73fb      	strb	r3, [r7, #15]
 8007950:	e001      	b.n	8007956 <tcp_process_refused_data+0xb6>
 8007952:	2300      	movs	r3, #0
 8007954:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800795a:	f113 0f0d 	cmn.w	r3, #13
 800795e:	d110      	bne.n	8007982 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007960:	f06f 030c 	mvn.w	r3, #12
 8007964:	e00e      	b.n	8007984 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800796a:	f113 0f0d 	cmn.w	r3, #13
 800796e:	d102      	bne.n	8007976 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007970:	f06f 030c 	mvn.w	r3, #12
 8007974:	e006      	b.n	8007984 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800797c:	f06f 0304 	mvn.w	r3, #4
 8007980:	e000      	b.n	8007984 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	bd90      	pop	{r4, r7, pc}
 800798c:	08010818 	.word	0x08010818
 8007990:	08010d28 	.word	0x08010d28
 8007994:	0801085c 	.word	0x0801085c

08007998 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80079a0:	e007      	b.n	80079b2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f80a 	bl	80079c2 <tcp_seg_free>
    seg = next;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1f4      	bne.n	80079a2 <tcp_segs_free+0xa>
  }
}
 80079b8:	bf00      	nop
 80079ba:	bf00      	nop
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b082      	sub	sp, #8
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00c      	beq.n	80079ea <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d004      	beq.n	80079e2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fe fd7d 	bl	80064dc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80079e2:	6879      	ldr	r1, [r7, #4]
 80079e4:	2003      	movs	r0, #3
 80079e6:	f7fd ff03 	bl	80057f0 <memp_free>
  }
}
 80079ea:	bf00      	nop
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
	...

080079f4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d106      	bne.n	8007a10 <tcp_seg_copy+0x1c>
 8007a02:	4b0f      	ldr	r3, [pc, #60]	; (8007a40 <tcp_seg_copy+0x4c>)
 8007a04:	f240 6282 	movw	r2, #1666	; 0x682
 8007a08:	490e      	ldr	r1, [pc, #56]	; (8007a44 <tcp_seg_copy+0x50>)
 8007a0a:	480f      	ldr	r0, [pc, #60]	; (8007a48 <tcp_seg_copy+0x54>)
 8007a0c:	f006 ff7e 	bl	800e90c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007a10:	2003      	movs	r0, #3
 8007a12:	f7fd fe7d 	bl	8005710 <memp_malloc>
 8007a16:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <tcp_seg_copy+0x2e>
    return NULL;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	e00a      	b.n	8007a38 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007a22:	2210      	movs	r2, #16
 8007a24:	6879      	ldr	r1, [r7, #4]
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f006 ff40 	bl	800e8ac <memcpy>
  pbuf_ref(cseg->p);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fe fdf3 	bl	800661c <pbuf_ref>
  return cseg;
 8007a36:	68fb      	ldr	r3, [r7, #12]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	08010818 	.word	0x08010818
 8007a44:	08010d6c 	.word	0x08010d6c
 8007a48:	0801085c 	.word	0x0801085c

08007a4c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
 8007a58:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d109      	bne.n	8007a74 <tcp_recv_null+0x28>
 8007a60:	4b12      	ldr	r3, [pc, #72]	; (8007aac <tcp_recv_null+0x60>)
 8007a62:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007a66:	4912      	ldr	r1, [pc, #72]	; (8007ab0 <tcp_recv_null+0x64>)
 8007a68:	4812      	ldr	r0, [pc, #72]	; (8007ab4 <tcp_recv_null+0x68>)
 8007a6a:	f006 ff4f 	bl	800e90c <iprintf>
 8007a6e:	f06f 030f 	mvn.w	r3, #15
 8007a72:	e016      	b.n	8007aa2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d009      	beq.n	8007a8e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	891b      	ldrh	r3, [r3, #8]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	68b8      	ldr	r0, [r7, #8]
 8007a82:	f7ff fb19 	bl	80070b8 <tcp_recved>
    pbuf_free(p);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7fe fd28 	bl	80064dc <pbuf_free>
 8007a8c:	e008      	b.n	8007aa0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007a8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d104      	bne.n	8007aa0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007a96:	68b8      	ldr	r0, [r7, #8]
 8007a98:	f7ff f9be 	bl	8006e18 <tcp_close>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	e000      	b.n	8007aa2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	08010818 	.word	0x08010818
 8007ab0:	08010d88 	.word	0x08010d88
 8007ab4:	0801085c 	.word	0x0801085c

08007ab8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	db01      	blt.n	8007ace <tcp_kill_prio+0x16>
 8007aca:	79fb      	ldrb	r3, [r7, #7]
 8007acc:	e000      	b.n	8007ad0 <tcp_kill_prio+0x18>
 8007ace:	237f      	movs	r3, #127	; 0x7f
 8007ad0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007ad2:	7afb      	ldrb	r3, [r7, #11]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d034      	beq.n	8007b42 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007ad8:	7afb      	ldrb	r3, [r7, #11]
 8007ada:	3b01      	subs	r3, #1
 8007adc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ae6:	4b19      	ldr	r3, [pc, #100]	; (8007b4c <tcp_kill_prio+0x94>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	617b      	str	r3, [r7, #20]
 8007aec:	e01f      	b.n	8007b2e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	7d5b      	ldrb	r3, [r3, #21]
 8007af2:	7afa      	ldrb	r2, [r7, #11]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d80c      	bhi.n	8007b12 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007afc:	7afa      	ldrb	r2, [r7, #11]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d112      	bne.n	8007b28 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007b02:	4b13      	ldr	r3, [pc, #76]	; (8007b50 <tcp_kill_prio+0x98>)
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d80a      	bhi.n	8007b28 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007b12:	4b0f      	ldr	r3, [pc, #60]	; (8007b50 <tcp_kill_prio+0x98>)
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	7d5b      	ldrb	r3, [r3, #21]
 8007b26:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	617b      	str	r3, [r7, #20]
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1dc      	bne.n	8007aee <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d004      	beq.n	8007b44 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007b3a:	6938      	ldr	r0, [r7, #16]
 8007b3c:	f7ff fa56 	bl	8006fec <tcp_abort>
 8007b40:	e000      	b.n	8007b44 <tcp_kill_prio+0x8c>
    return;
 8007b42:	bf00      	nop
  }
}
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	2000830c 	.word	0x2000830c
 8007b50:	20008300 	.word	0x20008300

08007b54 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007b5e:	79fb      	ldrb	r3, [r7, #7]
 8007b60:	2b08      	cmp	r3, #8
 8007b62:	d009      	beq.n	8007b78 <tcp_kill_state+0x24>
 8007b64:	79fb      	ldrb	r3, [r7, #7]
 8007b66:	2b09      	cmp	r3, #9
 8007b68:	d006      	beq.n	8007b78 <tcp_kill_state+0x24>
 8007b6a:	4b1a      	ldr	r3, [pc, #104]	; (8007bd4 <tcp_kill_state+0x80>)
 8007b6c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007b70:	4919      	ldr	r1, [pc, #100]	; (8007bd8 <tcp_kill_state+0x84>)
 8007b72:	481a      	ldr	r0, [pc, #104]	; (8007bdc <tcp_kill_state+0x88>)
 8007b74:	f006 feca 	bl	800e90c <iprintf>

  inactivity = 0;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b80:	4b17      	ldr	r3, [pc, #92]	; (8007be0 <tcp_kill_state+0x8c>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	617b      	str	r3, [r7, #20]
 8007b86:	e017      	b.n	8007bb8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	7d1b      	ldrb	r3, [r3, #20]
 8007b8c:	79fa      	ldrb	r2, [r7, #7]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d10f      	bne.n	8007bb2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007b92:	4b14      	ldr	r3, [pc, #80]	; (8007be4 <tcp_kill_state+0x90>)
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d807      	bhi.n	8007bb2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007ba2:	4b10      	ldr	r3, [pc, #64]	; (8007be4 <tcp_kill_state+0x90>)
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	617b      	str	r3, [r7, #20]
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1e4      	bne.n	8007b88 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d003      	beq.n	8007bcc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	6938      	ldr	r0, [r7, #16]
 8007bc8:	f7ff f952 	bl	8006e70 <tcp_abandon>
  }
}
 8007bcc:	bf00      	nop
 8007bce:	3718      	adds	r7, #24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	08010818 	.word	0x08010818
 8007bd8:	08010da4 	.word	0x08010da4
 8007bdc:	0801085c 	.word	0x0801085c
 8007be0:	2000830c 	.word	0x2000830c
 8007be4:	20008300 	.word	0x20008300

08007be8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007bf6:	4b12      	ldr	r3, [pc, #72]	; (8007c40 <tcp_kill_timewait+0x58>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	60fb      	str	r3, [r7, #12]
 8007bfc:	e012      	b.n	8007c24 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007bfe:	4b11      	ldr	r3, [pc, #68]	; (8007c44 <tcp_kill_timewait+0x5c>)
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d807      	bhi.n	8007c1e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007c0e:	4b0d      	ldr	r3, [pc, #52]	; (8007c44 <tcp_kill_timewait+0x5c>)
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1e9      	bne.n	8007bfe <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d002      	beq.n	8007c36 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007c30:	68b8      	ldr	r0, [r7, #8]
 8007c32:	f7ff f9db 	bl	8006fec <tcp_abort>
  }
}
 8007c36:	bf00      	nop
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	20008310 	.word	0x20008310
 8007c44:	20008300 	.word	0x20008300

08007c48 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007c4e:	4b10      	ldr	r3, [pc, #64]	; (8007c90 <tcp_handle_closepend+0x48>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007c54:	e014      	b.n	8007c80 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	8b5b      	ldrh	r3, [r3, #26]
 8007c60:	f003 0308 	and.w	r3, r3, #8
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d009      	beq.n	8007c7c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	8b5b      	ldrh	r3, [r3, #26]
 8007c6c:	f023 0308 	bic.w	r3, r3, #8
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7ff f864 	bl	8006d44 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1e7      	bne.n	8007c56 <tcp_handle_closepend+0xe>
  }
}
 8007c86:	bf00      	nop
 8007c88:	bf00      	nop
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	2000830c 	.word	0x2000830c

08007c94 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007c9e:	2001      	movs	r0, #1
 8007ca0:	f7fd fd36 	bl	8005710 <memp_malloc>
 8007ca4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d126      	bne.n	8007cfa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007cac:	f7ff ffcc 	bl	8007c48 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007cb0:	f7ff ff9a 	bl	8007be8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007cb4:	2001      	movs	r0, #1
 8007cb6:	f7fd fd2b 	bl	8005710 <memp_malloc>
 8007cba:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d11b      	bne.n	8007cfa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007cc2:	2009      	movs	r0, #9
 8007cc4:	f7ff ff46 	bl	8007b54 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007cc8:	2001      	movs	r0, #1
 8007cca:	f7fd fd21 	bl	8005710 <memp_malloc>
 8007cce:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d111      	bne.n	8007cfa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007cd6:	2008      	movs	r0, #8
 8007cd8:	f7ff ff3c 	bl	8007b54 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007cdc:	2001      	movs	r0, #1
 8007cde:	f7fd fd17 	bl	8005710 <memp_malloc>
 8007ce2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d107      	bne.n	8007cfa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007cea:	79fb      	ldrb	r3, [r7, #7]
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7ff fee3 	bl	8007ab8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007cf2:	2001      	movs	r0, #1
 8007cf4:	f7fd fd0c 	bl	8005710 <memp_malloc>
 8007cf8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d03f      	beq.n	8007d80 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007d00:	229c      	movs	r2, #156	; 0x9c
 8007d02:	2100      	movs	r1, #0
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f006 fdf9 	bl	800e8fc <memset>
    pcb->prio = prio;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	79fa      	ldrb	r2, [r7, #7]
 8007d0e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007d16:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007d20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	22ff      	movs	r2, #255	; 0xff
 8007d2e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007d36:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2206      	movs	r2, #6
 8007d3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2206      	movs	r2, #6
 8007d44:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d4c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007d56:	4b0d      	ldr	r3, [pc, #52]	; (8007d8c <tcp_alloc+0xf8>)
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007d5e:	4b0c      	ldr	r3, [pc, #48]	; (8007d90 <tcp_alloc+0xfc>)
 8007d60:	781a      	ldrb	r2, [r3, #0]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007d6c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	4a08      	ldr	r2, [pc, #32]	; (8007d94 <tcp_alloc+0x100>)
 8007d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4a07      	ldr	r2, [pc, #28]	; (8007d98 <tcp_alloc+0x104>)
 8007d7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007d80:	68fb      	ldr	r3, [r7, #12]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20008300 	.word	0x20008300
 8007d90:	20008316 	.word	0x20008316
 8007d94:	08007a4d 	.word	0x08007a4d
 8007d98:	006ddd00 	.word	0x006ddd00

08007d9c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d107      	bne.n	8007dba <tcp_pcb_purge+0x1e>
 8007daa:	4b21      	ldr	r3, [pc, #132]	; (8007e30 <tcp_pcb_purge+0x94>)
 8007dac:	f640 0251 	movw	r2, #2129	; 0x851
 8007db0:	4920      	ldr	r1, [pc, #128]	; (8007e34 <tcp_pcb_purge+0x98>)
 8007db2:	4821      	ldr	r0, [pc, #132]	; (8007e38 <tcp_pcb_purge+0x9c>)
 8007db4:	f006 fdaa 	bl	800e90c <iprintf>
 8007db8:	e037      	b.n	8007e2a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	7d1b      	ldrb	r3, [r3, #20]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d033      	beq.n	8007e2a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007dc6:	2b0a      	cmp	r3, #10
 8007dc8:	d02f      	beq.n	8007e2a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d02b      	beq.n	8007e2a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d007      	beq.n	8007dea <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fe fb7c 	bl	80064dc <pbuf_free>
      pcb->refused_data = NULL;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d002      	beq.n	8007df8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f986 	bl	8008104 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dfe:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7ff fdc7 	bl	8007998 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7ff fdc2 	bl	8007998 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	66da      	str	r2, [r3, #108]	; 0x6c
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	08010818 	.word	0x08010818
 8007e34:	08010e64 	.word	0x08010e64
 8007e38:	0801085c 	.word	0x0801085c

08007e3c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d106      	bne.n	8007e5a <tcp_pcb_remove+0x1e>
 8007e4c:	4b3e      	ldr	r3, [pc, #248]	; (8007f48 <tcp_pcb_remove+0x10c>)
 8007e4e:	f640 0283 	movw	r2, #2179	; 0x883
 8007e52:	493e      	ldr	r1, [pc, #248]	; (8007f4c <tcp_pcb_remove+0x110>)
 8007e54:	483e      	ldr	r0, [pc, #248]	; (8007f50 <tcp_pcb_remove+0x114>)
 8007e56:	f006 fd59 	bl	800e90c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d106      	bne.n	8007e6e <tcp_pcb_remove+0x32>
 8007e60:	4b39      	ldr	r3, [pc, #228]	; (8007f48 <tcp_pcb_remove+0x10c>)
 8007e62:	f640 0284 	movw	r2, #2180	; 0x884
 8007e66:	493b      	ldr	r1, [pc, #236]	; (8007f54 <tcp_pcb_remove+0x118>)
 8007e68:	4839      	ldr	r0, [pc, #228]	; (8007f50 <tcp_pcb_remove+0x114>)
 8007e6a:	f006 fd4f 	bl	800e90c <iprintf>

  TCP_RMV(pcblist, pcb);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d105      	bne.n	8007e84 <tcp_pcb_remove+0x48>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68da      	ldr	r2, [r3, #12]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	e013      	b.n	8007eac <tcp_pcb_remove+0x70>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	60fb      	str	r3, [r7, #12]
 8007e8a:	e00c      	b.n	8007ea6 <tcp_pcb_remove+0x6a>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d104      	bne.n	8007ea0 <tcp_pcb_remove+0x64>
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	68da      	ldr	r2, [r3, #12]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	60da      	str	r2, [r3, #12]
 8007e9e:	e005      	b.n	8007eac <tcp_pcb_remove+0x70>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	60fb      	str	r3, [r7, #12]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1ef      	bne.n	8007e8c <tcp_pcb_remove+0x50>
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007eb2:	6838      	ldr	r0, [r7, #0]
 8007eb4:	f7ff ff72 	bl	8007d9c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	7d1b      	ldrb	r3, [r3, #20]
 8007ebc:	2b0a      	cmp	r3, #10
 8007ebe:	d013      	beq.n	8007ee8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d00f      	beq.n	8007ee8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	8b5b      	ldrh	r3, [r3, #26]
 8007ecc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d009      	beq.n	8007ee8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	8b5b      	ldrh	r3, [r3, #26]
 8007ed8:	f043 0302 	orr.w	r3, r3, #2
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007ee2:	6838      	ldr	r0, [r7, #0]
 8007ee4:	f002 ff6e 	bl	800adc4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	7d1b      	ldrb	r3, [r3, #20]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d020      	beq.n	8007f32 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d006      	beq.n	8007f06 <tcp_pcb_remove+0xca>
 8007ef8:	4b13      	ldr	r3, [pc, #76]	; (8007f48 <tcp_pcb_remove+0x10c>)
 8007efa:	f640 0293 	movw	r2, #2195	; 0x893
 8007efe:	4916      	ldr	r1, [pc, #88]	; (8007f58 <tcp_pcb_remove+0x11c>)
 8007f00:	4813      	ldr	r0, [pc, #76]	; (8007f50 <tcp_pcb_remove+0x114>)
 8007f02:	f006 fd03 	bl	800e90c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d006      	beq.n	8007f1c <tcp_pcb_remove+0xe0>
 8007f0e:	4b0e      	ldr	r3, [pc, #56]	; (8007f48 <tcp_pcb_remove+0x10c>)
 8007f10:	f640 0294 	movw	r2, #2196	; 0x894
 8007f14:	4911      	ldr	r1, [pc, #68]	; (8007f5c <tcp_pcb_remove+0x120>)
 8007f16:	480e      	ldr	r0, [pc, #56]	; (8007f50 <tcp_pcb_remove+0x114>)
 8007f18:	f006 fcf8 	bl	800e90c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d006      	beq.n	8007f32 <tcp_pcb_remove+0xf6>
 8007f24:	4b08      	ldr	r3, [pc, #32]	; (8007f48 <tcp_pcb_remove+0x10c>)
 8007f26:	f640 0296 	movw	r2, #2198	; 0x896
 8007f2a:	490d      	ldr	r1, [pc, #52]	; (8007f60 <tcp_pcb_remove+0x124>)
 8007f2c:	4808      	ldr	r0, [pc, #32]	; (8007f50 <tcp_pcb_remove+0x114>)
 8007f2e:	f006 fced 	bl	800e90c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	2200      	movs	r2, #0
 8007f36:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007f3e:	bf00      	nop
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	08010818 	.word	0x08010818
 8007f4c:	08010e80 	.word	0x08010e80
 8007f50:	0801085c 	.word	0x0801085c
 8007f54:	08010e9c 	.word	0x08010e9c
 8007f58:	08010ebc 	.word	0x08010ebc
 8007f5c:	08010ed4 	.word	0x08010ed4
 8007f60:	08010ef0 	.word	0x08010ef0

08007f64 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d106      	bne.n	8007f80 <tcp_next_iss+0x1c>
 8007f72:	4b0a      	ldr	r3, [pc, #40]	; (8007f9c <tcp_next_iss+0x38>)
 8007f74:	f640 02af 	movw	r2, #2223	; 0x8af
 8007f78:	4909      	ldr	r1, [pc, #36]	; (8007fa0 <tcp_next_iss+0x3c>)
 8007f7a:	480a      	ldr	r0, [pc, #40]	; (8007fa4 <tcp_next_iss+0x40>)
 8007f7c:	f006 fcc6 	bl	800e90c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007f80:	4b09      	ldr	r3, [pc, #36]	; (8007fa8 <tcp_next_iss+0x44>)
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	4b09      	ldr	r3, [pc, #36]	; (8007fac <tcp_next_iss+0x48>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4413      	add	r3, r2
 8007f8a:	4a07      	ldr	r2, [pc, #28]	; (8007fa8 <tcp_next_iss+0x44>)
 8007f8c:	6013      	str	r3, [r2, #0]
  return iss;
 8007f8e:	4b06      	ldr	r3, [pc, #24]	; (8007fa8 <tcp_next_iss+0x44>)
 8007f90:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	08010818 	.word	0x08010818
 8007fa0:	08010f08 	.word	0x08010f08
 8007fa4:	0801085c 	.word	0x0801085c
 8007fa8:	20000054 	.word	0x20000054
 8007fac:	20008300 	.word	0x20008300

08007fb0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]
 8007fbc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d106      	bne.n	8007fd2 <tcp_eff_send_mss_netif+0x22>
 8007fc4:	4b14      	ldr	r3, [pc, #80]	; (8008018 <tcp_eff_send_mss_netif+0x68>)
 8007fc6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007fca:	4914      	ldr	r1, [pc, #80]	; (800801c <tcp_eff_send_mss_netif+0x6c>)
 8007fcc:	4814      	ldr	r0, [pc, #80]	; (8008020 <tcp_eff_send_mss_netif+0x70>)
 8007fce:	f006 fc9d 	bl	800e90c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007fd8:	89fb      	ldrh	r3, [r7, #14]
 8007fda:	e019      	b.n	8008010 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007fe0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007fe2:	8afb      	ldrh	r3, [r7, #22]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d012      	beq.n	800800e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007fe8:	2328      	movs	r3, #40	; 0x28
 8007fea:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007fec:	8afa      	ldrh	r2, [r7, #22]
 8007fee:	8abb      	ldrh	r3, [r7, #20]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d904      	bls.n	8007ffe <tcp_eff_send_mss_netif+0x4e>
 8007ff4:	8afa      	ldrh	r2, [r7, #22]
 8007ff6:	8abb      	ldrh	r3, [r7, #20]
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	e000      	b.n	8008000 <tcp_eff_send_mss_netif+0x50>
 8007ffe:	2300      	movs	r3, #0
 8008000:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008002:	8a7a      	ldrh	r2, [r7, #18]
 8008004:	89fb      	ldrh	r3, [r7, #14]
 8008006:	4293      	cmp	r3, r2
 8008008:	bf28      	it	cs
 800800a:	4613      	movcs	r3, r2
 800800c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800800e:	89fb      	ldrh	r3, [r7, #14]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3718      	adds	r7, #24
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	08010818 	.word	0x08010818
 800801c:	08010f24 	.word	0x08010f24
 8008020:	0801085c 	.word	0x0801085c

08008024 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d119      	bne.n	800806c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008038:	4b10      	ldr	r3, [pc, #64]	; (800807c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800803a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800803e:	4910      	ldr	r1, [pc, #64]	; (8008080 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008040:	4810      	ldr	r0, [pc, #64]	; (8008084 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008042:	f006 fc63 	bl	800e90c <iprintf>

  while (pcb != NULL) {
 8008046:	e011      	b.n	800806c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	429a      	cmp	r2, r3
 8008052:	d108      	bne.n	8008066 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	f7fe ffc6 	bl	8006fec <tcp_abort>
      pcb = next;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	60fb      	str	r3, [r7, #12]
 8008064:	e002      	b.n	800806c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1ea      	bne.n	8008048 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008072:	bf00      	nop
 8008074:	bf00      	nop
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	08010818 	.word	0x08010818
 8008080:	08010f4c 	.word	0x08010f4c
 8008084:	0801085c 	.word	0x0801085c

08008088 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d02a      	beq.n	80080ee <tcp_netif_ip_addr_changed+0x66>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d026      	beq.n	80080ee <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80080a0:	4b15      	ldr	r3, [pc, #84]	; (80080f8 <tcp_netif_ip_addr_changed+0x70>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4619      	mov	r1, r3
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7ff ffbc 	bl	8008024 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80080ac:	4b13      	ldr	r3, [pc, #76]	; (80080fc <tcp_netif_ip_addr_changed+0x74>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4619      	mov	r1, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7ff ffb6 	bl	8008024 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d017      	beq.n	80080ee <tcp_netif_ip_addr_changed+0x66>
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d013      	beq.n	80080ee <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80080c6:	4b0e      	ldr	r3, [pc, #56]	; (8008100 <tcp_netif_ip_addr_changed+0x78>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	e00c      	b.n	80080e8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d103      	bne.n	80080e2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1ef      	bne.n	80080ce <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80080ee:	bf00      	nop
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	2000830c 	.word	0x2000830c
 80080fc:	20008304 	.word	0x20008304
 8008100:	20008308 	.word	0x20008308

08008104 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008110:	2b00      	cmp	r3, #0
 8008112:	d007      	beq.n	8008124 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008118:	4618      	mov	r0, r3
 800811a:	f7ff fc3d 	bl	8007998 <tcp_segs_free>
    pcb->ooseq = NULL;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008124:	bf00      	nop
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800812c:	b590      	push	{r4, r7, lr}
 800812e:	b08d      	sub	sp, #52	; 0x34
 8008130:	af04      	add	r7, sp, #16
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d105      	bne.n	8008148 <tcp_input+0x1c>
 800813c:	4b9b      	ldr	r3, [pc, #620]	; (80083ac <tcp_input+0x280>)
 800813e:	2283      	movs	r2, #131	; 0x83
 8008140:	499b      	ldr	r1, [pc, #620]	; (80083b0 <tcp_input+0x284>)
 8008142:	489c      	ldr	r0, [pc, #624]	; (80083b4 <tcp_input+0x288>)
 8008144:	f006 fbe2 	bl	800e90c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	4a9a      	ldr	r2, [pc, #616]	; (80083b8 <tcp_input+0x28c>)
 800814e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	895b      	ldrh	r3, [r3, #10]
 8008154:	2b13      	cmp	r3, #19
 8008156:	f240 83d1 	bls.w	80088fc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800815a:	4b98      	ldr	r3, [pc, #608]	; (80083bc <tcp_input+0x290>)
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	4a97      	ldr	r2, [pc, #604]	; (80083bc <tcp_input+0x290>)
 8008160:	6812      	ldr	r2, [r2, #0]
 8008162:	4611      	mov	r1, r2
 8008164:	4618      	mov	r0, r3
 8008166:	f005 fc17 	bl	800d998 <ip4_addr_isbroadcast_u32>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	f040 83c7 	bne.w	8008900 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008172:	4b92      	ldr	r3, [pc, #584]	; (80083bc <tcp_input+0x290>)
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800817a:	2be0      	cmp	r3, #224	; 0xe0
 800817c:	f000 83c0 	beq.w	8008900 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008180:	4b8d      	ldr	r3, [pc, #564]	; (80083b8 <tcp_input+0x28c>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	899b      	ldrh	r3, [r3, #12]
 8008186:	b29b      	uxth	r3, r3
 8008188:	4618      	mov	r0, r3
 800818a:	f7fc fe49 	bl	8004e20 <lwip_htons>
 800818e:	4603      	mov	r3, r0
 8008190:	0b1b      	lsrs	r3, r3, #12
 8008192:	b29b      	uxth	r3, r3
 8008194:	b2db      	uxtb	r3, r3
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800819a:	7cbb      	ldrb	r3, [r7, #18]
 800819c:	2b13      	cmp	r3, #19
 800819e:	f240 83b1 	bls.w	8008904 <tcp_input+0x7d8>
 80081a2:	7cbb      	ldrb	r3, [r7, #18]
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	891b      	ldrh	r3, [r3, #8]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	f200 83aa 	bhi.w	8008904 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80081b0:	7cbb      	ldrb	r3, [r7, #18]
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	3b14      	subs	r3, #20
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	4b81      	ldr	r3, [pc, #516]	; (80083c0 <tcp_input+0x294>)
 80081ba:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80081bc:	4b81      	ldr	r3, [pc, #516]	; (80083c4 <tcp_input+0x298>)
 80081be:	2200      	movs	r2, #0
 80081c0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	895a      	ldrh	r2, [r3, #10]
 80081c6:	7cbb      	ldrb	r3, [r7, #18]
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d309      	bcc.n	80081e2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80081ce:	4b7c      	ldr	r3, [pc, #496]	; (80083c0 <tcp_input+0x294>)
 80081d0:	881a      	ldrh	r2, [r3, #0]
 80081d2:	4b7d      	ldr	r3, [pc, #500]	; (80083c8 <tcp_input+0x29c>)
 80081d4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80081d6:	7cbb      	ldrb	r3, [r7, #18]
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7fe f8f8 	bl	80063d0 <pbuf_remove_header>
 80081e0:	e04e      	b.n	8008280 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d105      	bne.n	80081f6 <tcp_input+0xca>
 80081ea:	4b70      	ldr	r3, [pc, #448]	; (80083ac <tcp_input+0x280>)
 80081ec:	22c2      	movs	r2, #194	; 0xc2
 80081ee:	4977      	ldr	r1, [pc, #476]	; (80083cc <tcp_input+0x2a0>)
 80081f0:	4870      	ldr	r0, [pc, #448]	; (80083b4 <tcp_input+0x288>)
 80081f2:	f006 fb8b 	bl	800e90c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80081f6:	2114      	movs	r1, #20
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7fe f8e9 	bl	80063d0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	895a      	ldrh	r2, [r3, #10]
 8008202:	4b71      	ldr	r3, [pc, #452]	; (80083c8 <tcp_input+0x29c>)
 8008204:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008206:	4b6e      	ldr	r3, [pc, #440]	; (80083c0 <tcp_input+0x294>)
 8008208:	881a      	ldrh	r2, [r3, #0]
 800820a:	4b6f      	ldr	r3, [pc, #444]	; (80083c8 <tcp_input+0x29c>)
 800820c:	881b      	ldrh	r3, [r3, #0]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008212:	4b6d      	ldr	r3, [pc, #436]	; (80083c8 <tcp_input+0x29c>)
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	4619      	mov	r1, r3
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7fe f8d9 	bl	80063d0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	895b      	ldrh	r3, [r3, #10]
 8008224:	8a3a      	ldrh	r2, [r7, #16]
 8008226:	429a      	cmp	r2, r3
 8008228:	f200 836e 	bhi.w	8008908 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	4a64      	ldr	r2, [pc, #400]	; (80083c4 <tcp_input+0x298>)
 8008234:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	8a3a      	ldrh	r2, [r7, #16]
 800823c:	4611      	mov	r1, r2
 800823e:	4618      	mov	r0, r3
 8008240:	f7fe f8c6 	bl	80063d0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	891a      	ldrh	r2, [r3, #8]
 8008248:	8a3b      	ldrh	r3, [r7, #16]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	b29a      	uxth	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	895b      	ldrh	r3, [r3, #10]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d005      	beq.n	8008266 <tcp_input+0x13a>
 800825a:	4b54      	ldr	r3, [pc, #336]	; (80083ac <tcp_input+0x280>)
 800825c:	22df      	movs	r2, #223	; 0xdf
 800825e:	495c      	ldr	r1, [pc, #368]	; (80083d0 <tcp_input+0x2a4>)
 8008260:	4854      	ldr	r0, [pc, #336]	; (80083b4 <tcp_input+0x288>)
 8008262:	f006 fb53 	bl	800e90c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	891a      	ldrh	r2, [r3, #8]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	891b      	ldrh	r3, [r3, #8]
 8008270:	429a      	cmp	r2, r3
 8008272:	d005      	beq.n	8008280 <tcp_input+0x154>
 8008274:	4b4d      	ldr	r3, [pc, #308]	; (80083ac <tcp_input+0x280>)
 8008276:	22e0      	movs	r2, #224	; 0xe0
 8008278:	4956      	ldr	r1, [pc, #344]	; (80083d4 <tcp_input+0x2a8>)
 800827a:	484e      	ldr	r0, [pc, #312]	; (80083b4 <tcp_input+0x288>)
 800827c:	f006 fb46 	bl	800e90c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008280:	4b4d      	ldr	r3, [pc, #308]	; (80083b8 <tcp_input+0x28c>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	881b      	ldrh	r3, [r3, #0]
 8008286:	b29b      	uxth	r3, r3
 8008288:	4a4b      	ldr	r2, [pc, #300]	; (80083b8 <tcp_input+0x28c>)
 800828a:	6814      	ldr	r4, [r2, #0]
 800828c:	4618      	mov	r0, r3
 800828e:	f7fc fdc7 	bl	8004e20 <lwip_htons>
 8008292:	4603      	mov	r3, r0
 8008294:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008296:	4b48      	ldr	r3, [pc, #288]	; (80083b8 <tcp_input+0x28c>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	885b      	ldrh	r3, [r3, #2]
 800829c:	b29b      	uxth	r3, r3
 800829e:	4a46      	ldr	r2, [pc, #280]	; (80083b8 <tcp_input+0x28c>)
 80082a0:	6814      	ldr	r4, [r2, #0]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7fc fdbc 	bl	8004e20 <lwip_htons>
 80082a8:	4603      	mov	r3, r0
 80082aa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80082ac:	4b42      	ldr	r3, [pc, #264]	; (80083b8 <tcp_input+0x28c>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	4a41      	ldr	r2, [pc, #260]	; (80083b8 <tcp_input+0x28c>)
 80082b4:	6814      	ldr	r4, [r2, #0]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fc fdc7 	bl	8004e4a <lwip_htonl>
 80082bc:	4603      	mov	r3, r0
 80082be:	6063      	str	r3, [r4, #4]
 80082c0:	6863      	ldr	r3, [r4, #4]
 80082c2:	4a45      	ldr	r2, [pc, #276]	; (80083d8 <tcp_input+0x2ac>)
 80082c4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80082c6:	4b3c      	ldr	r3, [pc, #240]	; (80083b8 <tcp_input+0x28c>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	4a3a      	ldr	r2, [pc, #232]	; (80083b8 <tcp_input+0x28c>)
 80082ce:	6814      	ldr	r4, [r2, #0]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7fc fdba 	bl	8004e4a <lwip_htonl>
 80082d6:	4603      	mov	r3, r0
 80082d8:	60a3      	str	r3, [r4, #8]
 80082da:	68a3      	ldr	r3, [r4, #8]
 80082dc:	4a3f      	ldr	r2, [pc, #252]	; (80083dc <tcp_input+0x2b0>)
 80082de:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80082e0:	4b35      	ldr	r3, [pc, #212]	; (80083b8 <tcp_input+0x28c>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	89db      	ldrh	r3, [r3, #14]
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	4a33      	ldr	r2, [pc, #204]	; (80083b8 <tcp_input+0x28c>)
 80082ea:	6814      	ldr	r4, [r2, #0]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fc fd97 	bl	8004e20 <lwip_htons>
 80082f2:	4603      	mov	r3, r0
 80082f4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80082f6:	4b30      	ldr	r3, [pc, #192]	; (80083b8 <tcp_input+0x28c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	899b      	ldrh	r3, [r3, #12]
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fc fd8e 	bl	8004e20 <lwip_htons>
 8008304:	4603      	mov	r3, r0
 8008306:	b2db      	uxtb	r3, r3
 8008308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800830c:	b2da      	uxtb	r2, r3
 800830e:	4b34      	ldr	r3, [pc, #208]	; (80083e0 <tcp_input+0x2b4>)
 8008310:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	891a      	ldrh	r2, [r3, #8]
 8008316:	4b33      	ldr	r3, [pc, #204]	; (80083e4 <tcp_input+0x2b8>)
 8008318:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800831a:	4b31      	ldr	r3, [pc, #196]	; (80083e0 <tcp_input+0x2b4>)
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	f003 0303 	and.w	r3, r3, #3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00c      	beq.n	8008340 <tcp_input+0x214>
    tcplen++;
 8008326:	4b2f      	ldr	r3, [pc, #188]	; (80083e4 <tcp_input+0x2b8>)
 8008328:	881b      	ldrh	r3, [r3, #0]
 800832a:	3301      	adds	r3, #1
 800832c:	b29a      	uxth	r2, r3
 800832e:	4b2d      	ldr	r3, [pc, #180]	; (80083e4 <tcp_input+0x2b8>)
 8008330:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	891a      	ldrh	r2, [r3, #8]
 8008336:	4b2b      	ldr	r3, [pc, #172]	; (80083e4 <tcp_input+0x2b8>)
 8008338:	881b      	ldrh	r3, [r3, #0]
 800833a:	429a      	cmp	r2, r3
 800833c:	f200 82e6 	bhi.w	800890c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008340:	2300      	movs	r3, #0
 8008342:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008344:	4b28      	ldr	r3, [pc, #160]	; (80083e8 <tcp_input+0x2bc>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	61fb      	str	r3, [r7, #28]
 800834a:	e09d      	b.n	8008488 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	7d1b      	ldrb	r3, [r3, #20]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d105      	bne.n	8008360 <tcp_input+0x234>
 8008354:	4b15      	ldr	r3, [pc, #84]	; (80083ac <tcp_input+0x280>)
 8008356:	22fb      	movs	r2, #251	; 0xfb
 8008358:	4924      	ldr	r1, [pc, #144]	; (80083ec <tcp_input+0x2c0>)
 800835a:	4816      	ldr	r0, [pc, #88]	; (80083b4 <tcp_input+0x288>)
 800835c:	f006 fad6 	bl	800e90c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	7d1b      	ldrb	r3, [r3, #20]
 8008364:	2b0a      	cmp	r3, #10
 8008366:	d105      	bne.n	8008374 <tcp_input+0x248>
 8008368:	4b10      	ldr	r3, [pc, #64]	; (80083ac <tcp_input+0x280>)
 800836a:	22fc      	movs	r2, #252	; 0xfc
 800836c:	4920      	ldr	r1, [pc, #128]	; (80083f0 <tcp_input+0x2c4>)
 800836e:	4811      	ldr	r0, [pc, #68]	; (80083b4 <tcp_input+0x288>)
 8008370:	f006 facc 	bl	800e90c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	7d1b      	ldrb	r3, [r3, #20]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d105      	bne.n	8008388 <tcp_input+0x25c>
 800837c:	4b0b      	ldr	r3, [pc, #44]	; (80083ac <tcp_input+0x280>)
 800837e:	22fd      	movs	r2, #253	; 0xfd
 8008380:	491c      	ldr	r1, [pc, #112]	; (80083f4 <tcp_input+0x2c8>)
 8008382:	480c      	ldr	r0, [pc, #48]	; (80083b4 <tcp_input+0x288>)
 8008384:	f006 fac2 	bl	800e90c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	7a1b      	ldrb	r3, [r3, #8]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d033      	beq.n	80083f8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	7a1a      	ldrb	r2, [r3, #8]
 8008394:	4b09      	ldr	r3, [pc, #36]	; (80083bc <tcp_input+0x290>)
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800839c:	3301      	adds	r3, #1
 800839e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d029      	beq.n	80083f8 <tcp_input+0x2cc>
      prev = pcb;
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	61bb      	str	r3, [r7, #24]
      continue;
 80083a8:	e06b      	b.n	8008482 <tcp_input+0x356>
 80083aa:	bf00      	nop
 80083ac:	08010f80 	.word	0x08010f80
 80083b0:	08010fb4 	.word	0x08010fb4
 80083b4:	08010fcc 	.word	0x08010fcc
 80083b8:	20008328 	.word	0x20008328
 80083bc:	20004d90 	.word	0x20004d90
 80083c0:	2000832c 	.word	0x2000832c
 80083c4:	20008330 	.word	0x20008330
 80083c8:	2000832e 	.word	0x2000832e
 80083cc:	08010ff4 	.word	0x08010ff4
 80083d0:	08011004 	.word	0x08011004
 80083d4:	08011010 	.word	0x08011010
 80083d8:	20008338 	.word	0x20008338
 80083dc:	2000833c 	.word	0x2000833c
 80083e0:	20008344 	.word	0x20008344
 80083e4:	20008342 	.word	0x20008342
 80083e8:	2000830c 	.word	0x2000830c
 80083ec:	08011030 	.word	0x08011030
 80083f0:	08011058 	.word	0x08011058
 80083f4:	08011084 	.word	0x08011084
    }

    if (pcb->remote_port == tcphdr->src &&
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	8b1a      	ldrh	r2, [r3, #24]
 80083fc:	4b72      	ldr	r3, [pc, #456]	; (80085c8 <tcp_input+0x49c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	881b      	ldrh	r3, [r3, #0]
 8008402:	b29b      	uxth	r3, r3
 8008404:	429a      	cmp	r2, r3
 8008406:	d13a      	bne.n	800847e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	8ada      	ldrh	r2, [r3, #22]
 800840c:	4b6e      	ldr	r3, [pc, #440]	; (80085c8 <tcp_input+0x49c>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	885b      	ldrh	r3, [r3, #2]
 8008412:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008414:	429a      	cmp	r2, r3
 8008416:	d132      	bne.n	800847e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	4b6b      	ldr	r3, [pc, #428]	; (80085cc <tcp_input+0x4a0>)
 800841e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008420:	429a      	cmp	r2, r3
 8008422:	d12c      	bne.n	800847e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	4b68      	ldr	r3, [pc, #416]	; (80085cc <tcp_input+0x4a0>)
 800842a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800842c:	429a      	cmp	r2, r3
 800842e:	d126      	bne.n	800847e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	69fa      	ldr	r2, [r7, #28]
 8008436:	429a      	cmp	r2, r3
 8008438:	d106      	bne.n	8008448 <tcp_input+0x31c>
 800843a:	4b65      	ldr	r3, [pc, #404]	; (80085d0 <tcp_input+0x4a4>)
 800843c:	f240 120d 	movw	r2, #269	; 0x10d
 8008440:	4964      	ldr	r1, [pc, #400]	; (80085d4 <tcp_input+0x4a8>)
 8008442:	4865      	ldr	r0, [pc, #404]	; (80085d8 <tcp_input+0x4ac>)
 8008444:	f006 fa62 	bl	800e90c <iprintf>
      if (prev != NULL) {
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00a      	beq.n	8008464 <tcp_input+0x338>
        prev->next = pcb->next;
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	68da      	ldr	r2, [r3, #12]
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008456:	4b61      	ldr	r3, [pc, #388]	; (80085dc <tcp_input+0x4b0>)
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800845e:	4a5f      	ldr	r2, [pc, #380]	; (80085dc <tcp_input+0x4b0>)
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	69fa      	ldr	r2, [r7, #28]
 800846a:	429a      	cmp	r2, r3
 800846c:	d111      	bne.n	8008492 <tcp_input+0x366>
 800846e:	4b58      	ldr	r3, [pc, #352]	; (80085d0 <tcp_input+0x4a4>)
 8008470:	f240 1215 	movw	r2, #277	; 0x115
 8008474:	495a      	ldr	r1, [pc, #360]	; (80085e0 <tcp_input+0x4b4>)
 8008476:	4858      	ldr	r0, [pc, #352]	; (80085d8 <tcp_input+0x4ac>)
 8008478:	f006 fa48 	bl	800e90c <iprintf>
      break;
 800847c:	e009      	b.n	8008492 <tcp_input+0x366>
    }
    prev = pcb;
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	61fb      	str	r3, [r7, #28]
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	2b00      	cmp	r3, #0
 800848c:	f47f af5e 	bne.w	800834c <tcp_input+0x220>
 8008490:	e000      	b.n	8008494 <tcp_input+0x368>
      break;
 8008492:	bf00      	nop
  }

  if (pcb == NULL) {
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	2b00      	cmp	r3, #0
 8008498:	f040 80aa 	bne.w	80085f0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800849c:	4b51      	ldr	r3, [pc, #324]	; (80085e4 <tcp_input+0x4b8>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	61fb      	str	r3, [r7, #28]
 80084a2:	e03f      	b.n	8008524 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	7d1b      	ldrb	r3, [r3, #20]
 80084a8:	2b0a      	cmp	r3, #10
 80084aa:	d006      	beq.n	80084ba <tcp_input+0x38e>
 80084ac:	4b48      	ldr	r3, [pc, #288]	; (80085d0 <tcp_input+0x4a4>)
 80084ae:	f240 121f 	movw	r2, #287	; 0x11f
 80084b2:	494d      	ldr	r1, [pc, #308]	; (80085e8 <tcp_input+0x4bc>)
 80084b4:	4848      	ldr	r0, [pc, #288]	; (80085d8 <tcp_input+0x4ac>)
 80084b6:	f006 fa29 	bl	800e90c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	7a1b      	ldrb	r3, [r3, #8]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d009      	beq.n	80084d6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	7a1a      	ldrb	r2, [r3, #8]
 80084c6:	4b41      	ldr	r3, [pc, #260]	; (80085cc <tcp_input+0x4a0>)
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084ce:	3301      	adds	r3, #1
 80084d0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d122      	bne.n	800851c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	8b1a      	ldrh	r2, [r3, #24]
 80084da:	4b3b      	ldr	r3, [pc, #236]	; (80085c8 <tcp_input+0x49c>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	881b      	ldrh	r3, [r3, #0]
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d11b      	bne.n	800851e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	8ada      	ldrh	r2, [r3, #22]
 80084ea:	4b37      	ldr	r3, [pc, #220]	; (80085c8 <tcp_input+0x49c>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	885b      	ldrh	r3, [r3, #2]
 80084f0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d113      	bne.n	800851e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	685a      	ldr	r2, [r3, #4]
 80084fa:	4b34      	ldr	r3, [pc, #208]	; (80085cc <tcp_input+0x4a0>)
 80084fc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80084fe:	429a      	cmp	r2, r3
 8008500:	d10d      	bne.n	800851e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	4b31      	ldr	r3, [pc, #196]	; (80085cc <tcp_input+0x4a0>)
 8008508:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800850a:	429a      	cmp	r2, r3
 800850c:	d107      	bne.n	800851e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800850e:	69f8      	ldr	r0, [r7, #28]
 8008510:	f000 fb56 	bl	8008bc0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7fd ffe1 	bl	80064dc <pbuf_free>
        return;
 800851a:	e1fd      	b.n	8008918 <tcp_input+0x7ec>
        continue;
 800851c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	61fb      	str	r3, [r7, #28]
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1bc      	bne.n	80084a4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800852a:	2300      	movs	r3, #0
 800852c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800852e:	4b2f      	ldr	r3, [pc, #188]	; (80085ec <tcp_input+0x4c0>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	617b      	str	r3, [r7, #20]
 8008534:	e02a      	b.n	800858c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	7a1b      	ldrb	r3, [r3, #8]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00c      	beq.n	8008558 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	7a1a      	ldrb	r2, [r3, #8]
 8008542:	4b22      	ldr	r3, [pc, #136]	; (80085cc <tcp_input+0x4a0>)
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800854a:	3301      	adds	r3, #1
 800854c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800854e:	429a      	cmp	r2, r3
 8008550:	d002      	beq.n	8008558 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	61bb      	str	r3, [r7, #24]
        continue;
 8008556:	e016      	b.n	8008586 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	8ada      	ldrh	r2, [r3, #22]
 800855c:	4b1a      	ldr	r3, [pc, #104]	; (80085c8 <tcp_input+0x49c>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	885b      	ldrh	r3, [r3, #2]
 8008562:	b29b      	uxth	r3, r3
 8008564:	429a      	cmp	r2, r3
 8008566:	d10c      	bne.n	8008582 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	4b17      	ldr	r3, [pc, #92]	; (80085cc <tcp_input+0x4a0>)
 800856e:	695b      	ldr	r3, [r3, #20]
 8008570:	429a      	cmp	r2, r3
 8008572:	d00f      	beq.n	8008594 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00d      	beq.n	8008596 <tcp_input+0x46a>
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d009      	beq.n	8008596 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	617b      	str	r3, [r7, #20]
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1d1      	bne.n	8008536 <tcp_input+0x40a>
 8008592:	e000      	b.n	8008596 <tcp_input+0x46a>
            break;
 8008594:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d029      	beq.n	80085f0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00a      	beq.n	80085b8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	68da      	ldr	r2, [r3, #12]
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80085aa:	4b10      	ldr	r3, [pc, #64]	; (80085ec <tcp_input+0x4c0>)
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80085b2:	4a0e      	ldr	r2, [pc, #56]	; (80085ec <tcp_input+0x4c0>)
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80085b8:	6978      	ldr	r0, [r7, #20]
 80085ba:	f000 fa03 	bl	80089c4 <tcp_listen_input>
      }
      pbuf_free(p);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7fd ff8c 	bl	80064dc <pbuf_free>
      return;
 80085c4:	e1a8      	b.n	8008918 <tcp_input+0x7ec>
 80085c6:	bf00      	nop
 80085c8:	20008328 	.word	0x20008328
 80085cc:	20004d90 	.word	0x20004d90
 80085d0:	08010f80 	.word	0x08010f80
 80085d4:	080110ac 	.word	0x080110ac
 80085d8:	08010fcc 	.word	0x08010fcc
 80085dc:	2000830c 	.word	0x2000830c
 80085e0:	080110d8 	.word	0x080110d8
 80085e4:	20008310 	.word	0x20008310
 80085e8:	08011104 	.word	0x08011104
 80085ec:	20008308 	.word	0x20008308
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f000 8158 	beq.w	80088a8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80085f8:	4b95      	ldr	r3, [pc, #596]	; (8008850 <tcp_input+0x724>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	891a      	ldrh	r2, [r3, #8]
 8008602:	4b93      	ldr	r3, [pc, #588]	; (8008850 <tcp_input+0x724>)
 8008604:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008606:	4a92      	ldr	r2, [pc, #584]	; (8008850 <tcp_input+0x724>)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800860c:	4b91      	ldr	r3, [pc, #580]	; (8008854 <tcp_input+0x728>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a8f      	ldr	r2, [pc, #572]	; (8008850 <tcp_input+0x724>)
 8008612:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008614:	4b90      	ldr	r3, [pc, #576]	; (8008858 <tcp_input+0x72c>)
 8008616:	2200      	movs	r2, #0
 8008618:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800861a:	4b90      	ldr	r3, [pc, #576]	; (800885c <tcp_input+0x730>)
 800861c:	2200      	movs	r2, #0
 800861e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008620:	4b8f      	ldr	r3, [pc, #572]	; (8008860 <tcp_input+0x734>)
 8008622:	2200      	movs	r2, #0
 8008624:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008626:	4b8f      	ldr	r3, [pc, #572]	; (8008864 <tcp_input+0x738>)
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	f003 0308 	and.w	r3, r3, #8
 800862e:	2b00      	cmp	r3, #0
 8008630:	d006      	beq.n	8008640 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	7b5b      	ldrb	r3, [r3, #13]
 8008636:	f043 0301 	orr.w	r3, r3, #1
 800863a:	b2da      	uxtb	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008644:	2b00      	cmp	r3, #0
 8008646:	d017      	beq.n	8008678 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008648:	69f8      	ldr	r0, [r7, #28]
 800864a:	f7ff f929 	bl	80078a0 <tcp_process_refused_data>
 800864e:	4603      	mov	r3, r0
 8008650:	f113 0f0d 	cmn.w	r3, #13
 8008654:	d007      	beq.n	8008666 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00c      	beq.n	8008678 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800865e:	4b82      	ldr	r3, [pc, #520]	; (8008868 <tcp_input+0x73c>)
 8008660:	881b      	ldrh	r3, [r3, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d008      	beq.n	8008678 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800866a:	2b00      	cmp	r3, #0
 800866c:	f040 80e3 	bne.w	8008836 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008670:	69f8      	ldr	r0, [r7, #28]
 8008672:	f003 f9ad 	bl	800b9d0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008676:	e0de      	b.n	8008836 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008678:	4a7c      	ldr	r2, [pc, #496]	; (800886c <tcp_input+0x740>)
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800867e:	69f8      	ldr	r0, [r7, #28]
 8008680:	f000 fb18 	bl	8008cb4 <tcp_process>
 8008684:	4603      	mov	r3, r0
 8008686:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008688:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800868c:	f113 0f0d 	cmn.w	r3, #13
 8008690:	f000 80d3 	beq.w	800883a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8008694:	4b71      	ldr	r3, [pc, #452]	; (800885c <tcp_input+0x730>)
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	f003 0308 	and.w	r3, r3, #8
 800869c:	2b00      	cmp	r3, #0
 800869e:	d015      	beq.n	80086cc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d008      	beq.n	80086bc <tcp_input+0x590>
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086b0:	69fa      	ldr	r2, [r7, #28]
 80086b2:	6912      	ldr	r2, [r2, #16]
 80086b4:	f06f 010d 	mvn.w	r1, #13
 80086b8:	4610      	mov	r0, r2
 80086ba:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80086bc:	69f9      	ldr	r1, [r7, #28]
 80086be:	486c      	ldr	r0, [pc, #432]	; (8008870 <tcp_input+0x744>)
 80086c0:	f7ff fbbc 	bl	8007e3c <tcp_pcb_remove>
        tcp_free(pcb);
 80086c4:	69f8      	ldr	r0, [r7, #28]
 80086c6:	f7fe f9a9 	bl	8006a1c <tcp_free>
 80086ca:	e0da      	b.n	8008882 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80086d0:	4b63      	ldr	r3, [pc, #396]	; (8008860 <tcp_input+0x734>)
 80086d2:	881b      	ldrh	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d01d      	beq.n	8008714 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80086d8:	4b61      	ldr	r3, [pc, #388]	; (8008860 <tcp_input+0x734>)
 80086da:	881b      	ldrh	r3, [r3, #0]
 80086dc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00a      	beq.n	80086fe <tcp_input+0x5d2>
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086ee:	69fa      	ldr	r2, [r7, #28]
 80086f0:	6910      	ldr	r0, [r2, #16]
 80086f2:	89fa      	ldrh	r2, [r7, #14]
 80086f4:	69f9      	ldr	r1, [r7, #28]
 80086f6:	4798      	blx	r3
 80086f8:	4603      	mov	r3, r0
 80086fa:	74fb      	strb	r3, [r7, #19]
 80086fc:	e001      	b.n	8008702 <tcp_input+0x5d6>
 80086fe:	2300      	movs	r3, #0
 8008700:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008702:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008706:	f113 0f0d 	cmn.w	r3, #13
 800870a:	f000 8098 	beq.w	800883e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800870e:	4b54      	ldr	r3, [pc, #336]	; (8008860 <tcp_input+0x734>)
 8008710:	2200      	movs	r2, #0
 8008712:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008714:	69f8      	ldr	r0, [r7, #28]
 8008716:	f000 f915 	bl	8008944 <tcp_input_delayed_close>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	f040 8090 	bne.w	8008842 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008722:	4b4d      	ldr	r3, [pc, #308]	; (8008858 <tcp_input+0x72c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d041      	beq.n	80087ae <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800872e:	2b00      	cmp	r3, #0
 8008730:	d006      	beq.n	8008740 <tcp_input+0x614>
 8008732:	4b50      	ldr	r3, [pc, #320]	; (8008874 <tcp_input+0x748>)
 8008734:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008738:	494f      	ldr	r1, [pc, #316]	; (8008878 <tcp_input+0x74c>)
 800873a:	4850      	ldr	r0, [pc, #320]	; (800887c <tcp_input+0x750>)
 800873c:	f006 f8e6 	bl	800e90c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	8b5b      	ldrh	r3, [r3, #26]
 8008744:	f003 0310 	and.w	r3, r3, #16
 8008748:	2b00      	cmp	r3, #0
 800874a:	d008      	beq.n	800875e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800874c:	4b42      	ldr	r3, [pc, #264]	; (8008858 <tcp_input+0x72c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4618      	mov	r0, r3
 8008752:	f7fd fec3 	bl	80064dc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008756:	69f8      	ldr	r0, [r7, #28]
 8008758:	f7fe fc48 	bl	8006fec <tcp_abort>
            goto aborted;
 800875c:	e091      	b.n	8008882 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00c      	beq.n	8008782 <tcp_input+0x656>
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	6918      	ldr	r0, [r3, #16]
 8008772:	4b39      	ldr	r3, [pc, #228]	; (8008858 <tcp_input+0x72c>)
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	2300      	movs	r3, #0
 8008778:	69f9      	ldr	r1, [r7, #28]
 800877a:	47a0      	blx	r4
 800877c:	4603      	mov	r3, r0
 800877e:	74fb      	strb	r3, [r7, #19]
 8008780:	e008      	b.n	8008794 <tcp_input+0x668>
 8008782:	4b35      	ldr	r3, [pc, #212]	; (8008858 <tcp_input+0x72c>)
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	2300      	movs	r3, #0
 8008788:	69f9      	ldr	r1, [r7, #28]
 800878a:	2000      	movs	r0, #0
 800878c:	f7ff f95e 	bl	8007a4c <tcp_recv_null>
 8008790:	4603      	mov	r3, r0
 8008792:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008794:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008798:	f113 0f0d 	cmn.w	r3, #13
 800879c:	d053      	beq.n	8008846 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800879e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80087a6:	4b2c      	ldr	r3, [pc, #176]	; (8008858 <tcp_input+0x72c>)
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80087ae:	4b2b      	ldr	r3, [pc, #172]	; (800885c <tcp_input+0x730>)
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	f003 0320 	and.w	r3, r3, #32
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d030      	beq.n	800881c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d009      	beq.n	80087d6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087c6:	7b5a      	ldrb	r2, [r3, #13]
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087cc:	f042 0220 	orr.w	r2, r2, #32
 80087d0:	b2d2      	uxtb	r2, r2
 80087d2:	735a      	strb	r2, [r3, #13]
 80087d4:	e022      	b.n	800881c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087da:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80087de:	d005      	beq.n	80087ec <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087e4:	3301      	adds	r3, #1
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00b      	beq.n	800880e <tcp_input+0x6e2>
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	6918      	ldr	r0, [r3, #16]
 8008800:	2300      	movs	r3, #0
 8008802:	2200      	movs	r2, #0
 8008804:	69f9      	ldr	r1, [r7, #28]
 8008806:	47a0      	blx	r4
 8008808:	4603      	mov	r3, r0
 800880a:	74fb      	strb	r3, [r7, #19]
 800880c:	e001      	b.n	8008812 <tcp_input+0x6e6>
 800880e:	2300      	movs	r3, #0
 8008810:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008812:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008816:	f113 0f0d 	cmn.w	r3, #13
 800881a:	d016      	beq.n	800884a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800881c:	4b13      	ldr	r3, [pc, #76]	; (800886c <tcp_input+0x740>)
 800881e:	2200      	movs	r2, #0
 8008820:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008822:	69f8      	ldr	r0, [r7, #28]
 8008824:	f000 f88e 	bl	8008944 <tcp_input_delayed_close>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d128      	bne.n	8008880 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800882e:	69f8      	ldr	r0, [r7, #28]
 8008830:	f002 fac8 	bl	800adc4 <tcp_output>
 8008834:	e025      	b.n	8008882 <tcp_input+0x756>
        goto aborted;
 8008836:	bf00      	nop
 8008838:	e023      	b.n	8008882 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800883a:	bf00      	nop
 800883c:	e021      	b.n	8008882 <tcp_input+0x756>
              goto aborted;
 800883e:	bf00      	nop
 8008840:	e01f      	b.n	8008882 <tcp_input+0x756>
          goto aborted;
 8008842:	bf00      	nop
 8008844:	e01d      	b.n	8008882 <tcp_input+0x756>
            goto aborted;
 8008846:	bf00      	nop
 8008848:	e01b      	b.n	8008882 <tcp_input+0x756>
              goto aborted;
 800884a:	bf00      	nop
 800884c:	e019      	b.n	8008882 <tcp_input+0x756>
 800884e:	bf00      	nop
 8008850:	20008318 	.word	0x20008318
 8008854:	20008328 	.word	0x20008328
 8008858:	20008348 	.word	0x20008348
 800885c:	20008345 	.word	0x20008345
 8008860:	20008340 	.word	0x20008340
 8008864:	20008344 	.word	0x20008344
 8008868:	20008342 	.word	0x20008342
 800886c:	2000834c 	.word	0x2000834c
 8008870:	2000830c 	.word	0x2000830c
 8008874:	08010f80 	.word	0x08010f80
 8008878:	08011134 	.word	0x08011134
 800887c:	08010fcc 	.word	0x08010fcc
          goto aborted;
 8008880:	bf00      	nop
    tcp_input_pcb = NULL;
 8008882:	4b27      	ldr	r3, [pc, #156]	; (8008920 <tcp_input+0x7f4>)
 8008884:	2200      	movs	r2, #0
 8008886:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008888:	4b26      	ldr	r3, [pc, #152]	; (8008924 <tcp_input+0x7f8>)
 800888a:	2200      	movs	r2, #0
 800888c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800888e:	4b26      	ldr	r3, [pc, #152]	; (8008928 <tcp_input+0x7fc>)
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d03f      	beq.n	8008916 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8008896:	4b24      	ldr	r3, [pc, #144]	; (8008928 <tcp_input+0x7fc>)
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	4618      	mov	r0, r3
 800889c:	f7fd fe1e 	bl	80064dc <pbuf_free>
      inseg.p = NULL;
 80088a0:	4b21      	ldr	r3, [pc, #132]	; (8008928 <tcp_input+0x7fc>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80088a6:	e036      	b.n	8008916 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80088a8:	4b20      	ldr	r3, [pc, #128]	; (800892c <tcp_input+0x800>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	899b      	ldrh	r3, [r3, #12]
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7fc fab5 	bl	8004e20 <lwip_htons>
 80088b6:	4603      	mov	r3, r0
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	f003 0304 	and.w	r3, r3, #4
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d118      	bne.n	80088f4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088c2:	4b1b      	ldr	r3, [pc, #108]	; (8008930 <tcp_input+0x804>)
 80088c4:	6819      	ldr	r1, [r3, #0]
 80088c6:	4b1b      	ldr	r3, [pc, #108]	; (8008934 <tcp_input+0x808>)
 80088c8:	881b      	ldrh	r3, [r3, #0]
 80088ca:	461a      	mov	r2, r3
 80088cc:	4b1a      	ldr	r3, [pc, #104]	; (8008938 <tcp_input+0x80c>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80088d2:	4b16      	ldr	r3, [pc, #88]	; (800892c <tcp_input+0x800>)
 80088d4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088d6:	885b      	ldrh	r3, [r3, #2]
 80088d8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80088da:	4a14      	ldr	r2, [pc, #80]	; (800892c <tcp_input+0x800>)
 80088dc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088de:	8812      	ldrh	r2, [r2, #0]
 80088e0:	b292      	uxth	r2, r2
 80088e2:	9202      	str	r2, [sp, #8]
 80088e4:	9301      	str	r3, [sp, #4]
 80088e6:	4b15      	ldr	r3, [pc, #84]	; (800893c <tcp_input+0x810>)
 80088e8:	9300      	str	r3, [sp, #0]
 80088ea:	4b15      	ldr	r3, [pc, #84]	; (8008940 <tcp_input+0x814>)
 80088ec:	4602      	mov	r2, r0
 80088ee:	2000      	movs	r0, #0
 80088f0:	f003 f81c 	bl	800b92c <tcp_rst>
    pbuf_free(p);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f7fd fdf1 	bl	80064dc <pbuf_free>
  return;
 80088fa:	e00c      	b.n	8008916 <tcp_input+0x7ea>
    goto dropped;
 80088fc:	bf00      	nop
 80088fe:	e006      	b.n	800890e <tcp_input+0x7e2>
    goto dropped;
 8008900:	bf00      	nop
 8008902:	e004      	b.n	800890e <tcp_input+0x7e2>
    goto dropped;
 8008904:	bf00      	nop
 8008906:	e002      	b.n	800890e <tcp_input+0x7e2>
      goto dropped;
 8008908:	bf00      	nop
 800890a:	e000      	b.n	800890e <tcp_input+0x7e2>
      goto dropped;
 800890c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7fd fde4 	bl	80064dc <pbuf_free>
 8008914:	e000      	b.n	8008918 <tcp_input+0x7ec>
  return;
 8008916:	bf00      	nop
}
 8008918:	3724      	adds	r7, #36	; 0x24
 800891a:	46bd      	mov	sp, r7
 800891c:	bd90      	pop	{r4, r7, pc}
 800891e:	bf00      	nop
 8008920:	2000834c 	.word	0x2000834c
 8008924:	20008348 	.word	0x20008348
 8008928:	20008318 	.word	0x20008318
 800892c:	20008328 	.word	0x20008328
 8008930:	2000833c 	.word	0x2000833c
 8008934:	20008342 	.word	0x20008342
 8008938:	20008338 	.word	0x20008338
 800893c:	20004da0 	.word	0x20004da0
 8008940:	20004da4 	.word	0x20004da4

08008944 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d106      	bne.n	8008960 <tcp_input_delayed_close+0x1c>
 8008952:	4b17      	ldr	r3, [pc, #92]	; (80089b0 <tcp_input_delayed_close+0x6c>)
 8008954:	f240 225a 	movw	r2, #602	; 0x25a
 8008958:	4916      	ldr	r1, [pc, #88]	; (80089b4 <tcp_input_delayed_close+0x70>)
 800895a:	4817      	ldr	r0, [pc, #92]	; (80089b8 <tcp_input_delayed_close+0x74>)
 800895c:	f005 ffd6 	bl	800e90c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008960:	4b16      	ldr	r3, [pc, #88]	; (80089bc <tcp_input_delayed_close+0x78>)
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	f003 0310 	and.w	r3, r3, #16
 8008968:	2b00      	cmp	r3, #0
 800896a:	d01c      	beq.n	80089a6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	8b5b      	ldrh	r3, [r3, #26]
 8008970:	f003 0310 	and.w	r3, r3, #16
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10d      	bne.n	8008994 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800897e:	2b00      	cmp	r3, #0
 8008980:	d008      	beq.n	8008994 <tcp_input_delayed_close+0x50>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	6912      	ldr	r2, [r2, #16]
 800898c:	f06f 010e 	mvn.w	r1, #14
 8008990:	4610      	mov	r0, r2
 8008992:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008994:	6879      	ldr	r1, [r7, #4]
 8008996:	480a      	ldr	r0, [pc, #40]	; (80089c0 <tcp_input_delayed_close+0x7c>)
 8008998:	f7ff fa50 	bl	8007e3c <tcp_pcb_remove>
    tcp_free(pcb);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7fe f83d 	bl	8006a1c <tcp_free>
    return 1;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e000      	b.n	80089a8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	08010f80 	.word	0x08010f80
 80089b4:	08011150 	.word	0x08011150
 80089b8:	08010fcc 	.word	0x08010fcc
 80089bc:	20008345 	.word	0x20008345
 80089c0:	2000830c 	.word	0x2000830c

080089c4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80089c4:	b590      	push	{r4, r7, lr}
 80089c6:	b08b      	sub	sp, #44	; 0x2c
 80089c8:	af04      	add	r7, sp, #16
 80089ca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80089cc:	4b6f      	ldr	r3, [pc, #444]	; (8008b8c <tcp_listen_input+0x1c8>)
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	f003 0304 	and.w	r3, r3, #4
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f040 80d2 	bne.w	8008b7e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d106      	bne.n	80089ee <tcp_listen_input+0x2a>
 80089e0:	4b6b      	ldr	r3, [pc, #428]	; (8008b90 <tcp_listen_input+0x1cc>)
 80089e2:	f240 2281 	movw	r2, #641	; 0x281
 80089e6:	496b      	ldr	r1, [pc, #428]	; (8008b94 <tcp_listen_input+0x1d0>)
 80089e8:	486b      	ldr	r0, [pc, #428]	; (8008b98 <tcp_listen_input+0x1d4>)
 80089ea:	f005 ff8f 	bl	800e90c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80089ee:	4b67      	ldr	r3, [pc, #412]	; (8008b8c <tcp_listen_input+0x1c8>)
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	f003 0310 	and.w	r3, r3, #16
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d019      	beq.n	8008a2e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80089fa:	4b68      	ldr	r3, [pc, #416]	; (8008b9c <tcp_listen_input+0x1d8>)
 80089fc:	6819      	ldr	r1, [r3, #0]
 80089fe:	4b68      	ldr	r3, [pc, #416]	; (8008ba0 <tcp_listen_input+0x1dc>)
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	461a      	mov	r2, r3
 8008a04:	4b67      	ldr	r3, [pc, #412]	; (8008ba4 <tcp_listen_input+0x1e0>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a0a:	4b67      	ldr	r3, [pc, #412]	; (8008ba8 <tcp_listen_input+0x1e4>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a0e:	885b      	ldrh	r3, [r3, #2]
 8008a10:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a12:	4a65      	ldr	r2, [pc, #404]	; (8008ba8 <tcp_listen_input+0x1e4>)
 8008a14:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a16:	8812      	ldrh	r2, [r2, #0]
 8008a18:	b292      	uxth	r2, r2
 8008a1a:	9202      	str	r2, [sp, #8]
 8008a1c:	9301      	str	r3, [sp, #4]
 8008a1e:	4b63      	ldr	r3, [pc, #396]	; (8008bac <tcp_listen_input+0x1e8>)
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	4b63      	ldr	r3, [pc, #396]	; (8008bb0 <tcp_listen_input+0x1ec>)
 8008a24:	4602      	mov	r2, r0
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f002 ff80 	bl	800b92c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008a2c:	e0a9      	b.n	8008b82 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008a2e:	4b57      	ldr	r3, [pc, #348]	; (8008b8c <tcp_listen_input+0x1c8>)
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	f003 0302 	and.w	r3, r3, #2
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f000 80a3 	beq.w	8008b82 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	7d5b      	ldrb	r3, [r3, #21]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7ff f927 	bl	8007c94 <tcp_alloc>
 8008a46:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d111      	bne.n	8008a72 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00a      	beq.n	8008a6c <tcp_listen_input+0xa8>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	699b      	ldr	r3, [r3, #24]
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	6910      	ldr	r0, [r2, #16]
 8008a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a62:	2100      	movs	r1, #0
 8008a64:	4798      	blx	r3
 8008a66:	4603      	mov	r3, r0
 8008a68:	73bb      	strb	r3, [r7, #14]
      return;
 8008a6a:	e08b      	b.n	8008b84 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008a6c:	23f0      	movs	r3, #240	; 0xf0
 8008a6e:	73bb      	strb	r3, [r7, #14]
      return;
 8008a70:	e088      	b.n	8008b84 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008a72:	4b50      	ldr	r3, [pc, #320]	; (8008bb4 <tcp_listen_input+0x1f0>)
 8008a74:	695a      	ldr	r2, [r3, #20]
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008a7a:	4b4e      	ldr	r3, [pc, #312]	; (8008bb4 <tcp_listen_input+0x1f0>)
 8008a7c:	691a      	ldr	r2, [r3, #16]
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	8ada      	ldrh	r2, [r3, #22]
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008a8a:	4b47      	ldr	r3, [pc, #284]	; (8008ba8 <tcp_listen_input+0x1e4>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	881b      	ldrh	r3, [r3, #0]
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	2203      	movs	r2, #3
 8008a9a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008a9c:	4b41      	ldr	r3, [pc, #260]	; (8008ba4 <tcp_listen_input+0x1e0>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	1c5a      	adds	r2, r3, #1
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008aae:	6978      	ldr	r0, [r7, #20]
 8008ab0:	f7ff fa58 	bl	8007f64 <tcp_next_iss>
 8008ab4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	693a      	ldr	r2, [r7, #16]
 8008acc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008ace:	4b35      	ldr	r3, [pc, #212]	; (8008ba4 <tcp_listen_input+0x1e0>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	1e5a      	subs	r2, r3, #1
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	691a      	ldr	r2, [r3, #16]
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	7a5b      	ldrb	r3, [r3, #9]
 8008aea:	f003 030c 	and.w	r3, r3, #12
 8008aee:	b2da      	uxtb	r2, r3
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	7a1a      	ldrb	r2, [r3, #8]
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008afc:	4b2e      	ldr	r3, [pc, #184]	; (8008bb8 <tcp_listen_input+0x1f4>)
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	60da      	str	r2, [r3, #12]
 8008b04:	4a2c      	ldr	r2, [pc, #176]	; (8008bb8 <tcp_listen_input+0x1f4>)
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	6013      	str	r3, [r2, #0]
 8008b0a:	f003 f8d1 	bl	800bcb0 <tcp_timer_needed>
 8008b0e:	4b2b      	ldr	r3, [pc, #172]	; (8008bbc <tcp_listen_input+0x1f8>)
 8008b10:	2201      	movs	r2, #1
 8008b12:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008b14:	6978      	ldr	r0, [r7, #20]
 8008b16:	f001 fd8f 	bl	800a638 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008b1a:	4b23      	ldr	r3, [pc, #140]	; (8008ba8 <tcp_listen_input+0x1e4>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	89db      	ldrh	r3, [r3, #14]
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	3304      	adds	r3, #4
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f004 fc95 	bl	800d46c <ip4_route>
 8008b42:	4601      	mov	r1, r0
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	3304      	adds	r3, #4
 8008b48:	461a      	mov	r2, r3
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f7ff fa30 	bl	8007fb0 <tcp_eff_send_mss_netif>
 8008b50:	4603      	mov	r3, r0
 8008b52:	461a      	mov	r2, r3
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008b58:	2112      	movs	r1, #18
 8008b5a:	6978      	ldr	r0, [r7, #20]
 8008b5c:	f002 f844 	bl	800abe8 <tcp_enqueue_flags>
 8008b60:	4603      	mov	r3, r0
 8008b62:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d004      	beq.n	8008b76 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	6978      	ldr	r0, [r7, #20]
 8008b70:	f7fe f97e 	bl	8006e70 <tcp_abandon>
      return;
 8008b74:	e006      	b.n	8008b84 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008b76:	6978      	ldr	r0, [r7, #20]
 8008b78:	f002 f924 	bl	800adc4 <tcp_output>
  return;
 8008b7c:	e001      	b.n	8008b82 <tcp_listen_input+0x1be>
    return;
 8008b7e:	bf00      	nop
 8008b80:	e000      	b.n	8008b84 <tcp_listen_input+0x1c0>
  return;
 8008b82:	bf00      	nop
}
 8008b84:	371c      	adds	r7, #28
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd90      	pop	{r4, r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	20008344 	.word	0x20008344
 8008b90:	08010f80 	.word	0x08010f80
 8008b94:	08011178 	.word	0x08011178
 8008b98:	08010fcc 	.word	0x08010fcc
 8008b9c:	2000833c 	.word	0x2000833c
 8008ba0:	20008342 	.word	0x20008342
 8008ba4:	20008338 	.word	0x20008338
 8008ba8:	20008328 	.word	0x20008328
 8008bac:	20004da0 	.word	0x20004da0
 8008bb0:	20004da4 	.word	0x20004da4
 8008bb4:	20004d90 	.word	0x20004d90
 8008bb8:	2000830c 	.word	0x2000830c
 8008bbc:	20008314 	.word	0x20008314

08008bc0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af04      	add	r7, sp, #16
 8008bc6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008bc8:	4b2f      	ldr	r3, [pc, #188]	; (8008c88 <tcp_timewait_input+0xc8>)
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	f003 0304 	and.w	r3, r3, #4
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d153      	bne.n	8008c7c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d106      	bne.n	8008be8 <tcp_timewait_input+0x28>
 8008bda:	4b2c      	ldr	r3, [pc, #176]	; (8008c8c <tcp_timewait_input+0xcc>)
 8008bdc:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008be0:	492b      	ldr	r1, [pc, #172]	; (8008c90 <tcp_timewait_input+0xd0>)
 8008be2:	482c      	ldr	r0, [pc, #176]	; (8008c94 <tcp_timewait_input+0xd4>)
 8008be4:	f005 fe92 	bl	800e90c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008be8:	4b27      	ldr	r3, [pc, #156]	; (8008c88 <tcp_timewait_input+0xc8>)
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	f003 0302 	and.w	r3, r3, #2
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d02a      	beq.n	8008c4a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008bf4:	4b28      	ldr	r3, [pc, #160]	; (8008c98 <tcp_timewait_input+0xd8>)
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfc:	1ad3      	subs	r3, r2, r3
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	db2d      	blt.n	8008c5e <tcp_timewait_input+0x9e>
 8008c02:	4b25      	ldr	r3, [pc, #148]	; (8008c98 <tcp_timewait_input+0xd8>)
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0a:	6879      	ldr	r1, [r7, #4]
 8008c0c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008c0e:	440b      	add	r3, r1
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	dc23      	bgt.n	8008c5e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c16:	4b21      	ldr	r3, [pc, #132]	; (8008c9c <tcp_timewait_input+0xdc>)
 8008c18:	6819      	ldr	r1, [r3, #0]
 8008c1a:	4b21      	ldr	r3, [pc, #132]	; (8008ca0 <tcp_timewait_input+0xe0>)
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	4b1d      	ldr	r3, [pc, #116]	; (8008c98 <tcp_timewait_input+0xd8>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c26:	4b1f      	ldr	r3, [pc, #124]	; (8008ca4 <tcp_timewait_input+0xe4>)
 8008c28:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c2a:	885b      	ldrh	r3, [r3, #2]
 8008c2c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c2e:	4a1d      	ldr	r2, [pc, #116]	; (8008ca4 <tcp_timewait_input+0xe4>)
 8008c30:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c32:	8812      	ldrh	r2, [r2, #0]
 8008c34:	b292      	uxth	r2, r2
 8008c36:	9202      	str	r2, [sp, #8]
 8008c38:	9301      	str	r3, [sp, #4]
 8008c3a:	4b1b      	ldr	r3, [pc, #108]	; (8008ca8 <tcp_timewait_input+0xe8>)
 8008c3c:	9300      	str	r3, [sp, #0]
 8008c3e:	4b1b      	ldr	r3, [pc, #108]	; (8008cac <tcp_timewait_input+0xec>)
 8008c40:	4602      	mov	r2, r0
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f002 fe72 	bl	800b92c <tcp_rst>
      return;
 8008c48:	e01b      	b.n	8008c82 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008c4a:	4b0f      	ldr	r3, [pc, #60]	; (8008c88 <tcp_timewait_input+0xc8>)
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d003      	beq.n	8008c5e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008c56:	4b16      	ldr	r3, [pc, #88]	; (8008cb0 <tcp_timewait_input+0xf0>)
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008c5e:	4b10      	ldr	r3, [pc, #64]	; (8008ca0 <tcp_timewait_input+0xe0>)
 8008c60:	881b      	ldrh	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00c      	beq.n	8008c80 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	8b5b      	ldrh	r3, [r3, #26]
 8008c6a:	f043 0302 	orr.w	r3, r3, #2
 8008c6e:	b29a      	uxth	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f002 f8a5 	bl	800adc4 <tcp_output>
  }
  return;
 8008c7a:	e001      	b.n	8008c80 <tcp_timewait_input+0xc0>
    return;
 8008c7c:	bf00      	nop
 8008c7e:	e000      	b.n	8008c82 <tcp_timewait_input+0xc2>
  return;
 8008c80:	bf00      	nop
}
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	20008344 	.word	0x20008344
 8008c8c:	08010f80 	.word	0x08010f80
 8008c90:	08011198 	.word	0x08011198
 8008c94:	08010fcc 	.word	0x08010fcc
 8008c98:	20008338 	.word	0x20008338
 8008c9c:	2000833c 	.word	0x2000833c
 8008ca0:	20008342 	.word	0x20008342
 8008ca4:	20008328 	.word	0x20008328
 8008ca8:	20004da0 	.word	0x20004da0
 8008cac:	20004da4 	.word	0x20004da4
 8008cb0:	20008300 	.word	0x20008300

08008cb4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008cb4:	b590      	push	{r4, r7, lr}
 8008cb6:	b08d      	sub	sp, #52	; 0x34
 8008cb8:	af04      	add	r7, sp, #16
 8008cba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d106      	bne.n	8008cd8 <tcp_process+0x24>
 8008cca:	4b9d      	ldr	r3, [pc, #628]	; (8008f40 <tcp_process+0x28c>)
 8008ccc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008cd0:	499c      	ldr	r1, [pc, #624]	; (8008f44 <tcp_process+0x290>)
 8008cd2:	489d      	ldr	r0, [pc, #628]	; (8008f48 <tcp_process+0x294>)
 8008cd4:	f005 fe1a 	bl	800e90c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008cd8:	4b9c      	ldr	r3, [pc, #624]	; (8008f4c <tcp_process+0x298>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	f003 0304 	and.w	r3, r3, #4
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d04e      	beq.n	8008d82 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	7d1b      	ldrb	r3, [r3, #20]
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d108      	bne.n	8008cfe <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cf0:	4b97      	ldr	r3, [pc, #604]	; (8008f50 <tcp_process+0x29c>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d123      	bne.n	8008d40 <tcp_process+0x8c>
        acceptable = 1;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	76fb      	strb	r3, [r7, #27]
 8008cfc:	e020      	b.n	8008d40 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d02:	4b94      	ldr	r3, [pc, #592]	; (8008f54 <tcp_process+0x2a0>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d102      	bne.n	8008d10 <tcp_process+0x5c>
        acceptable = 1;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	76fb      	strb	r3, [r7, #27]
 8008d0e:	e017      	b.n	8008d40 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008d10:	4b90      	ldr	r3, [pc, #576]	; (8008f54 <tcp_process+0x2a0>)
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	db10      	blt.n	8008d40 <tcp_process+0x8c>
 8008d1e:	4b8d      	ldr	r3, [pc, #564]	; (8008f54 <tcp_process+0x2a0>)
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008d2a:	440b      	add	r3, r1
 8008d2c:	1ad3      	subs	r3, r2, r3
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	dc06      	bgt.n	8008d40 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	8b5b      	ldrh	r3, [r3, #26]
 8008d36:	f043 0302 	orr.w	r3, r3, #2
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008d40:	7efb      	ldrb	r3, [r7, #27]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d01b      	beq.n	8008d7e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	7d1b      	ldrb	r3, [r3, #20]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d106      	bne.n	8008d5c <tcp_process+0xa8>
 8008d4e:	4b7c      	ldr	r3, [pc, #496]	; (8008f40 <tcp_process+0x28c>)
 8008d50:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008d54:	4980      	ldr	r1, [pc, #512]	; (8008f58 <tcp_process+0x2a4>)
 8008d56:	487c      	ldr	r0, [pc, #496]	; (8008f48 <tcp_process+0x294>)
 8008d58:	f005 fdd8 	bl	800e90c <iprintf>
      recv_flags |= TF_RESET;
 8008d5c:	4b7f      	ldr	r3, [pc, #508]	; (8008f5c <tcp_process+0x2a8>)
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	f043 0308 	orr.w	r3, r3, #8
 8008d64:	b2da      	uxtb	r2, r3
 8008d66:	4b7d      	ldr	r3, [pc, #500]	; (8008f5c <tcp_process+0x2a8>)
 8008d68:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	8b5b      	ldrh	r3, [r3, #26]
 8008d6e:	f023 0301 	bic.w	r3, r3, #1
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008d78:	f06f 030d 	mvn.w	r3, #13
 8008d7c:	e37a      	b.n	8009474 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	e378      	b.n	8009474 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008d82:	4b72      	ldr	r3, [pc, #456]	; (8008f4c <tcp_process+0x298>)
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	f003 0302 	and.w	r3, r3, #2
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d010      	beq.n	8008db0 <tcp_process+0xfc>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	7d1b      	ldrb	r3, [r3, #20]
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d00c      	beq.n	8008db0 <tcp_process+0xfc>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	7d1b      	ldrb	r3, [r3, #20]
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d008      	beq.n	8008db0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	8b5b      	ldrh	r3, [r3, #26]
 8008da2:	f043 0302 	orr.w	r3, r3, #2
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008dac:	2300      	movs	r3, #0
 8008dae:	e361      	b.n	8009474 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	8b5b      	ldrh	r3, [r3, #26]
 8008db4:	f003 0310 	and.w	r3, r3, #16
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d103      	bne.n	8008dc4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008dbc:	4b68      	ldr	r3, [pc, #416]	; (8008f60 <tcp_process+0x2ac>)
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f001 fc2f 	bl	800a638 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	7d1b      	ldrb	r3, [r3, #20]
 8008dde:	3b02      	subs	r3, #2
 8008de0:	2b07      	cmp	r3, #7
 8008de2:	f200 8337 	bhi.w	8009454 <tcp_process+0x7a0>
 8008de6:	a201      	add	r2, pc, #4	; (adr r2, 8008dec <tcp_process+0x138>)
 8008de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dec:	08008e0d 	.word	0x08008e0d
 8008df0:	0800903d 	.word	0x0800903d
 8008df4:	080091b5 	.word	0x080091b5
 8008df8:	080091df 	.word	0x080091df
 8008dfc:	08009303 	.word	0x08009303
 8008e00:	080091b5 	.word	0x080091b5
 8008e04:	0800938f 	.word	0x0800938f
 8008e08:	0800941f 	.word	0x0800941f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008e0c:	4b4f      	ldr	r3, [pc, #316]	; (8008f4c <tcp_process+0x298>)
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	f003 0310 	and.w	r3, r3, #16
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f000 80e4 	beq.w	8008fe2 <tcp_process+0x32e>
 8008e1a:	4b4c      	ldr	r3, [pc, #304]	; (8008f4c <tcp_process+0x298>)
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	f003 0302 	and.w	r3, r3, #2
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 80dd 	beq.w	8008fe2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e2c:	1c5a      	adds	r2, r3, #1
 8008e2e:	4b48      	ldr	r3, [pc, #288]	; (8008f50 <tcp_process+0x29c>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	f040 80d5 	bne.w	8008fe2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008e38:	4b46      	ldr	r3, [pc, #280]	; (8008f54 <tcp_process+0x2a0>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	1c5a      	adds	r2, r3, #1
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008e4a:	4b41      	ldr	r3, [pc, #260]	; (8008f50 <tcp_process+0x29c>)
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008e52:	4b44      	ldr	r3, [pc, #272]	; (8008f64 <tcp_process+0x2b0>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	89db      	ldrh	r3, [r3, #14]
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008e6c:	4b39      	ldr	r3, [pc, #228]	; (8008f54 <tcp_process+0x2a0>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	1e5a      	subs	r2, r3, #1
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2204      	movs	r2, #4
 8008e7a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	3304      	adds	r3, #4
 8008e84:	4618      	mov	r0, r3
 8008e86:	f004 faf1 	bl	800d46c <ip4_route>
 8008e8a:	4601      	mov	r1, r0
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	3304      	adds	r3, #4
 8008e90:	461a      	mov	r2, r3
 8008e92:	4620      	mov	r0, r4
 8008e94:	f7ff f88c 	bl	8007fb0 <tcp_eff_send_mss_netif>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ea4:	009a      	lsls	r2, r3, #2
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008eaa:	005b      	lsls	r3, r3, #1
 8008eac:	f241 111c 	movw	r1, #4380	; 0x111c
 8008eb0:	428b      	cmp	r3, r1
 8008eb2:	bf38      	it	cc
 8008eb4:	460b      	movcc	r3, r1
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d204      	bcs.n	8008ec4 <tcp_process+0x210>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	e00d      	b.n	8008ee0 <tcp_process+0x22c>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ec8:	005b      	lsls	r3, r3, #1
 8008eca:	f241 121c 	movw	r2, #4380	; 0x111c
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d904      	bls.n	8008edc <tcp_process+0x228>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ed6:	005b      	lsls	r3, r3, #1
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	e001      	b.n	8008ee0 <tcp_process+0x22c>
 8008edc:	f241 131c 	movw	r3, #4380	; 0x111c
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d106      	bne.n	8008efe <tcp_process+0x24a>
 8008ef0:	4b13      	ldr	r3, [pc, #76]	; (8008f40 <tcp_process+0x28c>)
 8008ef2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008ef6:	491c      	ldr	r1, [pc, #112]	; (8008f68 <tcp_process+0x2b4>)
 8008ef8:	4813      	ldr	r0, [pc, #76]	; (8008f48 <tcp_process+0x294>)
 8008efa:	f005 fd07 	bl	800e90c <iprintf>
        --pcb->snd_queuelen;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008f04:	3b01      	subs	r3, #1
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f12:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d12a      	bne.n	8008f70 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f1e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d106      	bne.n	8008f34 <tcp_process+0x280>
 8008f26:	4b06      	ldr	r3, [pc, #24]	; (8008f40 <tcp_process+0x28c>)
 8008f28:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008f2c:	490f      	ldr	r1, [pc, #60]	; (8008f6c <tcp_process+0x2b8>)
 8008f2e:	4806      	ldr	r0, [pc, #24]	; (8008f48 <tcp_process+0x294>)
 8008f30:	f005 fcec 	bl	800e90c <iprintf>
          pcb->unsent = rseg->next;
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	66da      	str	r2, [r3, #108]	; 0x6c
 8008f3c:	e01c      	b.n	8008f78 <tcp_process+0x2c4>
 8008f3e:	bf00      	nop
 8008f40:	08010f80 	.word	0x08010f80
 8008f44:	080111b8 	.word	0x080111b8
 8008f48:	08010fcc 	.word	0x08010fcc
 8008f4c:	20008344 	.word	0x20008344
 8008f50:	2000833c 	.word	0x2000833c
 8008f54:	20008338 	.word	0x20008338
 8008f58:	080111d4 	.word	0x080111d4
 8008f5c:	20008345 	.word	0x20008345
 8008f60:	20008300 	.word	0x20008300
 8008f64:	20008328 	.word	0x20008328
 8008f68:	080111f4 	.word	0x080111f4
 8008f6c:	0801120c 	.word	0x0801120c
        } else {
          pcb->unacked = rseg->next;
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008f78:	69f8      	ldr	r0, [r7, #28]
 8008f7a:	f7fe fd22 	bl	80079c2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d104      	bne.n	8008f90 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f8c:	861a      	strh	r2, [r3, #48]	; 0x30
 8008f8e:	e006      	b.n	8008f9e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00a      	beq.n	8008fbe <tcp_process+0x30a>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	6910      	ldr	r0, [r2, #16]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	6879      	ldr	r1, [r7, #4]
 8008fb6:	4798      	blx	r3
 8008fb8:	4603      	mov	r3, r0
 8008fba:	76bb      	strb	r3, [r7, #26]
 8008fbc:	e001      	b.n	8008fc2 <tcp_process+0x30e>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008fc2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008fc6:	f113 0f0d 	cmn.w	r3, #13
 8008fca:	d102      	bne.n	8008fd2 <tcp_process+0x31e>
          return ERR_ABRT;
 8008fcc:	f06f 030c 	mvn.w	r3, #12
 8008fd0:	e250      	b.n	8009474 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	8b5b      	ldrh	r3, [r3, #26]
 8008fd6:	f043 0302 	orr.w	r3, r3, #2
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008fe0:	e23a      	b.n	8009458 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008fe2:	4b98      	ldr	r3, [pc, #608]	; (8009244 <tcp_process+0x590>)
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	f003 0310 	and.w	r3, r3, #16
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f000 8234 	beq.w	8009458 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ff0:	4b95      	ldr	r3, [pc, #596]	; (8009248 <tcp_process+0x594>)
 8008ff2:	6819      	ldr	r1, [r3, #0]
 8008ff4:	4b95      	ldr	r3, [pc, #596]	; (800924c <tcp_process+0x598>)
 8008ff6:	881b      	ldrh	r3, [r3, #0]
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	4b95      	ldr	r3, [pc, #596]	; (8009250 <tcp_process+0x59c>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009000:	4b94      	ldr	r3, [pc, #592]	; (8009254 <tcp_process+0x5a0>)
 8009002:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009004:	885b      	ldrh	r3, [r3, #2]
 8009006:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009008:	4a92      	ldr	r2, [pc, #584]	; (8009254 <tcp_process+0x5a0>)
 800900a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800900c:	8812      	ldrh	r2, [r2, #0]
 800900e:	b292      	uxth	r2, r2
 8009010:	9202      	str	r2, [sp, #8]
 8009012:	9301      	str	r3, [sp, #4]
 8009014:	4b90      	ldr	r3, [pc, #576]	; (8009258 <tcp_process+0x5a4>)
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	4b90      	ldr	r3, [pc, #576]	; (800925c <tcp_process+0x5a8>)
 800901a:	4602      	mov	r2, r0
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f002 fc85 	bl	800b92c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009028:	2b05      	cmp	r3, #5
 800902a:	f200 8215 	bhi.w	8009458 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f002 fa4f 	bl	800b4d8 <tcp_rexmit_rto>
      break;
 800903a:	e20d      	b.n	8009458 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800903c:	4b81      	ldr	r3, [pc, #516]	; (8009244 <tcp_process+0x590>)
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	f003 0310 	and.w	r3, r3, #16
 8009044:	2b00      	cmp	r3, #0
 8009046:	f000 80a1 	beq.w	800918c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800904a:	4b7f      	ldr	r3, [pc, #508]	; (8009248 <tcp_process+0x594>)
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009052:	1ad3      	subs	r3, r2, r3
 8009054:	3b01      	subs	r3, #1
 8009056:	2b00      	cmp	r3, #0
 8009058:	db7e      	blt.n	8009158 <tcp_process+0x4a4>
 800905a:	4b7b      	ldr	r3, [pc, #492]	; (8009248 <tcp_process+0x594>)
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	2b00      	cmp	r3, #0
 8009066:	dc77      	bgt.n	8009158 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2204      	movs	r2, #4
 800906c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009072:	2b00      	cmp	r3, #0
 8009074:	d102      	bne.n	800907c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009076:	23fa      	movs	r3, #250	; 0xfa
 8009078:	76bb      	strb	r3, [r7, #26]
 800907a:	e01d      	b.n	80090b8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d106      	bne.n	8009094 <tcp_process+0x3e0>
 8009086:	4b76      	ldr	r3, [pc, #472]	; (8009260 <tcp_process+0x5ac>)
 8009088:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800908c:	4975      	ldr	r1, [pc, #468]	; (8009264 <tcp_process+0x5b0>)
 800908e:	4876      	ldr	r0, [pc, #472]	; (8009268 <tcp_process+0x5b4>)
 8009090:	f005 fc3c 	bl	800e90c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00a      	beq.n	80090b4 <tcp_process+0x400>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090a2:	699b      	ldr	r3, [r3, #24]
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	6910      	ldr	r0, [r2, #16]
 80090a8:	2200      	movs	r2, #0
 80090aa:	6879      	ldr	r1, [r7, #4]
 80090ac:	4798      	blx	r3
 80090ae:	4603      	mov	r3, r0
 80090b0:	76bb      	strb	r3, [r7, #26]
 80090b2:	e001      	b.n	80090b8 <tcp_process+0x404>
 80090b4:	23f0      	movs	r3, #240	; 0xf0
 80090b6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80090b8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00a      	beq.n	80090d6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80090c0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80090c4:	f113 0f0d 	cmn.w	r3, #13
 80090c8:	d002      	beq.n	80090d0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f7fd ff8e 	bl	8006fec <tcp_abort>
            }
            return ERR_ABRT;
 80090d0:	f06f 030c 	mvn.w	r3, #12
 80090d4:	e1ce      	b.n	8009474 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fae0 	bl	800969c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80090dc:	4b63      	ldr	r3, [pc, #396]	; (800926c <tcp_process+0x5b8>)
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d005      	beq.n	80090f0 <tcp_process+0x43c>
            recv_acked--;
 80090e4:	4b61      	ldr	r3, [pc, #388]	; (800926c <tcp_process+0x5b8>)
 80090e6:	881b      	ldrh	r3, [r3, #0]
 80090e8:	3b01      	subs	r3, #1
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	4b5f      	ldr	r3, [pc, #380]	; (800926c <tcp_process+0x5b8>)
 80090ee:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80090f4:	009a      	lsls	r2, r3, #2
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80090fa:	005b      	lsls	r3, r3, #1
 80090fc:	f241 111c 	movw	r1, #4380	; 0x111c
 8009100:	428b      	cmp	r3, r1
 8009102:	bf38      	it	cc
 8009104:	460b      	movcc	r3, r1
 8009106:	429a      	cmp	r2, r3
 8009108:	d204      	bcs.n	8009114 <tcp_process+0x460>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	b29b      	uxth	r3, r3
 8009112:	e00d      	b.n	8009130 <tcp_process+0x47c>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009118:	005b      	lsls	r3, r3, #1
 800911a:	f241 121c 	movw	r2, #4380	; 0x111c
 800911e:	4293      	cmp	r3, r2
 8009120:	d904      	bls.n	800912c <tcp_process+0x478>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009126:	005b      	lsls	r3, r3, #1
 8009128:	b29b      	uxth	r3, r3
 800912a:	e001      	b.n	8009130 <tcp_process+0x47c>
 800912c:	f241 131c 	movw	r3, #4380	; 0x111c
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009136:	4b4e      	ldr	r3, [pc, #312]	; (8009270 <tcp_process+0x5bc>)
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	f003 0320 	and.w	r3, r3, #32
 800913e:	2b00      	cmp	r3, #0
 8009140:	d037      	beq.n	80091b2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	8b5b      	ldrh	r3, [r3, #26]
 8009146:	f043 0302 	orr.w	r3, r3, #2
 800914a:	b29a      	uxth	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2207      	movs	r2, #7
 8009154:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009156:	e02c      	b.n	80091b2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009158:	4b3b      	ldr	r3, [pc, #236]	; (8009248 <tcp_process+0x594>)
 800915a:	6819      	ldr	r1, [r3, #0]
 800915c:	4b3b      	ldr	r3, [pc, #236]	; (800924c <tcp_process+0x598>)
 800915e:	881b      	ldrh	r3, [r3, #0]
 8009160:	461a      	mov	r2, r3
 8009162:	4b3b      	ldr	r3, [pc, #236]	; (8009250 <tcp_process+0x59c>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009168:	4b3a      	ldr	r3, [pc, #232]	; (8009254 <tcp_process+0x5a0>)
 800916a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800916c:	885b      	ldrh	r3, [r3, #2]
 800916e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009170:	4a38      	ldr	r2, [pc, #224]	; (8009254 <tcp_process+0x5a0>)
 8009172:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009174:	8812      	ldrh	r2, [r2, #0]
 8009176:	b292      	uxth	r2, r2
 8009178:	9202      	str	r2, [sp, #8]
 800917a:	9301      	str	r3, [sp, #4]
 800917c:	4b36      	ldr	r3, [pc, #216]	; (8009258 <tcp_process+0x5a4>)
 800917e:	9300      	str	r3, [sp, #0]
 8009180:	4b36      	ldr	r3, [pc, #216]	; (800925c <tcp_process+0x5a8>)
 8009182:	4602      	mov	r2, r0
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f002 fbd1 	bl	800b92c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800918a:	e167      	b.n	800945c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800918c:	4b2d      	ldr	r3, [pc, #180]	; (8009244 <tcp_process+0x590>)
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	f003 0302 	and.w	r3, r3, #2
 8009194:	2b00      	cmp	r3, #0
 8009196:	f000 8161 	beq.w	800945c <tcp_process+0x7a8>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919e:	1e5a      	subs	r2, r3, #1
 80091a0:	4b2b      	ldr	r3, [pc, #172]	; (8009250 <tcp_process+0x59c>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	f040 8159 	bne.w	800945c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f002 f9b6 	bl	800b51c <tcp_rexmit>
      break;
 80091b0:	e154      	b.n	800945c <tcp_process+0x7a8>
 80091b2:	e153      	b.n	800945c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fa71 	bl	800969c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80091ba:	4b2d      	ldr	r3, [pc, #180]	; (8009270 <tcp_process+0x5bc>)
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	f003 0320 	and.w	r3, r3, #32
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f000 814c 	beq.w	8009460 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	8b5b      	ldrh	r3, [r3, #26]
 80091cc:	f043 0302 	orr.w	r3, r3, #2
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2207      	movs	r2, #7
 80091da:	751a      	strb	r2, [r3, #20]
      }
      break;
 80091dc:	e140      	b.n	8009460 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fa5c 	bl	800969c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80091e4:	4b22      	ldr	r3, [pc, #136]	; (8009270 <tcp_process+0x5bc>)
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	f003 0320 	and.w	r3, r3, #32
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d071      	beq.n	80092d4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80091f0:	4b14      	ldr	r3, [pc, #80]	; (8009244 <tcp_process+0x590>)
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	f003 0310 	and.w	r3, r3, #16
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d060      	beq.n	80092be <tcp_process+0x60a>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009200:	4b11      	ldr	r3, [pc, #68]	; (8009248 <tcp_process+0x594>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	429a      	cmp	r2, r3
 8009206:	d15a      	bne.n	80092be <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800920c:	2b00      	cmp	r3, #0
 800920e:	d156      	bne.n	80092be <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	8b5b      	ldrh	r3, [r3, #26]
 8009214:	f043 0302 	orr.w	r3, r3, #2
 8009218:	b29a      	uxth	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f7fe fdbc 	bl	8007d9c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009224:	4b13      	ldr	r3, [pc, #76]	; (8009274 <tcp_process+0x5c0>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	429a      	cmp	r2, r3
 800922c:	d105      	bne.n	800923a <tcp_process+0x586>
 800922e:	4b11      	ldr	r3, [pc, #68]	; (8009274 <tcp_process+0x5c0>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	4a0f      	ldr	r2, [pc, #60]	; (8009274 <tcp_process+0x5c0>)
 8009236:	6013      	str	r3, [r2, #0]
 8009238:	e02e      	b.n	8009298 <tcp_process+0x5e4>
 800923a:	4b0e      	ldr	r3, [pc, #56]	; (8009274 <tcp_process+0x5c0>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	617b      	str	r3, [r7, #20]
 8009240:	e027      	b.n	8009292 <tcp_process+0x5de>
 8009242:	bf00      	nop
 8009244:	20008344 	.word	0x20008344
 8009248:	2000833c 	.word	0x2000833c
 800924c:	20008342 	.word	0x20008342
 8009250:	20008338 	.word	0x20008338
 8009254:	20008328 	.word	0x20008328
 8009258:	20004da0 	.word	0x20004da0
 800925c:	20004da4 	.word	0x20004da4
 8009260:	08010f80 	.word	0x08010f80
 8009264:	08011220 	.word	0x08011220
 8009268:	08010fcc 	.word	0x08010fcc
 800926c:	20008340 	.word	0x20008340
 8009270:	20008345 	.word	0x20008345
 8009274:	2000830c 	.word	0x2000830c
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	429a      	cmp	r2, r3
 8009280:	d104      	bne.n	800928c <tcp_process+0x5d8>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	68da      	ldr	r2, [r3, #12]
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	60da      	str	r2, [r3, #12]
 800928a:	e005      	b.n	8009298 <tcp_process+0x5e4>
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	617b      	str	r3, [r7, #20]
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1ef      	bne.n	8009278 <tcp_process+0x5c4>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	60da      	str	r2, [r3, #12]
 800929e:	4b77      	ldr	r3, [pc, #476]	; (800947c <tcp_process+0x7c8>)
 80092a0:	2201      	movs	r2, #1
 80092a2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	220a      	movs	r2, #10
 80092a8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80092aa:	4b75      	ldr	r3, [pc, #468]	; (8009480 <tcp_process+0x7cc>)
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	60da      	str	r2, [r3, #12]
 80092b2:	4a73      	ldr	r2, [pc, #460]	; (8009480 <tcp_process+0x7cc>)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6013      	str	r3, [r2, #0]
 80092b8:	f002 fcfa 	bl	800bcb0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80092bc:	e0d2      	b.n	8009464 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	8b5b      	ldrh	r3, [r3, #26]
 80092c2:	f043 0302 	orr.w	r3, r3, #2
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2208      	movs	r2, #8
 80092d0:	751a      	strb	r2, [r3, #20]
      break;
 80092d2:	e0c7      	b.n	8009464 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80092d4:	4b6b      	ldr	r3, [pc, #428]	; (8009484 <tcp_process+0x7d0>)
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	f003 0310 	and.w	r3, r3, #16
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f000 80c1 	beq.w	8009464 <tcp_process+0x7b0>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092e6:	4b68      	ldr	r3, [pc, #416]	; (8009488 <tcp_process+0x7d4>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	f040 80ba 	bne.w	8009464 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f040 80b5 	bne.w	8009464 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2206      	movs	r2, #6
 80092fe:	751a      	strb	r2, [r3, #20]
      break;
 8009300:	e0b0      	b.n	8009464 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f9ca 	bl	800969c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009308:	4b60      	ldr	r3, [pc, #384]	; (800948c <tcp_process+0x7d8>)
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	f003 0320 	and.w	r3, r3, #32
 8009310:	2b00      	cmp	r3, #0
 8009312:	f000 80a9 	beq.w	8009468 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	8b5b      	ldrh	r3, [r3, #26]
 800931a:	f043 0302 	orr.w	r3, r3, #2
 800931e:	b29a      	uxth	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f7fe fd39 	bl	8007d9c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800932a:	4b59      	ldr	r3, [pc, #356]	; (8009490 <tcp_process+0x7dc>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	429a      	cmp	r2, r3
 8009332:	d105      	bne.n	8009340 <tcp_process+0x68c>
 8009334:	4b56      	ldr	r3, [pc, #344]	; (8009490 <tcp_process+0x7dc>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	4a55      	ldr	r2, [pc, #340]	; (8009490 <tcp_process+0x7dc>)
 800933c:	6013      	str	r3, [r2, #0]
 800933e:	e013      	b.n	8009368 <tcp_process+0x6b4>
 8009340:	4b53      	ldr	r3, [pc, #332]	; (8009490 <tcp_process+0x7dc>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	613b      	str	r3, [r7, #16]
 8009346:	e00c      	b.n	8009362 <tcp_process+0x6ae>
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	429a      	cmp	r2, r3
 8009350:	d104      	bne.n	800935c <tcp_process+0x6a8>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68da      	ldr	r2, [r3, #12]
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	60da      	str	r2, [r3, #12]
 800935a:	e005      	b.n	8009368 <tcp_process+0x6b4>
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	613b      	str	r3, [r7, #16]
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1ef      	bne.n	8009348 <tcp_process+0x694>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	60da      	str	r2, [r3, #12]
 800936e:	4b43      	ldr	r3, [pc, #268]	; (800947c <tcp_process+0x7c8>)
 8009370:	2201      	movs	r2, #1
 8009372:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	220a      	movs	r2, #10
 8009378:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800937a:	4b41      	ldr	r3, [pc, #260]	; (8009480 <tcp_process+0x7cc>)
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	60da      	str	r2, [r3, #12]
 8009382:	4a3f      	ldr	r2, [pc, #252]	; (8009480 <tcp_process+0x7cc>)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6013      	str	r3, [r2, #0]
 8009388:	f002 fc92 	bl	800bcb0 <tcp_timer_needed>
      }
      break;
 800938c:	e06c      	b.n	8009468 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f984 	bl	800969c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009394:	4b3b      	ldr	r3, [pc, #236]	; (8009484 <tcp_process+0x7d0>)
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	f003 0310 	and.w	r3, r3, #16
 800939c:	2b00      	cmp	r3, #0
 800939e:	d065      	beq.n	800946c <tcp_process+0x7b8>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80093a4:	4b38      	ldr	r3, [pc, #224]	; (8009488 <tcp_process+0x7d4>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d15f      	bne.n	800946c <tcp_process+0x7b8>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d15b      	bne.n	800946c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7fe fcf1 	bl	8007d9c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80093ba:	4b35      	ldr	r3, [pc, #212]	; (8009490 <tcp_process+0x7dc>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d105      	bne.n	80093d0 <tcp_process+0x71c>
 80093c4:	4b32      	ldr	r3, [pc, #200]	; (8009490 <tcp_process+0x7dc>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	4a31      	ldr	r2, [pc, #196]	; (8009490 <tcp_process+0x7dc>)
 80093cc:	6013      	str	r3, [r2, #0]
 80093ce:	e013      	b.n	80093f8 <tcp_process+0x744>
 80093d0:	4b2f      	ldr	r3, [pc, #188]	; (8009490 <tcp_process+0x7dc>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	60fb      	str	r3, [r7, #12]
 80093d6:	e00c      	b.n	80093f2 <tcp_process+0x73e>
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d104      	bne.n	80093ec <tcp_process+0x738>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68da      	ldr	r2, [r3, #12]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	60da      	str	r2, [r3, #12]
 80093ea:	e005      	b.n	80093f8 <tcp_process+0x744>
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	60fb      	str	r3, [r7, #12]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1ef      	bne.n	80093d8 <tcp_process+0x724>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	60da      	str	r2, [r3, #12]
 80093fe:	4b1f      	ldr	r3, [pc, #124]	; (800947c <tcp_process+0x7c8>)
 8009400:	2201      	movs	r2, #1
 8009402:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	220a      	movs	r2, #10
 8009408:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800940a:	4b1d      	ldr	r3, [pc, #116]	; (8009480 <tcp_process+0x7cc>)
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	60da      	str	r2, [r3, #12]
 8009412:	4a1b      	ldr	r2, [pc, #108]	; (8009480 <tcp_process+0x7cc>)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6013      	str	r3, [r2, #0]
 8009418:	f002 fc4a 	bl	800bcb0 <tcp_timer_needed>
      }
      break;
 800941c:	e026      	b.n	800946c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f93c 	bl	800969c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009424:	4b17      	ldr	r3, [pc, #92]	; (8009484 <tcp_process+0x7d0>)
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	f003 0310 	and.w	r3, r3, #16
 800942c:	2b00      	cmp	r3, #0
 800942e:	d01f      	beq.n	8009470 <tcp_process+0x7bc>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009434:	4b14      	ldr	r3, [pc, #80]	; (8009488 <tcp_process+0x7d4>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	429a      	cmp	r2, r3
 800943a:	d119      	bne.n	8009470 <tcp_process+0x7bc>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009440:	2b00      	cmp	r3, #0
 8009442:	d115      	bne.n	8009470 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009444:	4b11      	ldr	r3, [pc, #68]	; (800948c <tcp_process+0x7d8>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	f043 0310 	orr.w	r3, r3, #16
 800944c:	b2da      	uxtb	r2, r3
 800944e:	4b0f      	ldr	r3, [pc, #60]	; (800948c <tcp_process+0x7d8>)
 8009450:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009452:	e00d      	b.n	8009470 <tcp_process+0x7bc>
    default:
      break;
 8009454:	bf00      	nop
 8009456:	e00c      	b.n	8009472 <tcp_process+0x7be>
      break;
 8009458:	bf00      	nop
 800945a:	e00a      	b.n	8009472 <tcp_process+0x7be>
      break;
 800945c:	bf00      	nop
 800945e:	e008      	b.n	8009472 <tcp_process+0x7be>
      break;
 8009460:	bf00      	nop
 8009462:	e006      	b.n	8009472 <tcp_process+0x7be>
      break;
 8009464:	bf00      	nop
 8009466:	e004      	b.n	8009472 <tcp_process+0x7be>
      break;
 8009468:	bf00      	nop
 800946a:	e002      	b.n	8009472 <tcp_process+0x7be>
      break;
 800946c:	bf00      	nop
 800946e:	e000      	b.n	8009472 <tcp_process+0x7be>
      break;
 8009470:	bf00      	nop
  }
  return ERR_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3724      	adds	r7, #36	; 0x24
 8009478:	46bd      	mov	sp, r7
 800947a:	bd90      	pop	{r4, r7, pc}
 800947c:	20008314 	.word	0x20008314
 8009480:	20008310 	.word	0x20008310
 8009484:	20008344 	.word	0x20008344
 8009488:	2000833c 	.word	0x2000833c
 800948c:	20008345 	.word	0x20008345
 8009490:	2000830c 	.word	0x2000830c

08009494 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009494:	b590      	push	{r4, r7, lr}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d106      	bne.n	80094b2 <tcp_oos_insert_segment+0x1e>
 80094a4:	4b3b      	ldr	r3, [pc, #236]	; (8009594 <tcp_oos_insert_segment+0x100>)
 80094a6:	f240 421f 	movw	r2, #1055	; 0x41f
 80094aa:	493b      	ldr	r1, [pc, #236]	; (8009598 <tcp_oos_insert_segment+0x104>)
 80094ac:	483b      	ldr	r0, [pc, #236]	; (800959c <tcp_oos_insert_segment+0x108>)
 80094ae:	f005 fa2d 	bl	800e90c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	899b      	ldrh	r3, [r3, #12]
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7fb fcb0 	bl	8004e20 <lwip_htons>
 80094c0:	4603      	mov	r3, r0
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	f003 0301 	and.w	r3, r3, #1
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d028      	beq.n	800951e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80094cc:	6838      	ldr	r0, [r7, #0]
 80094ce:	f7fe fa63 	bl	8007998 <tcp_segs_free>
    next = NULL;
 80094d2:	2300      	movs	r3, #0
 80094d4:	603b      	str	r3, [r7, #0]
 80094d6:	e056      	b.n	8009586 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	899b      	ldrh	r3, [r3, #12]
 80094de:	b29b      	uxth	r3, r3
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7fb fc9d 	bl	8004e20 <lwip_htons>
 80094e6:	4603      	mov	r3, r0
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00d      	beq.n	800950e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	899b      	ldrh	r3, [r3, #12]
 80094f8:	b29c      	uxth	r4, r3
 80094fa:	2001      	movs	r0, #1
 80094fc:	f7fb fc90 	bl	8004e20 <lwip_htons>
 8009500:	4603      	mov	r3, r0
 8009502:	461a      	mov	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	4322      	orrs	r2, r4
 800950a:	b292      	uxth	r2, r2
 800950c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f7fe fa52 	bl	80079c2 <tcp_seg_free>
    while (next &&
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00e      	beq.n	8009542 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	891b      	ldrh	r3, [r3, #8]
 8009528:	461a      	mov	r2, r3
 800952a:	4b1d      	ldr	r3, [pc, #116]	; (80095a0 <tcp_oos_insert_segment+0x10c>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	441a      	add	r2, r3
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	6839      	ldr	r1, [r7, #0]
 8009538:	8909      	ldrh	r1, [r1, #8]
 800953a:	440b      	add	r3, r1
 800953c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800953e:	2b00      	cmp	r3, #0
 8009540:	daca      	bge.n	80094d8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d01e      	beq.n	8009586 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	891b      	ldrh	r3, [r3, #8]
 800954c:	461a      	mov	r2, r3
 800954e:	4b14      	ldr	r3, [pc, #80]	; (80095a0 <tcp_oos_insert_segment+0x10c>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	441a      	add	r2, r3
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800955c:	2b00      	cmp	r3, #0
 800955e:	dd12      	ble.n	8009586 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	b29a      	uxth	r2, r3
 8009568:	4b0d      	ldr	r3, [pc, #52]	; (80095a0 <tcp_oos_insert_segment+0x10c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	b29b      	uxth	r3, r3
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	b29a      	uxth	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	685a      	ldr	r2, [r3, #4]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	891b      	ldrh	r3, [r3, #8]
 800957e:	4619      	mov	r1, r3
 8009580:	4610      	mov	r0, r2
 8009582:	f7fc fe25 	bl	80061d0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	601a      	str	r2, [r3, #0]
}
 800958c:	bf00      	nop
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	bd90      	pop	{r4, r7, pc}
 8009594:	08010f80 	.word	0x08010f80
 8009598:	08011240 	.word	0x08011240
 800959c:	08010fcc 	.word	0x08010fcc
 80095a0:	20008338 	.word	0x20008338

080095a4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80095a4:	b5b0      	push	{r4, r5, r7, lr}
 80095a6:	b086      	sub	sp, #24
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
 80095b0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80095b2:	e03e      	b.n	8009632 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fd f812 	bl	80065ec <pbuf_clen>
 80095c8:	4603      	mov	r3, r0
 80095ca:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80095d2:	8a7a      	ldrh	r2, [r7, #18]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d906      	bls.n	80095e6 <tcp_free_acked_segments+0x42>
 80095d8:	4b2a      	ldr	r3, [pc, #168]	; (8009684 <tcp_free_acked_segments+0xe0>)
 80095da:	f240 4257 	movw	r2, #1111	; 0x457
 80095de:	492a      	ldr	r1, [pc, #168]	; (8009688 <tcp_free_acked_segments+0xe4>)
 80095e0:	482a      	ldr	r0, [pc, #168]	; (800968c <tcp_free_acked_segments+0xe8>)
 80095e2:	f005 f993 	bl	800e90c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80095ec:	8a7b      	ldrh	r3, [r7, #18]
 80095ee:	1ad3      	subs	r3, r2, r3
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	891a      	ldrh	r2, [r3, #8]
 80095fc:	4b24      	ldr	r3, [pc, #144]	; (8009690 <tcp_free_acked_segments+0xec>)
 80095fe:	881b      	ldrh	r3, [r3, #0]
 8009600:	4413      	add	r3, r2
 8009602:	b29a      	uxth	r2, r3
 8009604:	4b22      	ldr	r3, [pc, #136]	; (8009690 <tcp_free_acked_segments+0xec>)
 8009606:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009608:	6978      	ldr	r0, [r7, #20]
 800960a:	f7fe f9da 	bl	80079c2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00c      	beq.n	8009632 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d109      	bne.n	8009632 <tcp_free_acked_segments+0x8e>
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d106      	bne.n	8009632 <tcp_free_acked_segments+0x8e>
 8009624:	4b17      	ldr	r3, [pc, #92]	; (8009684 <tcp_free_acked_segments+0xe0>)
 8009626:	f240 4261 	movw	r2, #1121	; 0x461
 800962a:	491a      	ldr	r1, [pc, #104]	; (8009694 <tcp_free_acked_segments+0xf0>)
 800962c:	4817      	ldr	r0, [pc, #92]	; (800968c <tcp_free_acked_segments+0xe8>)
 800962e:	f005 f96d 	bl	800e90c <iprintf>
  while (seg_list != NULL &&
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d020      	beq.n	800967a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	4618      	mov	r0, r3
 8009640:	f7fb fc03 	bl	8004e4a <lwip_htonl>
 8009644:	4604      	mov	r4, r0
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	891b      	ldrh	r3, [r3, #8]
 800964a:	461d      	mov	r5, r3
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	899b      	ldrh	r3, [r3, #12]
 8009652:	b29b      	uxth	r3, r3
 8009654:	4618      	mov	r0, r3
 8009656:	f7fb fbe3 	bl	8004e20 <lwip_htons>
 800965a:	4603      	mov	r3, r0
 800965c:	b2db      	uxtb	r3, r3
 800965e:	f003 0303 	and.w	r3, r3, #3
 8009662:	2b00      	cmp	r3, #0
 8009664:	d001      	beq.n	800966a <tcp_free_acked_segments+0xc6>
 8009666:	2301      	movs	r3, #1
 8009668:	e000      	b.n	800966c <tcp_free_acked_segments+0xc8>
 800966a:	2300      	movs	r3, #0
 800966c:	442b      	add	r3, r5
 800966e:	18e2      	adds	r2, r4, r3
 8009670:	4b09      	ldr	r3, [pc, #36]	; (8009698 <tcp_free_acked_segments+0xf4>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009676:	2b00      	cmp	r3, #0
 8009678:	dd9c      	ble.n	80095b4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800967a:	68bb      	ldr	r3, [r7, #8]
}
 800967c:	4618      	mov	r0, r3
 800967e:	3718      	adds	r7, #24
 8009680:	46bd      	mov	sp, r7
 8009682:	bdb0      	pop	{r4, r5, r7, pc}
 8009684:	08010f80 	.word	0x08010f80
 8009688:	08011268 	.word	0x08011268
 800968c:	08010fcc 	.word	0x08010fcc
 8009690:	20008340 	.word	0x20008340
 8009694:	08011290 	.word	0x08011290
 8009698:	2000833c 	.word	0x2000833c

0800969c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800969c:	b5b0      	push	{r4, r5, r7, lr}
 800969e:	b094      	sub	sp, #80	; 0x50
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80096a4:	2300      	movs	r3, #0
 80096a6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d106      	bne.n	80096bc <tcp_receive+0x20>
 80096ae:	4b91      	ldr	r3, [pc, #580]	; (80098f4 <tcp_receive+0x258>)
 80096b0:	f240 427b 	movw	r2, #1147	; 0x47b
 80096b4:	4990      	ldr	r1, [pc, #576]	; (80098f8 <tcp_receive+0x25c>)
 80096b6:	4891      	ldr	r0, [pc, #580]	; (80098fc <tcp_receive+0x260>)
 80096b8:	f005 f928 	bl	800e90c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	7d1b      	ldrb	r3, [r3, #20]
 80096c0:	2b03      	cmp	r3, #3
 80096c2:	d806      	bhi.n	80096d2 <tcp_receive+0x36>
 80096c4:	4b8b      	ldr	r3, [pc, #556]	; (80098f4 <tcp_receive+0x258>)
 80096c6:	f240 427c 	movw	r2, #1148	; 0x47c
 80096ca:	498d      	ldr	r1, [pc, #564]	; (8009900 <tcp_receive+0x264>)
 80096cc:	488b      	ldr	r0, [pc, #556]	; (80098fc <tcp_receive+0x260>)
 80096ce:	f005 f91d 	bl	800e90c <iprintf>

  if (flags & TCP_ACK) {
 80096d2:	4b8c      	ldr	r3, [pc, #560]	; (8009904 <tcp_receive+0x268>)
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	f003 0310 	and.w	r3, r3, #16
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f000 8264 	beq.w	8009ba8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80096e6:	461a      	mov	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ec:	4413      	add	r3, r2
 80096ee:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096f4:	4b84      	ldr	r3, [pc, #528]	; (8009908 <tcp_receive+0x26c>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	1ad3      	subs	r3, r2, r3
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	db1b      	blt.n	8009736 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009702:	4b81      	ldr	r3, [pc, #516]	; (8009908 <tcp_receive+0x26c>)
 8009704:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009706:	429a      	cmp	r2, r3
 8009708:	d106      	bne.n	8009718 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800970e:	4b7f      	ldr	r3, [pc, #508]	; (800990c <tcp_receive+0x270>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	2b00      	cmp	r3, #0
 8009716:	db0e      	blt.n	8009736 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800971c:	4b7b      	ldr	r3, [pc, #492]	; (800990c <tcp_receive+0x270>)
 800971e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009720:	429a      	cmp	r2, r3
 8009722:	d125      	bne.n	8009770 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009724:	4b7a      	ldr	r3, [pc, #488]	; (8009910 <tcp_receive+0x274>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	89db      	ldrh	r3, [r3, #14]
 800972a:	b29a      	uxth	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009732:	429a      	cmp	r2, r3
 8009734:	d91c      	bls.n	8009770 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009736:	4b76      	ldr	r3, [pc, #472]	; (8009910 <tcp_receive+0x274>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	89db      	ldrh	r3, [r3, #14]
 800973c:	b29a      	uxth	r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009750:	429a      	cmp	r2, r3
 8009752:	d205      	bcs.n	8009760 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009760:	4b69      	ldr	r3, [pc, #420]	; (8009908 <tcp_receive+0x26c>)
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009768:	4b68      	ldr	r3, [pc, #416]	; (800990c <tcp_receive+0x270>)
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009770:	4b66      	ldr	r3, [pc, #408]	; (800990c <tcp_receive+0x270>)
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	2b00      	cmp	r3, #0
 800977c:	dc58      	bgt.n	8009830 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800977e:	4b65      	ldr	r3, [pc, #404]	; (8009914 <tcp_receive+0x278>)
 8009780:	881b      	ldrh	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d14b      	bne.n	800981e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009790:	4413      	add	r3, r2
 8009792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009794:	429a      	cmp	r2, r3
 8009796:	d142      	bne.n	800981e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800979e:	2b00      	cmp	r3, #0
 80097a0:	db3d      	blt.n	800981e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097a6:	4b59      	ldr	r3, [pc, #356]	; (800990c <tcp_receive+0x270>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d137      	bne.n	800981e <tcp_receive+0x182>
              found_dupack = 1;
 80097ae:	2301      	movs	r3, #1
 80097b0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80097b8:	2bff      	cmp	r3, #255	; 0xff
 80097ba:	d007      	beq.n	80097cc <tcp_receive+0x130>
                ++pcb->dupacks;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80097c2:	3301      	adds	r3, #1
 80097c4:	b2da      	uxtb	r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80097d2:	2b03      	cmp	r3, #3
 80097d4:	d91b      	bls.n	800980e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80097e0:	4413      	add	r3, r2
 80097e2:	b29a      	uxth	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d30a      	bcc.n	8009804 <tcp_receive+0x168>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80097f8:	4413      	add	r3, r2
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009802:	e004      	b.n	800980e <tcp_receive+0x172>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800980a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009814:	2b02      	cmp	r3, #2
 8009816:	d902      	bls.n	800981e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f001 feeb 	bl	800b5f4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800981e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009820:	2b00      	cmp	r3, #0
 8009822:	f040 8161 	bne.w	8009ae8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800982e:	e15b      	b.n	8009ae8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009830:	4b36      	ldr	r3, [pc, #216]	; (800990c <tcp_receive+0x270>)
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	3b01      	subs	r3, #1
 800983c:	2b00      	cmp	r3, #0
 800983e:	f2c0 814e 	blt.w	8009ade <tcp_receive+0x442>
 8009842:	4b32      	ldr	r3, [pc, #200]	; (800990c <tcp_receive+0x270>)
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800984a:	1ad3      	subs	r3, r2, r3
 800984c:	2b00      	cmp	r3, #0
 800984e:	f300 8146 	bgt.w	8009ade <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	8b5b      	ldrh	r3, [r3, #26]
 8009856:	f003 0304 	and.w	r3, r3, #4
 800985a:	2b00      	cmp	r3, #0
 800985c:	d010      	beq.n	8009880 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	8b5b      	ldrh	r3, [r3, #26]
 8009862:	f023 0304 	bic.w	r3, r3, #4
 8009866:	b29a      	uxth	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800988e:	10db      	asrs	r3, r3, #3
 8009890:	b21b      	sxth	r3, r3
 8009892:	b29a      	uxth	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800989a:	b29b      	uxth	r3, r3
 800989c:	4413      	add	r3, r2
 800989e:	b29b      	uxth	r3, r3
 80098a0:	b21a      	sxth	r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80098a8:	4b18      	ldr	r3, [pc, #96]	; (800990c <tcp_receive+0x270>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80098c0:	4b12      	ldr	r3, [pc, #72]	; (800990c <tcp_receive+0x270>)
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	7d1b      	ldrb	r3, [r3, #20]
 80098cc:	2b03      	cmp	r3, #3
 80098ce:	f240 8097 	bls.w	8009a00 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80098de:	429a      	cmp	r2, r3
 80098e0:	d245      	bcs.n	800996e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	8b5b      	ldrh	r3, [r3, #26]
 80098e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d014      	beq.n	8009918 <tcp_receive+0x27c>
 80098ee:	2301      	movs	r3, #1
 80098f0:	e013      	b.n	800991a <tcp_receive+0x27e>
 80098f2:	bf00      	nop
 80098f4:	08010f80 	.word	0x08010f80
 80098f8:	080112b0 	.word	0x080112b0
 80098fc:	08010fcc 	.word	0x08010fcc
 8009900:	080112cc 	.word	0x080112cc
 8009904:	20008344 	.word	0x20008344
 8009908:	20008338 	.word	0x20008338
 800990c:	2000833c 	.word	0x2000833c
 8009910:	20008328 	.word	0x20008328
 8009914:	20008342 	.word	0x20008342
 8009918:	2302      	movs	r3, #2
 800991a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800991e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009922:	b29a      	uxth	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009928:	fb12 f303 	smulbb	r3, r2, r3
 800992c:	b29b      	uxth	r3, r3
 800992e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009930:	4293      	cmp	r3, r2
 8009932:	bf28      	it	cs
 8009934:	4613      	movcs	r3, r2
 8009936:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800993e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009940:	4413      	add	r3, r2
 8009942:	b29a      	uxth	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800994a:	429a      	cmp	r2, r3
 800994c:	d309      	bcc.n	8009962 <tcp_receive+0x2c6>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009954:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009956:	4413      	add	r3, r2
 8009958:	b29a      	uxth	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009960:	e04e      	b.n	8009a00 <tcp_receive+0x364>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009968:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800996c:	e048      	b.n	8009a00 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009974:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009976:	4413      	add	r3, r2
 8009978:	b29a      	uxth	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009980:	429a      	cmp	r2, r3
 8009982:	d309      	bcc.n	8009998 <tcp_receive+0x2fc>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800998a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800998c:	4413      	add	r3, r2
 800998e:	b29a      	uxth	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009996:	e004      	b.n	80099a2 <tcp_receive+0x306>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800999e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d326      	bcc.n	8009a00 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099d2:	4413      	add	r3, r2
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80099dc:	429a      	cmp	r2, r3
 80099de:	d30a      	bcc.n	80099f6 <tcp_receive+0x35a>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099ea:	4413      	add	r3, r2
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80099f4:	e004      	b.n	8009a00 <tcp_receive+0x364>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a08:	4a98      	ldr	r2, [pc, #608]	; (8009c6c <tcp_receive+0x5d0>)
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f7ff fdca 	bl	80095a4 <tcp_free_acked_segments>
 8009a10:	4602      	mov	r2, r0
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a1e:	4a94      	ldr	r2, [pc, #592]	; (8009c70 <tcp_receive+0x5d4>)
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f7ff fdbf 	bl	80095a4 <tcp_free_acked_segments>
 8009a26:	4602      	mov	r2, r0
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d104      	bne.n	8009a3e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a3a:	861a      	strh	r2, [r3, #48]	; 0x30
 8009a3c:	e002      	b.n	8009a44 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d103      	bne.n	8009a5a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009a60:	4b84      	ldr	r3, [pc, #528]	; (8009c74 <tcp_receive+0x5d8>)
 8009a62:	881b      	ldrh	r3, [r3, #0]
 8009a64:	4413      	add	r3, r2
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	8b5b      	ldrh	r3, [r3, #26]
 8009a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d035      	beq.n	8009ae6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d118      	bne.n	8009ab4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00c      	beq.n	8009aa4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fb f9d7 	bl	8004e4a <lwip_htonl>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	dc20      	bgt.n	8009ae6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	8b5b      	ldrh	r3, [r3, #26]
 8009aa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009ab2:	e018      	b.n	8009ae6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7fb f9c2 	bl	8004e4a <lwip_htonl>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	1ae3      	subs	r3, r4, r3
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	dc0b      	bgt.n	8009ae6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	8b5b      	ldrh	r3, [r3, #26]
 8009ad2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009adc:	e003      	b.n	8009ae6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f001 ff76 	bl	800b9d0 <tcp_send_empty_ack>
 8009ae4:	e000      	b.n	8009ae8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009ae6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d05b      	beq.n	8009ba8 <tcp_receive+0x50c>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009af4:	4b60      	ldr	r3, [pc, #384]	; (8009c78 <tcp_receive+0x5dc>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	1ad3      	subs	r3, r2, r3
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	da54      	bge.n	8009ba8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009afe:	4b5f      	ldr	r3, [pc, #380]	; (8009c7c <tcp_receive+0x5e0>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	1ad3      	subs	r3, r2, r3
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009b12:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009b1c:	10db      	asrs	r3, r3, #3
 8009b1e:	b21b      	sxth	r3, r3
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009b36:	4413      	add	r3, r2
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	b21a      	sxth	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009b40:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	da05      	bge.n	8009b54 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009b48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009b4c:	425b      	negs	r3, r3
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009b54:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009b5e:	109b      	asrs	r3, r3, #2
 8009b60:	b21b      	sxth	r3, r3
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009b72:	b29a      	uxth	r2, r3
 8009b74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009b78:	4413      	add	r3, r2
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	b21a      	sxth	r2, r3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009b88:	10db      	asrs	r3, r3, #3
 8009b8a:	b21b      	sxth	r3, r3
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	4413      	add	r3, r2
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	b21a      	sxth	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009ba8:	4b35      	ldr	r3, [pc, #212]	; (8009c80 <tcp_receive+0x5e4>)
 8009baa:	881b      	ldrh	r3, [r3, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f000 84e2 	beq.w	800a576 <tcp_receive+0xeda>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	7d1b      	ldrb	r3, [r3, #20]
 8009bb6:	2b06      	cmp	r3, #6
 8009bb8:	f200 84dd 	bhi.w	800a576 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bc0:	4b30      	ldr	r3, [pc, #192]	; (8009c84 <tcp_receive+0x5e8>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f2c0 808f 	blt.w	8009cec <tcp_receive+0x650>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bd2:	4b2b      	ldr	r3, [pc, #172]	; (8009c80 <tcp_receive+0x5e4>)
 8009bd4:	881b      	ldrh	r3, [r3, #0]
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	4b2a      	ldr	r3, [pc, #168]	; (8009c84 <tcp_receive+0x5e8>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	440b      	add	r3, r1
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	3301      	adds	r3, #1
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f300 8082 	bgt.w	8009cec <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009be8:	4b27      	ldr	r3, [pc, #156]	; (8009c88 <tcp_receive+0x5ec>)
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bf2:	4b24      	ldr	r3, [pc, #144]	; (8009c84 <tcp_receive+0x5e8>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	1ad3      	subs	r3, r2, r3
 8009bf8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009bfa:	4b23      	ldr	r3, [pc, #140]	; (8009c88 <tcp_receive+0x5ec>)
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d106      	bne.n	8009c10 <tcp_receive+0x574>
 8009c02:	4b22      	ldr	r3, [pc, #136]	; (8009c8c <tcp_receive+0x5f0>)
 8009c04:	f240 5294 	movw	r2, #1428	; 0x594
 8009c08:	4921      	ldr	r1, [pc, #132]	; (8009c90 <tcp_receive+0x5f4>)
 8009c0a:	4822      	ldr	r0, [pc, #136]	; (8009c94 <tcp_receive+0x5f8>)
 8009c0c:	f004 fe7e 	bl	800e90c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c12:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d906      	bls.n	8009c28 <tcp_receive+0x58c>
 8009c1a:	4b1c      	ldr	r3, [pc, #112]	; (8009c8c <tcp_receive+0x5f0>)
 8009c1c:	f240 5295 	movw	r2, #1429	; 0x595
 8009c20:	491d      	ldr	r1, [pc, #116]	; (8009c98 <tcp_receive+0x5fc>)
 8009c22:	481c      	ldr	r0, [pc, #112]	; (8009c94 <tcp_receive+0x5f8>)
 8009c24:	f004 fe72 	bl	800e90c <iprintf>
      off = (u16_t)off32;
 8009c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009c2e:	4b16      	ldr	r3, [pc, #88]	; (8009c88 <tcp_receive+0x5ec>)
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	891b      	ldrh	r3, [r3, #8]
 8009c34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d906      	bls.n	8009c4a <tcp_receive+0x5ae>
 8009c3c:	4b13      	ldr	r3, [pc, #76]	; (8009c8c <tcp_receive+0x5f0>)
 8009c3e:	f240 5297 	movw	r2, #1431	; 0x597
 8009c42:	4916      	ldr	r1, [pc, #88]	; (8009c9c <tcp_receive+0x600>)
 8009c44:	4813      	ldr	r0, [pc, #76]	; (8009c94 <tcp_receive+0x5f8>)
 8009c46:	f004 fe61 	bl	800e90c <iprintf>
      inseg.len -= off;
 8009c4a:	4b0f      	ldr	r3, [pc, #60]	; (8009c88 <tcp_receive+0x5ec>)
 8009c4c:	891a      	ldrh	r2, [r3, #8]
 8009c4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009c52:	1ad3      	subs	r3, r2, r3
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	4b0c      	ldr	r3, [pc, #48]	; (8009c88 <tcp_receive+0x5ec>)
 8009c58:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009c5a:	4b0b      	ldr	r3, [pc, #44]	; (8009c88 <tcp_receive+0x5ec>)
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	891a      	ldrh	r2, [r3, #8]
 8009c60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009c68:	e02a      	b.n	8009cc0 <tcp_receive+0x624>
 8009c6a:	bf00      	nop
 8009c6c:	080112e8 	.word	0x080112e8
 8009c70:	080112f0 	.word	0x080112f0
 8009c74:	20008340 	.word	0x20008340
 8009c78:	2000833c 	.word	0x2000833c
 8009c7c:	20008300 	.word	0x20008300
 8009c80:	20008342 	.word	0x20008342
 8009c84:	20008338 	.word	0x20008338
 8009c88:	20008318 	.word	0x20008318
 8009c8c:	08010f80 	.word	0x08010f80
 8009c90:	080112f8 	.word	0x080112f8
 8009c94:	08010fcc 	.word	0x08010fcc
 8009c98:	08011308 	.word	0x08011308
 8009c9c:	08011318 	.word	0x08011318
        off -= p->len;
 8009ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ca2:	895b      	ldrh	r3, [r3, #10]
 8009ca4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cb0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009cb2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cc2:	895b      	ldrh	r3, [r3, #10]
 8009cc4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d8e9      	bhi.n	8009ca0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009ccc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009cd4:	f7fc fb7c 	bl	80063d0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cdc:	4a91      	ldr	r2, [pc, #580]	; (8009f24 <tcp_receive+0x888>)
 8009cde:	6013      	str	r3, [r2, #0]
 8009ce0:	4b91      	ldr	r3, [pc, #580]	; (8009f28 <tcp_receive+0x88c>)
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	4a8f      	ldr	r2, [pc, #572]	; (8009f24 <tcp_receive+0x888>)
 8009ce6:	6812      	ldr	r2, [r2, #0]
 8009ce8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009cea:	e00d      	b.n	8009d08 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009cec:	4b8d      	ldr	r3, [pc, #564]	; (8009f24 <tcp_receive+0x888>)
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	da06      	bge.n	8009d08 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	8b5b      	ldrh	r3, [r3, #26]
 8009cfe:	f043 0302 	orr.w	r3, r3, #2
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009d08:	4b86      	ldr	r3, [pc, #536]	; (8009f24 <tcp_receive+0x888>)
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f2c0 842a 	blt.w	800a56c <tcp_receive+0xed0>
 8009d18:	4b82      	ldr	r3, [pc, #520]	; (8009f24 <tcp_receive+0x888>)
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d20:	6879      	ldr	r1, [r7, #4]
 8009d22:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009d24:	440b      	add	r3, r1
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	3301      	adds	r3, #1
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f300 841e 	bgt.w	800a56c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d34:	4b7b      	ldr	r3, [pc, #492]	; (8009f24 <tcp_receive+0x888>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	f040 829a 	bne.w	800a272 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009d3e:	4b7a      	ldr	r3, [pc, #488]	; (8009f28 <tcp_receive+0x88c>)
 8009d40:	891c      	ldrh	r4, [r3, #8]
 8009d42:	4b79      	ldr	r3, [pc, #484]	; (8009f28 <tcp_receive+0x88c>)
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	899b      	ldrh	r3, [r3, #12]
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7fb f868 	bl	8004e20 <lwip_htons>
 8009d50:	4603      	mov	r3, r0
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	f003 0303 	and.w	r3, r3, #3
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d001      	beq.n	8009d60 <tcp_receive+0x6c4>
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e000      	b.n	8009d62 <tcp_receive+0x6c6>
 8009d60:	2300      	movs	r3, #0
 8009d62:	4423      	add	r3, r4
 8009d64:	b29a      	uxth	r2, r3
 8009d66:	4b71      	ldr	r3, [pc, #452]	; (8009f2c <tcp_receive+0x890>)
 8009d68:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009d6e:	4b6f      	ldr	r3, [pc, #444]	; (8009f2c <tcp_receive+0x890>)
 8009d70:	881b      	ldrh	r3, [r3, #0]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d275      	bcs.n	8009e62 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009d76:	4b6c      	ldr	r3, [pc, #432]	; (8009f28 <tcp_receive+0x88c>)
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	899b      	ldrh	r3, [r3, #12]
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7fb f84e 	bl	8004e20 <lwip_htons>
 8009d84:	4603      	mov	r3, r0
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	f003 0301 	and.w	r3, r3, #1
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d01f      	beq.n	8009dd0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009d90:	4b65      	ldr	r3, [pc, #404]	; (8009f28 <tcp_receive+0x88c>)
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	899b      	ldrh	r3, [r3, #12]
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	b21b      	sxth	r3, r3
 8009d9a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009d9e:	b21c      	sxth	r4, r3
 8009da0:	4b61      	ldr	r3, [pc, #388]	; (8009f28 <tcp_receive+0x88c>)
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	899b      	ldrh	r3, [r3, #12]
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7fb f839 	bl	8004e20 <lwip_htons>
 8009dae:	4603      	mov	r3, r0
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fb f830 	bl	8004e20 <lwip_htons>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	b21b      	sxth	r3, r3
 8009dc4:	4323      	orrs	r3, r4
 8009dc6:	b21a      	sxth	r2, r3
 8009dc8:	4b57      	ldr	r3, [pc, #348]	; (8009f28 <tcp_receive+0x88c>)
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	b292      	uxth	r2, r2
 8009dce:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009dd4:	4b54      	ldr	r3, [pc, #336]	; (8009f28 <tcp_receive+0x88c>)
 8009dd6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009dd8:	4b53      	ldr	r3, [pc, #332]	; (8009f28 <tcp_receive+0x88c>)
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	899b      	ldrh	r3, [r3, #12]
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7fb f81d 	bl	8004e20 <lwip_htons>
 8009de6:	4603      	mov	r3, r0
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	f003 0302 	and.w	r3, r3, #2
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d005      	beq.n	8009dfe <tcp_receive+0x762>
            inseg.len -= 1;
 8009df2:	4b4d      	ldr	r3, [pc, #308]	; (8009f28 <tcp_receive+0x88c>)
 8009df4:	891b      	ldrh	r3, [r3, #8]
 8009df6:	3b01      	subs	r3, #1
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	4b4b      	ldr	r3, [pc, #300]	; (8009f28 <tcp_receive+0x88c>)
 8009dfc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009dfe:	4b4a      	ldr	r3, [pc, #296]	; (8009f28 <tcp_receive+0x88c>)
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	4a49      	ldr	r2, [pc, #292]	; (8009f28 <tcp_receive+0x88c>)
 8009e04:	8912      	ldrh	r2, [r2, #8]
 8009e06:	4611      	mov	r1, r2
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fc f9e1 	bl	80061d0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009e0e:	4b46      	ldr	r3, [pc, #280]	; (8009f28 <tcp_receive+0x88c>)
 8009e10:	891c      	ldrh	r4, [r3, #8]
 8009e12:	4b45      	ldr	r3, [pc, #276]	; (8009f28 <tcp_receive+0x88c>)
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	899b      	ldrh	r3, [r3, #12]
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7fb f800 	bl	8004e20 <lwip_htons>
 8009e20:	4603      	mov	r3, r0
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	f003 0303 	and.w	r3, r3, #3
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d001      	beq.n	8009e30 <tcp_receive+0x794>
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e000      	b.n	8009e32 <tcp_receive+0x796>
 8009e30:	2300      	movs	r3, #0
 8009e32:	4423      	add	r3, r4
 8009e34:	b29a      	uxth	r2, r3
 8009e36:	4b3d      	ldr	r3, [pc, #244]	; (8009f2c <tcp_receive+0x890>)
 8009e38:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009e3a:	4b3c      	ldr	r3, [pc, #240]	; (8009f2c <tcp_receive+0x890>)
 8009e3c:	881b      	ldrh	r3, [r3, #0]
 8009e3e:	461a      	mov	r2, r3
 8009e40:	4b38      	ldr	r3, [pc, #224]	; (8009f24 <tcp_receive+0x888>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	441a      	add	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4a:	6879      	ldr	r1, [r7, #4]
 8009e4c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009e4e:	440b      	add	r3, r1
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d006      	beq.n	8009e62 <tcp_receive+0x7c6>
 8009e54:	4b36      	ldr	r3, [pc, #216]	; (8009f30 <tcp_receive+0x894>)
 8009e56:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009e5a:	4936      	ldr	r1, [pc, #216]	; (8009f34 <tcp_receive+0x898>)
 8009e5c:	4836      	ldr	r0, [pc, #216]	; (8009f38 <tcp_receive+0x89c>)
 8009e5e:	f004 fd55 	bl	800e90c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f000 80e7 	beq.w	800a03a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009e6c:	4b2e      	ldr	r3, [pc, #184]	; (8009f28 <tcp_receive+0x88c>)
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	899b      	ldrh	r3, [r3, #12]
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7fa ffd3 	bl	8004e20 <lwip_htons>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	f003 0301 	and.w	r3, r3, #1
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d010      	beq.n	8009ea8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009e86:	e00a      	b.n	8009e9e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e8c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f7fd fd92 	bl	80079c2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1f0      	bne.n	8009e88 <tcp_receive+0x7ec>
 8009ea6:	e0c8      	b.n	800a03a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eac:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009eae:	e052      	b.n	8009f56 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	899b      	ldrh	r3, [r3, #12]
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7fa ffb1 	bl	8004e20 <lwip_htons>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	f003 0301 	and.w	r3, r3, #1
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d03d      	beq.n	8009f46 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009eca:	4b17      	ldr	r3, [pc, #92]	; (8009f28 <tcp_receive+0x88c>)
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	899b      	ldrh	r3, [r3, #12]
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fa ffa4 	bl	8004e20 <lwip_htons>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d130      	bne.n	8009f46 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009ee4:	4b10      	ldr	r3, [pc, #64]	; (8009f28 <tcp_receive+0x88c>)
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	899b      	ldrh	r3, [r3, #12]
 8009eea:	b29c      	uxth	r4, r3
 8009eec:	2001      	movs	r0, #1
 8009eee:	f7fa ff97 	bl	8004e20 <lwip_htons>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	4b0c      	ldr	r3, [pc, #48]	; (8009f28 <tcp_receive+0x88c>)
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	4322      	orrs	r2, r4
 8009efc:	b292      	uxth	r2, r2
 8009efe:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009f00:	4b09      	ldr	r3, [pc, #36]	; (8009f28 <tcp_receive+0x88c>)
 8009f02:	891c      	ldrh	r4, [r3, #8]
 8009f04:	4b08      	ldr	r3, [pc, #32]	; (8009f28 <tcp_receive+0x88c>)
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	899b      	ldrh	r3, [r3, #12]
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7fa ff87 	bl	8004e20 <lwip_htons>
 8009f12:	4603      	mov	r3, r0
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	f003 0303 	and.w	r3, r3, #3
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00e      	beq.n	8009f3c <tcp_receive+0x8a0>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e00d      	b.n	8009f3e <tcp_receive+0x8a2>
 8009f22:	bf00      	nop
 8009f24:	20008338 	.word	0x20008338
 8009f28:	20008318 	.word	0x20008318
 8009f2c:	20008342 	.word	0x20008342
 8009f30:	08010f80 	.word	0x08010f80
 8009f34:	08011328 	.word	0x08011328
 8009f38:	08010fcc 	.word	0x08010fcc
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	4423      	add	r3, r4
 8009f40:	b29a      	uxth	r2, r3
 8009f42:	4b98      	ldr	r3, [pc, #608]	; (800a1a4 <tcp_receive+0xb08>)
 8009f44:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f48:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009f50:	6938      	ldr	r0, [r7, #16]
 8009f52:	f7fd fd36 	bl	80079c2 <tcp_seg_free>
            while (next &&
 8009f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00e      	beq.n	8009f7a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009f5c:	4b91      	ldr	r3, [pc, #580]	; (800a1a4 <tcp_receive+0xb08>)
 8009f5e:	881b      	ldrh	r3, [r3, #0]
 8009f60:	461a      	mov	r2, r3
 8009f62:	4b91      	ldr	r3, [pc, #580]	; (800a1a8 <tcp_receive+0xb0c>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	441a      	add	r2, r3
 8009f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f70:	8909      	ldrh	r1, [r1, #8]
 8009f72:	440b      	add	r3, r1
 8009f74:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	da9a      	bge.n	8009eb0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d059      	beq.n	800a034 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8009f80:	4b88      	ldr	r3, [pc, #544]	; (800a1a4 <tcp_receive+0xb08>)
 8009f82:	881b      	ldrh	r3, [r3, #0]
 8009f84:	461a      	mov	r2, r3
 8009f86:	4b88      	ldr	r3, [pc, #544]	; (800a1a8 <tcp_receive+0xb0c>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	441a      	add	r2, r3
 8009f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	dd4d      	ble.n	800a034 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	b29a      	uxth	r2, r3
 8009fa0:	4b81      	ldr	r3, [pc, #516]	; (800a1a8 <tcp_receive+0xb0c>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	1ad3      	subs	r3, r2, r3
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	4b80      	ldr	r3, [pc, #512]	; (800a1ac <tcp_receive+0xb10>)
 8009fac:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009fae:	4b7f      	ldr	r3, [pc, #508]	; (800a1ac <tcp_receive+0xb10>)
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	899b      	ldrh	r3, [r3, #12]
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fa ff32 	bl	8004e20 <lwip_htons>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	f003 0302 	and.w	r3, r3, #2
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d005      	beq.n	8009fd4 <tcp_receive+0x938>
                inseg.len -= 1;
 8009fc8:	4b78      	ldr	r3, [pc, #480]	; (800a1ac <tcp_receive+0xb10>)
 8009fca:	891b      	ldrh	r3, [r3, #8]
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	4b76      	ldr	r3, [pc, #472]	; (800a1ac <tcp_receive+0xb10>)
 8009fd2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009fd4:	4b75      	ldr	r3, [pc, #468]	; (800a1ac <tcp_receive+0xb10>)
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	4a74      	ldr	r2, [pc, #464]	; (800a1ac <tcp_receive+0xb10>)
 8009fda:	8912      	ldrh	r2, [r2, #8]
 8009fdc:	4611      	mov	r1, r2
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7fc f8f6 	bl	80061d0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009fe4:	4b71      	ldr	r3, [pc, #452]	; (800a1ac <tcp_receive+0xb10>)
 8009fe6:	891c      	ldrh	r4, [r3, #8]
 8009fe8:	4b70      	ldr	r3, [pc, #448]	; (800a1ac <tcp_receive+0xb10>)
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	899b      	ldrh	r3, [r3, #12]
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7fa ff15 	bl	8004e20 <lwip_htons>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	f003 0303 	and.w	r3, r3, #3
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d001      	beq.n	800a006 <tcp_receive+0x96a>
 800a002:	2301      	movs	r3, #1
 800a004:	e000      	b.n	800a008 <tcp_receive+0x96c>
 800a006:	2300      	movs	r3, #0
 800a008:	4423      	add	r3, r4
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	4b65      	ldr	r3, [pc, #404]	; (800a1a4 <tcp_receive+0xb08>)
 800a00e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a010:	4b64      	ldr	r3, [pc, #400]	; (800a1a4 <tcp_receive+0xb08>)
 800a012:	881b      	ldrh	r3, [r3, #0]
 800a014:	461a      	mov	r2, r3
 800a016:	4b64      	ldr	r3, [pc, #400]	; (800a1a8 <tcp_receive+0xb0c>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	441a      	add	r2, r3
 800a01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	429a      	cmp	r2, r3
 800a024:	d006      	beq.n	800a034 <tcp_receive+0x998>
 800a026:	4b62      	ldr	r3, [pc, #392]	; (800a1b0 <tcp_receive+0xb14>)
 800a028:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a02c:	4961      	ldr	r1, [pc, #388]	; (800a1b4 <tcp_receive+0xb18>)
 800a02e:	4862      	ldr	r0, [pc, #392]	; (800a1b8 <tcp_receive+0xb1c>)
 800a030:	f004 fc6c 	bl	800e90c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a038:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a03a:	4b5a      	ldr	r3, [pc, #360]	; (800a1a4 <tcp_receive+0xb08>)
 800a03c:	881b      	ldrh	r3, [r3, #0]
 800a03e:	461a      	mov	r2, r3
 800a040:	4b59      	ldr	r3, [pc, #356]	; (800a1a8 <tcp_receive+0xb0c>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	441a      	add	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a04e:	4b55      	ldr	r3, [pc, #340]	; (800a1a4 <tcp_receive+0xb08>)
 800a050:	881b      	ldrh	r3, [r3, #0]
 800a052:	429a      	cmp	r2, r3
 800a054:	d206      	bcs.n	800a064 <tcp_receive+0x9c8>
 800a056:	4b56      	ldr	r3, [pc, #344]	; (800a1b0 <tcp_receive+0xb14>)
 800a058:	f240 6207 	movw	r2, #1543	; 0x607
 800a05c:	4957      	ldr	r1, [pc, #348]	; (800a1bc <tcp_receive+0xb20>)
 800a05e:	4856      	ldr	r0, [pc, #344]	; (800a1b8 <tcp_receive+0xb1c>)
 800a060:	f004 fc54 	bl	800e90c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a068:	4b4e      	ldr	r3, [pc, #312]	; (800a1a4 <tcp_receive+0xb08>)
 800a06a:	881b      	ldrh	r3, [r3, #0]
 800a06c:	1ad3      	subs	r3, r2, r3
 800a06e:	b29a      	uxth	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f7fc ffc5 	bl	8007004 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a07a:	4b4c      	ldr	r3, [pc, #304]	; (800a1ac <tcp_receive+0xb10>)
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	891b      	ldrh	r3, [r3, #8]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d006      	beq.n	800a092 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800a084:	4b49      	ldr	r3, [pc, #292]	; (800a1ac <tcp_receive+0xb10>)
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	4a4d      	ldr	r2, [pc, #308]	; (800a1c0 <tcp_receive+0xb24>)
 800a08a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a08c:	4b47      	ldr	r3, [pc, #284]	; (800a1ac <tcp_receive+0xb10>)
 800a08e:	2200      	movs	r2, #0
 800a090:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a092:	4b46      	ldr	r3, [pc, #280]	; (800a1ac <tcp_receive+0xb10>)
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	899b      	ldrh	r3, [r3, #12]
 800a098:	b29b      	uxth	r3, r3
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fa fec0 	bl	8004e20 <lwip_htons>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	f003 0301 	and.w	r3, r3, #1
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f000 80b8 	beq.w	800a21e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a0ae:	4b45      	ldr	r3, [pc, #276]	; (800a1c4 <tcp_receive+0xb28>)
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	f043 0320 	orr.w	r3, r3, #32
 800a0b6:	b2da      	uxtb	r2, r3
 800a0b8:	4b42      	ldr	r3, [pc, #264]	; (800a1c4 <tcp_receive+0xb28>)
 800a0ba:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a0bc:	e0af      	b.n	800a21e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0c2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	4a36      	ldr	r2, [pc, #216]	; (800a1a8 <tcp_receive+0xb0c>)
 800a0ce:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	891b      	ldrh	r3, [r3, #8]
 800a0d4:	461c      	mov	r4, r3
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	899b      	ldrh	r3, [r3, #12]
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fa fe9e 	bl	8004e20 <lwip_htons>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	f003 0303 	and.w	r3, r3, #3
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d001      	beq.n	800a0f4 <tcp_receive+0xa58>
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e000      	b.n	800a0f6 <tcp_receive+0xa5a>
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	191a      	adds	r2, r3, r4
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fc:	441a      	add	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a106:	461c      	mov	r4, r3
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	891b      	ldrh	r3, [r3, #8]
 800a10c:	461d      	mov	r5, r3
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	899b      	ldrh	r3, [r3, #12]
 800a114:	b29b      	uxth	r3, r3
 800a116:	4618      	mov	r0, r3
 800a118:	f7fa fe82 	bl	8004e20 <lwip_htons>
 800a11c:	4603      	mov	r3, r0
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	f003 0303 	and.w	r3, r3, #3
 800a124:	2b00      	cmp	r3, #0
 800a126:	d001      	beq.n	800a12c <tcp_receive+0xa90>
 800a128:	2301      	movs	r3, #1
 800a12a:	e000      	b.n	800a12e <tcp_receive+0xa92>
 800a12c:	2300      	movs	r3, #0
 800a12e:	442b      	add	r3, r5
 800a130:	429c      	cmp	r4, r3
 800a132:	d206      	bcs.n	800a142 <tcp_receive+0xaa6>
 800a134:	4b1e      	ldr	r3, [pc, #120]	; (800a1b0 <tcp_receive+0xb14>)
 800a136:	f240 622b 	movw	r2, #1579	; 0x62b
 800a13a:	4923      	ldr	r1, [pc, #140]	; (800a1c8 <tcp_receive+0xb2c>)
 800a13c:	481e      	ldr	r0, [pc, #120]	; (800a1b8 <tcp_receive+0xb1c>)
 800a13e:	f004 fbe5 	bl	800e90c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	891b      	ldrh	r3, [r3, #8]
 800a146:	461c      	mov	r4, r3
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	899b      	ldrh	r3, [r3, #12]
 800a14e:	b29b      	uxth	r3, r3
 800a150:	4618      	mov	r0, r3
 800a152:	f7fa fe65 	bl	8004e20 <lwip_htons>
 800a156:	4603      	mov	r3, r0
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	f003 0303 	and.w	r3, r3, #3
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d001      	beq.n	800a166 <tcp_receive+0xaca>
 800a162:	2301      	movs	r3, #1
 800a164:	e000      	b.n	800a168 <tcp_receive+0xacc>
 800a166:	2300      	movs	r3, #0
 800a168:	1919      	adds	r1, r3, r4
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a16e:	b28b      	uxth	r3, r1
 800a170:	1ad3      	subs	r3, r2, r3
 800a172:	b29a      	uxth	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f7fc ff43 	bl	8007004 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	891b      	ldrh	r3, [r3, #8]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d028      	beq.n	800a1da <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a188:	4b0d      	ldr	r3, [pc, #52]	; (800a1c0 <tcp_receive+0xb24>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d01d      	beq.n	800a1cc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800a190:	4b0b      	ldr	r3, [pc, #44]	; (800a1c0 <tcp_receive+0xb24>)
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	4619      	mov	r1, r3
 800a19a:	4610      	mov	r0, r2
 800a19c:	f7fc fa60 	bl	8006660 <pbuf_cat>
 800a1a0:	e018      	b.n	800a1d4 <tcp_receive+0xb38>
 800a1a2:	bf00      	nop
 800a1a4:	20008342 	.word	0x20008342
 800a1a8:	20008338 	.word	0x20008338
 800a1ac:	20008318 	.word	0x20008318
 800a1b0:	08010f80 	.word	0x08010f80
 800a1b4:	08011360 	.word	0x08011360
 800a1b8:	08010fcc 	.word	0x08010fcc
 800a1bc:	0801139c 	.word	0x0801139c
 800a1c0:	20008348 	.word	0x20008348
 800a1c4:	20008345 	.word	0x20008345
 800a1c8:	080113bc 	.word	0x080113bc
            } else {
              recv_data = cseg->p;
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	4a70      	ldr	r2, [pc, #448]	; (800a394 <tcp_receive+0xcf8>)
 800a1d2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	899b      	ldrh	r3, [r3, #12]
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fa fe1c 	bl	8004e20 <lwip_htons>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	f003 0301 	and.w	r3, r3, #1
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00d      	beq.n	800a210 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a1f4:	4b68      	ldr	r3, [pc, #416]	; (800a398 <tcp_receive+0xcfc>)
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	f043 0320 	orr.w	r3, r3, #32
 800a1fc:	b2da      	uxtb	r2, r3
 800a1fe:	4b66      	ldr	r3, [pc, #408]	; (800a398 <tcp_receive+0xcfc>)
 800a200:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	7d1b      	ldrb	r3, [r3, #20]
 800a206:	2b04      	cmp	r3, #4
 800a208:	d102      	bne.n	800a210 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2207      	movs	r2, #7
 800a20e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a218:	68b8      	ldr	r0, [r7, #8]
 800a21a:	f7fd fbd2 	bl	80079c2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a222:	2b00      	cmp	r3, #0
 800a224:	d008      	beq.n	800a238 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	685a      	ldr	r2, [r3, #4]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a232:	429a      	cmp	r2, r3
 800a234:	f43f af43 	beq.w	800a0be <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	8b5b      	ldrh	r3, [r3, #26]
 800a23c:	f003 0301 	and.w	r3, r3, #1
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00e      	beq.n	800a262 <tcp_receive+0xbc6>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	8b5b      	ldrh	r3, [r3, #26]
 800a248:	f023 0301 	bic.w	r3, r3, #1
 800a24c:	b29a      	uxth	r2, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	835a      	strh	r2, [r3, #26]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	8b5b      	ldrh	r3, [r3, #26]
 800a256:	f043 0302 	orr.w	r3, r3, #2
 800a25a:	b29a      	uxth	r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a260:	e188      	b.n	800a574 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	8b5b      	ldrh	r3, [r3, #26]
 800a266:	f043 0301 	orr.w	r3, r3, #1
 800a26a:	b29a      	uxth	r2, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a270:	e180      	b.n	800a574 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a276:	2b00      	cmp	r3, #0
 800a278:	d106      	bne.n	800a288 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a27a:	4848      	ldr	r0, [pc, #288]	; (800a39c <tcp_receive+0xd00>)
 800a27c:	f7fd fbba 	bl	80079f4 <tcp_seg_copy>
 800a280:	4602      	mov	r2, r0
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	675a      	str	r2, [r3, #116]	; 0x74
 800a286:	e16d      	b.n	800a564 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a288:	2300      	movs	r3, #0
 800a28a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a290:	63bb      	str	r3, [r7, #56]	; 0x38
 800a292:	e157      	b.n	800a544 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800a294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	685a      	ldr	r2, [r3, #4]
 800a29a:	4b41      	ldr	r3, [pc, #260]	; (800a3a0 <tcp_receive+0xd04>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d11d      	bne.n	800a2de <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a2a2:	4b3e      	ldr	r3, [pc, #248]	; (800a39c <tcp_receive+0xd00>)
 800a2a4:	891a      	ldrh	r2, [r3, #8]
 800a2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a8:	891b      	ldrh	r3, [r3, #8]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	f240 814f 	bls.w	800a54e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a2b0:	483a      	ldr	r0, [pc, #232]	; (800a39c <tcp_receive+0xd00>)
 800a2b2:	f7fd fb9f 	bl	80079f4 <tcp_seg_copy>
 800a2b6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f000 8149 	beq.w	800a552 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800a2c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d003      	beq.n	800a2ce <tcp_receive+0xc32>
                    prev->next = cseg;
 800a2c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2c8:	697a      	ldr	r2, [r7, #20]
 800a2ca:	601a      	str	r2, [r3, #0]
 800a2cc:	e002      	b.n	800a2d4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	697a      	ldr	r2, [r7, #20]
 800a2d2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a2d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a2d6:	6978      	ldr	r0, [r7, #20]
 800a2d8:	f7ff f8dc 	bl	8009494 <tcp_oos_insert_segment>
                }
                break;
 800a2dc:	e139      	b.n	800a552 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d117      	bne.n	800a314 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a2e4:	4b2e      	ldr	r3, [pc, #184]	; (800a3a0 <tcp_receive+0xd04>)
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	1ad3      	subs	r3, r2, r3
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	da57      	bge.n	800a3a4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a2f4:	4829      	ldr	r0, [pc, #164]	; (800a39c <tcp_receive+0xd00>)
 800a2f6:	f7fd fb7d 	bl	80079f4 <tcp_seg_copy>
 800a2fa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	f000 8129 	beq.w	800a556 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	69ba      	ldr	r2, [r7, #24]
 800a308:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a30a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a30c:	69b8      	ldr	r0, [r7, #24]
 800a30e:	f7ff f8c1 	bl	8009494 <tcp_oos_insert_segment>
                  }
                  break;
 800a312:	e120      	b.n	800a556 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a314:	4b22      	ldr	r3, [pc, #136]	; (800a3a0 <tcp_receive+0xd04>)
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	1ad3      	subs	r3, r2, r3
 800a320:	3b01      	subs	r3, #1
 800a322:	2b00      	cmp	r3, #0
 800a324:	db3e      	blt.n	800a3a4 <tcp_receive+0xd08>
 800a326:	4b1e      	ldr	r3, [pc, #120]	; (800a3a0 <tcp_receive+0xd04>)
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	1ad3      	subs	r3, r2, r3
 800a332:	3301      	adds	r3, #1
 800a334:	2b00      	cmp	r3, #0
 800a336:	dc35      	bgt.n	800a3a4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a338:	4818      	ldr	r0, [pc, #96]	; (800a39c <tcp_receive+0xd00>)
 800a33a:	f7fd fb5b 	bl	80079f4 <tcp_seg_copy>
 800a33e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	2b00      	cmp	r3, #0
 800a344:	f000 8109 	beq.w	800a55a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a350:	8912      	ldrh	r2, [r2, #8]
 800a352:	441a      	add	r2, r3
 800a354:	4b12      	ldr	r3, [pc, #72]	; (800a3a0 <tcp_receive+0xd04>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	1ad3      	subs	r3, r2, r3
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	dd12      	ble.n	800a384 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a35e:	4b10      	ldr	r3, [pc, #64]	; (800a3a0 <tcp_receive+0xd04>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	b29a      	uxth	r2, r3
 800a364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	1ad3      	subs	r3, r2, r3
 800a36e:	b29a      	uxth	r2, r3
 800a370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a372:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a376:	685a      	ldr	r2, [r3, #4]
 800a378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a37a:	891b      	ldrh	r3, [r3, #8]
 800a37c:	4619      	mov	r1, r3
 800a37e:	4610      	mov	r0, r2
 800a380:	f7fb ff26 	bl	80061d0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a386:	69fa      	ldr	r2, [r7, #28]
 800a388:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a38a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a38c:	69f8      	ldr	r0, [r7, #28]
 800a38e:	f7ff f881 	bl	8009494 <tcp_oos_insert_segment>
                  }
                  break;
 800a392:	e0e2      	b.n	800a55a <tcp_receive+0xebe>
 800a394:	20008348 	.word	0x20008348
 800a398:	20008345 	.word	0x20008345
 800a39c:	20008318 	.word	0x20008318
 800a3a0:	20008338 	.word	0x20008338
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	f040 80c6 	bne.w	800a53e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a3b2:	4b80      	ldr	r3, [pc, #512]	; (800a5b4 <tcp_receive+0xf18>)
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	f340 80bd 	ble.w	800a53e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	899b      	ldrh	r3, [r3, #12]
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7fa fd27 	bl	8004e20 <lwip_htons>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	f003 0301 	and.w	r3, r3, #1
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f040 80bf 	bne.w	800a55e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a3e0:	4875      	ldr	r0, [pc, #468]	; (800a5b8 <tcp_receive+0xf1c>)
 800a3e2:	f7fd fb07 	bl	80079f4 <tcp_seg_copy>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ea:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f000 80b6 	beq.w	800a562 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3fe:	8912      	ldrh	r2, [r2, #8]
 800a400:	441a      	add	r2, r3
 800a402:	4b6c      	ldr	r3, [pc, #432]	; (800a5b4 <tcp_receive+0xf18>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	1ad3      	subs	r3, r2, r3
 800a408:	2b00      	cmp	r3, #0
 800a40a:	dd12      	ble.n	800a432 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a40c:	4b69      	ldr	r3, [pc, #420]	; (800a5b4 <tcp_receive+0xf18>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	b29a      	uxth	r2, r3
 800a412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a414:	68db      	ldr	r3, [r3, #12]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	b29b      	uxth	r3, r3
 800a41a:	1ad3      	subs	r3, r2, r3
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a420:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a424:	685a      	ldr	r2, [r3, #4]
 800a426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a428:	891b      	ldrh	r3, [r3, #8]
 800a42a:	4619      	mov	r1, r3
 800a42c:	4610      	mov	r0, r2
 800a42e:	f7fb fecf 	bl	80061d0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a432:	4b62      	ldr	r3, [pc, #392]	; (800a5bc <tcp_receive+0xf20>)
 800a434:	881b      	ldrh	r3, [r3, #0]
 800a436:	461a      	mov	r2, r3
 800a438:	4b5e      	ldr	r3, [pc, #376]	; (800a5b4 <tcp_receive+0xf18>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	441a      	add	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a442:	6879      	ldr	r1, [r7, #4]
 800a444:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a446:	440b      	add	r3, r1
 800a448:	1ad3      	subs	r3, r2, r3
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	f340 8089 	ble.w	800a562 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	899b      	ldrh	r3, [r3, #12]
 800a458:	b29b      	uxth	r3, r3
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7fa fce0 	bl	8004e20 <lwip_htons>
 800a460:	4603      	mov	r3, r0
 800a462:	b2db      	uxtb	r3, r3
 800a464:	f003 0301 	and.w	r3, r3, #1
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d022      	beq.n	800a4b2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	899b      	ldrh	r3, [r3, #12]
 800a474:	b29b      	uxth	r3, r3
 800a476:	b21b      	sxth	r3, r3
 800a478:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a47c:	b21c      	sxth	r4, r3
 800a47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	899b      	ldrh	r3, [r3, #12]
 800a486:	b29b      	uxth	r3, r3
 800a488:	4618      	mov	r0, r3
 800a48a:	f7fa fcc9 	bl	8004e20 <lwip_htons>
 800a48e:	4603      	mov	r3, r0
 800a490:	b2db      	uxtb	r3, r3
 800a492:	b29b      	uxth	r3, r3
 800a494:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a498:	b29b      	uxth	r3, r3
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7fa fcc0 	bl	8004e20 <lwip_htons>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	b21b      	sxth	r3, r3
 800a4a4:	4323      	orrs	r3, r4
 800a4a6:	b21a      	sxth	r2, r3
 800a4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	b292      	uxth	r2, r2
 800a4b0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4bc:	4413      	add	r3, r2
 800a4be:	b299      	uxth	r1, r3
 800a4c0:	4b3c      	ldr	r3, [pc, #240]	; (800a5b4 <tcp_receive+0xf18>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	b29a      	uxth	r2, r3
 800a4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	1a8a      	subs	r2, r1, r2
 800a4cc:	b292      	uxth	r2, r2
 800a4ce:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	685a      	ldr	r2, [r3, #4]
 800a4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	891b      	ldrh	r3, [r3, #8]
 800a4dc:	4619      	mov	r1, r3
 800a4de:	4610      	mov	r0, r2
 800a4e0:	f7fb fe76 	bl	80061d0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	891c      	ldrh	r4, [r3, #8]
 800a4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	899b      	ldrh	r3, [r3, #12]
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7fa fc93 	bl	8004e20 <lwip_htons>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	f003 0303 	and.w	r3, r3, #3
 800a502:	2b00      	cmp	r3, #0
 800a504:	d001      	beq.n	800a50a <tcp_receive+0xe6e>
 800a506:	2301      	movs	r3, #1
 800a508:	e000      	b.n	800a50c <tcp_receive+0xe70>
 800a50a:	2300      	movs	r3, #0
 800a50c:	4423      	add	r3, r4
 800a50e:	b29a      	uxth	r2, r3
 800a510:	4b2a      	ldr	r3, [pc, #168]	; (800a5bc <tcp_receive+0xf20>)
 800a512:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a514:	4b29      	ldr	r3, [pc, #164]	; (800a5bc <tcp_receive+0xf20>)
 800a516:	881b      	ldrh	r3, [r3, #0]
 800a518:	461a      	mov	r2, r3
 800a51a:	4b26      	ldr	r3, [pc, #152]	; (800a5b4 <tcp_receive+0xf18>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	441a      	add	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a524:	6879      	ldr	r1, [r7, #4]
 800a526:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a528:	440b      	add	r3, r1
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d019      	beq.n	800a562 <tcp_receive+0xec6>
 800a52e:	4b24      	ldr	r3, [pc, #144]	; (800a5c0 <tcp_receive+0xf24>)
 800a530:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a534:	4923      	ldr	r1, [pc, #140]	; (800a5c4 <tcp_receive+0xf28>)
 800a536:	4824      	ldr	r0, [pc, #144]	; (800a5c8 <tcp_receive+0xf2c>)
 800a538:	f004 f9e8 	bl	800e90c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a53c:	e011      	b.n	800a562 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	63bb      	str	r3, [r7, #56]	; 0x38
 800a544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a546:	2b00      	cmp	r3, #0
 800a548:	f47f aea4 	bne.w	800a294 <tcp_receive+0xbf8>
 800a54c:	e00a      	b.n	800a564 <tcp_receive+0xec8>
                break;
 800a54e:	bf00      	nop
 800a550:	e008      	b.n	800a564 <tcp_receive+0xec8>
                break;
 800a552:	bf00      	nop
 800a554:	e006      	b.n	800a564 <tcp_receive+0xec8>
                  break;
 800a556:	bf00      	nop
 800a558:	e004      	b.n	800a564 <tcp_receive+0xec8>
                  break;
 800a55a:	bf00      	nop
 800a55c:	e002      	b.n	800a564 <tcp_receive+0xec8>
                  break;
 800a55e:	bf00      	nop
 800a560:	e000      	b.n	800a564 <tcp_receive+0xec8>
                break;
 800a562:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f001 fa33 	bl	800b9d0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a56a:	e003      	b.n	800a574 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f001 fa2f 	bl	800b9d0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a572:	e01a      	b.n	800a5aa <tcp_receive+0xf0e>
 800a574:	e019      	b.n	800a5aa <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a576:	4b0f      	ldr	r3, [pc, #60]	; (800a5b4 <tcp_receive+0xf18>)
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57e:	1ad3      	subs	r3, r2, r3
 800a580:	2b00      	cmp	r3, #0
 800a582:	db0a      	blt.n	800a59a <tcp_receive+0xefe>
 800a584:	4b0b      	ldr	r3, [pc, #44]	; (800a5b4 <tcp_receive+0xf18>)
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58c:	6879      	ldr	r1, [r7, #4]
 800a58e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a590:	440b      	add	r3, r1
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	3301      	adds	r3, #1
 800a596:	2b00      	cmp	r3, #0
 800a598:	dd07      	ble.n	800a5aa <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	8b5b      	ldrh	r3, [r3, #26]
 800a59e:	f043 0302 	orr.w	r3, r3, #2
 800a5a2:	b29a      	uxth	r2, r3
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a5a8:	e7ff      	b.n	800a5aa <tcp_receive+0xf0e>
 800a5aa:	bf00      	nop
 800a5ac:	3750      	adds	r7, #80	; 0x50
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bdb0      	pop	{r4, r5, r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	20008338 	.word	0x20008338
 800a5b8:	20008318 	.word	0x20008318
 800a5bc:	20008342 	.word	0x20008342
 800a5c0:	08010f80 	.word	0x08010f80
 800a5c4:	08011328 	.word	0x08011328
 800a5c8:	08010fcc 	.word	0x08010fcc

0800a5cc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a5d2:	4b15      	ldr	r3, [pc, #84]	; (800a628 <tcp_get_next_optbyte+0x5c>)
 800a5d4:	881b      	ldrh	r3, [r3, #0]
 800a5d6:	1c5a      	adds	r2, r3, #1
 800a5d8:	b291      	uxth	r1, r2
 800a5da:	4a13      	ldr	r2, [pc, #76]	; (800a628 <tcp_get_next_optbyte+0x5c>)
 800a5dc:	8011      	strh	r1, [r2, #0]
 800a5de:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a5e0:	4b12      	ldr	r3, [pc, #72]	; (800a62c <tcp_get_next_optbyte+0x60>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d004      	beq.n	800a5f2 <tcp_get_next_optbyte+0x26>
 800a5e8:	4b11      	ldr	r3, [pc, #68]	; (800a630 <tcp_get_next_optbyte+0x64>)
 800a5ea:	881b      	ldrh	r3, [r3, #0]
 800a5ec:	88fa      	ldrh	r2, [r7, #6]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d208      	bcs.n	800a604 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a5f2:	4b10      	ldr	r3, [pc, #64]	; (800a634 <tcp_get_next_optbyte+0x68>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3314      	adds	r3, #20
 800a5f8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a5fa:	88fb      	ldrh	r3, [r7, #6]
 800a5fc:	683a      	ldr	r2, [r7, #0]
 800a5fe:	4413      	add	r3, r2
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	e00b      	b.n	800a61c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a604:	88fb      	ldrh	r3, [r7, #6]
 800a606:	b2da      	uxtb	r2, r3
 800a608:	4b09      	ldr	r3, [pc, #36]	; (800a630 <tcp_get_next_optbyte+0x64>)
 800a60a:	881b      	ldrh	r3, [r3, #0]
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	1ad3      	subs	r3, r2, r3
 800a610:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a612:	4b06      	ldr	r3, [pc, #24]	; (800a62c <tcp_get_next_optbyte+0x60>)
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	797b      	ldrb	r3, [r7, #5]
 800a618:	4413      	add	r3, r2
 800a61a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr
 800a628:	20008334 	.word	0x20008334
 800a62c:	20008330 	.word	0x20008330
 800a630:	2000832e 	.word	0x2000832e
 800a634:	20008328 	.word	0x20008328

0800a638 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d106      	bne.n	800a654 <tcp_parseopt+0x1c>
 800a646:	4b32      	ldr	r3, [pc, #200]	; (800a710 <tcp_parseopt+0xd8>)
 800a648:	f240 727d 	movw	r2, #1917	; 0x77d
 800a64c:	4931      	ldr	r1, [pc, #196]	; (800a714 <tcp_parseopt+0xdc>)
 800a64e:	4832      	ldr	r0, [pc, #200]	; (800a718 <tcp_parseopt+0xe0>)
 800a650:	f004 f95c 	bl	800e90c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a654:	4b31      	ldr	r3, [pc, #196]	; (800a71c <tcp_parseopt+0xe4>)
 800a656:	881b      	ldrh	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d055      	beq.n	800a708 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a65c:	4b30      	ldr	r3, [pc, #192]	; (800a720 <tcp_parseopt+0xe8>)
 800a65e:	2200      	movs	r2, #0
 800a660:	801a      	strh	r2, [r3, #0]
 800a662:	e045      	b.n	800a6f0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a664:	f7ff ffb2 	bl	800a5cc <tcp_get_next_optbyte>
 800a668:	4603      	mov	r3, r0
 800a66a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a66c:	7bfb      	ldrb	r3, [r7, #15]
 800a66e:	2b02      	cmp	r3, #2
 800a670:	d006      	beq.n	800a680 <tcp_parseopt+0x48>
 800a672:	2b02      	cmp	r3, #2
 800a674:	dc2b      	bgt.n	800a6ce <tcp_parseopt+0x96>
 800a676:	2b00      	cmp	r3, #0
 800a678:	d041      	beq.n	800a6fe <tcp_parseopt+0xc6>
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d127      	bne.n	800a6ce <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a67e:	e037      	b.n	800a6f0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a680:	f7ff ffa4 	bl	800a5cc <tcp_get_next_optbyte>
 800a684:	4603      	mov	r3, r0
 800a686:	2b04      	cmp	r3, #4
 800a688:	d13b      	bne.n	800a702 <tcp_parseopt+0xca>
 800a68a:	4b25      	ldr	r3, [pc, #148]	; (800a720 <tcp_parseopt+0xe8>)
 800a68c:	881b      	ldrh	r3, [r3, #0]
 800a68e:	3301      	adds	r3, #1
 800a690:	4a22      	ldr	r2, [pc, #136]	; (800a71c <tcp_parseopt+0xe4>)
 800a692:	8812      	ldrh	r2, [r2, #0]
 800a694:	4293      	cmp	r3, r2
 800a696:	da34      	bge.n	800a702 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a698:	f7ff ff98 	bl	800a5cc <tcp_get_next_optbyte>
 800a69c:	4603      	mov	r3, r0
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	021b      	lsls	r3, r3, #8
 800a6a2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a6a4:	f7ff ff92 	bl	800a5cc <tcp_get_next_optbyte>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	89bb      	ldrh	r3, [r7, #12]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a6b2:	89bb      	ldrh	r3, [r7, #12]
 800a6b4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a6b8:	d804      	bhi.n	800a6c4 <tcp_parseopt+0x8c>
 800a6ba:	89bb      	ldrh	r3, [r7, #12]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d001      	beq.n	800a6c4 <tcp_parseopt+0x8c>
 800a6c0:	89ba      	ldrh	r2, [r7, #12]
 800a6c2:	e001      	b.n	800a6c8 <tcp_parseopt+0x90>
 800a6c4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a6cc:	e010      	b.n	800a6f0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a6ce:	f7ff ff7d 	bl	800a5cc <tcp_get_next_optbyte>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a6d6:	7afb      	ldrb	r3, [r7, #11]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d914      	bls.n	800a706 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a6dc:	7afb      	ldrb	r3, [r7, #11]
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	4b0f      	ldr	r3, [pc, #60]	; (800a720 <tcp_parseopt+0xe8>)
 800a6e2:	881b      	ldrh	r3, [r3, #0]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	3b02      	subs	r3, #2
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	4b0c      	ldr	r3, [pc, #48]	; (800a720 <tcp_parseopt+0xe8>)
 800a6ee:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a6f0:	4b0b      	ldr	r3, [pc, #44]	; (800a720 <tcp_parseopt+0xe8>)
 800a6f2:	881a      	ldrh	r2, [r3, #0]
 800a6f4:	4b09      	ldr	r3, [pc, #36]	; (800a71c <tcp_parseopt+0xe4>)
 800a6f6:	881b      	ldrh	r3, [r3, #0]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d3b3      	bcc.n	800a664 <tcp_parseopt+0x2c>
 800a6fc:	e004      	b.n	800a708 <tcp_parseopt+0xd0>
          return;
 800a6fe:	bf00      	nop
 800a700:	e002      	b.n	800a708 <tcp_parseopt+0xd0>
            return;
 800a702:	bf00      	nop
 800a704:	e000      	b.n	800a708 <tcp_parseopt+0xd0>
            return;
 800a706:	bf00      	nop
      }
    }
  }
}
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	08010f80 	.word	0x08010f80
 800a714:	080113e4 	.word	0x080113e4
 800a718:	08010fcc 	.word	0x08010fcc
 800a71c:	2000832c 	.word	0x2000832c
 800a720:	20008334 	.word	0x20008334

0800a724 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a724:	b480      	push	{r7}
 800a726:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a728:	4b05      	ldr	r3, [pc, #20]	; (800a740 <tcp_trigger_input_pcb_close+0x1c>)
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	f043 0310 	orr.w	r3, r3, #16
 800a730:	b2da      	uxtb	r2, r3
 800a732:	4b03      	ldr	r3, [pc, #12]	; (800a740 <tcp_trigger_input_pcb_close+0x1c>)
 800a734:	701a      	strb	r2, [r3, #0]
}
 800a736:	bf00      	nop
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr
 800a740:	20008345 	.word	0x20008345

0800a744 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00a      	beq.n	800a76c <tcp_route+0x28>
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	7a1b      	ldrb	r3, [r3, #8]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d006      	beq.n	800a76c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	7a1b      	ldrb	r3, [r3, #8]
 800a762:	4618      	mov	r0, r3
 800a764:	f7fb fb5a 	bl	8005e1c <netif_get_by_index>
 800a768:	4603      	mov	r3, r0
 800a76a:	e003      	b.n	800a774 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f002 fe7d 	bl	800d46c <ip4_route>
 800a772:	4603      	mov	r3, r0
  }
}
 800a774:	4618      	mov	r0, r3
 800a776:	3710      	adds	r7, #16
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a77c:	b590      	push	{r4, r7, lr}
 800a77e:	b087      	sub	sp, #28
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	60b9      	str	r1, [r7, #8]
 800a786:	603b      	str	r3, [r7, #0]
 800a788:	4613      	mov	r3, r2
 800a78a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d105      	bne.n	800a79e <tcp_create_segment+0x22>
 800a792:	4b44      	ldr	r3, [pc, #272]	; (800a8a4 <tcp_create_segment+0x128>)
 800a794:	22a3      	movs	r2, #163	; 0xa3
 800a796:	4944      	ldr	r1, [pc, #272]	; (800a8a8 <tcp_create_segment+0x12c>)
 800a798:	4844      	ldr	r0, [pc, #272]	; (800a8ac <tcp_create_segment+0x130>)
 800a79a:	f004 f8b7 	bl	800e90c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d105      	bne.n	800a7b0 <tcp_create_segment+0x34>
 800a7a4:	4b3f      	ldr	r3, [pc, #252]	; (800a8a4 <tcp_create_segment+0x128>)
 800a7a6:	22a4      	movs	r2, #164	; 0xa4
 800a7a8:	4941      	ldr	r1, [pc, #260]	; (800a8b0 <tcp_create_segment+0x134>)
 800a7aa:	4840      	ldr	r0, [pc, #256]	; (800a8ac <tcp_create_segment+0x130>)
 800a7ac:	f004 f8ae 	bl	800e90c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a7b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	f003 0304 	and.w	r3, r3, #4
 800a7bc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a7be:	2003      	movs	r0, #3
 800a7c0:	f7fa ffa6 	bl	8005710 <memp_malloc>
 800a7c4:	6138      	str	r0, [r7, #16]
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d104      	bne.n	800a7d6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a7cc:	68b8      	ldr	r0, [r7, #8]
 800a7ce:	f7fb fe85 	bl	80064dc <pbuf_free>
    return NULL;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	e061      	b.n	800a89a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a7dc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	68ba      	ldr	r2, [r7, #8]
 800a7e8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	891a      	ldrh	r2, [r3, #8]
 800a7ee:	7dfb      	ldrb	r3, [r7, #23]
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d205      	bcs.n	800a802 <tcp_create_segment+0x86>
 800a7f6:	4b2b      	ldr	r3, [pc, #172]	; (800a8a4 <tcp_create_segment+0x128>)
 800a7f8:	22b0      	movs	r2, #176	; 0xb0
 800a7fa:	492e      	ldr	r1, [pc, #184]	; (800a8b4 <tcp_create_segment+0x138>)
 800a7fc:	482b      	ldr	r0, [pc, #172]	; (800a8ac <tcp_create_segment+0x130>)
 800a7fe:	f004 f885 	bl	800e90c <iprintf>
  seg->len = p->tot_len - optlen;
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	891a      	ldrh	r2, [r3, #8]
 800a806:	7dfb      	ldrb	r3, [r7, #23]
 800a808:	b29b      	uxth	r3, r3
 800a80a:	1ad3      	subs	r3, r2, r3
 800a80c:	b29a      	uxth	r2, r3
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a812:	2114      	movs	r1, #20
 800a814:	68b8      	ldr	r0, [r7, #8]
 800a816:	f7fb fdcb 	bl	80063b0 <pbuf_add_header>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d004      	beq.n	800a82a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a820:	6938      	ldr	r0, [r7, #16]
 800a822:	f7fd f8ce 	bl	80079c2 <tcp_seg_free>
    return NULL;
 800a826:	2300      	movs	r3, #0
 800a828:	e037      	b.n	800a89a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	685a      	ldr	r2, [r3, #4]
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	8ada      	ldrh	r2, [r3, #22]
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	68dc      	ldr	r4, [r3, #12]
 800a83c:	4610      	mov	r0, r2
 800a83e:	f7fa faef 	bl	8004e20 <lwip_htons>
 800a842:	4603      	mov	r3, r0
 800a844:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	8b1a      	ldrh	r2, [r3, #24]
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	68dc      	ldr	r4, [r3, #12]
 800a84e:	4610      	mov	r0, r2
 800a850:	f7fa fae6 	bl	8004e20 <lwip_htons>
 800a854:	4603      	mov	r3, r0
 800a856:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	68dc      	ldr	r4, [r3, #12]
 800a85c:	6838      	ldr	r0, [r7, #0]
 800a85e:	f7fa faf4 	bl	8004e4a <lwip_htonl>
 800a862:	4603      	mov	r3, r0
 800a864:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a866:	7dfb      	ldrb	r3, [r7, #23]
 800a868:	089b      	lsrs	r3, r3, #2
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	3305      	adds	r3, #5
 800a870:	b29b      	uxth	r3, r3
 800a872:	031b      	lsls	r3, r3, #12
 800a874:	b29a      	uxth	r2, r3
 800a876:	79fb      	ldrb	r3, [r7, #7]
 800a878:	b29b      	uxth	r3, r3
 800a87a:	4313      	orrs	r3, r2
 800a87c:	b29a      	uxth	r2, r3
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	68dc      	ldr	r4, [r3, #12]
 800a882:	4610      	mov	r0, r2
 800a884:	f7fa facc 	bl	8004e20 <lwip_htons>
 800a888:	4603      	mov	r3, r0
 800a88a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	2200      	movs	r2, #0
 800a892:	749a      	strb	r2, [r3, #18]
 800a894:	2200      	movs	r2, #0
 800a896:	74da      	strb	r2, [r3, #19]
  return seg;
 800a898:	693b      	ldr	r3, [r7, #16]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	371c      	adds	r7, #28
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd90      	pop	{r4, r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	08011400 	.word	0x08011400
 800a8a8:	08011434 	.word	0x08011434
 800a8ac:	08011454 	.word	0x08011454
 800a8b0:	0801147c 	.word	0x0801147c
 800a8b4:	080114a0 	.word	0x080114a0

0800a8b8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a8b8:	b590      	push	{r4, r7, lr}
 800a8ba:	b08b      	sub	sp, #44	; 0x2c
 800a8bc:	af02      	add	r7, sp, #8
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	61fb      	str	r3, [r7, #28]
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d106      	bne.n	800a8e4 <tcp_split_unsent_seg+0x2c>
 800a8d6:	4b95      	ldr	r3, [pc, #596]	; (800ab2c <tcp_split_unsent_seg+0x274>)
 800a8d8:	f240 324b 	movw	r2, #843	; 0x34b
 800a8dc:	4994      	ldr	r1, [pc, #592]	; (800ab30 <tcp_split_unsent_seg+0x278>)
 800a8de:	4895      	ldr	r0, [pc, #596]	; (800ab34 <tcp_split_unsent_seg+0x27c>)
 800a8e0:	f004 f814 	bl	800e90c <iprintf>

  useg = pcb->unsent;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8e8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d102      	bne.n	800a8f6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a8f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8f4:	e116      	b.n	800ab24 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a8f6:	887b      	ldrh	r3, [r7, #2]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d109      	bne.n	800a910 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a8fc:	4b8b      	ldr	r3, [pc, #556]	; (800ab2c <tcp_split_unsent_seg+0x274>)
 800a8fe:	f240 3253 	movw	r2, #851	; 0x353
 800a902:	498d      	ldr	r1, [pc, #564]	; (800ab38 <tcp_split_unsent_seg+0x280>)
 800a904:	488b      	ldr	r0, [pc, #556]	; (800ab34 <tcp_split_unsent_seg+0x27c>)
 800a906:	f004 f801 	bl	800e90c <iprintf>
    return ERR_VAL;
 800a90a:	f06f 0305 	mvn.w	r3, #5
 800a90e:	e109      	b.n	800ab24 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	891b      	ldrh	r3, [r3, #8]
 800a914:	887a      	ldrh	r2, [r7, #2]
 800a916:	429a      	cmp	r2, r3
 800a918:	d301      	bcc.n	800a91e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	e102      	b.n	800ab24 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a922:	887a      	ldrh	r2, [r7, #2]
 800a924:	429a      	cmp	r2, r3
 800a926:	d906      	bls.n	800a936 <tcp_split_unsent_seg+0x7e>
 800a928:	4b80      	ldr	r3, [pc, #512]	; (800ab2c <tcp_split_unsent_seg+0x274>)
 800a92a:	f240 325b 	movw	r2, #859	; 0x35b
 800a92e:	4983      	ldr	r1, [pc, #524]	; (800ab3c <tcp_split_unsent_seg+0x284>)
 800a930:	4880      	ldr	r0, [pc, #512]	; (800ab34 <tcp_split_unsent_seg+0x27c>)
 800a932:	f003 ffeb 	bl	800e90c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	891b      	ldrh	r3, [r3, #8]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d106      	bne.n	800a94c <tcp_split_unsent_seg+0x94>
 800a93e:	4b7b      	ldr	r3, [pc, #492]	; (800ab2c <tcp_split_unsent_seg+0x274>)
 800a940:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a944:	497e      	ldr	r1, [pc, #504]	; (800ab40 <tcp_split_unsent_seg+0x288>)
 800a946:	487b      	ldr	r0, [pc, #492]	; (800ab34 <tcp_split_unsent_seg+0x27c>)
 800a948:	f003 ffe0 	bl	800e90c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	7a9b      	ldrb	r3, [r3, #10]
 800a950:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a952:	7bfb      	ldrb	r3, [r7, #15]
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	b2db      	uxtb	r3, r3
 800a958:	f003 0304 	and.w	r3, r3, #4
 800a95c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	891a      	ldrh	r2, [r3, #8]
 800a962:	887b      	ldrh	r3, [r7, #2]
 800a964:	1ad3      	subs	r3, r2, r3
 800a966:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a968:	7bbb      	ldrb	r3, [r7, #14]
 800a96a:	b29a      	uxth	r2, r3
 800a96c:	89bb      	ldrh	r3, [r7, #12]
 800a96e:	4413      	add	r3, r2
 800a970:	b29b      	uxth	r3, r3
 800a972:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a976:	4619      	mov	r1, r3
 800a978:	2036      	movs	r0, #54	; 0x36
 800a97a:	f7fb facb 	bl	8005f14 <pbuf_alloc>
 800a97e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	2b00      	cmp	r3, #0
 800a984:	f000 80b7 	beq.w	800aaf6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	891a      	ldrh	r2, [r3, #8]
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	891b      	ldrh	r3, [r3, #8]
 800a992:	1ad3      	subs	r3, r2, r3
 800a994:	b29a      	uxth	r2, r3
 800a996:	887b      	ldrh	r3, [r7, #2]
 800a998:	4413      	add	r3, r2
 800a99a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	6858      	ldr	r0, [r3, #4]
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	685a      	ldr	r2, [r3, #4]
 800a9a4:	7bbb      	ldrb	r3, [r7, #14]
 800a9a6:	18d1      	adds	r1, r2, r3
 800a9a8:	897b      	ldrh	r3, [r7, #10]
 800a9aa:	89ba      	ldrh	r2, [r7, #12]
 800a9ac:	f7fb ff80 	bl	80068b0 <pbuf_copy_partial>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	89bb      	ldrh	r3, [r7, #12]
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	f040 809f 	bne.w	800aafa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	68db      	ldr	r3, [r3, #12]
 800a9c0:	899b      	ldrh	r3, [r3, #12]
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7fa fa2b 	bl	8004e20 <lwip_htons>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9d2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a9d8:	7efb      	ldrb	r3, [r7, #27]
 800a9da:	f003 0308 	and.w	r3, r3, #8
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d007      	beq.n	800a9f2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a9e2:	7efb      	ldrb	r3, [r7, #27]
 800a9e4:	f023 0308 	bic.w	r3, r3, #8
 800a9e8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a9ea:	7ebb      	ldrb	r3, [r7, #26]
 800a9ec:	f043 0308 	orr.w	r3, r3, #8
 800a9f0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a9f2:	7efb      	ldrb	r3, [r7, #27]
 800a9f4:	f003 0301 	and.w	r3, r3, #1
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d007      	beq.n	800aa0c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a9fc:	7efb      	ldrb	r3, [r7, #27]
 800a9fe:	f023 0301 	bic.w	r3, r3, #1
 800aa02:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800aa04:	7ebb      	ldrb	r3, [r7, #26]
 800aa06:	f043 0301 	orr.w	r3, r3, #1
 800aa0a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7fa fa19 	bl	8004e4a <lwip_htonl>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	887b      	ldrh	r3, [r7, #2]
 800aa1c:	18d1      	adds	r1, r2, r3
 800aa1e:	7eba      	ldrb	r2, [r7, #26]
 800aa20:	7bfb      	ldrb	r3, [r7, #15]
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	460b      	mov	r3, r1
 800aa26:	6939      	ldr	r1, [r7, #16]
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f7ff fea7 	bl	800a77c <tcp_create_segment>
 800aa2e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d063      	beq.n	800aafe <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7fb fdd6 	bl	80065ec <pbuf_clen>
 800aa40:	4603      	mov	r3, r0
 800aa42:	461a      	mov	r2, r3
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aa4a:	1a9b      	subs	r3, r3, r2
 800aa4c:	b29a      	uxth	r2, r3
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	6858      	ldr	r0, [r3, #4]
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	891a      	ldrh	r2, [r3, #8]
 800aa5e:	89bb      	ldrh	r3, [r7, #12]
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	4619      	mov	r1, r3
 800aa66:	f7fb fbb3 	bl	80061d0 <pbuf_realloc>
  useg->len -= remainder;
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	891a      	ldrh	r2, [r3, #8]
 800aa6e:	89bb      	ldrh	r3, [r7, #12]
 800aa70:	1ad3      	subs	r3, r2, r3
 800aa72:	b29a      	uxth	r2, r3
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	899b      	ldrh	r3, [r3, #12]
 800aa7e:	b29c      	uxth	r4, r3
 800aa80:	7efb      	ldrb	r3, [r7, #27]
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7fa f9cb 	bl	8004e20 <lwip_htons>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	4322      	orrs	r2, r4
 800aa94:	b292      	uxth	r2, r2
 800aa96:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7fb fda5 	bl	80065ec <pbuf_clen>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aaac:	4413      	add	r3, r2
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800aab6:	69fb      	ldr	r3, [r7, #28]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	4618      	mov	r0, r3
 800aabc:	f7fb fd96 	bl	80065ec <pbuf_clen>
 800aac0:	4603      	mov	r3, r0
 800aac2:	461a      	mov	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aaca:	4413      	add	r3, r2
 800aacc:	b29a      	uxth	r2, r3
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	69fa      	ldr	r2, [r7, #28]
 800aae0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800aae2:	69fb      	ldr	r3, [r7, #28]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d103      	bne.n	800aaf2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2200      	movs	r2, #0
 800aaee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	e016      	b.n	800ab24 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800aaf6:	bf00      	nop
 800aaf8:	e002      	b.n	800ab00 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800aafa:	bf00      	nop
 800aafc:	e000      	b.n	800ab00 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800aafe:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d006      	beq.n	800ab14 <tcp_split_unsent_seg+0x25c>
 800ab06:	4b09      	ldr	r3, [pc, #36]	; (800ab2c <tcp_split_unsent_seg+0x274>)
 800ab08:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ab0c:	490d      	ldr	r1, [pc, #52]	; (800ab44 <tcp_split_unsent_seg+0x28c>)
 800ab0e:	4809      	ldr	r0, [pc, #36]	; (800ab34 <tcp_split_unsent_seg+0x27c>)
 800ab10:	f003 fefc 	bl	800e90c <iprintf>
  if (p != NULL) {
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d002      	beq.n	800ab20 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ab1a:	6938      	ldr	r0, [r7, #16]
 800ab1c:	f7fb fcde 	bl	80064dc <pbuf_free>
  }

  return ERR_MEM;
 800ab20:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3724      	adds	r7, #36	; 0x24
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd90      	pop	{r4, r7, pc}
 800ab2c:	08011400 	.word	0x08011400
 800ab30:	08011794 	.word	0x08011794
 800ab34:	08011454 	.word	0x08011454
 800ab38:	080117b8 	.word	0x080117b8
 800ab3c:	080117dc 	.word	0x080117dc
 800ab40:	080117ec 	.word	0x080117ec
 800ab44:	080117fc 	.word	0x080117fc

0800ab48 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ab48:	b590      	push	{r4, r7, lr}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d106      	bne.n	800ab64 <tcp_send_fin+0x1c>
 800ab56:	4b21      	ldr	r3, [pc, #132]	; (800abdc <tcp_send_fin+0x94>)
 800ab58:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800ab5c:	4920      	ldr	r1, [pc, #128]	; (800abe0 <tcp_send_fin+0x98>)
 800ab5e:	4821      	ldr	r0, [pc, #132]	; (800abe4 <tcp_send_fin+0x9c>)
 800ab60:	f003 fed4 	bl	800e90c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d02e      	beq.n	800abca <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab70:	60fb      	str	r3, [r7, #12]
 800ab72:	e002      	b.n	800ab7a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d1f8      	bne.n	800ab74 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	899b      	ldrh	r3, [r3, #12]
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7fa f948 	bl	8004e20 <lwip_htons>
 800ab90:	4603      	mov	r3, r0
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	f003 0307 	and.w	r3, r3, #7
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d116      	bne.n	800abca <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	899b      	ldrh	r3, [r3, #12]
 800aba2:	b29c      	uxth	r4, r3
 800aba4:	2001      	movs	r0, #1
 800aba6:	f7fa f93b 	bl	8004e20 <lwip_htons>
 800abaa:	4603      	mov	r3, r0
 800abac:	461a      	mov	r2, r3
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	4322      	orrs	r2, r4
 800abb4:	b292      	uxth	r2, r2
 800abb6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	8b5b      	ldrh	r3, [r3, #26]
 800abbc:	f043 0320 	orr.w	r3, r3, #32
 800abc0:	b29a      	uxth	r2, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800abc6:	2300      	movs	r3, #0
 800abc8:	e004      	b.n	800abd4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800abca:	2101      	movs	r1, #1
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 f80b 	bl	800abe8 <tcp_enqueue_flags>
 800abd2:	4603      	mov	r3, r0
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3714      	adds	r7, #20
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd90      	pop	{r4, r7, pc}
 800abdc:	08011400 	.word	0x08011400
 800abe0:	08011808 	.word	0x08011808
 800abe4:	08011454 	.word	0x08011454

0800abe8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b08a      	sub	sp, #40	; 0x28
 800abec:	af02      	add	r7, sp, #8
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	460b      	mov	r3, r1
 800abf2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800abf4:	2300      	movs	r3, #0
 800abf6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800abf8:	2300      	movs	r3, #0
 800abfa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800abfc:	78fb      	ldrb	r3, [r7, #3]
 800abfe:	f003 0303 	and.w	r3, r3, #3
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d106      	bne.n	800ac14 <tcp_enqueue_flags+0x2c>
 800ac06:	4b67      	ldr	r3, [pc, #412]	; (800ada4 <tcp_enqueue_flags+0x1bc>)
 800ac08:	f240 4211 	movw	r2, #1041	; 0x411
 800ac0c:	4966      	ldr	r1, [pc, #408]	; (800ada8 <tcp_enqueue_flags+0x1c0>)
 800ac0e:	4867      	ldr	r0, [pc, #412]	; (800adac <tcp_enqueue_flags+0x1c4>)
 800ac10:	f003 fe7c 	bl	800e90c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d106      	bne.n	800ac28 <tcp_enqueue_flags+0x40>
 800ac1a:	4b62      	ldr	r3, [pc, #392]	; (800ada4 <tcp_enqueue_flags+0x1bc>)
 800ac1c:	f240 4213 	movw	r2, #1043	; 0x413
 800ac20:	4963      	ldr	r1, [pc, #396]	; (800adb0 <tcp_enqueue_flags+0x1c8>)
 800ac22:	4862      	ldr	r0, [pc, #392]	; (800adac <tcp_enqueue_flags+0x1c4>)
 800ac24:	f003 fe72 	bl	800e90c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ac28:	78fb      	ldrb	r3, [r7, #3]
 800ac2a:	f003 0302 	and.w	r3, r3, #2
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d001      	beq.n	800ac36 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ac32:	2301      	movs	r3, #1
 800ac34:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ac36:	7ffb      	ldrb	r3, [r7, #31]
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	f003 0304 	and.w	r3, r3, #4
 800ac40:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ac42:	7dfb      	ldrb	r3, [r7, #23]
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	2036      	movs	r0, #54	; 0x36
 800ac4e:	f7fb f961 	bl	8005f14 <pbuf_alloc>
 800ac52:	6138      	str	r0, [r7, #16]
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d109      	bne.n	800ac6e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	8b5b      	ldrh	r3, [r3, #26]
 800ac5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ac68:	f04f 33ff 	mov.w	r3, #4294967295
 800ac6c:	e095      	b.n	800ad9a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	895a      	ldrh	r2, [r3, #10]
 800ac72:	7dfb      	ldrb	r3, [r7, #23]
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d206      	bcs.n	800ac88 <tcp_enqueue_flags+0xa0>
 800ac7a:	4b4a      	ldr	r3, [pc, #296]	; (800ada4 <tcp_enqueue_flags+0x1bc>)
 800ac7c:	f240 4239 	movw	r2, #1081	; 0x439
 800ac80:	494c      	ldr	r1, [pc, #304]	; (800adb4 <tcp_enqueue_flags+0x1cc>)
 800ac82:	484a      	ldr	r0, [pc, #296]	; (800adac <tcp_enqueue_flags+0x1c4>)
 800ac84:	f003 fe42 	bl	800e90c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ac8c:	78fa      	ldrb	r2, [r7, #3]
 800ac8e:	7ffb      	ldrb	r3, [r7, #31]
 800ac90:	9300      	str	r3, [sp, #0]
 800ac92:	460b      	mov	r3, r1
 800ac94:	6939      	ldr	r1, [r7, #16]
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f7ff fd70 	bl	800a77c <tcp_create_segment>
 800ac9c:	60f8      	str	r0, [r7, #12]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d109      	bne.n	800acb8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	8b5b      	ldrh	r3, [r3, #26]
 800aca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acac:	b29a      	uxth	r2, r3
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800acb2:	f04f 33ff 	mov.w	r3, #4294967295
 800acb6:	e070      	b.n	800ad9a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	f003 0303 	and.w	r3, r3, #3
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d006      	beq.n	800acd2 <tcp_enqueue_flags+0xea>
 800acc4:	4b37      	ldr	r3, [pc, #220]	; (800ada4 <tcp_enqueue_flags+0x1bc>)
 800acc6:	f240 4242 	movw	r2, #1090	; 0x442
 800acca:	493b      	ldr	r1, [pc, #236]	; (800adb8 <tcp_enqueue_flags+0x1d0>)
 800accc:	4837      	ldr	r0, [pc, #220]	; (800adac <tcp_enqueue_flags+0x1c4>)
 800acce:	f003 fe1d 	bl	800e90c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	891b      	ldrh	r3, [r3, #8]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d006      	beq.n	800ace8 <tcp_enqueue_flags+0x100>
 800acda:	4b32      	ldr	r3, [pc, #200]	; (800ada4 <tcp_enqueue_flags+0x1bc>)
 800acdc:	f240 4243 	movw	r2, #1091	; 0x443
 800ace0:	4936      	ldr	r1, [pc, #216]	; (800adbc <tcp_enqueue_flags+0x1d4>)
 800ace2:	4832      	ldr	r0, [pc, #200]	; (800adac <tcp_enqueue_flags+0x1c4>)
 800ace4:	f003 fe12 	bl	800e90c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acec:	2b00      	cmp	r3, #0
 800acee:	d103      	bne.n	800acf8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	66da      	str	r2, [r3, #108]	; 0x6c
 800acf6:	e00d      	b.n	800ad14 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acfc:	61bb      	str	r3, [r7, #24]
 800acfe:	e002      	b.n	800ad06 <tcp_enqueue_flags+0x11e>
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	61bb      	str	r3, [r7, #24]
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d1f8      	bne.n	800ad00 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ad1c:	78fb      	ldrb	r3, [r7, #3]
 800ad1e:	f003 0302 	and.w	r3, r3, #2
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d104      	bne.n	800ad30 <tcp_enqueue_flags+0x148>
 800ad26:	78fb      	ldrb	r3, [r7, #3]
 800ad28:	f003 0301 	and.w	r3, r3, #1
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d004      	beq.n	800ad3a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad34:	1c5a      	adds	r2, r3, #1
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ad3a:	78fb      	ldrb	r3, [r7, #3]
 800ad3c:	f003 0301 	and.w	r3, r3, #1
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d006      	beq.n	800ad52 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	8b5b      	ldrh	r3, [r3, #26]
 800ad48:	f043 0320 	orr.w	r3, r3, #32
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7fb fc48 	bl	80065ec <pbuf_clen>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	461a      	mov	r2, r3
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ad66:	4413      	add	r3, r2
 800ad68:	b29a      	uxth	r2, r3
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00e      	beq.n	800ad98 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d10a      	bne.n	800ad98 <tcp_enqueue_flags+0x1b0>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d106      	bne.n	800ad98 <tcp_enqueue_flags+0x1b0>
 800ad8a:	4b06      	ldr	r3, [pc, #24]	; (800ada4 <tcp_enqueue_flags+0x1bc>)
 800ad8c:	f240 4265 	movw	r2, #1125	; 0x465
 800ad90:	490b      	ldr	r1, [pc, #44]	; (800adc0 <tcp_enqueue_flags+0x1d8>)
 800ad92:	4806      	ldr	r0, [pc, #24]	; (800adac <tcp_enqueue_flags+0x1c4>)
 800ad94:	f003 fdba 	bl	800e90c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3720      	adds	r7, #32
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	08011400 	.word	0x08011400
 800ada8:	08011824 	.word	0x08011824
 800adac:	08011454 	.word	0x08011454
 800adb0:	0801187c 	.word	0x0801187c
 800adb4:	0801189c 	.word	0x0801189c
 800adb8:	080118d8 	.word	0x080118d8
 800adbc:	080118f0 	.word	0x080118f0
 800adc0:	0801191c 	.word	0x0801191c

0800adc4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800adc4:	b5b0      	push	{r4, r5, r7, lr}
 800adc6:	b08a      	sub	sp, #40	; 0x28
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d106      	bne.n	800ade0 <tcp_output+0x1c>
 800add2:	4b8a      	ldr	r3, [pc, #552]	; (800affc <tcp_output+0x238>)
 800add4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800add8:	4989      	ldr	r1, [pc, #548]	; (800b000 <tcp_output+0x23c>)
 800adda:	488a      	ldr	r0, [pc, #552]	; (800b004 <tcp_output+0x240>)
 800addc:	f003 fd96 	bl	800e90c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	7d1b      	ldrb	r3, [r3, #20]
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d106      	bne.n	800adf6 <tcp_output+0x32>
 800ade8:	4b84      	ldr	r3, [pc, #528]	; (800affc <tcp_output+0x238>)
 800adea:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800adee:	4986      	ldr	r1, [pc, #536]	; (800b008 <tcp_output+0x244>)
 800adf0:	4884      	ldr	r0, [pc, #528]	; (800b004 <tcp_output+0x240>)
 800adf2:	f003 fd8b 	bl	800e90c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800adf6:	4b85      	ldr	r3, [pc, #532]	; (800b00c <tcp_output+0x248>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d101      	bne.n	800ae04 <tcp_output+0x40>
    return ERR_OK;
 800ae00:	2300      	movs	r3, #0
 800ae02:	e1ce      	b.n	800b1a2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ae10:	4293      	cmp	r3, r2
 800ae12:	bf28      	it	cs
 800ae14:	4613      	movcs	r3, r2
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae1e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ae20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d10b      	bne.n	800ae3e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	8b5b      	ldrh	r3, [r3, #26]
 800ae2a:	f003 0302 	and.w	r3, r3, #2
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	f000 81aa 	beq.w	800b188 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 fdcb 	bl	800b9d0 <tcp_send_empty_ack>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	e1b1      	b.n	800b1a2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ae3e:	6879      	ldr	r1, [r7, #4]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	3304      	adds	r3, #4
 800ae44:	461a      	mov	r2, r3
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f7ff fc7c 	bl	800a744 <tcp_route>
 800ae4c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d102      	bne.n	800ae5a <tcp_output+0x96>
    return ERR_RTE;
 800ae54:	f06f 0303 	mvn.w	r3, #3
 800ae58:	e1a3      	b.n	800b1a2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d003      	beq.n	800ae68 <tcp_output+0xa4>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d111      	bne.n	800ae8c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d002      	beq.n	800ae74 <tcp_output+0xb0>
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	3304      	adds	r3, #4
 800ae72:	e000      	b.n	800ae76 <tcp_output+0xb2>
 800ae74:	2300      	movs	r3, #0
 800ae76:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d102      	bne.n	800ae84 <tcp_output+0xc0>
      return ERR_RTE;
 800ae7e:	f06f 0303 	mvn.w	r3, #3
 800ae82:	e18e      	b.n	800b1a2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7f9 ffd9 	bl	8004e4a <lwip_htonl>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae9e:	1ad3      	subs	r3, r2, r3
 800aea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aea2:	8912      	ldrh	r2, [r2, #8]
 800aea4:	4413      	add	r3, r2
 800aea6:	69ba      	ldr	r2, [r7, #24]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d227      	bcs.n	800aefc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	69bb      	ldr	r3, [r7, #24]
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d114      	bne.n	800aee4 <tcp_output+0x120>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d110      	bne.n	800aee4 <tcp_output+0x120>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d10b      	bne.n	800aee4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2201      	movs	r2, #1
 800aed8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	8b5b      	ldrh	r3, [r3, #26]
 800aee8:	f003 0302 	and.w	r3, r3, #2
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	f000 814d 	beq.w	800b18c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 fd6c 	bl	800b9d0 <tcp_send_empty_ack>
 800aef8:	4603      	mov	r3, r0
 800aefa:	e152      	b.n	800b1a2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af08:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800af0a:	6a3b      	ldr	r3, [r7, #32]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f000 811c 	beq.w	800b14a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800af12:	e002      	b.n	800af1a <tcp_output+0x156>
 800af14:	6a3b      	ldr	r3, [r7, #32]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	623b      	str	r3, [r7, #32]
 800af1a:	6a3b      	ldr	r3, [r7, #32]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d1f8      	bne.n	800af14 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800af22:	e112      	b.n	800b14a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800af24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	899b      	ldrh	r3, [r3, #12]
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7f9 ff77 	bl	8004e20 <lwip_htons>
 800af32:	4603      	mov	r3, r0
 800af34:	b2db      	uxtb	r3, r3
 800af36:	f003 0304 	and.w	r3, r3, #4
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d006      	beq.n	800af4c <tcp_output+0x188>
 800af3e:	4b2f      	ldr	r3, [pc, #188]	; (800affc <tcp_output+0x238>)
 800af40:	f240 5236 	movw	r2, #1334	; 0x536
 800af44:	4932      	ldr	r1, [pc, #200]	; (800b010 <tcp_output+0x24c>)
 800af46:	482f      	ldr	r0, [pc, #188]	; (800b004 <tcp_output+0x240>)
 800af48:	f003 fce0 	bl	800e90c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af50:	2b00      	cmp	r3, #0
 800af52:	d01f      	beq.n	800af94 <tcp_output+0x1d0>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	8b5b      	ldrh	r3, [r3, #26]
 800af58:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d119      	bne.n	800af94 <tcp_output+0x1d0>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af64:	2b00      	cmp	r3, #0
 800af66:	d00b      	beq.n	800af80 <tcp_output+0x1bc>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d110      	bne.n	800af94 <tcp_output+0x1d0>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af76:	891a      	ldrh	r2, [r3, #8]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d209      	bcs.n	800af94 <tcp_output+0x1d0>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800af86:	2b00      	cmp	r3, #0
 800af88:	d004      	beq.n	800af94 <tcp_output+0x1d0>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800af90:	2b08      	cmp	r3, #8
 800af92:	d901      	bls.n	800af98 <tcp_output+0x1d4>
 800af94:	2301      	movs	r3, #1
 800af96:	e000      	b.n	800af9a <tcp_output+0x1d6>
 800af98:	2300      	movs	r3, #0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d106      	bne.n	800afac <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	8b5b      	ldrh	r3, [r3, #26]
 800afa2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f000 80e4 	beq.w	800b174 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	7d1b      	ldrb	r3, [r3, #20]
 800afb0:	2b02      	cmp	r3, #2
 800afb2:	d00d      	beq.n	800afd0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800afb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	899b      	ldrh	r3, [r3, #12]
 800afba:	b29c      	uxth	r4, r3
 800afbc:	2010      	movs	r0, #16
 800afbe:	f7f9 ff2f 	bl	8004e20 <lwip_htons>
 800afc2:	4603      	mov	r3, r0
 800afc4:	461a      	mov	r2, r3
 800afc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	4322      	orrs	r2, r4
 800afcc:	b292      	uxth	r2, r2
 800afce:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800afd0:	697a      	ldr	r2, [r7, #20]
 800afd2:	6879      	ldr	r1, [r7, #4]
 800afd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afd6:	f000 f909 	bl	800b1ec <tcp_output_segment>
 800afda:	4603      	mov	r3, r0
 800afdc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800afde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d016      	beq.n	800b014 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	8b5b      	ldrh	r3, [r3, #26]
 800afea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afee:	b29a      	uxth	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	835a      	strh	r2, [r3, #26]
      return err;
 800aff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aff8:	e0d3      	b.n	800b1a2 <tcp_output+0x3de>
 800affa:	bf00      	nop
 800affc:	08011400 	.word	0x08011400
 800b000:	08011944 	.word	0x08011944
 800b004:	08011454 	.word	0x08011454
 800b008:	0801195c 	.word	0x0801195c
 800b00c:	2000834c 	.word	0x2000834c
 800b010:	08011984 	.word	0x08011984
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	7d1b      	ldrb	r3, [r3, #20]
 800b020:	2b02      	cmp	r3, #2
 800b022:	d006      	beq.n	800b032 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	8b5b      	ldrh	r3, [r3, #26]
 800b028:	f023 0303 	bic.w	r3, r3, #3
 800b02c:	b29a      	uxth	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b034:	68db      	ldr	r3, [r3, #12]
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	4618      	mov	r0, r3
 800b03a:	f7f9 ff06 	bl	8004e4a <lwip_htonl>
 800b03e:	4604      	mov	r4, r0
 800b040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b042:	891b      	ldrh	r3, [r3, #8]
 800b044:	461d      	mov	r5, r3
 800b046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	899b      	ldrh	r3, [r3, #12]
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	4618      	mov	r0, r3
 800b050:	f7f9 fee6 	bl	8004e20 <lwip_htons>
 800b054:	4603      	mov	r3, r0
 800b056:	b2db      	uxtb	r3, r3
 800b058:	f003 0303 	and.w	r3, r3, #3
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d001      	beq.n	800b064 <tcp_output+0x2a0>
 800b060:	2301      	movs	r3, #1
 800b062:	e000      	b.n	800b066 <tcp_output+0x2a2>
 800b064:	2300      	movs	r3, #0
 800b066:	442b      	add	r3, r5
 800b068:	4423      	add	r3, r4
 800b06a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	1ad3      	subs	r3, r2, r3
 800b074:	2b00      	cmp	r3, #0
 800b076:	da02      	bge.n	800b07e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	68ba      	ldr	r2, [r7, #8]
 800b07c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b080:	891b      	ldrh	r3, [r3, #8]
 800b082:	461c      	mov	r4, r3
 800b084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	899b      	ldrh	r3, [r3, #12]
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7f9 fec7 	bl	8004e20 <lwip_htons>
 800b092:	4603      	mov	r3, r0
 800b094:	b2db      	uxtb	r3, r3
 800b096:	f003 0303 	and.w	r3, r3, #3
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d001      	beq.n	800b0a2 <tcp_output+0x2de>
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e000      	b.n	800b0a4 <tcp_output+0x2e0>
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	4423      	add	r3, r4
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d049      	beq.n	800b13e <tcp_output+0x37a>
      seg->next = NULL;
 800b0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d105      	bne.n	800b0c4 <tcp_output+0x300>
        pcb->unacked = seg;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0bc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800b0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c0:	623b      	str	r3, [r7, #32]
 800b0c2:	e03f      	b.n	800b144 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7f9 febd 	bl	8004e4a <lwip_htonl>
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	6a3b      	ldr	r3, [r7, #32]
 800b0d4:	68db      	ldr	r3, [r3, #12]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7f9 feb6 	bl	8004e4a <lwip_htonl>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	1ae3      	subs	r3, r4, r3
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	da24      	bge.n	800b130 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	3370      	adds	r3, #112	; 0x70
 800b0ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b0ec:	e002      	b.n	800b0f4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b0ee:	69fb      	ldr	r3, [r7, #28]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d011      	beq.n	800b120 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b0fc:	69fb      	ldr	r3, [r7, #28]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	4618      	mov	r0, r3
 800b106:	f7f9 fea0 	bl	8004e4a <lwip_htonl>
 800b10a:	4604      	mov	r4, r0
 800b10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10e:	68db      	ldr	r3, [r3, #12]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	4618      	mov	r0, r3
 800b114:	f7f9 fe99 	bl	8004e4a <lwip_htonl>
 800b118:	4603      	mov	r3, r0
 800b11a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	dbe6      	blt.n	800b0ee <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b120:	69fb      	ldr	r3, [r7, #28]
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b126:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b12c:	601a      	str	r2, [r3, #0]
 800b12e:	e009      	b.n	800b144 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b130:	6a3b      	ldr	r3, [r7, #32]
 800b132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b134:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b136:	6a3b      	ldr	r3, [r7, #32]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	623b      	str	r3, [r7, #32]
 800b13c:	e002      	b.n	800b144 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b13e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b140:	f7fc fc3f 	bl	80079c2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b148:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800b14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d012      	beq.n	800b176 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	4618      	mov	r0, r3
 800b158:	f7f9 fe77 	bl	8004e4a <lwip_htonl>
 800b15c:	4602      	mov	r2, r0
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b162:	1ad3      	subs	r3, r2, r3
 800b164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b166:	8912      	ldrh	r2, [r2, #8]
 800b168:	4413      	add	r3, r2
  while (seg != NULL &&
 800b16a:	69ba      	ldr	r2, [r7, #24]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	f4bf aed9 	bcs.w	800af24 <tcp_output+0x160>
 800b172:	e000      	b.n	800b176 <tcp_output+0x3b2>
      break;
 800b174:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d108      	bne.n	800b190 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800b186:	e004      	b.n	800b192 <tcp_output+0x3ce>
    goto output_done;
 800b188:	bf00      	nop
 800b18a:	e002      	b.n	800b192 <tcp_output+0x3ce>
    goto output_done;
 800b18c:	bf00      	nop
 800b18e:	e000      	b.n	800b192 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b190:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	8b5b      	ldrh	r3, [r3, #26]
 800b196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b19a:	b29a      	uxth	r2, r3
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3728      	adds	r7, #40	; 0x28
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bdb0      	pop	{r4, r5, r7, pc}
 800b1aa:	bf00      	nop

0800b1ac <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d106      	bne.n	800b1c8 <tcp_output_segment_busy+0x1c>
 800b1ba:	4b09      	ldr	r3, [pc, #36]	; (800b1e0 <tcp_output_segment_busy+0x34>)
 800b1bc:	f240 529a 	movw	r2, #1434	; 0x59a
 800b1c0:	4908      	ldr	r1, [pc, #32]	; (800b1e4 <tcp_output_segment_busy+0x38>)
 800b1c2:	4809      	ldr	r0, [pc, #36]	; (800b1e8 <tcp_output_segment_busy+0x3c>)
 800b1c4:	f003 fba2 	bl	800e90c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	7b9b      	ldrb	r3, [r3, #14]
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d001      	beq.n	800b1d6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e000      	b.n	800b1d8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b1d6:	2300      	movs	r3, #0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3708      	adds	r7, #8
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}
 800b1e0:	08011400 	.word	0x08011400
 800b1e4:	0801199c 	.word	0x0801199c
 800b1e8:	08011454 	.word	0x08011454

0800b1ec <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b1ec:	b5b0      	push	{r4, r5, r7, lr}
 800b1ee:	b08c      	sub	sp, #48	; 0x30
 800b1f0:	af04      	add	r7, sp, #16
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d106      	bne.n	800b20c <tcp_output_segment+0x20>
 800b1fe:	4b63      	ldr	r3, [pc, #396]	; (800b38c <tcp_output_segment+0x1a0>)
 800b200:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b204:	4962      	ldr	r1, [pc, #392]	; (800b390 <tcp_output_segment+0x1a4>)
 800b206:	4863      	ldr	r0, [pc, #396]	; (800b394 <tcp_output_segment+0x1a8>)
 800b208:	f003 fb80 	bl	800e90c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d106      	bne.n	800b220 <tcp_output_segment+0x34>
 800b212:	4b5e      	ldr	r3, [pc, #376]	; (800b38c <tcp_output_segment+0x1a0>)
 800b214:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b218:	495f      	ldr	r1, [pc, #380]	; (800b398 <tcp_output_segment+0x1ac>)
 800b21a:	485e      	ldr	r0, [pc, #376]	; (800b394 <tcp_output_segment+0x1a8>)
 800b21c:	f003 fb76 	bl	800e90c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d106      	bne.n	800b234 <tcp_output_segment+0x48>
 800b226:	4b59      	ldr	r3, [pc, #356]	; (800b38c <tcp_output_segment+0x1a0>)
 800b228:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b22c:	495b      	ldr	r1, [pc, #364]	; (800b39c <tcp_output_segment+0x1b0>)
 800b22e:	4859      	ldr	r0, [pc, #356]	; (800b394 <tcp_output_segment+0x1a8>)
 800b230:	f003 fb6c 	bl	800e90c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f7ff ffb9 	bl	800b1ac <tcp_output_segment_busy>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d001      	beq.n	800b244 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b240:	2300      	movs	r3, #0
 800b242:	e09f      	b.n	800b384 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	68dc      	ldr	r4, [r3, #12]
 800b24c:	4610      	mov	r0, r2
 800b24e:	f7f9 fdfc 	bl	8004e4a <lwip_htonl>
 800b252:	4603      	mov	r3, r0
 800b254:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	68dc      	ldr	r4, [r3, #12]
 800b25e:	4610      	mov	r0, r2
 800b260:	f7f9 fdde 	bl	8004e20 <lwip_htons>
 800b264:	4603      	mov	r3, r0
 800b266:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b26c:	68ba      	ldr	r2, [r7, #8]
 800b26e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b270:	441a      	add	r2, r3
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	3314      	adds	r3, #20
 800b27c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	7a9b      	ldrb	r3, [r3, #10]
 800b282:	f003 0301 	and.w	r3, r3, #1
 800b286:	2b00      	cmp	r3, #0
 800b288:	d015      	beq.n	800b2b6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	3304      	adds	r3, #4
 800b28e:	461a      	mov	r2, r3
 800b290:	6879      	ldr	r1, [r7, #4]
 800b292:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b296:	f7fc fe8b 	bl	8007fb0 <tcp_eff_send_mss_netif>
 800b29a:	4603      	mov	r3, r0
 800b29c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b29e:	8b7b      	ldrh	r3, [r7, #26]
 800b2a0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7f9 fdd0 	bl	8004e4a <lwip_htonl>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	69fb      	ldr	r3, [r7, #28]
 800b2ae:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b2b0:	69fb      	ldr	r3, [r7, #28]
 800b2b2:	3304      	adds	r3, #4
 800b2b4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	da02      	bge.n	800b2c6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d10c      	bne.n	800b2e8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b2ce:	4b34      	ldr	r3, [pc, #208]	; (800b3a0 <tcp_output_segment+0x1b4>)
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7f9 fdb4 	bl	8004e4a <lwip_htonl>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	68da      	ldr	r2, [r3, #12]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	1ad3      	subs	r3, r2, r3
 800b2f4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	8959      	ldrh	r1, [r3, #10]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	8b3a      	ldrh	r2, [r7, #24]
 800b302:	1a8a      	subs	r2, r1, r2
 800b304:	b292      	uxth	r2, r2
 800b306:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	8919      	ldrh	r1, [r3, #8]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	8b3a      	ldrh	r2, [r7, #24]
 800b314:	1a8a      	subs	r2, r1, r2
 800b316:	b292      	uxth	r2, r2
 800b318:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	68d2      	ldr	r2, [r2, #12]
 800b322:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	2200      	movs	r2, #0
 800b32a:	741a      	strb	r2, [r3, #16]
 800b32c:	2200      	movs	r2, #0
 800b32e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	68db      	ldr	r3, [r3, #12]
 800b334:	f103 0214 	add.w	r2, r3, #20
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	7a9b      	ldrb	r3, [r3, #10]
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	f003 0304 	and.w	r3, r3, #4
 800b342:	4413      	add	r3, r2
 800b344:	69fa      	ldr	r2, [r7, #28]
 800b346:	429a      	cmp	r2, r3
 800b348:	d006      	beq.n	800b358 <tcp_output_segment+0x16c>
 800b34a:	4b10      	ldr	r3, [pc, #64]	; (800b38c <tcp_output_segment+0x1a0>)
 800b34c:	f240 621c 	movw	r2, #1564	; 0x61c
 800b350:	4914      	ldr	r1, [pc, #80]	; (800b3a4 <tcp_output_segment+0x1b8>)
 800b352:	4810      	ldr	r0, [pc, #64]	; (800b394 <tcp_output_segment+0x1a8>)
 800b354:	f003 fada 	bl	800e90c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	6858      	ldr	r0, [r3, #4]
 800b35c:	68b9      	ldr	r1, [r7, #8]
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	1d1c      	adds	r4, r3, #4
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	7add      	ldrb	r5, [r3, #11]
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	7a9b      	ldrb	r3, [r3, #10]
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	9202      	str	r2, [sp, #8]
 800b36e:	2206      	movs	r2, #6
 800b370:	9201      	str	r2, [sp, #4]
 800b372:	9300      	str	r3, [sp, #0]
 800b374:	462b      	mov	r3, r5
 800b376:	4622      	mov	r2, r4
 800b378:	f002 fa36 	bl	800d7e8 <ip4_output_if>
 800b37c:	4603      	mov	r3, r0
 800b37e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b380:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b384:	4618      	mov	r0, r3
 800b386:	3720      	adds	r7, #32
 800b388:	46bd      	mov	sp, r7
 800b38a:	bdb0      	pop	{r4, r5, r7, pc}
 800b38c:	08011400 	.word	0x08011400
 800b390:	080119c4 	.word	0x080119c4
 800b394:	08011454 	.word	0x08011454
 800b398:	080119e4 	.word	0x080119e4
 800b39c:	08011a04 	.word	0x08011a04
 800b3a0:	20008300 	.word	0x20008300
 800b3a4:	08011a28 	.word	0x08011a28

0800b3a8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b3a8:	b5b0      	push	{r4, r5, r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d106      	bne.n	800b3c4 <tcp_rexmit_rto_prepare+0x1c>
 800b3b6:	4b31      	ldr	r3, [pc, #196]	; (800b47c <tcp_rexmit_rto_prepare+0xd4>)
 800b3b8:	f240 6263 	movw	r2, #1635	; 0x663
 800b3bc:	4930      	ldr	r1, [pc, #192]	; (800b480 <tcp_rexmit_rto_prepare+0xd8>)
 800b3be:	4831      	ldr	r0, [pc, #196]	; (800b484 <tcp_rexmit_rto_prepare+0xdc>)
 800b3c0:	f003 faa4 	bl	800e90c <iprintf>

  if (pcb->unacked == NULL) {
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d102      	bne.n	800b3d2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b3cc:	f06f 0305 	mvn.w	r3, #5
 800b3d0:	e050      	b.n	800b474 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3d6:	60fb      	str	r3, [r7, #12]
 800b3d8:	e00b      	b.n	800b3f2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	f7ff fee6 	bl	800b1ac <tcp_output_segment_busy>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d002      	beq.n	800b3ec <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b3e6:	f06f 0305 	mvn.w	r3, #5
 800b3ea:	e043      	b.n	800b474 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	60fb      	str	r3, [r7, #12]
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d1ef      	bne.n	800b3da <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b3fa:	68f8      	ldr	r0, [r7, #12]
 800b3fc:	f7ff fed6 	bl	800b1ac <tcp_output_segment_busy>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d002      	beq.n	800b40c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b406:	f06f 0305 	mvn.w	r3, #5
 800b40a:	e033      	b.n	800b474 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	8b5b      	ldrh	r3, [r3, #26]
 800b426:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b42a:	b29a      	uxth	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	4618      	mov	r0, r3
 800b438:	f7f9 fd07 	bl	8004e4a <lwip_htonl>
 800b43c:	4604      	mov	r4, r0
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	891b      	ldrh	r3, [r3, #8]
 800b442:	461d      	mov	r5, r3
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	68db      	ldr	r3, [r3, #12]
 800b448:	899b      	ldrh	r3, [r3, #12]
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7f9 fce7 	bl	8004e20 <lwip_htons>
 800b452:	4603      	mov	r3, r0
 800b454:	b2db      	uxtb	r3, r3
 800b456:	f003 0303 	and.w	r3, r3, #3
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d001      	beq.n	800b462 <tcp_rexmit_rto_prepare+0xba>
 800b45e:	2301      	movs	r3, #1
 800b460:	e000      	b.n	800b464 <tcp_rexmit_rto_prepare+0xbc>
 800b462:	2300      	movs	r3, #0
 800b464:	442b      	add	r3, r5
 800b466:	18e2      	adds	r2, r4, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b472:	2300      	movs	r3, #0
}
 800b474:	4618      	mov	r0, r3
 800b476:	3710      	adds	r7, #16
 800b478:	46bd      	mov	sp, r7
 800b47a:	bdb0      	pop	{r4, r5, r7, pc}
 800b47c:	08011400 	.word	0x08011400
 800b480:	08011a3c 	.word	0x08011a3c
 800b484:	08011454 	.word	0x08011454

0800b488 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d106      	bne.n	800b4a4 <tcp_rexmit_rto_commit+0x1c>
 800b496:	4b0d      	ldr	r3, [pc, #52]	; (800b4cc <tcp_rexmit_rto_commit+0x44>)
 800b498:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b49c:	490c      	ldr	r1, [pc, #48]	; (800b4d0 <tcp_rexmit_rto_commit+0x48>)
 800b49e:	480d      	ldr	r0, [pc, #52]	; (800b4d4 <tcp_rexmit_rto_commit+0x4c>)
 800b4a0:	f003 fa34 	bl	800e90c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b4aa:	2bff      	cmp	r3, #255	; 0xff
 800b4ac:	d007      	beq.n	800b4be <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	b2da      	uxtb	r2, r3
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f7ff fc80 	bl	800adc4 <tcp_output>
}
 800b4c4:	bf00      	nop
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	08011400 	.word	0x08011400
 800b4d0:	08011a60 	.word	0x08011a60
 800b4d4:	08011454 	.word	0x08011454

0800b4d8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d106      	bne.n	800b4f4 <tcp_rexmit_rto+0x1c>
 800b4e6:	4b0a      	ldr	r3, [pc, #40]	; (800b510 <tcp_rexmit_rto+0x38>)
 800b4e8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b4ec:	4909      	ldr	r1, [pc, #36]	; (800b514 <tcp_rexmit_rto+0x3c>)
 800b4ee:	480a      	ldr	r0, [pc, #40]	; (800b518 <tcp_rexmit_rto+0x40>)
 800b4f0:	f003 fa0c 	bl	800e90c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f7ff ff57 	bl	800b3a8 <tcp_rexmit_rto_prepare>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d102      	bne.n	800b506 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f7ff ffc1 	bl	800b488 <tcp_rexmit_rto_commit>
  }
}
 800b506:	bf00      	nop
 800b508:	3708      	adds	r7, #8
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	08011400 	.word	0x08011400
 800b514:	08011a84 	.word	0x08011a84
 800b518:	08011454 	.word	0x08011454

0800b51c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b51c:	b590      	push	{r4, r7, lr}
 800b51e:	b085      	sub	sp, #20
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d106      	bne.n	800b538 <tcp_rexmit+0x1c>
 800b52a:	4b2f      	ldr	r3, [pc, #188]	; (800b5e8 <tcp_rexmit+0xcc>)
 800b52c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b530:	492e      	ldr	r1, [pc, #184]	; (800b5ec <tcp_rexmit+0xd0>)
 800b532:	482f      	ldr	r0, [pc, #188]	; (800b5f0 <tcp_rexmit+0xd4>)
 800b534:	f003 f9ea 	bl	800e90c <iprintf>

  if (pcb->unacked == NULL) {
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d102      	bne.n	800b546 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b540:	f06f 0305 	mvn.w	r3, #5
 800b544:	e04c      	b.n	800b5e0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b54a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b54c:	68b8      	ldr	r0, [r7, #8]
 800b54e:	f7ff fe2d 	bl	800b1ac <tcp_output_segment_busy>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d002      	beq.n	800b55e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b558:	f06f 0305 	mvn.w	r3, #5
 800b55c:	e040      	b.n	800b5e0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	336c      	adds	r3, #108	; 0x6c
 800b56a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b56c:	e002      	b.n	800b574 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d011      	beq.n	800b5a0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	68db      	ldr	r3, [r3, #12]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	4618      	mov	r0, r3
 800b586:	f7f9 fc60 	bl	8004e4a <lwip_htonl>
 800b58a:	4604      	mov	r4, r0
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	68db      	ldr	r3, [r3, #12]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	4618      	mov	r0, r3
 800b594:	f7f9 fc59 	bl	8004e4a <lwip_htonl>
 800b598:	4603      	mov	r3, r0
 800b59a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	dbe6      	blt.n	800b56e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	68ba      	ldr	r2, [r7, #8]
 800b5ac:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d103      	bne.n	800b5be <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b5c4:	2bff      	cmp	r3, #255	; 0xff
 800b5c6:	d007      	beq.n	800b5d8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	b2da      	uxtb	r2, r3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3714      	adds	r7, #20
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd90      	pop	{r4, r7, pc}
 800b5e8:	08011400 	.word	0x08011400
 800b5ec:	08011aa0 	.word	0x08011aa0
 800b5f0:	08011454 	.word	0x08011454

0800b5f4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d106      	bne.n	800b610 <tcp_rexmit_fast+0x1c>
 800b602:	4b2a      	ldr	r3, [pc, #168]	; (800b6ac <tcp_rexmit_fast+0xb8>)
 800b604:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b608:	4929      	ldr	r1, [pc, #164]	; (800b6b0 <tcp_rexmit_fast+0xbc>)
 800b60a:	482a      	ldr	r0, [pc, #168]	; (800b6b4 <tcp_rexmit_fast+0xc0>)
 800b60c:	f003 f97e 	bl	800e90c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b614:	2b00      	cmp	r3, #0
 800b616:	d044      	beq.n	800b6a2 <tcp_rexmit_fast+0xae>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	8b5b      	ldrh	r3, [r3, #26]
 800b61c:	f003 0304 	and.w	r3, r3, #4
 800b620:	2b00      	cmp	r3, #0
 800b622:	d13e      	bne.n	800b6a2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f7ff ff79 	bl	800b51c <tcp_rexmit>
 800b62a:	4603      	mov	r3, r0
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d138      	bne.n	800b6a2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b63c:	4293      	cmp	r3, r2
 800b63e:	bf28      	it	cs
 800b640:	4613      	movcs	r3, r2
 800b642:	b29b      	uxth	r3, r3
 800b644:	0fda      	lsrs	r2, r3, #31
 800b646:	4413      	add	r3, r2
 800b648:	105b      	asrs	r3, r3, #1
 800b64a:	b29a      	uxth	r2, r3
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b658:	461a      	mov	r2, r3
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b65e:	005b      	lsls	r3, r3, #1
 800b660:	429a      	cmp	r2, r3
 800b662:	d206      	bcs.n	800b672 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b668:	005b      	lsls	r3, r3, #1
 800b66a:	b29a      	uxth	r2, r3
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b67c:	4619      	mov	r1, r3
 800b67e:	0049      	lsls	r1, r1, #1
 800b680:	440b      	add	r3, r1
 800b682:	b29b      	uxth	r3, r3
 800b684:	4413      	add	r3, r2
 800b686:	b29a      	uxth	r2, r3
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	8b5b      	ldrh	r3, [r3, #26]
 800b692:	f043 0304 	orr.w	r3, r3, #4
 800b696:	b29a      	uxth	r2, r3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b6a2:	bf00      	nop
 800b6a4:	3708      	adds	r7, #8
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	08011400 	.word	0x08011400
 800b6b0:	08011ab8 	.word	0x08011ab8
 800b6b4:	08011454 	.word	0x08011454

0800b6b8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b086      	sub	sp, #24
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	607b      	str	r3, [r7, #4]
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	817b      	strh	r3, [r7, #10]
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b6ca:	897a      	ldrh	r2, [r7, #10]
 800b6cc:	893b      	ldrh	r3, [r7, #8]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	3314      	adds	r3, #20
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b6da:	4619      	mov	r1, r3
 800b6dc:	2022      	movs	r0, #34	; 0x22
 800b6de:	f7fa fc19 	bl	8005f14 <pbuf_alloc>
 800b6e2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d04d      	beq.n	800b786 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b6ea:	897b      	ldrh	r3, [r7, #10]
 800b6ec:	3313      	adds	r3, #19
 800b6ee:	697a      	ldr	r2, [r7, #20]
 800b6f0:	8952      	ldrh	r2, [r2, #10]
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	db06      	blt.n	800b704 <tcp_output_alloc_header_common+0x4c>
 800b6f6:	4b26      	ldr	r3, [pc, #152]	; (800b790 <tcp_output_alloc_header_common+0xd8>)
 800b6f8:	f240 7223 	movw	r2, #1827	; 0x723
 800b6fc:	4925      	ldr	r1, [pc, #148]	; (800b794 <tcp_output_alloc_header_common+0xdc>)
 800b6fe:	4826      	ldr	r0, [pc, #152]	; (800b798 <tcp_output_alloc_header_common+0xe0>)
 800b700:	f003 f904 	bl	800e90c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b70a:	8c3b      	ldrh	r3, [r7, #32]
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7f9 fb87 	bl	8004e20 <lwip_htons>
 800b712:	4603      	mov	r3, r0
 800b714:	461a      	mov	r2, r3
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b71a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7f9 fb7f 	bl	8004e20 <lwip_htons>
 800b722:	4603      	mov	r3, r0
 800b724:	461a      	mov	r2, r3
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b730:	68f8      	ldr	r0, [r7, #12]
 800b732:	f7f9 fb8a 	bl	8004e4a <lwip_htonl>
 800b736:	4602      	mov	r2, r0
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b73c:	897b      	ldrh	r3, [r7, #10]
 800b73e:	089b      	lsrs	r3, r3, #2
 800b740:	b29b      	uxth	r3, r3
 800b742:	3305      	adds	r3, #5
 800b744:	b29b      	uxth	r3, r3
 800b746:	031b      	lsls	r3, r3, #12
 800b748:	b29a      	uxth	r2, r3
 800b74a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b74e:	b29b      	uxth	r3, r3
 800b750:	4313      	orrs	r3, r2
 800b752:	b29b      	uxth	r3, r3
 800b754:	4618      	mov	r0, r3
 800b756:	f7f9 fb63 	bl	8004e20 <lwip_htons>
 800b75a:	4603      	mov	r3, r0
 800b75c:	461a      	mov	r2, r3
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b762:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b764:	4618      	mov	r0, r3
 800b766:	f7f9 fb5b 	bl	8004e20 <lwip_htons>
 800b76a:	4603      	mov	r3, r0
 800b76c:	461a      	mov	r2, r3
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	2200      	movs	r2, #0
 800b776:	741a      	strb	r2, [r3, #16]
 800b778:	2200      	movs	r2, #0
 800b77a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	2200      	movs	r2, #0
 800b780:	749a      	strb	r2, [r3, #18]
 800b782:	2200      	movs	r2, #0
 800b784:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b786:	697b      	ldr	r3, [r7, #20]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3718      	adds	r7, #24
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	08011400 	.word	0x08011400
 800b794:	08011ad8 	.word	0x08011ad8
 800b798:	08011454 	.word	0x08011454

0800b79c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b79c:	b5b0      	push	{r4, r5, r7, lr}
 800b79e:	b08a      	sub	sp, #40	; 0x28
 800b7a0:	af04      	add	r7, sp, #16
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	607b      	str	r3, [r7, #4]
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	817b      	strh	r3, [r7, #10]
 800b7aa:	4613      	mov	r3, r2
 800b7ac:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d106      	bne.n	800b7c2 <tcp_output_alloc_header+0x26>
 800b7b4:	4b15      	ldr	r3, [pc, #84]	; (800b80c <tcp_output_alloc_header+0x70>)
 800b7b6:	f240 7242 	movw	r2, #1858	; 0x742
 800b7ba:	4915      	ldr	r1, [pc, #84]	; (800b810 <tcp_output_alloc_header+0x74>)
 800b7bc:	4815      	ldr	r0, [pc, #84]	; (800b814 <tcp_output_alloc_header+0x78>)
 800b7be:	f003 f8a5 	bl	800e90c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	8adb      	ldrh	r3, [r3, #22]
 800b7ca:	68fa      	ldr	r2, [r7, #12]
 800b7cc:	8b12      	ldrh	r2, [r2, #24]
 800b7ce:	68f9      	ldr	r1, [r7, #12]
 800b7d0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b7d2:	893d      	ldrh	r5, [r7, #8]
 800b7d4:	897c      	ldrh	r4, [r7, #10]
 800b7d6:	9103      	str	r1, [sp, #12]
 800b7d8:	2110      	movs	r1, #16
 800b7da:	9102      	str	r1, [sp, #8]
 800b7dc:	9201      	str	r2, [sp, #4]
 800b7de:	9300      	str	r3, [sp, #0]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	462a      	mov	r2, r5
 800b7e4:	4621      	mov	r1, r4
 800b7e6:	f7ff ff67 	bl	800b6b8 <tcp_output_alloc_header_common>
 800b7ea:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d006      	beq.n	800b800 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f6:	68fa      	ldr	r2, [r7, #12]
 800b7f8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b7fa:	441a      	add	r2, r3
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b800:	697b      	ldr	r3, [r7, #20]
}
 800b802:	4618      	mov	r0, r3
 800b804:	3718      	adds	r7, #24
 800b806:	46bd      	mov	sp, r7
 800b808:	bdb0      	pop	{r4, r5, r7, pc}
 800b80a:	bf00      	nop
 800b80c:	08011400 	.word	0x08011400
 800b810:	08011b08 	.word	0x08011b08
 800b814:	08011454 	.word	0x08011454

0800b818 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b088      	sub	sp, #32
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	4611      	mov	r1, r2
 800b824:	461a      	mov	r2, r3
 800b826:	460b      	mov	r3, r1
 800b828:	71fb      	strb	r3, [r7, #7]
 800b82a:	4613      	mov	r3, r2
 800b82c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b82e:	2300      	movs	r3, #0
 800b830:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d106      	bne.n	800b846 <tcp_output_fill_options+0x2e>
 800b838:	4b13      	ldr	r3, [pc, #76]	; (800b888 <tcp_output_fill_options+0x70>)
 800b83a:	f240 7256 	movw	r2, #1878	; 0x756
 800b83e:	4913      	ldr	r1, [pc, #76]	; (800b88c <tcp_output_fill_options+0x74>)
 800b840:	4813      	ldr	r0, [pc, #76]	; (800b890 <tcp_output_fill_options+0x78>)
 800b842:	f003 f863 	bl	800e90c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	3314      	adds	r3, #20
 800b850:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	f103 0214 	add.w	r2, r3, #20
 800b858:	8bfb      	ldrh	r3, [r7, #30]
 800b85a:	009b      	lsls	r3, r3, #2
 800b85c:	4619      	mov	r1, r3
 800b85e:	79fb      	ldrb	r3, [r7, #7]
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	f003 0304 	and.w	r3, r3, #4
 800b866:	440b      	add	r3, r1
 800b868:	4413      	add	r3, r2
 800b86a:	697a      	ldr	r2, [r7, #20]
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d006      	beq.n	800b87e <tcp_output_fill_options+0x66>
 800b870:	4b05      	ldr	r3, [pc, #20]	; (800b888 <tcp_output_fill_options+0x70>)
 800b872:	f240 7275 	movw	r2, #1909	; 0x775
 800b876:	4907      	ldr	r1, [pc, #28]	; (800b894 <tcp_output_fill_options+0x7c>)
 800b878:	4805      	ldr	r0, [pc, #20]	; (800b890 <tcp_output_fill_options+0x78>)
 800b87a:	f003 f847 	bl	800e90c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b87e:	bf00      	nop
 800b880:	3720      	adds	r7, #32
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	08011400 	.word	0x08011400
 800b88c:	08011b30 	.word	0x08011b30
 800b890:	08011454 	.word	0x08011454
 800b894:	08011a28 	.word	0x08011a28

0800b898 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b08a      	sub	sp, #40	; 0x28
 800b89c:	af04      	add	r7, sp, #16
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
 800b8a4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d106      	bne.n	800b8ba <tcp_output_control_segment+0x22>
 800b8ac:	4b1c      	ldr	r3, [pc, #112]	; (800b920 <tcp_output_control_segment+0x88>)
 800b8ae:	f240 7287 	movw	r2, #1927	; 0x787
 800b8b2:	491c      	ldr	r1, [pc, #112]	; (800b924 <tcp_output_control_segment+0x8c>)
 800b8b4:	481c      	ldr	r0, [pc, #112]	; (800b928 <tcp_output_control_segment+0x90>)
 800b8b6:	f003 f829 	bl	800e90c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b8ba:	683a      	ldr	r2, [r7, #0]
 800b8bc:	6879      	ldr	r1, [r7, #4]
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	f7fe ff40 	bl	800a744 <tcp_route>
 800b8c4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d102      	bne.n	800b8d2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b8cc:	23fc      	movs	r3, #252	; 0xfc
 800b8ce:	75fb      	strb	r3, [r7, #23]
 800b8d0:	e01c      	b.n	800b90c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d006      	beq.n	800b8e6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	7adb      	ldrb	r3, [r3, #11]
 800b8dc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	7a9b      	ldrb	r3, [r3, #10]
 800b8e2:	757b      	strb	r3, [r7, #21]
 800b8e4:	e003      	b.n	800b8ee <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b8e6:	23ff      	movs	r3, #255	; 0xff
 800b8e8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b8ee:	7dba      	ldrb	r2, [r7, #22]
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	9302      	str	r3, [sp, #8]
 800b8f4:	2306      	movs	r3, #6
 800b8f6:	9301      	str	r3, [sp, #4]
 800b8f8:	7d7b      	ldrb	r3, [r7, #21]
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	4613      	mov	r3, r2
 800b8fe:	683a      	ldr	r2, [r7, #0]
 800b900:	6879      	ldr	r1, [r7, #4]
 800b902:	68b8      	ldr	r0, [r7, #8]
 800b904:	f001 ff70 	bl	800d7e8 <ip4_output_if>
 800b908:	4603      	mov	r3, r0
 800b90a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b90c:	68b8      	ldr	r0, [r7, #8]
 800b90e:	f7fa fde5 	bl	80064dc <pbuf_free>
  return err;
 800b912:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b916:	4618      	mov	r0, r3
 800b918:	3718      	adds	r7, #24
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	bf00      	nop
 800b920:	08011400 	.word	0x08011400
 800b924:	08011b58 	.word	0x08011b58
 800b928:	08011454 	.word	0x08011454

0800b92c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b92c:	b590      	push	{r4, r7, lr}
 800b92e:	b08b      	sub	sp, #44	; 0x2c
 800b930:	af04      	add	r7, sp, #16
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
 800b938:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d106      	bne.n	800b94e <tcp_rst+0x22>
 800b940:	4b1f      	ldr	r3, [pc, #124]	; (800b9c0 <tcp_rst+0x94>)
 800b942:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b946:	491f      	ldr	r1, [pc, #124]	; (800b9c4 <tcp_rst+0x98>)
 800b948:	481f      	ldr	r0, [pc, #124]	; (800b9c8 <tcp_rst+0x9c>)
 800b94a:	f002 ffdf 	bl	800e90c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b950:	2b00      	cmp	r3, #0
 800b952:	d106      	bne.n	800b962 <tcp_rst+0x36>
 800b954:	4b1a      	ldr	r3, [pc, #104]	; (800b9c0 <tcp_rst+0x94>)
 800b956:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b95a:	491c      	ldr	r1, [pc, #112]	; (800b9cc <tcp_rst+0xa0>)
 800b95c:	481a      	ldr	r0, [pc, #104]	; (800b9c8 <tcp_rst+0x9c>)
 800b95e:	f002 ffd5 	bl	800e90c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b962:	2300      	movs	r3, #0
 800b964:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b966:	f246 0308 	movw	r3, #24584	; 0x6008
 800b96a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b96c:	7dfb      	ldrb	r3, [r7, #23]
 800b96e:	b29c      	uxth	r4, r3
 800b970:	68b8      	ldr	r0, [r7, #8]
 800b972:	f7f9 fa6a 	bl	8004e4a <lwip_htonl>
 800b976:	4602      	mov	r2, r0
 800b978:	8abb      	ldrh	r3, [r7, #20]
 800b97a:	9303      	str	r3, [sp, #12]
 800b97c:	2314      	movs	r3, #20
 800b97e:	9302      	str	r3, [sp, #8]
 800b980:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b982:	9301      	str	r3, [sp, #4]
 800b984:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b986:	9300      	str	r3, [sp, #0]
 800b988:	4613      	mov	r3, r2
 800b98a:	2200      	movs	r2, #0
 800b98c:	4621      	mov	r1, r4
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f7ff fe92 	bl	800b6b8 <tcp_output_alloc_header_common>
 800b994:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d00c      	beq.n	800b9b6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b99c:	7dfb      	ldrb	r3, [r7, #23]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	6939      	ldr	r1, [r7, #16]
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f7ff ff38 	bl	800b818 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9aa:	683a      	ldr	r2, [r7, #0]
 800b9ac:	6939      	ldr	r1, [r7, #16]
 800b9ae:	68f8      	ldr	r0, [r7, #12]
 800b9b0:	f7ff ff72 	bl	800b898 <tcp_output_control_segment>
 800b9b4:	e000      	b.n	800b9b8 <tcp_rst+0x8c>
    return;
 800b9b6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b9b8:	371c      	adds	r7, #28
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd90      	pop	{r4, r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	08011400 	.word	0x08011400
 800b9c4:	08011b84 	.word	0x08011b84
 800b9c8:	08011454 	.word	0x08011454
 800b9cc:	08011ba0 	.word	0x08011ba0

0800b9d0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b9d0:	b590      	push	{r4, r7, lr}
 800b9d2:	b087      	sub	sp, #28
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d106      	bne.n	800b9f4 <tcp_send_empty_ack+0x24>
 800b9e6:	4b28      	ldr	r3, [pc, #160]	; (800ba88 <tcp_send_empty_ack+0xb8>)
 800b9e8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b9ec:	4927      	ldr	r1, [pc, #156]	; (800ba8c <tcp_send_empty_ack+0xbc>)
 800b9ee:	4828      	ldr	r0, [pc, #160]	; (800ba90 <tcp_send_empty_ack+0xc0>)
 800b9f0:	f002 ff8c 	bl	800e90c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b9f4:	7dfb      	ldrb	r3, [r7, #23]
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	f003 0304 	and.w	r3, r3, #4
 800b9fe:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ba00:	7d7b      	ldrb	r3, [r7, #21]
 800ba02:	b29c      	uxth	r4, r3
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7f9 fa1e 	bl	8004e4a <lwip_htonl>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2200      	movs	r2, #0
 800ba12:	4621      	mov	r1, r4
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f7ff fec1 	bl	800b79c <tcp_output_alloc_header>
 800ba1a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d109      	bne.n	800ba36 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	8b5b      	ldrh	r3, [r3, #26]
 800ba26:	f043 0303 	orr.w	r3, r3, #3
 800ba2a:	b29a      	uxth	r2, r3
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ba30:	f06f 0301 	mvn.w	r3, #1
 800ba34:	e023      	b.n	800ba7e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ba36:	7dbb      	ldrb	r3, [r7, #22]
 800ba38:	7dfa      	ldrb	r2, [r7, #23]
 800ba3a:	6939      	ldr	r1, [r7, #16]
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f7ff feeb 	bl	800b818 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	3304      	adds	r3, #4
 800ba48:	6939      	ldr	r1, [r7, #16]
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f7ff ff24 	bl	800b898 <tcp_output_control_segment>
 800ba50:	4603      	mov	r3, r0
 800ba52:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ba54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d007      	beq.n	800ba6c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	8b5b      	ldrh	r3, [r3, #26]
 800ba60:	f043 0303 	orr.w	r3, r3, #3
 800ba64:	b29a      	uxth	r2, r3
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	835a      	strh	r2, [r3, #26]
 800ba6a:	e006      	b.n	800ba7a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	8b5b      	ldrh	r3, [r3, #26]
 800ba70:	f023 0303 	bic.w	r3, r3, #3
 800ba74:	b29a      	uxth	r2, r3
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ba7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	371c      	adds	r7, #28
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd90      	pop	{r4, r7, pc}
 800ba86:	bf00      	nop
 800ba88:	08011400 	.word	0x08011400
 800ba8c:	08011bbc 	.word	0x08011bbc
 800ba90:	08011454 	.word	0x08011454

0800ba94 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ba94:	b590      	push	{r4, r7, lr}
 800ba96:	b087      	sub	sp, #28
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d106      	bne.n	800bab4 <tcp_keepalive+0x20>
 800baa6:	4b18      	ldr	r3, [pc, #96]	; (800bb08 <tcp_keepalive+0x74>)
 800baa8:	f640 0224 	movw	r2, #2084	; 0x824
 800baac:	4917      	ldr	r1, [pc, #92]	; (800bb0c <tcp_keepalive+0x78>)
 800baae:	4818      	ldr	r0, [pc, #96]	; (800bb10 <tcp_keepalive+0x7c>)
 800bab0:	f002 ff2c 	bl	800e90c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800bab4:	7dfb      	ldrb	r3, [r7, #23]
 800bab6:	b29c      	uxth	r4, r3
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800babc:	3b01      	subs	r3, #1
 800babe:	4618      	mov	r0, r3
 800bac0:	f7f9 f9c3 	bl	8004e4a <lwip_htonl>
 800bac4:	4603      	mov	r3, r0
 800bac6:	2200      	movs	r2, #0
 800bac8:	4621      	mov	r1, r4
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f7ff fe66 	bl	800b79c <tcp_output_alloc_header>
 800bad0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d102      	bne.n	800bade <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800bad8:	f04f 33ff 	mov.w	r3, #4294967295
 800badc:	e010      	b.n	800bb00 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bade:	7dfb      	ldrb	r3, [r7, #23]
 800bae0:	2200      	movs	r2, #0
 800bae2:	6939      	ldr	r1, [r7, #16]
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f7ff fe97 	bl	800b818 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800baea:	687a      	ldr	r2, [r7, #4]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	3304      	adds	r3, #4
 800baf0:	6939      	ldr	r1, [r7, #16]
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f7ff fed0 	bl	800b898 <tcp_output_control_segment>
 800baf8:	4603      	mov	r3, r0
 800bafa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bafc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	371c      	adds	r7, #28
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd90      	pop	{r4, r7, pc}
 800bb08:	08011400 	.word	0x08011400
 800bb0c:	08011bdc 	.word	0x08011bdc
 800bb10:	08011454 	.word	0x08011454

0800bb14 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800bb14:	b590      	push	{r4, r7, lr}
 800bb16:	b08b      	sub	sp, #44	; 0x2c
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d106      	bne.n	800bb36 <tcp_zero_window_probe+0x22>
 800bb28:	4b4c      	ldr	r3, [pc, #304]	; (800bc5c <tcp_zero_window_probe+0x148>)
 800bb2a:	f640 024f 	movw	r2, #2127	; 0x84f
 800bb2e:	494c      	ldr	r1, [pc, #304]	; (800bc60 <tcp_zero_window_probe+0x14c>)
 800bb30:	484c      	ldr	r0, [pc, #304]	; (800bc64 <tcp_zero_window_probe+0x150>)
 800bb32:	f002 feeb 	bl	800e90c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb3a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800bb3c:	6a3b      	ldr	r3, [r7, #32]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d101      	bne.n	800bb46 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800bb42:	2300      	movs	r3, #0
 800bb44:	e086      	b.n	800bc54 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bb4c:	2bff      	cmp	r3, #255	; 0xff
 800bb4e:	d007      	beq.n	800bb60 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bb56:	3301      	adds	r3, #1
 800bb58:	b2da      	uxtb	r2, r3
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bb60:	6a3b      	ldr	r3, [r7, #32]
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	899b      	ldrh	r3, [r3, #12]
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7f9 f959 	bl	8004e20 <lwip_htons>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	f003 0301 	and.w	r3, r3, #1
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d005      	beq.n	800bb86 <tcp_zero_window_probe+0x72>
 800bb7a:	6a3b      	ldr	r3, [r7, #32]
 800bb7c:	891b      	ldrh	r3, [r3, #8]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d101      	bne.n	800bb86 <tcp_zero_window_probe+0x72>
 800bb82:	2301      	movs	r3, #1
 800bb84:	e000      	b.n	800bb88 <tcp_zero_window_probe+0x74>
 800bb86:	2300      	movs	r3, #0
 800bb88:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800bb8a:	7ffb      	ldrb	r3, [r7, #31]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	bf0c      	ite	eq
 800bb90:	2301      	moveq	r3, #1
 800bb92:	2300      	movne	r3, #0
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bb98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb9c:	b299      	uxth	r1, r3
 800bb9e:	6a3b      	ldr	r3, [r7, #32]
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	8bba      	ldrh	r2, [r7, #28]
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f7ff fdf8 	bl	800b79c <tcp_output_alloc_header>
 800bbac:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800bbae:	69bb      	ldr	r3, [r7, #24]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d102      	bne.n	800bbba <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800bbb4:	f04f 33ff 	mov.w	r3, #4294967295
 800bbb8:	e04c      	b.n	800bc54 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800bbba:	69bb      	ldr	r3, [r7, #24]
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800bbc0:	7ffb      	ldrb	r3, [r7, #31]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d011      	beq.n	800bbea <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	899b      	ldrh	r3, [r3, #12]
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	b21b      	sxth	r3, r3
 800bbce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bbd2:	b21c      	sxth	r4, r3
 800bbd4:	2011      	movs	r0, #17
 800bbd6:	f7f9 f923 	bl	8004e20 <lwip_htons>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	b21b      	sxth	r3, r3
 800bbde:	4323      	orrs	r3, r4
 800bbe0:	b21b      	sxth	r3, r3
 800bbe2:	b29a      	uxth	r2, r3
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	819a      	strh	r2, [r3, #12]
 800bbe8:	e010      	b.n	800bc0c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	3314      	adds	r3, #20
 800bbf0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800bbf2:	6a3b      	ldr	r3, [r7, #32]
 800bbf4:	6858      	ldr	r0, [r3, #4]
 800bbf6:	6a3b      	ldr	r3, [r7, #32]
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	891a      	ldrh	r2, [r3, #8]
 800bbfc:	6a3b      	ldr	r3, [r7, #32]
 800bbfe:	891b      	ldrh	r3, [r3, #8]
 800bc00:	1ad3      	subs	r3, r2, r3
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	2201      	movs	r2, #1
 800bc06:	6939      	ldr	r1, [r7, #16]
 800bc08:	f7fa fe52 	bl	80068b0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bc0c:	6a3b      	ldr	r3, [r7, #32]
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7f9 f919 	bl	8004e4a <lwip_htonl>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	1ad3      	subs	r3, r2, r3
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	da02      	bge.n	800bc30 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bc30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc34:	2200      	movs	r2, #0
 800bc36:	69b9      	ldr	r1, [r7, #24]
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f7ff fded 	bl	800b818 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	3304      	adds	r3, #4
 800bc44:	69b9      	ldr	r1, [r7, #24]
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f7ff fe26 	bl	800b898 <tcp_output_control_segment>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bc50:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	372c      	adds	r7, #44	; 0x2c
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd90      	pop	{r4, r7, pc}
 800bc5c:	08011400 	.word	0x08011400
 800bc60:	08011bf8 	.word	0x08011bf8
 800bc64:	08011454 	.word	0x08011454

0800bc68 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800bc70:	f7fa ff0c 	bl	8006a8c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bc74:	4b0a      	ldr	r3, [pc, #40]	; (800bca0 <tcpip_tcp_timer+0x38>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d103      	bne.n	800bc84 <tcpip_tcp_timer+0x1c>
 800bc7c:	4b09      	ldr	r3, [pc, #36]	; (800bca4 <tcpip_tcp_timer+0x3c>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d005      	beq.n	800bc90 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bc84:	2200      	movs	r2, #0
 800bc86:	4908      	ldr	r1, [pc, #32]	; (800bca8 <tcpip_tcp_timer+0x40>)
 800bc88:	20fa      	movs	r0, #250	; 0xfa
 800bc8a:	f000 f8f3 	bl	800be74 <sys_timeout>
 800bc8e:	e003      	b.n	800bc98 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800bc90:	4b06      	ldr	r3, [pc, #24]	; (800bcac <tcpip_tcp_timer+0x44>)
 800bc92:	2200      	movs	r2, #0
 800bc94:	601a      	str	r2, [r3, #0]
  }
}
 800bc96:	bf00      	nop
 800bc98:	bf00      	nop
 800bc9a:	3708      	adds	r7, #8
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}
 800bca0:	2000830c 	.word	0x2000830c
 800bca4:	20008310 	.word	0x20008310
 800bca8:	0800bc69 	.word	0x0800bc69
 800bcac:	20008358 	.word	0x20008358

0800bcb0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800bcb4:	4b0a      	ldr	r3, [pc, #40]	; (800bce0 <tcp_timer_needed+0x30>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d10f      	bne.n	800bcdc <tcp_timer_needed+0x2c>
 800bcbc:	4b09      	ldr	r3, [pc, #36]	; (800bce4 <tcp_timer_needed+0x34>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d103      	bne.n	800bccc <tcp_timer_needed+0x1c>
 800bcc4:	4b08      	ldr	r3, [pc, #32]	; (800bce8 <tcp_timer_needed+0x38>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d007      	beq.n	800bcdc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800bccc:	4b04      	ldr	r3, [pc, #16]	; (800bce0 <tcp_timer_needed+0x30>)
 800bcce:	2201      	movs	r2, #1
 800bcd0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	4905      	ldr	r1, [pc, #20]	; (800bcec <tcp_timer_needed+0x3c>)
 800bcd6:	20fa      	movs	r0, #250	; 0xfa
 800bcd8:	f000 f8cc 	bl	800be74 <sys_timeout>
  }
}
 800bcdc:	bf00      	nop
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	20008358 	.word	0x20008358
 800bce4:	2000830c 	.word	0x2000830c
 800bce8:	20008310 	.word	0x20008310
 800bcec:	0800bc69 	.word	0x0800bc69

0800bcf0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b086      	sub	sp, #24
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bcfc:	2006      	movs	r0, #6
 800bcfe:	f7f9 fd07 	bl	8005710 <memp_malloc>
 800bd02:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d109      	bne.n	800bd1e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d151      	bne.n	800bdb4 <sys_timeout_abs+0xc4>
 800bd10:	4b2a      	ldr	r3, [pc, #168]	; (800bdbc <sys_timeout_abs+0xcc>)
 800bd12:	22be      	movs	r2, #190	; 0xbe
 800bd14:	492a      	ldr	r1, [pc, #168]	; (800bdc0 <sys_timeout_abs+0xd0>)
 800bd16:	482b      	ldr	r0, [pc, #172]	; (800bdc4 <sys_timeout_abs+0xd4>)
 800bd18:	f002 fdf8 	bl	800e90c <iprintf>
    return;
 800bd1c:	e04a      	b.n	800bdb4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	2200      	movs	r2, #0
 800bd22:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	68fa      	ldr	r2, [r7, #12]
 800bd34:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800bd36:	4b24      	ldr	r3, [pc, #144]	; (800bdc8 <sys_timeout_abs+0xd8>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d103      	bne.n	800bd46 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800bd3e:	4a22      	ldr	r2, [pc, #136]	; (800bdc8 <sys_timeout_abs+0xd8>)
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	6013      	str	r3, [r2, #0]
    return;
 800bd44:	e037      	b.n	800bdb6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	685a      	ldr	r2, [r3, #4]
 800bd4a:	4b1f      	ldr	r3, [pc, #124]	; (800bdc8 <sys_timeout_abs+0xd8>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	1ad3      	subs	r3, r2, r3
 800bd52:	0fdb      	lsrs	r3, r3, #31
 800bd54:	f003 0301 	and.w	r3, r3, #1
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d007      	beq.n	800bd6e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800bd5e:	4b1a      	ldr	r3, [pc, #104]	; (800bdc8 <sys_timeout_abs+0xd8>)
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800bd66:	4a18      	ldr	r2, [pc, #96]	; (800bdc8 <sys_timeout_abs+0xd8>)
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	6013      	str	r3, [r2, #0]
 800bd6c:	e023      	b.n	800bdb6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800bd6e:	4b16      	ldr	r3, [pc, #88]	; (800bdc8 <sys_timeout_abs+0xd8>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	617b      	str	r3, [r7, #20]
 800bd74:	e01a      	b.n	800bdac <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00b      	beq.n	800bd96 <sys_timeout_abs+0xa6>
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	685a      	ldr	r2, [r3, #4]
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	1ad3      	subs	r3, r2, r3
 800bd8a:	0fdb      	lsrs	r3, r3, #31
 800bd8c:	f003 0301 	and.w	r3, r3, #1
 800bd90:	b2db      	uxtb	r3, r3
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d007      	beq.n	800bda6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	693a      	ldr	r2, [r7, #16]
 800bda2:	601a      	str	r2, [r3, #0]
        break;
 800bda4:	e007      	b.n	800bdb6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	617b      	str	r3, [r7, #20]
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d1e1      	bne.n	800bd76 <sys_timeout_abs+0x86>
 800bdb2:	e000      	b.n	800bdb6 <sys_timeout_abs+0xc6>
    return;
 800bdb4:	bf00      	nop
      }
    }
  }
}
 800bdb6:	3718      	adds	r7, #24
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	08011c1c 	.word	0x08011c1c
 800bdc0:	08011c50 	.word	0x08011c50
 800bdc4:	08011c90 	.word	0x08011c90
 800bdc8:	20008350 	.word	0x20008350

0800bdcc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b086      	sub	sp, #24
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	4798      	blx	r3

  now = sys_now();
 800bdde:	f7f8 fe07 	bl	80049f0 <sys_now>
 800bde2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	4b0f      	ldr	r3, [pc, #60]	; (800be28 <lwip_cyclic_timer+0x5c>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4413      	add	r3, r2
 800bdee:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bdf0:	68fa      	ldr	r2, [r7, #12]
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	1ad3      	subs	r3, r2, r3
 800bdf6:	0fdb      	lsrs	r3, r3, #31
 800bdf8:	f003 0301 	and.w	r3, r3, #1
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d009      	beq.n	800be16 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	4413      	add	r3, r2
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	4907      	ldr	r1, [pc, #28]	; (800be2c <lwip_cyclic_timer+0x60>)
 800be0e:	4618      	mov	r0, r3
 800be10:	f7ff ff6e 	bl	800bcf0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800be14:	e004      	b.n	800be20 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	4904      	ldr	r1, [pc, #16]	; (800be2c <lwip_cyclic_timer+0x60>)
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f7ff ff68 	bl	800bcf0 <sys_timeout_abs>
}
 800be20:	bf00      	nop
 800be22:	3718      	adds	r7, #24
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}
 800be28:	20008354 	.word	0x20008354
 800be2c:	0800bdcd 	.word	0x0800bdcd

0800be30 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800be36:	2301      	movs	r3, #1
 800be38:	607b      	str	r3, [r7, #4]
 800be3a:	e00e      	b.n	800be5a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800be3c:	4a0b      	ldr	r2, [pc, #44]	; (800be6c <sys_timeouts_init+0x3c>)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	00db      	lsls	r3, r3, #3
 800be48:	4a08      	ldr	r2, [pc, #32]	; (800be6c <sys_timeouts_init+0x3c>)
 800be4a:	4413      	add	r3, r2
 800be4c:	461a      	mov	r2, r3
 800be4e:	4908      	ldr	r1, [pc, #32]	; (800be70 <sys_timeouts_init+0x40>)
 800be50:	f000 f810 	bl	800be74 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	3301      	adds	r3, #1
 800be58:	607b      	str	r3, [r7, #4]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2b02      	cmp	r3, #2
 800be5e:	d9ed      	bls.n	800be3c <sys_timeouts_init+0xc>
  }
}
 800be60:	bf00      	nop
 800be62:	bf00      	nop
 800be64:	3708      	adds	r7, #8
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	08012808 	.word	0x08012808
 800be70:	0800bdcd 	.word	0x0800bdcd

0800be74 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af00      	add	r7, sp, #0
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be86:	d306      	bcc.n	800be96 <sys_timeout+0x22>
 800be88:	4b0a      	ldr	r3, [pc, #40]	; (800beb4 <sys_timeout+0x40>)
 800be8a:	f240 1229 	movw	r2, #297	; 0x129
 800be8e:	490a      	ldr	r1, [pc, #40]	; (800beb8 <sys_timeout+0x44>)
 800be90:	480a      	ldr	r0, [pc, #40]	; (800bebc <sys_timeout+0x48>)
 800be92:	f002 fd3b 	bl	800e90c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800be96:	f7f8 fdab 	bl	80049f0 <sys_now>
 800be9a:	4602      	mov	r2, r0
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	4413      	add	r3, r2
 800bea0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	68b9      	ldr	r1, [r7, #8]
 800bea6:	6978      	ldr	r0, [r7, #20]
 800bea8:	f7ff ff22 	bl	800bcf0 <sys_timeout_abs>
#endif
}
 800beac:	bf00      	nop
 800beae:	3718      	adds	r7, #24
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	08011c1c 	.word	0x08011c1c
 800beb8:	08011cb8 	.word	0x08011cb8
 800bebc:	08011c90 	.word	0x08011c90

0800bec0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bec6:	f7f8 fd93 	bl	80049f0 <sys_now>
 800beca:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800becc:	4b1a      	ldr	r3, [pc, #104]	; (800bf38 <sys_check_timeouts+0x78>)
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d001      	beq.n	800beda <sys_check_timeouts+0x1a>
 800bed6:	f7f9 ffc7 	bl	8005e68 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800beda:	4b18      	ldr	r3, [pc, #96]	; (800bf3c <sys_check_timeouts+0x7c>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d022      	beq.n	800bf2c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	68fa      	ldr	r2, [r7, #12]
 800beec:	1ad3      	subs	r3, r2, r3
 800beee:	0fdb      	lsrs	r3, r3, #31
 800bef0:	f003 0301 	and.w	r3, r3, #1
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d11a      	bne.n	800bf30 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	4a0f      	ldr	r2, [pc, #60]	; (800bf3c <sys_check_timeouts+0x7c>)
 800bf00:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	68db      	ldr	r3, [r3, #12]
 800bf0c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	4a0b      	ldr	r2, [pc, #44]	; (800bf40 <sys_check_timeouts+0x80>)
 800bf14:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bf16:	68b9      	ldr	r1, [r7, #8]
 800bf18:	2006      	movs	r0, #6
 800bf1a:	f7f9 fc69 	bl	80057f0 <memp_free>
    if (handler != NULL) {
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d0d3      	beq.n	800becc <sys_check_timeouts+0xc>
      handler(arg);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6838      	ldr	r0, [r7, #0]
 800bf28:	4798      	blx	r3
  do {
 800bf2a:	e7cf      	b.n	800becc <sys_check_timeouts+0xc>
      return;
 800bf2c:	bf00      	nop
 800bf2e:	e000      	b.n	800bf32 <sys_check_timeouts+0x72>
      return;
 800bf30:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bf32:	3710      	adds	r7, #16
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	200082fd 	.word	0x200082fd
 800bf3c:	20008350 	.word	0x20008350
 800bf40:	20008354 	.word	0x20008354

0800bf44 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bf48:	f002 fcf8 	bl	800e93c <rand>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bf5a:	b29a      	uxth	r2, r3
 800bf5c:	4b01      	ldr	r3, [pc, #4]	; (800bf64 <udp_init+0x20>)
 800bf5e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bf60:	bf00      	nop
 800bf62:	bd80      	pop	{r7, pc}
 800bf64:	20000058 	.word	0x20000058

0800bf68 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	60f8      	str	r0, [r7, #12]
 800bf70:	60b9      	str	r1, [r7, #8]
 800bf72:	4613      	mov	r3, r2
 800bf74:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d105      	bne.n	800bf88 <udp_input_local_match+0x20>
 800bf7c:	4b27      	ldr	r3, [pc, #156]	; (800c01c <udp_input_local_match+0xb4>)
 800bf7e:	2287      	movs	r2, #135	; 0x87
 800bf80:	4927      	ldr	r1, [pc, #156]	; (800c020 <udp_input_local_match+0xb8>)
 800bf82:	4828      	ldr	r0, [pc, #160]	; (800c024 <udp_input_local_match+0xbc>)
 800bf84:	f002 fcc2 	bl	800e90c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d105      	bne.n	800bf9a <udp_input_local_match+0x32>
 800bf8e:	4b23      	ldr	r3, [pc, #140]	; (800c01c <udp_input_local_match+0xb4>)
 800bf90:	2288      	movs	r2, #136	; 0x88
 800bf92:	4925      	ldr	r1, [pc, #148]	; (800c028 <udp_input_local_match+0xc0>)
 800bf94:	4823      	ldr	r0, [pc, #140]	; (800c024 <udp_input_local_match+0xbc>)
 800bf96:	f002 fcb9 	bl	800e90c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	7a1b      	ldrb	r3, [r3, #8]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d00b      	beq.n	800bfba <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	7a1a      	ldrb	r2, [r3, #8]
 800bfa6:	4b21      	ldr	r3, [pc, #132]	; (800c02c <udp_input_local_match+0xc4>)
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bfae:	3301      	adds	r3, #1
 800bfb0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d001      	beq.n	800bfba <udp_input_local_match+0x52>
    return 0;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	e02b      	b.n	800c012 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800bfba:	79fb      	ldrb	r3, [r7, #7]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d018      	beq.n	800bff2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d013      	beq.n	800bfee <udp_input_local_match+0x86>
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00f      	beq.n	800bfee <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bfce:	4b17      	ldr	r3, [pc, #92]	; (800c02c <udp_input_local_match+0xc4>)
 800bfd0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bfd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfd6:	d00a      	beq.n	800bfee <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	4b13      	ldr	r3, [pc, #76]	; (800c02c <udp_input_local_match+0xc4>)
 800bfde:	695b      	ldr	r3, [r3, #20]
 800bfe0:	405a      	eors	r2, r3
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	3308      	adds	r3, #8
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d110      	bne.n	800c010 <udp_input_local_match+0xa8>
          return 1;
 800bfee:	2301      	movs	r3, #1
 800bff0:	e00f      	b.n	800c012 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d009      	beq.n	800c00c <udp_input_local_match+0xa4>
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d005      	beq.n	800c00c <udp_input_local_match+0xa4>
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	4b09      	ldr	r3, [pc, #36]	; (800c02c <udp_input_local_match+0xc4>)
 800c006:	695b      	ldr	r3, [r3, #20]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d101      	bne.n	800c010 <udp_input_local_match+0xa8>
        return 1;
 800c00c:	2301      	movs	r3, #1
 800c00e:	e000      	b.n	800c012 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c010:	2300      	movs	r3, #0
}
 800c012:	4618      	mov	r0, r3
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	08011d04 	.word	0x08011d04
 800c020:	08011d34 	.word	0x08011d34
 800c024:	08011d58 	.word	0x08011d58
 800c028:	08011d80 	.word	0x08011d80
 800c02c:	20004d90 	.word	0x20004d90

0800c030 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c030:	b590      	push	{r4, r7, lr}
 800c032:	b08d      	sub	sp, #52	; 0x34
 800c034:	af02      	add	r7, sp, #8
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c03a:	2300      	movs	r3, #0
 800c03c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d105      	bne.n	800c050 <udp_input+0x20>
 800c044:	4b7c      	ldr	r3, [pc, #496]	; (800c238 <udp_input+0x208>)
 800c046:	22cf      	movs	r2, #207	; 0xcf
 800c048:	497c      	ldr	r1, [pc, #496]	; (800c23c <udp_input+0x20c>)
 800c04a:	487d      	ldr	r0, [pc, #500]	; (800c240 <udp_input+0x210>)
 800c04c:	f002 fc5e 	bl	800e90c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d105      	bne.n	800c062 <udp_input+0x32>
 800c056:	4b78      	ldr	r3, [pc, #480]	; (800c238 <udp_input+0x208>)
 800c058:	22d0      	movs	r2, #208	; 0xd0
 800c05a:	497a      	ldr	r1, [pc, #488]	; (800c244 <udp_input+0x214>)
 800c05c:	4878      	ldr	r0, [pc, #480]	; (800c240 <udp_input+0x210>)
 800c05e:	f002 fc55 	bl	800e90c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	895b      	ldrh	r3, [r3, #10]
 800c066:	2b07      	cmp	r3, #7
 800c068:	d803      	bhi.n	800c072 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f7fa fa36 	bl	80064dc <pbuf_free>
    goto end;
 800c070:	e0de      	b.n	800c230 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c078:	4b73      	ldr	r3, [pc, #460]	; (800c248 <udp_input+0x218>)
 800c07a:	695b      	ldr	r3, [r3, #20]
 800c07c:	4a72      	ldr	r2, [pc, #456]	; (800c248 <udp_input+0x218>)
 800c07e:	6812      	ldr	r2, [r2, #0]
 800c080:	4611      	mov	r1, r2
 800c082:	4618      	mov	r0, r3
 800c084:	f001 fc88 	bl	800d998 <ip4_addr_isbroadcast_u32>
 800c088:	4603      	mov	r3, r0
 800c08a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	881b      	ldrh	r3, [r3, #0]
 800c090:	b29b      	uxth	r3, r3
 800c092:	4618      	mov	r0, r3
 800c094:	f7f8 fec4 	bl	8004e20 <lwip_htons>
 800c098:	4603      	mov	r3, r0
 800c09a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	885b      	ldrh	r3, [r3, #2]
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7f8 febc 	bl	8004e20 <lwip_htons>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c0b8:	4b64      	ldr	r3, [pc, #400]	; (800c24c <udp_input+0x21c>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	627b      	str	r3, [r7, #36]	; 0x24
 800c0be:	e054      	b.n	800c16a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c2:	8a5b      	ldrh	r3, [r3, #18]
 800c0c4:	89fa      	ldrh	r2, [r7, #14]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d14a      	bne.n	800c160 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c0ca:	7cfb      	ldrb	r3, [r7, #19]
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	6839      	ldr	r1, [r7, #0]
 800c0d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0d2:	f7ff ff49 	bl	800bf68 <udp_input_local_match>
 800c0d6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d041      	beq.n	800c160 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0de:	7c1b      	ldrb	r3, [r3, #16]
 800c0e0:	f003 0304 	and.w	r3, r3, #4
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d11d      	bne.n	800c124 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c0e8:	69fb      	ldr	r3, [r7, #28]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d102      	bne.n	800c0f4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f0:	61fb      	str	r3, [r7, #28]
 800c0f2:	e017      	b.n	800c124 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c0f4:	7cfb      	ldrb	r3, [r7, #19]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d014      	beq.n	800c124 <udp_input+0xf4>
 800c0fa:	4b53      	ldr	r3, [pc, #332]	; (800c248 <udp_input+0x218>)
 800c0fc:	695b      	ldr	r3, [r3, #20]
 800c0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c102:	d10f      	bne.n	800c124 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	3304      	adds	r3, #4
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	429a      	cmp	r2, r3
 800c110:	d008      	beq.n	800c124 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c114:	681a      	ldr	r2, [r3, #0]
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	3304      	adds	r3, #4
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d101      	bne.n	800c124 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c122:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c126:	8a9b      	ldrh	r3, [r3, #20]
 800c128:	8a3a      	ldrh	r2, [r7, #16]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d118      	bne.n	800c160 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c130:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c132:	2b00      	cmp	r3, #0
 800c134:	d005      	beq.n	800c142 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c138:	685a      	ldr	r2, [r3, #4]
 800c13a:	4b43      	ldr	r3, [pc, #268]	; (800c248 <udp_input+0x218>)
 800c13c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c13e:	429a      	cmp	r2, r3
 800c140:	d10e      	bne.n	800c160 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c142:	6a3b      	ldr	r3, [r7, #32]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d014      	beq.n	800c172 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14a:	68da      	ldr	r2, [r3, #12]
 800c14c:	6a3b      	ldr	r3, [r7, #32]
 800c14e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c150:	4b3e      	ldr	r3, [pc, #248]	; (800c24c <udp_input+0x21c>)
 800c152:	681a      	ldr	r2, [r3, #0]
 800c154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c156:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c158:	4a3c      	ldr	r2, [pc, #240]	; (800c24c <udp_input+0x21c>)
 800c15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c15e:	e008      	b.n	800c172 <udp_input+0x142>
      }
    }

    prev = pcb;
 800c160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c162:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	627b      	str	r3, [r7, #36]	; 0x24
 800c16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d1a7      	bne.n	800c0c0 <udp_input+0x90>
 800c170:	e000      	b.n	800c174 <udp_input+0x144>
        break;
 800c172:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c176:	2b00      	cmp	r3, #0
 800c178:	d101      	bne.n	800c17e <udp_input+0x14e>
    pcb = uncon_pcb;
 800c17a:	69fb      	ldr	r3, [r7, #28]
 800c17c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c180:	2b00      	cmp	r3, #0
 800c182:	d002      	beq.n	800c18a <udp_input+0x15a>
    for_us = 1;
 800c184:	2301      	movs	r3, #1
 800c186:	76fb      	strb	r3, [r7, #27]
 800c188:	e00a      	b.n	800c1a0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	3304      	adds	r3, #4
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	4b2d      	ldr	r3, [pc, #180]	; (800c248 <udp_input+0x218>)
 800c192:	695b      	ldr	r3, [r3, #20]
 800c194:	429a      	cmp	r2, r3
 800c196:	bf0c      	ite	eq
 800c198:	2301      	moveq	r3, #1
 800c19a:	2300      	movne	r3, #0
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c1a0:	7efb      	ldrb	r3, [r7, #27]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d041      	beq.n	800c22a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c1a6:	2108      	movs	r1, #8
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f7fa f911 	bl	80063d0 <pbuf_remove_header>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d00a      	beq.n	800c1ca <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c1b4:	4b20      	ldr	r3, [pc, #128]	; (800c238 <udp_input+0x208>)
 800c1b6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c1ba:	4925      	ldr	r1, [pc, #148]	; (800c250 <udp_input+0x220>)
 800c1bc:	4820      	ldr	r0, [pc, #128]	; (800c240 <udp_input+0x210>)
 800c1be:	f002 fba5 	bl	800e90c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f7fa f98a 	bl	80064dc <pbuf_free>
      goto end;
 800c1c8:	e032      	b.n	800c230 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d012      	beq.n	800c1f6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d2:	699b      	ldr	r3, [r3, #24]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d00a      	beq.n	800c1ee <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1da:	699c      	ldr	r4, [r3, #24]
 800c1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1de:	69d8      	ldr	r0, [r3, #28]
 800c1e0:	8a3b      	ldrh	r3, [r7, #16]
 800c1e2:	9300      	str	r3, [sp, #0]
 800c1e4:	4b1b      	ldr	r3, [pc, #108]	; (800c254 <udp_input+0x224>)
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c1ea:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c1ec:	e021      	b.n	800c232 <udp_input+0x202>
        pbuf_free(p);
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f7fa f974 	bl	80064dc <pbuf_free>
        goto end;
 800c1f4:	e01c      	b.n	800c230 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c1f6:	7cfb      	ldrb	r3, [r7, #19]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d112      	bne.n	800c222 <udp_input+0x1f2>
 800c1fc:	4b12      	ldr	r3, [pc, #72]	; (800c248 <udp_input+0x218>)
 800c1fe:	695b      	ldr	r3, [r3, #20]
 800c200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c204:	2be0      	cmp	r3, #224	; 0xe0
 800c206:	d00c      	beq.n	800c222 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c208:	4b0f      	ldr	r3, [pc, #60]	; (800c248 <udp_input+0x218>)
 800c20a:	899b      	ldrh	r3, [r3, #12]
 800c20c:	3308      	adds	r3, #8
 800c20e:	b29b      	uxth	r3, r3
 800c210:	b21b      	sxth	r3, r3
 800c212:	4619      	mov	r1, r3
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f7fa f94e 	bl	80064b6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c21a:	2103      	movs	r1, #3
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f001 f89b 	bl	800d358 <icmp_dest_unreach>
      pbuf_free(p);
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f7fa f95a 	bl	80064dc <pbuf_free>
  return;
 800c228:	e003      	b.n	800c232 <udp_input+0x202>
    pbuf_free(p);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f7fa f956 	bl	80064dc <pbuf_free>
  return;
 800c230:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c232:	372c      	adds	r7, #44	; 0x2c
 800c234:	46bd      	mov	sp, r7
 800c236:	bd90      	pop	{r4, r7, pc}
 800c238:	08011d04 	.word	0x08011d04
 800c23c:	08011da8 	.word	0x08011da8
 800c240:	08011d58 	.word	0x08011d58
 800c244:	08011dc0 	.word	0x08011dc0
 800c248:	20004d90 	.word	0x20004d90
 800c24c:	2000835c 	.word	0x2000835c
 800c250:	08011ddc 	.word	0x08011ddc
 800c254:	20004da0 	.word	0x20004da0

0800c258 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c258:	b480      	push	{r7}
 800c25a:	b085      	sub	sp, #20
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d01e      	beq.n	800c2a6 <udp_netif_ip_addr_changed+0x4e>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d01a      	beq.n	800c2a6 <udp_netif_ip_addr_changed+0x4e>
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d017      	beq.n	800c2a6 <udp_netif_ip_addr_changed+0x4e>
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d013      	beq.n	800c2a6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c27e:	4b0d      	ldr	r3, [pc, #52]	; (800c2b4 <udp_netif_ip_addr_changed+0x5c>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	60fb      	str	r3, [r7, #12]
 800c284:	e00c      	b.n	800c2a0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d103      	bne.n	800c29a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	60fb      	str	r3, [r7, #12]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d1ef      	bne.n	800c286 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c2a6:	bf00      	nop
 800c2a8:	3714      	adds	r7, #20
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr
 800c2b2:	bf00      	nop
 800c2b4:	2000835c 	.word	0x2000835c

0800c2b8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c2c0:	4915      	ldr	r1, [pc, #84]	; (800c318 <etharp_free_entry+0x60>)
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	4613      	mov	r3, r2
 800c2c6:	005b      	lsls	r3, r3, #1
 800c2c8:	4413      	add	r3, r2
 800c2ca:	00db      	lsls	r3, r3, #3
 800c2cc:	440b      	add	r3, r1
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d013      	beq.n	800c2fc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c2d4:	4910      	ldr	r1, [pc, #64]	; (800c318 <etharp_free_entry+0x60>)
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	4613      	mov	r3, r2
 800c2da:	005b      	lsls	r3, r3, #1
 800c2dc:	4413      	add	r3, r2
 800c2de:	00db      	lsls	r3, r3, #3
 800c2e0:	440b      	add	r3, r1
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7fa f8f9 	bl	80064dc <pbuf_free>
    arp_table[i].q = NULL;
 800c2ea:	490b      	ldr	r1, [pc, #44]	; (800c318 <etharp_free_entry+0x60>)
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	4613      	mov	r3, r2
 800c2f0:	005b      	lsls	r3, r3, #1
 800c2f2:	4413      	add	r3, r2
 800c2f4:	00db      	lsls	r3, r3, #3
 800c2f6:	440b      	add	r3, r1
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c2fc:	4906      	ldr	r1, [pc, #24]	; (800c318 <etharp_free_entry+0x60>)
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	4613      	mov	r3, r2
 800c302:	005b      	lsls	r3, r3, #1
 800c304:	4413      	add	r3, r2
 800c306:	00db      	lsls	r3, r3, #3
 800c308:	440b      	add	r3, r1
 800c30a:	3314      	adds	r3, #20
 800c30c:	2200      	movs	r2, #0
 800c30e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c310:	bf00      	nop
 800c312:	3708      	adds	r7, #8
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	20008360 	.word	0x20008360

0800c31c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b082      	sub	sp, #8
 800c320:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c322:	2300      	movs	r3, #0
 800c324:	607b      	str	r3, [r7, #4]
 800c326:	e096      	b.n	800c456 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c328:	494f      	ldr	r1, [pc, #316]	; (800c468 <etharp_tmr+0x14c>)
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	4613      	mov	r3, r2
 800c32e:	005b      	lsls	r3, r3, #1
 800c330:	4413      	add	r3, r2
 800c332:	00db      	lsls	r3, r3, #3
 800c334:	440b      	add	r3, r1
 800c336:	3314      	adds	r3, #20
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c33c:	78fb      	ldrb	r3, [r7, #3]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	f000 8086 	beq.w	800c450 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c344:	4948      	ldr	r1, [pc, #288]	; (800c468 <etharp_tmr+0x14c>)
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	4613      	mov	r3, r2
 800c34a:	005b      	lsls	r3, r3, #1
 800c34c:	4413      	add	r3, r2
 800c34e:	00db      	lsls	r3, r3, #3
 800c350:	440b      	add	r3, r1
 800c352:	3312      	adds	r3, #18
 800c354:	881b      	ldrh	r3, [r3, #0]
 800c356:	3301      	adds	r3, #1
 800c358:	b298      	uxth	r0, r3
 800c35a:	4943      	ldr	r1, [pc, #268]	; (800c468 <etharp_tmr+0x14c>)
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	4613      	mov	r3, r2
 800c360:	005b      	lsls	r3, r3, #1
 800c362:	4413      	add	r3, r2
 800c364:	00db      	lsls	r3, r3, #3
 800c366:	440b      	add	r3, r1
 800c368:	3312      	adds	r3, #18
 800c36a:	4602      	mov	r2, r0
 800c36c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c36e:	493e      	ldr	r1, [pc, #248]	; (800c468 <etharp_tmr+0x14c>)
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	4613      	mov	r3, r2
 800c374:	005b      	lsls	r3, r3, #1
 800c376:	4413      	add	r3, r2
 800c378:	00db      	lsls	r3, r3, #3
 800c37a:	440b      	add	r3, r1
 800c37c:	3312      	adds	r3, #18
 800c37e:	881b      	ldrh	r3, [r3, #0]
 800c380:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c384:	d215      	bcs.n	800c3b2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c386:	4938      	ldr	r1, [pc, #224]	; (800c468 <etharp_tmr+0x14c>)
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	4613      	mov	r3, r2
 800c38c:	005b      	lsls	r3, r3, #1
 800c38e:	4413      	add	r3, r2
 800c390:	00db      	lsls	r3, r3, #3
 800c392:	440b      	add	r3, r1
 800c394:	3314      	adds	r3, #20
 800c396:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d10e      	bne.n	800c3ba <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c39c:	4932      	ldr	r1, [pc, #200]	; (800c468 <etharp_tmr+0x14c>)
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	005b      	lsls	r3, r3, #1
 800c3a4:	4413      	add	r3, r2
 800c3a6:	00db      	lsls	r3, r3, #3
 800c3a8:	440b      	add	r3, r1
 800c3aa:	3312      	adds	r3, #18
 800c3ac:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c3ae:	2b04      	cmp	r3, #4
 800c3b0:	d903      	bls.n	800c3ba <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f7ff ff80 	bl	800c2b8 <etharp_free_entry>
 800c3b8:	e04a      	b.n	800c450 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c3ba:	492b      	ldr	r1, [pc, #172]	; (800c468 <etharp_tmr+0x14c>)
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	4613      	mov	r3, r2
 800c3c0:	005b      	lsls	r3, r3, #1
 800c3c2:	4413      	add	r3, r2
 800c3c4:	00db      	lsls	r3, r3, #3
 800c3c6:	440b      	add	r3, r1
 800c3c8:	3314      	adds	r3, #20
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	2b03      	cmp	r3, #3
 800c3ce:	d10a      	bne.n	800c3e6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c3d0:	4925      	ldr	r1, [pc, #148]	; (800c468 <etharp_tmr+0x14c>)
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	4613      	mov	r3, r2
 800c3d6:	005b      	lsls	r3, r3, #1
 800c3d8:	4413      	add	r3, r2
 800c3da:	00db      	lsls	r3, r3, #3
 800c3dc:	440b      	add	r3, r1
 800c3de:	3314      	adds	r3, #20
 800c3e0:	2204      	movs	r2, #4
 800c3e2:	701a      	strb	r2, [r3, #0]
 800c3e4:	e034      	b.n	800c450 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c3e6:	4920      	ldr	r1, [pc, #128]	; (800c468 <etharp_tmr+0x14c>)
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	4613      	mov	r3, r2
 800c3ec:	005b      	lsls	r3, r3, #1
 800c3ee:	4413      	add	r3, r2
 800c3f0:	00db      	lsls	r3, r3, #3
 800c3f2:	440b      	add	r3, r1
 800c3f4:	3314      	adds	r3, #20
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	2b04      	cmp	r3, #4
 800c3fa:	d10a      	bne.n	800c412 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c3fc:	491a      	ldr	r1, [pc, #104]	; (800c468 <etharp_tmr+0x14c>)
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	4613      	mov	r3, r2
 800c402:	005b      	lsls	r3, r3, #1
 800c404:	4413      	add	r3, r2
 800c406:	00db      	lsls	r3, r3, #3
 800c408:	440b      	add	r3, r1
 800c40a:	3314      	adds	r3, #20
 800c40c:	2202      	movs	r2, #2
 800c40e:	701a      	strb	r2, [r3, #0]
 800c410:	e01e      	b.n	800c450 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c412:	4915      	ldr	r1, [pc, #84]	; (800c468 <etharp_tmr+0x14c>)
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	4613      	mov	r3, r2
 800c418:	005b      	lsls	r3, r3, #1
 800c41a:	4413      	add	r3, r2
 800c41c:	00db      	lsls	r3, r3, #3
 800c41e:	440b      	add	r3, r1
 800c420:	3314      	adds	r3, #20
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	2b01      	cmp	r3, #1
 800c426:	d113      	bne.n	800c450 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c428:	490f      	ldr	r1, [pc, #60]	; (800c468 <etharp_tmr+0x14c>)
 800c42a:	687a      	ldr	r2, [r7, #4]
 800c42c:	4613      	mov	r3, r2
 800c42e:	005b      	lsls	r3, r3, #1
 800c430:	4413      	add	r3, r2
 800c432:	00db      	lsls	r3, r3, #3
 800c434:	440b      	add	r3, r1
 800c436:	3308      	adds	r3, #8
 800c438:	6818      	ldr	r0, [r3, #0]
 800c43a:	687a      	ldr	r2, [r7, #4]
 800c43c:	4613      	mov	r3, r2
 800c43e:	005b      	lsls	r3, r3, #1
 800c440:	4413      	add	r3, r2
 800c442:	00db      	lsls	r3, r3, #3
 800c444:	4a08      	ldr	r2, [pc, #32]	; (800c468 <etharp_tmr+0x14c>)
 800c446:	4413      	add	r3, r2
 800c448:	3304      	adds	r3, #4
 800c44a:	4619      	mov	r1, r3
 800c44c:	f000 fe6e 	bl	800d12c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	3301      	adds	r3, #1
 800c454:	607b      	str	r3, [r7, #4]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2b09      	cmp	r3, #9
 800c45a:	f77f af65 	ble.w	800c328 <etharp_tmr+0xc>
      }
    }
  }
}
 800c45e:	bf00      	nop
 800c460:	bf00      	nop
 800c462:	3708      	adds	r7, #8
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}
 800c468:	20008360 	.word	0x20008360

0800c46c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b08a      	sub	sp, #40	; 0x28
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	460b      	mov	r3, r1
 800c476:	607a      	str	r2, [r7, #4]
 800c478:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c47a:	230a      	movs	r3, #10
 800c47c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c47e:	230a      	movs	r3, #10
 800c480:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c482:	230a      	movs	r3, #10
 800c484:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c486:	2300      	movs	r3, #0
 800c488:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c48a:	230a      	movs	r3, #10
 800c48c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c48e:	2300      	movs	r3, #0
 800c490:	83bb      	strh	r3, [r7, #28]
 800c492:	2300      	movs	r3, #0
 800c494:	837b      	strh	r3, [r7, #26]
 800c496:	2300      	movs	r3, #0
 800c498:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c49a:	2300      	movs	r3, #0
 800c49c:	843b      	strh	r3, [r7, #32]
 800c49e:	e0ae      	b.n	800c5fe <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c4a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c4a4:	49a6      	ldr	r1, [pc, #664]	; (800c740 <etharp_find_entry+0x2d4>)
 800c4a6:	4613      	mov	r3, r2
 800c4a8:	005b      	lsls	r3, r3, #1
 800c4aa:	4413      	add	r3, r2
 800c4ac:	00db      	lsls	r3, r3, #3
 800c4ae:	440b      	add	r3, r1
 800c4b0:	3314      	adds	r3, #20
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c4b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c4ba:	2b0a      	cmp	r3, #10
 800c4bc:	d105      	bne.n	800c4ca <etharp_find_entry+0x5e>
 800c4be:	7dfb      	ldrb	r3, [r7, #23]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d102      	bne.n	800c4ca <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c4c4:	8c3b      	ldrh	r3, [r7, #32]
 800c4c6:	847b      	strh	r3, [r7, #34]	; 0x22
 800c4c8:	e095      	b.n	800c5f6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c4ca:	7dfb      	ldrb	r3, [r7, #23]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	f000 8092 	beq.w	800c5f6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c4d2:	7dfb      	ldrb	r3, [r7, #23]
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d009      	beq.n	800c4ec <etharp_find_entry+0x80>
 800c4d8:	7dfb      	ldrb	r3, [r7, #23]
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	d806      	bhi.n	800c4ec <etharp_find_entry+0x80>
 800c4de:	4b99      	ldr	r3, [pc, #612]	; (800c744 <etharp_find_entry+0x2d8>)
 800c4e0:	f240 1223 	movw	r2, #291	; 0x123
 800c4e4:	4998      	ldr	r1, [pc, #608]	; (800c748 <etharp_find_entry+0x2dc>)
 800c4e6:	4899      	ldr	r0, [pc, #612]	; (800c74c <etharp_find_entry+0x2e0>)
 800c4e8:	f002 fa10 	bl	800e90c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d020      	beq.n	800c534 <etharp_find_entry+0xc8>
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	6819      	ldr	r1, [r3, #0]
 800c4f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c4fa:	4891      	ldr	r0, [pc, #580]	; (800c740 <etharp_find_entry+0x2d4>)
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	005b      	lsls	r3, r3, #1
 800c500:	4413      	add	r3, r2
 800c502:	00db      	lsls	r3, r3, #3
 800c504:	4403      	add	r3, r0
 800c506:	3304      	adds	r3, #4
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4299      	cmp	r1, r3
 800c50c:	d112      	bne.n	800c534 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d00c      	beq.n	800c52e <etharp_find_entry+0xc2>
 800c514:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c518:	4989      	ldr	r1, [pc, #548]	; (800c740 <etharp_find_entry+0x2d4>)
 800c51a:	4613      	mov	r3, r2
 800c51c:	005b      	lsls	r3, r3, #1
 800c51e:	4413      	add	r3, r2
 800c520:	00db      	lsls	r3, r3, #3
 800c522:	440b      	add	r3, r1
 800c524:	3308      	adds	r3, #8
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d102      	bne.n	800c534 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c52e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c532:	e100      	b.n	800c736 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c534:	7dfb      	ldrb	r3, [r7, #23]
 800c536:	2b01      	cmp	r3, #1
 800c538:	d140      	bne.n	800c5bc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c53a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c53e:	4980      	ldr	r1, [pc, #512]	; (800c740 <etharp_find_entry+0x2d4>)
 800c540:	4613      	mov	r3, r2
 800c542:	005b      	lsls	r3, r3, #1
 800c544:	4413      	add	r3, r2
 800c546:	00db      	lsls	r3, r3, #3
 800c548:	440b      	add	r3, r1
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d01a      	beq.n	800c586 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c550:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c554:	497a      	ldr	r1, [pc, #488]	; (800c740 <etharp_find_entry+0x2d4>)
 800c556:	4613      	mov	r3, r2
 800c558:	005b      	lsls	r3, r3, #1
 800c55a:	4413      	add	r3, r2
 800c55c:	00db      	lsls	r3, r3, #3
 800c55e:	440b      	add	r3, r1
 800c560:	3312      	adds	r3, #18
 800c562:	881b      	ldrh	r3, [r3, #0]
 800c564:	8bba      	ldrh	r2, [r7, #28]
 800c566:	429a      	cmp	r2, r3
 800c568:	d845      	bhi.n	800c5f6 <etharp_find_entry+0x18a>
            old_queue = i;
 800c56a:	8c3b      	ldrh	r3, [r7, #32]
 800c56c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c56e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c572:	4973      	ldr	r1, [pc, #460]	; (800c740 <etharp_find_entry+0x2d4>)
 800c574:	4613      	mov	r3, r2
 800c576:	005b      	lsls	r3, r3, #1
 800c578:	4413      	add	r3, r2
 800c57a:	00db      	lsls	r3, r3, #3
 800c57c:	440b      	add	r3, r1
 800c57e:	3312      	adds	r3, #18
 800c580:	881b      	ldrh	r3, [r3, #0]
 800c582:	83bb      	strh	r3, [r7, #28]
 800c584:	e037      	b.n	800c5f6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c586:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c58a:	496d      	ldr	r1, [pc, #436]	; (800c740 <etharp_find_entry+0x2d4>)
 800c58c:	4613      	mov	r3, r2
 800c58e:	005b      	lsls	r3, r3, #1
 800c590:	4413      	add	r3, r2
 800c592:	00db      	lsls	r3, r3, #3
 800c594:	440b      	add	r3, r1
 800c596:	3312      	adds	r3, #18
 800c598:	881b      	ldrh	r3, [r3, #0]
 800c59a:	8b7a      	ldrh	r2, [r7, #26]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d82a      	bhi.n	800c5f6 <etharp_find_entry+0x18a>
            old_pending = i;
 800c5a0:	8c3b      	ldrh	r3, [r7, #32]
 800c5a2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c5a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5a8:	4965      	ldr	r1, [pc, #404]	; (800c740 <etharp_find_entry+0x2d4>)
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	005b      	lsls	r3, r3, #1
 800c5ae:	4413      	add	r3, r2
 800c5b0:	00db      	lsls	r3, r3, #3
 800c5b2:	440b      	add	r3, r1
 800c5b4:	3312      	adds	r3, #18
 800c5b6:	881b      	ldrh	r3, [r3, #0]
 800c5b8:	837b      	strh	r3, [r7, #26]
 800c5ba:	e01c      	b.n	800c5f6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c5bc:	7dfb      	ldrb	r3, [r7, #23]
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d919      	bls.n	800c5f6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c5c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5c6:	495e      	ldr	r1, [pc, #376]	; (800c740 <etharp_find_entry+0x2d4>)
 800c5c8:	4613      	mov	r3, r2
 800c5ca:	005b      	lsls	r3, r3, #1
 800c5cc:	4413      	add	r3, r2
 800c5ce:	00db      	lsls	r3, r3, #3
 800c5d0:	440b      	add	r3, r1
 800c5d2:	3312      	adds	r3, #18
 800c5d4:	881b      	ldrh	r3, [r3, #0]
 800c5d6:	8b3a      	ldrh	r2, [r7, #24]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d80c      	bhi.n	800c5f6 <etharp_find_entry+0x18a>
            old_stable = i;
 800c5dc:	8c3b      	ldrh	r3, [r7, #32]
 800c5de:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c5e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5e4:	4956      	ldr	r1, [pc, #344]	; (800c740 <etharp_find_entry+0x2d4>)
 800c5e6:	4613      	mov	r3, r2
 800c5e8:	005b      	lsls	r3, r3, #1
 800c5ea:	4413      	add	r3, r2
 800c5ec:	00db      	lsls	r3, r3, #3
 800c5ee:	440b      	add	r3, r1
 800c5f0:	3312      	adds	r3, #18
 800c5f2:	881b      	ldrh	r3, [r3, #0]
 800c5f4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c5f6:	8c3b      	ldrh	r3, [r7, #32]
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	843b      	strh	r3, [r7, #32]
 800c5fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c602:	2b09      	cmp	r3, #9
 800c604:	f77f af4c 	ble.w	800c4a0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c608:	7afb      	ldrb	r3, [r7, #11]
 800c60a:	f003 0302 	and.w	r3, r3, #2
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d108      	bne.n	800c624 <etharp_find_entry+0x1b8>
 800c612:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c616:	2b0a      	cmp	r3, #10
 800c618:	d107      	bne.n	800c62a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c61a:	7afb      	ldrb	r3, [r7, #11]
 800c61c:	f003 0301 	and.w	r3, r3, #1
 800c620:	2b00      	cmp	r3, #0
 800c622:	d102      	bne.n	800c62a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c624:	f04f 33ff 	mov.w	r3, #4294967295
 800c628:	e085      	b.n	800c736 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c62a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c62e:	2b09      	cmp	r3, #9
 800c630:	dc02      	bgt.n	800c638 <etharp_find_entry+0x1cc>
    i = empty;
 800c632:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c634:	843b      	strh	r3, [r7, #32]
 800c636:	e039      	b.n	800c6ac <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c638:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c63c:	2b09      	cmp	r3, #9
 800c63e:	dc14      	bgt.n	800c66a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c640:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c642:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c644:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c648:	493d      	ldr	r1, [pc, #244]	; (800c740 <etharp_find_entry+0x2d4>)
 800c64a:	4613      	mov	r3, r2
 800c64c:	005b      	lsls	r3, r3, #1
 800c64e:	4413      	add	r3, r2
 800c650:	00db      	lsls	r3, r3, #3
 800c652:	440b      	add	r3, r1
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d018      	beq.n	800c68c <etharp_find_entry+0x220>
 800c65a:	4b3a      	ldr	r3, [pc, #232]	; (800c744 <etharp_find_entry+0x2d8>)
 800c65c:	f240 126d 	movw	r2, #365	; 0x16d
 800c660:	493b      	ldr	r1, [pc, #236]	; (800c750 <etharp_find_entry+0x2e4>)
 800c662:	483a      	ldr	r0, [pc, #232]	; (800c74c <etharp_find_entry+0x2e0>)
 800c664:	f002 f952 	bl	800e90c <iprintf>
 800c668:	e010      	b.n	800c68c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c66a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c66e:	2b09      	cmp	r3, #9
 800c670:	dc02      	bgt.n	800c678 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c672:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c674:	843b      	strh	r3, [r7, #32]
 800c676:	e009      	b.n	800c68c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c678:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c67c:	2b09      	cmp	r3, #9
 800c67e:	dc02      	bgt.n	800c686 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c680:	8bfb      	ldrh	r3, [r7, #30]
 800c682:	843b      	strh	r3, [r7, #32]
 800c684:	e002      	b.n	800c68c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c686:	f04f 33ff 	mov.w	r3, #4294967295
 800c68a:	e054      	b.n	800c736 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c68c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c690:	2b09      	cmp	r3, #9
 800c692:	dd06      	ble.n	800c6a2 <etharp_find_entry+0x236>
 800c694:	4b2b      	ldr	r3, [pc, #172]	; (800c744 <etharp_find_entry+0x2d8>)
 800c696:	f240 127f 	movw	r2, #383	; 0x17f
 800c69a:	492e      	ldr	r1, [pc, #184]	; (800c754 <etharp_find_entry+0x2e8>)
 800c69c:	482b      	ldr	r0, [pc, #172]	; (800c74c <etharp_find_entry+0x2e0>)
 800c69e:	f002 f935 	bl	800e90c <iprintf>
    etharp_free_entry(i);
 800c6a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7ff fe06 	bl	800c2b8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c6ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c6b0:	2b09      	cmp	r3, #9
 800c6b2:	dd06      	ble.n	800c6c2 <etharp_find_entry+0x256>
 800c6b4:	4b23      	ldr	r3, [pc, #140]	; (800c744 <etharp_find_entry+0x2d8>)
 800c6b6:	f240 1283 	movw	r2, #387	; 0x183
 800c6ba:	4926      	ldr	r1, [pc, #152]	; (800c754 <etharp_find_entry+0x2e8>)
 800c6bc:	4823      	ldr	r0, [pc, #140]	; (800c74c <etharp_find_entry+0x2e0>)
 800c6be:	f002 f925 	bl	800e90c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c6c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c6c6:	491e      	ldr	r1, [pc, #120]	; (800c740 <etharp_find_entry+0x2d4>)
 800c6c8:	4613      	mov	r3, r2
 800c6ca:	005b      	lsls	r3, r3, #1
 800c6cc:	4413      	add	r3, r2
 800c6ce:	00db      	lsls	r3, r3, #3
 800c6d0:	440b      	add	r3, r1
 800c6d2:	3314      	adds	r3, #20
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d006      	beq.n	800c6e8 <etharp_find_entry+0x27c>
 800c6da:	4b1a      	ldr	r3, [pc, #104]	; (800c744 <etharp_find_entry+0x2d8>)
 800c6dc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c6e0:	491d      	ldr	r1, [pc, #116]	; (800c758 <etharp_find_entry+0x2ec>)
 800c6e2:	481a      	ldr	r0, [pc, #104]	; (800c74c <etharp_find_entry+0x2e0>)
 800c6e4:	f002 f912 	bl	800e90c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d00b      	beq.n	800c706 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c6ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	6819      	ldr	r1, [r3, #0]
 800c6f6:	4812      	ldr	r0, [pc, #72]	; (800c740 <etharp_find_entry+0x2d4>)
 800c6f8:	4613      	mov	r3, r2
 800c6fa:	005b      	lsls	r3, r3, #1
 800c6fc:	4413      	add	r3, r2
 800c6fe:	00db      	lsls	r3, r3, #3
 800c700:	4403      	add	r3, r0
 800c702:	3304      	adds	r3, #4
 800c704:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c706:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c70a:	490d      	ldr	r1, [pc, #52]	; (800c740 <etharp_find_entry+0x2d4>)
 800c70c:	4613      	mov	r3, r2
 800c70e:	005b      	lsls	r3, r3, #1
 800c710:	4413      	add	r3, r2
 800c712:	00db      	lsls	r3, r3, #3
 800c714:	440b      	add	r3, r1
 800c716:	3312      	adds	r3, #18
 800c718:	2200      	movs	r2, #0
 800c71a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c71c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c720:	4907      	ldr	r1, [pc, #28]	; (800c740 <etharp_find_entry+0x2d4>)
 800c722:	4613      	mov	r3, r2
 800c724:	005b      	lsls	r3, r3, #1
 800c726:	4413      	add	r3, r2
 800c728:	00db      	lsls	r3, r3, #3
 800c72a:	440b      	add	r3, r1
 800c72c:	3308      	adds	r3, #8
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c732:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c736:	4618      	mov	r0, r3
 800c738:	3728      	adds	r7, #40	; 0x28
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop
 800c740:	20008360 	.word	0x20008360
 800c744:	08012068 	.word	0x08012068
 800c748:	080120a0 	.word	0x080120a0
 800c74c:	080120e0 	.word	0x080120e0
 800c750:	08012108 	.word	0x08012108
 800c754:	08012120 	.word	0x08012120
 800c758:	08012134 	.word	0x08012134

0800c75c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b088      	sub	sp, #32
 800c760:	af02      	add	r7, sp, #8
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	60b9      	str	r1, [r7, #8]
 800c766:	607a      	str	r2, [r7, #4]
 800c768:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c770:	2b06      	cmp	r3, #6
 800c772:	d006      	beq.n	800c782 <etharp_update_arp_entry+0x26>
 800c774:	4b48      	ldr	r3, [pc, #288]	; (800c898 <etharp_update_arp_entry+0x13c>)
 800c776:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c77a:	4948      	ldr	r1, [pc, #288]	; (800c89c <etharp_update_arp_entry+0x140>)
 800c77c:	4848      	ldr	r0, [pc, #288]	; (800c8a0 <etharp_update_arp_entry+0x144>)
 800c77e:	f002 f8c5 	bl	800e90c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d012      	beq.n	800c7ae <etharp_update_arp_entry+0x52>
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d00e      	beq.n	800c7ae <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	68f9      	ldr	r1, [r7, #12]
 800c796:	4618      	mov	r0, r3
 800c798:	f001 f8fe 	bl	800d998 <ip4_addr_isbroadcast_u32>
 800c79c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d105      	bne.n	800c7ae <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c7aa:	2be0      	cmp	r3, #224	; 0xe0
 800c7ac:	d102      	bne.n	800c7b4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c7ae:	f06f 030f 	mvn.w	r3, #15
 800c7b2:	e06c      	b.n	800c88e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c7b4:	78fb      	ldrb	r3, [r7, #3]
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	68b8      	ldr	r0, [r7, #8]
 800c7bc:	f7ff fe56 	bl	800c46c <etharp_find_entry>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c7c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	da02      	bge.n	800c7d2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c7cc:	8afb      	ldrh	r3, [r7, #22]
 800c7ce:	b25b      	sxtb	r3, r3
 800c7d0:	e05d      	b.n	800c88e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c7d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c7d6:	4933      	ldr	r1, [pc, #204]	; (800c8a4 <etharp_update_arp_entry+0x148>)
 800c7d8:	4613      	mov	r3, r2
 800c7da:	005b      	lsls	r3, r3, #1
 800c7dc:	4413      	add	r3, r2
 800c7de:	00db      	lsls	r3, r3, #3
 800c7e0:	440b      	add	r3, r1
 800c7e2:	3314      	adds	r3, #20
 800c7e4:	2202      	movs	r2, #2
 800c7e6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c7e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c7ec:	492d      	ldr	r1, [pc, #180]	; (800c8a4 <etharp_update_arp_entry+0x148>)
 800c7ee:	4613      	mov	r3, r2
 800c7f0:	005b      	lsls	r3, r3, #1
 800c7f2:	4413      	add	r3, r2
 800c7f4:	00db      	lsls	r3, r3, #3
 800c7f6:	440b      	add	r3, r1
 800c7f8:	3308      	adds	r3, #8
 800c7fa:	68fa      	ldr	r2, [r7, #12]
 800c7fc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c7fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c802:	4613      	mov	r3, r2
 800c804:	005b      	lsls	r3, r3, #1
 800c806:	4413      	add	r3, r2
 800c808:	00db      	lsls	r3, r3, #3
 800c80a:	3308      	adds	r3, #8
 800c80c:	4a25      	ldr	r2, [pc, #148]	; (800c8a4 <etharp_update_arp_entry+0x148>)
 800c80e:	4413      	add	r3, r2
 800c810:	3304      	adds	r3, #4
 800c812:	2206      	movs	r2, #6
 800c814:	6879      	ldr	r1, [r7, #4]
 800c816:	4618      	mov	r0, r3
 800c818:	f002 f848 	bl	800e8ac <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c81c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c820:	4920      	ldr	r1, [pc, #128]	; (800c8a4 <etharp_update_arp_entry+0x148>)
 800c822:	4613      	mov	r3, r2
 800c824:	005b      	lsls	r3, r3, #1
 800c826:	4413      	add	r3, r2
 800c828:	00db      	lsls	r3, r3, #3
 800c82a:	440b      	add	r3, r1
 800c82c:	3312      	adds	r3, #18
 800c82e:	2200      	movs	r2, #0
 800c830:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c832:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c836:	491b      	ldr	r1, [pc, #108]	; (800c8a4 <etharp_update_arp_entry+0x148>)
 800c838:	4613      	mov	r3, r2
 800c83a:	005b      	lsls	r3, r3, #1
 800c83c:	4413      	add	r3, r2
 800c83e:	00db      	lsls	r3, r3, #3
 800c840:	440b      	add	r3, r1
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d021      	beq.n	800c88c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c848:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c84c:	4915      	ldr	r1, [pc, #84]	; (800c8a4 <etharp_update_arp_entry+0x148>)
 800c84e:	4613      	mov	r3, r2
 800c850:	005b      	lsls	r3, r3, #1
 800c852:	4413      	add	r3, r2
 800c854:	00db      	lsls	r3, r3, #3
 800c856:	440b      	add	r3, r1
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c85c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c860:	4910      	ldr	r1, [pc, #64]	; (800c8a4 <etharp_update_arp_entry+0x148>)
 800c862:	4613      	mov	r3, r2
 800c864:	005b      	lsls	r3, r3, #1
 800c866:	4413      	add	r3, r2
 800c868:	00db      	lsls	r3, r3, #3
 800c86a:	440b      	add	r3, r1
 800c86c:	2200      	movs	r2, #0
 800c86e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c876:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c87a:	9300      	str	r3, [sp, #0]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6939      	ldr	r1, [r7, #16]
 800c880:	68f8      	ldr	r0, [r7, #12]
 800c882:	f001 ff97 	bl	800e7b4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c886:	6938      	ldr	r0, [r7, #16]
 800c888:	f7f9 fe28 	bl	80064dc <pbuf_free>
  }
  return ERR_OK;
 800c88c:	2300      	movs	r3, #0
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3718      	adds	r7, #24
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	08012068 	.word	0x08012068
 800c89c:	08012160 	.word	0x08012160
 800c8a0:	080120e0 	.word	0x080120e0
 800c8a4:	20008360 	.word	0x20008360

0800c8a8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	60fb      	str	r3, [r7, #12]
 800c8b4:	e01e      	b.n	800c8f4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c8b6:	4913      	ldr	r1, [pc, #76]	; (800c904 <etharp_cleanup_netif+0x5c>)
 800c8b8:	68fa      	ldr	r2, [r7, #12]
 800c8ba:	4613      	mov	r3, r2
 800c8bc:	005b      	lsls	r3, r3, #1
 800c8be:	4413      	add	r3, r2
 800c8c0:	00db      	lsls	r3, r3, #3
 800c8c2:	440b      	add	r3, r1
 800c8c4:	3314      	adds	r3, #20
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c8ca:	7afb      	ldrb	r3, [r7, #11]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d00e      	beq.n	800c8ee <etharp_cleanup_netif+0x46>
 800c8d0:	490c      	ldr	r1, [pc, #48]	; (800c904 <etharp_cleanup_netif+0x5c>)
 800c8d2:	68fa      	ldr	r2, [r7, #12]
 800c8d4:	4613      	mov	r3, r2
 800c8d6:	005b      	lsls	r3, r3, #1
 800c8d8:	4413      	add	r3, r2
 800c8da:	00db      	lsls	r3, r3, #3
 800c8dc:	440b      	add	r3, r1
 800c8de:	3308      	adds	r3, #8
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d102      	bne.n	800c8ee <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c8e8:	68f8      	ldr	r0, [r7, #12]
 800c8ea:	f7ff fce5 	bl	800c2b8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	60fb      	str	r3, [r7, #12]
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2b09      	cmp	r3, #9
 800c8f8:	dddd      	ble.n	800c8b6 <etharp_cleanup_netif+0xe>
    }
  }
}
 800c8fa:	bf00      	nop
 800c8fc:	bf00      	nop
 800c8fe:	3710      	adds	r7, #16
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	20008360 	.word	0x20008360

0800c908 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c908:	b5b0      	push	{r4, r5, r7, lr}
 800c90a:	b08a      	sub	sp, #40	; 0x28
 800c90c:	af04      	add	r7, sp, #16
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d107      	bne.n	800c928 <etharp_input+0x20>
 800c918:	4b3d      	ldr	r3, [pc, #244]	; (800ca10 <etharp_input+0x108>)
 800c91a:	f240 228a 	movw	r2, #650	; 0x28a
 800c91e:	493d      	ldr	r1, [pc, #244]	; (800ca14 <etharp_input+0x10c>)
 800c920:	483d      	ldr	r0, [pc, #244]	; (800ca18 <etharp_input+0x110>)
 800c922:	f001 fff3 	bl	800e90c <iprintf>
 800c926:	e06f      	b.n	800ca08 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	881b      	ldrh	r3, [r3, #0]
 800c932:	b29b      	uxth	r3, r3
 800c934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c938:	d10c      	bne.n	800c954 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c93e:	2b06      	cmp	r3, #6
 800c940:	d108      	bne.n	800c954 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c946:	2b04      	cmp	r3, #4
 800c948:	d104      	bne.n	800c954 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	885b      	ldrh	r3, [r3, #2]
 800c94e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c950:	2b08      	cmp	r3, #8
 800c952:	d003      	beq.n	800c95c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f7f9 fdc1 	bl	80064dc <pbuf_free>
    return;
 800c95a:	e055      	b.n	800ca08 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	330e      	adds	r3, #14
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	3318      	adds	r3, #24
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	3304      	adds	r3, #4
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d102      	bne.n	800c97c <etharp_input+0x74>
    for_us = 0;
 800c976:	2300      	movs	r3, #0
 800c978:	75fb      	strb	r3, [r7, #23]
 800c97a:	e009      	b.n	800c990 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c97c:	68ba      	ldr	r2, [r7, #8]
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	3304      	adds	r3, #4
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	429a      	cmp	r2, r3
 800c986:	bf0c      	ite	eq
 800c988:	2301      	moveq	r3, #1
 800c98a:	2300      	movne	r3, #0
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	f103 0208 	add.w	r2, r3, #8
 800c996:	7dfb      	ldrb	r3, [r7, #23]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d001      	beq.n	800c9a0 <etharp_input+0x98>
 800c99c:	2301      	movs	r3, #1
 800c99e:	e000      	b.n	800c9a2 <etharp_input+0x9a>
 800c9a0:	2302      	movs	r3, #2
 800c9a2:	f107 010c 	add.w	r1, r7, #12
 800c9a6:	6838      	ldr	r0, [r7, #0]
 800c9a8:	f7ff fed8 	bl	800c75c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	88db      	ldrh	r3, [r3, #6]
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9b6:	d003      	beq.n	800c9c0 <etharp_input+0xb8>
 800c9b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9bc:	d01e      	beq.n	800c9fc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c9be:	e020      	b.n	800ca02 <etharp_input+0xfa>
      if (for_us) {
 800c9c0:	7dfb      	ldrb	r3, [r7, #23]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d01c      	beq.n	800ca00 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c9dc:	693a      	ldr	r2, [r7, #16]
 800c9de:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c9e0:	2102      	movs	r1, #2
 800c9e2:	9103      	str	r1, [sp, #12]
 800c9e4:	f107 010c 	add.w	r1, r7, #12
 800c9e8:	9102      	str	r1, [sp, #8]
 800c9ea:	9201      	str	r2, [sp, #4]
 800c9ec:	9300      	str	r3, [sp, #0]
 800c9ee:	462b      	mov	r3, r5
 800c9f0:	4622      	mov	r2, r4
 800c9f2:	4601      	mov	r1, r0
 800c9f4:	6838      	ldr	r0, [r7, #0]
 800c9f6:	f000 faeb 	bl	800cfd0 <etharp_raw>
      break;
 800c9fa:	e001      	b.n	800ca00 <etharp_input+0xf8>
      break;
 800c9fc:	bf00      	nop
 800c9fe:	e000      	b.n	800ca02 <etharp_input+0xfa>
      break;
 800ca00:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f7f9 fd6a 	bl	80064dc <pbuf_free>
}
 800ca08:	3718      	adds	r7, #24
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bdb0      	pop	{r4, r5, r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	08012068 	.word	0x08012068
 800ca14:	080121b8 	.word	0x080121b8
 800ca18:	080120e0 	.word	0x080120e0

0800ca1c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b086      	sub	sp, #24
 800ca20:	af02      	add	r7, sp, #8
 800ca22:	60f8      	str	r0, [r7, #12]
 800ca24:	60b9      	str	r1, [r7, #8]
 800ca26:	4613      	mov	r3, r2
 800ca28:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ca2a:	79fa      	ldrb	r2, [r7, #7]
 800ca2c:	4944      	ldr	r1, [pc, #272]	; (800cb40 <etharp_output_to_arp_index+0x124>)
 800ca2e:	4613      	mov	r3, r2
 800ca30:	005b      	lsls	r3, r3, #1
 800ca32:	4413      	add	r3, r2
 800ca34:	00db      	lsls	r3, r3, #3
 800ca36:	440b      	add	r3, r1
 800ca38:	3314      	adds	r3, #20
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d806      	bhi.n	800ca4e <etharp_output_to_arp_index+0x32>
 800ca40:	4b40      	ldr	r3, [pc, #256]	; (800cb44 <etharp_output_to_arp_index+0x128>)
 800ca42:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ca46:	4940      	ldr	r1, [pc, #256]	; (800cb48 <etharp_output_to_arp_index+0x12c>)
 800ca48:	4840      	ldr	r0, [pc, #256]	; (800cb4c <etharp_output_to_arp_index+0x130>)
 800ca4a:	f001 ff5f 	bl	800e90c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ca4e:	79fa      	ldrb	r2, [r7, #7]
 800ca50:	493b      	ldr	r1, [pc, #236]	; (800cb40 <etharp_output_to_arp_index+0x124>)
 800ca52:	4613      	mov	r3, r2
 800ca54:	005b      	lsls	r3, r3, #1
 800ca56:	4413      	add	r3, r2
 800ca58:	00db      	lsls	r3, r3, #3
 800ca5a:	440b      	add	r3, r1
 800ca5c:	3314      	adds	r3, #20
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	2b02      	cmp	r3, #2
 800ca62:	d153      	bne.n	800cb0c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800ca64:	79fa      	ldrb	r2, [r7, #7]
 800ca66:	4936      	ldr	r1, [pc, #216]	; (800cb40 <etharp_output_to_arp_index+0x124>)
 800ca68:	4613      	mov	r3, r2
 800ca6a:	005b      	lsls	r3, r3, #1
 800ca6c:	4413      	add	r3, r2
 800ca6e:	00db      	lsls	r3, r3, #3
 800ca70:	440b      	add	r3, r1
 800ca72:	3312      	adds	r3, #18
 800ca74:	881b      	ldrh	r3, [r3, #0]
 800ca76:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800ca7a:	d919      	bls.n	800cab0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800ca7c:	79fa      	ldrb	r2, [r7, #7]
 800ca7e:	4613      	mov	r3, r2
 800ca80:	005b      	lsls	r3, r3, #1
 800ca82:	4413      	add	r3, r2
 800ca84:	00db      	lsls	r3, r3, #3
 800ca86:	4a2e      	ldr	r2, [pc, #184]	; (800cb40 <etharp_output_to_arp_index+0x124>)
 800ca88:	4413      	add	r3, r2
 800ca8a:	3304      	adds	r3, #4
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	68f8      	ldr	r0, [r7, #12]
 800ca90:	f000 fb4c 	bl	800d12c <etharp_request>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d138      	bne.n	800cb0c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ca9a:	79fa      	ldrb	r2, [r7, #7]
 800ca9c:	4928      	ldr	r1, [pc, #160]	; (800cb40 <etharp_output_to_arp_index+0x124>)
 800ca9e:	4613      	mov	r3, r2
 800caa0:	005b      	lsls	r3, r3, #1
 800caa2:	4413      	add	r3, r2
 800caa4:	00db      	lsls	r3, r3, #3
 800caa6:	440b      	add	r3, r1
 800caa8:	3314      	adds	r3, #20
 800caaa:	2203      	movs	r2, #3
 800caac:	701a      	strb	r2, [r3, #0]
 800caae:	e02d      	b.n	800cb0c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800cab0:	79fa      	ldrb	r2, [r7, #7]
 800cab2:	4923      	ldr	r1, [pc, #140]	; (800cb40 <etharp_output_to_arp_index+0x124>)
 800cab4:	4613      	mov	r3, r2
 800cab6:	005b      	lsls	r3, r3, #1
 800cab8:	4413      	add	r3, r2
 800caba:	00db      	lsls	r3, r3, #3
 800cabc:	440b      	add	r3, r1
 800cabe:	3312      	adds	r3, #18
 800cac0:	881b      	ldrh	r3, [r3, #0]
 800cac2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800cac6:	d321      	bcc.n	800cb0c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cac8:	79fa      	ldrb	r2, [r7, #7]
 800caca:	4613      	mov	r3, r2
 800cacc:	005b      	lsls	r3, r3, #1
 800cace:	4413      	add	r3, r2
 800cad0:	00db      	lsls	r3, r3, #3
 800cad2:	4a1b      	ldr	r2, [pc, #108]	; (800cb40 <etharp_output_to_arp_index+0x124>)
 800cad4:	4413      	add	r3, r2
 800cad6:	1d19      	adds	r1, r3, #4
 800cad8:	79fa      	ldrb	r2, [r7, #7]
 800cada:	4613      	mov	r3, r2
 800cadc:	005b      	lsls	r3, r3, #1
 800cade:	4413      	add	r3, r2
 800cae0:	00db      	lsls	r3, r3, #3
 800cae2:	3308      	adds	r3, #8
 800cae4:	4a16      	ldr	r2, [pc, #88]	; (800cb40 <etharp_output_to_arp_index+0x124>)
 800cae6:	4413      	add	r3, r2
 800cae8:	3304      	adds	r3, #4
 800caea:	461a      	mov	r2, r3
 800caec:	68f8      	ldr	r0, [r7, #12]
 800caee:	f000 fafb 	bl	800d0e8 <etharp_request_dst>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d109      	bne.n	800cb0c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800caf8:	79fa      	ldrb	r2, [r7, #7]
 800cafa:	4911      	ldr	r1, [pc, #68]	; (800cb40 <etharp_output_to_arp_index+0x124>)
 800cafc:	4613      	mov	r3, r2
 800cafe:	005b      	lsls	r3, r3, #1
 800cb00:	4413      	add	r3, r2
 800cb02:	00db      	lsls	r3, r3, #3
 800cb04:	440b      	add	r3, r1
 800cb06:	3314      	adds	r3, #20
 800cb08:	2203      	movs	r2, #3
 800cb0a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800cb12:	79fa      	ldrb	r2, [r7, #7]
 800cb14:	4613      	mov	r3, r2
 800cb16:	005b      	lsls	r3, r3, #1
 800cb18:	4413      	add	r3, r2
 800cb1a:	00db      	lsls	r3, r3, #3
 800cb1c:	3308      	adds	r3, #8
 800cb1e:	4a08      	ldr	r2, [pc, #32]	; (800cb40 <etharp_output_to_arp_index+0x124>)
 800cb20:	4413      	add	r3, r2
 800cb22:	3304      	adds	r3, #4
 800cb24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cb28:	9200      	str	r2, [sp, #0]
 800cb2a:	460a      	mov	r2, r1
 800cb2c:	68b9      	ldr	r1, [r7, #8]
 800cb2e:	68f8      	ldr	r0, [r7, #12]
 800cb30:	f001 fe40 	bl	800e7b4 <ethernet_output>
 800cb34:	4603      	mov	r3, r0
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3710      	adds	r7, #16
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	20008360 	.word	0x20008360
 800cb44:	08012068 	.word	0x08012068
 800cb48:	080121d8 	.word	0x080121d8
 800cb4c:	080120e0 	.word	0x080120e0

0800cb50 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b08a      	sub	sp, #40	; 0x28
 800cb54:	af02      	add	r7, sp, #8
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d106      	bne.n	800cb74 <etharp_output+0x24>
 800cb66:	4b73      	ldr	r3, [pc, #460]	; (800cd34 <etharp_output+0x1e4>)
 800cb68:	f240 321e 	movw	r2, #798	; 0x31e
 800cb6c:	4972      	ldr	r1, [pc, #456]	; (800cd38 <etharp_output+0x1e8>)
 800cb6e:	4873      	ldr	r0, [pc, #460]	; (800cd3c <etharp_output+0x1ec>)
 800cb70:	f001 fecc 	bl	800e90c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d106      	bne.n	800cb88 <etharp_output+0x38>
 800cb7a:	4b6e      	ldr	r3, [pc, #440]	; (800cd34 <etharp_output+0x1e4>)
 800cb7c:	f240 321f 	movw	r2, #799	; 0x31f
 800cb80:	496f      	ldr	r1, [pc, #444]	; (800cd40 <etharp_output+0x1f0>)
 800cb82:	486e      	ldr	r0, [pc, #440]	; (800cd3c <etharp_output+0x1ec>)
 800cb84:	f001 fec2 	bl	800e90c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d106      	bne.n	800cb9c <etharp_output+0x4c>
 800cb8e:	4b69      	ldr	r3, [pc, #420]	; (800cd34 <etharp_output+0x1e4>)
 800cb90:	f44f 7248 	mov.w	r2, #800	; 0x320
 800cb94:	496b      	ldr	r1, [pc, #428]	; (800cd44 <etharp_output+0x1f4>)
 800cb96:	4869      	ldr	r0, [pc, #420]	; (800cd3c <etharp_output+0x1ec>)
 800cb98:	f001 feb8 	bl	800e90c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	68f9      	ldr	r1, [r7, #12]
 800cba2:	4618      	mov	r0, r3
 800cba4:	f000 fef8 	bl	800d998 <ip4_addr_isbroadcast_u32>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d002      	beq.n	800cbb4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800cbae:	4b66      	ldr	r3, [pc, #408]	; (800cd48 <etharp_output+0x1f8>)
 800cbb0:	61fb      	str	r3, [r7, #28]
 800cbb2:	e0af      	b.n	800cd14 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbbc:	2be0      	cmp	r3, #224	; 0xe0
 800cbbe:	d118      	bne.n	800cbf2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800cbc8:	235e      	movs	r3, #94	; 0x5e
 800cbca:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	3301      	adds	r3, #1
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	3302      	adds	r3, #2
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	3303      	adds	r3, #3
 800cbe6:	781b      	ldrb	r3, [r3, #0]
 800cbe8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800cbea:	f107 0310 	add.w	r3, r7, #16
 800cbee:	61fb      	str	r3, [r7, #28]
 800cbf0:	e090      	b.n	800cd14 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	3304      	adds	r3, #4
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	405a      	eors	r2, r3
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	3308      	adds	r3, #8
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4013      	ands	r3, r2
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d012      	beq.n	800cc30 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cc10:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d00b      	beq.n	800cc30 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	330c      	adds	r3, #12
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d003      	beq.n	800cc2a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	330c      	adds	r3, #12
 800cc26:	61bb      	str	r3, [r7, #24]
 800cc28:	e002      	b.n	800cc30 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800cc2a:	f06f 0303 	mvn.w	r3, #3
 800cc2e:	e07d      	b.n	800cd2c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cc30:	4b46      	ldr	r3, [pc, #280]	; (800cd4c <etharp_output+0x1fc>)
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	4619      	mov	r1, r3
 800cc36:	4a46      	ldr	r2, [pc, #280]	; (800cd50 <etharp_output+0x200>)
 800cc38:	460b      	mov	r3, r1
 800cc3a:	005b      	lsls	r3, r3, #1
 800cc3c:	440b      	add	r3, r1
 800cc3e:	00db      	lsls	r3, r3, #3
 800cc40:	4413      	add	r3, r2
 800cc42:	3314      	adds	r3, #20
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	d925      	bls.n	800cc96 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cc4a:	4b40      	ldr	r3, [pc, #256]	; (800cd4c <etharp_output+0x1fc>)
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	4619      	mov	r1, r3
 800cc50:	4a3f      	ldr	r2, [pc, #252]	; (800cd50 <etharp_output+0x200>)
 800cc52:	460b      	mov	r3, r1
 800cc54:	005b      	lsls	r3, r3, #1
 800cc56:	440b      	add	r3, r1
 800cc58:	00db      	lsls	r3, r3, #3
 800cc5a:	4413      	add	r3, r2
 800cc5c:	3308      	adds	r3, #8
 800cc5e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cc60:	68fa      	ldr	r2, [r7, #12]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d117      	bne.n	800cc96 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800cc66:	69bb      	ldr	r3, [r7, #24]
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	4b38      	ldr	r3, [pc, #224]	; (800cd4c <etharp_output+0x1fc>)
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	4618      	mov	r0, r3
 800cc70:	4937      	ldr	r1, [pc, #220]	; (800cd50 <etharp_output+0x200>)
 800cc72:	4603      	mov	r3, r0
 800cc74:	005b      	lsls	r3, r3, #1
 800cc76:	4403      	add	r3, r0
 800cc78:	00db      	lsls	r3, r3, #3
 800cc7a:	440b      	add	r3, r1
 800cc7c:	3304      	adds	r3, #4
 800cc7e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d108      	bne.n	800cc96 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cc84:	4b31      	ldr	r3, [pc, #196]	; (800cd4c <etharp_output+0x1fc>)
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	461a      	mov	r2, r3
 800cc8a:	68b9      	ldr	r1, [r7, #8]
 800cc8c:	68f8      	ldr	r0, [r7, #12]
 800cc8e:	f7ff fec5 	bl	800ca1c <etharp_output_to_arp_index>
 800cc92:	4603      	mov	r3, r0
 800cc94:	e04a      	b.n	800cd2c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cc96:	2300      	movs	r3, #0
 800cc98:	75fb      	strb	r3, [r7, #23]
 800cc9a:	e031      	b.n	800cd00 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cc9c:	7dfa      	ldrb	r2, [r7, #23]
 800cc9e:	492c      	ldr	r1, [pc, #176]	; (800cd50 <etharp_output+0x200>)
 800cca0:	4613      	mov	r3, r2
 800cca2:	005b      	lsls	r3, r3, #1
 800cca4:	4413      	add	r3, r2
 800cca6:	00db      	lsls	r3, r3, #3
 800cca8:	440b      	add	r3, r1
 800ccaa:	3314      	adds	r3, #20
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d923      	bls.n	800ccfa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800ccb2:	7dfa      	ldrb	r2, [r7, #23]
 800ccb4:	4926      	ldr	r1, [pc, #152]	; (800cd50 <etharp_output+0x200>)
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	005b      	lsls	r3, r3, #1
 800ccba:	4413      	add	r3, r2
 800ccbc:	00db      	lsls	r3, r3, #3
 800ccbe:	440b      	add	r3, r1
 800ccc0:	3308      	adds	r3, #8
 800ccc2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ccc4:	68fa      	ldr	r2, [r7, #12]
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d117      	bne.n	800ccfa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	6819      	ldr	r1, [r3, #0]
 800ccce:	7dfa      	ldrb	r2, [r7, #23]
 800ccd0:	481f      	ldr	r0, [pc, #124]	; (800cd50 <etharp_output+0x200>)
 800ccd2:	4613      	mov	r3, r2
 800ccd4:	005b      	lsls	r3, r3, #1
 800ccd6:	4413      	add	r3, r2
 800ccd8:	00db      	lsls	r3, r3, #3
 800ccda:	4403      	add	r3, r0
 800ccdc:	3304      	adds	r3, #4
 800ccde:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800cce0:	4299      	cmp	r1, r3
 800cce2:	d10a      	bne.n	800ccfa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800cce4:	4a19      	ldr	r2, [pc, #100]	; (800cd4c <etharp_output+0x1fc>)
 800cce6:	7dfb      	ldrb	r3, [r7, #23]
 800cce8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ccea:	7dfb      	ldrb	r3, [r7, #23]
 800ccec:	461a      	mov	r2, r3
 800ccee:	68b9      	ldr	r1, [r7, #8]
 800ccf0:	68f8      	ldr	r0, [r7, #12]
 800ccf2:	f7ff fe93 	bl	800ca1c <etharp_output_to_arp_index>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	e018      	b.n	800cd2c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ccfa:	7dfb      	ldrb	r3, [r7, #23]
 800ccfc:	3301      	adds	r3, #1
 800ccfe:	75fb      	strb	r3, [r7, #23]
 800cd00:	7dfb      	ldrb	r3, [r7, #23]
 800cd02:	2b09      	cmp	r3, #9
 800cd04:	d9ca      	bls.n	800cc9c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800cd06:	68ba      	ldr	r2, [r7, #8]
 800cd08:	69b9      	ldr	r1, [r7, #24]
 800cd0a:	68f8      	ldr	r0, [r7, #12]
 800cd0c:	f000 f822 	bl	800cd54 <etharp_query>
 800cd10:	4603      	mov	r3, r0
 800cd12:	e00b      	b.n	800cd2c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cd1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cd1e:	9300      	str	r3, [sp, #0]
 800cd20:	69fb      	ldr	r3, [r7, #28]
 800cd22:	68b9      	ldr	r1, [r7, #8]
 800cd24:	68f8      	ldr	r0, [r7, #12]
 800cd26:	f001 fd45 	bl	800e7b4 <ethernet_output>
 800cd2a:	4603      	mov	r3, r0
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3720      	adds	r7, #32
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}
 800cd34:	08012068 	.word	0x08012068
 800cd38:	080121b8 	.word	0x080121b8
 800cd3c:	080120e0 	.word	0x080120e0
 800cd40:	08012208 	.word	0x08012208
 800cd44:	080121a8 	.word	0x080121a8
 800cd48:	08012824 	.word	0x08012824
 800cd4c:	20008450 	.word	0x20008450
 800cd50:	20008360 	.word	0x20008360

0800cd54 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b08c      	sub	sp, #48	; 0x30
 800cd58:	af02      	add	r7, sp, #8
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	3326      	adds	r3, #38	; 0x26
 800cd64:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800cd66:	23ff      	movs	r3, #255	; 0xff
 800cd68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	68f9      	ldr	r1, [r7, #12]
 800cd76:	4618      	mov	r0, r3
 800cd78:	f000 fe0e 	bl	800d998 <ip4_addr_isbroadcast_u32>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d10c      	bne.n	800cd9c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cd8a:	2be0      	cmp	r3, #224	; 0xe0
 800cd8c:	d006      	beq.n	800cd9c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d003      	beq.n	800cd9c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d102      	bne.n	800cda2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cd9c:	f06f 030f 	mvn.w	r3, #15
 800cda0:	e101      	b.n	800cfa6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800cda2:	68fa      	ldr	r2, [r7, #12]
 800cda4:	2101      	movs	r1, #1
 800cda6:	68b8      	ldr	r0, [r7, #8]
 800cda8:	f7ff fb60 	bl	800c46c <etharp_find_entry>
 800cdac:	4603      	mov	r3, r0
 800cdae:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800cdb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	da02      	bge.n	800cdbe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800cdb8:	8a7b      	ldrh	r3, [r7, #18]
 800cdba:	b25b      	sxtb	r3, r3
 800cdbc:	e0f3      	b.n	800cfa6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800cdbe:	8a7b      	ldrh	r3, [r7, #18]
 800cdc0:	2b7e      	cmp	r3, #126	; 0x7e
 800cdc2:	d906      	bls.n	800cdd2 <etharp_query+0x7e>
 800cdc4:	4b7a      	ldr	r3, [pc, #488]	; (800cfb0 <etharp_query+0x25c>)
 800cdc6:	f240 32c1 	movw	r2, #961	; 0x3c1
 800cdca:	497a      	ldr	r1, [pc, #488]	; (800cfb4 <etharp_query+0x260>)
 800cdcc:	487a      	ldr	r0, [pc, #488]	; (800cfb8 <etharp_query+0x264>)
 800cdce:	f001 fd9d 	bl	800e90c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800cdd2:	8a7b      	ldrh	r3, [r7, #18]
 800cdd4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800cdd6:	7c7a      	ldrb	r2, [r7, #17]
 800cdd8:	4978      	ldr	r1, [pc, #480]	; (800cfbc <etharp_query+0x268>)
 800cdda:	4613      	mov	r3, r2
 800cddc:	005b      	lsls	r3, r3, #1
 800cdde:	4413      	add	r3, r2
 800cde0:	00db      	lsls	r3, r3, #3
 800cde2:	440b      	add	r3, r1
 800cde4:	3314      	adds	r3, #20
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d115      	bne.n	800ce18 <etharp_query+0xc4>
    is_new_entry = 1;
 800cdec:	2301      	movs	r3, #1
 800cdee:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800cdf0:	7c7a      	ldrb	r2, [r7, #17]
 800cdf2:	4972      	ldr	r1, [pc, #456]	; (800cfbc <etharp_query+0x268>)
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	005b      	lsls	r3, r3, #1
 800cdf8:	4413      	add	r3, r2
 800cdfa:	00db      	lsls	r3, r3, #3
 800cdfc:	440b      	add	r3, r1
 800cdfe:	3314      	adds	r3, #20
 800ce00:	2201      	movs	r2, #1
 800ce02:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ce04:	7c7a      	ldrb	r2, [r7, #17]
 800ce06:	496d      	ldr	r1, [pc, #436]	; (800cfbc <etharp_query+0x268>)
 800ce08:	4613      	mov	r3, r2
 800ce0a:	005b      	lsls	r3, r3, #1
 800ce0c:	4413      	add	r3, r2
 800ce0e:	00db      	lsls	r3, r3, #3
 800ce10:	440b      	add	r3, r1
 800ce12:	3308      	adds	r3, #8
 800ce14:	68fa      	ldr	r2, [r7, #12]
 800ce16:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ce18:	7c7a      	ldrb	r2, [r7, #17]
 800ce1a:	4968      	ldr	r1, [pc, #416]	; (800cfbc <etharp_query+0x268>)
 800ce1c:	4613      	mov	r3, r2
 800ce1e:	005b      	lsls	r3, r3, #1
 800ce20:	4413      	add	r3, r2
 800ce22:	00db      	lsls	r3, r3, #3
 800ce24:	440b      	add	r3, r1
 800ce26:	3314      	adds	r3, #20
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	2b01      	cmp	r3, #1
 800ce2c:	d011      	beq.n	800ce52 <etharp_query+0xfe>
 800ce2e:	7c7a      	ldrb	r2, [r7, #17]
 800ce30:	4962      	ldr	r1, [pc, #392]	; (800cfbc <etharp_query+0x268>)
 800ce32:	4613      	mov	r3, r2
 800ce34:	005b      	lsls	r3, r3, #1
 800ce36:	4413      	add	r3, r2
 800ce38:	00db      	lsls	r3, r3, #3
 800ce3a:	440b      	add	r3, r1
 800ce3c:	3314      	adds	r3, #20
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	d806      	bhi.n	800ce52 <etharp_query+0xfe>
 800ce44:	4b5a      	ldr	r3, [pc, #360]	; (800cfb0 <etharp_query+0x25c>)
 800ce46:	f240 32cd 	movw	r2, #973	; 0x3cd
 800ce4a:	495d      	ldr	r1, [pc, #372]	; (800cfc0 <etharp_query+0x26c>)
 800ce4c:	485a      	ldr	r0, [pc, #360]	; (800cfb8 <etharp_query+0x264>)
 800ce4e:	f001 fd5d 	bl	800e90c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ce52:	6a3b      	ldr	r3, [r7, #32]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d102      	bne.n	800ce5e <etharp_query+0x10a>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d10c      	bne.n	800ce78 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ce5e:	68b9      	ldr	r1, [r7, #8]
 800ce60:	68f8      	ldr	r0, [r7, #12]
 800ce62:	f000 f963 	bl	800d12c <etharp_request>
 800ce66:	4603      	mov	r3, r0
 800ce68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d102      	bne.n	800ce78 <etharp_query+0x124>
      return result;
 800ce72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ce76:	e096      	b.n	800cfa6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d106      	bne.n	800ce8c <etharp_query+0x138>
 800ce7e:	4b4c      	ldr	r3, [pc, #304]	; (800cfb0 <etharp_query+0x25c>)
 800ce80:	f240 32e1 	movw	r2, #993	; 0x3e1
 800ce84:	494f      	ldr	r1, [pc, #316]	; (800cfc4 <etharp_query+0x270>)
 800ce86:	484c      	ldr	r0, [pc, #304]	; (800cfb8 <etharp_query+0x264>)
 800ce88:	f001 fd40 	bl	800e90c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ce8c:	7c7a      	ldrb	r2, [r7, #17]
 800ce8e:	494b      	ldr	r1, [pc, #300]	; (800cfbc <etharp_query+0x268>)
 800ce90:	4613      	mov	r3, r2
 800ce92:	005b      	lsls	r3, r3, #1
 800ce94:	4413      	add	r3, r2
 800ce96:	00db      	lsls	r3, r3, #3
 800ce98:	440b      	add	r3, r1
 800ce9a:	3314      	adds	r3, #20
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	2b01      	cmp	r3, #1
 800cea0:	d917      	bls.n	800ced2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800cea2:	4a49      	ldr	r2, [pc, #292]	; (800cfc8 <etharp_query+0x274>)
 800cea4:	7c7b      	ldrb	r3, [r7, #17]
 800cea6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cea8:	7c7a      	ldrb	r2, [r7, #17]
 800ceaa:	4613      	mov	r3, r2
 800ceac:	005b      	lsls	r3, r3, #1
 800ceae:	4413      	add	r3, r2
 800ceb0:	00db      	lsls	r3, r3, #3
 800ceb2:	3308      	adds	r3, #8
 800ceb4:	4a41      	ldr	r2, [pc, #260]	; (800cfbc <etharp_query+0x268>)
 800ceb6:	4413      	add	r3, r2
 800ceb8:	3304      	adds	r3, #4
 800ceba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cebe:	9200      	str	r2, [sp, #0]
 800cec0:	697a      	ldr	r2, [r7, #20]
 800cec2:	6879      	ldr	r1, [r7, #4]
 800cec4:	68f8      	ldr	r0, [r7, #12]
 800cec6:	f001 fc75 	bl	800e7b4 <ethernet_output>
 800ceca:	4603      	mov	r3, r0
 800cecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ced0:	e067      	b.n	800cfa2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ced2:	7c7a      	ldrb	r2, [r7, #17]
 800ced4:	4939      	ldr	r1, [pc, #228]	; (800cfbc <etharp_query+0x268>)
 800ced6:	4613      	mov	r3, r2
 800ced8:	005b      	lsls	r3, r3, #1
 800ceda:	4413      	add	r3, r2
 800cedc:	00db      	lsls	r3, r3, #3
 800cede:	440b      	add	r3, r1
 800cee0:	3314      	adds	r3, #20
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	d15c      	bne.n	800cfa2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800cee8:	2300      	movs	r3, #0
 800ceea:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cef0:	e01c      	b.n	800cf2c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cef2:	69fb      	ldr	r3, [r7, #28]
 800cef4:	895a      	ldrh	r2, [r3, #10]
 800cef6:	69fb      	ldr	r3, [r7, #28]
 800cef8:	891b      	ldrh	r3, [r3, #8]
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d10a      	bne.n	800cf14 <etharp_query+0x1c0>
 800cefe:	69fb      	ldr	r3, [r7, #28]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d006      	beq.n	800cf14 <etharp_query+0x1c0>
 800cf06:	4b2a      	ldr	r3, [pc, #168]	; (800cfb0 <etharp_query+0x25c>)
 800cf08:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800cf0c:	492f      	ldr	r1, [pc, #188]	; (800cfcc <etharp_query+0x278>)
 800cf0e:	482a      	ldr	r0, [pc, #168]	; (800cfb8 <etharp_query+0x264>)
 800cf10:	f001 fcfc 	bl	800e90c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800cf14:	69fb      	ldr	r3, [r7, #28]
 800cf16:	7b1b      	ldrb	r3, [r3, #12]
 800cf18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d002      	beq.n	800cf26 <etharp_query+0x1d2>
        copy_needed = 1;
 800cf20:	2301      	movs	r3, #1
 800cf22:	61bb      	str	r3, [r7, #24]
        break;
 800cf24:	e005      	b.n	800cf32 <etharp_query+0x1de>
      }
      p = p->next;
 800cf26:	69fb      	ldr	r3, [r7, #28]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cf2c:	69fb      	ldr	r3, [r7, #28]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d1df      	bne.n	800cef2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800cf32:	69bb      	ldr	r3, [r7, #24]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d007      	beq.n	800cf48 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800cf3e:	200e      	movs	r0, #14
 800cf40:	f7f9 fd28 	bl	8006994 <pbuf_clone>
 800cf44:	61f8      	str	r0, [r7, #28]
 800cf46:	e004      	b.n	800cf52 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800cf4c:	69f8      	ldr	r0, [r7, #28]
 800cf4e:	f7f9 fb65 	bl	800661c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800cf52:	69fb      	ldr	r3, [r7, #28]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d021      	beq.n	800cf9c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800cf58:	7c7a      	ldrb	r2, [r7, #17]
 800cf5a:	4918      	ldr	r1, [pc, #96]	; (800cfbc <etharp_query+0x268>)
 800cf5c:	4613      	mov	r3, r2
 800cf5e:	005b      	lsls	r3, r3, #1
 800cf60:	4413      	add	r3, r2
 800cf62:	00db      	lsls	r3, r3, #3
 800cf64:	440b      	add	r3, r1
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d00a      	beq.n	800cf82 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800cf6c:	7c7a      	ldrb	r2, [r7, #17]
 800cf6e:	4913      	ldr	r1, [pc, #76]	; (800cfbc <etharp_query+0x268>)
 800cf70:	4613      	mov	r3, r2
 800cf72:	005b      	lsls	r3, r3, #1
 800cf74:	4413      	add	r3, r2
 800cf76:	00db      	lsls	r3, r3, #3
 800cf78:	440b      	add	r3, r1
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7f9 faad 	bl	80064dc <pbuf_free>
      }
      arp_table[i].q = p;
 800cf82:	7c7a      	ldrb	r2, [r7, #17]
 800cf84:	490d      	ldr	r1, [pc, #52]	; (800cfbc <etharp_query+0x268>)
 800cf86:	4613      	mov	r3, r2
 800cf88:	005b      	lsls	r3, r3, #1
 800cf8a:	4413      	add	r3, r2
 800cf8c:	00db      	lsls	r3, r3, #3
 800cf8e:	440b      	add	r3, r1
 800cf90:	69fa      	ldr	r2, [r7, #28]
 800cf92:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800cf94:	2300      	movs	r3, #0
 800cf96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf9a:	e002      	b.n	800cfa2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800cf9c:	23ff      	movs	r3, #255	; 0xff
 800cf9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800cfa2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3728      	adds	r7, #40	; 0x28
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}
 800cfae:	bf00      	nop
 800cfb0:	08012068 	.word	0x08012068
 800cfb4:	08012214 	.word	0x08012214
 800cfb8:	080120e0 	.word	0x080120e0
 800cfbc:	20008360 	.word	0x20008360
 800cfc0:	08012224 	.word	0x08012224
 800cfc4:	08012208 	.word	0x08012208
 800cfc8:	20008450 	.word	0x20008450
 800cfcc:	0801224c 	.word	0x0801224c

0800cfd0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b08a      	sub	sp, #40	; 0x28
 800cfd4:	af02      	add	r7, sp, #8
 800cfd6:	60f8      	str	r0, [r7, #12]
 800cfd8:	60b9      	str	r1, [r7, #8]
 800cfda:	607a      	str	r2, [r7, #4]
 800cfdc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d106      	bne.n	800cff6 <etharp_raw+0x26>
 800cfe8:	4b3a      	ldr	r3, [pc, #232]	; (800d0d4 <etharp_raw+0x104>)
 800cfea:	f240 4257 	movw	r2, #1111	; 0x457
 800cfee:	493a      	ldr	r1, [pc, #232]	; (800d0d8 <etharp_raw+0x108>)
 800cff0:	483a      	ldr	r0, [pc, #232]	; (800d0dc <etharp_raw+0x10c>)
 800cff2:	f001 fc8b 	bl	800e90c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800cff6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cffa:	211c      	movs	r1, #28
 800cffc:	200e      	movs	r0, #14
 800cffe:	f7f8 ff89 	bl	8005f14 <pbuf_alloc>
 800d002:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d004:	69bb      	ldr	r3, [r7, #24]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d102      	bne.n	800d010 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d00a:	f04f 33ff 	mov.w	r3, #4294967295
 800d00e:	e05d      	b.n	800d0cc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d010:	69bb      	ldr	r3, [r7, #24]
 800d012:	895b      	ldrh	r3, [r3, #10]
 800d014:	2b1b      	cmp	r3, #27
 800d016:	d806      	bhi.n	800d026 <etharp_raw+0x56>
 800d018:	4b2e      	ldr	r3, [pc, #184]	; (800d0d4 <etharp_raw+0x104>)
 800d01a:	f240 4262 	movw	r2, #1122	; 0x462
 800d01e:	4930      	ldr	r1, [pc, #192]	; (800d0e0 <etharp_raw+0x110>)
 800d020:	482e      	ldr	r0, [pc, #184]	; (800d0dc <etharp_raw+0x10c>)
 800d022:	f001 fc73 	bl	800e90c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d026:	69bb      	ldr	r3, [r7, #24]
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d02c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d02e:	4618      	mov	r0, r3
 800d030:	f7f7 fef6 	bl	8004e20 <lwip_htons>
 800d034:	4603      	mov	r3, r0
 800d036:	461a      	mov	r2, r3
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d042:	2b06      	cmp	r3, #6
 800d044:	d006      	beq.n	800d054 <etharp_raw+0x84>
 800d046:	4b23      	ldr	r3, [pc, #140]	; (800d0d4 <etharp_raw+0x104>)
 800d048:	f240 4269 	movw	r2, #1129	; 0x469
 800d04c:	4925      	ldr	r1, [pc, #148]	; (800d0e4 <etharp_raw+0x114>)
 800d04e:	4823      	ldr	r0, [pc, #140]	; (800d0dc <etharp_raw+0x10c>)
 800d050:	f001 fc5c 	bl	800e90c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	3308      	adds	r3, #8
 800d058:	2206      	movs	r2, #6
 800d05a:	6839      	ldr	r1, [r7, #0]
 800d05c:	4618      	mov	r0, r3
 800d05e:	f001 fc25 	bl	800e8ac <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	3312      	adds	r3, #18
 800d066:	2206      	movs	r2, #6
 800d068:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d06a:	4618      	mov	r0, r3
 800d06c:	f001 fc1e 	bl	800e8ac <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	330e      	adds	r3, #14
 800d074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d076:	6812      	ldr	r2, [r2, #0]
 800d078:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	3318      	adds	r3, #24
 800d07e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d080:	6812      	ldr	r2, [r2, #0]
 800d082:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	2200      	movs	r2, #0
 800d088:	701a      	strb	r2, [r3, #0]
 800d08a:	2200      	movs	r2, #0
 800d08c:	f042 0201 	orr.w	r2, r2, #1
 800d090:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	2200      	movs	r2, #0
 800d096:	f042 0208 	orr.w	r2, r2, #8
 800d09a:	709a      	strb	r2, [r3, #2]
 800d09c:	2200      	movs	r2, #0
 800d09e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	2206      	movs	r2, #6
 800d0a4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	2204      	movs	r2, #4
 800d0aa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d0ac:	f640 0306 	movw	r3, #2054	; 0x806
 800d0b0:	9300      	str	r3, [sp, #0]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	68ba      	ldr	r2, [r7, #8]
 800d0b6:	69b9      	ldr	r1, [r7, #24]
 800d0b8:	68f8      	ldr	r0, [r7, #12]
 800d0ba:	f001 fb7b 	bl	800e7b4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d0be:	69b8      	ldr	r0, [r7, #24]
 800d0c0:	f7f9 fa0c 	bl	80064dc <pbuf_free>
  p = NULL;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d0c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3720      	adds	r7, #32
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	08012068 	.word	0x08012068
 800d0d8:	080121b8 	.word	0x080121b8
 800d0dc:	080120e0 	.word	0x080120e0
 800d0e0:	08012268 	.word	0x08012268
 800d0e4:	0801229c 	.word	0x0801229c

0800d0e8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b088      	sub	sp, #32
 800d0ec:	af04      	add	r7, sp, #16
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d104:	2201      	movs	r2, #1
 800d106:	9203      	str	r2, [sp, #12]
 800d108:	68ba      	ldr	r2, [r7, #8]
 800d10a:	9202      	str	r2, [sp, #8]
 800d10c:	4a06      	ldr	r2, [pc, #24]	; (800d128 <etharp_request_dst+0x40>)
 800d10e:	9201      	str	r2, [sp, #4]
 800d110:	9300      	str	r3, [sp, #0]
 800d112:	4603      	mov	r3, r0
 800d114:	687a      	ldr	r2, [r7, #4]
 800d116:	68f8      	ldr	r0, [r7, #12]
 800d118:	f7ff ff5a 	bl	800cfd0 <etharp_raw>
 800d11c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3710      	adds	r7, #16
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	0801282c 	.word	0x0801282c

0800d12c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d136:	4a05      	ldr	r2, [pc, #20]	; (800d14c <etharp_request+0x20>)
 800d138:	6839      	ldr	r1, [r7, #0]
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f7ff ffd4 	bl	800d0e8 <etharp_request_dst>
 800d140:	4603      	mov	r3, r0
}
 800d142:	4618      	mov	r0, r3
 800d144:	3708      	adds	r7, #8
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop
 800d14c:	08012824 	.word	0x08012824

0800d150 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b08e      	sub	sp, #56	; 0x38
 800d154:	af04      	add	r7, sp, #16
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d15a:	4b79      	ldr	r3, [pc, #484]	; (800d340 <icmp_input+0x1f0>)
 800d15c:	689b      	ldr	r3, [r3, #8]
 800d15e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	f003 030f 	and.w	r3, r3, #15
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	009b      	lsls	r3, r3, #2
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d170:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d172:	2b13      	cmp	r3, #19
 800d174:	f240 80cd 	bls.w	800d312 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	895b      	ldrh	r3, [r3, #10]
 800d17c:	2b03      	cmp	r3, #3
 800d17e:	f240 80ca 	bls.w	800d316 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d18c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d190:	2b00      	cmp	r3, #0
 800d192:	f000 80b7 	beq.w	800d304 <icmp_input+0x1b4>
 800d196:	2b08      	cmp	r3, #8
 800d198:	f040 80b7 	bne.w	800d30a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d19c:	4b69      	ldr	r3, [pc, #420]	; (800d344 <icmp_input+0x1f4>)
 800d19e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d1a0:	4b67      	ldr	r3, [pc, #412]	; (800d340 <icmp_input+0x1f0>)
 800d1a2:	695b      	ldr	r3, [r3, #20]
 800d1a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d1a8:	2be0      	cmp	r3, #224	; 0xe0
 800d1aa:	f000 80bb 	beq.w	800d324 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d1ae:	4b64      	ldr	r3, [pc, #400]	; (800d340 <icmp_input+0x1f0>)
 800d1b0:	695b      	ldr	r3, [r3, #20]
 800d1b2:	4a63      	ldr	r2, [pc, #396]	; (800d340 <icmp_input+0x1f0>)
 800d1b4:	6812      	ldr	r2, [r2, #0]
 800d1b6:	4611      	mov	r1, r2
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f000 fbed 	bl	800d998 <ip4_addr_isbroadcast_u32>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	f040 80b1 	bne.w	800d328 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	891b      	ldrh	r3, [r3, #8]
 800d1ca:	2b07      	cmp	r3, #7
 800d1cc:	f240 80a5 	bls.w	800d31a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d1d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d1d2:	330e      	adds	r3, #14
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f7f9 f8ea 	bl	80063b0 <pbuf_add_header>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d04b      	beq.n	800d27a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	891a      	ldrh	r2, [r3, #8]
 800d1e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d1e8:	4413      	add	r3, r2
 800d1ea:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	891b      	ldrh	r3, [r3, #8]
 800d1f0:	8b7a      	ldrh	r2, [r7, #26]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	f0c0 809a 	bcc.w	800d32c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d1f8:	8b7b      	ldrh	r3, [r7, #26]
 800d1fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d1fe:	4619      	mov	r1, r3
 800d200:	200e      	movs	r0, #14
 800d202:	f7f8 fe87 	bl	8005f14 <pbuf_alloc>
 800d206:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	f000 8090 	beq.w	800d330 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	895b      	ldrh	r3, [r3, #10]
 800d214:	461a      	mov	r2, r3
 800d216:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d218:	3308      	adds	r3, #8
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d203      	bcs.n	800d226 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d21e:	6978      	ldr	r0, [r7, #20]
 800d220:	f7f9 f95c 	bl	80064dc <pbuf_free>
          goto icmperr;
 800d224:	e085      	b.n	800d332 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d22c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d22e:	4618      	mov	r0, r3
 800d230:	f001 fb3c 	bl	800e8ac <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d234:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d236:	4619      	mov	r1, r3
 800d238:	6978      	ldr	r0, [r7, #20]
 800d23a:	f7f9 f8c9 	bl	80063d0 <pbuf_remove_header>
 800d23e:	4603      	mov	r3, r0
 800d240:	2b00      	cmp	r3, #0
 800d242:	d009      	beq.n	800d258 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d244:	4b40      	ldr	r3, [pc, #256]	; (800d348 <icmp_input+0x1f8>)
 800d246:	22b6      	movs	r2, #182	; 0xb6
 800d248:	4940      	ldr	r1, [pc, #256]	; (800d34c <icmp_input+0x1fc>)
 800d24a:	4841      	ldr	r0, [pc, #260]	; (800d350 <icmp_input+0x200>)
 800d24c:	f001 fb5e 	bl	800e90c <iprintf>
          pbuf_free(r);
 800d250:	6978      	ldr	r0, [r7, #20]
 800d252:	f7f9 f943 	bl	80064dc <pbuf_free>
          goto icmperr;
 800d256:	e06c      	b.n	800d332 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d258:	6879      	ldr	r1, [r7, #4]
 800d25a:	6978      	ldr	r0, [r7, #20]
 800d25c:	f7f9 fa56 	bl	800670c <pbuf_copy>
 800d260:	4603      	mov	r3, r0
 800d262:	2b00      	cmp	r3, #0
 800d264:	d003      	beq.n	800d26e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d266:	6978      	ldr	r0, [r7, #20]
 800d268:	f7f9 f938 	bl	80064dc <pbuf_free>
          goto icmperr;
 800d26c:	e061      	b.n	800d332 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f7f9 f934 	bl	80064dc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	607b      	str	r3, [r7, #4]
 800d278:	e00f      	b.n	800d29a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d27a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d27c:	330e      	adds	r3, #14
 800d27e:	4619      	mov	r1, r3
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f7f9 f8a5 	bl	80063d0 <pbuf_remove_header>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d006      	beq.n	800d29a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d28c:	4b2e      	ldr	r3, [pc, #184]	; (800d348 <icmp_input+0x1f8>)
 800d28e:	22c7      	movs	r2, #199	; 0xc7
 800d290:	4930      	ldr	r1, [pc, #192]	; (800d354 <icmp_input+0x204>)
 800d292:	482f      	ldr	r0, [pc, #188]	; (800d350 <icmp_input+0x200>)
 800d294:	f001 fb3a 	bl	800e90c <iprintf>
          goto icmperr;
 800d298:	e04b      	b.n	800d332 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d2a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f7f9 f883 	bl	80063b0 <pbuf_add_header>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d12b      	bne.n	800d308 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d2b6:	69fb      	ldr	r3, [r7, #28]
 800d2b8:	681a      	ldr	r2, [r3, #0]
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d2be:	4b20      	ldr	r3, [pc, #128]	; (800d340 <icmp_input+0x1f0>)
 800d2c0:	691a      	ldr	r2, [r3, #16]
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	709a      	strb	r2, [r3, #2]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	22ff      	movs	r2, #255	; 0xff
 800d2da:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	729a      	strb	r2, [r3, #10]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	9302      	str	r3, [sp, #8]
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	9301      	str	r3, [sp, #4]
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	9300      	str	r3, [sp, #0]
 800d2f2:	23ff      	movs	r3, #255	; 0xff
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	69f9      	ldr	r1, [r7, #28]
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f000 fa75 	bl	800d7e8 <ip4_output_if>
 800d2fe:	4603      	mov	r3, r0
 800d300:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d302:	e001      	b.n	800d308 <icmp_input+0x1b8>
      break;
 800d304:	bf00      	nop
 800d306:	e000      	b.n	800d30a <icmp_input+0x1ba>
      break;
 800d308:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f7f9 f8e6 	bl	80064dc <pbuf_free>
  return;
 800d310:	e013      	b.n	800d33a <icmp_input+0x1ea>
    goto lenerr;
 800d312:	bf00      	nop
 800d314:	e002      	b.n	800d31c <icmp_input+0x1cc>
    goto lenerr;
 800d316:	bf00      	nop
 800d318:	e000      	b.n	800d31c <icmp_input+0x1cc>
        goto lenerr;
 800d31a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f7f9 f8dd 	bl	80064dc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d322:	e00a      	b.n	800d33a <icmp_input+0x1ea>
        goto icmperr;
 800d324:	bf00      	nop
 800d326:	e004      	b.n	800d332 <icmp_input+0x1e2>
        goto icmperr;
 800d328:	bf00      	nop
 800d32a:	e002      	b.n	800d332 <icmp_input+0x1e2>
          goto icmperr;
 800d32c:	bf00      	nop
 800d32e:	e000      	b.n	800d332 <icmp_input+0x1e2>
          goto icmperr;
 800d330:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f7f9 f8d2 	bl	80064dc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d338:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d33a:	3728      	adds	r7, #40	; 0x28
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	20004d90 	.word	0x20004d90
 800d344:	20004da4 	.word	0x20004da4
 800d348:	080122e0 	.word	0x080122e0
 800d34c:	08012318 	.word	0x08012318
 800d350:	08012350 	.word	0x08012350
 800d354:	08012378 	.word	0x08012378

0800d358 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	460b      	mov	r3, r1
 800d362:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d364:	78fb      	ldrb	r3, [r7, #3]
 800d366:	461a      	mov	r2, r3
 800d368:	2103      	movs	r1, #3
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 f814 	bl	800d398 <icmp_send_response>
}
 800d370:	bf00      	nop
 800d372:	3708      	adds	r7, #8
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	460b      	mov	r3, r1
 800d382:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d384:	78fb      	ldrb	r3, [r7, #3]
 800d386:	461a      	mov	r2, r3
 800d388:	210b      	movs	r1, #11
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 f804 	bl	800d398 <icmp_send_response>
}
 800d390:	bf00      	nop
 800d392:	3708      	adds	r7, #8
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}

0800d398 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b08c      	sub	sp, #48	; 0x30
 800d39c:	af04      	add	r7, sp, #16
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	460b      	mov	r3, r1
 800d3a2:	70fb      	strb	r3, [r7, #3]
 800d3a4:	4613      	mov	r3, r2
 800d3a6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d3a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d3ac:	2124      	movs	r1, #36	; 0x24
 800d3ae:	2022      	movs	r0, #34	; 0x22
 800d3b0:	f7f8 fdb0 	bl	8005f14 <pbuf_alloc>
 800d3b4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d3b6:	69fb      	ldr	r3, [r7, #28]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d04c      	beq.n	800d456 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	895b      	ldrh	r3, [r3, #10]
 800d3c0:	2b23      	cmp	r3, #35	; 0x23
 800d3c2:	d806      	bhi.n	800d3d2 <icmp_send_response+0x3a>
 800d3c4:	4b26      	ldr	r3, [pc, #152]	; (800d460 <icmp_send_response+0xc8>)
 800d3c6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d3ca:	4926      	ldr	r1, [pc, #152]	; (800d464 <icmp_send_response+0xcc>)
 800d3cc:	4826      	ldr	r0, [pc, #152]	; (800d468 <icmp_send_response+0xd0>)
 800d3ce:	f001 fa9d 	bl	800e90c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d3d8:	69fb      	ldr	r3, [r7, #28]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	78fa      	ldrb	r2, [r7, #3]
 800d3e2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	78ba      	ldrb	r2, [r7, #2]
 800d3e8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	711a      	strb	r2, [r3, #4]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	719a      	strb	r2, [r3, #6]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d3fe:	69fb      	ldr	r3, [r7, #28]
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	f103 0008 	add.w	r0, r3, #8
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	221c      	movs	r2, #28
 800d40c:	4619      	mov	r1, r3
 800d40e:	f001 fa4d 	bl	800e8ac <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d412:	69bb      	ldr	r3, [r7, #24]
 800d414:	68db      	ldr	r3, [r3, #12]
 800d416:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d418:	f107 030c 	add.w	r3, r7, #12
 800d41c:	4618      	mov	r0, r3
 800d41e:	f000 f825 	bl	800d46c <ip4_route>
 800d422:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d011      	beq.n	800d44e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	2200      	movs	r2, #0
 800d42e:	709a      	strb	r2, [r3, #2]
 800d430:	2200      	movs	r2, #0
 800d432:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d434:	f107 020c 	add.w	r2, r7, #12
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	9302      	str	r3, [sp, #8]
 800d43c:	2301      	movs	r3, #1
 800d43e:	9301      	str	r3, [sp, #4]
 800d440:	2300      	movs	r3, #0
 800d442:	9300      	str	r3, [sp, #0]
 800d444:	23ff      	movs	r3, #255	; 0xff
 800d446:	2100      	movs	r1, #0
 800d448:	69f8      	ldr	r0, [r7, #28]
 800d44a:	f000 f9cd 	bl	800d7e8 <ip4_output_if>
  }
  pbuf_free(q);
 800d44e:	69f8      	ldr	r0, [r7, #28]
 800d450:	f7f9 f844 	bl	80064dc <pbuf_free>
 800d454:	e000      	b.n	800d458 <icmp_send_response+0xc0>
    return;
 800d456:	bf00      	nop
}
 800d458:	3720      	adds	r7, #32
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	080122e0 	.word	0x080122e0
 800d464:	080123ac 	.word	0x080123ac
 800d468:	08012350 	.word	0x08012350

0800d46c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d46c:	b480      	push	{r7}
 800d46e:	b085      	sub	sp, #20
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d474:	4b33      	ldr	r3, [pc, #204]	; (800d544 <ip4_route+0xd8>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	60fb      	str	r3, [r7, #12]
 800d47a:	e036      	b.n	800d4ea <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d482:	f003 0301 	and.w	r3, r3, #1
 800d486:	b2db      	uxtb	r3, r3
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d02b      	beq.n	800d4e4 <ip4_route+0x78>
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d492:	089b      	lsrs	r3, r3, #2
 800d494:	f003 0301 	and.w	r3, r3, #1
 800d498:	b2db      	uxtb	r3, r3
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d022      	beq.n	800d4e4 <ip4_route+0x78>
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	3304      	adds	r3, #4
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d01d      	beq.n	800d4e4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681a      	ldr	r2, [r3, #0]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	3304      	adds	r3, #4
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	405a      	eors	r2, r3
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	3308      	adds	r3, #8
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	4013      	ands	r3, r2
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d101      	bne.n	800d4c4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	e038      	b.n	800d536 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4ca:	f003 0302 	and.w	r3, r3, #2
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d108      	bne.n	800d4e4 <ip4_route+0x78>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681a      	ldr	r2, [r3, #0]
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	330c      	adds	r3, #12
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d101      	bne.n	800d4e4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	e028      	b.n	800d536 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	60fb      	str	r3, [r7, #12]
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d1c5      	bne.n	800d47c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d4f0:	4b15      	ldr	r3, [pc, #84]	; (800d548 <ip4_route+0xdc>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d01a      	beq.n	800d52e <ip4_route+0xc2>
 800d4f8:	4b13      	ldr	r3, [pc, #76]	; (800d548 <ip4_route+0xdc>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d500:	f003 0301 	and.w	r3, r3, #1
 800d504:	2b00      	cmp	r3, #0
 800d506:	d012      	beq.n	800d52e <ip4_route+0xc2>
 800d508:	4b0f      	ldr	r3, [pc, #60]	; (800d548 <ip4_route+0xdc>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d510:	f003 0304 	and.w	r3, r3, #4
 800d514:	2b00      	cmp	r3, #0
 800d516:	d00a      	beq.n	800d52e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d518:	4b0b      	ldr	r3, [pc, #44]	; (800d548 <ip4_route+0xdc>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	3304      	adds	r3, #4
 800d51e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d520:	2b00      	cmp	r3, #0
 800d522:	d004      	beq.n	800d52e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	2b7f      	cmp	r3, #127	; 0x7f
 800d52c:	d101      	bne.n	800d532 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d52e:	2300      	movs	r3, #0
 800d530:	e001      	b.n	800d536 <ip4_route+0xca>
  }

  return netif_default;
 800d532:	4b05      	ldr	r3, [pc, #20]	; (800d548 <ip4_route+0xdc>)
 800d534:	681b      	ldr	r3, [r3, #0]
}
 800d536:	4618      	mov	r0, r3
 800d538:	3714      	adds	r7, #20
 800d53a:	46bd      	mov	sp, r7
 800d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d540:	4770      	bx	lr
 800d542:	bf00      	nop
 800d544:	200082f4 	.word	0x200082f4
 800d548:	200082f8 	.word	0x200082f8

0800d54c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d55a:	f003 0301 	and.w	r3, r3, #1
 800d55e:	b2db      	uxtb	r3, r3
 800d560:	2b00      	cmp	r3, #0
 800d562:	d016      	beq.n	800d592 <ip4_input_accept+0x46>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	3304      	adds	r3, #4
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d011      	beq.n	800d592 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d56e:	4b0b      	ldr	r3, [pc, #44]	; (800d59c <ip4_input_accept+0x50>)
 800d570:	695a      	ldr	r2, [r3, #20]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	3304      	adds	r3, #4
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	429a      	cmp	r2, r3
 800d57a:	d008      	beq.n	800d58e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d57c:	4b07      	ldr	r3, [pc, #28]	; (800d59c <ip4_input_accept+0x50>)
 800d57e:	695b      	ldr	r3, [r3, #20]
 800d580:	6879      	ldr	r1, [r7, #4]
 800d582:	4618      	mov	r0, r3
 800d584:	f000 fa08 	bl	800d998 <ip4_addr_isbroadcast_u32>
 800d588:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d001      	beq.n	800d592 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d58e:	2301      	movs	r3, #1
 800d590:	e000      	b.n	800d594 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d592:	2300      	movs	r3, #0
}
 800d594:	4618      	mov	r0, r3
 800d596:	3708      	adds	r7, #8
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}
 800d59c:	20004d90 	.word	0x20004d90

0800d5a0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b086      	sub	sp, #24
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	685b      	ldr	r3, [r3, #4]
 800d5ae:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	781b      	ldrb	r3, [r3, #0]
 800d5b4:	091b      	lsrs	r3, r3, #4
 800d5b6:	b2db      	uxtb	r3, r3
 800d5b8:	2b04      	cmp	r3, #4
 800d5ba:	d004      	beq.n	800d5c6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f7f8 ff8d 	bl	80064dc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	e107      	b.n	800d7d6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	f003 030f 	and.w	r3, r3, #15
 800d5ce:	b2db      	uxtb	r3, r3
 800d5d0:	009b      	lsls	r3, r3, #2
 800d5d2:	b2db      	uxtb	r3, r3
 800d5d4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	885b      	ldrh	r3, [r3, #2]
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7f7 fc1f 	bl	8004e20 <lwip_htons>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	891b      	ldrh	r3, [r3, #8]
 800d5ea:	89ba      	ldrh	r2, [r7, #12]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d204      	bcs.n	800d5fa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d5f0:	89bb      	ldrh	r3, [r7, #12]
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f7f8 fdeb 	bl	80061d0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	895b      	ldrh	r3, [r3, #10]
 800d5fe:	89fa      	ldrh	r2, [r7, #14]
 800d600:	429a      	cmp	r2, r3
 800d602:	d807      	bhi.n	800d614 <ip4_input+0x74>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	891b      	ldrh	r3, [r3, #8]
 800d608:	89ba      	ldrh	r2, [r7, #12]
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d802      	bhi.n	800d614 <ip4_input+0x74>
 800d60e:	89fb      	ldrh	r3, [r7, #14]
 800d610:	2b13      	cmp	r3, #19
 800d612:	d804      	bhi.n	800d61e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f7f8 ff61 	bl	80064dc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d61a:	2300      	movs	r3, #0
 800d61c:	e0db      	b.n	800d7d6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	691b      	ldr	r3, [r3, #16]
 800d622:	4a6f      	ldr	r2, [pc, #444]	; (800d7e0 <ip4_input+0x240>)
 800d624:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	4a6d      	ldr	r2, [pc, #436]	; (800d7e0 <ip4_input+0x240>)
 800d62c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d62e:	4b6c      	ldr	r3, [pc, #432]	; (800d7e0 <ip4_input+0x240>)
 800d630:	695b      	ldr	r3, [r3, #20]
 800d632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d636:	2be0      	cmp	r3, #224	; 0xe0
 800d638:	d112      	bne.n	800d660 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d640:	f003 0301 	and.w	r3, r3, #1
 800d644:	b2db      	uxtb	r3, r3
 800d646:	2b00      	cmp	r3, #0
 800d648:	d007      	beq.n	800d65a <ip4_input+0xba>
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	3304      	adds	r3, #4
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d002      	beq.n	800d65a <ip4_input+0xba>
      netif = inp;
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	613b      	str	r3, [r7, #16]
 800d658:	e02a      	b.n	800d6b0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d65a:	2300      	movs	r3, #0
 800d65c:	613b      	str	r3, [r7, #16]
 800d65e:	e027      	b.n	800d6b0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d660:	6838      	ldr	r0, [r7, #0]
 800d662:	f7ff ff73 	bl	800d54c <ip4_input_accept>
 800d666:	4603      	mov	r3, r0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d002      	beq.n	800d672 <ip4_input+0xd2>
      netif = inp;
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	613b      	str	r3, [r7, #16]
 800d670:	e01e      	b.n	800d6b0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d672:	2300      	movs	r3, #0
 800d674:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d676:	4b5a      	ldr	r3, [pc, #360]	; (800d7e0 <ip4_input+0x240>)
 800d678:	695b      	ldr	r3, [r3, #20]
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	2b7f      	cmp	r3, #127	; 0x7f
 800d67e:	d017      	beq.n	800d6b0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d680:	4b58      	ldr	r3, [pc, #352]	; (800d7e4 <ip4_input+0x244>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	613b      	str	r3, [r7, #16]
 800d686:	e00e      	b.n	800d6a6 <ip4_input+0x106>
          if (netif == inp) {
 800d688:	693a      	ldr	r2, [r7, #16]
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d006      	beq.n	800d69e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d690:	6938      	ldr	r0, [r7, #16]
 800d692:	f7ff ff5b 	bl	800d54c <ip4_input_accept>
 800d696:	4603      	mov	r3, r0
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d108      	bne.n	800d6ae <ip4_input+0x10e>
 800d69c:	e000      	b.n	800d6a0 <ip4_input+0x100>
            continue;
 800d69e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	613b      	str	r3, [r7, #16]
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d1ed      	bne.n	800d688 <ip4_input+0xe8>
 800d6ac:	e000      	b.n	800d6b0 <ip4_input+0x110>
            break;
 800d6ae:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d6b0:	4b4b      	ldr	r3, [pc, #300]	; (800d7e0 <ip4_input+0x240>)
 800d6b2:	691b      	ldr	r3, [r3, #16]
 800d6b4:	6839      	ldr	r1, [r7, #0]
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f000 f96e 	bl	800d998 <ip4_addr_isbroadcast_u32>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d105      	bne.n	800d6ce <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d6c2:	4b47      	ldr	r3, [pc, #284]	; (800d7e0 <ip4_input+0x240>)
 800d6c4:	691b      	ldr	r3, [r3, #16]
 800d6c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d6ca:	2be0      	cmp	r3, #224	; 0xe0
 800d6cc:	d104      	bne.n	800d6d8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f7f8 ff04 	bl	80064dc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	e07e      	b.n	800d7d6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d104      	bne.n	800d6e8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f7f8 fefc 	bl	80064dc <pbuf_free>
    return ERR_OK;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	e076      	b.n	800d7d6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	88db      	ldrh	r3, [r3, #6]
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d6f4:	4013      	ands	r3, r2
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d00b      	beq.n	800d712 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 fc92 	bl	800e024 <ip4_reass>
 800d700:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d101      	bne.n	800d70c <ip4_input+0x16c>
      return ERR_OK;
 800d708:	2300      	movs	r3, #0
 800d70a:	e064      	b.n	800d7d6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	685b      	ldr	r3, [r3, #4]
 800d710:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d712:	4a33      	ldr	r2, [pc, #204]	; (800d7e0 <ip4_input+0x240>)
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d718:	4a31      	ldr	r2, [pc, #196]	; (800d7e0 <ip4_input+0x240>)
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d71e:	4a30      	ldr	r2, [pc, #192]	; (800d7e0 <ip4_input+0x240>)
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	781b      	ldrb	r3, [r3, #0]
 800d728:	f003 030f 	and.w	r3, r3, #15
 800d72c:	b2db      	uxtb	r3, r3
 800d72e:	009b      	lsls	r3, r3, #2
 800d730:	b2db      	uxtb	r3, r3
 800d732:	b29a      	uxth	r2, r3
 800d734:	4b2a      	ldr	r3, [pc, #168]	; (800d7e0 <ip4_input+0x240>)
 800d736:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d738:	89fb      	ldrh	r3, [r7, #14]
 800d73a:	4619      	mov	r1, r3
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f7f8 fe47 	bl	80063d0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	7a5b      	ldrb	r3, [r3, #9]
 800d746:	2b11      	cmp	r3, #17
 800d748:	d006      	beq.n	800d758 <ip4_input+0x1b8>
 800d74a:	2b11      	cmp	r3, #17
 800d74c:	dc13      	bgt.n	800d776 <ip4_input+0x1d6>
 800d74e:	2b01      	cmp	r3, #1
 800d750:	d00c      	beq.n	800d76c <ip4_input+0x1cc>
 800d752:	2b06      	cmp	r3, #6
 800d754:	d005      	beq.n	800d762 <ip4_input+0x1c2>
 800d756:	e00e      	b.n	800d776 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d758:	6839      	ldr	r1, [r7, #0]
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f7fe fc68 	bl	800c030 <udp_input>
        break;
 800d760:	e026      	b.n	800d7b0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d762:	6839      	ldr	r1, [r7, #0]
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f7fa fce1 	bl	800812c <tcp_input>
        break;
 800d76a:	e021      	b.n	800d7b0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d76c:	6839      	ldr	r1, [r7, #0]
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f7ff fcee 	bl	800d150 <icmp_input>
        break;
 800d774:	e01c      	b.n	800d7b0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d776:	4b1a      	ldr	r3, [pc, #104]	; (800d7e0 <ip4_input+0x240>)
 800d778:	695b      	ldr	r3, [r3, #20]
 800d77a:	6939      	ldr	r1, [r7, #16]
 800d77c:	4618      	mov	r0, r3
 800d77e:	f000 f90b 	bl	800d998 <ip4_addr_isbroadcast_u32>
 800d782:	4603      	mov	r3, r0
 800d784:	2b00      	cmp	r3, #0
 800d786:	d10f      	bne.n	800d7a8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d788:	4b15      	ldr	r3, [pc, #84]	; (800d7e0 <ip4_input+0x240>)
 800d78a:	695b      	ldr	r3, [r3, #20]
 800d78c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d790:	2be0      	cmp	r3, #224	; 0xe0
 800d792:	d009      	beq.n	800d7a8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d794:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d798:	4619      	mov	r1, r3
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f7f8 fe8b 	bl	80064b6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d7a0:	2102      	movs	r1, #2
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f7ff fdd8 	bl	800d358 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f7f8 fe97 	bl	80064dc <pbuf_free>
        break;
 800d7ae:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d7b0:	4b0b      	ldr	r3, [pc, #44]	; (800d7e0 <ip4_input+0x240>)
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d7b6:	4b0a      	ldr	r3, [pc, #40]	; (800d7e0 <ip4_input+0x240>)
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d7bc:	4b08      	ldr	r3, [pc, #32]	; (800d7e0 <ip4_input+0x240>)
 800d7be:	2200      	movs	r2, #0
 800d7c0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d7c2:	4b07      	ldr	r3, [pc, #28]	; (800d7e0 <ip4_input+0x240>)
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d7c8:	4b05      	ldr	r3, [pc, #20]	; (800d7e0 <ip4_input+0x240>)
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d7ce:	4b04      	ldr	r3, [pc, #16]	; (800d7e0 <ip4_input+0x240>)
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d7d4:	2300      	movs	r3, #0
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3718      	adds	r7, #24
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}
 800d7de:	bf00      	nop
 800d7e0:	20004d90 	.word	0x20004d90
 800d7e4:	200082f4 	.word	0x200082f4

0800d7e8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b08a      	sub	sp, #40	; 0x28
 800d7ec:	af04      	add	r7, sp, #16
 800d7ee:	60f8      	str	r0, [r7, #12]
 800d7f0:	60b9      	str	r1, [r7, #8]
 800d7f2:	607a      	str	r2, [r7, #4]
 800d7f4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d009      	beq.n	800d814 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d003      	beq.n	800d80e <ip4_output_if+0x26>
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d102      	bne.n	800d814 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d810:	3304      	adds	r3, #4
 800d812:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d814:	78fa      	ldrb	r2, [r7, #3]
 800d816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d818:	9302      	str	r3, [sp, #8]
 800d81a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d81e:	9301      	str	r3, [sp, #4]
 800d820:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d824:	9300      	str	r3, [sp, #0]
 800d826:	4613      	mov	r3, r2
 800d828:	687a      	ldr	r2, [r7, #4]
 800d82a:	6979      	ldr	r1, [r7, #20]
 800d82c:	68f8      	ldr	r0, [r7, #12]
 800d82e:	f000 f805 	bl	800d83c <ip4_output_if_src>
 800d832:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d834:	4618      	mov	r0, r3
 800d836:	3718      	adds	r7, #24
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}

0800d83c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b088      	sub	sp, #32
 800d840:	af00      	add	r7, sp, #0
 800d842:	60f8      	str	r0, [r7, #12]
 800d844:	60b9      	str	r1, [r7, #8]
 800d846:	607a      	str	r2, [r7, #4]
 800d848:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	7b9b      	ldrb	r3, [r3, #14]
 800d84e:	2b01      	cmp	r3, #1
 800d850:	d006      	beq.n	800d860 <ip4_output_if_src+0x24>
 800d852:	4b4b      	ldr	r3, [pc, #300]	; (800d980 <ip4_output_if_src+0x144>)
 800d854:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d858:	494a      	ldr	r1, [pc, #296]	; (800d984 <ip4_output_if_src+0x148>)
 800d85a:	484b      	ldr	r0, [pc, #300]	; (800d988 <ip4_output_if_src+0x14c>)
 800d85c:	f001 f856 	bl	800e90c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d060      	beq.n	800d928 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d866:	2314      	movs	r3, #20
 800d868:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d86a:	2114      	movs	r1, #20
 800d86c:	68f8      	ldr	r0, [r7, #12]
 800d86e:	f7f8 fd9f 	bl	80063b0 <pbuf_add_header>
 800d872:	4603      	mov	r3, r0
 800d874:	2b00      	cmp	r3, #0
 800d876:	d002      	beq.n	800d87e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d878:	f06f 0301 	mvn.w	r3, #1
 800d87c:	e07c      	b.n	800d978 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	895b      	ldrh	r3, [r3, #10]
 800d888:	2b13      	cmp	r3, #19
 800d88a:	d806      	bhi.n	800d89a <ip4_output_if_src+0x5e>
 800d88c:	4b3c      	ldr	r3, [pc, #240]	; (800d980 <ip4_output_if_src+0x144>)
 800d88e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d892:	493e      	ldr	r1, [pc, #248]	; (800d98c <ip4_output_if_src+0x150>)
 800d894:	483c      	ldr	r0, [pc, #240]	; (800d988 <ip4_output_if_src+0x14c>)
 800d896:	f001 f839 	bl	800e90c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d89a:	69fb      	ldr	r3, [r7, #28]
 800d89c:	78fa      	ldrb	r2, [r7, #3]
 800d89e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d8a0:	69fb      	ldr	r3, [r7, #28]
 800d8a2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d8a6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681a      	ldr	r2, [r3, #0]
 800d8ac:	69fb      	ldr	r3, [r7, #28]
 800d8ae:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d8b0:	8b7b      	ldrh	r3, [r7, #26]
 800d8b2:	089b      	lsrs	r3, r3, #2
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	b2db      	uxtb	r3, r3
 800d8b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8bc:	b2da      	uxtb	r2, r3
 800d8be:	69fb      	ldr	r3, [r7, #28]
 800d8c0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d8c2:	69fb      	ldr	r3, [r7, #28]
 800d8c4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d8c8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	891b      	ldrh	r3, [r3, #8]
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7f7 faa6 	bl	8004e20 <lwip_htons>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	69fb      	ldr	r3, [r7, #28]
 800d8da:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d8dc:	69fb      	ldr	r3, [r7, #28]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	719a      	strb	r2, [r3, #6]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d8e6:	4b2a      	ldr	r3, [pc, #168]	; (800d990 <ip4_output_if_src+0x154>)
 800d8e8:	881b      	ldrh	r3, [r3, #0]
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7f7 fa98 	bl	8004e20 <lwip_htons>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	69fb      	ldr	r3, [r7, #28]
 800d8f6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d8f8:	4b25      	ldr	r3, [pc, #148]	; (800d990 <ip4_output_if_src+0x154>)
 800d8fa:	881b      	ldrh	r3, [r3, #0]
 800d8fc:	3301      	adds	r3, #1
 800d8fe:	b29a      	uxth	r2, r3
 800d900:	4b23      	ldr	r3, [pc, #140]	; (800d990 <ip4_output_if_src+0x154>)
 800d902:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d104      	bne.n	800d914 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d90a:	4b22      	ldr	r3, [pc, #136]	; (800d994 <ip4_output_if_src+0x158>)
 800d90c:	681a      	ldr	r2, [r3, #0]
 800d90e:	69fb      	ldr	r3, [r7, #28]
 800d910:	60da      	str	r2, [r3, #12]
 800d912:	e003      	b.n	800d91c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	681a      	ldr	r2, [r3, #0]
 800d918:	69fb      	ldr	r3, [r7, #28]
 800d91a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	2200      	movs	r2, #0
 800d920:	729a      	strb	r2, [r3, #10]
 800d922:	2200      	movs	r2, #0
 800d924:	72da      	strb	r2, [r3, #11]
 800d926:	e00f      	b.n	800d948 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	895b      	ldrh	r3, [r3, #10]
 800d92c:	2b13      	cmp	r3, #19
 800d92e:	d802      	bhi.n	800d936 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d930:	f06f 0301 	mvn.w	r3, #1
 800d934:	e020      	b.n	800d978 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d93c:	69fb      	ldr	r3, [r7, #28]
 800d93e:	691b      	ldr	r3, [r3, #16]
 800d940:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d942:	f107 0314 	add.w	r3, r7, #20
 800d946:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d00c      	beq.n	800d96a <ip4_output_if_src+0x12e>
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	891a      	ldrh	r2, [r3, #8]
 800d954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d956:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d958:	429a      	cmp	r2, r3
 800d95a:	d906      	bls.n	800d96a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d95c:	687a      	ldr	r2, [r7, #4]
 800d95e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d960:	68f8      	ldr	r0, [r7, #12]
 800d962:	f000 fd53 	bl	800e40c <ip4_frag>
 800d966:	4603      	mov	r3, r0
 800d968:	e006      	b.n	800d978 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96c:	695b      	ldr	r3, [r3, #20]
 800d96e:	687a      	ldr	r2, [r7, #4]
 800d970:	68f9      	ldr	r1, [r7, #12]
 800d972:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d974:	4798      	blx	r3
 800d976:	4603      	mov	r3, r0
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3720      	adds	r7, #32
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	080123d8 	.word	0x080123d8
 800d984:	0801240c 	.word	0x0801240c
 800d988:	08012418 	.word	0x08012418
 800d98c:	08012440 	.word	0x08012440
 800d990:	20008452 	.word	0x20008452
 800d994:	08012820 	.word	0x08012820

0800d998 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d998:	b480      	push	{r7}
 800d99a:	b085      	sub	sp, #20
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ac:	d002      	beq.n	800d9b4 <ip4_addr_isbroadcast_u32+0x1c>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d101      	bne.n	800d9b8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	e02a      	b.n	800da0e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d9be:	f003 0302 	and.w	r3, r3, #2
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d101      	bne.n	800d9ca <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	e021      	b.n	800da0e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	3304      	adds	r3, #4
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	687a      	ldr	r2, [r7, #4]
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d101      	bne.n	800d9da <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	e019      	b.n	800da0e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d9da:	68fa      	ldr	r2, [r7, #12]
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	3304      	adds	r3, #4
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	405a      	eors	r2, r3
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	3308      	adds	r3, #8
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	4013      	ands	r3, r2
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d10d      	bne.n	800da0c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	3308      	adds	r3, #8
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	43da      	mvns	r2, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	3308      	adds	r3, #8
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800da04:	429a      	cmp	r2, r3
 800da06:	d101      	bne.n	800da0c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800da08:	2301      	movs	r3, #1
 800da0a:	e000      	b.n	800da0e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800da0c:	2300      	movs	r3, #0
  }
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3714      	adds	r7, #20
 800da12:	46bd      	mov	sp, r7
 800da14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da18:	4770      	bx	lr
	...

0800da1c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b084      	sub	sp, #16
 800da20:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800da22:	2300      	movs	r3, #0
 800da24:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800da26:	4b12      	ldr	r3, [pc, #72]	; (800da70 <ip_reass_tmr+0x54>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800da2c:	e018      	b.n	800da60 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	7fdb      	ldrb	r3, [r3, #31]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d00b      	beq.n	800da4e <ip_reass_tmr+0x32>
      r->timer--;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	7fdb      	ldrb	r3, [r3, #31]
 800da3a:	3b01      	subs	r3, #1
 800da3c:	b2da      	uxtb	r2, r3
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	60fb      	str	r3, [r7, #12]
 800da4c:	e008      	b.n	800da60 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800da58:	68b9      	ldr	r1, [r7, #8]
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 f80a 	bl	800da74 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d1e3      	bne.n	800da2e <ip_reass_tmr+0x12>
    }
  }
}
 800da66:	bf00      	nop
 800da68:	bf00      	nop
 800da6a:	3710      	adds	r7, #16
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}
 800da70:	20008454 	.word	0x20008454

0800da74 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b088      	sub	sp, #32
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800da7e:	2300      	movs	r3, #0
 800da80:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800da82:	683a      	ldr	r2, [r7, #0]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	429a      	cmp	r2, r3
 800da88:	d105      	bne.n	800da96 <ip_reass_free_complete_datagram+0x22>
 800da8a:	4b45      	ldr	r3, [pc, #276]	; (800dba0 <ip_reass_free_complete_datagram+0x12c>)
 800da8c:	22ab      	movs	r2, #171	; 0xab
 800da8e:	4945      	ldr	r1, [pc, #276]	; (800dba4 <ip_reass_free_complete_datagram+0x130>)
 800da90:	4845      	ldr	r0, [pc, #276]	; (800dba8 <ip_reass_free_complete_datagram+0x134>)
 800da92:	f000 ff3b 	bl	800e90c <iprintf>
  if (prev != NULL) {
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d00a      	beq.n	800dab2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d005      	beq.n	800dab2 <ip_reass_free_complete_datagram+0x3e>
 800daa6:	4b3e      	ldr	r3, [pc, #248]	; (800dba0 <ip_reass_free_complete_datagram+0x12c>)
 800daa8:	22ad      	movs	r2, #173	; 0xad
 800daaa:	4940      	ldr	r1, [pc, #256]	; (800dbac <ip_reass_free_complete_datagram+0x138>)
 800daac:	483e      	ldr	r0, [pc, #248]	; (800dba8 <ip_reass_free_complete_datagram+0x134>)
 800daae:	f000 ff2d 	bl	800e90c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	685b      	ldr	r3, [r3, #4]
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	889b      	ldrh	r3, [r3, #4]
 800dabe:	b29b      	uxth	r3, r3
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d12a      	bne.n	800db1a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800dad2:	69bb      	ldr	r3, [r7, #24]
 800dad4:	6858      	ldr	r0, [r3, #4]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	3308      	adds	r3, #8
 800dada:	2214      	movs	r2, #20
 800dadc:	4619      	mov	r1, r3
 800dade:	f000 fee5 	bl	800e8ac <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800dae2:	2101      	movs	r1, #1
 800dae4:	69b8      	ldr	r0, [r7, #24]
 800dae6:	f7ff fc47 	bl	800d378 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800daea:	69b8      	ldr	r0, [r7, #24]
 800daec:	f7f8 fd7e 	bl	80065ec <pbuf_clen>
 800daf0:	4603      	mov	r3, r0
 800daf2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800daf4:	8bfa      	ldrh	r2, [r7, #30]
 800daf6:	8a7b      	ldrh	r3, [r7, #18]
 800daf8:	4413      	add	r3, r2
 800dafa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dafe:	db05      	blt.n	800db0c <ip_reass_free_complete_datagram+0x98>
 800db00:	4b27      	ldr	r3, [pc, #156]	; (800dba0 <ip_reass_free_complete_datagram+0x12c>)
 800db02:	22bc      	movs	r2, #188	; 0xbc
 800db04:	492a      	ldr	r1, [pc, #168]	; (800dbb0 <ip_reass_free_complete_datagram+0x13c>)
 800db06:	4828      	ldr	r0, [pc, #160]	; (800dba8 <ip_reass_free_complete_datagram+0x134>)
 800db08:	f000 ff00 	bl	800e90c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800db0c:	8bfa      	ldrh	r2, [r7, #30]
 800db0e:	8a7b      	ldrh	r3, [r7, #18]
 800db10:	4413      	add	r3, r2
 800db12:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800db14:	69b8      	ldr	r0, [r7, #24]
 800db16:	f7f8 fce1 	bl	80064dc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800db20:	e01f      	b.n	800db62 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	685b      	ldr	r3, [r3, #4]
 800db26:	617b      	str	r3, [r7, #20]
    pcur = p;
 800db28:	69bb      	ldr	r3, [r7, #24]
 800db2a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800db32:	68f8      	ldr	r0, [r7, #12]
 800db34:	f7f8 fd5a 	bl	80065ec <pbuf_clen>
 800db38:	4603      	mov	r3, r0
 800db3a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800db3c:	8bfa      	ldrh	r2, [r7, #30]
 800db3e:	8a7b      	ldrh	r3, [r7, #18]
 800db40:	4413      	add	r3, r2
 800db42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db46:	db05      	blt.n	800db54 <ip_reass_free_complete_datagram+0xe0>
 800db48:	4b15      	ldr	r3, [pc, #84]	; (800dba0 <ip_reass_free_complete_datagram+0x12c>)
 800db4a:	22cc      	movs	r2, #204	; 0xcc
 800db4c:	4918      	ldr	r1, [pc, #96]	; (800dbb0 <ip_reass_free_complete_datagram+0x13c>)
 800db4e:	4816      	ldr	r0, [pc, #88]	; (800dba8 <ip_reass_free_complete_datagram+0x134>)
 800db50:	f000 fedc 	bl	800e90c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800db54:	8bfa      	ldrh	r2, [r7, #30]
 800db56:	8a7b      	ldrh	r3, [r7, #18]
 800db58:	4413      	add	r3, r2
 800db5a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800db5c:	68f8      	ldr	r0, [r7, #12]
 800db5e:	f7f8 fcbd 	bl	80064dc <pbuf_free>
  while (p != NULL) {
 800db62:	69bb      	ldr	r3, [r7, #24]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d1dc      	bne.n	800db22 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800db68:	6839      	ldr	r1, [r7, #0]
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 f8c2 	bl	800dcf4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800db70:	4b10      	ldr	r3, [pc, #64]	; (800dbb4 <ip_reass_free_complete_datagram+0x140>)
 800db72:	881b      	ldrh	r3, [r3, #0]
 800db74:	8bfa      	ldrh	r2, [r7, #30]
 800db76:	429a      	cmp	r2, r3
 800db78:	d905      	bls.n	800db86 <ip_reass_free_complete_datagram+0x112>
 800db7a:	4b09      	ldr	r3, [pc, #36]	; (800dba0 <ip_reass_free_complete_datagram+0x12c>)
 800db7c:	22d2      	movs	r2, #210	; 0xd2
 800db7e:	490e      	ldr	r1, [pc, #56]	; (800dbb8 <ip_reass_free_complete_datagram+0x144>)
 800db80:	4809      	ldr	r0, [pc, #36]	; (800dba8 <ip_reass_free_complete_datagram+0x134>)
 800db82:	f000 fec3 	bl	800e90c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800db86:	4b0b      	ldr	r3, [pc, #44]	; (800dbb4 <ip_reass_free_complete_datagram+0x140>)
 800db88:	881a      	ldrh	r2, [r3, #0]
 800db8a:	8bfb      	ldrh	r3, [r7, #30]
 800db8c:	1ad3      	subs	r3, r2, r3
 800db8e:	b29a      	uxth	r2, r3
 800db90:	4b08      	ldr	r3, [pc, #32]	; (800dbb4 <ip_reass_free_complete_datagram+0x140>)
 800db92:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800db94:	8bfb      	ldrh	r3, [r7, #30]
}
 800db96:	4618      	mov	r0, r3
 800db98:	3720      	adds	r7, #32
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	08012470 	.word	0x08012470
 800dba4:	080124ac 	.word	0x080124ac
 800dba8:	080124b8 	.word	0x080124b8
 800dbac:	080124e0 	.word	0x080124e0
 800dbb0:	080124f4 	.word	0x080124f4
 800dbb4:	20008458 	.word	0x20008458
 800dbb8:	08012514 	.word	0x08012514

0800dbbc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b08a      	sub	sp, #40	; 0x28
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800dbda:	4b28      	ldr	r3, [pc, #160]	; (800dc7c <ip_reass_remove_oldest_datagram+0xc0>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dbe0:	e030      	b.n	800dc44 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800dbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe4:	695a      	ldr	r2, [r3, #20]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	68db      	ldr	r3, [r3, #12]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d10c      	bne.n	800dc08 <ip_reass_remove_oldest_datagram+0x4c>
 800dbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf0:	699a      	ldr	r2, [r3, #24]
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	691b      	ldr	r3, [r3, #16]
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d106      	bne.n	800dc08 <ip_reass_remove_oldest_datagram+0x4c>
 800dbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfc:	899a      	ldrh	r2, [r3, #12]
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	889b      	ldrh	r3, [r3, #4]
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d014      	beq.n	800dc32 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	3301      	adds	r3, #1
 800dc0c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800dc0e:	6a3b      	ldr	r3, [r7, #32]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d104      	bne.n	800dc1e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800dc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc16:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dc18:	69fb      	ldr	r3, [r7, #28]
 800dc1a:	61bb      	str	r3, [r7, #24]
 800dc1c:	e009      	b.n	800dc32 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800dc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc20:	7fda      	ldrb	r2, [r3, #31]
 800dc22:	6a3b      	ldr	r3, [r7, #32]
 800dc24:	7fdb      	ldrb	r3, [r3, #31]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d803      	bhi.n	800dc32 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800dc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dc2e:	69fb      	ldr	r3, [r7, #28]
 800dc30:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800dc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d001      	beq.n	800dc3e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800dc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800dc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d1cb      	bne.n	800dbe2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800dc4a:	6a3b      	ldr	r3, [r7, #32]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d008      	beq.n	800dc62 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800dc50:	69b9      	ldr	r1, [r7, #24]
 800dc52:	6a38      	ldr	r0, [r7, #32]
 800dc54:	f7ff ff0e 	bl	800da74 <ip_reass_free_complete_datagram>
 800dc58:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800dc5a:	697a      	ldr	r2, [r7, #20]
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	4413      	add	r3, r2
 800dc60:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800dc62:	697a      	ldr	r2, [r7, #20]
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	da02      	bge.n	800dc70 <ip_reass_remove_oldest_datagram+0xb4>
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	dcac      	bgt.n	800dbca <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800dc70:	697b      	ldr	r3, [r7, #20]
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3728      	adds	r7, #40	; 0x28
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
 800dc7a:	bf00      	nop
 800dc7c:	20008454 	.word	0x20008454

0800dc80 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b084      	sub	sp, #16
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dc8a:	2004      	movs	r0, #4
 800dc8c:	f7f7 fd40 	bl	8005710 <memp_malloc>
 800dc90:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d110      	bne.n	800dcba <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800dc98:	6839      	ldr	r1, [r7, #0]
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f7ff ff8e 	bl	800dbbc <ip_reass_remove_oldest_datagram>
 800dca0:	4602      	mov	r2, r0
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	4293      	cmp	r3, r2
 800dca6:	dc03      	bgt.n	800dcb0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dca8:	2004      	movs	r0, #4
 800dcaa:	f7f7 fd31 	bl	8005710 <memp_malloc>
 800dcae:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d101      	bne.n	800dcba <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	e016      	b.n	800dce8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800dcba:	2220      	movs	r2, #32
 800dcbc:	2100      	movs	r1, #0
 800dcbe:	68f8      	ldr	r0, [r7, #12]
 800dcc0:	f000 fe1c 	bl	800e8fc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	220f      	movs	r2, #15
 800dcc8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800dcca:	4b09      	ldr	r3, [pc, #36]	; (800dcf0 <ip_reass_enqueue_new_datagram+0x70>)
 800dccc:	681a      	ldr	r2, [r3, #0]
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800dcd2:	4a07      	ldr	r2, [pc, #28]	; (800dcf0 <ip_reass_enqueue_new_datagram+0x70>)
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	3308      	adds	r3, #8
 800dcdc:	2214      	movs	r2, #20
 800dcde:	6879      	ldr	r1, [r7, #4]
 800dce0:	4618      	mov	r0, r3
 800dce2:	f000 fde3 	bl	800e8ac <memcpy>
  return ipr;
 800dce6:	68fb      	ldr	r3, [r7, #12]
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3710      	adds	r7, #16
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	20008454 	.word	0x20008454

0800dcf4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800dcfe:	4b10      	ldr	r3, [pc, #64]	; (800dd40 <ip_reass_dequeue_datagram+0x4c>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	687a      	ldr	r2, [r7, #4]
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d104      	bne.n	800dd12 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	4a0c      	ldr	r2, [pc, #48]	; (800dd40 <ip_reass_dequeue_datagram+0x4c>)
 800dd0e:	6013      	str	r3, [r2, #0]
 800dd10:	e00d      	b.n	800dd2e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d106      	bne.n	800dd26 <ip_reass_dequeue_datagram+0x32>
 800dd18:	4b0a      	ldr	r3, [pc, #40]	; (800dd44 <ip_reass_dequeue_datagram+0x50>)
 800dd1a:	f240 1245 	movw	r2, #325	; 0x145
 800dd1e:	490a      	ldr	r1, [pc, #40]	; (800dd48 <ip_reass_dequeue_datagram+0x54>)
 800dd20:	480a      	ldr	r0, [pc, #40]	; (800dd4c <ip_reass_dequeue_datagram+0x58>)
 800dd22:	f000 fdf3 	bl	800e90c <iprintf>
    prev->next = ipr->next;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681a      	ldr	r2, [r3, #0]
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800dd2e:	6879      	ldr	r1, [r7, #4]
 800dd30:	2004      	movs	r0, #4
 800dd32:	f7f7 fd5d 	bl	80057f0 <memp_free>
}
 800dd36:	bf00      	nop
 800dd38:	3708      	adds	r7, #8
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	20008454 	.word	0x20008454
 800dd44:	08012470 	.word	0x08012470
 800dd48:	08012538 	.word	0x08012538
 800dd4c:	080124b8 	.word	0x080124b8

0800dd50 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b08c      	sub	sp, #48	; 0x30
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	60b9      	str	r1, [r7, #8]
 800dd5a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800dd60:	2301      	movs	r3, #1
 800dd62:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800dd6a:	69fb      	ldr	r3, [r7, #28]
 800dd6c:	885b      	ldrh	r3, [r3, #2]
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7f7 f855 	bl	8004e20 <lwip_htons>
 800dd76:	4603      	mov	r3, r0
 800dd78:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	f003 030f 	and.w	r3, r3, #15
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	009b      	lsls	r3, r3, #2
 800dd86:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800dd88:	7e7b      	ldrb	r3, [r7, #25]
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	8b7a      	ldrh	r2, [r7, #26]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d202      	bcs.n	800dd98 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dd92:	f04f 33ff 	mov.w	r3, #4294967295
 800dd96:	e135      	b.n	800e004 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800dd98:	7e7b      	ldrb	r3, [r7, #25]
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	8b7a      	ldrh	r2, [r7, #26]
 800dd9e:	1ad3      	subs	r3, r2, r3
 800dda0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800dda2:	69fb      	ldr	r3, [r7, #28]
 800dda4:	88db      	ldrh	r3, [r3, #6]
 800dda6:	b29b      	uxth	r3, r3
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7f7 f839 	bl	8004e20 <lwip_htons>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	00db      	lsls	r3, r3, #3
 800ddb8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	685b      	ldr	r3, [r3, #4]
 800ddbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800ddc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	701a      	strb	r2, [r3, #0]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	705a      	strb	r2, [r3, #1]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	709a      	strb	r2, [r3, #2]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800ddd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd4:	8afa      	ldrh	r2, [r7, #22]
 800ddd6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800ddd8:	8afa      	ldrh	r2, [r7, #22]
 800ddda:	8b7b      	ldrh	r3, [r7, #26]
 800dddc:	4413      	add	r3, r2
 800ddde:	b29a      	uxth	r2, r3
 800dde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800dde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde6:	88db      	ldrh	r3, [r3, #6]
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	8afa      	ldrh	r2, [r7, #22]
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d902      	bls.n	800ddf6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ddf0:	f04f 33ff 	mov.w	r3, #4294967295
 800ddf4:	e106      	b.n	800e004 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	685b      	ldr	r3, [r3, #4]
 800ddfa:	627b      	str	r3, [r7, #36]	; 0x24
 800ddfc:	e068      	b.n	800ded0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800ddfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de00:	685b      	ldr	r3, [r3, #4]
 800de02:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800de04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de06:	889b      	ldrh	r3, [r3, #4]
 800de08:	b29a      	uxth	r2, r3
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	889b      	ldrh	r3, [r3, #4]
 800de0e:	b29b      	uxth	r3, r3
 800de10:	429a      	cmp	r2, r3
 800de12:	d235      	bcs.n	800de80 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800de14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de18:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800de1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d020      	beq.n	800de62 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800de20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de22:	889b      	ldrh	r3, [r3, #4]
 800de24:	b29a      	uxth	r2, r3
 800de26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de28:	88db      	ldrh	r3, [r3, #6]
 800de2a:	b29b      	uxth	r3, r3
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d307      	bcc.n	800de40 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800de30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de32:	88db      	ldrh	r3, [r3, #6]
 800de34:	b29a      	uxth	r2, r3
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	889b      	ldrh	r3, [r3, #4]
 800de3a:	b29b      	uxth	r3, r3
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d902      	bls.n	800de46 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800de40:	f04f 33ff 	mov.w	r3, #4294967295
 800de44:	e0de      	b.n	800e004 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800de46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de48:	68ba      	ldr	r2, [r7, #8]
 800de4a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800de4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4e:	88db      	ldrh	r3, [r3, #6]
 800de50:	b29a      	uxth	r2, r3
 800de52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de54:	889b      	ldrh	r3, [r3, #4]
 800de56:	b29b      	uxth	r3, r3
 800de58:	429a      	cmp	r2, r3
 800de5a:	d03d      	beq.n	800ded8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800de5c:	2300      	movs	r3, #0
 800de5e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800de60:	e03a      	b.n	800ded8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800de62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de64:	88db      	ldrh	r3, [r3, #6]
 800de66:	b29a      	uxth	r2, r3
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	889b      	ldrh	r3, [r3, #4]
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	429a      	cmp	r2, r3
 800de70:	d902      	bls.n	800de78 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800de72:	f04f 33ff 	mov.w	r3, #4294967295
 800de76:	e0c5      	b.n	800e004 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	68ba      	ldr	r2, [r7, #8]
 800de7c:	605a      	str	r2, [r3, #4]
      break;
 800de7e:	e02b      	b.n	800ded8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800de80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de82:	889b      	ldrh	r3, [r3, #4]
 800de84:	b29a      	uxth	r2, r3
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	889b      	ldrh	r3, [r3, #4]
 800de8a:	b29b      	uxth	r3, r3
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d102      	bne.n	800de96 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800de90:	f04f 33ff 	mov.w	r3, #4294967295
 800de94:	e0b6      	b.n	800e004 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800de96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de98:	889b      	ldrh	r3, [r3, #4]
 800de9a:	b29a      	uxth	r2, r3
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	88db      	ldrh	r3, [r3, #6]
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d202      	bcs.n	800deac <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dea6:	f04f 33ff 	mov.w	r3, #4294967295
 800deaa:	e0ab      	b.n	800e004 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800deac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d009      	beq.n	800dec6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800deb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb4:	88db      	ldrh	r3, [r3, #6]
 800deb6:	b29a      	uxth	r2, r3
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	889b      	ldrh	r3, [r3, #4]
 800debc:	b29b      	uxth	r3, r3
 800debe:	429a      	cmp	r2, r3
 800dec0:	d001      	beq.n	800dec6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800dec2:	2300      	movs	r3, #0
 800dec4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800decc:	693b      	ldr	r3, [r7, #16]
 800dece:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800ded0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d193      	bne.n	800ddfe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800ded6:	e000      	b.n	800deda <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800ded8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800deda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d12d      	bne.n	800df3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800dee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d01c      	beq.n	800df20 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800dee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee8:	88db      	ldrh	r3, [r3, #6]
 800deea:	b29a      	uxth	r2, r3
 800deec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deee:	889b      	ldrh	r3, [r3, #4]
 800def0:	b29b      	uxth	r3, r3
 800def2:	429a      	cmp	r2, r3
 800def4:	d906      	bls.n	800df04 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800def6:	4b45      	ldr	r3, [pc, #276]	; (800e00c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800def8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800defc:	4944      	ldr	r1, [pc, #272]	; (800e010 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800defe:	4845      	ldr	r0, [pc, #276]	; (800e014 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800df00:	f000 fd04 	bl	800e90c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800df04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df06:	68ba      	ldr	r2, [r7, #8]
 800df08:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800df0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0c:	88db      	ldrh	r3, [r3, #6]
 800df0e:	b29a      	uxth	r2, r3
 800df10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df12:	889b      	ldrh	r3, [r3, #4]
 800df14:	b29b      	uxth	r3, r3
 800df16:	429a      	cmp	r2, r3
 800df18:	d010      	beq.n	800df3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800df1a:	2300      	movs	r3, #0
 800df1c:	623b      	str	r3, [r7, #32]
 800df1e:	e00d      	b.n	800df3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d006      	beq.n	800df36 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800df28:	4b38      	ldr	r3, [pc, #224]	; (800e00c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800df2a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800df2e:	493a      	ldr	r1, [pc, #232]	; (800e018 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800df30:	4838      	ldr	r0, [pc, #224]	; (800e014 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800df32:	f000 fceb 	bl	800e90c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	68ba      	ldr	r2, [r7, #8]
 800df3a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d105      	bne.n	800df4e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	7f9b      	ldrb	r3, [r3, #30]
 800df46:	f003 0301 	and.w	r3, r3, #1
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d059      	beq.n	800e002 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800df4e:	6a3b      	ldr	r3, [r7, #32]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d04f      	beq.n	800dff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d006      	beq.n	800df6a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	685b      	ldr	r3, [r3, #4]
 800df62:	889b      	ldrh	r3, [r3, #4]
 800df64:	b29b      	uxth	r3, r3
 800df66:	2b00      	cmp	r3, #0
 800df68:	d002      	beq.n	800df70 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800df6a:	2300      	movs	r3, #0
 800df6c:	623b      	str	r3, [r7, #32]
 800df6e:	e041      	b.n	800dff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800df70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df72:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800df74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800df7a:	e012      	b.n	800dfa2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800df7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800df82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df84:	88db      	ldrh	r3, [r3, #6]
 800df86:	b29a      	uxth	r2, r3
 800df88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8a:	889b      	ldrh	r3, [r3, #4]
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	429a      	cmp	r2, r3
 800df90:	d002      	beq.n	800df98 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800df92:	2300      	movs	r3, #0
 800df94:	623b      	str	r3, [r7, #32]
            break;
 800df96:	e007      	b.n	800dfa8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800df98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df9a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800df9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800dfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d1e9      	bne.n	800df7c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800dfa8:	6a3b      	ldr	r3, [r7, #32]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d022      	beq.n	800dff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	685b      	ldr	r3, [r3, #4]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d106      	bne.n	800dfc4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800dfb6:	4b15      	ldr	r3, [pc, #84]	; (800e00c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dfb8:	f240 12df 	movw	r2, #479	; 0x1df
 800dfbc:	4917      	ldr	r1, [pc, #92]	; (800e01c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800dfbe:	4815      	ldr	r0, [pc, #84]	; (800e014 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dfc0:	f000 fca4 	bl	800e90c <iprintf>
          LWIP_ASSERT("sanity check",
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	685b      	ldr	r3, [r3, #4]
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d106      	bne.n	800dfde <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800dfd0:	4b0e      	ldr	r3, [pc, #56]	; (800e00c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dfd2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800dfd6:	4911      	ldr	r1, [pc, #68]	; (800e01c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800dfd8:	480e      	ldr	r0, [pc, #56]	; (800e014 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dfda:	f000 fc97 	bl	800e90c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800dfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d006      	beq.n	800dff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800dfe6:	4b09      	ldr	r3, [pc, #36]	; (800e00c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dfe8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800dfec:	490c      	ldr	r1, [pc, #48]	; (800e020 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800dfee:	4809      	ldr	r0, [pc, #36]	; (800e014 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dff0:	f000 fc8c 	bl	800e90c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800dff4:	6a3b      	ldr	r3, [r7, #32]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	bf14      	ite	ne
 800dffa:	2301      	movne	r3, #1
 800dffc:	2300      	moveq	r3, #0
 800dffe:	b2db      	uxtb	r3, r3
 800e000:	e000      	b.n	800e004 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e002:	2300      	movs	r3, #0
}
 800e004:	4618      	mov	r0, r3
 800e006:	3730      	adds	r7, #48	; 0x30
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}
 800e00c:	08012470 	.word	0x08012470
 800e010:	08012554 	.word	0x08012554
 800e014:	080124b8 	.word	0x080124b8
 800e018:	08012574 	.word	0x08012574
 800e01c:	080125ac 	.word	0x080125ac
 800e020:	080125bc 	.word	0x080125bc

0800e024 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b08e      	sub	sp, #56	; 0x38
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	685b      	ldr	r3, [r3, #4]
 800e030:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e034:	781b      	ldrb	r3, [r3, #0]
 800e036:	f003 030f 	and.w	r3, r3, #15
 800e03a:	b2db      	uxtb	r3, r3
 800e03c:	009b      	lsls	r3, r3, #2
 800e03e:	b2db      	uxtb	r3, r3
 800e040:	2b14      	cmp	r3, #20
 800e042:	f040 8171 	bne.w	800e328 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e048:	88db      	ldrh	r3, [r3, #6]
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	4618      	mov	r0, r3
 800e04e:	f7f6 fee7 	bl	8004e20 <lwip_htons>
 800e052:	4603      	mov	r3, r0
 800e054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e058:	b29b      	uxth	r3, r3
 800e05a:	00db      	lsls	r3, r3, #3
 800e05c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e060:	885b      	ldrh	r3, [r3, #2]
 800e062:	b29b      	uxth	r3, r3
 800e064:	4618      	mov	r0, r3
 800e066:	f7f6 fedb 	bl	8004e20 <lwip_htons>
 800e06a:	4603      	mov	r3, r0
 800e06c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	f003 030f 	and.w	r3, r3, #15
 800e076:	b2db      	uxtb	r3, r3
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e07e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e082:	b29b      	uxth	r3, r3
 800e084:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e086:	429a      	cmp	r2, r3
 800e088:	f0c0 8150 	bcc.w	800e32c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e08c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e090:	b29b      	uxth	r3, r3
 800e092:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e094:	1ad3      	subs	r3, r2, r3
 800e096:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f7f8 faa7 	bl	80065ec <pbuf_clen>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e0a2:	4b8c      	ldr	r3, [pc, #560]	; (800e2d4 <ip4_reass+0x2b0>)
 800e0a4:	881b      	ldrh	r3, [r3, #0]
 800e0a6:	461a      	mov	r2, r3
 800e0a8:	8c3b      	ldrh	r3, [r7, #32]
 800e0aa:	4413      	add	r3, r2
 800e0ac:	2b0a      	cmp	r3, #10
 800e0ae:	dd10      	ble.n	800e0d2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e0b0:	8c3b      	ldrh	r3, [r7, #32]
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0b6:	f7ff fd81 	bl	800dbbc <ip_reass_remove_oldest_datagram>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	f000 8137 	beq.w	800e330 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e0c2:	4b84      	ldr	r3, [pc, #528]	; (800e2d4 <ip4_reass+0x2b0>)
 800e0c4:	881b      	ldrh	r3, [r3, #0]
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	8c3b      	ldrh	r3, [r7, #32]
 800e0ca:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e0cc:	2b0a      	cmp	r3, #10
 800e0ce:	f300 812f 	bgt.w	800e330 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e0d2:	4b81      	ldr	r3, [pc, #516]	; (800e2d8 <ip4_reass+0x2b4>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	633b      	str	r3, [r7, #48]	; 0x30
 800e0d8:	e015      	b.n	800e106 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0dc:	695a      	ldr	r2, [r3, #20]
 800e0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e0:	68db      	ldr	r3, [r3, #12]
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d10c      	bne.n	800e100 <ip4_reass+0xdc>
 800e0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e8:	699a      	ldr	r2, [r3, #24]
 800e0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ec:	691b      	ldr	r3, [r3, #16]
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d106      	bne.n	800e100 <ip4_reass+0xdc>
 800e0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f4:	899a      	ldrh	r2, [r3, #12]
 800e0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f8:	889b      	ldrh	r3, [r3, #4]
 800e0fa:	b29b      	uxth	r3, r3
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d006      	beq.n	800e10e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	633b      	str	r3, [r7, #48]	; 0x30
 800e106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d1e6      	bne.n	800e0da <ip4_reass+0xb6>
 800e10c:	e000      	b.n	800e110 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e10e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e112:	2b00      	cmp	r3, #0
 800e114:	d109      	bne.n	800e12a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e116:	8c3b      	ldrh	r3, [r7, #32]
 800e118:	4619      	mov	r1, r3
 800e11a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e11c:	f7ff fdb0 	bl	800dc80 <ip_reass_enqueue_new_datagram>
 800e120:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e124:	2b00      	cmp	r3, #0
 800e126:	d11c      	bne.n	800e162 <ip4_reass+0x13e>
      goto nullreturn;
 800e128:	e105      	b.n	800e336 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12c:	88db      	ldrh	r3, [r3, #6]
 800e12e:	b29b      	uxth	r3, r3
 800e130:	4618      	mov	r0, r3
 800e132:	f7f6 fe75 	bl	8004e20 <lwip_htons>
 800e136:	4603      	mov	r3, r0
 800e138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d110      	bne.n	800e162 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e142:	89db      	ldrh	r3, [r3, #14]
 800e144:	4618      	mov	r0, r3
 800e146:	f7f6 fe6b 	bl	8004e20 <lwip_htons>
 800e14a:	4603      	mov	r3, r0
 800e14c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e150:	2b00      	cmp	r3, #0
 800e152:	d006      	beq.n	800e162 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e156:	3308      	adds	r3, #8
 800e158:	2214      	movs	r2, #20
 800e15a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e15c:	4618      	mov	r0, r3
 800e15e:	f000 fba5 	bl	800e8ac <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e164:	88db      	ldrh	r3, [r3, #6]
 800e166:	b29b      	uxth	r3, r3
 800e168:	f003 0320 	and.w	r3, r3, #32
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	bf0c      	ite	eq
 800e170:	2301      	moveq	r3, #1
 800e172:	2300      	movne	r3, #0
 800e174:	b2db      	uxtb	r3, r3
 800e176:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d00e      	beq.n	800e19c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e17e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e180:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e182:	4413      	add	r3, r2
 800e184:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e186:	8b7a      	ldrh	r2, [r7, #26]
 800e188:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e18a:	429a      	cmp	r2, r3
 800e18c:	f0c0 80a0 	bcc.w	800e2d0 <ip4_reass+0x2ac>
 800e190:	8b7b      	ldrh	r3, [r7, #26]
 800e192:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e196:	4293      	cmp	r3, r2
 800e198:	f200 809a 	bhi.w	800e2d0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e19c:	69fa      	ldr	r2, [r7, #28]
 800e19e:	6879      	ldr	r1, [r7, #4]
 800e1a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1a2:	f7ff fdd5 	bl	800dd50 <ip_reass_chain_frag_into_datagram_and_validate>
 800e1a6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ae:	f000 809b 	beq.w	800e2e8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e1b2:	4b48      	ldr	r3, [pc, #288]	; (800e2d4 <ip4_reass+0x2b0>)
 800e1b4:	881a      	ldrh	r2, [r3, #0]
 800e1b6:	8c3b      	ldrh	r3, [r7, #32]
 800e1b8:	4413      	add	r3, r2
 800e1ba:	b29a      	uxth	r2, r3
 800e1bc:	4b45      	ldr	r3, [pc, #276]	; (800e2d4 <ip4_reass+0x2b0>)
 800e1be:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e1c0:	69fb      	ldr	r3, [r7, #28]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d00d      	beq.n	800e1e2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e1c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e1c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1ca:	4413      	add	r3, r2
 800e1cc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d0:	8a7a      	ldrh	r2, [r7, #18]
 800e1d2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d6:	7f9b      	ldrb	r3, [r3, #30]
 800e1d8:	f043 0301 	orr.w	r3, r3, #1
 800e1dc:	b2da      	uxtb	r2, r3
 800e1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	d171      	bne.n	800e2cc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ea:	8b9b      	ldrh	r3, [r3, #28]
 800e1ec:	3314      	adds	r3, #20
 800e1ee:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e204:	3308      	adds	r3, #8
 800e206:	2214      	movs	r2, #20
 800e208:	4619      	mov	r1, r3
 800e20a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e20c:	f000 fb4e 	bl	800e8ac <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e210:	8a3b      	ldrh	r3, [r7, #16]
 800e212:	4618      	mov	r0, r3
 800e214:	f7f6 fe04 	bl	8004e20 <lwip_htons>
 800e218:	4603      	mov	r3, r0
 800e21a:	461a      	mov	r2, r3
 800e21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e21e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e222:	2200      	movs	r2, #0
 800e224:	719a      	strb	r2, [r3, #6]
 800e226:	2200      	movs	r2, #0
 800e228:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e22c:	2200      	movs	r2, #0
 800e22e:	729a      	strb	r2, [r3, #10]
 800e230:	2200      	movs	r2, #0
 800e232:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e23a:	e00d      	b.n	800e258 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e23e:	685b      	ldr	r3, [r3, #4]
 800e240:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e242:	2114      	movs	r1, #20
 800e244:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e246:	f7f8 f8c3 	bl	80063d0 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e24a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f7f8 fa07 	bl	8006660 <pbuf_cat>
      r = iprh->next_pbuf;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d1ee      	bne.n	800e23c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e25e:	4b1e      	ldr	r3, [pc, #120]	; (800e2d8 <ip4_reass+0x2b4>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e264:	429a      	cmp	r2, r3
 800e266:	d102      	bne.n	800e26e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e268:	2300      	movs	r3, #0
 800e26a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e26c:	e010      	b.n	800e290 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e26e:	4b1a      	ldr	r3, [pc, #104]	; (800e2d8 <ip4_reass+0x2b4>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e274:	e007      	b.n	800e286 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d006      	beq.n	800e28e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d1f4      	bne.n	800e276 <ip4_reass+0x252>
 800e28c:	e000      	b.n	800e290 <ip4_reass+0x26c>
          break;
 800e28e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e290:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e292:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e294:	f7ff fd2e 	bl	800dcf4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f7f8 f9a7 	bl	80065ec <pbuf_clen>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e2a2:	4b0c      	ldr	r3, [pc, #48]	; (800e2d4 <ip4_reass+0x2b0>)
 800e2a4:	881b      	ldrh	r3, [r3, #0]
 800e2a6:	8c3a      	ldrh	r2, [r7, #32]
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d906      	bls.n	800e2ba <ip4_reass+0x296>
 800e2ac:	4b0b      	ldr	r3, [pc, #44]	; (800e2dc <ip4_reass+0x2b8>)
 800e2ae:	f240 229b 	movw	r2, #667	; 0x29b
 800e2b2:	490b      	ldr	r1, [pc, #44]	; (800e2e0 <ip4_reass+0x2bc>)
 800e2b4:	480b      	ldr	r0, [pc, #44]	; (800e2e4 <ip4_reass+0x2c0>)
 800e2b6:	f000 fb29 	bl	800e90c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e2ba:	4b06      	ldr	r3, [pc, #24]	; (800e2d4 <ip4_reass+0x2b0>)
 800e2bc:	881a      	ldrh	r2, [r3, #0]
 800e2be:	8c3b      	ldrh	r3, [r7, #32]
 800e2c0:	1ad3      	subs	r3, r2, r3
 800e2c2:	b29a      	uxth	r2, r3
 800e2c4:	4b03      	ldr	r3, [pc, #12]	; (800e2d4 <ip4_reass+0x2b0>)
 800e2c6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	e038      	b.n	800e33e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	e036      	b.n	800e33e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e2d0:	bf00      	nop
 800e2d2:	e00a      	b.n	800e2ea <ip4_reass+0x2c6>
 800e2d4:	20008458 	.word	0x20008458
 800e2d8:	20008454 	.word	0x20008454
 800e2dc:	08012470 	.word	0x08012470
 800e2e0:	080125e0 	.word	0x080125e0
 800e2e4:	080124b8 	.word	0x080124b8
    goto nullreturn_ipr;
 800e2e8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d106      	bne.n	800e2fe <ip4_reass+0x2da>
 800e2f0:	4b15      	ldr	r3, [pc, #84]	; (800e348 <ip4_reass+0x324>)
 800e2f2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e2f6:	4915      	ldr	r1, [pc, #84]	; (800e34c <ip4_reass+0x328>)
 800e2f8:	4815      	ldr	r0, [pc, #84]	; (800e350 <ip4_reass+0x32c>)
 800e2fa:	f000 fb07 	bl	800e90c <iprintf>
  if (ipr->p == NULL) {
 800e2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d116      	bne.n	800e334 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e306:	4b13      	ldr	r3, [pc, #76]	; (800e354 <ip4_reass+0x330>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d006      	beq.n	800e31e <ip4_reass+0x2fa>
 800e310:	4b0d      	ldr	r3, [pc, #52]	; (800e348 <ip4_reass+0x324>)
 800e312:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e316:	4910      	ldr	r1, [pc, #64]	; (800e358 <ip4_reass+0x334>)
 800e318:	480d      	ldr	r0, [pc, #52]	; (800e350 <ip4_reass+0x32c>)
 800e31a:	f000 faf7 	bl	800e90c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e31e:	2100      	movs	r1, #0
 800e320:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e322:	f7ff fce7 	bl	800dcf4 <ip_reass_dequeue_datagram>
 800e326:	e006      	b.n	800e336 <ip4_reass+0x312>
    goto nullreturn;
 800e328:	bf00      	nop
 800e32a:	e004      	b.n	800e336 <ip4_reass+0x312>
    goto nullreturn;
 800e32c:	bf00      	nop
 800e32e:	e002      	b.n	800e336 <ip4_reass+0x312>
      goto nullreturn;
 800e330:	bf00      	nop
 800e332:	e000      	b.n	800e336 <ip4_reass+0x312>
  }

nullreturn:
 800e334:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f7f8 f8d0 	bl	80064dc <pbuf_free>
  return NULL;
 800e33c:	2300      	movs	r3, #0
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3738      	adds	r7, #56	; 0x38
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	08012470 	.word	0x08012470
 800e34c:	080125fc 	.word	0x080125fc
 800e350:	080124b8 	.word	0x080124b8
 800e354:	20008454 	.word	0x20008454
 800e358:	08012608 	.word	0x08012608

0800e35c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e360:	2005      	movs	r0, #5
 800e362:	f7f7 f9d5 	bl	8005710 <memp_malloc>
 800e366:	4603      	mov	r3, r0
}
 800e368:	4618      	mov	r0, r3
 800e36a:	bd80      	pop	{r7, pc}

0800e36c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b082      	sub	sp, #8
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d106      	bne.n	800e388 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e37a:	4b07      	ldr	r3, [pc, #28]	; (800e398 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e37c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e380:	4906      	ldr	r1, [pc, #24]	; (800e39c <ip_frag_free_pbuf_custom_ref+0x30>)
 800e382:	4807      	ldr	r0, [pc, #28]	; (800e3a0 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e384:	f000 fac2 	bl	800e90c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e388:	6879      	ldr	r1, [r7, #4]
 800e38a:	2005      	movs	r0, #5
 800e38c:	f7f7 fa30 	bl	80057f0 <memp_free>
}
 800e390:	bf00      	nop
 800e392:	3708      	adds	r7, #8
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}
 800e398:	08012470 	.word	0x08012470
 800e39c:	08012628 	.word	0x08012628
 800e3a0:	080124b8 	.word	0x080124b8

0800e3a4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b084      	sub	sp, #16
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d106      	bne.n	800e3c4 <ipfrag_free_pbuf_custom+0x20>
 800e3b6:	4b11      	ldr	r3, [pc, #68]	; (800e3fc <ipfrag_free_pbuf_custom+0x58>)
 800e3b8:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e3bc:	4910      	ldr	r1, [pc, #64]	; (800e400 <ipfrag_free_pbuf_custom+0x5c>)
 800e3be:	4811      	ldr	r0, [pc, #68]	; (800e404 <ipfrag_free_pbuf_custom+0x60>)
 800e3c0:	f000 faa4 	bl	800e90c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e3c4:	68fa      	ldr	r2, [r7, #12]
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d006      	beq.n	800e3da <ipfrag_free_pbuf_custom+0x36>
 800e3cc:	4b0b      	ldr	r3, [pc, #44]	; (800e3fc <ipfrag_free_pbuf_custom+0x58>)
 800e3ce:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e3d2:	490d      	ldr	r1, [pc, #52]	; (800e408 <ipfrag_free_pbuf_custom+0x64>)
 800e3d4:	480b      	ldr	r0, [pc, #44]	; (800e404 <ipfrag_free_pbuf_custom+0x60>)
 800e3d6:	f000 fa99 	bl	800e90c <iprintf>
  if (pcr->original != NULL) {
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	695b      	ldr	r3, [r3, #20]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d004      	beq.n	800e3ec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	695b      	ldr	r3, [r3, #20]
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7f8 f878 	bl	80064dc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e3ec:	68f8      	ldr	r0, [r7, #12]
 800e3ee:	f7ff ffbd 	bl	800e36c <ip_frag_free_pbuf_custom_ref>
}
 800e3f2:	bf00      	nop
 800e3f4:	3710      	adds	r7, #16
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
 800e3fa:	bf00      	nop
 800e3fc:	08012470 	.word	0x08012470
 800e400:	08012634 	.word	0x08012634
 800e404:	080124b8 	.word	0x080124b8
 800e408:	08012640 	.word	0x08012640

0800e40c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b094      	sub	sp, #80	; 0x50
 800e410:	af02      	add	r7, sp, #8
 800e412:	60f8      	str	r0, [r7, #12]
 800e414:	60b9      	str	r1, [r7, #8]
 800e416:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e418:	2300      	movs	r3, #0
 800e41a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e422:	3b14      	subs	r3, #20
 800e424:	2b00      	cmp	r3, #0
 800e426:	da00      	bge.n	800e42a <ip4_frag+0x1e>
 800e428:	3307      	adds	r3, #7
 800e42a:	10db      	asrs	r3, r3, #3
 800e42c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e42e:	2314      	movs	r3, #20
 800e430:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	685b      	ldr	r3, [r3, #4]
 800e436:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e43a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e43e:	781b      	ldrb	r3, [r3, #0]
 800e440:	f003 030f 	and.w	r3, r3, #15
 800e444:	b2db      	uxtb	r3, r3
 800e446:	009b      	lsls	r3, r3, #2
 800e448:	b2db      	uxtb	r3, r3
 800e44a:	2b14      	cmp	r3, #20
 800e44c:	d002      	beq.n	800e454 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e44e:	f06f 0305 	mvn.w	r3, #5
 800e452:	e110      	b.n	800e676 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	895b      	ldrh	r3, [r3, #10]
 800e458:	2b13      	cmp	r3, #19
 800e45a:	d809      	bhi.n	800e470 <ip4_frag+0x64>
 800e45c:	4b88      	ldr	r3, [pc, #544]	; (800e680 <ip4_frag+0x274>)
 800e45e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e462:	4988      	ldr	r1, [pc, #544]	; (800e684 <ip4_frag+0x278>)
 800e464:	4888      	ldr	r0, [pc, #544]	; (800e688 <ip4_frag+0x27c>)
 800e466:	f000 fa51 	bl	800e90c <iprintf>
 800e46a:	f06f 0305 	mvn.w	r3, #5
 800e46e:	e102      	b.n	800e676 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e472:	88db      	ldrh	r3, [r3, #6]
 800e474:	b29b      	uxth	r3, r3
 800e476:	4618      	mov	r0, r3
 800e478:	f7f6 fcd2 	bl	8004e20 <lwip_htons>
 800e47c:	4603      	mov	r3, r0
 800e47e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e480:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e482:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e486:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e48a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e48c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e490:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	891b      	ldrh	r3, [r3, #8]
 800e496:	3b14      	subs	r3, #20
 800e498:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e49c:	e0e1      	b.n	800e662 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e49e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e4a0:	00db      	lsls	r3, r3, #3
 800e4a2:	b29b      	uxth	r3, r3
 800e4a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	bf28      	it	cs
 800e4ac:	4613      	movcs	r3, r2
 800e4ae:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e4b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e4b4:	2114      	movs	r1, #20
 800e4b6:	200e      	movs	r0, #14
 800e4b8:	f7f7 fd2c 	bl	8005f14 <pbuf_alloc>
 800e4bc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	f000 80d5 	beq.w	800e670 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c8:	895b      	ldrh	r3, [r3, #10]
 800e4ca:	2b13      	cmp	r3, #19
 800e4cc:	d806      	bhi.n	800e4dc <ip4_frag+0xd0>
 800e4ce:	4b6c      	ldr	r3, [pc, #432]	; (800e680 <ip4_frag+0x274>)
 800e4d0:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e4d4:	496d      	ldr	r1, [pc, #436]	; (800e68c <ip4_frag+0x280>)
 800e4d6:	486c      	ldr	r0, [pc, #432]	; (800e688 <ip4_frag+0x27c>)
 800e4d8:	f000 fa18 	bl	800e90c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	2214      	movs	r2, #20
 800e4e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f000 f9e1 	bl	800e8ac <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ec:	685b      	ldr	r3, [r3, #4]
 800e4ee:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e4f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e4f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e4f6:	e064      	b.n	800e5c2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	895a      	ldrh	r2, [r3, #10]
 800e4fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e4fe:	1ad3      	subs	r3, r2, r3
 800e500:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	895b      	ldrh	r3, [r3, #10]
 800e506:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e508:	429a      	cmp	r2, r3
 800e50a:	d906      	bls.n	800e51a <ip4_frag+0x10e>
 800e50c:	4b5c      	ldr	r3, [pc, #368]	; (800e680 <ip4_frag+0x274>)
 800e50e:	f240 322d 	movw	r2, #813	; 0x32d
 800e512:	495f      	ldr	r1, [pc, #380]	; (800e690 <ip4_frag+0x284>)
 800e514:	485c      	ldr	r0, [pc, #368]	; (800e688 <ip4_frag+0x27c>)
 800e516:	f000 f9f9 	bl	800e90c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e51a:	8bfa      	ldrh	r2, [r7, #30]
 800e51c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e520:	4293      	cmp	r3, r2
 800e522:	bf28      	it	cs
 800e524:	4613      	movcs	r3, r2
 800e526:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e52a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d105      	bne.n	800e53e <ip4_frag+0x132>
        poff = 0;
 800e532:	2300      	movs	r3, #0
 800e534:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	60fb      	str	r3, [r7, #12]
        continue;
 800e53c:	e041      	b.n	800e5c2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e53e:	f7ff ff0d 	bl	800e35c <ip_frag_alloc_pbuf_custom_ref>
 800e542:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e544:	69bb      	ldr	r3, [r7, #24]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d103      	bne.n	800e552 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e54a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e54c:	f7f7 ffc6 	bl	80064dc <pbuf_free>
        goto memerr;
 800e550:	e08f      	b.n	800e672 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e552:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e558:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e55a:	4413      	add	r3, r2
 800e55c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e560:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e564:	9201      	str	r2, [sp, #4]
 800e566:	9300      	str	r3, [sp, #0]
 800e568:	4603      	mov	r3, r0
 800e56a:	2241      	movs	r2, #65	; 0x41
 800e56c:	2000      	movs	r0, #0
 800e56e:	f7f7 fdfb 	bl	8006168 <pbuf_alloced_custom>
 800e572:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d106      	bne.n	800e588 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e57a:	69b8      	ldr	r0, [r7, #24]
 800e57c:	f7ff fef6 	bl	800e36c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e580:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e582:	f7f7 ffab 	bl	80064dc <pbuf_free>
        goto memerr;
 800e586:	e074      	b.n	800e672 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e588:	68f8      	ldr	r0, [r7, #12]
 800e58a:	f7f8 f847 	bl	800661c <pbuf_ref>
      pcr->original = p;
 800e58e:	69bb      	ldr	r3, [r7, #24]
 800e590:	68fa      	ldr	r2, [r7, #12]
 800e592:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e594:	69bb      	ldr	r3, [r7, #24]
 800e596:	4a3f      	ldr	r2, [pc, #252]	; (800e694 <ip4_frag+0x288>)
 800e598:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e59a:	6979      	ldr	r1, [r7, #20]
 800e59c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e59e:	f7f8 f85f 	bl	8006660 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e5a2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e5a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e5aa:	1ad3      	subs	r3, r2, r3
 800e5ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e5b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d004      	beq.n	800e5c2 <ip4_frag+0x1b6>
        poff = 0;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e5c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d196      	bne.n	800e4f8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e5ca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e5cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e5d0:	4413      	add	r3, r2
 800e5d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e5d8:	f1a3 0213 	sub.w	r2, r3, #19
 800e5dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	bfcc      	ite	gt
 800e5e4:	2301      	movgt	r3, #1
 800e5e6:	2300      	movle	r3, #0
 800e5e8:	b2db      	uxtb	r3, r3
 800e5ea:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e5ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e5f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e5f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e5f6:	6a3b      	ldr	r3, [r7, #32]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d002      	beq.n	800e602 <ip4_frag+0x1f6>
 800e5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d003      	beq.n	800e60a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e602:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e604:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e608:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e60a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e60c:	4618      	mov	r0, r3
 800e60e:	f7f6 fc07 	bl	8004e20 <lwip_htons>
 800e612:	4603      	mov	r3, r0
 800e614:	461a      	mov	r2, r3
 800e616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e618:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e61a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e61c:	3314      	adds	r3, #20
 800e61e:	b29b      	uxth	r3, r3
 800e620:	4618      	mov	r0, r3
 800e622:	f7f6 fbfd 	bl	8004e20 <lwip_htons>
 800e626:	4603      	mov	r3, r0
 800e628:	461a      	mov	r2, r3
 800e62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e630:	2200      	movs	r2, #0
 800e632:	729a      	strb	r2, [r3, #10]
 800e634:	2200      	movs	r2, #0
 800e636:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	695b      	ldr	r3, [r3, #20]
 800e63c:	687a      	ldr	r2, [r7, #4]
 800e63e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e640:	68b8      	ldr	r0, [r7, #8]
 800e642:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e644:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e646:	f7f7 ff49 	bl	80064dc <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e64a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e64e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e650:	1ad3      	subs	r3, r2, r3
 800e652:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e656:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e65a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e65c:	4413      	add	r3, r2
 800e65e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e662:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e666:	2b00      	cmp	r3, #0
 800e668:	f47f af19 	bne.w	800e49e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e66c:	2300      	movs	r3, #0
 800e66e:	e002      	b.n	800e676 <ip4_frag+0x26a>
      goto memerr;
 800e670:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e672:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e676:	4618      	mov	r0, r3
 800e678:	3748      	adds	r7, #72	; 0x48
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
 800e67e:	bf00      	nop
 800e680:	08012470 	.word	0x08012470
 800e684:	0801264c 	.word	0x0801264c
 800e688:	080124b8 	.word	0x080124b8
 800e68c:	08012668 	.word	0x08012668
 800e690:	08012688 	.word	0x08012688
 800e694:	0800e3a5 	.word	0x0800e3a5

0800e698 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b086      	sub	sp, #24
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e6a2:	230e      	movs	r3, #14
 800e6a4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	895b      	ldrh	r3, [r3, #10]
 800e6aa:	2b0e      	cmp	r3, #14
 800e6ac:	d96e      	bls.n	800e78c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	7bdb      	ldrb	r3, [r3, #15]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d106      	bne.n	800e6c4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e6bc:	3301      	adds	r3, #1
 800e6be:	b2da      	uxtb	r2, r3
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	7b1a      	ldrb	r2, [r3, #12]
 800e6ce:	7b5b      	ldrb	r3, [r3, #13]
 800e6d0:	021b      	lsls	r3, r3, #8
 800e6d2:	4313      	orrs	r3, r2
 800e6d4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	f003 0301 	and.w	r3, r3, #1
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d023      	beq.n	800e72a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	781b      	ldrb	r3, [r3, #0]
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d10f      	bne.n	800e70a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	785b      	ldrb	r3, [r3, #1]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d11b      	bne.n	800e72a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e6f6:	2b5e      	cmp	r3, #94	; 0x5e
 800e6f8:	d117      	bne.n	800e72a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	7b5b      	ldrb	r3, [r3, #13]
 800e6fe:	f043 0310 	orr.w	r3, r3, #16
 800e702:	b2da      	uxtb	r2, r3
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	735a      	strb	r2, [r3, #13]
 800e708:	e00f      	b.n	800e72a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	2206      	movs	r2, #6
 800e70e:	4928      	ldr	r1, [pc, #160]	; (800e7b0 <ethernet_input+0x118>)
 800e710:	4618      	mov	r0, r3
 800e712:	f000 f8bb 	bl	800e88c <memcmp>
 800e716:	4603      	mov	r3, r0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d106      	bne.n	800e72a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	7b5b      	ldrb	r3, [r3, #13]
 800e720:	f043 0308 	orr.w	r3, r3, #8
 800e724:	b2da      	uxtb	r2, r3
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e72a:	89fb      	ldrh	r3, [r7, #14]
 800e72c:	2b08      	cmp	r3, #8
 800e72e:	d003      	beq.n	800e738 <ethernet_input+0xa0>
 800e730:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e734:	d014      	beq.n	800e760 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e736:	e032      	b.n	800e79e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e73e:	f003 0308 	and.w	r3, r3, #8
 800e742:	2b00      	cmp	r3, #0
 800e744:	d024      	beq.n	800e790 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e746:	8afb      	ldrh	r3, [r7, #22]
 800e748:	4619      	mov	r1, r3
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f7f7 fe40 	bl	80063d0 <pbuf_remove_header>
 800e750:	4603      	mov	r3, r0
 800e752:	2b00      	cmp	r3, #0
 800e754:	d11e      	bne.n	800e794 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e756:	6839      	ldr	r1, [r7, #0]
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f7fe ff21 	bl	800d5a0 <ip4_input>
      break;
 800e75e:	e013      	b.n	800e788 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e766:	f003 0308 	and.w	r3, r3, #8
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d014      	beq.n	800e798 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e76e:	8afb      	ldrh	r3, [r7, #22]
 800e770:	4619      	mov	r1, r3
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f7f7 fe2c 	bl	80063d0 <pbuf_remove_header>
 800e778:	4603      	mov	r3, r0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d10e      	bne.n	800e79c <ethernet_input+0x104>
        etharp_input(p, netif);
 800e77e:	6839      	ldr	r1, [r7, #0]
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f7fe f8c1 	bl	800c908 <etharp_input>
      break;
 800e786:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e788:	2300      	movs	r3, #0
 800e78a:	e00c      	b.n	800e7a6 <ethernet_input+0x10e>
    goto free_and_return;
 800e78c:	bf00      	nop
 800e78e:	e006      	b.n	800e79e <ethernet_input+0x106>
        goto free_and_return;
 800e790:	bf00      	nop
 800e792:	e004      	b.n	800e79e <ethernet_input+0x106>
        goto free_and_return;
 800e794:	bf00      	nop
 800e796:	e002      	b.n	800e79e <ethernet_input+0x106>
        goto free_and_return;
 800e798:	bf00      	nop
 800e79a:	e000      	b.n	800e79e <ethernet_input+0x106>
        goto free_and_return;
 800e79c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f7f7 fe9c 	bl	80064dc <pbuf_free>
  return ERR_OK;
 800e7a4:	2300      	movs	r3, #0
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3718      	adds	r7, #24
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
 800e7ae:	bf00      	nop
 800e7b0:	08012824 	.word	0x08012824

0800e7b4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b086      	sub	sp, #24
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	60f8      	str	r0, [r7, #12]
 800e7bc:	60b9      	str	r1, [r7, #8]
 800e7be:	607a      	str	r2, [r7, #4]
 800e7c0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e7c2:	8c3b      	ldrh	r3, [r7, #32]
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7f6 fb2b 	bl	8004e20 <lwip_htons>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e7ce:	210e      	movs	r1, #14
 800e7d0:	68b8      	ldr	r0, [r7, #8]
 800e7d2:	f7f7 fded 	bl	80063b0 <pbuf_add_header>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d125      	bne.n	800e828 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e7e2:	693b      	ldr	r3, [r7, #16]
 800e7e4:	8afa      	ldrh	r2, [r7, #22]
 800e7e6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	2206      	movs	r2, #6
 800e7ec:	6839      	ldr	r1, [r7, #0]
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f000 f85c 	bl	800e8ac <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	3306      	adds	r3, #6
 800e7f8:	2206      	movs	r2, #6
 800e7fa:	6879      	ldr	r1, [r7, #4]
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f000 f855 	bl	800e8ac <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e808:	2b06      	cmp	r3, #6
 800e80a:	d006      	beq.n	800e81a <ethernet_output+0x66>
 800e80c:	4b0a      	ldr	r3, [pc, #40]	; (800e838 <ethernet_output+0x84>)
 800e80e:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e812:	490a      	ldr	r1, [pc, #40]	; (800e83c <ethernet_output+0x88>)
 800e814:	480a      	ldr	r0, [pc, #40]	; (800e840 <ethernet_output+0x8c>)
 800e816:	f000 f879 	bl	800e90c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	699b      	ldr	r3, [r3, #24]
 800e81e:	68b9      	ldr	r1, [r7, #8]
 800e820:	68f8      	ldr	r0, [r7, #12]
 800e822:	4798      	blx	r3
 800e824:	4603      	mov	r3, r0
 800e826:	e002      	b.n	800e82e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e828:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e82a:	f06f 0301 	mvn.w	r3, #1
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3718      	adds	r7, #24
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
 800e836:	bf00      	nop
 800e838:	08012698 	.word	0x08012698
 800e83c:	080126d0 	.word	0x080126d0
 800e840:	08012704 	.word	0x08012704

0800e844 <__libc_init_array>:
 800e844:	b570      	push	{r4, r5, r6, lr}
 800e846:	4d0d      	ldr	r5, [pc, #52]	; (800e87c <__libc_init_array+0x38>)
 800e848:	4c0d      	ldr	r4, [pc, #52]	; (800e880 <__libc_init_array+0x3c>)
 800e84a:	1b64      	subs	r4, r4, r5
 800e84c:	10a4      	asrs	r4, r4, #2
 800e84e:	2600      	movs	r6, #0
 800e850:	42a6      	cmp	r6, r4
 800e852:	d109      	bne.n	800e868 <__libc_init_array+0x24>
 800e854:	4d0b      	ldr	r5, [pc, #44]	; (800e884 <__libc_init_array+0x40>)
 800e856:	4c0c      	ldr	r4, [pc, #48]	; (800e888 <__libc_init_array+0x44>)
 800e858:	f001 fa5c 	bl	800fd14 <_init>
 800e85c:	1b64      	subs	r4, r4, r5
 800e85e:	10a4      	asrs	r4, r4, #2
 800e860:	2600      	movs	r6, #0
 800e862:	42a6      	cmp	r6, r4
 800e864:	d105      	bne.n	800e872 <__libc_init_array+0x2e>
 800e866:	bd70      	pop	{r4, r5, r6, pc}
 800e868:	f855 3b04 	ldr.w	r3, [r5], #4
 800e86c:	4798      	blx	r3
 800e86e:	3601      	adds	r6, #1
 800e870:	e7ee      	b.n	800e850 <__libc_init_array+0xc>
 800e872:	f855 3b04 	ldr.w	r3, [r5], #4
 800e876:	4798      	blx	r3
 800e878:	3601      	adds	r6, #1
 800e87a:	e7f2      	b.n	800e862 <__libc_init_array+0x1e>
 800e87c:	08012984 	.word	0x08012984
 800e880:	08012984 	.word	0x08012984
 800e884:	08012984 	.word	0x08012984
 800e888:	08012988 	.word	0x08012988

0800e88c <memcmp>:
 800e88c:	b510      	push	{r4, lr}
 800e88e:	3901      	subs	r1, #1
 800e890:	4402      	add	r2, r0
 800e892:	4290      	cmp	r0, r2
 800e894:	d101      	bne.n	800e89a <memcmp+0xe>
 800e896:	2000      	movs	r0, #0
 800e898:	e005      	b.n	800e8a6 <memcmp+0x1a>
 800e89a:	7803      	ldrb	r3, [r0, #0]
 800e89c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e8a0:	42a3      	cmp	r3, r4
 800e8a2:	d001      	beq.n	800e8a8 <memcmp+0x1c>
 800e8a4:	1b18      	subs	r0, r3, r4
 800e8a6:	bd10      	pop	{r4, pc}
 800e8a8:	3001      	adds	r0, #1
 800e8aa:	e7f2      	b.n	800e892 <memcmp+0x6>

0800e8ac <memcpy>:
 800e8ac:	440a      	add	r2, r1
 800e8ae:	4291      	cmp	r1, r2
 800e8b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8b4:	d100      	bne.n	800e8b8 <memcpy+0xc>
 800e8b6:	4770      	bx	lr
 800e8b8:	b510      	push	{r4, lr}
 800e8ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8c2:	4291      	cmp	r1, r2
 800e8c4:	d1f9      	bne.n	800e8ba <memcpy+0xe>
 800e8c6:	bd10      	pop	{r4, pc}

0800e8c8 <memmove>:
 800e8c8:	4288      	cmp	r0, r1
 800e8ca:	b510      	push	{r4, lr}
 800e8cc:	eb01 0402 	add.w	r4, r1, r2
 800e8d0:	d902      	bls.n	800e8d8 <memmove+0x10>
 800e8d2:	4284      	cmp	r4, r0
 800e8d4:	4623      	mov	r3, r4
 800e8d6:	d807      	bhi.n	800e8e8 <memmove+0x20>
 800e8d8:	1e43      	subs	r3, r0, #1
 800e8da:	42a1      	cmp	r1, r4
 800e8dc:	d008      	beq.n	800e8f0 <memmove+0x28>
 800e8de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e8e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e8e6:	e7f8      	b.n	800e8da <memmove+0x12>
 800e8e8:	4402      	add	r2, r0
 800e8ea:	4601      	mov	r1, r0
 800e8ec:	428a      	cmp	r2, r1
 800e8ee:	d100      	bne.n	800e8f2 <memmove+0x2a>
 800e8f0:	bd10      	pop	{r4, pc}
 800e8f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e8f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e8fa:	e7f7      	b.n	800e8ec <memmove+0x24>

0800e8fc <memset>:
 800e8fc:	4402      	add	r2, r0
 800e8fe:	4603      	mov	r3, r0
 800e900:	4293      	cmp	r3, r2
 800e902:	d100      	bne.n	800e906 <memset+0xa>
 800e904:	4770      	bx	lr
 800e906:	f803 1b01 	strb.w	r1, [r3], #1
 800e90a:	e7f9      	b.n	800e900 <memset+0x4>

0800e90c <iprintf>:
 800e90c:	b40f      	push	{r0, r1, r2, r3}
 800e90e:	4b0a      	ldr	r3, [pc, #40]	; (800e938 <iprintf+0x2c>)
 800e910:	b513      	push	{r0, r1, r4, lr}
 800e912:	681c      	ldr	r4, [r3, #0]
 800e914:	b124      	cbz	r4, 800e920 <iprintf+0x14>
 800e916:	69a3      	ldr	r3, [r4, #24]
 800e918:	b913      	cbnz	r3, 800e920 <iprintf+0x14>
 800e91a:	4620      	mov	r0, r4
 800e91c:	f000 f8e2 	bl	800eae4 <__sinit>
 800e920:	ab05      	add	r3, sp, #20
 800e922:	9a04      	ldr	r2, [sp, #16]
 800e924:	68a1      	ldr	r1, [r4, #8]
 800e926:	9301      	str	r3, [sp, #4]
 800e928:	4620      	mov	r0, r4
 800e92a:	f000 fbfb 	bl	800f124 <_vfiprintf_r>
 800e92e:	b002      	add	sp, #8
 800e930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e934:	b004      	add	sp, #16
 800e936:	4770      	bx	lr
 800e938:	2000005c 	.word	0x2000005c

0800e93c <rand>:
 800e93c:	4b16      	ldr	r3, [pc, #88]	; (800e998 <rand+0x5c>)
 800e93e:	b510      	push	{r4, lr}
 800e940:	681c      	ldr	r4, [r3, #0]
 800e942:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e944:	b9b3      	cbnz	r3, 800e974 <rand+0x38>
 800e946:	2018      	movs	r0, #24
 800e948:	f000 f97e 	bl	800ec48 <malloc>
 800e94c:	63a0      	str	r0, [r4, #56]	; 0x38
 800e94e:	b928      	cbnz	r0, 800e95c <rand+0x20>
 800e950:	4602      	mov	r2, r0
 800e952:	4b12      	ldr	r3, [pc, #72]	; (800e99c <rand+0x60>)
 800e954:	4812      	ldr	r0, [pc, #72]	; (800e9a0 <rand+0x64>)
 800e956:	214e      	movs	r1, #78	; 0x4e
 800e958:	f000 f84e 	bl	800e9f8 <__assert_func>
 800e95c:	4a11      	ldr	r2, [pc, #68]	; (800e9a4 <rand+0x68>)
 800e95e:	4b12      	ldr	r3, [pc, #72]	; (800e9a8 <rand+0x6c>)
 800e960:	e9c0 2300 	strd	r2, r3, [r0]
 800e964:	4b11      	ldr	r3, [pc, #68]	; (800e9ac <rand+0x70>)
 800e966:	6083      	str	r3, [r0, #8]
 800e968:	230b      	movs	r3, #11
 800e96a:	8183      	strh	r3, [r0, #12]
 800e96c:	2201      	movs	r2, #1
 800e96e:	2300      	movs	r3, #0
 800e970:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e974:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800e976:	4a0e      	ldr	r2, [pc, #56]	; (800e9b0 <rand+0x74>)
 800e978:	6920      	ldr	r0, [r4, #16]
 800e97a:	6963      	ldr	r3, [r4, #20]
 800e97c:	490d      	ldr	r1, [pc, #52]	; (800e9b4 <rand+0x78>)
 800e97e:	4342      	muls	r2, r0
 800e980:	fb01 2203 	mla	r2, r1, r3, r2
 800e984:	fba0 0101 	umull	r0, r1, r0, r1
 800e988:	1c43      	adds	r3, r0, #1
 800e98a:	eb42 0001 	adc.w	r0, r2, r1
 800e98e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800e992:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e996:	bd10      	pop	{r4, pc}
 800e998:	2000005c 	.word	0x2000005c
 800e99c:	08012838 	.word	0x08012838
 800e9a0:	0801284f 	.word	0x0801284f
 800e9a4:	abcd330e 	.word	0xabcd330e
 800e9a8:	e66d1234 	.word	0xe66d1234
 800e9ac:	0005deec 	.word	0x0005deec
 800e9b0:	5851f42d 	.word	0x5851f42d
 800e9b4:	4c957f2d 	.word	0x4c957f2d

0800e9b8 <siprintf>:
 800e9b8:	b40e      	push	{r1, r2, r3}
 800e9ba:	b500      	push	{lr}
 800e9bc:	b09c      	sub	sp, #112	; 0x70
 800e9be:	ab1d      	add	r3, sp, #116	; 0x74
 800e9c0:	9002      	str	r0, [sp, #8]
 800e9c2:	9006      	str	r0, [sp, #24]
 800e9c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e9c8:	4809      	ldr	r0, [pc, #36]	; (800e9f0 <siprintf+0x38>)
 800e9ca:	9107      	str	r1, [sp, #28]
 800e9cc:	9104      	str	r1, [sp, #16]
 800e9ce:	4909      	ldr	r1, [pc, #36]	; (800e9f4 <siprintf+0x3c>)
 800e9d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9d4:	9105      	str	r1, [sp, #20]
 800e9d6:	6800      	ldr	r0, [r0, #0]
 800e9d8:	9301      	str	r3, [sp, #4]
 800e9da:	a902      	add	r1, sp, #8
 800e9dc:	f000 fa78 	bl	800eed0 <_svfiprintf_r>
 800e9e0:	9b02      	ldr	r3, [sp, #8]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	701a      	strb	r2, [r3, #0]
 800e9e6:	b01c      	add	sp, #112	; 0x70
 800e9e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9ec:	b003      	add	sp, #12
 800e9ee:	4770      	bx	lr
 800e9f0:	2000005c 	.word	0x2000005c
 800e9f4:	ffff0208 	.word	0xffff0208

0800e9f8 <__assert_func>:
 800e9f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e9fa:	4614      	mov	r4, r2
 800e9fc:	461a      	mov	r2, r3
 800e9fe:	4b09      	ldr	r3, [pc, #36]	; (800ea24 <__assert_func+0x2c>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	4605      	mov	r5, r0
 800ea04:	68d8      	ldr	r0, [r3, #12]
 800ea06:	b14c      	cbz	r4, 800ea1c <__assert_func+0x24>
 800ea08:	4b07      	ldr	r3, [pc, #28]	; (800ea28 <__assert_func+0x30>)
 800ea0a:	9100      	str	r1, [sp, #0]
 800ea0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ea10:	4906      	ldr	r1, [pc, #24]	; (800ea2c <__assert_func+0x34>)
 800ea12:	462b      	mov	r3, r5
 800ea14:	f000 f8e4 	bl	800ebe0 <fiprintf>
 800ea18:	f000 ff6e 	bl	800f8f8 <abort>
 800ea1c:	4b04      	ldr	r3, [pc, #16]	; (800ea30 <__assert_func+0x38>)
 800ea1e:	461c      	mov	r4, r3
 800ea20:	e7f3      	b.n	800ea0a <__assert_func+0x12>
 800ea22:	bf00      	nop
 800ea24:	2000005c 	.word	0x2000005c
 800ea28:	080128aa 	.word	0x080128aa
 800ea2c:	080128b7 	.word	0x080128b7
 800ea30:	080128e5 	.word	0x080128e5

0800ea34 <std>:
 800ea34:	2300      	movs	r3, #0
 800ea36:	b510      	push	{r4, lr}
 800ea38:	4604      	mov	r4, r0
 800ea3a:	e9c0 3300 	strd	r3, r3, [r0]
 800ea3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ea42:	6083      	str	r3, [r0, #8]
 800ea44:	8181      	strh	r1, [r0, #12]
 800ea46:	6643      	str	r3, [r0, #100]	; 0x64
 800ea48:	81c2      	strh	r2, [r0, #14]
 800ea4a:	6183      	str	r3, [r0, #24]
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	2208      	movs	r2, #8
 800ea50:	305c      	adds	r0, #92	; 0x5c
 800ea52:	f7ff ff53 	bl	800e8fc <memset>
 800ea56:	4b05      	ldr	r3, [pc, #20]	; (800ea6c <std+0x38>)
 800ea58:	6263      	str	r3, [r4, #36]	; 0x24
 800ea5a:	4b05      	ldr	r3, [pc, #20]	; (800ea70 <std+0x3c>)
 800ea5c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ea5e:	4b05      	ldr	r3, [pc, #20]	; (800ea74 <std+0x40>)
 800ea60:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ea62:	4b05      	ldr	r3, [pc, #20]	; (800ea78 <std+0x44>)
 800ea64:	6224      	str	r4, [r4, #32]
 800ea66:	6323      	str	r3, [r4, #48]	; 0x30
 800ea68:	bd10      	pop	{r4, pc}
 800ea6a:	bf00      	nop
 800ea6c:	0800f6cd 	.word	0x0800f6cd
 800ea70:	0800f6ef 	.word	0x0800f6ef
 800ea74:	0800f727 	.word	0x0800f727
 800ea78:	0800f74b 	.word	0x0800f74b

0800ea7c <_cleanup_r>:
 800ea7c:	4901      	ldr	r1, [pc, #4]	; (800ea84 <_cleanup_r+0x8>)
 800ea7e:	f000 b8c1 	b.w	800ec04 <_fwalk_reent>
 800ea82:	bf00      	nop
 800ea84:	0800fa35 	.word	0x0800fa35

0800ea88 <__sfmoreglue>:
 800ea88:	b570      	push	{r4, r5, r6, lr}
 800ea8a:	2268      	movs	r2, #104	; 0x68
 800ea8c:	1e4d      	subs	r5, r1, #1
 800ea8e:	4355      	muls	r5, r2
 800ea90:	460e      	mov	r6, r1
 800ea92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ea96:	f000 f94b 	bl	800ed30 <_malloc_r>
 800ea9a:	4604      	mov	r4, r0
 800ea9c:	b140      	cbz	r0, 800eab0 <__sfmoreglue+0x28>
 800ea9e:	2100      	movs	r1, #0
 800eaa0:	e9c0 1600 	strd	r1, r6, [r0]
 800eaa4:	300c      	adds	r0, #12
 800eaa6:	60a0      	str	r0, [r4, #8]
 800eaa8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eaac:	f7ff ff26 	bl	800e8fc <memset>
 800eab0:	4620      	mov	r0, r4
 800eab2:	bd70      	pop	{r4, r5, r6, pc}

0800eab4 <__sfp_lock_acquire>:
 800eab4:	4801      	ldr	r0, [pc, #4]	; (800eabc <__sfp_lock_acquire+0x8>)
 800eab6:	f000 b8c5 	b.w	800ec44 <__retarget_lock_acquire_recursive>
 800eaba:	bf00      	nop
 800eabc:	20008461 	.word	0x20008461

0800eac0 <__sfp_lock_release>:
 800eac0:	4801      	ldr	r0, [pc, #4]	; (800eac8 <__sfp_lock_release+0x8>)
 800eac2:	f000 b8c0 	b.w	800ec46 <__retarget_lock_release_recursive>
 800eac6:	bf00      	nop
 800eac8:	20008461 	.word	0x20008461

0800eacc <__sinit_lock_acquire>:
 800eacc:	4801      	ldr	r0, [pc, #4]	; (800ead4 <__sinit_lock_acquire+0x8>)
 800eace:	f000 b8b9 	b.w	800ec44 <__retarget_lock_acquire_recursive>
 800ead2:	bf00      	nop
 800ead4:	20008462 	.word	0x20008462

0800ead8 <__sinit_lock_release>:
 800ead8:	4801      	ldr	r0, [pc, #4]	; (800eae0 <__sinit_lock_release+0x8>)
 800eada:	f000 b8b4 	b.w	800ec46 <__retarget_lock_release_recursive>
 800eade:	bf00      	nop
 800eae0:	20008462 	.word	0x20008462

0800eae4 <__sinit>:
 800eae4:	b510      	push	{r4, lr}
 800eae6:	4604      	mov	r4, r0
 800eae8:	f7ff fff0 	bl	800eacc <__sinit_lock_acquire>
 800eaec:	69a3      	ldr	r3, [r4, #24]
 800eaee:	b11b      	cbz	r3, 800eaf8 <__sinit+0x14>
 800eaf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eaf4:	f7ff bff0 	b.w	800ead8 <__sinit_lock_release>
 800eaf8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eafc:	6523      	str	r3, [r4, #80]	; 0x50
 800eafe:	4b13      	ldr	r3, [pc, #76]	; (800eb4c <__sinit+0x68>)
 800eb00:	4a13      	ldr	r2, [pc, #76]	; (800eb50 <__sinit+0x6c>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	62a2      	str	r2, [r4, #40]	; 0x28
 800eb06:	42a3      	cmp	r3, r4
 800eb08:	bf04      	itt	eq
 800eb0a:	2301      	moveq	r3, #1
 800eb0c:	61a3      	streq	r3, [r4, #24]
 800eb0e:	4620      	mov	r0, r4
 800eb10:	f000 f820 	bl	800eb54 <__sfp>
 800eb14:	6060      	str	r0, [r4, #4]
 800eb16:	4620      	mov	r0, r4
 800eb18:	f000 f81c 	bl	800eb54 <__sfp>
 800eb1c:	60a0      	str	r0, [r4, #8]
 800eb1e:	4620      	mov	r0, r4
 800eb20:	f000 f818 	bl	800eb54 <__sfp>
 800eb24:	2200      	movs	r2, #0
 800eb26:	60e0      	str	r0, [r4, #12]
 800eb28:	2104      	movs	r1, #4
 800eb2a:	6860      	ldr	r0, [r4, #4]
 800eb2c:	f7ff ff82 	bl	800ea34 <std>
 800eb30:	68a0      	ldr	r0, [r4, #8]
 800eb32:	2201      	movs	r2, #1
 800eb34:	2109      	movs	r1, #9
 800eb36:	f7ff ff7d 	bl	800ea34 <std>
 800eb3a:	68e0      	ldr	r0, [r4, #12]
 800eb3c:	2202      	movs	r2, #2
 800eb3e:	2112      	movs	r1, #18
 800eb40:	f7ff ff78 	bl	800ea34 <std>
 800eb44:	2301      	movs	r3, #1
 800eb46:	61a3      	str	r3, [r4, #24]
 800eb48:	e7d2      	b.n	800eaf0 <__sinit+0xc>
 800eb4a:	bf00      	nop
 800eb4c:	08012834 	.word	0x08012834
 800eb50:	0800ea7d 	.word	0x0800ea7d

0800eb54 <__sfp>:
 800eb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb56:	4607      	mov	r7, r0
 800eb58:	f7ff ffac 	bl	800eab4 <__sfp_lock_acquire>
 800eb5c:	4b1e      	ldr	r3, [pc, #120]	; (800ebd8 <__sfp+0x84>)
 800eb5e:	681e      	ldr	r6, [r3, #0]
 800eb60:	69b3      	ldr	r3, [r6, #24]
 800eb62:	b913      	cbnz	r3, 800eb6a <__sfp+0x16>
 800eb64:	4630      	mov	r0, r6
 800eb66:	f7ff ffbd 	bl	800eae4 <__sinit>
 800eb6a:	3648      	adds	r6, #72	; 0x48
 800eb6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eb70:	3b01      	subs	r3, #1
 800eb72:	d503      	bpl.n	800eb7c <__sfp+0x28>
 800eb74:	6833      	ldr	r3, [r6, #0]
 800eb76:	b30b      	cbz	r3, 800ebbc <__sfp+0x68>
 800eb78:	6836      	ldr	r6, [r6, #0]
 800eb7a:	e7f7      	b.n	800eb6c <__sfp+0x18>
 800eb7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eb80:	b9d5      	cbnz	r5, 800ebb8 <__sfp+0x64>
 800eb82:	4b16      	ldr	r3, [pc, #88]	; (800ebdc <__sfp+0x88>)
 800eb84:	60e3      	str	r3, [r4, #12]
 800eb86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eb8a:	6665      	str	r5, [r4, #100]	; 0x64
 800eb8c:	f000 f859 	bl	800ec42 <__retarget_lock_init_recursive>
 800eb90:	f7ff ff96 	bl	800eac0 <__sfp_lock_release>
 800eb94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eb98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eb9c:	6025      	str	r5, [r4, #0]
 800eb9e:	61a5      	str	r5, [r4, #24]
 800eba0:	2208      	movs	r2, #8
 800eba2:	4629      	mov	r1, r5
 800eba4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eba8:	f7ff fea8 	bl	800e8fc <memset>
 800ebac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ebb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ebb4:	4620      	mov	r0, r4
 800ebb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebb8:	3468      	adds	r4, #104	; 0x68
 800ebba:	e7d9      	b.n	800eb70 <__sfp+0x1c>
 800ebbc:	2104      	movs	r1, #4
 800ebbe:	4638      	mov	r0, r7
 800ebc0:	f7ff ff62 	bl	800ea88 <__sfmoreglue>
 800ebc4:	4604      	mov	r4, r0
 800ebc6:	6030      	str	r0, [r6, #0]
 800ebc8:	2800      	cmp	r0, #0
 800ebca:	d1d5      	bne.n	800eb78 <__sfp+0x24>
 800ebcc:	f7ff ff78 	bl	800eac0 <__sfp_lock_release>
 800ebd0:	230c      	movs	r3, #12
 800ebd2:	603b      	str	r3, [r7, #0]
 800ebd4:	e7ee      	b.n	800ebb4 <__sfp+0x60>
 800ebd6:	bf00      	nop
 800ebd8:	08012834 	.word	0x08012834
 800ebdc:	ffff0001 	.word	0xffff0001

0800ebe0 <fiprintf>:
 800ebe0:	b40e      	push	{r1, r2, r3}
 800ebe2:	b503      	push	{r0, r1, lr}
 800ebe4:	4601      	mov	r1, r0
 800ebe6:	ab03      	add	r3, sp, #12
 800ebe8:	4805      	ldr	r0, [pc, #20]	; (800ec00 <fiprintf+0x20>)
 800ebea:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebee:	6800      	ldr	r0, [r0, #0]
 800ebf0:	9301      	str	r3, [sp, #4]
 800ebf2:	f000 fa97 	bl	800f124 <_vfiprintf_r>
 800ebf6:	b002      	add	sp, #8
 800ebf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebfc:	b003      	add	sp, #12
 800ebfe:	4770      	bx	lr
 800ec00:	2000005c 	.word	0x2000005c

0800ec04 <_fwalk_reent>:
 800ec04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec08:	4606      	mov	r6, r0
 800ec0a:	4688      	mov	r8, r1
 800ec0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ec10:	2700      	movs	r7, #0
 800ec12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec16:	f1b9 0901 	subs.w	r9, r9, #1
 800ec1a:	d505      	bpl.n	800ec28 <_fwalk_reent+0x24>
 800ec1c:	6824      	ldr	r4, [r4, #0]
 800ec1e:	2c00      	cmp	r4, #0
 800ec20:	d1f7      	bne.n	800ec12 <_fwalk_reent+0xe>
 800ec22:	4638      	mov	r0, r7
 800ec24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec28:	89ab      	ldrh	r3, [r5, #12]
 800ec2a:	2b01      	cmp	r3, #1
 800ec2c:	d907      	bls.n	800ec3e <_fwalk_reent+0x3a>
 800ec2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec32:	3301      	adds	r3, #1
 800ec34:	d003      	beq.n	800ec3e <_fwalk_reent+0x3a>
 800ec36:	4629      	mov	r1, r5
 800ec38:	4630      	mov	r0, r6
 800ec3a:	47c0      	blx	r8
 800ec3c:	4307      	orrs	r7, r0
 800ec3e:	3568      	adds	r5, #104	; 0x68
 800ec40:	e7e9      	b.n	800ec16 <_fwalk_reent+0x12>

0800ec42 <__retarget_lock_init_recursive>:
 800ec42:	4770      	bx	lr

0800ec44 <__retarget_lock_acquire_recursive>:
 800ec44:	4770      	bx	lr

0800ec46 <__retarget_lock_release_recursive>:
 800ec46:	4770      	bx	lr

0800ec48 <malloc>:
 800ec48:	4b02      	ldr	r3, [pc, #8]	; (800ec54 <malloc+0xc>)
 800ec4a:	4601      	mov	r1, r0
 800ec4c:	6818      	ldr	r0, [r3, #0]
 800ec4e:	f000 b86f 	b.w	800ed30 <_malloc_r>
 800ec52:	bf00      	nop
 800ec54:	2000005c 	.word	0x2000005c

0800ec58 <_free_r>:
 800ec58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec5a:	2900      	cmp	r1, #0
 800ec5c:	d044      	beq.n	800ece8 <_free_r+0x90>
 800ec5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec62:	9001      	str	r0, [sp, #4]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	f1a1 0404 	sub.w	r4, r1, #4
 800ec6a:	bfb8      	it	lt
 800ec6c:	18e4      	addlt	r4, r4, r3
 800ec6e:	f000 ff95 	bl	800fb9c <__malloc_lock>
 800ec72:	4a1e      	ldr	r2, [pc, #120]	; (800ecec <_free_r+0x94>)
 800ec74:	9801      	ldr	r0, [sp, #4]
 800ec76:	6813      	ldr	r3, [r2, #0]
 800ec78:	b933      	cbnz	r3, 800ec88 <_free_r+0x30>
 800ec7a:	6063      	str	r3, [r4, #4]
 800ec7c:	6014      	str	r4, [r2, #0]
 800ec7e:	b003      	add	sp, #12
 800ec80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec84:	f000 bf90 	b.w	800fba8 <__malloc_unlock>
 800ec88:	42a3      	cmp	r3, r4
 800ec8a:	d908      	bls.n	800ec9e <_free_r+0x46>
 800ec8c:	6825      	ldr	r5, [r4, #0]
 800ec8e:	1961      	adds	r1, r4, r5
 800ec90:	428b      	cmp	r3, r1
 800ec92:	bf01      	itttt	eq
 800ec94:	6819      	ldreq	r1, [r3, #0]
 800ec96:	685b      	ldreq	r3, [r3, #4]
 800ec98:	1949      	addeq	r1, r1, r5
 800ec9a:	6021      	streq	r1, [r4, #0]
 800ec9c:	e7ed      	b.n	800ec7a <_free_r+0x22>
 800ec9e:	461a      	mov	r2, r3
 800eca0:	685b      	ldr	r3, [r3, #4]
 800eca2:	b10b      	cbz	r3, 800eca8 <_free_r+0x50>
 800eca4:	42a3      	cmp	r3, r4
 800eca6:	d9fa      	bls.n	800ec9e <_free_r+0x46>
 800eca8:	6811      	ldr	r1, [r2, #0]
 800ecaa:	1855      	adds	r5, r2, r1
 800ecac:	42a5      	cmp	r5, r4
 800ecae:	d10b      	bne.n	800ecc8 <_free_r+0x70>
 800ecb0:	6824      	ldr	r4, [r4, #0]
 800ecb2:	4421      	add	r1, r4
 800ecb4:	1854      	adds	r4, r2, r1
 800ecb6:	42a3      	cmp	r3, r4
 800ecb8:	6011      	str	r1, [r2, #0]
 800ecba:	d1e0      	bne.n	800ec7e <_free_r+0x26>
 800ecbc:	681c      	ldr	r4, [r3, #0]
 800ecbe:	685b      	ldr	r3, [r3, #4]
 800ecc0:	6053      	str	r3, [r2, #4]
 800ecc2:	4421      	add	r1, r4
 800ecc4:	6011      	str	r1, [r2, #0]
 800ecc6:	e7da      	b.n	800ec7e <_free_r+0x26>
 800ecc8:	d902      	bls.n	800ecd0 <_free_r+0x78>
 800ecca:	230c      	movs	r3, #12
 800eccc:	6003      	str	r3, [r0, #0]
 800ecce:	e7d6      	b.n	800ec7e <_free_r+0x26>
 800ecd0:	6825      	ldr	r5, [r4, #0]
 800ecd2:	1961      	adds	r1, r4, r5
 800ecd4:	428b      	cmp	r3, r1
 800ecd6:	bf04      	itt	eq
 800ecd8:	6819      	ldreq	r1, [r3, #0]
 800ecda:	685b      	ldreq	r3, [r3, #4]
 800ecdc:	6063      	str	r3, [r4, #4]
 800ecde:	bf04      	itt	eq
 800ece0:	1949      	addeq	r1, r1, r5
 800ece2:	6021      	streq	r1, [r4, #0]
 800ece4:	6054      	str	r4, [r2, #4]
 800ece6:	e7ca      	b.n	800ec7e <_free_r+0x26>
 800ece8:	b003      	add	sp, #12
 800ecea:	bd30      	pop	{r4, r5, pc}
 800ecec:	20008464 	.word	0x20008464

0800ecf0 <sbrk_aligned>:
 800ecf0:	b570      	push	{r4, r5, r6, lr}
 800ecf2:	4e0e      	ldr	r6, [pc, #56]	; (800ed2c <sbrk_aligned+0x3c>)
 800ecf4:	460c      	mov	r4, r1
 800ecf6:	6831      	ldr	r1, [r6, #0]
 800ecf8:	4605      	mov	r5, r0
 800ecfa:	b911      	cbnz	r1, 800ed02 <sbrk_aligned+0x12>
 800ecfc:	f000 fcd6 	bl	800f6ac <_sbrk_r>
 800ed00:	6030      	str	r0, [r6, #0]
 800ed02:	4621      	mov	r1, r4
 800ed04:	4628      	mov	r0, r5
 800ed06:	f000 fcd1 	bl	800f6ac <_sbrk_r>
 800ed0a:	1c43      	adds	r3, r0, #1
 800ed0c:	d00a      	beq.n	800ed24 <sbrk_aligned+0x34>
 800ed0e:	1cc4      	adds	r4, r0, #3
 800ed10:	f024 0403 	bic.w	r4, r4, #3
 800ed14:	42a0      	cmp	r0, r4
 800ed16:	d007      	beq.n	800ed28 <sbrk_aligned+0x38>
 800ed18:	1a21      	subs	r1, r4, r0
 800ed1a:	4628      	mov	r0, r5
 800ed1c:	f000 fcc6 	bl	800f6ac <_sbrk_r>
 800ed20:	3001      	adds	r0, #1
 800ed22:	d101      	bne.n	800ed28 <sbrk_aligned+0x38>
 800ed24:	f04f 34ff 	mov.w	r4, #4294967295
 800ed28:	4620      	mov	r0, r4
 800ed2a:	bd70      	pop	{r4, r5, r6, pc}
 800ed2c:	20008468 	.word	0x20008468

0800ed30 <_malloc_r>:
 800ed30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed34:	1ccd      	adds	r5, r1, #3
 800ed36:	f025 0503 	bic.w	r5, r5, #3
 800ed3a:	3508      	adds	r5, #8
 800ed3c:	2d0c      	cmp	r5, #12
 800ed3e:	bf38      	it	cc
 800ed40:	250c      	movcc	r5, #12
 800ed42:	2d00      	cmp	r5, #0
 800ed44:	4607      	mov	r7, r0
 800ed46:	db01      	blt.n	800ed4c <_malloc_r+0x1c>
 800ed48:	42a9      	cmp	r1, r5
 800ed4a:	d905      	bls.n	800ed58 <_malloc_r+0x28>
 800ed4c:	230c      	movs	r3, #12
 800ed4e:	603b      	str	r3, [r7, #0]
 800ed50:	2600      	movs	r6, #0
 800ed52:	4630      	mov	r0, r6
 800ed54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed58:	4e2e      	ldr	r6, [pc, #184]	; (800ee14 <_malloc_r+0xe4>)
 800ed5a:	f000 ff1f 	bl	800fb9c <__malloc_lock>
 800ed5e:	6833      	ldr	r3, [r6, #0]
 800ed60:	461c      	mov	r4, r3
 800ed62:	bb34      	cbnz	r4, 800edb2 <_malloc_r+0x82>
 800ed64:	4629      	mov	r1, r5
 800ed66:	4638      	mov	r0, r7
 800ed68:	f7ff ffc2 	bl	800ecf0 <sbrk_aligned>
 800ed6c:	1c43      	adds	r3, r0, #1
 800ed6e:	4604      	mov	r4, r0
 800ed70:	d14d      	bne.n	800ee0e <_malloc_r+0xde>
 800ed72:	6834      	ldr	r4, [r6, #0]
 800ed74:	4626      	mov	r6, r4
 800ed76:	2e00      	cmp	r6, #0
 800ed78:	d140      	bne.n	800edfc <_malloc_r+0xcc>
 800ed7a:	6823      	ldr	r3, [r4, #0]
 800ed7c:	4631      	mov	r1, r6
 800ed7e:	4638      	mov	r0, r7
 800ed80:	eb04 0803 	add.w	r8, r4, r3
 800ed84:	f000 fc92 	bl	800f6ac <_sbrk_r>
 800ed88:	4580      	cmp	r8, r0
 800ed8a:	d13a      	bne.n	800ee02 <_malloc_r+0xd2>
 800ed8c:	6821      	ldr	r1, [r4, #0]
 800ed8e:	3503      	adds	r5, #3
 800ed90:	1a6d      	subs	r5, r5, r1
 800ed92:	f025 0503 	bic.w	r5, r5, #3
 800ed96:	3508      	adds	r5, #8
 800ed98:	2d0c      	cmp	r5, #12
 800ed9a:	bf38      	it	cc
 800ed9c:	250c      	movcc	r5, #12
 800ed9e:	4629      	mov	r1, r5
 800eda0:	4638      	mov	r0, r7
 800eda2:	f7ff ffa5 	bl	800ecf0 <sbrk_aligned>
 800eda6:	3001      	adds	r0, #1
 800eda8:	d02b      	beq.n	800ee02 <_malloc_r+0xd2>
 800edaa:	6823      	ldr	r3, [r4, #0]
 800edac:	442b      	add	r3, r5
 800edae:	6023      	str	r3, [r4, #0]
 800edb0:	e00e      	b.n	800edd0 <_malloc_r+0xa0>
 800edb2:	6822      	ldr	r2, [r4, #0]
 800edb4:	1b52      	subs	r2, r2, r5
 800edb6:	d41e      	bmi.n	800edf6 <_malloc_r+0xc6>
 800edb8:	2a0b      	cmp	r2, #11
 800edba:	d916      	bls.n	800edea <_malloc_r+0xba>
 800edbc:	1961      	adds	r1, r4, r5
 800edbe:	42a3      	cmp	r3, r4
 800edc0:	6025      	str	r5, [r4, #0]
 800edc2:	bf18      	it	ne
 800edc4:	6059      	strne	r1, [r3, #4]
 800edc6:	6863      	ldr	r3, [r4, #4]
 800edc8:	bf08      	it	eq
 800edca:	6031      	streq	r1, [r6, #0]
 800edcc:	5162      	str	r2, [r4, r5]
 800edce:	604b      	str	r3, [r1, #4]
 800edd0:	4638      	mov	r0, r7
 800edd2:	f104 060b 	add.w	r6, r4, #11
 800edd6:	f000 fee7 	bl	800fba8 <__malloc_unlock>
 800edda:	f026 0607 	bic.w	r6, r6, #7
 800edde:	1d23      	adds	r3, r4, #4
 800ede0:	1af2      	subs	r2, r6, r3
 800ede2:	d0b6      	beq.n	800ed52 <_malloc_r+0x22>
 800ede4:	1b9b      	subs	r3, r3, r6
 800ede6:	50a3      	str	r3, [r4, r2]
 800ede8:	e7b3      	b.n	800ed52 <_malloc_r+0x22>
 800edea:	6862      	ldr	r2, [r4, #4]
 800edec:	42a3      	cmp	r3, r4
 800edee:	bf0c      	ite	eq
 800edf0:	6032      	streq	r2, [r6, #0]
 800edf2:	605a      	strne	r2, [r3, #4]
 800edf4:	e7ec      	b.n	800edd0 <_malloc_r+0xa0>
 800edf6:	4623      	mov	r3, r4
 800edf8:	6864      	ldr	r4, [r4, #4]
 800edfa:	e7b2      	b.n	800ed62 <_malloc_r+0x32>
 800edfc:	4634      	mov	r4, r6
 800edfe:	6876      	ldr	r6, [r6, #4]
 800ee00:	e7b9      	b.n	800ed76 <_malloc_r+0x46>
 800ee02:	230c      	movs	r3, #12
 800ee04:	603b      	str	r3, [r7, #0]
 800ee06:	4638      	mov	r0, r7
 800ee08:	f000 fece 	bl	800fba8 <__malloc_unlock>
 800ee0c:	e7a1      	b.n	800ed52 <_malloc_r+0x22>
 800ee0e:	6025      	str	r5, [r4, #0]
 800ee10:	e7de      	b.n	800edd0 <_malloc_r+0xa0>
 800ee12:	bf00      	nop
 800ee14:	20008464 	.word	0x20008464

0800ee18 <__ssputs_r>:
 800ee18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee1c:	688e      	ldr	r6, [r1, #8]
 800ee1e:	429e      	cmp	r6, r3
 800ee20:	4682      	mov	sl, r0
 800ee22:	460c      	mov	r4, r1
 800ee24:	4690      	mov	r8, r2
 800ee26:	461f      	mov	r7, r3
 800ee28:	d838      	bhi.n	800ee9c <__ssputs_r+0x84>
 800ee2a:	898a      	ldrh	r2, [r1, #12]
 800ee2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ee30:	d032      	beq.n	800ee98 <__ssputs_r+0x80>
 800ee32:	6825      	ldr	r5, [r4, #0]
 800ee34:	6909      	ldr	r1, [r1, #16]
 800ee36:	eba5 0901 	sub.w	r9, r5, r1
 800ee3a:	6965      	ldr	r5, [r4, #20]
 800ee3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ee44:	3301      	adds	r3, #1
 800ee46:	444b      	add	r3, r9
 800ee48:	106d      	asrs	r5, r5, #1
 800ee4a:	429d      	cmp	r5, r3
 800ee4c:	bf38      	it	cc
 800ee4e:	461d      	movcc	r5, r3
 800ee50:	0553      	lsls	r3, r2, #21
 800ee52:	d531      	bpl.n	800eeb8 <__ssputs_r+0xa0>
 800ee54:	4629      	mov	r1, r5
 800ee56:	f7ff ff6b 	bl	800ed30 <_malloc_r>
 800ee5a:	4606      	mov	r6, r0
 800ee5c:	b950      	cbnz	r0, 800ee74 <__ssputs_r+0x5c>
 800ee5e:	230c      	movs	r3, #12
 800ee60:	f8ca 3000 	str.w	r3, [sl]
 800ee64:	89a3      	ldrh	r3, [r4, #12]
 800ee66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee6a:	81a3      	strh	r3, [r4, #12]
 800ee6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee74:	6921      	ldr	r1, [r4, #16]
 800ee76:	464a      	mov	r2, r9
 800ee78:	f7ff fd18 	bl	800e8ac <memcpy>
 800ee7c:	89a3      	ldrh	r3, [r4, #12]
 800ee7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ee82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee86:	81a3      	strh	r3, [r4, #12]
 800ee88:	6126      	str	r6, [r4, #16]
 800ee8a:	6165      	str	r5, [r4, #20]
 800ee8c:	444e      	add	r6, r9
 800ee8e:	eba5 0509 	sub.w	r5, r5, r9
 800ee92:	6026      	str	r6, [r4, #0]
 800ee94:	60a5      	str	r5, [r4, #8]
 800ee96:	463e      	mov	r6, r7
 800ee98:	42be      	cmp	r6, r7
 800ee9a:	d900      	bls.n	800ee9e <__ssputs_r+0x86>
 800ee9c:	463e      	mov	r6, r7
 800ee9e:	6820      	ldr	r0, [r4, #0]
 800eea0:	4632      	mov	r2, r6
 800eea2:	4641      	mov	r1, r8
 800eea4:	f7ff fd10 	bl	800e8c8 <memmove>
 800eea8:	68a3      	ldr	r3, [r4, #8]
 800eeaa:	1b9b      	subs	r3, r3, r6
 800eeac:	60a3      	str	r3, [r4, #8]
 800eeae:	6823      	ldr	r3, [r4, #0]
 800eeb0:	4433      	add	r3, r6
 800eeb2:	6023      	str	r3, [r4, #0]
 800eeb4:	2000      	movs	r0, #0
 800eeb6:	e7db      	b.n	800ee70 <__ssputs_r+0x58>
 800eeb8:	462a      	mov	r2, r5
 800eeba:	f000 fe7b 	bl	800fbb4 <_realloc_r>
 800eebe:	4606      	mov	r6, r0
 800eec0:	2800      	cmp	r0, #0
 800eec2:	d1e1      	bne.n	800ee88 <__ssputs_r+0x70>
 800eec4:	6921      	ldr	r1, [r4, #16]
 800eec6:	4650      	mov	r0, sl
 800eec8:	f7ff fec6 	bl	800ec58 <_free_r>
 800eecc:	e7c7      	b.n	800ee5e <__ssputs_r+0x46>
	...

0800eed0 <_svfiprintf_r>:
 800eed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eed4:	4698      	mov	r8, r3
 800eed6:	898b      	ldrh	r3, [r1, #12]
 800eed8:	061b      	lsls	r3, r3, #24
 800eeda:	b09d      	sub	sp, #116	; 0x74
 800eedc:	4607      	mov	r7, r0
 800eede:	460d      	mov	r5, r1
 800eee0:	4614      	mov	r4, r2
 800eee2:	d50e      	bpl.n	800ef02 <_svfiprintf_r+0x32>
 800eee4:	690b      	ldr	r3, [r1, #16]
 800eee6:	b963      	cbnz	r3, 800ef02 <_svfiprintf_r+0x32>
 800eee8:	2140      	movs	r1, #64	; 0x40
 800eeea:	f7ff ff21 	bl	800ed30 <_malloc_r>
 800eeee:	6028      	str	r0, [r5, #0]
 800eef0:	6128      	str	r0, [r5, #16]
 800eef2:	b920      	cbnz	r0, 800eefe <_svfiprintf_r+0x2e>
 800eef4:	230c      	movs	r3, #12
 800eef6:	603b      	str	r3, [r7, #0]
 800eef8:	f04f 30ff 	mov.w	r0, #4294967295
 800eefc:	e0d1      	b.n	800f0a2 <_svfiprintf_r+0x1d2>
 800eefe:	2340      	movs	r3, #64	; 0x40
 800ef00:	616b      	str	r3, [r5, #20]
 800ef02:	2300      	movs	r3, #0
 800ef04:	9309      	str	r3, [sp, #36]	; 0x24
 800ef06:	2320      	movs	r3, #32
 800ef08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef10:	2330      	movs	r3, #48	; 0x30
 800ef12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f0bc <_svfiprintf_r+0x1ec>
 800ef16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef1a:	f04f 0901 	mov.w	r9, #1
 800ef1e:	4623      	mov	r3, r4
 800ef20:	469a      	mov	sl, r3
 800ef22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef26:	b10a      	cbz	r2, 800ef2c <_svfiprintf_r+0x5c>
 800ef28:	2a25      	cmp	r2, #37	; 0x25
 800ef2a:	d1f9      	bne.n	800ef20 <_svfiprintf_r+0x50>
 800ef2c:	ebba 0b04 	subs.w	fp, sl, r4
 800ef30:	d00b      	beq.n	800ef4a <_svfiprintf_r+0x7a>
 800ef32:	465b      	mov	r3, fp
 800ef34:	4622      	mov	r2, r4
 800ef36:	4629      	mov	r1, r5
 800ef38:	4638      	mov	r0, r7
 800ef3a:	f7ff ff6d 	bl	800ee18 <__ssputs_r>
 800ef3e:	3001      	adds	r0, #1
 800ef40:	f000 80aa 	beq.w	800f098 <_svfiprintf_r+0x1c8>
 800ef44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef46:	445a      	add	r2, fp
 800ef48:	9209      	str	r2, [sp, #36]	; 0x24
 800ef4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	f000 80a2 	beq.w	800f098 <_svfiprintf_r+0x1c8>
 800ef54:	2300      	movs	r3, #0
 800ef56:	f04f 32ff 	mov.w	r2, #4294967295
 800ef5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef5e:	f10a 0a01 	add.w	sl, sl, #1
 800ef62:	9304      	str	r3, [sp, #16]
 800ef64:	9307      	str	r3, [sp, #28]
 800ef66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef6a:	931a      	str	r3, [sp, #104]	; 0x68
 800ef6c:	4654      	mov	r4, sl
 800ef6e:	2205      	movs	r2, #5
 800ef70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef74:	4851      	ldr	r0, [pc, #324]	; (800f0bc <_svfiprintf_r+0x1ec>)
 800ef76:	f7f1 f93b 	bl	80001f0 <memchr>
 800ef7a:	9a04      	ldr	r2, [sp, #16]
 800ef7c:	b9d8      	cbnz	r0, 800efb6 <_svfiprintf_r+0xe6>
 800ef7e:	06d0      	lsls	r0, r2, #27
 800ef80:	bf44      	itt	mi
 800ef82:	2320      	movmi	r3, #32
 800ef84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef88:	0711      	lsls	r1, r2, #28
 800ef8a:	bf44      	itt	mi
 800ef8c:	232b      	movmi	r3, #43	; 0x2b
 800ef8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef92:	f89a 3000 	ldrb.w	r3, [sl]
 800ef96:	2b2a      	cmp	r3, #42	; 0x2a
 800ef98:	d015      	beq.n	800efc6 <_svfiprintf_r+0xf6>
 800ef9a:	9a07      	ldr	r2, [sp, #28]
 800ef9c:	4654      	mov	r4, sl
 800ef9e:	2000      	movs	r0, #0
 800efa0:	f04f 0c0a 	mov.w	ip, #10
 800efa4:	4621      	mov	r1, r4
 800efa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efaa:	3b30      	subs	r3, #48	; 0x30
 800efac:	2b09      	cmp	r3, #9
 800efae:	d94e      	bls.n	800f04e <_svfiprintf_r+0x17e>
 800efb0:	b1b0      	cbz	r0, 800efe0 <_svfiprintf_r+0x110>
 800efb2:	9207      	str	r2, [sp, #28]
 800efb4:	e014      	b.n	800efe0 <_svfiprintf_r+0x110>
 800efb6:	eba0 0308 	sub.w	r3, r0, r8
 800efba:	fa09 f303 	lsl.w	r3, r9, r3
 800efbe:	4313      	orrs	r3, r2
 800efc0:	9304      	str	r3, [sp, #16]
 800efc2:	46a2      	mov	sl, r4
 800efc4:	e7d2      	b.n	800ef6c <_svfiprintf_r+0x9c>
 800efc6:	9b03      	ldr	r3, [sp, #12]
 800efc8:	1d19      	adds	r1, r3, #4
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	9103      	str	r1, [sp, #12]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	bfbb      	ittet	lt
 800efd2:	425b      	neglt	r3, r3
 800efd4:	f042 0202 	orrlt.w	r2, r2, #2
 800efd8:	9307      	strge	r3, [sp, #28]
 800efda:	9307      	strlt	r3, [sp, #28]
 800efdc:	bfb8      	it	lt
 800efde:	9204      	strlt	r2, [sp, #16]
 800efe0:	7823      	ldrb	r3, [r4, #0]
 800efe2:	2b2e      	cmp	r3, #46	; 0x2e
 800efe4:	d10c      	bne.n	800f000 <_svfiprintf_r+0x130>
 800efe6:	7863      	ldrb	r3, [r4, #1]
 800efe8:	2b2a      	cmp	r3, #42	; 0x2a
 800efea:	d135      	bne.n	800f058 <_svfiprintf_r+0x188>
 800efec:	9b03      	ldr	r3, [sp, #12]
 800efee:	1d1a      	adds	r2, r3, #4
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	9203      	str	r2, [sp, #12]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	bfb8      	it	lt
 800eff8:	f04f 33ff 	movlt.w	r3, #4294967295
 800effc:	3402      	adds	r4, #2
 800effe:	9305      	str	r3, [sp, #20]
 800f000:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f0cc <_svfiprintf_r+0x1fc>
 800f004:	7821      	ldrb	r1, [r4, #0]
 800f006:	2203      	movs	r2, #3
 800f008:	4650      	mov	r0, sl
 800f00a:	f7f1 f8f1 	bl	80001f0 <memchr>
 800f00e:	b140      	cbz	r0, 800f022 <_svfiprintf_r+0x152>
 800f010:	2340      	movs	r3, #64	; 0x40
 800f012:	eba0 000a 	sub.w	r0, r0, sl
 800f016:	fa03 f000 	lsl.w	r0, r3, r0
 800f01a:	9b04      	ldr	r3, [sp, #16]
 800f01c:	4303      	orrs	r3, r0
 800f01e:	3401      	adds	r4, #1
 800f020:	9304      	str	r3, [sp, #16]
 800f022:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f026:	4826      	ldr	r0, [pc, #152]	; (800f0c0 <_svfiprintf_r+0x1f0>)
 800f028:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f02c:	2206      	movs	r2, #6
 800f02e:	f7f1 f8df 	bl	80001f0 <memchr>
 800f032:	2800      	cmp	r0, #0
 800f034:	d038      	beq.n	800f0a8 <_svfiprintf_r+0x1d8>
 800f036:	4b23      	ldr	r3, [pc, #140]	; (800f0c4 <_svfiprintf_r+0x1f4>)
 800f038:	bb1b      	cbnz	r3, 800f082 <_svfiprintf_r+0x1b2>
 800f03a:	9b03      	ldr	r3, [sp, #12]
 800f03c:	3307      	adds	r3, #7
 800f03e:	f023 0307 	bic.w	r3, r3, #7
 800f042:	3308      	adds	r3, #8
 800f044:	9303      	str	r3, [sp, #12]
 800f046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f048:	4433      	add	r3, r6
 800f04a:	9309      	str	r3, [sp, #36]	; 0x24
 800f04c:	e767      	b.n	800ef1e <_svfiprintf_r+0x4e>
 800f04e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f052:	460c      	mov	r4, r1
 800f054:	2001      	movs	r0, #1
 800f056:	e7a5      	b.n	800efa4 <_svfiprintf_r+0xd4>
 800f058:	2300      	movs	r3, #0
 800f05a:	3401      	adds	r4, #1
 800f05c:	9305      	str	r3, [sp, #20]
 800f05e:	4619      	mov	r1, r3
 800f060:	f04f 0c0a 	mov.w	ip, #10
 800f064:	4620      	mov	r0, r4
 800f066:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f06a:	3a30      	subs	r2, #48	; 0x30
 800f06c:	2a09      	cmp	r2, #9
 800f06e:	d903      	bls.n	800f078 <_svfiprintf_r+0x1a8>
 800f070:	2b00      	cmp	r3, #0
 800f072:	d0c5      	beq.n	800f000 <_svfiprintf_r+0x130>
 800f074:	9105      	str	r1, [sp, #20]
 800f076:	e7c3      	b.n	800f000 <_svfiprintf_r+0x130>
 800f078:	fb0c 2101 	mla	r1, ip, r1, r2
 800f07c:	4604      	mov	r4, r0
 800f07e:	2301      	movs	r3, #1
 800f080:	e7f0      	b.n	800f064 <_svfiprintf_r+0x194>
 800f082:	ab03      	add	r3, sp, #12
 800f084:	9300      	str	r3, [sp, #0]
 800f086:	462a      	mov	r2, r5
 800f088:	4b0f      	ldr	r3, [pc, #60]	; (800f0c8 <_svfiprintf_r+0x1f8>)
 800f08a:	a904      	add	r1, sp, #16
 800f08c:	4638      	mov	r0, r7
 800f08e:	f3af 8000 	nop.w
 800f092:	1c42      	adds	r2, r0, #1
 800f094:	4606      	mov	r6, r0
 800f096:	d1d6      	bne.n	800f046 <_svfiprintf_r+0x176>
 800f098:	89ab      	ldrh	r3, [r5, #12]
 800f09a:	065b      	lsls	r3, r3, #25
 800f09c:	f53f af2c 	bmi.w	800eef8 <_svfiprintf_r+0x28>
 800f0a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0a2:	b01d      	add	sp, #116	; 0x74
 800f0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0a8:	ab03      	add	r3, sp, #12
 800f0aa:	9300      	str	r3, [sp, #0]
 800f0ac:	462a      	mov	r2, r5
 800f0ae:	4b06      	ldr	r3, [pc, #24]	; (800f0c8 <_svfiprintf_r+0x1f8>)
 800f0b0:	a904      	add	r1, sp, #16
 800f0b2:	4638      	mov	r0, r7
 800f0b4:	f000 f9d4 	bl	800f460 <_printf_i>
 800f0b8:	e7eb      	b.n	800f092 <_svfiprintf_r+0x1c2>
 800f0ba:	bf00      	nop
 800f0bc:	08012948 	.word	0x08012948
 800f0c0:	08012952 	.word	0x08012952
 800f0c4:	00000000 	.word	0x00000000
 800f0c8:	0800ee19 	.word	0x0800ee19
 800f0cc:	0801294e 	.word	0x0801294e

0800f0d0 <__sfputc_r>:
 800f0d0:	6893      	ldr	r3, [r2, #8]
 800f0d2:	3b01      	subs	r3, #1
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	b410      	push	{r4}
 800f0d8:	6093      	str	r3, [r2, #8]
 800f0da:	da08      	bge.n	800f0ee <__sfputc_r+0x1e>
 800f0dc:	6994      	ldr	r4, [r2, #24]
 800f0de:	42a3      	cmp	r3, r4
 800f0e0:	db01      	blt.n	800f0e6 <__sfputc_r+0x16>
 800f0e2:	290a      	cmp	r1, #10
 800f0e4:	d103      	bne.n	800f0ee <__sfputc_r+0x1e>
 800f0e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0ea:	f000 bb33 	b.w	800f754 <__swbuf_r>
 800f0ee:	6813      	ldr	r3, [r2, #0]
 800f0f0:	1c58      	adds	r0, r3, #1
 800f0f2:	6010      	str	r0, [r2, #0]
 800f0f4:	7019      	strb	r1, [r3, #0]
 800f0f6:	4608      	mov	r0, r1
 800f0f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0fc:	4770      	bx	lr

0800f0fe <__sfputs_r>:
 800f0fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f100:	4606      	mov	r6, r0
 800f102:	460f      	mov	r7, r1
 800f104:	4614      	mov	r4, r2
 800f106:	18d5      	adds	r5, r2, r3
 800f108:	42ac      	cmp	r4, r5
 800f10a:	d101      	bne.n	800f110 <__sfputs_r+0x12>
 800f10c:	2000      	movs	r0, #0
 800f10e:	e007      	b.n	800f120 <__sfputs_r+0x22>
 800f110:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f114:	463a      	mov	r2, r7
 800f116:	4630      	mov	r0, r6
 800f118:	f7ff ffda 	bl	800f0d0 <__sfputc_r>
 800f11c:	1c43      	adds	r3, r0, #1
 800f11e:	d1f3      	bne.n	800f108 <__sfputs_r+0xa>
 800f120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f124 <_vfiprintf_r>:
 800f124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f128:	460d      	mov	r5, r1
 800f12a:	b09d      	sub	sp, #116	; 0x74
 800f12c:	4614      	mov	r4, r2
 800f12e:	4698      	mov	r8, r3
 800f130:	4606      	mov	r6, r0
 800f132:	b118      	cbz	r0, 800f13c <_vfiprintf_r+0x18>
 800f134:	6983      	ldr	r3, [r0, #24]
 800f136:	b90b      	cbnz	r3, 800f13c <_vfiprintf_r+0x18>
 800f138:	f7ff fcd4 	bl	800eae4 <__sinit>
 800f13c:	4b89      	ldr	r3, [pc, #548]	; (800f364 <_vfiprintf_r+0x240>)
 800f13e:	429d      	cmp	r5, r3
 800f140:	d11b      	bne.n	800f17a <_vfiprintf_r+0x56>
 800f142:	6875      	ldr	r5, [r6, #4]
 800f144:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f146:	07d9      	lsls	r1, r3, #31
 800f148:	d405      	bmi.n	800f156 <_vfiprintf_r+0x32>
 800f14a:	89ab      	ldrh	r3, [r5, #12]
 800f14c:	059a      	lsls	r2, r3, #22
 800f14e:	d402      	bmi.n	800f156 <_vfiprintf_r+0x32>
 800f150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f152:	f7ff fd77 	bl	800ec44 <__retarget_lock_acquire_recursive>
 800f156:	89ab      	ldrh	r3, [r5, #12]
 800f158:	071b      	lsls	r3, r3, #28
 800f15a:	d501      	bpl.n	800f160 <_vfiprintf_r+0x3c>
 800f15c:	692b      	ldr	r3, [r5, #16]
 800f15e:	b9eb      	cbnz	r3, 800f19c <_vfiprintf_r+0x78>
 800f160:	4629      	mov	r1, r5
 800f162:	4630      	mov	r0, r6
 800f164:	f000 fb5a 	bl	800f81c <__swsetup_r>
 800f168:	b1c0      	cbz	r0, 800f19c <_vfiprintf_r+0x78>
 800f16a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f16c:	07dc      	lsls	r4, r3, #31
 800f16e:	d50e      	bpl.n	800f18e <_vfiprintf_r+0x6a>
 800f170:	f04f 30ff 	mov.w	r0, #4294967295
 800f174:	b01d      	add	sp, #116	; 0x74
 800f176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f17a:	4b7b      	ldr	r3, [pc, #492]	; (800f368 <_vfiprintf_r+0x244>)
 800f17c:	429d      	cmp	r5, r3
 800f17e:	d101      	bne.n	800f184 <_vfiprintf_r+0x60>
 800f180:	68b5      	ldr	r5, [r6, #8]
 800f182:	e7df      	b.n	800f144 <_vfiprintf_r+0x20>
 800f184:	4b79      	ldr	r3, [pc, #484]	; (800f36c <_vfiprintf_r+0x248>)
 800f186:	429d      	cmp	r5, r3
 800f188:	bf08      	it	eq
 800f18a:	68f5      	ldreq	r5, [r6, #12]
 800f18c:	e7da      	b.n	800f144 <_vfiprintf_r+0x20>
 800f18e:	89ab      	ldrh	r3, [r5, #12]
 800f190:	0598      	lsls	r0, r3, #22
 800f192:	d4ed      	bmi.n	800f170 <_vfiprintf_r+0x4c>
 800f194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f196:	f7ff fd56 	bl	800ec46 <__retarget_lock_release_recursive>
 800f19a:	e7e9      	b.n	800f170 <_vfiprintf_r+0x4c>
 800f19c:	2300      	movs	r3, #0
 800f19e:	9309      	str	r3, [sp, #36]	; 0x24
 800f1a0:	2320      	movs	r3, #32
 800f1a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f1a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1aa:	2330      	movs	r3, #48	; 0x30
 800f1ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f370 <_vfiprintf_r+0x24c>
 800f1b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1b4:	f04f 0901 	mov.w	r9, #1
 800f1b8:	4623      	mov	r3, r4
 800f1ba:	469a      	mov	sl, r3
 800f1bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1c0:	b10a      	cbz	r2, 800f1c6 <_vfiprintf_r+0xa2>
 800f1c2:	2a25      	cmp	r2, #37	; 0x25
 800f1c4:	d1f9      	bne.n	800f1ba <_vfiprintf_r+0x96>
 800f1c6:	ebba 0b04 	subs.w	fp, sl, r4
 800f1ca:	d00b      	beq.n	800f1e4 <_vfiprintf_r+0xc0>
 800f1cc:	465b      	mov	r3, fp
 800f1ce:	4622      	mov	r2, r4
 800f1d0:	4629      	mov	r1, r5
 800f1d2:	4630      	mov	r0, r6
 800f1d4:	f7ff ff93 	bl	800f0fe <__sfputs_r>
 800f1d8:	3001      	adds	r0, #1
 800f1da:	f000 80aa 	beq.w	800f332 <_vfiprintf_r+0x20e>
 800f1de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1e0:	445a      	add	r2, fp
 800f1e2:	9209      	str	r2, [sp, #36]	; 0x24
 800f1e4:	f89a 3000 	ldrb.w	r3, [sl]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	f000 80a2 	beq.w	800f332 <_vfiprintf_r+0x20e>
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	f04f 32ff 	mov.w	r2, #4294967295
 800f1f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1f8:	f10a 0a01 	add.w	sl, sl, #1
 800f1fc:	9304      	str	r3, [sp, #16]
 800f1fe:	9307      	str	r3, [sp, #28]
 800f200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f204:	931a      	str	r3, [sp, #104]	; 0x68
 800f206:	4654      	mov	r4, sl
 800f208:	2205      	movs	r2, #5
 800f20a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f20e:	4858      	ldr	r0, [pc, #352]	; (800f370 <_vfiprintf_r+0x24c>)
 800f210:	f7f0 ffee 	bl	80001f0 <memchr>
 800f214:	9a04      	ldr	r2, [sp, #16]
 800f216:	b9d8      	cbnz	r0, 800f250 <_vfiprintf_r+0x12c>
 800f218:	06d1      	lsls	r1, r2, #27
 800f21a:	bf44      	itt	mi
 800f21c:	2320      	movmi	r3, #32
 800f21e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f222:	0713      	lsls	r3, r2, #28
 800f224:	bf44      	itt	mi
 800f226:	232b      	movmi	r3, #43	; 0x2b
 800f228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f22c:	f89a 3000 	ldrb.w	r3, [sl]
 800f230:	2b2a      	cmp	r3, #42	; 0x2a
 800f232:	d015      	beq.n	800f260 <_vfiprintf_r+0x13c>
 800f234:	9a07      	ldr	r2, [sp, #28]
 800f236:	4654      	mov	r4, sl
 800f238:	2000      	movs	r0, #0
 800f23a:	f04f 0c0a 	mov.w	ip, #10
 800f23e:	4621      	mov	r1, r4
 800f240:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f244:	3b30      	subs	r3, #48	; 0x30
 800f246:	2b09      	cmp	r3, #9
 800f248:	d94e      	bls.n	800f2e8 <_vfiprintf_r+0x1c4>
 800f24a:	b1b0      	cbz	r0, 800f27a <_vfiprintf_r+0x156>
 800f24c:	9207      	str	r2, [sp, #28]
 800f24e:	e014      	b.n	800f27a <_vfiprintf_r+0x156>
 800f250:	eba0 0308 	sub.w	r3, r0, r8
 800f254:	fa09 f303 	lsl.w	r3, r9, r3
 800f258:	4313      	orrs	r3, r2
 800f25a:	9304      	str	r3, [sp, #16]
 800f25c:	46a2      	mov	sl, r4
 800f25e:	e7d2      	b.n	800f206 <_vfiprintf_r+0xe2>
 800f260:	9b03      	ldr	r3, [sp, #12]
 800f262:	1d19      	adds	r1, r3, #4
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	9103      	str	r1, [sp, #12]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	bfbb      	ittet	lt
 800f26c:	425b      	neglt	r3, r3
 800f26e:	f042 0202 	orrlt.w	r2, r2, #2
 800f272:	9307      	strge	r3, [sp, #28]
 800f274:	9307      	strlt	r3, [sp, #28]
 800f276:	bfb8      	it	lt
 800f278:	9204      	strlt	r2, [sp, #16]
 800f27a:	7823      	ldrb	r3, [r4, #0]
 800f27c:	2b2e      	cmp	r3, #46	; 0x2e
 800f27e:	d10c      	bne.n	800f29a <_vfiprintf_r+0x176>
 800f280:	7863      	ldrb	r3, [r4, #1]
 800f282:	2b2a      	cmp	r3, #42	; 0x2a
 800f284:	d135      	bne.n	800f2f2 <_vfiprintf_r+0x1ce>
 800f286:	9b03      	ldr	r3, [sp, #12]
 800f288:	1d1a      	adds	r2, r3, #4
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	9203      	str	r2, [sp, #12]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	bfb8      	it	lt
 800f292:	f04f 33ff 	movlt.w	r3, #4294967295
 800f296:	3402      	adds	r4, #2
 800f298:	9305      	str	r3, [sp, #20]
 800f29a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f380 <_vfiprintf_r+0x25c>
 800f29e:	7821      	ldrb	r1, [r4, #0]
 800f2a0:	2203      	movs	r2, #3
 800f2a2:	4650      	mov	r0, sl
 800f2a4:	f7f0 ffa4 	bl	80001f0 <memchr>
 800f2a8:	b140      	cbz	r0, 800f2bc <_vfiprintf_r+0x198>
 800f2aa:	2340      	movs	r3, #64	; 0x40
 800f2ac:	eba0 000a 	sub.w	r0, r0, sl
 800f2b0:	fa03 f000 	lsl.w	r0, r3, r0
 800f2b4:	9b04      	ldr	r3, [sp, #16]
 800f2b6:	4303      	orrs	r3, r0
 800f2b8:	3401      	adds	r4, #1
 800f2ba:	9304      	str	r3, [sp, #16]
 800f2bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2c0:	482c      	ldr	r0, [pc, #176]	; (800f374 <_vfiprintf_r+0x250>)
 800f2c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2c6:	2206      	movs	r2, #6
 800f2c8:	f7f0 ff92 	bl	80001f0 <memchr>
 800f2cc:	2800      	cmp	r0, #0
 800f2ce:	d03f      	beq.n	800f350 <_vfiprintf_r+0x22c>
 800f2d0:	4b29      	ldr	r3, [pc, #164]	; (800f378 <_vfiprintf_r+0x254>)
 800f2d2:	bb1b      	cbnz	r3, 800f31c <_vfiprintf_r+0x1f8>
 800f2d4:	9b03      	ldr	r3, [sp, #12]
 800f2d6:	3307      	adds	r3, #7
 800f2d8:	f023 0307 	bic.w	r3, r3, #7
 800f2dc:	3308      	adds	r3, #8
 800f2de:	9303      	str	r3, [sp, #12]
 800f2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2e2:	443b      	add	r3, r7
 800f2e4:	9309      	str	r3, [sp, #36]	; 0x24
 800f2e6:	e767      	b.n	800f1b8 <_vfiprintf_r+0x94>
 800f2e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2ec:	460c      	mov	r4, r1
 800f2ee:	2001      	movs	r0, #1
 800f2f0:	e7a5      	b.n	800f23e <_vfiprintf_r+0x11a>
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	3401      	adds	r4, #1
 800f2f6:	9305      	str	r3, [sp, #20]
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	f04f 0c0a 	mov.w	ip, #10
 800f2fe:	4620      	mov	r0, r4
 800f300:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f304:	3a30      	subs	r2, #48	; 0x30
 800f306:	2a09      	cmp	r2, #9
 800f308:	d903      	bls.n	800f312 <_vfiprintf_r+0x1ee>
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d0c5      	beq.n	800f29a <_vfiprintf_r+0x176>
 800f30e:	9105      	str	r1, [sp, #20]
 800f310:	e7c3      	b.n	800f29a <_vfiprintf_r+0x176>
 800f312:	fb0c 2101 	mla	r1, ip, r1, r2
 800f316:	4604      	mov	r4, r0
 800f318:	2301      	movs	r3, #1
 800f31a:	e7f0      	b.n	800f2fe <_vfiprintf_r+0x1da>
 800f31c:	ab03      	add	r3, sp, #12
 800f31e:	9300      	str	r3, [sp, #0]
 800f320:	462a      	mov	r2, r5
 800f322:	4b16      	ldr	r3, [pc, #88]	; (800f37c <_vfiprintf_r+0x258>)
 800f324:	a904      	add	r1, sp, #16
 800f326:	4630      	mov	r0, r6
 800f328:	f3af 8000 	nop.w
 800f32c:	4607      	mov	r7, r0
 800f32e:	1c78      	adds	r0, r7, #1
 800f330:	d1d6      	bne.n	800f2e0 <_vfiprintf_r+0x1bc>
 800f332:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f334:	07d9      	lsls	r1, r3, #31
 800f336:	d405      	bmi.n	800f344 <_vfiprintf_r+0x220>
 800f338:	89ab      	ldrh	r3, [r5, #12]
 800f33a:	059a      	lsls	r2, r3, #22
 800f33c:	d402      	bmi.n	800f344 <_vfiprintf_r+0x220>
 800f33e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f340:	f7ff fc81 	bl	800ec46 <__retarget_lock_release_recursive>
 800f344:	89ab      	ldrh	r3, [r5, #12]
 800f346:	065b      	lsls	r3, r3, #25
 800f348:	f53f af12 	bmi.w	800f170 <_vfiprintf_r+0x4c>
 800f34c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f34e:	e711      	b.n	800f174 <_vfiprintf_r+0x50>
 800f350:	ab03      	add	r3, sp, #12
 800f352:	9300      	str	r3, [sp, #0]
 800f354:	462a      	mov	r2, r5
 800f356:	4b09      	ldr	r3, [pc, #36]	; (800f37c <_vfiprintf_r+0x258>)
 800f358:	a904      	add	r1, sp, #16
 800f35a:	4630      	mov	r0, r6
 800f35c:	f000 f880 	bl	800f460 <_printf_i>
 800f360:	e7e4      	b.n	800f32c <_vfiprintf_r+0x208>
 800f362:	bf00      	nop
 800f364:	08012908 	.word	0x08012908
 800f368:	08012928 	.word	0x08012928
 800f36c:	080128e8 	.word	0x080128e8
 800f370:	08012948 	.word	0x08012948
 800f374:	08012952 	.word	0x08012952
 800f378:	00000000 	.word	0x00000000
 800f37c:	0800f0ff 	.word	0x0800f0ff
 800f380:	0801294e 	.word	0x0801294e

0800f384 <_printf_common>:
 800f384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f388:	4616      	mov	r6, r2
 800f38a:	4699      	mov	r9, r3
 800f38c:	688a      	ldr	r2, [r1, #8]
 800f38e:	690b      	ldr	r3, [r1, #16]
 800f390:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f394:	4293      	cmp	r3, r2
 800f396:	bfb8      	it	lt
 800f398:	4613      	movlt	r3, r2
 800f39a:	6033      	str	r3, [r6, #0]
 800f39c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f3a0:	4607      	mov	r7, r0
 800f3a2:	460c      	mov	r4, r1
 800f3a4:	b10a      	cbz	r2, 800f3aa <_printf_common+0x26>
 800f3a6:	3301      	adds	r3, #1
 800f3a8:	6033      	str	r3, [r6, #0]
 800f3aa:	6823      	ldr	r3, [r4, #0]
 800f3ac:	0699      	lsls	r1, r3, #26
 800f3ae:	bf42      	ittt	mi
 800f3b0:	6833      	ldrmi	r3, [r6, #0]
 800f3b2:	3302      	addmi	r3, #2
 800f3b4:	6033      	strmi	r3, [r6, #0]
 800f3b6:	6825      	ldr	r5, [r4, #0]
 800f3b8:	f015 0506 	ands.w	r5, r5, #6
 800f3bc:	d106      	bne.n	800f3cc <_printf_common+0x48>
 800f3be:	f104 0a19 	add.w	sl, r4, #25
 800f3c2:	68e3      	ldr	r3, [r4, #12]
 800f3c4:	6832      	ldr	r2, [r6, #0]
 800f3c6:	1a9b      	subs	r3, r3, r2
 800f3c8:	42ab      	cmp	r3, r5
 800f3ca:	dc26      	bgt.n	800f41a <_printf_common+0x96>
 800f3cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f3d0:	1e13      	subs	r3, r2, #0
 800f3d2:	6822      	ldr	r2, [r4, #0]
 800f3d4:	bf18      	it	ne
 800f3d6:	2301      	movne	r3, #1
 800f3d8:	0692      	lsls	r2, r2, #26
 800f3da:	d42b      	bmi.n	800f434 <_printf_common+0xb0>
 800f3dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f3e0:	4649      	mov	r1, r9
 800f3e2:	4638      	mov	r0, r7
 800f3e4:	47c0      	blx	r8
 800f3e6:	3001      	adds	r0, #1
 800f3e8:	d01e      	beq.n	800f428 <_printf_common+0xa4>
 800f3ea:	6823      	ldr	r3, [r4, #0]
 800f3ec:	68e5      	ldr	r5, [r4, #12]
 800f3ee:	6832      	ldr	r2, [r6, #0]
 800f3f0:	f003 0306 	and.w	r3, r3, #6
 800f3f4:	2b04      	cmp	r3, #4
 800f3f6:	bf08      	it	eq
 800f3f8:	1aad      	subeq	r5, r5, r2
 800f3fa:	68a3      	ldr	r3, [r4, #8]
 800f3fc:	6922      	ldr	r2, [r4, #16]
 800f3fe:	bf0c      	ite	eq
 800f400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f404:	2500      	movne	r5, #0
 800f406:	4293      	cmp	r3, r2
 800f408:	bfc4      	itt	gt
 800f40a:	1a9b      	subgt	r3, r3, r2
 800f40c:	18ed      	addgt	r5, r5, r3
 800f40e:	2600      	movs	r6, #0
 800f410:	341a      	adds	r4, #26
 800f412:	42b5      	cmp	r5, r6
 800f414:	d11a      	bne.n	800f44c <_printf_common+0xc8>
 800f416:	2000      	movs	r0, #0
 800f418:	e008      	b.n	800f42c <_printf_common+0xa8>
 800f41a:	2301      	movs	r3, #1
 800f41c:	4652      	mov	r2, sl
 800f41e:	4649      	mov	r1, r9
 800f420:	4638      	mov	r0, r7
 800f422:	47c0      	blx	r8
 800f424:	3001      	adds	r0, #1
 800f426:	d103      	bne.n	800f430 <_printf_common+0xac>
 800f428:	f04f 30ff 	mov.w	r0, #4294967295
 800f42c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f430:	3501      	adds	r5, #1
 800f432:	e7c6      	b.n	800f3c2 <_printf_common+0x3e>
 800f434:	18e1      	adds	r1, r4, r3
 800f436:	1c5a      	adds	r2, r3, #1
 800f438:	2030      	movs	r0, #48	; 0x30
 800f43a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f43e:	4422      	add	r2, r4
 800f440:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f444:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f448:	3302      	adds	r3, #2
 800f44a:	e7c7      	b.n	800f3dc <_printf_common+0x58>
 800f44c:	2301      	movs	r3, #1
 800f44e:	4622      	mov	r2, r4
 800f450:	4649      	mov	r1, r9
 800f452:	4638      	mov	r0, r7
 800f454:	47c0      	blx	r8
 800f456:	3001      	adds	r0, #1
 800f458:	d0e6      	beq.n	800f428 <_printf_common+0xa4>
 800f45a:	3601      	adds	r6, #1
 800f45c:	e7d9      	b.n	800f412 <_printf_common+0x8e>
	...

0800f460 <_printf_i>:
 800f460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f464:	7e0f      	ldrb	r7, [r1, #24]
 800f466:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f468:	2f78      	cmp	r7, #120	; 0x78
 800f46a:	4691      	mov	r9, r2
 800f46c:	4680      	mov	r8, r0
 800f46e:	460c      	mov	r4, r1
 800f470:	469a      	mov	sl, r3
 800f472:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f476:	d807      	bhi.n	800f488 <_printf_i+0x28>
 800f478:	2f62      	cmp	r7, #98	; 0x62
 800f47a:	d80a      	bhi.n	800f492 <_printf_i+0x32>
 800f47c:	2f00      	cmp	r7, #0
 800f47e:	f000 80d8 	beq.w	800f632 <_printf_i+0x1d2>
 800f482:	2f58      	cmp	r7, #88	; 0x58
 800f484:	f000 80a3 	beq.w	800f5ce <_printf_i+0x16e>
 800f488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f48c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f490:	e03a      	b.n	800f508 <_printf_i+0xa8>
 800f492:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f496:	2b15      	cmp	r3, #21
 800f498:	d8f6      	bhi.n	800f488 <_printf_i+0x28>
 800f49a:	a101      	add	r1, pc, #4	; (adr r1, 800f4a0 <_printf_i+0x40>)
 800f49c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f4a0:	0800f4f9 	.word	0x0800f4f9
 800f4a4:	0800f50d 	.word	0x0800f50d
 800f4a8:	0800f489 	.word	0x0800f489
 800f4ac:	0800f489 	.word	0x0800f489
 800f4b0:	0800f489 	.word	0x0800f489
 800f4b4:	0800f489 	.word	0x0800f489
 800f4b8:	0800f50d 	.word	0x0800f50d
 800f4bc:	0800f489 	.word	0x0800f489
 800f4c0:	0800f489 	.word	0x0800f489
 800f4c4:	0800f489 	.word	0x0800f489
 800f4c8:	0800f489 	.word	0x0800f489
 800f4cc:	0800f619 	.word	0x0800f619
 800f4d0:	0800f53d 	.word	0x0800f53d
 800f4d4:	0800f5fb 	.word	0x0800f5fb
 800f4d8:	0800f489 	.word	0x0800f489
 800f4dc:	0800f489 	.word	0x0800f489
 800f4e0:	0800f63b 	.word	0x0800f63b
 800f4e4:	0800f489 	.word	0x0800f489
 800f4e8:	0800f53d 	.word	0x0800f53d
 800f4ec:	0800f489 	.word	0x0800f489
 800f4f0:	0800f489 	.word	0x0800f489
 800f4f4:	0800f603 	.word	0x0800f603
 800f4f8:	682b      	ldr	r3, [r5, #0]
 800f4fa:	1d1a      	adds	r2, r3, #4
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	602a      	str	r2, [r5, #0]
 800f500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f504:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f508:	2301      	movs	r3, #1
 800f50a:	e0a3      	b.n	800f654 <_printf_i+0x1f4>
 800f50c:	6820      	ldr	r0, [r4, #0]
 800f50e:	6829      	ldr	r1, [r5, #0]
 800f510:	0606      	lsls	r6, r0, #24
 800f512:	f101 0304 	add.w	r3, r1, #4
 800f516:	d50a      	bpl.n	800f52e <_printf_i+0xce>
 800f518:	680e      	ldr	r6, [r1, #0]
 800f51a:	602b      	str	r3, [r5, #0]
 800f51c:	2e00      	cmp	r6, #0
 800f51e:	da03      	bge.n	800f528 <_printf_i+0xc8>
 800f520:	232d      	movs	r3, #45	; 0x2d
 800f522:	4276      	negs	r6, r6
 800f524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f528:	485e      	ldr	r0, [pc, #376]	; (800f6a4 <_printf_i+0x244>)
 800f52a:	230a      	movs	r3, #10
 800f52c:	e019      	b.n	800f562 <_printf_i+0x102>
 800f52e:	680e      	ldr	r6, [r1, #0]
 800f530:	602b      	str	r3, [r5, #0]
 800f532:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f536:	bf18      	it	ne
 800f538:	b236      	sxthne	r6, r6
 800f53a:	e7ef      	b.n	800f51c <_printf_i+0xbc>
 800f53c:	682b      	ldr	r3, [r5, #0]
 800f53e:	6820      	ldr	r0, [r4, #0]
 800f540:	1d19      	adds	r1, r3, #4
 800f542:	6029      	str	r1, [r5, #0]
 800f544:	0601      	lsls	r1, r0, #24
 800f546:	d501      	bpl.n	800f54c <_printf_i+0xec>
 800f548:	681e      	ldr	r6, [r3, #0]
 800f54a:	e002      	b.n	800f552 <_printf_i+0xf2>
 800f54c:	0646      	lsls	r6, r0, #25
 800f54e:	d5fb      	bpl.n	800f548 <_printf_i+0xe8>
 800f550:	881e      	ldrh	r6, [r3, #0]
 800f552:	4854      	ldr	r0, [pc, #336]	; (800f6a4 <_printf_i+0x244>)
 800f554:	2f6f      	cmp	r7, #111	; 0x6f
 800f556:	bf0c      	ite	eq
 800f558:	2308      	moveq	r3, #8
 800f55a:	230a      	movne	r3, #10
 800f55c:	2100      	movs	r1, #0
 800f55e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f562:	6865      	ldr	r5, [r4, #4]
 800f564:	60a5      	str	r5, [r4, #8]
 800f566:	2d00      	cmp	r5, #0
 800f568:	bfa2      	ittt	ge
 800f56a:	6821      	ldrge	r1, [r4, #0]
 800f56c:	f021 0104 	bicge.w	r1, r1, #4
 800f570:	6021      	strge	r1, [r4, #0]
 800f572:	b90e      	cbnz	r6, 800f578 <_printf_i+0x118>
 800f574:	2d00      	cmp	r5, #0
 800f576:	d04d      	beq.n	800f614 <_printf_i+0x1b4>
 800f578:	4615      	mov	r5, r2
 800f57a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f57e:	fb03 6711 	mls	r7, r3, r1, r6
 800f582:	5dc7      	ldrb	r7, [r0, r7]
 800f584:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f588:	4637      	mov	r7, r6
 800f58a:	42bb      	cmp	r3, r7
 800f58c:	460e      	mov	r6, r1
 800f58e:	d9f4      	bls.n	800f57a <_printf_i+0x11a>
 800f590:	2b08      	cmp	r3, #8
 800f592:	d10b      	bne.n	800f5ac <_printf_i+0x14c>
 800f594:	6823      	ldr	r3, [r4, #0]
 800f596:	07de      	lsls	r6, r3, #31
 800f598:	d508      	bpl.n	800f5ac <_printf_i+0x14c>
 800f59a:	6923      	ldr	r3, [r4, #16]
 800f59c:	6861      	ldr	r1, [r4, #4]
 800f59e:	4299      	cmp	r1, r3
 800f5a0:	bfde      	ittt	le
 800f5a2:	2330      	movle	r3, #48	; 0x30
 800f5a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f5a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f5ac:	1b52      	subs	r2, r2, r5
 800f5ae:	6122      	str	r2, [r4, #16]
 800f5b0:	f8cd a000 	str.w	sl, [sp]
 800f5b4:	464b      	mov	r3, r9
 800f5b6:	aa03      	add	r2, sp, #12
 800f5b8:	4621      	mov	r1, r4
 800f5ba:	4640      	mov	r0, r8
 800f5bc:	f7ff fee2 	bl	800f384 <_printf_common>
 800f5c0:	3001      	adds	r0, #1
 800f5c2:	d14c      	bne.n	800f65e <_printf_i+0x1fe>
 800f5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f5c8:	b004      	add	sp, #16
 800f5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5ce:	4835      	ldr	r0, [pc, #212]	; (800f6a4 <_printf_i+0x244>)
 800f5d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f5d4:	6829      	ldr	r1, [r5, #0]
 800f5d6:	6823      	ldr	r3, [r4, #0]
 800f5d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800f5dc:	6029      	str	r1, [r5, #0]
 800f5de:	061d      	lsls	r5, r3, #24
 800f5e0:	d514      	bpl.n	800f60c <_printf_i+0x1ac>
 800f5e2:	07df      	lsls	r7, r3, #31
 800f5e4:	bf44      	itt	mi
 800f5e6:	f043 0320 	orrmi.w	r3, r3, #32
 800f5ea:	6023      	strmi	r3, [r4, #0]
 800f5ec:	b91e      	cbnz	r6, 800f5f6 <_printf_i+0x196>
 800f5ee:	6823      	ldr	r3, [r4, #0]
 800f5f0:	f023 0320 	bic.w	r3, r3, #32
 800f5f4:	6023      	str	r3, [r4, #0]
 800f5f6:	2310      	movs	r3, #16
 800f5f8:	e7b0      	b.n	800f55c <_printf_i+0xfc>
 800f5fa:	6823      	ldr	r3, [r4, #0]
 800f5fc:	f043 0320 	orr.w	r3, r3, #32
 800f600:	6023      	str	r3, [r4, #0]
 800f602:	2378      	movs	r3, #120	; 0x78
 800f604:	4828      	ldr	r0, [pc, #160]	; (800f6a8 <_printf_i+0x248>)
 800f606:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f60a:	e7e3      	b.n	800f5d4 <_printf_i+0x174>
 800f60c:	0659      	lsls	r1, r3, #25
 800f60e:	bf48      	it	mi
 800f610:	b2b6      	uxthmi	r6, r6
 800f612:	e7e6      	b.n	800f5e2 <_printf_i+0x182>
 800f614:	4615      	mov	r5, r2
 800f616:	e7bb      	b.n	800f590 <_printf_i+0x130>
 800f618:	682b      	ldr	r3, [r5, #0]
 800f61a:	6826      	ldr	r6, [r4, #0]
 800f61c:	6961      	ldr	r1, [r4, #20]
 800f61e:	1d18      	adds	r0, r3, #4
 800f620:	6028      	str	r0, [r5, #0]
 800f622:	0635      	lsls	r5, r6, #24
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	d501      	bpl.n	800f62c <_printf_i+0x1cc>
 800f628:	6019      	str	r1, [r3, #0]
 800f62a:	e002      	b.n	800f632 <_printf_i+0x1d2>
 800f62c:	0670      	lsls	r0, r6, #25
 800f62e:	d5fb      	bpl.n	800f628 <_printf_i+0x1c8>
 800f630:	8019      	strh	r1, [r3, #0]
 800f632:	2300      	movs	r3, #0
 800f634:	6123      	str	r3, [r4, #16]
 800f636:	4615      	mov	r5, r2
 800f638:	e7ba      	b.n	800f5b0 <_printf_i+0x150>
 800f63a:	682b      	ldr	r3, [r5, #0]
 800f63c:	1d1a      	adds	r2, r3, #4
 800f63e:	602a      	str	r2, [r5, #0]
 800f640:	681d      	ldr	r5, [r3, #0]
 800f642:	6862      	ldr	r2, [r4, #4]
 800f644:	2100      	movs	r1, #0
 800f646:	4628      	mov	r0, r5
 800f648:	f7f0 fdd2 	bl	80001f0 <memchr>
 800f64c:	b108      	cbz	r0, 800f652 <_printf_i+0x1f2>
 800f64e:	1b40      	subs	r0, r0, r5
 800f650:	6060      	str	r0, [r4, #4]
 800f652:	6863      	ldr	r3, [r4, #4]
 800f654:	6123      	str	r3, [r4, #16]
 800f656:	2300      	movs	r3, #0
 800f658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f65c:	e7a8      	b.n	800f5b0 <_printf_i+0x150>
 800f65e:	6923      	ldr	r3, [r4, #16]
 800f660:	462a      	mov	r2, r5
 800f662:	4649      	mov	r1, r9
 800f664:	4640      	mov	r0, r8
 800f666:	47d0      	blx	sl
 800f668:	3001      	adds	r0, #1
 800f66a:	d0ab      	beq.n	800f5c4 <_printf_i+0x164>
 800f66c:	6823      	ldr	r3, [r4, #0]
 800f66e:	079b      	lsls	r3, r3, #30
 800f670:	d413      	bmi.n	800f69a <_printf_i+0x23a>
 800f672:	68e0      	ldr	r0, [r4, #12]
 800f674:	9b03      	ldr	r3, [sp, #12]
 800f676:	4298      	cmp	r0, r3
 800f678:	bfb8      	it	lt
 800f67a:	4618      	movlt	r0, r3
 800f67c:	e7a4      	b.n	800f5c8 <_printf_i+0x168>
 800f67e:	2301      	movs	r3, #1
 800f680:	4632      	mov	r2, r6
 800f682:	4649      	mov	r1, r9
 800f684:	4640      	mov	r0, r8
 800f686:	47d0      	blx	sl
 800f688:	3001      	adds	r0, #1
 800f68a:	d09b      	beq.n	800f5c4 <_printf_i+0x164>
 800f68c:	3501      	adds	r5, #1
 800f68e:	68e3      	ldr	r3, [r4, #12]
 800f690:	9903      	ldr	r1, [sp, #12]
 800f692:	1a5b      	subs	r3, r3, r1
 800f694:	42ab      	cmp	r3, r5
 800f696:	dcf2      	bgt.n	800f67e <_printf_i+0x21e>
 800f698:	e7eb      	b.n	800f672 <_printf_i+0x212>
 800f69a:	2500      	movs	r5, #0
 800f69c:	f104 0619 	add.w	r6, r4, #25
 800f6a0:	e7f5      	b.n	800f68e <_printf_i+0x22e>
 800f6a2:	bf00      	nop
 800f6a4:	08012959 	.word	0x08012959
 800f6a8:	0801296a 	.word	0x0801296a

0800f6ac <_sbrk_r>:
 800f6ac:	b538      	push	{r3, r4, r5, lr}
 800f6ae:	4d06      	ldr	r5, [pc, #24]	; (800f6c8 <_sbrk_r+0x1c>)
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	4604      	mov	r4, r0
 800f6b4:	4608      	mov	r0, r1
 800f6b6:	602b      	str	r3, [r5, #0]
 800f6b8:	f7f1 fbce 	bl	8000e58 <_sbrk>
 800f6bc:	1c43      	adds	r3, r0, #1
 800f6be:	d102      	bne.n	800f6c6 <_sbrk_r+0x1a>
 800f6c0:	682b      	ldr	r3, [r5, #0]
 800f6c2:	b103      	cbz	r3, 800f6c6 <_sbrk_r+0x1a>
 800f6c4:	6023      	str	r3, [r4, #0]
 800f6c6:	bd38      	pop	{r3, r4, r5, pc}
 800f6c8:	2000845c 	.word	0x2000845c

0800f6cc <__sread>:
 800f6cc:	b510      	push	{r4, lr}
 800f6ce:	460c      	mov	r4, r1
 800f6d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6d4:	f000 fa9e 	bl	800fc14 <_read_r>
 800f6d8:	2800      	cmp	r0, #0
 800f6da:	bfab      	itete	ge
 800f6dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f6de:	89a3      	ldrhlt	r3, [r4, #12]
 800f6e0:	181b      	addge	r3, r3, r0
 800f6e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f6e6:	bfac      	ite	ge
 800f6e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800f6ea:	81a3      	strhlt	r3, [r4, #12]
 800f6ec:	bd10      	pop	{r4, pc}

0800f6ee <__swrite>:
 800f6ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6f2:	461f      	mov	r7, r3
 800f6f4:	898b      	ldrh	r3, [r1, #12]
 800f6f6:	05db      	lsls	r3, r3, #23
 800f6f8:	4605      	mov	r5, r0
 800f6fa:	460c      	mov	r4, r1
 800f6fc:	4616      	mov	r6, r2
 800f6fe:	d505      	bpl.n	800f70c <__swrite+0x1e>
 800f700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f704:	2302      	movs	r3, #2
 800f706:	2200      	movs	r2, #0
 800f708:	f000 f9d0 	bl	800faac <_lseek_r>
 800f70c:	89a3      	ldrh	r3, [r4, #12]
 800f70e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f712:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f716:	81a3      	strh	r3, [r4, #12]
 800f718:	4632      	mov	r2, r6
 800f71a:	463b      	mov	r3, r7
 800f71c:	4628      	mov	r0, r5
 800f71e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f722:	f000 b869 	b.w	800f7f8 <_write_r>

0800f726 <__sseek>:
 800f726:	b510      	push	{r4, lr}
 800f728:	460c      	mov	r4, r1
 800f72a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f72e:	f000 f9bd 	bl	800faac <_lseek_r>
 800f732:	1c43      	adds	r3, r0, #1
 800f734:	89a3      	ldrh	r3, [r4, #12]
 800f736:	bf15      	itete	ne
 800f738:	6560      	strne	r0, [r4, #84]	; 0x54
 800f73a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f73e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f742:	81a3      	strheq	r3, [r4, #12]
 800f744:	bf18      	it	ne
 800f746:	81a3      	strhne	r3, [r4, #12]
 800f748:	bd10      	pop	{r4, pc}

0800f74a <__sclose>:
 800f74a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f74e:	f000 b8db 	b.w	800f908 <_close_r>
	...

0800f754 <__swbuf_r>:
 800f754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f756:	460e      	mov	r6, r1
 800f758:	4614      	mov	r4, r2
 800f75a:	4605      	mov	r5, r0
 800f75c:	b118      	cbz	r0, 800f766 <__swbuf_r+0x12>
 800f75e:	6983      	ldr	r3, [r0, #24]
 800f760:	b90b      	cbnz	r3, 800f766 <__swbuf_r+0x12>
 800f762:	f7ff f9bf 	bl	800eae4 <__sinit>
 800f766:	4b21      	ldr	r3, [pc, #132]	; (800f7ec <__swbuf_r+0x98>)
 800f768:	429c      	cmp	r4, r3
 800f76a:	d12b      	bne.n	800f7c4 <__swbuf_r+0x70>
 800f76c:	686c      	ldr	r4, [r5, #4]
 800f76e:	69a3      	ldr	r3, [r4, #24]
 800f770:	60a3      	str	r3, [r4, #8]
 800f772:	89a3      	ldrh	r3, [r4, #12]
 800f774:	071a      	lsls	r2, r3, #28
 800f776:	d52f      	bpl.n	800f7d8 <__swbuf_r+0x84>
 800f778:	6923      	ldr	r3, [r4, #16]
 800f77a:	b36b      	cbz	r3, 800f7d8 <__swbuf_r+0x84>
 800f77c:	6923      	ldr	r3, [r4, #16]
 800f77e:	6820      	ldr	r0, [r4, #0]
 800f780:	1ac0      	subs	r0, r0, r3
 800f782:	6963      	ldr	r3, [r4, #20]
 800f784:	b2f6      	uxtb	r6, r6
 800f786:	4283      	cmp	r3, r0
 800f788:	4637      	mov	r7, r6
 800f78a:	dc04      	bgt.n	800f796 <__swbuf_r+0x42>
 800f78c:	4621      	mov	r1, r4
 800f78e:	4628      	mov	r0, r5
 800f790:	f000 f950 	bl	800fa34 <_fflush_r>
 800f794:	bb30      	cbnz	r0, 800f7e4 <__swbuf_r+0x90>
 800f796:	68a3      	ldr	r3, [r4, #8]
 800f798:	3b01      	subs	r3, #1
 800f79a:	60a3      	str	r3, [r4, #8]
 800f79c:	6823      	ldr	r3, [r4, #0]
 800f79e:	1c5a      	adds	r2, r3, #1
 800f7a0:	6022      	str	r2, [r4, #0]
 800f7a2:	701e      	strb	r6, [r3, #0]
 800f7a4:	6963      	ldr	r3, [r4, #20]
 800f7a6:	3001      	adds	r0, #1
 800f7a8:	4283      	cmp	r3, r0
 800f7aa:	d004      	beq.n	800f7b6 <__swbuf_r+0x62>
 800f7ac:	89a3      	ldrh	r3, [r4, #12]
 800f7ae:	07db      	lsls	r3, r3, #31
 800f7b0:	d506      	bpl.n	800f7c0 <__swbuf_r+0x6c>
 800f7b2:	2e0a      	cmp	r6, #10
 800f7b4:	d104      	bne.n	800f7c0 <__swbuf_r+0x6c>
 800f7b6:	4621      	mov	r1, r4
 800f7b8:	4628      	mov	r0, r5
 800f7ba:	f000 f93b 	bl	800fa34 <_fflush_r>
 800f7be:	b988      	cbnz	r0, 800f7e4 <__swbuf_r+0x90>
 800f7c0:	4638      	mov	r0, r7
 800f7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7c4:	4b0a      	ldr	r3, [pc, #40]	; (800f7f0 <__swbuf_r+0x9c>)
 800f7c6:	429c      	cmp	r4, r3
 800f7c8:	d101      	bne.n	800f7ce <__swbuf_r+0x7a>
 800f7ca:	68ac      	ldr	r4, [r5, #8]
 800f7cc:	e7cf      	b.n	800f76e <__swbuf_r+0x1a>
 800f7ce:	4b09      	ldr	r3, [pc, #36]	; (800f7f4 <__swbuf_r+0xa0>)
 800f7d0:	429c      	cmp	r4, r3
 800f7d2:	bf08      	it	eq
 800f7d4:	68ec      	ldreq	r4, [r5, #12]
 800f7d6:	e7ca      	b.n	800f76e <__swbuf_r+0x1a>
 800f7d8:	4621      	mov	r1, r4
 800f7da:	4628      	mov	r0, r5
 800f7dc:	f000 f81e 	bl	800f81c <__swsetup_r>
 800f7e0:	2800      	cmp	r0, #0
 800f7e2:	d0cb      	beq.n	800f77c <__swbuf_r+0x28>
 800f7e4:	f04f 37ff 	mov.w	r7, #4294967295
 800f7e8:	e7ea      	b.n	800f7c0 <__swbuf_r+0x6c>
 800f7ea:	bf00      	nop
 800f7ec:	08012908 	.word	0x08012908
 800f7f0:	08012928 	.word	0x08012928
 800f7f4:	080128e8 	.word	0x080128e8

0800f7f8 <_write_r>:
 800f7f8:	b538      	push	{r3, r4, r5, lr}
 800f7fa:	4d07      	ldr	r5, [pc, #28]	; (800f818 <_write_r+0x20>)
 800f7fc:	4604      	mov	r4, r0
 800f7fe:	4608      	mov	r0, r1
 800f800:	4611      	mov	r1, r2
 800f802:	2200      	movs	r2, #0
 800f804:	602a      	str	r2, [r5, #0]
 800f806:	461a      	mov	r2, r3
 800f808:	f7f1 fad5 	bl	8000db6 <_write>
 800f80c:	1c43      	adds	r3, r0, #1
 800f80e:	d102      	bne.n	800f816 <_write_r+0x1e>
 800f810:	682b      	ldr	r3, [r5, #0]
 800f812:	b103      	cbz	r3, 800f816 <_write_r+0x1e>
 800f814:	6023      	str	r3, [r4, #0]
 800f816:	bd38      	pop	{r3, r4, r5, pc}
 800f818:	2000845c 	.word	0x2000845c

0800f81c <__swsetup_r>:
 800f81c:	4b32      	ldr	r3, [pc, #200]	; (800f8e8 <__swsetup_r+0xcc>)
 800f81e:	b570      	push	{r4, r5, r6, lr}
 800f820:	681d      	ldr	r5, [r3, #0]
 800f822:	4606      	mov	r6, r0
 800f824:	460c      	mov	r4, r1
 800f826:	b125      	cbz	r5, 800f832 <__swsetup_r+0x16>
 800f828:	69ab      	ldr	r3, [r5, #24]
 800f82a:	b913      	cbnz	r3, 800f832 <__swsetup_r+0x16>
 800f82c:	4628      	mov	r0, r5
 800f82e:	f7ff f959 	bl	800eae4 <__sinit>
 800f832:	4b2e      	ldr	r3, [pc, #184]	; (800f8ec <__swsetup_r+0xd0>)
 800f834:	429c      	cmp	r4, r3
 800f836:	d10f      	bne.n	800f858 <__swsetup_r+0x3c>
 800f838:	686c      	ldr	r4, [r5, #4]
 800f83a:	89a3      	ldrh	r3, [r4, #12]
 800f83c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f840:	0719      	lsls	r1, r3, #28
 800f842:	d42c      	bmi.n	800f89e <__swsetup_r+0x82>
 800f844:	06dd      	lsls	r5, r3, #27
 800f846:	d411      	bmi.n	800f86c <__swsetup_r+0x50>
 800f848:	2309      	movs	r3, #9
 800f84a:	6033      	str	r3, [r6, #0]
 800f84c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f850:	81a3      	strh	r3, [r4, #12]
 800f852:	f04f 30ff 	mov.w	r0, #4294967295
 800f856:	e03e      	b.n	800f8d6 <__swsetup_r+0xba>
 800f858:	4b25      	ldr	r3, [pc, #148]	; (800f8f0 <__swsetup_r+0xd4>)
 800f85a:	429c      	cmp	r4, r3
 800f85c:	d101      	bne.n	800f862 <__swsetup_r+0x46>
 800f85e:	68ac      	ldr	r4, [r5, #8]
 800f860:	e7eb      	b.n	800f83a <__swsetup_r+0x1e>
 800f862:	4b24      	ldr	r3, [pc, #144]	; (800f8f4 <__swsetup_r+0xd8>)
 800f864:	429c      	cmp	r4, r3
 800f866:	bf08      	it	eq
 800f868:	68ec      	ldreq	r4, [r5, #12]
 800f86a:	e7e6      	b.n	800f83a <__swsetup_r+0x1e>
 800f86c:	0758      	lsls	r0, r3, #29
 800f86e:	d512      	bpl.n	800f896 <__swsetup_r+0x7a>
 800f870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f872:	b141      	cbz	r1, 800f886 <__swsetup_r+0x6a>
 800f874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f878:	4299      	cmp	r1, r3
 800f87a:	d002      	beq.n	800f882 <__swsetup_r+0x66>
 800f87c:	4630      	mov	r0, r6
 800f87e:	f7ff f9eb 	bl	800ec58 <_free_r>
 800f882:	2300      	movs	r3, #0
 800f884:	6363      	str	r3, [r4, #52]	; 0x34
 800f886:	89a3      	ldrh	r3, [r4, #12]
 800f888:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f88c:	81a3      	strh	r3, [r4, #12]
 800f88e:	2300      	movs	r3, #0
 800f890:	6063      	str	r3, [r4, #4]
 800f892:	6923      	ldr	r3, [r4, #16]
 800f894:	6023      	str	r3, [r4, #0]
 800f896:	89a3      	ldrh	r3, [r4, #12]
 800f898:	f043 0308 	orr.w	r3, r3, #8
 800f89c:	81a3      	strh	r3, [r4, #12]
 800f89e:	6923      	ldr	r3, [r4, #16]
 800f8a0:	b94b      	cbnz	r3, 800f8b6 <__swsetup_r+0x9a>
 800f8a2:	89a3      	ldrh	r3, [r4, #12]
 800f8a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f8a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8ac:	d003      	beq.n	800f8b6 <__swsetup_r+0x9a>
 800f8ae:	4621      	mov	r1, r4
 800f8b0:	4630      	mov	r0, r6
 800f8b2:	f000 f933 	bl	800fb1c <__smakebuf_r>
 800f8b6:	89a0      	ldrh	r0, [r4, #12]
 800f8b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f8bc:	f010 0301 	ands.w	r3, r0, #1
 800f8c0:	d00a      	beq.n	800f8d8 <__swsetup_r+0xbc>
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	60a3      	str	r3, [r4, #8]
 800f8c6:	6963      	ldr	r3, [r4, #20]
 800f8c8:	425b      	negs	r3, r3
 800f8ca:	61a3      	str	r3, [r4, #24]
 800f8cc:	6923      	ldr	r3, [r4, #16]
 800f8ce:	b943      	cbnz	r3, 800f8e2 <__swsetup_r+0xc6>
 800f8d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f8d4:	d1ba      	bne.n	800f84c <__swsetup_r+0x30>
 800f8d6:	bd70      	pop	{r4, r5, r6, pc}
 800f8d8:	0781      	lsls	r1, r0, #30
 800f8da:	bf58      	it	pl
 800f8dc:	6963      	ldrpl	r3, [r4, #20]
 800f8de:	60a3      	str	r3, [r4, #8]
 800f8e0:	e7f4      	b.n	800f8cc <__swsetup_r+0xb0>
 800f8e2:	2000      	movs	r0, #0
 800f8e4:	e7f7      	b.n	800f8d6 <__swsetup_r+0xba>
 800f8e6:	bf00      	nop
 800f8e8:	2000005c 	.word	0x2000005c
 800f8ec:	08012908 	.word	0x08012908
 800f8f0:	08012928 	.word	0x08012928
 800f8f4:	080128e8 	.word	0x080128e8

0800f8f8 <abort>:
 800f8f8:	b508      	push	{r3, lr}
 800f8fa:	2006      	movs	r0, #6
 800f8fc:	f000 f9c4 	bl	800fc88 <raise>
 800f900:	2001      	movs	r0, #1
 800f902:	f7f1 fa31 	bl	8000d68 <_exit>
	...

0800f908 <_close_r>:
 800f908:	b538      	push	{r3, r4, r5, lr}
 800f90a:	4d06      	ldr	r5, [pc, #24]	; (800f924 <_close_r+0x1c>)
 800f90c:	2300      	movs	r3, #0
 800f90e:	4604      	mov	r4, r0
 800f910:	4608      	mov	r0, r1
 800f912:	602b      	str	r3, [r5, #0]
 800f914:	f7f1 fa6b 	bl	8000dee <_close>
 800f918:	1c43      	adds	r3, r0, #1
 800f91a:	d102      	bne.n	800f922 <_close_r+0x1a>
 800f91c:	682b      	ldr	r3, [r5, #0]
 800f91e:	b103      	cbz	r3, 800f922 <_close_r+0x1a>
 800f920:	6023      	str	r3, [r4, #0]
 800f922:	bd38      	pop	{r3, r4, r5, pc}
 800f924:	2000845c 	.word	0x2000845c

0800f928 <__sflush_r>:
 800f928:	898a      	ldrh	r2, [r1, #12]
 800f92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f92e:	4605      	mov	r5, r0
 800f930:	0710      	lsls	r0, r2, #28
 800f932:	460c      	mov	r4, r1
 800f934:	d458      	bmi.n	800f9e8 <__sflush_r+0xc0>
 800f936:	684b      	ldr	r3, [r1, #4]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	dc05      	bgt.n	800f948 <__sflush_r+0x20>
 800f93c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f93e:	2b00      	cmp	r3, #0
 800f940:	dc02      	bgt.n	800f948 <__sflush_r+0x20>
 800f942:	2000      	movs	r0, #0
 800f944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f94a:	2e00      	cmp	r6, #0
 800f94c:	d0f9      	beq.n	800f942 <__sflush_r+0x1a>
 800f94e:	2300      	movs	r3, #0
 800f950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f954:	682f      	ldr	r7, [r5, #0]
 800f956:	602b      	str	r3, [r5, #0]
 800f958:	d032      	beq.n	800f9c0 <__sflush_r+0x98>
 800f95a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f95c:	89a3      	ldrh	r3, [r4, #12]
 800f95e:	075a      	lsls	r2, r3, #29
 800f960:	d505      	bpl.n	800f96e <__sflush_r+0x46>
 800f962:	6863      	ldr	r3, [r4, #4]
 800f964:	1ac0      	subs	r0, r0, r3
 800f966:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f968:	b10b      	cbz	r3, 800f96e <__sflush_r+0x46>
 800f96a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f96c:	1ac0      	subs	r0, r0, r3
 800f96e:	2300      	movs	r3, #0
 800f970:	4602      	mov	r2, r0
 800f972:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f974:	6a21      	ldr	r1, [r4, #32]
 800f976:	4628      	mov	r0, r5
 800f978:	47b0      	blx	r6
 800f97a:	1c43      	adds	r3, r0, #1
 800f97c:	89a3      	ldrh	r3, [r4, #12]
 800f97e:	d106      	bne.n	800f98e <__sflush_r+0x66>
 800f980:	6829      	ldr	r1, [r5, #0]
 800f982:	291d      	cmp	r1, #29
 800f984:	d82c      	bhi.n	800f9e0 <__sflush_r+0xb8>
 800f986:	4a2a      	ldr	r2, [pc, #168]	; (800fa30 <__sflush_r+0x108>)
 800f988:	40ca      	lsrs	r2, r1
 800f98a:	07d6      	lsls	r6, r2, #31
 800f98c:	d528      	bpl.n	800f9e0 <__sflush_r+0xb8>
 800f98e:	2200      	movs	r2, #0
 800f990:	6062      	str	r2, [r4, #4]
 800f992:	04d9      	lsls	r1, r3, #19
 800f994:	6922      	ldr	r2, [r4, #16]
 800f996:	6022      	str	r2, [r4, #0]
 800f998:	d504      	bpl.n	800f9a4 <__sflush_r+0x7c>
 800f99a:	1c42      	adds	r2, r0, #1
 800f99c:	d101      	bne.n	800f9a2 <__sflush_r+0x7a>
 800f99e:	682b      	ldr	r3, [r5, #0]
 800f9a0:	b903      	cbnz	r3, 800f9a4 <__sflush_r+0x7c>
 800f9a2:	6560      	str	r0, [r4, #84]	; 0x54
 800f9a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f9a6:	602f      	str	r7, [r5, #0]
 800f9a8:	2900      	cmp	r1, #0
 800f9aa:	d0ca      	beq.n	800f942 <__sflush_r+0x1a>
 800f9ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f9b0:	4299      	cmp	r1, r3
 800f9b2:	d002      	beq.n	800f9ba <__sflush_r+0x92>
 800f9b4:	4628      	mov	r0, r5
 800f9b6:	f7ff f94f 	bl	800ec58 <_free_r>
 800f9ba:	2000      	movs	r0, #0
 800f9bc:	6360      	str	r0, [r4, #52]	; 0x34
 800f9be:	e7c1      	b.n	800f944 <__sflush_r+0x1c>
 800f9c0:	6a21      	ldr	r1, [r4, #32]
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	4628      	mov	r0, r5
 800f9c6:	47b0      	blx	r6
 800f9c8:	1c41      	adds	r1, r0, #1
 800f9ca:	d1c7      	bne.n	800f95c <__sflush_r+0x34>
 800f9cc:	682b      	ldr	r3, [r5, #0]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d0c4      	beq.n	800f95c <__sflush_r+0x34>
 800f9d2:	2b1d      	cmp	r3, #29
 800f9d4:	d001      	beq.n	800f9da <__sflush_r+0xb2>
 800f9d6:	2b16      	cmp	r3, #22
 800f9d8:	d101      	bne.n	800f9de <__sflush_r+0xb6>
 800f9da:	602f      	str	r7, [r5, #0]
 800f9dc:	e7b1      	b.n	800f942 <__sflush_r+0x1a>
 800f9de:	89a3      	ldrh	r3, [r4, #12]
 800f9e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9e4:	81a3      	strh	r3, [r4, #12]
 800f9e6:	e7ad      	b.n	800f944 <__sflush_r+0x1c>
 800f9e8:	690f      	ldr	r7, [r1, #16]
 800f9ea:	2f00      	cmp	r7, #0
 800f9ec:	d0a9      	beq.n	800f942 <__sflush_r+0x1a>
 800f9ee:	0793      	lsls	r3, r2, #30
 800f9f0:	680e      	ldr	r6, [r1, #0]
 800f9f2:	bf08      	it	eq
 800f9f4:	694b      	ldreq	r3, [r1, #20]
 800f9f6:	600f      	str	r7, [r1, #0]
 800f9f8:	bf18      	it	ne
 800f9fa:	2300      	movne	r3, #0
 800f9fc:	eba6 0807 	sub.w	r8, r6, r7
 800fa00:	608b      	str	r3, [r1, #8]
 800fa02:	f1b8 0f00 	cmp.w	r8, #0
 800fa06:	dd9c      	ble.n	800f942 <__sflush_r+0x1a>
 800fa08:	6a21      	ldr	r1, [r4, #32]
 800fa0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fa0c:	4643      	mov	r3, r8
 800fa0e:	463a      	mov	r2, r7
 800fa10:	4628      	mov	r0, r5
 800fa12:	47b0      	blx	r6
 800fa14:	2800      	cmp	r0, #0
 800fa16:	dc06      	bgt.n	800fa26 <__sflush_r+0xfe>
 800fa18:	89a3      	ldrh	r3, [r4, #12]
 800fa1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa1e:	81a3      	strh	r3, [r4, #12]
 800fa20:	f04f 30ff 	mov.w	r0, #4294967295
 800fa24:	e78e      	b.n	800f944 <__sflush_r+0x1c>
 800fa26:	4407      	add	r7, r0
 800fa28:	eba8 0800 	sub.w	r8, r8, r0
 800fa2c:	e7e9      	b.n	800fa02 <__sflush_r+0xda>
 800fa2e:	bf00      	nop
 800fa30:	20400001 	.word	0x20400001

0800fa34 <_fflush_r>:
 800fa34:	b538      	push	{r3, r4, r5, lr}
 800fa36:	690b      	ldr	r3, [r1, #16]
 800fa38:	4605      	mov	r5, r0
 800fa3a:	460c      	mov	r4, r1
 800fa3c:	b913      	cbnz	r3, 800fa44 <_fflush_r+0x10>
 800fa3e:	2500      	movs	r5, #0
 800fa40:	4628      	mov	r0, r5
 800fa42:	bd38      	pop	{r3, r4, r5, pc}
 800fa44:	b118      	cbz	r0, 800fa4e <_fflush_r+0x1a>
 800fa46:	6983      	ldr	r3, [r0, #24]
 800fa48:	b90b      	cbnz	r3, 800fa4e <_fflush_r+0x1a>
 800fa4a:	f7ff f84b 	bl	800eae4 <__sinit>
 800fa4e:	4b14      	ldr	r3, [pc, #80]	; (800faa0 <_fflush_r+0x6c>)
 800fa50:	429c      	cmp	r4, r3
 800fa52:	d11b      	bne.n	800fa8c <_fflush_r+0x58>
 800fa54:	686c      	ldr	r4, [r5, #4]
 800fa56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d0ef      	beq.n	800fa3e <_fflush_r+0xa>
 800fa5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fa60:	07d0      	lsls	r0, r2, #31
 800fa62:	d404      	bmi.n	800fa6e <_fflush_r+0x3a>
 800fa64:	0599      	lsls	r1, r3, #22
 800fa66:	d402      	bmi.n	800fa6e <_fflush_r+0x3a>
 800fa68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa6a:	f7ff f8eb 	bl	800ec44 <__retarget_lock_acquire_recursive>
 800fa6e:	4628      	mov	r0, r5
 800fa70:	4621      	mov	r1, r4
 800fa72:	f7ff ff59 	bl	800f928 <__sflush_r>
 800fa76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa78:	07da      	lsls	r2, r3, #31
 800fa7a:	4605      	mov	r5, r0
 800fa7c:	d4e0      	bmi.n	800fa40 <_fflush_r+0xc>
 800fa7e:	89a3      	ldrh	r3, [r4, #12]
 800fa80:	059b      	lsls	r3, r3, #22
 800fa82:	d4dd      	bmi.n	800fa40 <_fflush_r+0xc>
 800fa84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa86:	f7ff f8de 	bl	800ec46 <__retarget_lock_release_recursive>
 800fa8a:	e7d9      	b.n	800fa40 <_fflush_r+0xc>
 800fa8c:	4b05      	ldr	r3, [pc, #20]	; (800faa4 <_fflush_r+0x70>)
 800fa8e:	429c      	cmp	r4, r3
 800fa90:	d101      	bne.n	800fa96 <_fflush_r+0x62>
 800fa92:	68ac      	ldr	r4, [r5, #8]
 800fa94:	e7df      	b.n	800fa56 <_fflush_r+0x22>
 800fa96:	4b04      	ldr	r3, [pc, #16]	; (800faa8 <_fflush_r+0x74>)
 800fa98:	429c      	cmp	r4, r3
 800fa9a:	bf08      	it	eq
 800fa9c:	68ec      	ldreq	r4, [r5, #12]
 800fa9e:	e7da      	b.n	800fa56 <_fflush_r+0x22>
 800faa0:	08012908 	.word	0x08012908
 800faa4:	08012928 	.word	0x08012928
 800faa8:	080128e8 	.word	0x080128e8

0800faac <_lseek_r>:
 800faac:	b538      	push	{r3, r4, r5, lr}
 800faae:	4d07      	ldr	r5, [pc, #28]	; (800facc <_lseek_r+0x20>)
 800fab0:	4604      	mov	r4, r0
 800fab2:	4608      	mov	r0, r1
 800fab4:	4611      	mov	r1, r2
 800fab6:	2200      	movs	r2, #0
 800fab8:	602a      	str	r2, [r5, #0]
 800faba:	461a      	mov	r2, r3
 800fabc:	f7f1 f9be 	bl	8000e3c <_lseek>
 800fac0:	1c43      	adds	r3, r0, #1
 800fac2:	d102      	bne.n	800faca <_lseek_r+0x1e>
 800fac4:	682b      	ldr	r3, [r5, #0]
 800fac6:	b103      	cbz	r3, 800faca <_lseek_r+0x1e>
 800fac8:	6023      	str	r3, [r4, #0]
 800faca:	bd38      	pop	{r3, r4, r5, pc}
 800facc:	2000845c 	.word	0x2000845c

0800fad0 <__swhatbuf_r>:
 800fad0:	b570      	push	{r4, r5, r6, lr}
 800fad2:	460e      	mov	r6, r1
 800fad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fad8:	2900      	cmp	r1, #0
 800fada:	b096      	sub	sp, #88	; 0x58
 800fadc:	4614      	mov	r4, r2
 800fade:	461d      	mov	r5, r3
 800fae0:	da08      	bge.n	800faf4 <__swhatbuf_r+0x24>
 800fae2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fae6:	2200      	movs	r2, #0
 800fae8:	602a      	str	r2, [r5, #0]
 800faea:	061a      	lsls	r2, r3, #24
 800faec:	d410      	bmi.n	800fb10 <__swhatbuf_r+0x40>
 800faee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800faf2:	e00e      	b.n	800fb12 <__swhatbuf_r+0x42>
 800faf4:	466a      	mov	r2, sp
 800faf6:	f000 f8e3 	bl	800fcc0 <_fstat_r>
 800fafa:	2800      	cmp	r0, #0
 800fafc:	dbf1      	blt.n	800fae2 <__swhatbuf_r+0x12>
 800fafe:	9a01      	ldr	r2, [sp, #4]
 800fb00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fb04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fb08:	425a      	negs	r2, r3
 800fb0a:	415a      	adcs	r2, r3
 800fb0c:	602a      	str	r2, [r5, #0]
 800fb0e:	e7ee      	b.n	800faee <__swhatbuf_r+0x1e>
 800fb10:	2340      	movs	r3, #64	; 0x40
 800fb12:	2000      	movs	r0, #0
 800fb14:	6023      	str	r3, [r4, #0]
 800fb16:	b016      	add	sp, #88	; 0x58
 800fb18:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fb1c <__smakebuf_r>:
 800fb1c:	898b      	ldrh	r3, [r1, #12]
 800fb1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb20:	079d      	lsls	r5, r3, #30
 800fb22:	4606      	mov	r6, r0
 800fb24:	460c      	mov	r4, r1
 800fb26:	d507      	bpl.n	800fb38 <__smakebuf_r+0x1c>
 800fb28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fb2c:	6023      	str	r3, [r4, #0]
 800fb2e:	6123      	str	r3, [r4, #16]
 800fb30:	2301      	movs	r3, #1
 800fb32:	6163      	str	r3, [r4, #20]
 800fb34:	b002      	add	sp, #8
 800fb36:	bd70      	pop	{r4, r5, r6, pc}
 800fb38:	ab01      	add	r3, sp, #4
 800fb3a:	466a      	mov	r2, sp
 800fb3c:	f7ff ffc8 	bl	800fad0 <__swhatbuf_r>
 800fb40:	9900      	ldr	r1, [sp, #0]
 800fb42:	4605      	mov	r5, r0
 800fb44:	4630      	mov	r0, r6
 800fb46:	f7ff f8f3 	bl	800ed30 <_malloc_r>
 800fb4a:	b948      	cbnz	r0, 800fb60 <__smakebuf_r+0x44>
 800fb4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb50:	059a      	lsls	r2, r3, #22
 800fb52:	d4ef      	bmi.n	800fb34 <__smakebuf_r+0x18>
 800fb54:	f023 0303 	bic.w	r3, r3, #3
 800fb58:	f043 0302 	orr.w	r3, r3, #2
 800fb5c:	81a3      	strh	r3, [r4, #12]
 800fb5e:	e7e3      	b.n	800fb28 <__smakebuf_r+0xc>
 800fb60:	4b0d      	ldr	r3, [pc, #52]	; (800fb98 <__smakebuf_r+0x7c>)
 800fb62:	62b3      	str	r3, [r6, #40]	; 0x28
 800fb64:	89a3      	ldrh	r3, [r4, #12]
 800fb66:	6020      	str	r0, [r4, #0]
 800fb68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb6c:	81a3      	strh	r3, [r4, #12]
 800fb6e:	9b00      	ldr	r3, [sp, #0]
 800fb70:	6163      	str	r3, [r4, #20]
 800fb72:	9b01      	ldr	r3, [sp, #4]
 800fb74:	6120      	str	r0, [r4, #16]
 800fb76:	b15b      	cbz	r3, 800fb90 <__smakebuf_r+0x74>
 800fb78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb7c:	4630      	mov	r0, r6
 800fb7e:	f000 f8b1 	bl	800fce4 <_isatty_r>
 800fb82:	b128      	cbz	r0, 800fb90 <__smakebuf_r+0x74>
 800fb84:	89a3      	ldrh	r3, [r4, #12]
 800fb86:	f023 0303 	bic.w	r3, r3, #3
 800fb8a:	f043 0301 	orr.w	r3, r3, #1
 800fb8e:	81a3      	strh	r3, [r4, #12]
 800fb90:	89a0      	ldrh	r0, [r4, #12]
 800fb92:	4305      	orrs	r5, r0
 800fb94:	81a5      	strh	r5, [r4, #12]
 800fb96:	e7cd      	b.n	800fb34 <__smakebuf_r+0x18>
 800fb98:	0800ea7d 	.word	0x0800ea7d

0800fb9c <__malloc_lock>:
 800fb9c:	4801      	ldr	r0, [pc, #4]	; (800fba4 <__malloc_lock+0x8>)
 800fb9e:	f7ff b851 	b.w	800ec44 <__retarget_lock_acquire_recursive>
 800fba2:	bf00      	nop
 800fba4:	20008460 	.word	0x20008460

0800fba8 <__malloc_unlock>:
 800fba8:	4801      	ldr	r0, [pc, #4]	; (800fbb0 <__malloc_unlock+0x8>)
 800fbaa:	f7ff b84c 	b.w	800ec46 <__retarget_lock_release_recursive>
 800fbae:	bf00      	nop
 800fbb0:	20008460 	.word	0x20008460

0800fbb4 <_realloc_r>:
 800fbb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbb8:	4680      	mov	r8, r0
 800fbba:	4614      	mov	r4, r2
 800fbbc:	460e      	mov	r6, r1
 800fbbe:	b921      	cbnz	r1, 800fbca <_realloc_r+0x16>
 800fbc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbc4:	4611      	mov	r1, r2
 800fbc6:	f7ff b8b3 	b.w	800ed30 <_malloc_r>
 800fbca:	b92a      	cbnz	r2, 800fbd8 <_realloc_r+0x24>
 800fbcc:	f7ff f844 	bl	800ec58 <_free_r>
 800fbd0:	4625      	mov	r5, r4
 800fbd2:	4628      	mov	r0, r5
 800fbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbd8:	f000 f894 	bl	800fd04 <_malloc_usable_size_r>
 800fbdc:	4284      	cmp	r4, r0
 800fbde:	4607      	mov	r7, r0
 800fbe0:	d802      	bhi.n	800fbe8 <_realloc_r+0x34>
 800fbe2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fbe6:	d812      	bhi.n	800fc0e <_realloc_r+0x5a>
 800fbe8:	4621      	mov	r1, r4
 800fbea:	4640      	mov	r0, r8
 800fbec:	f7ff f8a0 	bl	800ed30 <_malloc_r>
 800fbf0:	4605      	mov	r5, r0
 800fbf2:	2800      	cmp	r0, #0
 800fbf4:	d0ed      	beq.n	800fbd2 <_realloc_r+0x1e>
 800fbf6:	42bc      	cmp	r4, r7
 800fbf8:	4622      	mov	r2, r4
 800fbfa:	4631      	mov	r1, r6
 800fbfc:	bf28      	it	cs
 800fbfe:	463a      	movcs	r2, r7
 800fc00:	f7fe fe54 	bl	800e8ac <memcpy>
 800fc04:	4631      	mov	r1, r6
 800fc06:	4640      	mov	r0, r8
 800fc08:	f7ff f826 	bl	800ec58 <_free_r>
 800fc0c:	e7e1      	b.n	800fbd2 <_realloc_r+0x1e>
 800fc0e:	4635      	mov	r5, r6
 800fc10:	e7df      	b.n	800fbd2 <_realloc_r+0x1e>
	...

0800fc14 <_read_r>:
 800fc14:	b538      	push	{r3, r4, r5, lr}
 800fc16:	4d07      	ldr	r5, [pc, #28]	; (800fc34 <_read_r+0x20>)
 800fc18:	4604      	mov	r4, r0
 800fc1a:	4608      	mov	r0, r1
 800fc1c:	4611      	mov	r1, r2
 800fc1e:	2200      	movs	r2, #0
 800fc20:	602a      	str	r2, [r5, #0]
 800fc22:	461a      	mov	r2, r3
 800fc24:	f7f1 f8aa 	bl	8000d7c <_read>
 800fc28:	1c43      	adds	r3, r0, #1
 800fc2a:	d102      	bne.n	800fc32 <_read_r+0x1e>
 800fc2c:	682b      	ldr	r3, [r5, #0]
 800fc2e:	b103      	cbz	r3, 800fc32 <_read_r+0x1e>
 800fc30:	6023      	str	r3, [r4, #0]
 800fc32:	bd38      	pop	{r3, r4, r5, pc}
 800fc34:	2000845c 	.word	0x2000845c

0800fc38 <_raise_r>:
 800fc38:	291f      	cmp	r1, #31
 800fc3a:	b538      	push	{r3, r4, r5, lr}
 800fc3c:	4604      	mov	r4, r0
 800fc3e:	460d      	mov	r5, r1
 800fc40:	d904      	bls.n	800fc4c <_raise_r+0x14>
 800fc42:	2316      	movs	r3, #22
 800fc44:	6003      	str	r3, [r0, #0]
 800fc46:	f04f 30ff 	mov.w	r0, #4294967295
 800fc4a:	bd38      	pop	{r3, r4, r5, pc}
 800fc4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fc4e:	b112      	cbz	r2, 800fc56 <_raise_r+0x1e>
 800fc50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc54:	b94b      	cbnz	r3, 800fc6a <_raise_r+0x32>
 800fc56:	4620      	mov	r0, r4
 800fc58:	f000 f830 	bl	800fcbc <_getpid_r>
 800fc5c:	462a      	mov	r2, r5
 800fc5e:	4601      	mov	r1, r0
 800fc60:	4620      	mov	r0, r4
 800fc62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc66:	f000 b817 	b.w	800fc98 <_kill_r>
 800fc6a:	2b01      	cmp	r3, #1
 800fc6c:	d00a      	beq.n	800fc84 <_raise_r+0x4c>
 800fc6e:	1c59      	adds	r1, r3, #1
 800fc70:	d103      	bne.n	800fc7a <_raise_r+0x42>
 800fc72:	2316      	movs	r3, #22
 800fc74:	6003      	str	r3, [r0, #0]
 800fc76:	2001      	movs	r0, #1
 800fc78:	e7e7      	b.n	800fc4a <_raise_r+0x12>
 800fc7a:	2400      	movs	r4, #0
 800fc7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fc80:	4628      	mov	r0, r5
 800fc82:	4798      	blx	r3
 800fc84:	2000      	movs	r0, #0
 800fc86:	e7e0      	b.n	800fc4a <_raise_r+0x12>

0800fc88 <raise>:
 800fc88:	4b02      	ldr	r3, [pc, #8]	; (800fc94 <raise+0xc>)
 800fc8a:	4601      	mov	r1, r0
 800fc8c:	6818      	ldr	r0, [r3, #0]
 800fc8e:	f7ff bfd3 	b.w	800fc38 <_raise_r>
 800fc92:	bf00      	nop
 800fc94:	2000005c 	.word	0x2000005c

0800fc98 <_kill_r>:
 800fc98:	b538      	push	{r3, r4, r5, lr}
 800fc9a:	4d07      	ldr	r5, [pc, #28]	; (800fcb8 <_kill_r+0x20>)
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	4604      	mov	r4, r0
 800fca0:	4608      	mov	r0, r1
 800fca2:	4611      	mov	r1, r2
 800fca4:	602b      	str	r3, [r5, #0]
 800fca6:	f7f1 f84d 	bl	8000d44 <_kill>
 800fcaa:	1c43      	adds	r3, r0, #1
 800fcac:	d102      	bne.n	800fcb4 <_kill_r+0x1c>
 800fcae:	682b      	ldr	r3, [r5, #0]
 800fcb0:	b103      	cbz	r3, 800fcb4 <_kill_r+0x1c>
 800fcb2:	6023      	str	r3, [r4, #0]
 800fcb4:	bd38      	pop	{r3, r4, r5, pc}
 800fcb6:	bf00      	nop
 800fcb8:	2000845c 	.word	0x2000845c

0800fcbc <_getpid_r>:
 800fcbc:	f7f1 b83a 	b.w	8000d34 <_getpid>

0800fcc0 <_fstat_r>:
 800fcc0:	b538      	push	{r3, r4, r5, lr}
 800fcc2:	4d07      	ldr	r5, [pc, #28]	; (800fce0 <_fstat_r+0x20>)
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	4604      	mov	r4, r0
 800fcc8:	4608      	mov	r0, r1
 800fcca:	4611      	mov	r1, r2
 800fccc:	602b      	str	r3, [r5, #0]
 800fcce:	f7f1 f89a 	bl	8000e06 <_fstat>
 800fcd2:	1c43      	adds	r3, r0, #1
 800fcd4:	d102      	bne.n	800fcdc <_fstat_r+0x1c>
 800fcd6:	682b      	ldr	r3, [r5, #0]
 800fcd8:	b103      	cbz	r3, 800fcdc <_fstat_r+0x1c>
 800fcda:	6023      	str	r3, [r4, #0]
 800fcdc:	bd38      	pop	{r3, r4, r5, pc}
 800fcde:	bf00      	nop
 800fce0:	2000845c 	.word	0x2000845c

0800fce4 <_isatty_r>:
 800fce4:	b538      	push	{r3, r4, r5, lr}
 800fce6:	4d06      	ldr	r5, [pc, #24]	; (800fd00 <_isatty_r+0x1c>)
 800fce8:	2300      	movs	r3, #0
 800fcea:	4604      	mov	r4, r0
 800fcec:	4608      	mov	r0, r1
 800fcee:	602b      	str	r3, [r5, #0]
 800fcf0:	f7f1 f899 	bl	8000e26 <_isatty>
 800fcf4:	1c43      	adds	r3, r0, #1
 800fcf6:	d102      	bne.n	800fcfe <_isatty_r+0x1a>
 800fcf8:	682b      	ldr	r3, [r5, #0]
 800fcfa:	b103      	cbz	r3, 800fcfe <_isatty_r+0x1a>
 800fcfc:	6023      	str	r3, [r4, #0]
 800fcfe:	bd38      	pop	{r3, r4, r5, pc}
 800fd00:	2000845c 	.word	0x2000845c

0800fd04 <_malloc_usable_size_r>:
 800fd04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd08:	1f18      	subs	r0, r3, #4
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	bfbc      	itt	lt
 800fd0e:	580b      	ldrlt	r3, [r1, r0]
 800fd10:	18c0      	addlt	r0, r0, r3
 800fd12:	4770      	bx	lr

0800fd14 <_init>:
 800fd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd16:	bf00      	nop
 800fd18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd1a:	bc08      	pop	{r3}
 800fd1c:	469e      	mov	lr, r3
 800fd1e:	4770      	bx	lr

0800fd20 <_fini>:
 800fd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd22:	bf00      	nop
 800fd24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd26:	bc08      	pop	{r3}
 800fd28:	469e      	mov	lr, r3
 800fd2a:	4770      	bx	lr
