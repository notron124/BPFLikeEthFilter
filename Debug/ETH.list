
ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e70  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003460  08012020  08012020  00022020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015480  08015480  000300c0  2**0
                  CONTENTS
  4 .ARM          00000008  08015480  08015480  00025480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015488  08015488  000300c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015488  08015488  00025488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801548c  0801548c  0002548c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08015490  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300c0  2**0
                  CONTENTS
 10 .bss          000087d0  200000c0  200000c0  000300c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008890  20008890  000300c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f28b  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005582  00000000  00000000  0004f37b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d0  00000000  00000000  00054900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001520  00000000  00000000  00055ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000f511  00000000  00000000  000573f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000269da  00000000  00000000  00066901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed60a  00000000  00000000  0008d2db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017a8e5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006124  00000000  00000000  0017a938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000c0 	.word	0x200000c0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012008 	.word	0x08012008

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c4 	.word	0x200000c4
 80001ec:	08012008 	.word	0x08012008

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <jt>:
uint8_t _index = 0;
uint8_t X = 0;
char myStr[7];

void jt(uint8_t destination)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
   _index = destination;
 80005ce:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <jt+0x1c>)
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	7013      	strb	r3, [r2, #0]
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	200000e0 	.word	0x200000e0

080005e4 <jf>:

void jf(uint8_t destination)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
   _index = destination;
 80005ee:	4a04      	ldr	r2, [pc, #16]	; (8000600 <jf+0x1c>)
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	7013      	strb	r3, [r2, #0]
}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	200000e0 	.word	0x200000e0

08000604 <jmp>:
{
   _index = 10;
}

void jmp(uint8_t *pdata, uint32_t k)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
   mypData = pdata;
 800060e:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <jmp+0x44>)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	6013      	str	r3, [r2, #0]
   mypData += X + k;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <jmp+0x44>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <jmp+0x48>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	440b      	add	r3, r1
 8000622:	4413      	add	r3, r2
 8000624:	4a08      	ldr	r2, [pc, #32]	; (8000648 <jmp+0x44>)
 8000626:	6013      	str	r3, [r2, #0]
   X = 0;
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <jmp+0x48>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
   _index++;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <jmp+0x4c>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	3301      	adds	r3, #1
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <jmp+0x4c>)
 8000638:	701a      	strb	r2, [r3, #0]
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	200000dc 	.word	0x200000dc
 800064c:	200000e1 	.word	0x200000e1
 8000650:	200000e0 	.word	0x200000e0

08000654 <ldxb>:


void ldxb(uint32_t k, uint8_t *pdata)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
   mypData = pdata;
 800065e:	4a0c      	ldr	r2, [pc, #48]	; (8000690 <ldxb+0x3c>)
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	6013      	str	r3, [r2, #0]
   mypData += k;
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <ldxb+0x3c>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4413      	add	r3, r2
 800066c:	4a08      	ldr	r2, [pc, #32]	; (8000690 <ldxb+0x3c>)
 800066e:	6013      	str	r3, [r2, #0]
   X = 4*(*mypData & 0x0F);
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <ldxb+0x3c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	f003 030f 	and.w	r3, r3, #15
 800067a:	b2db      	uxtb	r3, r3
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	b2da      	uxtb	r2, r3
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <ldxb+0x40>)
 8000682:	701a      	strb	r2, [r3, #0]
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	200000dc 	.word	0x200000dc
 8000694:	200000e1 	.word	0x200000e1

08000698 <getKSize>:

uint8_t getKSize(uint32_t k)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
   uint8_t size = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	73fb      	strb	r3, [r7, #15]

   while (k != 0)
 80006a4:	e005      	b.n	80006b2 <getKSize+0x1a>
   {
      size++;
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	3301      	adds	r3, #1
 80006aa:	73fb      	strb	r3, [r7, #15]
      k = k >> 8;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	0a1b      	lsrs	r3, r3, #8
 80006b0:	607b      	str	r3, [r7, #4]
   while (k != 0)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d1f6      	bne.n	80006a6 <getKSize+0xe>
   }

   return size;
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
	...

080006c8 <jset>:

void jset(uint32_t k, struct sock_filter *filter)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
   uint8_t kSize = getKSize(k);
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f7ff ffe0 	bl	8000698 <getKSize>
 80006d8:	4603      	mov	r3, r0
 80006da:	72bb      	strb	r3, [r7, #10]
   uint32_t actualData = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]

   for (uint8_t i = 0; i < kSize; i++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	72fb      	strb	r3, [r7, #11]
 80006e4:	e011      	b.n	800070a <jset+0x42>
   {
      actualData = actualData << 8;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	021b      	lsls	r3, r3, #8
 80006ea:	60fb      	str	r3, [r7, #12]
      actualData += *mypData;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <jset+0x84>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	461a      	mov	r2, r3
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	4413      	add	r3, r2
 80006f8:	60fb      	str	r3, [r7, #12]
      mypData++;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <jset+0x84>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	3301      	adds	r3, #1
 8000700:	4a12      	ldr	r2, [pc, #72]	; (800074c <jset+0x84>)
 8000702:	6013      	str	r3, [r2, #0]
   for (uint8_t i = 0; i < kSize; i++)
 8000704:	7afb      	ldrb	r3, [r7, #11]
 8000706:	3301      	adds	r3, #1
 8000708:	72fb      	strb	r3, [r7, #11]
 800070a:	7afa      	ldrb	r2, [r7, #11]
 800070c:	7abb      	ldrb	r3, [r7, #10]
 800070e:	429a      	cmp	r2, r3
 8000710:	d3e9      	bcc.n	80006e6 <jset+0x1e>
   }

   if ((actualData & 0x1FFF) == 0)
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8000718:	2b00      	cmp	r3, #0
 800071a:	d109      	bne.n	8000730 <jset+0x68>
      jt(filter[_index].destinationTrue);
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <jset+0x88>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	683a      	ldr	r2, [r7, #0]
 8000724:	4413      	add	r3, r2
 8000726:	789b      	ldrb	r3, [r3, #2]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff4b 	bl	80005c4 <jt>
   else
      jf(filter[_index].destinationFalse);
}
 800072e:	e008      	b.n	8000742 <jset+0x7a>
      jf(filter[_index].destinationFalse);
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <jset+0x88>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	00db      	lsls	r3, r3, #3
 8000736:	683a      	ldr	r2, [r7, #0]
 8000738:	4413      	add	r3, r2
 800073a:	78db      	ldrb	r3, [r3, #3]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff51 	bl	80005e4 <jf>
}
 8000742:	bf00      	nop
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200000dc 	.word	0x200000dc
 8000750:	200000e0 	.word	0x200000e0

08000754 <jeq>:

void jeq(uint32_t k, struct sock_filter *filter)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
   uint8_t kSize = getKSize(k);
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f7ff ff9a 	bl	8000698 <getKSize>
 8000764:	4603      	mov	r3, r0
 8000766:	72bb      	strb	r3, [r7, #10]
   uint32_t actualData = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]

   for (uint8_t i = 0; i < kSize; i++)
 800076c:	2300      	movs	r3, #0
 800076e:	72fb      	strb	r3, [r7, #11]
 8000770:	e011      	b.n	8000796 <jeq+0x42>
   {
      actualData = actualData << 8;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	60fb      	str	r3, [r7, #12]
      actualData += *mypData;
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <jeq+0x80>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	461a      	mov	r2, r3
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	4413      	add	r3, r2
 8000784:	60fb      	str	r3, [r7, #12]
      mypData++;
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <jeq+0x80>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	4a11      	ldr	r2, [pc, #68]	; (80007d4 <jeq+0x80>)
 800078e:	6013      	str	r3, [r2, #0]
   for (uint8_t i = 0; i < kSize; i++)
 8000790:	7afb      	ldrb	r3, [r7, #11]
 8000792:	3301      	adds	r3, #1
 8000794:	72fb      	strb	r3, [r7, #11]
 8000796:	7afa      	ldrb	r2, [r7, #11]
 8000798:	7abb      	ldrb	r3, [r7, #10]
 800079a:	429a      	cmp	r2, r3
 800079c:	d3e9      	bcc.n	8000772 <jeq+0x1e>
   }

   if (actualData == k)
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d109      	bne.n	80007ba <jeq+0x66>
      jt(filter[_index].destinationTrue);
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <jeq+0x84>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	00db      	lsls	r3, r3, #3
 80007ac:	683a      	ldr	r2, [r7, #0]
 80007ae:	4413      	add	r3, r2
 80007b0:	789b      	ldrb	r3, [r3, #2]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff06 	bl	80005c4 <jt>
   else
      jf(filter[_index].destinationFalse);
}
 80007b8:	e008      	b.n	80007cc <jeq+0x78>
      jf(filter[_index].destinationFalse);
 80007ba:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <jeq+0x84>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	683a      	ldr	r2, [r7, #0]
 80007c2:	4413      	add	r3, r2
 80007c4:	78db      	ldrb	r3, [r3, #3]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ff0c 	bl	80005e4 <jf>
}
 80007cc:	bf00      	nop
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000dc 	.word	0x200000dc
 80007d8:	200000e0 	.word	0x200000e0

080007dc <Filter>:

uint8_t Filter(uint8_t *pdata, struct sock_filter *filter)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
   uint8_t output = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	73fb      	strb	r3, [r7, #15]
   uint16_t size = 10;
 80007ea:	230a      	movs	r3, #10
 80007ec:	81bb      	strh	r3, [r7, #12]
   while (_index < size)
 80007ee:	e053      	b.n	8000898 <Filter+0xbc>
   {
      switch(filter[_index].code)
 80007f0:	4b2f      	ldr	r3, [pc, #188]	; (80008b0 <Filter+0xd4>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	4413      	add	r3, r2
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	2b80      	cmp	r3, #128	; 0x80
 80007fe:	d03a      	beq.n	8000876 <Filter+0x9a>
 8000800:	2b80      	cmp	r3, #128	; 0x80
 8000802:	dc43      	bgt.n	800088c <Filter+0xb0>
 8000804:	2b50      	cmp	r3, #80	; 0x50
 8000806:	d02b      	beq.n	8000860 <Filter+0x84>
 8000808:	2b50      	cmp	r3, #80	; 0x50
 800080a:	dc3f      	bgt.n	800088c <Filter+0xb0>
 800080c:	2b40      	cmp	r3, #64	; 0x40
 800080e:	d01c      	beq.n	800084a <Filter+0x6e>
 8000810:	2b40      	cmp	r3, #64	; 0x40
 8000812:	dc3b      	bgt.n	800088c <Filter+0xb0>
 8000814:	2b00      	cmp	r3, #0
 8000816:	d002      	beq.n	800081e <Filter+0x42>
 8000818:	2b10      	cmp	r3, #16
 800081a:	d00b      	beq.n	8000834 <Filter+0x58>
 800081c:	e036      	b.n	800088c <Filter+0xb0>
      {
      case BPF_JMP:
         jmp(pdata, filter[_index].k);
 800081e:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <Filter+0xd4>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	00db      	lsls	r3, r3, #3
 8000824:	683a      	ldr	r2, [r7, #0]
 8000826:	4413      	add	r3, r2
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	4619      	mov	r1, r3
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff fee9 	bl	8000604 <jmp>
         break;
 8000832:	e031      	b.n	8000898 <Filter+0xbc>

      case BPF_JEQ:
         jeq(filter[_index].k, filter);
 8000834:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <Filter+0xd4>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	683a      	ldr	r2, [r7, #0]
 800083c:	4413      	add	r3, r2
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	6839      	ldr	r1, [r7, #0]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff86 	bl	8000754 <jeq>
         break;
 8000848:	e026      	b.n	8000898 <Filter+0xbc>

      case BPF_JSET:
         jset(filter[_index].k, filter);
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <Filter+0xd4>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	683a      	ldr	r2, [r7, #0]
 8000852:	4413      	add	r3, r2
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	6839      	ldr	r1, [r7, #0]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff35 	bl	80006c8 <jset>
         break;
 800085e:	e01b      	b.n	8000898 <Filter+0xbc>

      case BPF_LDXB:
         ldxb(filter[_index].k, pdata);
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <Filter+0xd4>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	683a      	ldr	r2, [r7, #0]
 8000868:	4413      	add	r3, r2
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	6879      	ldr	r1, [r7, #4]
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fef0 	bl	8000654 <ldxb>
         break;
 8000874:	e010      	b.n	8000898 <Filter+0xbc>

      case BPF_RET:
         output = filter[_index].k;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <Filter+0xd4>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	683a      	ldr	r2, [r7, #0]
 800087e:	4413      	add	r3, r2
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	73fb      	strb	r3, [r7, #15]
         _index = 10;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <Filter+0xd4>)
 8000886:	220a      	movs	r2, #10
 8000888:	701a      	strb	r2, [r3, #0]
         break;
 800088a:	e005      	b.n	8000898 <Filter+0xbc>

      default:
         output = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	73fb      	strb	r3, [r7, #15]
         _index = 10;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <Filter+0xd4>)
 8000892:	220a      	movs	r2, #10
 8000894:	701a      	strb	r2, [r3, #0]
         break;
 8000896:	bf00      	nop
   while (_index < size)
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <Filter+0xd4>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b29b      	uxth	r3, r3
 800089e:	89ba      	ldrh	r2, [r7, #12]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d8a5      	bhi.n	80007f0 <Filter+0x14>
      }
   }
   return output;
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
   _index = 0;
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200000e0 	.word	0x200000e0

080008b4 <LedCGIHandler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*CGI handler for LEDs*/
const char* LedCGIHandler(int iIndex, int iNumParams, char* pcParam[], char* pcValue[])
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
 80008c0:	603b      	str	r3, [r7, #0]
   uint32_t i = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]

   if (iIndex == 0)
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d146      	bne.n	800095a <LedCGIHandler+0xa6>
   {
     LED2_OFF;
 80008cc:	4b25      	ldr	r3, [pc, #148]	; (8000964 <LedCGIHandler+0xb0>)
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	4a24      	ldr	r2, [pc, #144]	; (8000964 <LedCGIHandler+0xb0>)
 80008d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80008d6:	6153      	str	r3, [r2, #20]
     LED3_OFF;
 80008d8:	4b22      	ldr	r3, [pc, #136]	; (8000964 <LedCGIHandler+0xb0>)
 80008da:	695b      	ldr	r3, [r3, #20]
 80008dc:	4a21      	ldr	r2, [pc, #132]	; (8000964 <LedCGIHandler+0xb0>)
 80008de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008e2:	6153      	str	r3, [r2, #20]

      for (i = 0; i < iNumParams; i++)
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	e033      	b.n	8000952 <LedCGIHandler+0x9e>
      {
         if (strcmp(pcParam[i], "led") == 0)
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	491c      	ldr	r1, [pc, #112]	; (8000968 <LedCGIHandler+0xb4>)
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fc7a 	bl	80001f0 <strcmp>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d124      	bne.n	800094c <LedCGIHandler+0x98>
         {
            if (strcmp(pcValue[i], "1") == 0)
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	683a      	ldr	r2, [r7, #0]
 8000908:	4413      	add	r3, r2
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4917      	ldr	r1, [pc, #92]	; (800096c <LedCGIHandler+0xb8>)
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fc6e 	bl	80001f0 <strcmp>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d106      	bne.n	8000928 <LedCGIHandler+0x74>
               LED2_ON;
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <LedCGIHandler+0xb0>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	4a11      	ldr	r2, [pc, #68]	; (8000964 <LedCGIHandler+0xb0>)
 8000920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000924:	6153      	str	r3, [r2, #20]
 8000926:	e011      	b.n	800094c <LedCGIHandler+0x98>

            else if (strcmp(pcValue[i], "2") == 0)
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	683a      	ldr	r2, [r7, #0]
 800092e:	4413      	add	r3, r2
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	490f      	ldr	r1, [pc, #60]	; (8000970 <LedCGIHandler+0xbc>)
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff fc5b 	bl	80001f0 <strcmp>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d105      	bne.n	800094c <LedCGIHandler+0x98>
               LED3_ON;
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <LedCGIHandler+0xb0>)
 8000942:	695b      	ldr	r3, [r3, #20]
 8000944:	4a07      	ldr	r2, [pc, #28]	; (8000964 <LedCGIHandler+0xb0>)
 8000946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094a:	6153      	str	r3, [r2, #20]
      for (i = 0; i < iNumParams; i++)
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	3301      	adds	r3, #1
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	697a      	ldr	r2, [r7, #20]
 8000956:	429a      	cmp	r2, r3
 8000958:	d3c7      	bcc.n	80008ea <LedCGIHandler+0x36>
         }
      }
   }
   return "/index.html";
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <LedCGIHandler+0xc0>)
}
 800095c:	4618      	mov	r0, r3
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40020400 	.word	0x40020400
 8000968:	0801203c 	.word	0x0801203c
 800096c:	08012040 	.word	0x08012040
 8000970:	08012044 	.word	0x08012044
 8000974:	08012048 	.word	0x08012048

08000978 <myCGIInit>:

void myCGIInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
   theCGITable[0] = LedCGI;
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <myCGIInit+0x1c>)
 800097e:	4a06      	ldr	r2, [pc, #24]	; (8000998 <myCGIInit+0x20>)
 8000980:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000984:	e883 0003 	stmia.w	r3, {r0, r1}

   http_set_cgi_handlers(theCGITable, 1);
 8000988:	2101      	movs	r1, #1
 800098a:	4802      	ldr	r0, [pc, #8]	; (8000994 <myCGIInit+0x1c>)
 800098c:	f005 fdd6 	bl	800653c <http_set_cgi_handlers>
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000128 	.word	0x20000128
 8000998:	08014d60 	.word	0x08014d60

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a0:	f000 fc6a 	bl	8001278 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a4:	f000 f80e 	bl	80009c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a8:	f000 f8a0 	bl	8000aec <MX_GPIO_Init>
  MX_LWIP_Init();
 80009ac:	f003 fd4a 	bl	8004444 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  MX_USART3_UART_Init();
 80009b0:	f000 f872 	bl	8000a98 <MX_USART3_UART_Init>
  httpd_init();
 80009b4:	f005 fda2 	bl	80064fc <httpd_init>
  myCGIInit();
 80009b8:	f7ff ffde 	bl	8000978 <myCGIInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
     MX_LWIP_Process();
 80009bc:	f003 fe8e 	bl	80046dc <MX_LWIP_Process>
 80009c0:	e7fc      	b.n	80009bc <main+0x20>
	...

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b094      	sub	sp, #80	; 0x50
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 0320 	add.w	r3, r7, #32
 80009ce:	2230      	movs	r2, #48	; 0x30
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f010 fa9e 	bl	8010f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <SystemClock_Config+0xcc>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	4a27      	ldr	r2, [pc, #156]	; (8000a90 <SystemClock_Config+0xcc>)
 80009f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f6:	6413      	str	r3, [r2, #64]	; 0x40
 80009f8:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <SystemClock_Config+0xcc>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <SystemClock_Config+0xd0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a21      	ldr	r2, [pc, #132]	; (8000a94 <SystemClock_Config+0xd0>)
 8000a0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <SystemClock_Config+0xd0>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a20:	2301      	movs	r3, #1
 8000a22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a24:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a34:	2304      	movs	r3, #4
 8000a36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a38:	23a8      	movs	r3, #168	; 0xa8
 8000a3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a40:	2307      	movs	r3, #7
 8000a42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a44:	f107 0320 	add.w	r3, r7, #32
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f002 f90b 	bl	8002c64 <HAL_RCC_OscConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a54:	f000 f8f8 	bl	8000c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a58:	230f      	movs	r3, #15
 8000a5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	2105      	movs	r1, #5
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 fb6c 	bl	8003154 <HAL_RCC_ClockConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a82:	f000 f8e1 	bl	8000c48 <Error_Handler>
  }
}
 8000a86:	bf00      	nop
 8000a88:	3750      	adds	r7, #80	; 0x50
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40007000 	.word	0x40007000

08000a98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <MX_USART3_UART_Init+0x50>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000aa4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8000aa8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000ad0:	f002 fd60 	bl	8003594 <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ada:	f000 f8b5 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000e4 	.word	0x200000e4
 8000ae8:	40004800 	.word	0x40004800

08000aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08c      	sub	sp, #48	; 0x30
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
 8000b06:	4b4c      	ldr	r3, [pc, #304]	; (8000c38 <MX_GPIO_Init+0x14c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a4b      	ldr	r2, [pc, #300]	; (8000c38 <MX_GPIO_Init+0x14c>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b49      	ldr	r3, [pc, #292]	; (8000c38 <MX_GPIO_Init+0x14c>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	61bb      	str	r3, [r7, #24]
 8000b1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	4b45      	ldr	r3, [pc, #276]	; (8000c38 <MX_GPIO_Init+0x14c>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a44      	ldr	r2, [pc, #272]	; (8000c38 <MX_GPIO_Init+0x14c>)
 8000b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b42      	ldr	r3, [pc, #264]	; (8000c38 <MX_GPIO_Init+0x14c>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b3e      	ldr	r3, [pc, #248]	; (8000c38 <MX_GPIO_Init+0x14c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a3d      	ldr	r2, [pc, #244]	; (8000c38 <MX_GPIO_Init+0x14c>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b3b      	ldr	r3, [pc, #236]	; (8000c38 <MX_GPIO_Init+0x14c>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b37      	ldr	r3, [pc, #220]	; (8000c38 <MX_GPIO_Init+0x14c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a36      	ldr	r2, [pc, #216]	; (8000c38 <MX_GPIO_Init+0x14c>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b34      	ldr	r3, [pc, #208]	; (8000c38 <MX_GPIO_Init+0x14c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <MX_GPIO_Init+0x14c>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a2f      	ldr	r2, [pc, #188]	; (8000c38 <MX_GPIO_Init+0x14c>)
 8000b7c:	f043 0308 	orr.w	r3, r3, #8
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <MX_GPIO_Init+0x14c>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <MX_GPIO_Init+0x14c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a28      	ldr	r2, [pc, #160]	; (8000c38 <MX_GPIO_Init+0x14c>)
 8000b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <MX_GPIO_Init+0x14c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bb0:	4822      	ldr	r0, [pc, #136]	; (8000c3c <MX_GPIO_Init+0x150>)
 8000bb2:	f002 f83d 	bl	8002c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2140      	movs	r1, #64	; 0x40
 8000bba:	4821      	ldr	r0, [pc, #132]	; (8000c40 <MX_GPIO_Init+0x154>)
 8000bbc:	f002 f838 	bl	8002c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	481b      	ldr	r0, [pc, #108]	; (8000c44 <MX_GPIO_Init+0x158>)
 8000bd8:	f001 fe7e 	bl	80028d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bdc:	f244 0381 	movw	r3, #16513	; 0x4081
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4811      	ldr	r0, [pc, #68]	; (8000c3c <MX_GPIO_Init+0x150>)
 8000bf6:	f001 fe6f 	bl	80028d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bfa:	2340      	movs	r3, #64	; 0x40
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480b      	ldr	r0, [pc, #44]	; (8000c40 <MX_GPIO_Init+0x154>)
 8000c12:	f001 fe61 	bl	80028d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_GPIO_Init+0x154>)
 8000c2a:	f001 fe55 	bl	80028d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c2e:	bf00      	nop
 8000c30:	3730      	adds	r7, #48	; 0x30
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020400 	.word	0x40020400
 8000c40:	40021800 	.word	0x40021800
 8000c44:	40020800 	.word	0x40020800

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
}
 8000c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <Error_Handler+0x8>
	...

08000c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	4a0f      	ldr	r2, [pc, #60]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c68:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	4a08      	ldr	r2, [pc, #32]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c84:	6413      	str	r3, [r2, #64]	; 0x40
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800

08000ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a1d      	ldr	r2, [pc, #116]	; (8000d38 <HAL_UART_MspInit+0x94>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d134      	bne.n	8000d30 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <HAL_UART_MspInit+0x98>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a1b      	ldr	r2, [pc, #108]	; (8000d3c <HAL_UART_MspInit+0x98>)
 8000cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <HAL_UART_MspInit+0x98>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <HAL_UART_MspInit+0x98>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <HAL_UART_MspInit+0x98>)
 8000cec:	f043 0308 	orr.w	r3, r3, #8
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_UART_MspInit+0x98>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0308 	and.w	r3, r3, #8
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d10:	2307      	movs	r3, #7
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4809      	ldr	r0, [pc, #36]	; (8000d40 <HAL_UART_MspInit+0x9c>)
 8000d1c:	f001 fddc 	bl	80028d8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	2027      	movs	r0, #39	; 0x27
 8000d26:	f000 fc18 	bl	800155a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d2a:	2027      	movs	r0, #39	; 0x27
 8000d2c:	f000 fc31 	bl	8001592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	; 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40004800 	.word	0x40004800
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020c00 	.word	0x40020c00

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <NMI_Handler+0x4>

08000d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <MemManage_Handler+0x4>

08000d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d90:	f000 fac4 	bl	800131c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <USART3_IRQHandler+0x10>)
 8000d9e:	f002 fc8b 	bl	80036b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200000e4 	.word	0x200000e4

08000dac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return 1;
 8000db0:	2301      	movs	r3, #1
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <_kill>:

int _kill(int pid, int sig)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <_kill+0x20>)
 8000dc8:	2216      	movs	r2, #22
 8000dca:	601a      	str	r2, [r3, #0]
  return -1;
 8000dcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	20008880 	.word	0x20008880

08000de0 <_exit>:

void _exit (int status)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ffe5 	bl	8000dbc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000df2:	e7fe      	b.n	8000df2 <_exit+0x12>

08000df4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	e00a      	b.n	8000e1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e06:	f3af 8000 	nop.w
 8000e0a:	4601      	mov	r1, r0
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	60ba      	str	r2, [r7, #8]
 8000e12:	b2ca      	uxtb	r2, r1
 8000e14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	697a      	ldr	r2, [r7, #20]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	dbf0      	blt.n	8000e06 <_read+0x12>
  }

  return len;
 8000e24:	687b      	ldr	r3, [r7, #4]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b086      	sub	sp, #24
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	60f8      	str	r0, [r7, #12]
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	e009      	b.n	8000e54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	1c5a      	adds	r2, r3, #1
 8000e44:	60ba      	str	r2, [r7, #8]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	3301      	adds	r3, #1
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	dbf1      	blt.n	8000e40 <_write+0x12>
  }
  return len;
 8000e5c:	687b      	ldr	r3, [r7, #4]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <_close>:

int _close(int file)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
 8000e86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <_isatty>:

int _isatty(int file)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ea6:	2301      	movs	r3, #1
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b087      	sub	sp, #28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed8:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <_sbrk+0x5c>)
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <_sbrk+0x60>)
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d102      	bne.n	8000ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <_sbrk+0x64>)
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <_sbrk+0x68>)
 8000ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d205      	bcs.n	8000f0c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <_sbrk+0x6c>)
 8000f02:	220c      	movs	r2, #12
 8000f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	e009      	b.n	8000f20 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <_sbrk+0x64>)
 8000f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	371c      	adds	r7, #28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	20030000 	.word	0x20030000
 8000f30:	00000400 	.word	0x00000400
 8000f34:	20000130 	.word	0x20000130
 8000f38:	20008890 	.word	0x20008890
 8000f3c:	20008880 	.word	0x20008880

08000f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <SystemInit+0x20>)
 8000f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <SystemInit+0x20>)
 8000f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f9c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f6a:	490e      	ldr	r1, [pc, #56]	; (8000fa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f6c:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f80:	4c0b      	ldr	r4, [pc, #44]	; (8000fb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f8e:	f7ff ffd7 	bl	8000f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f92:	f00f ff7d 	bl	8010e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f96:	f7ff fd01 	bl	800099c <main>
  bx  lr    
 8000f9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f9c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8000fa8:	08015490 	.word	0x08015490
  ldr r2, =_sbss
 8000fac:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8000fb0:	20008890 	.word	0x20008890

08000fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC_IRQHandler>

08000fb6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00b      	beq.n	8000fde <LAN8742_RegisterBusIO+0x28>
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d007      	beq.n	8000fde <LAN8742_RegisterBusIO+0x28>
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <LAN8742_RegisterBusIO+0x28>
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d102      	bne.n	8000fe4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	e014      	b.n	800100e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	691a      	ldr	r2, [r3, #16]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d17c      	bne.n	8001134 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d002      	beq.n	8001048 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2220      	movs	r2, #32
 800104c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	e01c      	b.n	800108e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	f107 0208 	add.w	r2, r7, #8
 800105c:	2112      	movs	r1, #18
 800105e:	6978      	ldr	r0, [r7, #20]
 8001060:	4798      	blx	r3
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	da03      	bge.n	8001070 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001068:	f06f 0304 	mvn.w	r3, #4
 800106c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800106e:	e00b      	b.n	8001088 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	f003 031f 	and.w	r3, r3, #31
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	429a      	cmp	r2, r3
 800107a:	d105      	bne.n	8001088 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
         break;
 8001086:	e005      	b.n	8001094 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	3301      	adds	r3, #1
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	2b1f      	cmp	r3, #31
 8001092:	d9df      	bls.n	8001054 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b1f      	cmp	r3, #31
 800109a:	d902      	bls.n	80010a2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800109c:	f06f 0302 	mvn.w	r3, #2
 80010a0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d145      	bne.n	8001134 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	6810      	ldr	r0, [r2, #0]
 80010b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010b4:	2100      	movs	r1, #0
 80010b6:	4798      	blx	r3
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	db37      	blt.n	800112e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	6810      	ldr	r0, [r2, #0]
 80010c6:	f107 0208 	add.w	r2, r7, #8
 80010ca:	2100      	movs	r1, #0
 80010cc:	4798      	blx	r3
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	db28      	blt.n	8001126 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4798      	blx	r3
 80010da:	4603      	mov	r3, r0
 80010dc:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80010de:	e01c      	b.n	800111a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4798      	blx	r3
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010f2:	d80e      	bhi.n	8001112 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	6810      	ldr	r0, [r2, #0]
 80010fc:	f107 0208 	add.w	r2, r7, #8
 8001100:	2100      	movs	r1, #0
 8001102:	4798      	blx	r3
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	da07      	bge.n	800111a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800110a:	f06f 0304 	mvn.w	r3, #4
 800110e:	613b      	str	r3, [r7, #16]
                 break;
 8001110:	e010      	b.n	8001134 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001112:	f06f 0301 	mvn.w	r3, #1
 8001116:	613b      	str	r3, [r7, #16]
               break;
 8001118:	e00c      	b.n	8001134 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1dd      	bne.n	80010e0 <LAN8742_Init+0xc6>
 8001124:	e006      	b.n	8001134 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001126:	f06f 0304 	mvn.w	r3, #4
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	e002      	b.n	8001134 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800112e:	f06f 0303 	mvn.w	r3, #3
 8001132:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d112      	bne.n	8001160 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	4798      	blx	r3
 8001140:	4603      	mov	r3, r0
 8001142:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001144:	bf00      	nop
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	4798      	blx	r3
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001158:	d9f5      	bls.n	8001146 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2201      	movs	r2, #1
 800115e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001160:	693b      	ldr	r3, [r7, #16]
 }
 8001162:	4618      	mov	r0, r3
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b084      	sub	sp, #16
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	6810      	ldr	r0, [r2, #0]
 800117e:	f107 020c 	add.w	r2, r7, #12
 8001182:	2101      	movs	r1, #1
 8001184:	4798      	blx	r3
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	da02      	bge.n	8001192 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800118c:	f06f 0304 	mvn.w	r3, #4
 8001190:	e06e      	b.n	8001270 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	6810      	ldr	r0, [r2, #0]
 800119a:	f107 020c 	add.w	r2, r7, #12
 800119e:	2101      	movs	r1, #1
 80011a0:	4798      	blx	r3
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	da02      	bge.n	80011ae <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80011a8:	f06f 0304 	mvn.w	r3, #4
 80011ac:	e060      	b.n	8001270 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d101      	bne.n	80011bc <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80011b8:	2301      	movs	r3, #1
 80011ba:	e059      	b.n	8001270 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	6810      	ldr	r0, [r2, #0]
 80011c4:	f107 020c 	add.w	r2, r7, #12
 80011c8:	2100      	movs	r1, #0
 80011ca:	4798      	blx	r3
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	da02      	bge.n	80011d8 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80011d2:	f06f 0304 	mvn.w	r3, #4
 80011d6:	e04b      	b.n	8001270 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d11b      	bne.n	800121a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d006      	beq.n	80011fa <LAN8742_GetLinkState+0x90>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80011f6:	2302      	movs	r3, #2
 80011f8:	e03a      	b.n	8001270 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001204:	2303      	movs	r3, #3
 8001206:	e033      	b.n	8001270 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001212:	2304      	movs	r3, #4
 8001214:	e02c      	b.n	8001270 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001216:	2305      	movs	r3, #5
 8001218:	e02a      	b.n	8001270 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	6810      	ldr	r0, [r2, #0]
 8001222:	f107 020c 	add.w	r2, r7, #12
 8001226:	211f      	movs	r1, #31
 8001228:	4798      	blx	r3
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	da02      	bge.n	8001236 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001230:	f06f 0304 	mvn.w	r3, #4
 8001234:	e01c      	b.n	8001270 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001240:	2306      	movs	r3, #6
 8001242:	e015      	b.n	8001270 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 031c 	and.w	r3, r3, #28
 800124a:	2b18      	cmp	r3, #24
 800124c:	d101      	bne.n	8001252 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800124e:	2302      	movs	r3, #2
 8001250:	e00e      	b.n	8001270 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f003 031c 	and.w	r3, r3, #28
 8001258:	2b08      	cmp	r3, #8
 800125a:	d101      	bne.n	8001260 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800125c:	2303      	movs	r3, #3
 800125e:	e007      	b.n	8001270 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f003 031c 	and.w	r3, r3, #28
 8001266:	2b14      	cmp	r3, #20
 8001268:	d101      	bne.n	800126e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800126a:	2304      	movs	r3, #4
 800126c:	e000      	b.n	8001270 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800126e:	2305      	movs	r3, #5
    }				
  }
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800127c:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <HAL_Init+0x40>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0d      	ldr	r2, [pc, #52]	; (80012b8 <HAL_Init+0x40>)
 8001282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001286:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <HAL_Init+0x40>)
 800128e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001292:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <HAL_Init+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <HAL_Init+0x40>)
 800129a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a0:	2003      	movs	r0, #3
 80012a2:	f000 f94f 	bl	8001544 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f000 f808 	bl	80012bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ac:	f7ff fcd2 	bl	8000c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023c00 	.word	0x40023c00

080012bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_InitTick+0x54>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_InitTick+0x58>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 f967 	bl	80015ae <HAL_SYSTICK_Config>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00e      	b.n	8001308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b0f      	cmp	r3, #15
 80012ee:	d80a      	bhi.n	8001306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f0:	2200      	movs	r2, #0
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	f000 f92f 	bl	800155a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012fc:	4a06      	ldr	r2, [pc, #24]	; (8001318 <HAL_InitTick+0x5c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	e000      	b.n	8001308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000030 	.word	0x20000030
 8001314:	20000038 	.word	0x20000038
 8001318:	20000034 	.word	0x20000034

0800131c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_IncTick+0x20>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_IncTick+0x24>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4413      	add	r3, r2
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <HAL_IncTick+0x24>)
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000038 	.word	0x20000038
 8001340:	20000134 	.word	0x20000134

08001344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return uwTick;
 8001348:	4b03      	ldr	r3, [pc, #12]	; (8001358 <HAL_GetTick+0x14>)
 800134a:	681b      	ldr	r3, [r3, #0]
}
 800134c:	4618      	mov	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000134 	.word	0x20000134

0800135c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001364:	f7ff ffee 	bl	8001344 <HAL_GetTick>
 8001368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001374:	d005      	beq.n	8001382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_Delay+0x44>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4413      	add	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001382:	bf00      	nop
 8001384:	f7ff ffde 	bl	8001344 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	429a      	cmp	r2, r3
 8001392:	d8f7      	bhi.n	8001384 <HAL_Delay+0x28>
  {
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000038 	.word	0x20000038

080013a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c0:	4013      	ands	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d6:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	60d3      	str	r3, [r2, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <__NVIC_GetPriorityGrouping+0x18>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	f003 0307 	and.w	r3, r3, #7
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	2b00      	cmp	r3, #0
 8001418:	db0b      	blt.n	8001432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	f003 021f 	and.w	r2, r3, #31
 8001420:	4907      	ldr	r1, [pc, #28]	; (8001440 <__NVIC_EnableIRQ+0x38>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	095b      	lsrs	r3, r3, #5
 8001428:	2001      	movs	r0, #1
 800142a:	fa00 f202 	lsl.w	r2, r0, r2
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000e100 	.word	0xe000e100

08001444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	6039      	str	r1, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	2b00      	cmp	r3, #0
 8001456:	db0a      	blt.n	800146e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	b2da      	uxtb	r2, r3
 800145c:	490c      	ldr	r1, [pc, #48]	; (8001490 <__NVIC_SetPriority+0x4c>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	0112      	lsls	r2, r2, #4
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	440b      	add	r3, r1
 8001468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800146c:	e00a      	b.n	8001484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4908      	ldr	r1, [pc, #32]	; (8001494 <__NVIC_SetPriority+0x50>)
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	3b04      	subs	r3, #4
 800147c:	0112      	lsls	r2, r2, #4
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	440b      	add	r3, r1
 8001482:	761a      	strb	r2, [r3, #24]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000e100 	.word	0xe000e100
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f1c3 0307 	rsb	r3, r3, #7
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	bf28      	it	cs
 80014b6:	2304      	movcs	r3, #4
 80014b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3304      	adds	r3, #4
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d902      	bls.n	80014c8 <NVIC_EncodePriority+0x30>
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3b03      	subs	r3, #3
 80014c6:	e000      	b.n	80014ca <NVIC_EncodePriority+0x32>
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	f04f 32ff 	mov.w	r2, #4294967295
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43da      	mvns	r2, r3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	401a      	ands	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	43d9      	mvns	r1, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	4313      	orrs	r3, r2
         );
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001510:	d301      	bcc.n	8001516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001512:	2301      	movs	r3, #1
 8001514:	e00f      	b.n	8001536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <SysTick_Config+0x40>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151e:	210f      	movs	r1, #15
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f7ff ff8e 	bl	8001444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <SysTick_Config+0x40>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152e:	4b04      	ldr	r3, [pc, #16]	; (8001540 <SysTick_Config+0x40>)
 8001530:	2207      	movs	r2, #7
 8001532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	e000e010 	.word	0xe000e010

08001544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff ff29 	bl	80013a4 <__NVIC_SetPriorityGrouping>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800156c:	f7ff ff3e 	bl	80013ec <__NVIC_GetPriorityGrouping>
 8001570:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	6978      	ldr	r0, [r7, #20]
 8001578:	f7ff ff8e 	bl	8001498 <NVIC_EncodePriority>
 800157c:	4602      	mov	r2, r0
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff5d 	bl	8001444 <__NVIC_SetPriority>
}
 800158a:	bf00      	nop
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff31 	bl	8001408 <__NVIC_EnableIRQ>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ffa2 	bl	8001500 <SysTick_Config>
 80015bc:	4603      	mov	r3, r0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b084      	sub	sp, #16
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015d4:	f7ff feb6 	bl	8001344 <HAL_GetTick>
 80015d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d008      	beq.n	80015f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2280      	movs	r2, #128	; 0x80
 80015ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e052      	b.n	800169e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0216 	bic.w	r2, r2, #22
 8001606:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	695a      	ldr	r2, [r3, #20]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001616:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	2b00      	cmp	r3, #0
 800161e:	d103      	bne.n	8001628 <HAL_DMA_Abort+0x62>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001624:	2b00      	cmp	r3, #0
 8001626:	d007      	beq.n	8001638 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0208 	bic.w	r2, r2, #8
 8001636:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0201 	bic.w	r2, r2, #1
 8001646:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001648:	e013      	b.n	8001672 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800164a:	f7ff fe7b 	bl	8001344 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b05      	cmp	r3, #5
 8001656:	d90c      	bls.n	8001672 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2220      	movs	r2, #32
 800165c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2203      	movs	r2, #3
 8001662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e015      	b.n	800169e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1e4      	bne.n	800164a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001684:	223f      	movs	r2, #63	; 0x3f
 8001686:	409a      	lsls	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d004      	beq.n	80016c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e00c      	b.n	80016de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2205      	movs	r2, #5
 80016c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0201 	bic.w	r2, r2, #1
 80016da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e06c      	b.n	80017d8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001704:	2b00      	cmp	r3, #0
 8001706:	d106      	bne.n	8001716 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2223      	movs	r2, #35	; 0x23
 800170c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f003 f9e1 	bl	8004ad8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <HAL_ETH_Init+0xf4>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	4a30      	ldr	r2, [pc, #192]	; (80017e0 <HAL_ETH_Init+0xf4>)
 8001720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001724:	6453      	str	r3, [r2, #68]	; 0x44
 8001726:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <HAL_ETH_Init+0xf4>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001732:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <HAL_ETH_Init+0xf8>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	4a2b      	ldr	r2, [pc, #172]	; (80017e4 <HAL_ETH_Init+0xf8>)
 8001738:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800173c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800173e:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <HAL_ETH_Init+0xf8>)
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	4927      	ldr	r1, [pc, #156]	; (80017e4 <HAL_ETH_Init+0xf8>)
 8001748:	4313      	orrs	r3, r2
 800174a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800174c:	4b25      	ldr	r3, [pc, #148]	; (80017e4 <HAL_ETH_Init+0xf8>)
 800174e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001766:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001768:	f7ff fdec 	bl	8001344 <HAL_GetTick>
 800176c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800176e:	e011      	b.n	8001794 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001770:	f7ff fde8 	bl	8001344 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800177e:	d909      	bls.n	8001794 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2204      	movs	r2, #4
 8001784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	22e0      	movs	r2, #224	; 0xe0
 800178c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e021      	b.n	80017d8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1e4      	bne.n	8001770 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 fdf0 	bl	800238c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 fe97 	bl	80024e0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 feed 	bl	8002592 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	461a      	mov	r2, r3
 80017be:	2100      	movs	r1, #0
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 fe55 	bl	8002470 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2210      	movs	r2, #16
 80017d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40013800 	.word	0x40013800

080017e8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017f6:	2b10      	cmp	r3, #16
 80017f8:	d150      	bne.n	800189c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2223      	movs	r2, #35	; 0x23
 80017fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2204      	movs	r2, #4
 8001806:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 f9fd 	bl	8001c08 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 0208 	orr.w	r2, r2, #8
 800181c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001826:	2001      	movs	r0, #1
 8001828:	f7ff fd98 	bl	800135c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f042 0204 	orr.w	r2, r2, #4
 8001842:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800184c:	2001      	movs	r0, #1
 800184e:	f7ff fd85 	bl	800135c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 fc36 	bl	80020cc <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001872:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001876:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6812      	ldr	r2, [r2, #0]
 8001886:	f043 0302 	orr.w	r3, r3, #2
 800188a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800188e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2223      	movs	r2, #35	; 0x23
 8001894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	e000      	b.n	800189e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
  }
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b084      	sub	sp, #16
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018b4:	2b23      	cmp	r3, #35	; 0x23
 80018b6:	d14a      	bne.n	800194e <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2223      	movs	r2, #35	; 0x23
 80018bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018d6:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	f023 0302 	bic.w	r3, r3, #2
 80018ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018ee:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0204 	bic.w	r2, r2, #4
 80018fe:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001908:	2001      	movs	r0, #1
 800190a:	f7ff fd27 	bl	800135c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 fbd8 	bl	80020cc <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0208 	bic.w	r2, r2, #8
 800192a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001934:	2001      	movs	r0, #1
 8001936:	f7ff fd11 	bl	800135c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2210      	movs	r2, #16
 8001946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800194a:	2300      	movs	r3, #0
 800194c:	e000      	b.n	8001950 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
  }
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d109      	bne.n	800197e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001970:	f043 0201 	orr.w	r2, r3, #1
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e07c      	b.n	8001a78 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001984:	2b23      	cmp	r3, #35	; 0x23
 8001986:	d176      	bne.n	8001a76 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001988:	2200      	movs	r2, #0
 800198a:	68b9      	ldr	r1, [r7, #8]
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 fe6d 	bl	800266c <ETH_Prepare_Tx_Descriptors>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d009      	beq.n	80019ac <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800199e:	f043 0202 	orr.w	r2, r3, #2
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e065      	b.n	8001a78 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019ac:	f3bf 8f4f 	dsb	sy
}
 80019b0:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3206      	adds	r2, #6
 80019ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019be:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d904      	bls.n	80019dc <HAL_ETH_Transmit+0x84>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d6:	1f1a      	subs	r2, r3, #4
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3106      	adds	r1, #6
 80019e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019f0:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80019f2:	f7ff fca7 	bl	8001344 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80019f8:	e037      	b.n	8001a6a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d011      	beq.n	8001a30 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a12:	f043 0208 	orr.w	r2, r3, #8
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a24:	695a      	ldr	r2, [r3, #20]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e023      	b.n	8001a78 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a36:	d018      	beq.n	8001a6a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a38:	f7ff fc84 	bl	8001344 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d302      	bcc.n	8001a4e <HAL_ETH_Transmit+0xf6>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10d      	bne.n	8001a6a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a54:	f043 0204 	orr.w	r2, r3, #4
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001a64:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e006      	b.n	8001a78 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	dbc3      	blt.n	80019fa <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e000      	b.n	8001a78 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
  }
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d109      	bne.n	8001aac <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9e:	f043 0201 	orr.w	r2, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0a8      	b.n	8001bfe <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ab2:	2b23      	cmp	r3, #35	; 0x23
 8001ab4:	d001      	beq.n	8001aba <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e0a1      	b.n	8001bfe <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abe:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69fa      	ldr	r2, [r7, #28]
 8001ac4:	3212      	adds	r2, #18
 8001ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aca:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ad0:	f1c3 0304 	rsb	r3, r3, #4
 8001ad4:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ad6:	e06a      	b.n	8001bae <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d007      	beq.n	8001af4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	699a      	ldr	r2, [r3, #24]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	69da      	ldr	r2, [r3, #28]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d103      	bne.n	8001b08 <HAL_ETH_ReadData+0x88>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d040      	beq.n	8001b8a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00c      	beq.n	8001b4c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	0c1b      	lsrs	r3, r3, #16
 8001b38:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b3c:	3b04      	subs	r3, #4
 8001b3e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b64:	461a      	mov	r2, r3
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	f003 f985 	bl	8004e78 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	441a      	add	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	2200      	movs	r2, #0
 8001b88:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	61fb      	str	r3, [r7, #28]
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d902      	bls.n	8001b9c <HAL_ETH_ReadData+0x11c>
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3b04      	subs	r3, #4
 8001b9a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69fa      	ldr	r2, [r7, #28]
 8001ba0:	3212      	adds	r2, #18
 8001ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3301      	adds	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	db06      	blt.n	8001bc4 <HAL_ETH_ReadData+0x144>
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d202      	bcs.n	8001bc4 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d089      	beq.n	8001ad8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	441a      	add	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f815 	bl	8001c08 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d108      	bne.n	8001bfc <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	e000      	b.n	8001bfe <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3720      	adds	r7, #32
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001c14:	2301      	movs	r3, #1
 8001c16:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c1c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69fa      	ldr	r2, [r7, #28]
 8001c22:	3212      	adds	r2, #18
 8001c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c28:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c2e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001c30:	e040      	b.n	8001cb4 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d112      	bne.n	8001c60 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001c3a:	f107 030c 	add.w	r3, r7, #12
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 f8ea 	bl	8004e18 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d102      	bne.n	8001c50 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	74fb      	strb	r3, [r7, #19]
 8001c4e:	e007      	b.n	8001c60 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	461a      	mov	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001c60:	7cfb      	ldrb	r3, [r7, #19]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d026      	beq.n	8001cb4 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d103      	bne.n	8001c76 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	4a1e      	ldr	r2, [pc, #120]	; (8001cec <ETH_UpdateDescriptor+0xe4>)
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	e003      	b.n	8001c7e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001c7c:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c7e:	f3bf 8f5f 	dmb	sy
}
 8001c82:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	3301      	adds	r3, #1
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d902      	bls.n	8001ca2 <ETH_UpdateDescriptor+0x9a>
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	3b04      	subs	r3, #4
 8001ca0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	3212      	adds	r2, #18
 8001ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cac:	617b      	str	r3, [r7, #20]
      desccount--;
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <ETH_UpdateDescriptor+0xb8>
 8001cba:	7cfb      	ldrb	r3, [r7, #19]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1b8      	bne.n	8001c32 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d00c      	beq.n	8001ce4 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	3720      	adds	r7, #32
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	80004600 	.word	0x80004600

08001cf0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f003 031c 	and.w	r3, r3, #28
 8001d0c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	02db      	lsls	r3, r3, #11
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	019b      	lsls	r3, r3, #6
 8001d1e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f023 0302 	bic.w	r3, r3, #2
 8001d2e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001d40:	f7ff fb00 	bl	8001344 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d46:	e00d      	b.n	8001d64 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001d48:	f7ff fafc 	bl	8001344 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d56:	d301      	bcc.n	8001d5c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e010      	b.n	8001d7e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1ec      	bne.n	8001d48 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	461a      	mov	r2, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f003 031c 	and.w	r3, r3, #28
 8001da2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	02db      	lsls	r3, r3, #11
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	019b      	lsls	r3, r3, #6
 8001db4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001de0:	f7ff fab0 	bl	8001344 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001de6:	e00d      	b.n	8001e04 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001de8:	f7ff faac 	bl	8001344 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df6:	d301      	bcc.n	8001dfc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e009      	b.n	8001e10 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1ec      	bne.n	8001de8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0d9      	b.n	8001fe0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	bf14      	ite	ne
 8001e3a:	2301      	movne	r3, #1
 8001e3c:	2300      	moveq	r3, #0
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bf0c      	ite	eq
 8001e64:	2301      	moveq	r3, #1
 8001e66:	2300      	movne	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bf14      	ite	ne
 8001e80:	2301      	movne	r3, #1
 8001e82:	2300      	moveq	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	bf0c      	ite	eq
 8001e9a:	2301      	moveq	r3, #1
 8001e9c:	2300      	movne	r3, #0
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf14      	ite	ne
 8001eb4:	2301      	movne	r3, #1
 8001eb6:	2300      	moveq	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	bf0c      	ite	eq
 8001eea:	2301      	moveq	r3, #1
 8001eec:	2300      	movne	r3, #0
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	bf14      	ite	ne
 8001f1e:	2301      	movne	r3, #1
 8001f20:	2300      	moveq	r3, #0
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	461a      	mov	r2, r3
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	bf14      	ite	ne
 8001f46:	2301      	movne	r3, #1
 8001f48:	2300      	moveq	r3, #0
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	bf14      	ite	ne
 8001f60:	2301      	movne	r3, #1
 8001f62:	2300      	moveq	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	461a      	mov	r2, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bf0c      	ite	eq
 8001f7c:	2301      	moveq	r3, #1
 8001f7e:	2300      	movne	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	0c1b      	lsrs	r3, r3, #16
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf14      	ite	ne
 8001fb4:	2301      	movne	r3, #1
 8001fb6:	2300      	moveq	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf14      	ite	ne
 8001fd0:	2301      	movne	r3, #1
 8001fd2:	2300      	moveq	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e00b      	b.n	8002018 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002006:	2b10      	cmp	r3, #16
 8002008:	d105      	bne.n	8002016 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800200a:	6839      	ldr	r1, [r7, #0]
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f883 	bl	8002118 <ETH_SetMACConfig>

    return HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	e000      	b.n	8002018 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
  }
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f023 031c 	bic.w	r3, r3, #28
 8002036:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002038:	f001 fa78 	bl	800352c <HAL_RCC_GetHCLKFreq>
 800203c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d908      	bls.n	8002058 <HAL_ETH_SetMDIOClockRange+0x38>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d804      	bhi.n	8002058 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f043 0308 	orr.w	r3, r3, #8
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	e027      	b.n	80020a8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	4a18      	ldr	r2, [pc, #96]	; (80020bc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d908      	bls.n	8002072 <HAL_ETH_SetMDIOClockRange+0x52>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4a17      	ldr	r2, [pc, #92]	; (80020c0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d204      	bcs.n	8002072 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f043 030c 	orr.w	r3, r3, #12
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	e01a      	b.n	80020a8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d303      	bcc.n	8002082 <HAL_ETH_SetMDIOClockRange+0x62>
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	4a11      	ldr	r2, [pc, #68]	; (80020c4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d911      	bls.n	80020a6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	4a0f      	ldr	r2, [pc, #60]	; (80020c4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d908      	bls.n	800209c <HAL_ETH_SetMDIOClockRange+0x7c>
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	4a0e      	ldr	r2, [pc, #56]	; (80020c8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d804      	bhi.n	800209c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f043 0304 	orr.w	r3, r3, #4
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	e005      	b.n	80020a8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f043 0310 	orr.w	r3, r3, #16
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	e000      	b.n	80020a8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80020a6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	611a      	str	r2, [r3, #16]
}
 80020b0:	bf00      	nop
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	01312cff 	.word	0x01312cff
 80020bc:	02160ebf 	.word	0x02160ebf
 80020c0:	03938700 	.word	0x03938700
 80020c4:	05f5e0ff 	.word	0x05f5e0ff
 80020c8:	08f0d17f 	.word	0x08f0d17f

080020cc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020ee:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020fc:	2001      	movs	r0, #1
 80020fe:	f7ff f92d 	bl	800135c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800210c:	6193      	str	r3, [r2, #24]
}
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4b51      	ldr	r3, [pc, #324]	; (8002274 <ETH_SetMACConfig+0x15c>)
 800212e:	4013      	ands	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	7c1b      	ldrb	r3, [r3, #16]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d102      	bne.n	8002140 <ETH_SetMACConfig+0x28>
 800213a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800213e:	e000      	b.n	8002142 <ETH_SetMACConfig+0x2a>
 8002140:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	7c5b      	ldrb	r3, [r3, #17]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d102      	bne.n	8002150 <ETH_SetMACConfig+0x38>
 800214a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800214e:	e000      	b.n	8002152 <ETH_SetMACConfig+0x3a>
 8002150:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002152:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002158:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	7fdb      	ldrb	r3, [r3, #31]
 800215e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002160:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002166:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	7f92      	ldrb	r2, [r2, #30]
 800216c:	2a00      	cmp	r2, #0
 800216e:	d102      	bne.n	8002176 <ETH_SetMACConfig+0x5e>
 8002170:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002174:	e000      	b.n	8002178 <ETH_SetMACConfig+0x60>
 8002176:	2200      	movs	r2, #0
                        macconf->Speed |
 8002178:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	7f1b      	ldrb	r3, [r3, #28]
 800217e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002180:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002186:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	791b      	ldrb	r3, [r3, #4]
 800218c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800218e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002196:	2a00      	cmp	r2, #0
 8002198:	d102      	bne.n	80021a0 <ETH_SetMACConfig+0x88>
 800219a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800219e:	e000      	b.n	80021a2 <ETH_SetMACConfig+0x8a>
 80021a0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021a2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	7bdb      	ldrb	r3, [r3, #15]
 80021a8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021aa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021b8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021ba:	4313      	orrs	r3, r2
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	4313      	orrs	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021d2:	2001      	movs	r0, #1
 80021d4:	f7ff f8c2 	bl	800135c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	f64f 7341 	movw	r3, #65345	; 0xff41
 80021ee:	4013      	ands	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80021fe:	2a00      	cmp	r2, #0
 8002200:	d101      	bne.n	8002206 <ETH_SetMACConfig+0xee>
 8002202:	2280      	movs	r2, #128	; 0x80
 8002204:	e000      	b.n	8002208 <ETH_SetMACConfig+0xf0>
 8002206:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002208:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800220e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002216:	2a01      	cmp	r2, #1
 8002218:	d101      	bne.n	800221e <ETH_SetMACConfig+0x106>
 800221a:	2208      	movs	r2, #8
 800221c:	e000      	b.n	8002220 <ETH_SetMACConfig+0x108>
 800221e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002220:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002228:	2a01      	cmp	r2, #1
 800222a:	d101      	bne.n	8002230 <ETH_SetMACConfig+0x118>
 800222c:	2204      	movs	r2, #4
 800222e:	e000      	b.n	8002232 <ETH_SetMACConfig+0x11a>
 8002230:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002232:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800223a:	2a01      	cmp	r2, #1
 800223c:	d101      	bne.n	8002242 <ETH_SetMACConfig+0x12a>
 800223e:	2202      	movs	r2, #2
 8002240:	e000      	b.n	8002244 <ETH_SetMACConfig+0x12c>
 8002242:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002244:	4313      	orrs	r3, r2
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800225c:	2001      	movs	r0, #1
 800225e:	f7ff f87d 	bl	800135c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	619a      	str	r2, [r3, #24]
}
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	ff20810f 	.word	0xff20810f

08002278 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	4b3d      	ldr	r3, [pc, #244]	; (8002388 <ETH_SetDMAConfig+0x110>)
 8002292:	4013      	ands	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	7b1b      	ldrb	r3, [r3, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d102      	bne.n	80022a4 <ETH_SetDMAConfig+0x2c>
 800229e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022a2:	e000      	b.n	80022a6 <ETH_SetDMAConfig+0x2e>
 80022a4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	7b5b      	ldrb	r3, [r3, #13]
 80022aa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022ac:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	7f52      	ldrb	r2, [r2, #29]
 80022b2:	2a00      	cmp	r2, #0
 80022b4:	d102      	bne.n	80022bc <ETH_SetDMAConfig+0x44>
 80022b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022ba:	e000      	b.n	80022be <ETH_SetDMAConfig+0x46>
 80022bc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022be:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	7b9b      	ldrb	r3, [r3, #14]
 80022c4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022c6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022cc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	7f1b      	ldrb	r3, [r3, #28]
 80022d2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80022d4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	7f9b      	ldrb	r3, [r3, #30]
 80022da:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022dc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80022e2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022ea:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022ec:	4313      	orrs	r3, r2
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022fc:	461a      	mov	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800230e:	2001      	movs	r0, #1
 8002310:	f7ff f824 	bl	800135c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800231c:	461a      	mov	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	791b      	ldrb	r3, [r3, #4]
 8002326:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800232c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002332:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002338:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002340:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002342:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800234a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002350:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800235a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800235e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800236c:	2001      	movs	r0, #1
 800236e:	f7fe fff5 	bl	800135c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800237a:	461a      	mov	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6013      	str	r3, [r2, #0]
}
 8002380:	bf00      	nop
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	f8de3f23 	.word	0xf8de3f23

0800238c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b0a6      	sub	sp, #152	; 0x98
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002394:	2301      	movs	r3, #1
 8002396:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800239a:	2301      	movs	r3, #1
 800239c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80023a0:	2300      	movs	r3, #0
 80023a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80023aa:	2301      	movs	r3, #1
 80023ac:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80023b6:	2301      	movs	r3, #1
 80023b8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80023bc:	2300      	movs	r3, #0
 80023be:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80023c8:	2300      	movs	r3, #0
 80023ca:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80023dc:	2300      	movs	r3, #0
 80023de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80023ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023f2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80023f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002400:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002404:	4619      	mov	r1, r3
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff fe86 	bl	8002118 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800240c:	2301      	movs	r3, #1
 800240e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002410:	2301      	movs	r3, #1
 8002412:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002414:	2301      	movs	r3, #1
 8002416:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800241a:	2301      	movs	r3, #1
 800241c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002422:	2300      	movs	r3, #0
 8002424:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002428:	2300      	movs	r3, #0
 800242a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800242e:	2300      	movs	r3, #0
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002432:	2301      	movs	r3, #1
 8002434:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002438:	2301      	movs	r3, #1
 800243a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800243c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002440:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002442:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002446:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002448:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800244c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800244e:	2301      	movs	r3, #1
 8002450:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002454:	2300      	movs	r3, #0
 8002456:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002458:	2300      	movs	r3, #0
 800245a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800245c:	f107 0308 	add.w	r3, r7, #8
 8002460:	4619      	mov	r1, r3
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff ff08 	bl	8002278 <ETH_SetDMAConfig>
}
 8002468:	bf00      	nop
 800246a:	3798      	adds	r7, #152	; 0x98
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3305      	adds	r3, #5
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	3204      	adds	r2, #4
 8002488:	7812      	ldrb	r2, [r2, #0]
 800248a:	4313      	orrs	r3, r2
 800248c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <ETH_MACAddressConfig+0x68>)
 8002492:	4413      	add	r3, r2
 8002494:	461a      	mov	r2, r3
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3303      	adds	r3, #3
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	061a      	lsls	r2, r3, #24
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3302      	adds	r3, #2
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	041b      	lsls	r3, r3, #16
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3301      	adds	r3, #1
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	021b      	lsls	r3, r3, #8
 80024b4:	4313      	orrs	r3, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	7812      	ldrb	r2, [r2, #0]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <ETH_MACAddressConfig+0x6c>)
 80024c2:	4413      	add	r3, r2
 80024c4:	461a      	mov	r2, r3
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	6013      	str	r3, [r2, #0]
}
 80024ca:	bf00      	nop
 80024cc:	371c      	adds	r7, #28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40028040 	.word	0x40028040
 80024dc:	40028044 	.word	0x40028044

080024e0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	e03e      	b.n	800256c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68d9      	ldr	r1, [r3, #12]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	440b      	add	r3, r1
 80024fe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2200      	movs	r2, #0
 800250a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2200      	movs	r2, #0
 8002516:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	3206      	adds	r2, #6
 8002520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d80c      	bhi.n	8002550 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68d9      	ldr	r1, [r3, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	440b      	add	r3, r1
 8002548:	461a      	mov	r2, r3
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	e004      	b.n	800255a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	461a      	mov	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3301      	adds	r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b03      	cmp	r3, #3
 8002570:	d9bd      	bls.n	80024ee <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002584:	611a      	str	r2, [r3, #16]
}
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002592:	b480      	push	{r7}
 8002594:	b085      	sub	sp, #20
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	e046      	b.n	800262e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6919      	ldr	r1, [r3, #16]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	440b      	add	r3, r1
 80025b0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2200      	movs	r2, #0
 80025bc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2200      	movs	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2200      	movs	r2, #0
 80025ce:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2200      	movs	r2, #0
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80025dc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80025e4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80025f2:	68b9      	ldr	r1, [r7, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	3212      	adds	r2, #18
 80025fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b02      	cmp	r3, #2
 8002602:	d80c      	bhi.n	800261e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6919      	ldr	r1, [r3, #16]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	440b      	add	r3, r1
 8002616:	461a      	mov	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	60da      	str	r2, [r3, #12]
 800261c:	e004      	b.n	8002628 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	461a      	mov	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	3301      	adds	r3, #1
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d9b5      	bls.n	80025a0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691a      	ldr	r2, [r3, #16]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800265e:	60da      	str	r2, [r3, #12]
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800266c:	b480      	push	{r7}
 800266e:	b08d      	sub	sp, #52	; 0x34
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3318      	adds	r3, #24
 800267c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002696:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026ae:	d007      	beq.n	80026c0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b4:	3304      	adds	r3, #4
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80026c0:	2302      	movs	r3, #2
 80026c2:	e103      	b.n	80028cc <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	3301      	adds	r3, #1
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80026dc:	f023 031f 	bic.w	r3, r3, #31
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	6852      	ldr	r2, [r2, #4]
 80026e4:	431a      	orrs	r2, r3
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d008      	beq.n	8002708 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	431a      	orrs	r2, r3
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0320 	and.w	r3, r3, #32
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	431a      	orrs	r2, r3
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800274a:	f3bf 8f5f 	dmb	sy
}
 800274e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800275c:	e084      	b.n	8002868 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d006      	beq.n	800277e <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	e005      	b.n	800278a <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278c:	3301      	adds	r3, #1
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002792:	2b03      	cmp	r3, #3
 8002794:	d902      	bls.n	800279c <ETH_Prepare_Tx_Descriptors+0x130>
 8002796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002798:	3b04      	subs	r3, #4
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027be:	d007      	beq.n	80027d0 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c4:	3304      	adds	r3, #4
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d029      	beq.n	8002824 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027dc:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80027de:	2300      	movs	r3, #0
 80027e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027e2:	e019      	b.n	8002818 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80027e4:	f3bf 8f5f 	dmb	sy
}
 80027e8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80027f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f8:	3301      	adds	r3, #1
 80027fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d902      	bls.n	8002808 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002804:	3b04      	subs	r3, #4
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800280c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002810:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002814:	3301      	adds	r3, #1
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28
 8002818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	429a      	cmp	r2, r3
 800281e:	d3e1      	bcc.n	80027e4 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002820:	2302      	movs	r3, #2
 8002822:	e053      	b.n	80028cc <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	3301      	adds	r3, #1
 8002828:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002842:	f023 031f 	bic.w	r3, r3, #31
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	6852      	ldr	r2, [r2, #4]
 800284a:	431a      	orrs	r2, r3
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	3301      	adds	r3, #1
 8002854:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002856:	f3bf 8f5f 	dmb	sy
}
 800285a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	f47f af76 	bne.w	800275e <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d006      	beq.n	8002886 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	e005      	b.n	8002892 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028a2:	6979      	ldr	r1, [r7, #20]
 80028a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a6:	3304      	adds	r3, #4
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80028b4:	b672      	cpsid	i
}
 80028b6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	4413      	add	r3, r2
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80028c6:	b662      	cpsie	i
}
 80028c8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3734      	adds	r7, #52	; 0x34
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d8:	b480      	push	{r7}
 80028da:	b089      	sub	sp, #36	; 0x24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
 80028f2:	e177      	b.n	8002be4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028f4:	2201      	movs	r2, #1
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	4013      	ands	r3, r2
 8002906:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	429a      	cmp	r2, r3
 800290e:	f040 8166 	bne.w	8002bde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b01      	cmp	r3, #1
 800291c:	d005      	beq.n	800292a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002926:	2b02      	cmp	r3, #2
 8002928:	d130      	bne.n	800298c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	2203      	movs	r2, #3
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002960:	2201      	movs	r2, #1
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f003 0201 	and.w	r2, r3, #1
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	2b03      	cmp	r3, #3
 8002996:	d017      	beq.n	80029c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	2203      	movs	r2, #3
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d123      	bne.n	8002a1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	08da      	lsrs	r2, r3, #3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3208      	adds	r2, #8
 80029dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	220f      	movs	r2, #15
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	691a      	ldr	r2, [r3, #16]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	08da      	lsrs	r2, r3, #3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3208      	adds	r2, #8
 8002a16:	69b9      	ldr	r1, [r7, #24]
 8002a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	2203      	movs	r2, #3
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 0203 	and.w	r2, r3, #3
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80c0 	beq.w	8002bde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	4b66      	ldr	r3, [pc, #408]	; (8002bfc <HAL_GPIO_Init+0x324>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	4a65      	ldr	r2, [pc, #404]	; (8002bfc <HAL_GPIO_Init+0x324>)
 8002a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6e:	4b63      	ldr	r3, [pc, #396]	; (8002bfc <HAL_GPIO_Init+0x324>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a7a:	4a61      	ldr	r2, [pc, #388]	; (8002c00 <HAL_GPIO_Init+0x328>)
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	089b      	lsrs	r3, r3, #2
 8002a80:	3302      	adds	r3, #2
 8002a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	220f      	movs	r2, #15
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a58      	ldr	r2, [pc, #352]	; (8002c04 <HAL_GPIO_Init+0x32c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d037      	beq.n	8002b16 <HAL_GPIO_Init+0x23e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a57      	ldr	r2, [pc, #348]	; (8002c08 <HAL_GPIO_Init+0x330>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d031      	beq.n	8002b12 <HAL_GPIO_Init+0x23a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a56      	ldr	r2, [pc, #344]	; (8002c0c <HAL_GPIO_Init+0x334>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d02b      	beq.n	8002b0e <HAL_GPIO_Init+0x236>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a55      	ldr	r2, [pc, #340]	; (8002c10 <HAL_GPIO_Init+0x338>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d025      	beq.n	8002b0a <HAL_GPIO_Init+0x232>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a54      	ldr	r2, [pc, #336]	; (8002c14 <HAL_GPIO_Init+0x33c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d01f      	beq.n	8002b06 <HAL_GPIO_Init+0x22e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a53      	ldr	r2, [pc, #332]	; (8002c18 <HAL_GPIO_Init+0x340>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d019      	beq.n	8002b02 <HAL_GPIO_Init+0x22a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a52      	ldr	r2, [pc, #328]	; (8002c1c <HAL_GPIO_Init+0x344>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d013      	beq.n	8002afe <HAL_GPIO_Init+0x226>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a51      	ldr	r2, [pc, #324]	; (8002c20 <HAL_GPIO_Init+0x348>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00d      	beq.n	8002afa <HAL_GPIO_Init+0x222>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a50      	ldr	r2, [pc, #320]	; (8002c24 <HAL_GPIO_Init+0x34c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d007      	beq.n	8002af6 <HAL_GPIO_Init+0x21e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a4f      	ldr	r2, [pc, #316]	; (8002c28 <HAL_GPIO_Init+0x350>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d101      	bne.n	8002af2 <HAL_GPIO_Init+0x21a>
 8002aee:	2309      	movs	r3, #9
 8002af0:	e012      	b.n	8002b18 <HAL_GPIO_Init+0x240>
 8002af2:	230a      	movs	r3, #10
 8002af4:	e010      	b.n	8002b18 <HAL_GPIO_Init+0x240>
 8002af6:	2308      	movs	r3, #8
 8002af8:	e00e      	b.n	8002b18 <HAL_GPIO_Init+0x240>
 8002afa:	2307      	movs	r3, #7
 8002afc:	e00c      	b.n	8002b18 <HAL_GPIO_Init+0x240>
 8002afe:	2306      	movs	r3, #6
 8002b00:	e00a      	b.n	8002b18 <HAL_GPIO_Init+0x240>
 8002b02:	2305      	movs	r3, #5
 8002b04:	e008      	b.n	8002b18 <HAL_GPIO_Init+0x240>
 8002b06:	2304      	movs	r3, #4
 8002b08:	e006      	b.n	8002b18 <HAL_GPIO_Init+0x240>
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e004      	b.n	8002b18 <HAL_GPIO_Init+0x240>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e002      	b.n	8002b18 <HAL_GPIO_Init+0x240>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <HAL_GPIO_Init+0x240>
 8002b16:	2300      	movs	r3, #0
 8002b18:	69fa      	ldr	r2, [r7, #28]
 8002b1a:	f002 0203 	and.w	r2, r2, #3
 8002b1e:	0092      	lsls	r2, r2, #2
 8002b20:	4093      	lsls	r3, r2
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b28:	4935      	ldr	r1, [pc, #212]	; (8002c00 <HAL_GPIO_Init+0x328>)
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	089b      	lsrs	r3, r3, #2
 8002b2e:	3302      	adds	r3, #2
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b36:	4b3d      	ldr	r3, [pc, #244]	; (8002c2c <HAL_GPIO_Init+0x354>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b5a:	4a34      	ldr	r2, [pc, #208]	; (8002c2c <HAL_GPIO_Init+0x354>)
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b60:	4b32      	ldr	r3, [pc, #200]	; (8002c2c <HAL_GPIO_Init+0x354>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b84:	4a29      	ldr	r2, [pc, #164]	; (8002c2c <HAL_GPIO_Init+0x354>)
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b8a:	4b28      	ldr	r3, [pc, #160]	; (8002c2c <HAL_GPIO_Init+0x354>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	43db      	mvns	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4013      	ands	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bae:	4a1f      	ldr	r2, [pc, #124]	; (8002c2c <HAL_GPIO_Init+0x354>)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bb4:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <HAL_GPIO_Init+0x354>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bd8:	4a14      	ldr	r2, [pc, #80]	; (8002c2c <HAL_GPIO_Init+0x354>)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3301      	adds	r3, #1
 8002be2:	61fb      	str	r3, [r7, #28]
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	2b0f      	cmp	r3, #15
 8002be8:	f67f ae84 	bls.w	80028f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bec:	bf00      	nop
 8002bee:	bf00      	nop
 8002bf0:	3724      	adds	r7, #36	; 0x24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40013800 	.word	0x40013800
 8002c04:	40020000 	.word	0x40020000
 8002c08:	40020400 	.word	0x40020400
 8002c0c:	40020800 	.word	0x40020800
 8002c10:	40020c00 	.word	0x40020c00
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40021400 	.word	0x40021400
 8002c1c:	40021800 	.word	0x40021800
 8002c20:	40021c00 	.word	0x40021c00
 8002c24:	40022000 	.word	0x40022000
 8002c28:	40022400 	.word	0x40022400
 8002c2c:	40013c00 	.word	0x40013c00

08002c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	807b      	strh	r3, [r7, #2]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c40:	787b      	ldrb	r3, [r7, #1]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c46:	887a      	ldrh	r2, [r7, #2]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c4c:	e003      	b.n	8002c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c4e:	887b      	ldrh	r3, [r7, #2]
 8002c50:	041a      	lsls	r2, r3, #16
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	619a      	str	r2, [r3, #24]
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e267      	b.n	8003146 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d075      	beq.n	8002d6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c82:	4b88      	ldr	r3, [pc, #544]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 030c 	and.w	r3, r3, #12
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d00c      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c8e:	4b85      	ldr	r3, [pc, #532]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d112      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c9a:	4b82      	ldr	r3, [pc, #520]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ca6:	d10b      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca8:	4b7e      	ldr	r3, [pc, #504]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d05b      	beq.n	8002d6c <HAL_RCC_OscConfig+0x108>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d157      	bne.n	8002d6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e242      	b.n	8003146 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc8:	d106      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x74>
 8002cca:	4b76      	ldr	r3, [pc, #472]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a75      	ldr	r2, [pc, #468]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	e01d      	b.n	8002d14 <HAL_RCC_OscConfig+0xb0>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ce0:	d10c      	bne.n	8002cfc <HAL_RCC_OscConfig+0x98>
 8002ce2:	4b70      	ldr	r3, [pc, #448]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a6f      	ldr	r2, [pc, #444]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	4b6d      	ldr	r3, [pc, #436]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a6c      	ldr	r2, [pc, #432]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	e00b      	b.n	8002d14 <HAL_RCC_OscConfig+0xb0>
 8002cfc:	4b69      	ldr	r3, [pc, #420]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a68      	ldr	r2, [pc, #416]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	4b66      	ldr	r3, [pc, #408]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a65      	ldr	r2, [pc, #404]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d013      	beq.n	8002d44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fb12 	bl	8001344 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d24:	f7fe fb0e 	bl	8001344 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e207      	b.n	8003146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	4b5b      	ldr	r3, [pc, #364]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0xc0>
 8002d42:	e014      	b.n	8002d6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fe fafe 	bl	8001344 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7fe fafa 	bl	8001344 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	; 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e1f3      	b.n	8003146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5e:	4b51      	ldr	r3, [pc, #324]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0xe8>
 8002d6a:	e000      	b.n	8002d6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d063      	beq.n	8002e42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d7a:	4b4a      	ldr	r3, [pc, #296]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00b      	beq.n	8002d9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d86:	4b47      	ldr	r3, [pc, #284]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d11c      	bne.n	8002dcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d92:	4b44      	ldr	r3, [pc, #272]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d116      	bne.n	8002dcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d9e:	4b41      	ldr	r3, [pc, #260]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_RCC_OscConfig+0x152>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d001      	beq.n	8002db6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e1c7      	b.n	8003146 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db6:	4b3b      	ldr	r3, [pc, #236]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4937      	ldr	r1, [pc, #220]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dca:	e03a      	b.n	8002e42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d020      	beq.n	8002e16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd4:	4b34      	ldr	r3, [pc, #208]	; (8002ea8 <HAL_RCC_OscConfig+0x244>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dda:	f7fe fab3 	bl	8001344 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002de2:	f7fe faaf 	bl	8001344 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e1a8      	b.n	8003146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df4:	4b2b      	ldr	r3, [pc, #172]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e00:	4b28      	ldr	r3, [pc, #160]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	4925      	ldr	r1, [pc, #148]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	600b      	str	r3, [r1, #0]
 8002e14:	e015      	b.n	8002e42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e16:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <HAL_RCC_OscConfig+0x244>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7fe fa92 	bl	8001344 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e24:	f7fe fa8e 	bl	8001344 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e187      	b.n	8003146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e36:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d036      	beq.n	8002ebc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d016      	beq.n	8002e84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <HAL_RCC_OscConfig+0x248>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5c:	f7fe fa72 	bl	8001344 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e64:	f7fe fa6e 	bl	8001344 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e167      	b.n	8003146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e76:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_RCC_OscConfig+0x240>)
 8002e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0x200>
 8002e82:	e01b      	b.n	8002ebc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e84:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_RCC_OscConfig+0x248>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8a:	f7fe fa5b 	bl	8001344 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e90:	e00e      	b.n	8002eb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e92:	f7fe fa57 	bl	8001344 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d907      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e150      	b.n	8003146 <HAL_RCC_OscConfig+0x4e2>
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	42470000 	.word	0x42470000
 8002eac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb0:	4b88      	ldr	r3, [pc, #544]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 8002eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1ea      	bne.n	8002e92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 8097 	beq.w	8002ff8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ece:	4b81      	ldr	r3, [pc, #516]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10f      	bne.n	8002efa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	4b7d      	ldr	r3, [pc, #500]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	4a7c      	ldr	r2, [pc, #496]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 8002ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eea:	4b7a      	ldr	r3, [pc, #488]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	60bb      	str	r3, [r7, #8]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efa:	4b77      	ldr	r3, [pc, #476]	; (80030d8 <HAL_RCC_OscConfig+0x474>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d118      	bne.n	8002f38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f06:	4b74      	ldr	r3, [pc, #464]	; (80030d8 <HAL_RCC_OscConfig+0x474>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a73      	ldr	r2, [pc, #460]	; (80030d8 <HAL_RCC_OscConfig+0x474>)
 8002f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f12:	f7fe fa17 	bl	8001344 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f1a:	f7fe fa13 	bl	8001344 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e10c      	b.n	8003146 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2c:	4b6a      	ldr	r3, [pc, #424]	; (80030d8 <HAL_RCC_OscConfig+0x474>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0f0      	beq.n	8002f1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d106      	bne.n	8002f4e <HAL_RCC_OscConfig+0x2ea>
 8002f40:	4b64      	ldr	r3, [pc, #400]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f44:	4a63      	ldr	r2, [pc, #396]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4c:	e01c      	b.n	8002f88 <HAL_RCC_OscConfig+0x324>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b05      	cmp	r3, #5
 8002f54:	d10c      	bne.n	8002f70 <HAL_RCC_OscConfig+0x30c>
 8002f56:	4b5f      	ldr	r3, [pc, #380]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5a:	4a5e      	ldr	r2, [pc, #376]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	f043 0304 	orr.w	r3, r3, #4
 8002f60:	6713      	str	r3, [r2, #112]	; 0x70
 8002f62:	4b5c      	ldr	r3, [pc, #368]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	4a5b      	ldr	r2, [pc, #364]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f6e:	e00b      	b.n	8002f88 <HAL_RCC_OscConfig+0x324>
 8002f70:	4b58      	ldr	r3, [pc, #352]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 8002f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f74:	4a57      	ldr	r2, [pc, #348]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 8002f76:	f023 0301 	bic.w	r3, r3, #1
 8002f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7c:	4b55      	ldr	r3, [pc, #340]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	4a54      	ldr	r2, [pc, #336]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 8002f82:	f023 0304 	bic.w	r3, r3, #4
 8002f86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d015      	beq.n	8002fbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f90:	f7fe f9d8 	bl	8001344 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f96:	e00a      	b.n	8002fae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f98:	f7fe f9d4 	bl	8001344 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e0cb      	b.n	8003146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fae:	4b49      	ldr	r3, [pc, #292]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0ee      	beq.n	8002f98 <HAL_RCC_OscConfig+0x334>
 8002fba:	e014      	b.n	8002fe6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fbc:	f7fe f9c2 	bl	8001344 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc4:	f7fe f9be 	bl	8001344 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e0b5      	b.n	8003146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fda:	4b3e      	ldr	r3, [pc, #248]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1ee      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d105      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fec:	4b39      	ldr	r3, [pc, #228]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	4a38      	ldr	r2, [pc, #224]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 80a1 	beq.w	8003144 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003002:	4b34      	ldr	r3, [pc, #208]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	2b08      	cmp	r3, #8
 800300c:	d05c      	beq.n	80030c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d141      	bne.n	800309a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003016:	4b31      	ldr	r3, [pc, #196]	; (80030dc <HAL_RCC_OscConfig+0x478>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fe f992 	bl	8001344 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003024:	f7fe f98e 	bl	8001344 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e087      	b.n	8003146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003036:	4b27      	ldr	r3, [pc, #156]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69da      	ldr	r2, [r3, #28]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	019b      	lsls	r3, r3, #6
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	085b      	lsrs	r3, r3, #1
 800305a:	3b01      	subs	r3, #1
 800305c:	041b      	lsls	r3, r3, #16
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003064:	061b      	lsls	r3, r3, #24
 8003066:	491b      	ldr	r1, [pc, #108]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800306c:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <HAL_RCC_OscConfig+0x478>)
 800306e:	2201      	movs	r2, #1
 8003070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003072:	f7fe f967 	bl	8001344 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307a:	f7fe f963 	bl	8001344 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e05c      	b.n	8003146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308c:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0f0      	beq.n	800307a <HAL_RCC_OscConfig+0x416>
 8003098:	e054      	b.n	8003144 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309a:	4b10      	ldr	r3, [pc, #64]	; (80030dc <HAL_RCC_OscConfig+0x478>)
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7fe f950 	bl	8001344 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a8:	f7fe f94c 	bl	8001344 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e045      	b.n	8003146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ba:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <HAL_RCC_OscConfig+0x470>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x444>
 80030c6:	e03d      	b.n	8003144 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d107      	bne.n	80030e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e038      	b.n	8003146 <HAL_RCC_OscConfig+0x4e2>
 80030d4:	40023800 	.word	0x40023800
 80030d8:	40007000 	.word	0x40007000
 80030dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030e0:	4b1b      	ldr	r3, [pc, #108]	; (8003150 <HAL_RCC_OscConfig+0x4ec>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d028      	beq.n	8003140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d121      	bne.n	8003140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003106:	429a      	cmp	r2, r3
 8003108:	d11a      	bne.n	8003140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003110:	4013      	ands	r3, r2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003116:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003118:	4293      	cmp	r3, r2
 800311a:	d111      	bne.n	8003140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003126:	085b      	lsrs	r3, r3, #1
 8003128:	3b01      	subs	r3, #1
 800312a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800312c:	429a      	cmp	r2, r3
 800312e:	d107      	bne.n	8003140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800313c:	429a      	cmp	r2, r3
 800313e:	d001      	beq.n	8003144 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40023800 	.word	0x40023800

08003154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0cc      	b.n	8003302 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003168:	4b68      	ldr	r3, [pc, #416]	; (800330c <HAL_RCC_ClockConfig+0x1b8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d90c      	bls.n	8003190 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003176:	4b65      	ldr	r3, [pc, #404]	; (800330c <HAL_RCC_ClockConfig+0x1b8>)
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800317e:	4b63      	ldr	r3, [pc, #396]	; (800330c <HAL_RCC_ClockConfig+0x1b8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d001      	beq.n	8003190 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0b8      	b.n	8003302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d020      	beq.n	80031de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031a8:	4b59      	ldr	r3, [pc, #356]	; (8003310 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	4a58      	ldr	r2, [pc, #352]	; (8003310 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c0:	4b53      	ldr	r3, [pc, #332]	; (8003310 <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	4a52      	ldr	r2, [pc, #328]	; (8003310 <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031cc:	4b50      	ldr	r3, [pc, #320]	; (8003310 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	494d      	ldr	r1, [pc, #308]	; (8003310 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d044      	beq.n	8003274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d107      	bne.n	8003202 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f2:	4b47      	ldr	r3, [pc, #284]	; (8003310 <HAL_RCC_ClockConfig+0x1bc>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d119      	bne.n	8003232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e07f      	b.n	8003302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d003      	beq.n	8003212 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800320e:	2b03      	cmp	r3, #3
 8003210:	d107      	bne.n	8003222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003212:	4b3f      	ldr	r3, [pc, #252]	; (8003310 <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d109      	bne.n	8003232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e06f      	b.n	8003302 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003222:	4b3b      	ldr	r3, [pc, #236]	; (8003310 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e067      	b.n	8003302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003232:	4b37      	ldr	r3, [pc, #220]	; (8003310 <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f023 0203 	bic.w	r2, r3, #3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	4934      	ldr	r1, [pc, #208]	; (8003310 <HAL_RCC_ClockConfig+0x1bc>)
 8003240:	4313      	orrs	r3, r2
 8003242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003244:	f7fe f87e 	bl	8001344 <HAL_GetTick>
 8003248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324a:	e00a      	b.n	8003262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800324c:	f7fe f87a 	bl	8001344 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	f241 3288 	movw	r2, #5000	; 0x1388
 800325a:	4293      	cmp	r3, r2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e04f      	b.n	8003302 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003262:	4b2b      	ldr	r3, [pc, #172]	; (8003310 <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 020c 	and.w	r2, r3, #12
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	429a      	cmp	r2, r3
 8003272:	d1eb      	bne.n	800324c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003274:	4b25      	ldr	r3, [pc, #148]	; (800330c <HAL_RCC_ClockConfig+0x1b8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d20c      	bcs.n	800329c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	4b22      	ldr	r3, [pc, #136]	; (800330c <HAL_RCC_ClockConfig+0x1b8>)
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328a:	4b20      	ldr	r3, [pc, #128]	; (800330c <HAL_RCC_ClockConfig+0x1b8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e032      	b.n	8003302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032a8:	4b19      	ldr	r3, [pc, #100]	; (8003310 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4916      	ldr	r1, [pc, #88]	; (8003310 <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d009      	beq.n	80032da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032c6:	4b12      	ldr	r3, [pc, #72]	; (8003310 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	490e      	ldr	r1, [pc, #56]	; (8003310 <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032da:	f000 f821 	bl	8003320 <HAL_RCC_GetSysClockFreq>
 80032de:	4602      	mov	r2, r0
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	091b      	lsrs	r3, r3, #4
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	490a      	ldr	r1, [pc, #40]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 80032ec:	5ccb      	ldrb	r3, [r1, r3]
 80032ee:	fa22 f303 	lsr.w	r3, r2, r3
 80032f2:	4a09      	ldr	r2, [pc, #36]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80032f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032f6:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_RCC_ClockConfig+0x1c8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fd ffde 	bl	80012bc <HAL_InitTick>

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40023c00 	.word	0x40023c00
 8003310:	40023800 	.word	0x40023800
 8003314:	08014d68 	.word	0x08014d68
 8003318:	20000030 	.word	0x20000030
 800331c:	20000034 	.word	0x20000034

08003320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003324:	b094      	sub	sp, #80	; 0x50
 8003326:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	647b      	str	r3, [r7, #68]	; 0x44
 800332c:	2300      	movs	r3, #0
 800332e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003330:	2300      	movs	r3, #0
 8003332:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003338:	4b79      	ldr	r3, [pc, #484]	; (8003520 <HAL_RCC_GetSysClockFreq+0x200>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 030c 	and.w	r3, r3, #12
 8003340:	2b08      	cmp	r3, #8
 8003342:	d00d      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0x40>
 8003344:	2b08      	cmp	r3, #8
 8003346:	f200 80e1 	bhi.w	800350c <HAL_RCC_GetSysClockFreq+0x1ec>
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <HAL_RCC_GetSysClockFreq+0x34>
 800334e:	2b04      	cmp	r3, #4
 8003350:	d003      	beq.n	800335a <HAL_RCC_GetSysClockFreq+0x3a>
 8003352:	e0db      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003354:	4b73      	ldr	r3, [pc, #460]	; (8003524 <HAL_RCC_GetSysClockFreq+0x204>)
 8003356:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003358:	e0db      	b.n	8003512 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800335a:	4b73      	ldr	r3, [pc, #460]	; (8003528 <HAL_RCC_GetSysClockFreq+0x208>)
 800335c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800335e:	e0d8      	b.n	8003512 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003360:	4b6f      	ldr	r3, [pc, #444]	; (8003520 <HAL_RCC_GetSysClockFreq+0x200>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003368:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800336a:	4b6d      	ldr	r3, [pc, #436]	; (8003520 <HAL_RCC_GetSysClockFreq+0x200>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d063      	beq.n	800343e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003376:	4b6a      	ldr	r3, [pc, #424]	; (8003520 <HAL_RCC_GetSysClockFreq+0x200>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	099b      	lsrs	r3, r3, #6
 800337c:	2200      	movs	r2, #0
 800337e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003380:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003388:	633b      	str	r3, [r7, #48]	; 0x30
 800338a:	2300      	movs	r3, #0
 800338c:	637b      	str	r3, [r7, #52]	; 0x34
 800338e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003392:	4622      	mov	r2, r4
 8003394:	462b      	mov	r3, r5
 8003396:	f04f 0000 	mov.w	r0, #0
 800339a:	f04f 0100 	mov.w	r1, #0
 800339e:	0159      	lsls	r1, r3, #5
 80033a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033a4:	0150      	lsls	r0, r2, #5
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4621      	mov	r1, r4
 80033ac:	1a51      	subs	r1, r2, r1
 80033ae:	6139      	str	r1, [r7, #16]
 80033b0:	4629      	mov	r1, r5
 80033b2:	eb63 0301 	sbc.w	r3, r3, r1
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033c4:	4659      	mov	r1, fp
 80033c6:	018b      	lsls	r3, r1, #6
 80033c8:	4651      	mov	r1, sl
 80033ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033ce:	4651      	mov	r1, sl
 80033d0:	018a      	lsls	r2, r1, #6
 80033d2:	4651      	mov	r1, sl
 80033d4:	ebb2 0801 	subs.w	r8, r2, r1
 80033d8:	4659      	mov	r1, fp
 80033da:	eb63 0901 	sbc.w	r9, r3, r1
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033f2:	4690      	mov	r8, r2
 80033f4:	4699      	mov	r9, r3
 80033f6:	4623      	mov	r3, r4
 80033f8:	eb18 0303 	adds.w	r3, r8, r3
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	462b      	mov	r3, r5
 8003400:	eb49 0303 	adc.w	r3, r9, r3
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003412:	4629      	mov	r1, r5
 8003414:	024b      	lsls	r3, r1, #9
 8003416:	4621      	mov	r1, r4
 8003418:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800341c:	4621      	mov	r1, r4
 800341e:	024a      	lsls	r2, r1, #9
 8003420:	4610      	mov	r0, r2
 8003422:	4619      	mov	r1, r3
 8003424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003426:	2200      	movs	r2, #0
 8003428:	62bb      	str	r3, [r7, #40]	; 0x28
 800342a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800342c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003430:	f7fc ff46 	bl	80002c0 <__aeabi_uldivmod>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4613      	mov	r3, r2
 800343a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800343c:	e058      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800343e:	4b38      	ldr	r3, [pc, #224]	; (8003520 <HAL_RCC_GetSysClockFreq+0x200>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	099b      	lsrs	r3, r3, #6
 8003444:	2200      	movs	r2, #0
 8003446:	4618      	mov	r0, r3
 8003448:	4611      	mov	r1, r2
 800344a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800344e:	623b      	str	r3, [r7, #32]
 8003450:	2300      	movs	r3, #0
 8003452:	627b      	str	r3, [r7, #36]	; 0x24
 8003454:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003458:	4642      	mov	r2, r8
 800345a:	464b      	mov	r3, r9
 800345c:	f04f 0000 	mov.w	r0, #0
 8003460:	f04f 0100 	mov.w	r1, #0
 8003464:	0159      	lsls	r1, r3, #5
 8003466:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800346a:	0150      	lsls	r0, r2, #5
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4641      	mov	r1, r8
 8003472:	ebb2 0a01 	subs.w	sl, r2, r1
 8003476:	4649      	mov	r1, r9
 8003478:	eb63 0b01 	sbc.w	fp, r3, r1
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003488:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800348c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003490:	ebb2 040a 	subs.w	r4, r2, sl
 8003494:	eb63 050b 	sbc.w	r5, r3, fp
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	00eb      	lsls	r3, r5, #3
 80034a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034a6:	00e2      	lsls	r2, r4, #3
 80034a8:	4614      	mov	r4, r2
 80034aa:	461d      	mov	r5, r3
 80034ac:	4643      	mov	r3, r8
 80034ae:	18e3      	adds	r3, r4, r3
 80034b0:	603b      	str	r3, [r7, #0]
 80034b2:	464b      	mov	r3, r9
 80034b4:	eb45 0303 	adc.w	r3, r5, r3
 80034b8:	607b      	str	r3, [r7, #4]
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034c6:	4629      	mov	r1, r5
 80034c8:	028b      	lsls	r3, r1, #10
 80034ca:	4621      	mov	r1, r4
 80034cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034d0:	4621      	mov	r1, r4
 80034d2:	028a      	lsls	r2, r1, #10
 80034d4:	4610      	mov	r0, r2
 80034d6:	4619      	mov	r1, r3
 80034d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034da:	2200      	movs	r2, #0
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	61fa      	str	r2, [r7, #28]
 80034e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034e4:	f7fc feec 	bl	80002c0 <__aeabi_uldivmod>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	4613      	mov	r3, r2
 80034ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034f0:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <HAL_RCC_GetSysClockFreq+0x200>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	0c1b      	lsrs	r3, r3, #16
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	3301      	adds	r3, #1
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003500:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003504:	fbb2 f3f3 	udiv	r3, r2, r3
 8003508:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800350a:	e002      	b.n	8003512 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <HAL_RCC_GetSysClockFreq+0x204>)
 800350e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003510:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003514:	4618      	mov	r0, r3
 8003516:	3750      	adds	r7, #80	; 0x50
 8003518:	46bd      	mov	sp, r7
 800351a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800351e:	bf00      	nop
 8003520:	40023800 	.word	0x40023800
 8003524:	00f42400 	.word	0x00f42400
 8003528:	007a1200 	.word	0x007a1200

0800352c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003530:	4b03      	ldr	r3, [pc, #12]	; (8003540 <HAL_RCC_GetHCLKFreq+0x14>)
 8003532:	681b      	ldr	r3, [r3, #0]
}
 8003534:	4618      	mov	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20000030 	.word	0x20000030

08003544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003548:	f7ff fff0 	bl	800352c <HAL_RCC_GetHCLKFreq>
 800354c:	4602      	mov	r2, r0
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	0a9b      	lsrs	r3, r3, #10
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	4903      	ldr	r1, [pc, #12]	; (8003568 <HAL_RCC_GetPCLK1Freq+0x24>)
 800355a:	5ccb      	ldrb	r3, [r1, r3]
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003560:	4618      	mov	r0, r3
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40023800 	.word	0x40023800
 8003568:	08014d78 	.word	0x08014d78

0800356c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003570:	f7ff ffdc 	bl	800352c <HAL_RCC_GetHCLKFreq>
 8003574:	4602      	mov	r2, r0
 8003576:	4b05      	ldr	r3, [pc, #20]	; (800358c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	0b5b      	lsrs	r3, r3, #13
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	4903      	ldr	r1, [pc, #12]	; (8003590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003582:	5ccb      	ldrb	r3, [r1, r3]
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003588:	4618      	mov	r0, r3
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40023800 	.word	0x40023800
 8003590:	08014d78 	.word	0x08014d78

08003594 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e03f      	b.n	8003626 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fd fb72 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2224      	movs	r2, #36	; 0x24
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 fcbf 	bl	8003f5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800360c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800362e:	b480      	push	{r7}
 8003630:	b085      	sub	sp, #20
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	4613      	mov	r3, r2
 800363a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b20      	cmp	r3, #32
 8003646:	d130      	bne.n	80036aa <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <HAL_UART_Transmit_IT+0x26>
 800364e:	88fb      	ldrh	r3, [r7, #6]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e029      	b.n	80036ac <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_UART_Transmit_IT+0x38>
 8003662:	2302      	movs	r3, #2
 8003664:	e022      	b.n	80036ac <HAL_UART_Transmit_IT+0x7e>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	88fa      	ldrh	r2, [r7, #6]
 8003678:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	88fa      	ldrh	r2, [r7, #6]
 800367e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2221      	movs	r2, #33	; 0x21
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036a4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e000      	b.n	80036ac <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80036aa:	2302      	movs	r3, #2
  }
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b0ba      	sub	sp, #232	; 0xe8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80036de:	2300      	movs	r3, #0
 80036e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80036f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10f      	bne.n	800371e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <HAL_UART_IRQHandler+0x66>
 800370a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fb65 	bl	8003de6 <UART_Receive_IT>
      return;
 800371c:	e256      	b.n	8003bcc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800371e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 80de 	beq.w	80038e4 <HAL_UART_IRQHandler+0x22c>
 8003728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d106      	bne.n	8003742 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003738:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80d1 	beq.w	80038e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00b      	beq.n	8003766 <HAL_UART_IRQHandler+0xae>
 800374e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f043 0201 	orr.w	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00b      	beq.n	800378a <HAL_UART_IRQHandler+0xd2>
 8003772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f043 0202 	orr.w	r2, r3, #2
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800378a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00b      	beq.n	80037ae <HAL_UART_IRQHandler+0xf6>
 8003796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d005      	beq.n	80037ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f043 0204 	orr.w	r2, r3, #4
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d011      	beq.n	80037de <HAL_UART_IRQHandler+0x126>
 80037ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d105      	bne.n	80037d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f043 0208 	orr.w	r2, r3, #8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 81ed 	beq.w	8003bc2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_UART_IRQHandler+0x14e>
 80037f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037f8:	f003 0320 	and.w	r3, r3, #32
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 faf0 	bl	8003de6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003810:	2b40      	cmp	r3, #64	; 0x40
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d103      	bne.n	8003832 <HAL_UART_IRQHandler+0x17a>
 800382a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d04f      	beq.n	80038d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f9f8 	bl	8003c28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003842:	2b40      	cmp	r3, #64	; 0x40
 8003844:	d141      	bne.n	80038ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	3314      	adds	r3, #20
 800384c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003850:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003854:	e853 3f00 	ldrex	r3, [r3]
 8003858:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800385c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003864:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3314      	adds	r3, #20
 800386e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003872:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003876:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800387e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800388a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1d9      	bne.n	8003846 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	2b00      	cmp	r3, #0
 8003898:	d013      	beq.n	80038c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	4a7d      	ldr	r2, [pc, #500]	; (8003a94 <HAL_UART_IRQHandler+0x3dc>)
 80038a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd fefd 	bl	80016a6 <HAL_DMA_Abort_IT>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d016      	beq.n	80038e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038bc:	4610      	mov	r0, r2
 80038be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c0:	e00e      	b.n	80038e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f99a 	bl	8003bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c8:	e00a      	b.n	80038e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f996 	bl	8003bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d0:	e006      	b.n	80038e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f992 	bl	8003bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80038de:	e170      	b.n	8003bc2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e0:	bf00      	nop
    return;
 80038e2:	e16e      	b.n	8003bc2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	f040 814a 	bne.w	8003b82 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 8143 	beq.w	8003b82 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 813c 	beq.w	8003b82 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800390a:	2300      	movs	r3, #0
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	f040 80b4 	bne.w	8003a98 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800393c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8140 	beq.w	8003bc6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800394a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800394e:	429a      	cmp	r2, r3
 8003950:	f080 8139 	bcs.w	8003bc6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800395a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003966:	f000 8088 	beq.w	8003a7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	330c      	adds	r3, #12
 8003970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003974:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003978:	e853 3f00 	ldrex	r3, [r3]
 800397c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003980:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003988:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	330c      	adds	r3, #12
 8003992:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003996:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800399a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039a6:	e841 2300 	strex	r3, r2, [r1]
 80039aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1d9      	bne.n	800396a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3314      	adds	r3, #20
 80039bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039c0:	e853 3f00 	ldrex	r3, [r3]
 80039c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039c8:	f023 0301 	bic.w	r3, r3, #1
 80039cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	3314      	adds	r3, #20
 80039d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1e1      	bne.n	80039b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3314      	adds	r3, #20
 80039f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039fc:	e853 3f00 	ldrex	r3, [r3]
 8003a00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3314      	adds	r3, #20
 8003a12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e3      	bne.n	80039f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	330c      	adds	r3, #12
 8003a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a42:	e853 3f00 	ldrex	r3, [r3]
 8003a46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a4a:	f023 0310 	bic.w	r3, r3, #16
 8003a4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	330c      	adds	r3, #12
 8003a58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a64:	e841 2300 	strex	r3, r2, [r1]
 8003a68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1e3      	bne.n	8003a38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fd fda6 	bl	80015c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	4619      	mov	r1, r3
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f8c0 	bl	8003c10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a90:	e099      	b.n	8003bc6 <HAL_UART_IRQHandler+0x50e>
 8003a92:	bf00      	nop
 8003a94:	08003cef 	.word	0x08003cef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 808b 	beq.w	8003bca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003ab4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 8086 	beq.w	8003bca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	330c      	adds	r3, #12
 8003ac4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac8:	e853 3f00 	ldrex	r3, [r3]
 8003acc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ad4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	330c      	adds	r3, #12
 8003ade:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ae2:	647a      	str	r2, [r7, #68]	; 0x44
 8003ae4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ae8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003aea:	e841 2300 	strex	r3, r2, [r1]
 8003aee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1e3      	bne.n	8003abe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3314      	adds	r3, #20
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	623b      	str	r3, [r7, #32]
   return(result);
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	f023 0301 	bic.w	r3, r3, #1
 8003b0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3314      	adds	r3, #20
 8003b16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b1a:	633a      	str	r2, [r7, #48]	; 0x30
 8003b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b22:	e841 2300 	strex	r3, r2, [r1]
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1e3      	bne.n	8003af6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	330c      	adds	r3, #12
 8003b42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	e853 3f00 	ldrex	r3, [r3]
 8003b4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 0310 	bic.w	r3, r3, #16
 8003b52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	330c      	adds	r3, #12
 8003b5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b60:	61fa      	str	r2, [r7, #28]
 8003b62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b64:	69b9      	ldr	r1, [r7, #24]
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	e841 2300 	strex	r3, r2, [r1]
 8003b6c:	617b      	str	r3, [r7, #20]
   return(result);
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e3      	bne.n	8003b3c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b78:	4619      	mov	r1, r3
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f848 	bl	8003c10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b80:	e023      	b.n	8003bca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x4ea>
 8003b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f8bb 	bl	8003d16 <UART_Transmit_IT>
    return;
 8003ba0:	e014      	b.n	8003bcc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00e      	beq.n	8003bcc <HAL_UART_IRQHandler+0x514>
 8003bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d008      	beq.n	8003bcc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f8fb 	bl	8003db6 <UART_EndTransmit_IT>
    return;
 8003bc0:	e004      	b.n	8003bcc <HAL_UART_IRQHandler+0x514>
    return;
 8003bc2:	bf00      	nop
 8003bc4:	e002      	b.n	8003bcc <HAL_UART_IRQHandler+0x514>
      return;
 8003bc6:	bf00      	nop
 8003bc8:	e000      	b.n	8003bcc <HAL_UART_IRQHandler+0x514>
      return;
 8003bca:	bf00      	nop
  }
}
 8003bcc:	37e8      	adds	r7, #232	; 0xe8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop

08003bd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b095      	sub	sp, #84	; 0x54
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	330c      	adds	r3, #12
 8003c36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	330c      	adds	r3, #12
 8003c4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c50:	643a      	str	r2, [r7, #64]	; 0x40
 8003c52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c58:	e841 2300 	strex	r3, r2, [r1]
 8003c5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e5      	bne.n	8003c30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3314      	adds	r3, #20
 8003c6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	e853 3f00 	ldrex	r3, [r3]
 8003c72:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f023 0301 	bic.w	r3, r3, #1
 8003c7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3314      	adds	r3, #20
 8003c82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c8c:	e841 2300 	strex	r3, r2, [r1]
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1e5      	bne.n	8003c64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d119      	bne.n	8003cd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	e853 3f00 	ldrex	r3, [r3]
 8003cae:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f023 0310 	bic.w	r3, r3, #16
 8003cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	330c      	adds	r3, #12
 8003cbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cc0:	61ba      	str	r2, [r7, #24]
 8003cc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6979      	ldr	r1, [r7, #20]
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e5      	bne.n	8003ca0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ce2:	bf00      	nop
 8003ce4:	3754      	adds	r7, #84	; 0x54
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f7ff ff77 	bl	8003bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d0e:	bf00      	nop
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b085      	sub	sp, #20
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b21      	cmp	r3, #33	; 0x21
 8003d28:	d13e      	bne.n	8003da8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d32:	d114      	bne.n	8003d5e <UART_Transmit_IT+0x48>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d110      	bne.n	8003d5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	1c9a      	adds	r2, r3, #2
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	621a      	str	r2, [r3, #32]
 8003d5c:	e008      	b.n	8003d70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	1c59      	adds	r1, r3, #1
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6211      	str	r1, [r2, #32]
 8003d68:	781a      	ldrb	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10f      	bne.n	8003da4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003da2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	e000      	b.n	8003daa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003da8:	2302      	movs	r3, #2
  }
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68da      	ldr	r2, [r3, #12]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dcc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff fefc 	bl	8003bd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b08c      	sub	sp, #48	; 0x30
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b22      	cmp	r3, #34	; 0x22
 8003df8:	f040 80ab 	bne.w	8003f52 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e04:	d117      	bne.n	8003e36 <UART_Receive_IT+0x50>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d113      	bne.n	8003e36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e16:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2e:	1c9a      	adds	r2, r3, #2
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	629a      	str	r2, [r3, #40]	; 0x28
 8003e34:	e026      	b.n	8003e84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e48:	d007      	beq.n	8003e5a <UART_Receive_IT+0x74>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10a      	bne.n	8003e68 <UART_Receive_IT+0x82>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e64:	701a      	strb	r2, [r3, #0]
 8003e66:	e008      	b.n	8003e7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	4619      	mov	r1, r3
 8003e92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d15a      	bne.n	8003f4e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0220 	bic.w	r2, r2, #32
 8003ea6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695a      	ldr	r2, [r3, #20]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0201 	bic.w	r2, r2, #1
 8003ec6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d135      	bne.n	8003f44 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	330c      	adds	r3, #12
 8003ee4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	e853 3f00 	ldrex	r3, [r3]
 8003eec:	613b      	str	r3, [r7, #16]
   return(result);
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f023 0310 	bic.w	r3, r3, #16
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	330c      	adds	r3, #12
 8003efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efe:	623a      	str	r2, [r7, #32]
 8003f00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f02:	69f9      	ldr	r1, [r7, #28]
 8003f04:	6a3a      	ldr	r2, [r7, #32]
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e5      	bne.n	8003ede <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	2b10      	cmp	r3, #16
 8003f1e:	d10a      	bne.n	8003f36 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f20:	2300      	movs	r3, #0
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff fe67 	bl	8003c10 <HAL_UARTEx_RxEventCallback>
 8003f42:	e002      	b.n	8003f4a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff fe4f 	bl	8003be8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e002      	b.n	8003f54 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	e000      	b.n	8003f54 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003f52:	2302      	movs	r3, #2
  }
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3730      	adds	r7, #48	; 0x30
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f60:	b0c0      	sub	sp, #256	; 0x100
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f78:	68d9      	ldr	r1, [r3, #12]
 8003f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	ea40 0301 	orr.w	r3, r0, r1
 8003f84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	431a      	orrs	r2, r3
 8003f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fb4:	f021 010c 	bic.w	r1, r1, #12
 8003fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003fc2:	430b      	orrs	r3, r1
 8003fc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd6:	6999      	ldr	r1, [r3, #24]
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	ea40 0301 	orr.w	r3, r0, r1
 8003fe2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	4b8f      	ldr	r3, [pc, #572]	; (8004228 <UART_SetConfig+0x2cc>)
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d005      	beq.n	8003ffc <UART_SetConfig+0xa0>
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4b8d      	ldr	r3, [pc, #564]	; (800422c <UART_SetConfig+0x2d0>)
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d104      	bne.n	8004006 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ffc:	f7ff fab6 	bl	800356c <HAL_RCC_GetPCLK2Freq>
 8004000:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004004:	e003      	b.n	800400e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004006:	f7ff fa9d 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 800400a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800400e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004018:	f040 810c 	bne.w	8004234 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800401c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004020:	2200      	movs	r2, #0
 8004022:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004026:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800402a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800402e:	4622      	mov	r2, r4
 8004030:	462b      	mov	r3, r5
 8004032:	1891      	adds	r1, r2, r2
 8004034:	65b9      	str	r1, [r7, #88]	; 0x58
 8004036:	415b      	adcs	r3, r3
 8004038:	65fb      	str	r3, [r7, #92]	; 0x5c
 800403a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800403e:	4621      	mov	r1, r4
 8004040:	eb12 0801 	adds.w	r8, r2, r1
 8004044:	4629      	mov	r1, r5
 8004046:	eb43 0901 	adc.w	r9, r3, r1
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004056:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800405a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800405e:	4690      	mov	r8, r2
 8004060:	4699      	mov	r9, r3
 8004062:	4623      	mov	r3, r4
 8004064:	eb18 0303 	adds.w	r3, r8, r3
 8004068:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800406c:	462b      	mov	r3, r5
 800406e:	eb49 0303 	adc.w	r3, r9, r3
 8004072:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004082:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004086:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800408a:	460b      	mov	r3, r1
 800408c:	18db      	adds	r3, r3, r3
 800408e:	653b      	str	r3, [r7, #80]	; 0x50
 8004090:	4613      	mov	r3, r2
 8004092:	eb42 0303 	adc.w	r3, r2, r3
 8004096:	657b      	str	r3, [r7, #84]	; 0x54
 8004098:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800409c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040a0:	f7fc f90e 	bl	80002c0 <__aeabi_uldivmod>
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4b61      	ldr	r3, [pc, #388]	; (8004230 <UART_SetConfig+0x2d4>)
 80040aa:	fba3 2302 	umull	r2, r3, r3, r2
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	011c      	lsls	r4, r3, #4
 80040b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040b6:	2200      	movs	r2, #0
 80040b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040c4:	4642      	mov	r2, r8
 80040c6:	464b      	mov	r3, r9
 80040c8:	1891      	adds	r1, r2, r2
 80040ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80040cc:	415b      	adcs	r3, r3
 80040ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040d4:	4641      	mov	r1, r8
 80040d6:	eb12 0a01 	adds.w	sl, r2, r1
 80040da:	4649      	mov	r1, r9
 80040dc:	eb43 0b01 	adc.w	fp, r3, r1
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040f4:	4692      	mov	sl, r2
 80040f6:	469b      	mov	fp, r3
 80040f8:	4643      	mov	r3, r8
 80040fa:	eb1a 0303 	adds.w	r3, sl, r3
 80040fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004102:	464b      	mov	r3, r9
 8004104:	eb4b 0303 	adc.w	r3, fp, r3
 8004108:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800410c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004118:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800411c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004120:	460b      	mov	r3, r1
 8004122:	18db      	adds	r3, r3, r3
 8004124:	643b      	str	r3, [r7, #64]	; 0x40
 8004126:	4613      	mov	r3, r2
 8004128:	eb42 0303 	adc.w	r3, r2, r3
 800412c:	647b      	str	r3, [r7, #68]	; 0x44
 800412e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004132:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004136:	f7fc f8c3 	bl	80002c0 <__aeabi_uldivmod>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4611      	mov	r1, r2
 8004140:	4b3b      	ldr	r3, [pc, #236]	; (8004230 <UART_SetConfig+0x2d4>)
 8004142:	fba3 2301 	umull	r2, r3, r3, r1
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	2264      	movs	r2, #100	; 0x64
 800414a:	fb02 f303 	mul.w	r3, r2, r3
 800414e:	1acb      	subs	r3, r1, r3
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004156:	4b36      	ldr	r3, [pc, #216]	; (8004230 <UART_SetConfig+0x2d4>)
 8004158:	fba3 2302 	umull	r2, r3, r3, r2
 800415c:	095b      	lsrs	r3, r3, #5
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004164:	441c      	add	r4, r3
 8004166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800416a:	2200      	movs	r2, #0
 800416c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004170:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004174:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004178:	4642      	mov	r2, r8
 800417a:	464b      	mov	r3, r9
 800417c:	1891      	adds	r1, r2, r2
 800417e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004180:	415b      	adcs	r3, r3
 8004182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004184:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004188:	4641      	mov	r1, r8
 800418a:	1851      	adds	r1, r2, r1
 800418c:	6339      	str	r1, [r7, #48]	; 0x30
 800418e:	4649      	mov	r1, r9
 8004190:	414b      	adcs	r3, r1
 8004192:	637b      	str	r3, [r7, #52]	; 0x34
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041a0:	4659      	mov	r1, fp
 80041a2:	00cb      	lsls	r3, r1, #3
 80041a4:	4651      	mov	r1, sl
 80041a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041aa:	4651      	mov	r1, sl
 80041ac:	00ca      	lsls	r2, r1, #3
 80041ae:	4610      	mov	r0, r2
 80041b0:	4619      	mov	r1, r3
 80041b2:	4603      	mov	r3, r0
 80041b4:	4642      	mov	r2, r8
 80041b6:	189b      	adds	r3, r3, r2
 80041b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041bc:	464b      	mov	r3, r9
 80041be:	460a      	mov	r2, r1
 80041c0:	eb42 0303 	adc.w	r3, r2, r3
 80041c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80041d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80041dc:	460b      	mov	r3, r1
 80041de:	18db      	adds	r3, r3, r3
 80041e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041e2:	4613      	mov	r3, r2
 80041e4:	eb42 0303 	adc.w	r3, r2, r3
 80041e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041f2:	f7fc f865 	bl	80002c0 <__aeabi_uldivmod>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4b0d      	ldr	r3, [pc, #52]	; (8004230 <UART_SetConfig+0x2d4>)
 80041fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004200:	095b      	lsrs	r3, r3, #5
 8004202:	2164      	movs	r1, #100	; 0x64
 8004204:	fb01 f303 	mul.w	r3, r1, r3
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	3332      	adds	r3, #50	; 0x32
 800420e:	4a08      	ldr	r2, [pc, #32]	; (8004230 <UART_SetConfig+0x2d4>)
 8004210:	fba2 2303 	umull	r2, r3, r2, r3
 8004214:	095b      	lsrs	r3, r3, #5
 8004216:	f003 0207 	and.w	r2, r3, #7
 800421a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4422      	add	r2, r4
 8004222:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004224:	e105      	b.n	8004432 <UART_SetConfig+0x4d6>
 8004226:	bf00      	nop
 8004228:	40011000 	.word	0x40011000
 800422c:	40011400 	.word	0x40011400
 8004230:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004234:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004238:	2200      	movs	r2, #0
 800423a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800423e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004242:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004246:	4642      	mov	r2, r8
 8004248:	464b      	mov	r3, r9
 800424a:	1891      	adds	r1, r2, r2
 800424c:	6239      	str	r1, [r7, #32]
 800424e:	415b      	adcs	r3, r3
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
 8004252:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004256:	4641      	mov	r1, r8
 8004258:	1854      	adds	r4, r2, r1
 800425a:	4649      	mov	r1, r9
 800425c:	eb43 0501 	adc.w	r5, r3, r1
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	00eb      	lsls	r3, r5, #3
 800426a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800426e:	00e2      	lsls	r2, r4, #3
 8004270:	4614      	mov	r4, r2
 8004272:	461d      	mov	r5, r3
 8004274:	4643      	mov	r3, r8
 8004276:	18e3      	adds	r3, r4, r3
 8004278:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800427c:	464b      	mov	r3, r9
 800427e:	eb45 0303 	adc.w	r3, r5, r3
 8004282:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004292:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004296:	f04f 0200 	mov.w	r2, #0
 800429a:	f04f 0300 	mov.w	r3, #0
 800429e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042a2:	4629      	mov	r1, r5
 80042a4:	008b      	lsls	r3, r1, #2
 80042a6:	4621      	mov	r1, r4
 80042a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042ac:	4621      	mov	r1, r4
 80042ae:	008a      	lsls	r2, r1, #2
 80042b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042b4:	f7fc f804 	bl	80002c0 <__aeabi_uldivmod>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4b60      	ldr	r3, [pc, #384]	; (8004440 <UART_SetConfig+0x4e4>)
 80042be:	fba3 2302 	umull	r2, r3, r3, r2
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	011c      	lsls	r4, r3, #4
 80042c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ca:	2200      	movs	r2, #0
 80042cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80042d8:	4642      	mov	r2, r8
 80042da:	464b      	mov	r3, r9
 80042dc:	1891      	adds	r1, r2, r2
 80042de:	61b9      	str	r1, [r7, #24]
 80042e0:	415b      	adcs	r3, r3
 80042e2:	61fb      	str	r3, [r7, #28]
 80042e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042e8:	4641      	mov	r1, r8
 80042ea:	1851      	adds	r1, r2, r1
 80042ec:	6139      	str	r1, [r7, #16]
 80042ee:	4649      	mov	r1, r9
 80042f0:	414b      	adcs	r3, r1
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004300:	4659      	mov	r1, fp
 8004302:	00cb      	lsls	r3, r1, #3
 8004304:	4651      	mov	r1, sl
 8004306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800430a:	4651      	mov	r1, sl
 800430c:	00ca      	lsls	r2, r1, #3
 800430e:	4610      	mov	r0, r2
 8004310:	4619      	mov	r1, r3
 8004312:	4603      	mov	r3, r0
 8004314:	4642      	mov	r2, r8
 8004316:	189b      	adds	r3, r3, r2
 8004318:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800431c:	464b      	mov	r3, r9
 800431e:	460a      	mov	r2, r1
 8004320:	eb42 0303 	adc.w	r3, r2, r3
 8004324:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	67bb      	str	r3, [r7, #120]	; 0x78
 8004332:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004340:	4649      	mov	r1, r9
 8004342:	008b      	lsls	r3, r1, #2
 8004344:	4641      	mov	r1, r8
 8004346:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800434a:	4641      	mov	r1, r8
 800434c:	008a      	lsls	r2, r1, #2
 800434e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004352:	f7fb ffb5 	bl	80002c0 <__aeabi_uldivmod>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4b39      	ldr	r3, [pc, #228]	; (8004440 <UART_SetConfig+0x4e4>)
 800435c:	fba3 1302 	umull	r1, r3, r3, r2
 8004360:	095b      	lsrs	r3, r3, #5
 8004362:	2164      	movs	r1, #100	; 0x64
 8004364:	fb01 f303 	mul.w	r3, r1, r3
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	3332      	adds	r3, #50	; 0x32
 800436e:	4a34      	ldr	r2, [pc, #208]	; (8004440 <UART_SetConfig+0x4e4>)
 8004370:	fba2 2303 	umull	r2, r3, r2, r3
 8004374:	095b      	lsrs	r3, r3, #5
 8004376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800437a:	441c      	add	r4, r3
 800437c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004380:	2200      	movs	r2, #0
 8004382:	673b      	str	r3, [r7, #112]	; 0x70
 8004384:	677a      	str	r2, [r7, #116]	; 0x74
 8004386:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800438a:	4642      	mov	r2, r8
 800438c:	464b      	mov	r3, r9
 800438e:	1891      	adds	r1, r2, r2
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	415b      	adcs	r3, r3
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800439a:	4641      	mov	r1, r8
 800439c:	1851      	adds	r1, r2, r1
 800439e:	6039      	str	r1, [r7, #0]
 80043a0:	4649      	mov	r1, r9
 80043a2:	414b      	adcs	r3, r1
 80043a4:	607b      	str	r3, [r7, #4]
 80043a6:	f04f 0200 	mov.w	r2, #0
 80043aa:	f04f 0300 	mov.w	r3, #0
 80043ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043b2:	4659      	mov	r1, fp
 80043b4:	00cb      	lsls	r3, r1, #3
 80043b6:	4651      	mov	r1, sl
 80043b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043bc:	4651      	mov	r1, sl
 80043be:	00ca      	lsls	r2, r1, #3
 80043c0:	4610      	mov	r0, r2
 80043c2:	4619      	mov	r1, r3
 80043c4:	4603      	mov	r3, r0
 80043c6:	4642      	mov	r2, r8
 80043c8:	189b      	adds	r3, r3, r2
 80043ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80043cc:	464b      	mov	r3, r9
 80043ce:	460a      	mov	r2, r1
 80043d0:	eb42 0303 	adc.w	r3, r2, r3
 80043d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	663b      	str	r3, [r7, #96]	; 0x60
 80043e0:	667a      	str	r2, [r7, #100]	; 0x64
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	f04f 0300 	mov.w	r3, #0
 80043ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80043ee:	4649      	mov	r1, r9
 80043f0:	008b      	lsls	r3, r1, #2
 80043f2:	4641      	mov	r1, r8
 80043f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043f8:	4641      	mov	r1, r8
 80043fa:	008a      	lsls	r2, r1, #2
 80043fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004400:	f7fb ff5e 	bl	80002c0 <__aeabi_uldivmod>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4b0d      	ldr	r3, [pc, #52]	; (8004440 <UART_SetConfig+0x4e4>)
 800440a:	fba3 1302 	umull	r1, r3, r3, r2
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	2164      	movs	r1, #100	; 0x64
 8004412:	fb01 f303 	mul.w	r3, r1, r3
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	3332      	adds	r3, #50	; 0x32
 800441c:	4a08      	ldr	r2, [pc, #32]	; (8004440 <UART_SetConfig+0x4e4>)
 800441e:	fba2 2303 	umull	r2, r3, r2, r3
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	f003 020f 	and.w	r2, r3, #15
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4422      	add	r2, r4
 8004430:	609a      	str	r2, [r3, #8]
}
 8004432:	bf00      	nop
 8004434:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004438:	46bd      	mov	sp, r7
 800443a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800443e:	bf00      	nop
 8004440:	51eb851f 	.word	0x51eb851f

08004444 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800444a:	4b8d      	ldr	r3, [pc, #564]	; (8004680 <MX_LWIP_Init+0x23c>)
 800444c:	220a      	movs	r2, #10
 800444e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 8004450:	4b8b      	ldr	r3, [pc, #556]	; (8004680 <MX_LWIP_Init+0x23c>)
 8004452:	2200      	movs	r2, #0
 8004454:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 8004456:	4b8a      	ldr	r3, [pc, #552]	; (8004680 <MX_LWIP_Init+0x23c>)
 8004458:	2202      	movs	r2, #2
 800445a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800445c:	4b88      	ldr	r3, [pc, #544]	; (8004680 <MX_LWIP_Init+0x23c>)
 800445e:	220a      	movs	r2, #10
 8004460:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004462:	4b88      	ldr	r3, [pc, #544]	; (8004684 <MX_LWIP_Init+0x240>)
 8004464:	22ff      	movs	r2, #255	; 0xff
 8004466:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004468:	4b86      	ldr	r3, [pc, #536]	; (8004684 <MX_LWIP_Init+0x240>)
 800446a:	22ff      	movs	r2, #255	; 0xff
 800446c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800446e:	4b85      	ldr	r3, [pc, #532]	; (8004684 <MX_LWIP_Init+0x240>)
 8004470:	22ff      	movs	r2, #255	; 0xff
 8004472:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004474:	4b83      	ldr	r3, [pc, #524]	; (8004684 <MX_LWIP_Init+0x240>)
 8004476:	2200      	movs	r2, #0
 8004478:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800447a:	4b83      	ldr	r3, [pc, #524]	; (8004688 <MX_LWIP_Init+0x244>)
 800447c:	220a      	movs	r2, #10
 800447e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8004480:	4b81      	ldr	r3, [pc, #516]	; (8004688 <MX_LWIP_Init+0x244>)
 8004482:	2200      	movs	r2, #0
 8004484:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 2;
 8004486:	4b80      	ldr	r3, [pc, #512]	; (8004688 <MX_LWIP_Init+0x244>)
 8004488:	2202      	movs	r2, #2
 800448a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800448c:	4b7e      	ldr	r3, [pc, #504]	; (8004688 <MX_LWIP_Init+0x244>)
 800448e:	2201      	movs	r2, #1
 8004490:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004492:	f002 f91b 	bl	80066cc <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004496:	4b7a      	ldr	r3, [pc, #488]	; (8004680 <MX_LWIP_Init+0x23c>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	061a      	lsls	r2, r3, #24
 800449c:	4b78      	ldr	r3, [pc, #480]	; (8004680 <MX_LWIP_Init+0x23c>)
 800449e:	785b      	ldrb	r3, [r3, #1]
 80044a0:	041b      	lsls	r3, r3, #16
 80044a2:	431a      	orrs	r2, r3
 80044a4:	4b76      	ldr	r3, [pc, #472]	; (8004680 <MX_LWIP_Init+0x23c>)
 80044a6:	789b      	ldrb	r3, [r3, #2]
 80044a8:	021b      	lsls	r3, r3, #8
 80044aa:	4313      	orrs	r3, r2
 80044ac:	4a74      	ldr	r2, [pc, #464]	; (8004680 <MX_LWIP_Init+0x23c>)
 80044ae:	78d2      	ldrb	r2, [r2, #3]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	061a      	lsls	r2, r3, #24
 80044b4:	4b72      	ldr	r3, [pc, #456]	; (8004680 <MX_LWIP_Init+0x23c>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	0619      	lsls	r1, r3, #24
 80044ba:	4b71      	ldr	r3, [pc, #452]	; (8004680 <MX_LWIP_Init+0x23c>)
 80044bc:	785b      	ldrb	r3, [r3, #1]
 80044be:	041b      	lsls	r3, r3, #16
 80044c0:	4319      	orrs	r1, r3
 80044c2:	4b6f      	ldr	r3, [pc, #444]	; (8004680 <MX_LWIP_Init+0x23c>)
 80044c4:	789b      	ldrb	r3, [r3, #2]
 80044c6:	021b      	lsls	r3, r3, #8
 80044c8:	430b      	orrs	r3, r1
 80044ca:	496d      	ldr	r1, [pc, #436]	; (8004680 <MX_LWIP_Init+0x23c>)
 80044cc:	78c9      	ldrb	r1, [r1, #3]
 80044ce:	430b      	orrs	r3, r1
 80044d0:	021b      	lsls	r3, r3, #8
 80044d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044d6:	431a      	orrs	r2, r3
 80044d8:	4b69      	ldr	r3, [pc, #420]	; (8004680 <MX_LWIP_Init+0x23c>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	0619      	lsls	r1, r3, #24
 80044de:	4b68      	ldr	r3, [pc, #416]	; (8004680 <MX_LWIP_Init+0x23c>)
 80044e0:	785b      	ldrb	r3, [r3, #1]
 80044e2:	041b      	lsls	r3, r3, #16
 80044e4:	4319      	orrs	r1, r3
 80044e6:	4b66      	ldr	r3, [pc, #408]	; (8004680 <MX_LWIP_Init+0x23c>)
 80044e8:	789b      	ldrb	r3, [r3, #2]
 80044ea:	021b      	lsls	r3, r3, #8
 80044ec:	430b      	orrs	r3, r1
 80044ee:	4964      	ldr	r1, [pc, #400]	; (8004680 <MX_LWIP_Init+0x23c>)
 80044f0:	78c9      	ldrb	r1, [r1, #3]
 80044f2:	430b      	orrs	r3, r1
 80044f4:	0a1b      	lsrs	r3, r3, #8
 80044f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80044fa:	431a      	orrs	r2, r3
 80044fc:	4b60      	ldr	r3, [pc, #384]	; (8004680 <MX_LWIP_Init+0x23c>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	0619      	lsls	r1, r3, #24
 8004502:	4b5f      	ldr	r3, [pc, #380]	; (8004680 <MX_LWIP_Init+0x23c>)
 8004504:	785b      	ldrb	r3, [r3, #1]
 8004506:	041b      	lsls	r3, r3, #16
 8004508:	4319      	orrs	r1, r3
 800450a:	4b5d      	ldr	r3, [pc, #372]	; (8004680 <MX_LWIP_Init+0x23c>)
 800450c:	789b      	ldrb	r3, [r3, #2]
 800450e:	021b      	lsls	r3, r3, #8
 8004510:	430b      	orrs	r3, r1
 8004512:	495b      	ldr	r1, [pc, #364]	; (8004680 <MX_LWIP_Init+0x23c>)
 8004514:	78c9      	ldrb	r1, [r1, #3]
 8004516:	430b      	orrs	r3, r1
 8004518:	0e1b      	lsrs	r3, r3, #24
 800451a:	4313      	orrs	r3, r2
 800451c:	4a5b      	ldr	r2, [pc, #364]	; (800468c <MX_LWIP_Init+0x248>)
 800451e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004520:	4b58      	ldr	r3, [pc, #352]	; (8004684 <MX_LWIP_Init+0x240>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	061a      	lsls	r2, r3, #24
 8004526:	4b57      	ldr	r3, [pc, #348]	; (8004684 <MX_LWIP_Init+0x240>)
 8004528:	785b      	ldrb	r3, [r3, #1]
 800452a:	041b      	lsls	r3, r3, #16
 800452c:	431a      	orrs	r2, r3
 800452e:	4b55      	ldr	r3, [pc, #340]	; (8004684 <MX_LWIP_Init+0x240>)
 8004530:	789b      	ldrb	r3, [r3, #2]
 8004532:	021b      	lsls	r3, r3, #8
 8004534:	4313      	orrs	r3, r2
 8004536:	4a53      	ldr	r2, [pc, #332]	; (8004684 <MX_LWIP_Init+0x240>)
 8004538:	78d2      	ldrb	r2, [r2, #3]
 800453a:	4313      	orrs	r3, r2
 800453c:	061a      	lsls	r2, r3, #24
 800453e:	4b51      	ldr	r3, [pc, #324]	; (8004684 <MX_LWIP_Init+0x240>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	0619      	lsls	r1, r3, #24
 8004544:	4b4f      	ldr	r3, [pc, #316]	; (8004684 <MX_LWIP_Init+0x240>)
 8004546:	785b      	ldrb	r3, [r3, #1]
 8004548:	041b      	lsls	r3, r3, #16
 800454a:	4319      	orrs	r1, r3
 800454c:	4b4d      	ldr	r3, [pc, #308]	; (8004684 <MX_LWIP_Init+0x240>)
 800454e:	789b      	ldrb	r3, [r3, #2]
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	430b      	orrs	r3, r1
 8004554:	494b      	ldr	r1, [pc, #300]	; (8004684 <MX_LWIP_Init+0x240>)
 8004556:	78c9      	ldrb	r1, [r1, #3]
 8004558:	430b      	orrs	r3, r1
 800455a:	021b      	lsls	r3, r3, #8
 800455c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004560:	431a      	orrs	r2, r3
 8004562:	4b48      	ldr	r3, [pc, #288]	; (8004684 <MX_LWIP_Init+0x240>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	0619      	lsls	r1, r3, #24
 8004568:	4b46      	ldr	r3, [pc, #280]	; (8004684 <MX_LWIP_Init+0x240>)
 800456a:	785b      	ldrb	r3, [r3, #1]
 800456c:	041b      	lsls	r3, r3, #16
 800456e:	4319      	orrs	r1, r3
 8004570:	4b44      	ldr	r3, [pc, #272]	; (8004684 <MX_LWIP_Init+0x240>)
 8004572:	789b      	ldrb	r3, [r3, #2]
 8004574:	021b      	lsls	r3, r3, #8
 8004576:	430b      	orrs	r3, r1
 8004578:	4942      	ldr	r1, [pc, #264]	; (8004684 <MX_LWIP_Init+0x240>)
 800457a:	78c9      	ldrb	r1, [r1, #3]
 800457c:	430b      	orrs	r3, r1
 800457e:	0a1b      	lsrs	r3, r3, #8
 8004580:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004584:	431a      	orrs	r2, r3
 8004586:	4b3f      	ldr	r3, [pc, #252]	; (8004684 <MX_LWIP_Init+0x240>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	0619      	lsls	r1, r3, #24
 800458c:	4b3d      	ldr	r3, [pc, #244]	; (8004684 <MX_LWIP_Init+0x240>)
 800458e:	785b      	ldrb	r3, [r3, #1]
 8004590:	041b      	lsls	r3, r3, #16
 8004592:	4319      	orrs	r1, r3
 8004594:	4b3b      	ldr	r3, [pc, #236]	; (8004684 <MX_LWIP_Init+0x240>)
 8004596:	789b      	ldrb	r3, [r3, #2]
 8004598:	021b      	lsls	r3, r3, #8
 800459a:	430b      	orrs	r3, r1
 800459c:	4939      	ldr	r1, [pc, #228]	; (8004684 <MX_LWIP_Init+0x240>)
 800459e:	78c9      	ldrb	r1, [r1, #3]
 80045a0:	430b      	orrs	r3, r1
 80045a2:	0e1b      	lsrs	r3, r3, #24
 80045a4:	4313      	orrs	r3, r2
 80045a6:	4a3a      	ldr	r2, [pc, #232]	; (8004690 <MX_LWIP_Init+0x24c>)
 80045a8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80045aa:	4b37      	ldr	r3, [pc, #220]	; (8004688 <MX_LWIP_Init+0x244>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	061a      	lsls	r2, r3, #24
 80045b0:	4b35      	ldr	r3, [pc, #212]	; (8004688 <MX_LWIP_Init+0x244>)
 80045b2:	785b      	ldrb	r3, [r3, #1]
 80045b4:	041b      	lsls	r3, r3, #16
 80045b6:	431a      	orrs	r2, r3
 80045b8:	4b33      	ldr	r3, [pc, #204]	; (8004688 <MX_LWIP_Init+0x244>)
 80045ba:	789b      	ldrb	r3, [r3, #2]
 80045bc:	021b      	lsls	r3, r3, #8
 80045be:	4313      	orrs	r3, r2
 80045c0:	4a31      	ldr	r2, [pc, #196]	; (8004688 <MX_LWIP_Init+0x244>)
 80045c2:	78d2      	ldrb	r2, [r2, #3]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	061a      	lsls	r2, r3, #24
 80045c8:	4b2f      	ldr	r3, [pc, #188]	; (8004688 <MX_LWIP_Init+0x244>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	0619      	lsls	r1, r3, #24
 80045ce:	4b2e      	ldr	r3, [pc, #184]	; (8004688 <MX_LWIP_Init+0x244>)
 80045d0:	785b      	ldrb	r3, [r3, #1]
 80045d2:	041b      	lsls	r3, r3, #16
 80045d4:	4319      	orrs	r1, r3
 80045d6:	4b2c      	ldr	r3, [pc, #176]	; (8004688 <MX_LWIP_Init+0x244>)
 80045d8:	789b      	ldrb	r3, [r3, #2]
 80045da:	021b      	lsls	r3, r3, #8
 80045dc:	430b      	orrs	r3, r1
 80045de:	492a      	ldr	r1, [pc, #168]	; (8004688 <MX_LWIP_Init+0x244>)
 80045e0:	78c9      	ldrb	r1, [r1, #3]
 80045e2:	430b      	orrs	r3, r1
 80045e4:	021b      	lsls	r3, r3, #8
 80045e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045ea:	431a      	orrs	r2, r3
 80045ec:	4b26      	ldr	r3, [pc, #152]	; (8004688 <MX_LWIP_Init+0x244>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	0619      	lsls	r1, r3, #24
 80045f2:	4b25      	ldr	r3, [pc, #148]	; (8004688 <MX_LWIP_Init+0x244>)
 80045f4:	785b      	ldrb	r3, [r3, #1]
 80045f6:	041b      	lsls	r3, r3, #16
 80045f8:	4319      	orrs	r1, r3
 80045fa:	4b23      	ldr	r3, [pc, #140]	; (8004688 <MX_LWIP_Init+0x244>)
 80045fc:	789b      	ldrb	r3, [r3, #2]
 80045fe:	021b      	lsls	r3, r3, #8
 8004600:	430b      	orrs	r3, r1
 8004602:	4921      	ldr	r1, [pc, #132]	; (8004688 <MX_LWIP_Init+0x244>)
 8004604:	78c9      	ldrb	r1, [r1, #3]
 8004606:	430b      	orrs	r3, r1
 8004608:	0a1b      	lsrs	r3, r3, #8
 800460a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800460e:	431a      	orrs	r2, r3
 8004610:	4b1d      	ldr	r3, [pc, #116]	; (8004688 <MX_LWIP_Init+0x244>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	0619      	lsls	r1, r3, #24
 8004616:	4b1c      	ldr	r3, [pc, #112]	; (8004688 <MX_LWIP_Init+0x244>)
 8004618:	785b      	ldrb	r3, [r3, #1]
 800461a:	041b      	lsls	r3, r3, #16
 800461c:	4319      	orrs	r1, r3
 800461e:	4b1a      	ldr	r3, [pc, #104]	; (8004688 <MX_LWIP_Init+0x244>)
 8004620:	789b      	ldrb	r3, [r3, #2]
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	430b      	orrs	r3, r1
 8004626:	4918      	ldr	r1, [pc, #96]	; (8004688 <MX_LWIP_Init+0x244>)
 8004628:	78c9      	ldrb	r1, [r1, #3]
 800462a:	430b      	orrs	r3, r1
 800462c:	0e1b      	lsrs	r3, r3, #24
 800462e:	4313      	orrs	r3, r2
 8004630:	4a18      	ldr	r2, [pc, #96]	; (8004694 <MX_LWIP_Init+0x250>)
 8004632:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004634:	4b18      	ldr	r3, [pc, #96]	; (8004698 <MX_LWIP_Init+0x254>)
 8004636:	9302      	str	r3, [sp, #8]
 8004638:	4b18      	ldr	r3, [pc, #96]	; (800469c <MX_LWIP_Init+0x258>)
 800463a:	9301      	str	r3, [sp, #4]
 800463c:	2300      	movs	r3, #0
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	4b14      	ldr	r3, [pc, #80]	; (8004694 <MX_LWIP_Init+0x250>)
 8004642:	4a13      	ldr	r2, [pc, #76]	; (8004690 <MX_LWIP_Init+0x24c>)
 8004644:	4911      	ldr	r1, [pc, #68]	; (800468c <MX_LWIP_Init+0x248>)
 8004646:	4816      	ldr	r0, [pc, #88]	; (80046a0 <MX_LWIP_Init+0x25c>)
 8004648:	f002 fd2c 	bl	80070a4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800464c:	4814      	ldr	r0, [pc, #80]	; (80046a0 <MX_LWIP_Init+0x25c>)
 800464e:	f002 fedb 	bl	8007408 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004652:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <MX_LWIP_Init+0x25c>)
 8004654:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004658:	089b      	lsrs	r3, r3, #2
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004664:	480e      	ldr	r0, [pc, #56]	; (80046a0 <MX_LWIP_Init+0x25c>)
 8004666:	f002 fedf 	bl	8007428 <netif_set_up>
 800466a:	e002      	b.n	8004672 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800466c:	480c      	ldr	r0, [pc, #48]	; (80046a0 <MX_LWIP_Init+0x25c>)
 800466e:	f002 ff47 	bl	8007500 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004672:	490c      	ldr	r1, [pc, #48]	; (80046a4 <MX_LWIP_Init+0x260>)
 8004674:	480a      	ldr	r0, [pc, #40]	; (80046a0 <MX_LWIP_Init+0x25c>)
 8004676:	f002 ffd9 	bl	800762c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800467a:	bf00      	nop
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	2000017c 	.word	0x2000017c
 8004684:	20000180 	.word	0x20000180
 8004688:	20000184 	.word	0x20000184
 800468c:	20000170 	.word	0x20000170
 8004690:	20000174 	.word	0x20000174
 8004694:	20000178 	.word	0x20000178
 8004698:	08010ce5 	.word	0x08010ce5
 800469c:	08004a39 	.word	0x08004a39
 80046a0:	2000013c 	.word	0x2000013c
 80046a4:	080046f9 	.word	0x080046f9

080046a8 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80046b0:	f7fc fe48 	bl	8001344 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <Ethernet_Link_Periodic_Handle+0x30>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b63      	cmp	r3, #99	; 0x63
 80046be:	d907      	bls.n	80046d0 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80046c0:	f7fc fe40 	bl	8001344 <HAL_GetTick>
 80046c4:	4603      	mov	r3, r0
 80046c6:	4a04      	ldr	r2, [pc, #16]	; (80046d8 <Ethernet_Link_Periodic_Handle+0x30>)
 80046c8:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fb18 	bl	8004d00 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80046d0:	bf00      	nop
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	20000138 	.word	0x20000138

080046dc <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80046e0:	4804      	ldr	r0, [pc, #16]	; (80046f4 <MX_LWIP_Process+0x18>)
 80046e2:	f000 f989 	bl	80049f8 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80046e6:	f009 ff11 	bl	800e50c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80046ea:	4802      	ldr	r0, [pc, #8]	; (80046f4 <MX_LWIP_Process+0x18>)
 80046ec:	f7ff ffdc 	bl	80046a8 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80046f0:	bf00      	nop
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	2000013c 	.word	0x2000013c

080046f8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004718:	4b40      	ldr	r3, [pc, #256]	; (800481c <low_level_init+0x110>)
 800471a:	4a41      	ldr	r2, [pc, #260]	; (8004820 <low_level_init+0x114>)
 800471c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800471e:	2300      	movs	r3, #0
 8004720:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004722:	2380      	movs	r3, #128	; 0x80
 8004724:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004726:	23e1      	movs	r3, #225	; 0xe1
 8004728:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800472a:	2300      	movs	r3, #0
 800472c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800472e:	2300      	movs	r3, #0
 8004730:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004732:	2300      	movs	r3, #0
 8004734:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004736:	4a39      	ldr	r2, [pc, #228]	; (800481c <low_level_init+0x110>)
 8004738:	f107 0308 	add.w	r3, r7, #8
 800473c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800473e:	4b37      	ldr	r3, [pc, #220]	; (800481c <low_level_init+0x110>)
 8004740:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004744:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004746:	4b35      	ldr	r3, [pc, #212]	; (800481c <low_level_init+0x110>)
 8004748:	4a36      	ldr	r2, [pc, #216]	; (8004824 <low_level_init+0x118>)
 800474a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800474c:	4b33      	ldr	r3, [pc, #204]	; (800481c <low_level_init+0x110>)
 800474e:	4a36      	ldr	r2, [pc, #216]	; (8004828 <low_level_init+0x11c>)
 8004750:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004752:	4b32      	ldr	r3, [pc, #200]	; (800481c <low_level_init+0x110>)
 8004754:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004758:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800475a:	4830      	ldr	r0, [pc, #192]	; (800481c <low_level_init+0x110>)
 800475c:	f7fc ffc6 	bl	80016ec <HAL_ETH_Init>
 8004760:	4603      	mov	r3, r0
 8004762:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004764:	2238      	movs	r2, #56	; 0x38
 8004766:	2100      	movs	r1, #0
 8004768:	4830      	ldr	r0, [pc, #192]	; (800482c <low_level_init+0x120>)
 800476a:	f00c fbd3 	bl	8010f14 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800476e:	4b2f      	ldr	r3, [pc, #188]	; (800482c <low_level_init+0x120>)
 8004770:	2221      	movs	r2, #33	; 0x21
 8004772:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004774:	4b2d      	ldr	r3, [pc, #180]	; (800482c <low_level_init+0x120>)
 8004776:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800477a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800477c:	4b2b      	ldr	r3, [pc, #172]	; (800482c <low_level_init+0x120>)
 800477e:	2200      	movs	r2, #0
 8004780:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004782:	482b      	ldr	r0, [pc, #172]	; (8004830 <low_level_init+0x124>)
 8004784:	f002 fb56 	bl	8006e34 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2206      	movs	r2, #6
 800478c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004790:	4b22      	ldr	r3, [pc, #136]	; (800481c <low_level_init+0x110>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	781a      	ldrb	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800479c:	4b1f      	ldr	r3, [pc, #124]	; (800481c <low_level_init+0x110>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	785a      	ldrb	r2, [r3, #1]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80047a8:	4b1c      	ldr	r3, [pc, #112]	; (800481c <low_level_init+0x110>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	789a      	ldrb	r2, [r3, #2]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80047b4:	4b19      	ldr	r3, [pc, #100]	; (800481c <low_level_init+0x110>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	78da      	ldrb	r2, [r3, #3]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80047c0:	4b16      	ldr	r3, [pc, #88]	; (800481c <low_level_init+0x110>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	791a      	ldrb	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80047cc:	4b13      	ldr	r3, [pc, #76]	; (800481c <low_level_init+0x110>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	795a      	ldrb	r2, [r3, #5]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80047de:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80047e6:	f043 030a 	orr.w	r3, r3, #10
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80047f2:	4910      	ldr	r1, [pc, #64]	; (8004834 <low_level_init+0x128>)
 80047f4:	4810      	ldr	r0, [pc, #64]	; (8004838 <low_level_init+0x12c>)
 80047f6:	f7fc fbde 	bl	8000fb6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80047fa:	480f      	ldr	r0, [pc, #60]	; (8004838 <low_level_init+0x12c>)
 80047fc:	f7fc fc0d 	bl	800101a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d103      	bne.n	800480e <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fa7a 	bl	8004d00 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800480c:	e001      	b.n	8004812 <low_level_init+0x106>
    Error_Handler();
 800480e:	f7fc fa1b 	bl	8000c48 <Error_Handler>
}
 8004812:	bf00      	nop
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	20004c54 	.word	0x20004c54
 8004820:	40028000 	.word	0x40028000
 8004824:	20004bb4 	.word	0x20004bb4
 8004828:	20004b14 	.word	0x20004b14
 800482c:	20004d04 	.word	0x20004d04
 8004830:	08014d80 	.word	0x08014d80
 8004834:	2000003c 	.word	0x2000003c
 8004838:	20004d3c 	.word	0x20004d3c

0800483c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b092      	sub	sp, #72	; 0x48
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800484a:	2300      	movs	r3, #0
 800484c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004854:	f107 030c 	add.w	r3, r7, #12
 8004858:	2230      	movs	r2, #48	; 0x30
 800485a:	2100      	movs	r1, #0
 800485c:	4618      	mov	r0, r3
 800485e:	f00c fb59 	bl	8010f14 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004862:	f107 030c 	add.w	r3, r7, #12
 8004866:	2230      	movs	r2, #48	; 0x30
 8004868:	2100      	movs	r1, #0
 800486a:	4618      	mov	r0, r3
 800486c:	f00c fb52 	bl	8010f14 <memset>

  for(q = p; q != NULL; q = q->next)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	643b      	str	r3, [r7, #64]	; 0x40
 8004874:	e045      	b.n	8004902 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004878:	2b03      	cmp	r3, #3
 800487a:	d902      	bls.n	8004882 <low_level_output+0x46>
      return ERR_IF;
 800487c:	f06f 030b 	mvn.w	r3, #11
 8004880:	e055      	b.n	800492e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8004882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004884:	6859      	ldr	r1, [r3, #4]
 8004886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004888:	4613      	mov	r3, r2
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	4413      	add	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	3348      	adds	r3, #72	; 0x48
 8004892:	443b      	add	r3, r7
 8004894:	3b3c      	subs	r3, #60	; 0x3c
 8004896:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800489a:	895b      	ldrh	r3, [r3, #10]
 800489c:	4619      	mov	r1, r3
 800489e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048a0:	4613      	mov	r3, r2
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	3348      	adds	r3, #72	; 0x48
 80048aa:	443b      	add	r3, r7
 80048ac:	3b38      	subs	r3, #56	; 0x38
 80048ae:	6019      	str	r1, [r3, #0]

    if(i>0)
 80048b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d011      	beq.n	80048da <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80048b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048b8:	1e5a      	subs	r2, r3, #1
 80048ba:	f107 000c 	add.w	r0, r7, #12
 80048be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048c0:	460b      	mov	r3, r1
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	440b      	add	r3, r1
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	18c1      	adds	r1, r0, r3
 80048ca:	4613      	mov	r3, r2
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	4413      	add	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	3348      	adds	r3, #72	; 0x48
 80048d4:	443b      	add	r3, r7
 80048d6:	3b34      	subs	r3, #52	; 0x34
 80048d8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80048da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80048e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048e4:	4613      	mov	r3, r2
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	4413      	add	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	3348      	adds	r3, #72	; 0x48
 80048ee:	443b      	add	r3, r7
 80048f0:	3b34      	subs	r3, #52	; 0x34
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80048f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048f8:	3301      	adds	r3, #1
 80048fa:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80048fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	643b      	str	r3, [r7, #64]	; 0x40
 8004902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1b6      	bne.n	8004876 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	891b      	ldrh	r3, [r3, #8]
 800490c:	461a      	mov	r2, r3
 800490e:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <low_level_output+0xfc>)
 8004910:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004912:	4a09      	ldr	r2, [pc, #36]	; (8004938 <low_level_output+0xfc>)
 8004914:	f107 030c 	add.w	r3, r7, #12
 8004918:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800491a:	4a07      	ldr	r2, [pc, #28]	; (8004938 <low_level_output+0xfc>)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004920:	2214      	movs	r2, #20
 8004922:	4905      	ldr	r1, [pc, #20]	; (8004938 <low_level_output+0xfc>)
 8004924:	4805      	ldr	r0, [pc, #20]	; (800493c <low_level_output+0x100>)
 8004926:	f7fd f817 	bl	8001958 <HAL_ETH_Transmit>

  return errval;
 800492a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800492e:	4618      	mov	r0, r3
 8004930:	3748      	adds	r7, #72	; 0x48
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20004d04 	.word	0x20004d04
 800493c:	20004c54 	.word	0x20004c54

08004940 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004948:	2300      	movs	r3, #0
 800494a:	613b      	str	r3, [r7, #16]
  struct pbuf *myp = NULL;
 800494c:	2300      	movs	r3, #0
 800494e:	617b      	str	r3, [r7, #20]

  uint8_t MACAddr[6];

  MACAddr[0] = 0xFF;
 8004950:	23ff      	movs	r3, #255	; 0xff
 8004952:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0xFF;
 8004954:	23ff      	movs	r3, #255	; 0xff
 8004956:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xFF;
 8004958:	23ff      	movs	r3, #255	; 0xff
 800495a:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0xFF;
 800495c:	23ff      	movs	r3, #255	; 0xff
 800495e:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0xFF;
 8004960:	23ff      	movs	r3, #255	; 0xff
 8004962:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0xFF;
 8004964:	23ff      	movs	r3, #255	; 0xff
 8004966:	737b      	strb	r3, [r7, #13]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004968:	4b1c      	ldr	r3, [pc, #112]	; (80049dc <low_level_input+0x9c>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d12f      	bne.n	80049d0 <low_level_input+0x90>
  {
    if (HAL_ETH_ReadData(&heth, (void **)&p) == HAL_OK)
 8004970:	f107 0310 	add.w	r3, r7, #16
 8004974:	4619      	mov	r1, r3
 8004976:	481a      	ldr	r0, [pc, #104]	; (80049e0 <low_level_input+0xa0>)
 8004978:	f7fd f882 	bl	8001a80 <HAL_ETH_ReadData>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d126      	bne.n	80049d0 <low_level_input+0x90>
    {
      LED2_TGL;
 8004982:	4b18      	ldr	r3, [pc, #96]	; (80049e4 <low_level_input+0xa4>)
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	4a17      	ldr	r2, [pc, #92]	; (80049e4 <low_level_input+0xa4>)
 8004988:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800498c:	6153      	str	r3, [r2, #20]
      myp = p;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	617b      	str	r3, [r7, #20]
      mypData = p->payload;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	4a14      	ldr	r2, [pc, #80]	; (80049e8 <low_level_input+0xa8>)
 8004998:	6013      	str	r3, [r2, #0]
      _index = 0;
 800499a:	4b14      	ldr	r3, [pc, #80]	; (80049ec <low_level_input+0xac>)
 800499c:	2200      	movs	r2, #0
 800499e:	701a      	strb	r2, [r3, #0]

      if (Filter(p->payload, &INSTRUCTION_IP_TCP[0]))
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	4912      	ldr	r1, [pc, #72]	; (80049f0 <low_level_input+0xb0>)
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fb ff18 	bl	80007dc <Filter>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00e      	beq.n	80049d0 <low_level_input+0x90>
      {
         while(myp != NULL)
 80049b2:	e00a      	b.n	80049ca <low_level_input+0x8a>
         {
            HAL_UART_Transmit_IT(&huart3, myp->payload, myp->len);
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	6859      	ldr	r1, [r3, #4]
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	895b      	ldrh	r3, [r3, #10]
 80049bc:	461a      	mov	r2, r3
 80049be:	480d      	ldr	r0, [pc, #52]	; (80049f4 <low_level_input+0xb4>)
 80049c0:	f7fe fe35 	bl	800362e <HAL_UART_Transmit_IT>
               myp = myp->next;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	617b      	str	r3, [r7, #20]
         while(myp != NULL)
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f1      	bne.n	80049b4 <low_level_input+0x74>
          myp = myp->next;
       }*/
    }
  }

  return p;
 80049d0:	693b      	ldr	r3, [r7, #16]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20004b10 	.word	0x20004b10
 80049e0:	20004c54 	.word	0x20004c54
 80049e4:	40020400 	.word	0x40020400
 80049e8:	200000dc 	.word	0x200000dc
 80049ec:	200000e0 	.word	0x200000e0
 80049f0:	20000000 	.word	0x20000000
 80049f4:	200000e4 	.word	0x200000e4

080049f8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7ff ff9b 	bl	8004940 <low_level_input>
 8004a0a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	4798      	blx	r3
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f003 f982 	bl	8007d2c <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1ea      	bne.n	8004a04 <ethernetif_input+0xc>
}
 8004a2e:	bf00      	nop
 8004a30:	bf00      	nop
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <ethernetif_init+0x1c>
 8004a46:	4b0e      	ldr	r3, [pc, #56]	; (8004a80 <ethernetif_init+0x48>)
 8004a48:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8004a4c:	490d      	ldr	r1, [pc, #52]	; (8004a84 <ethernetif_init+0x4c>)
 8004a4e:	480e      	ldr	r0, [pc, #56]	; (8004a88 <ethernetif_init+0x50>)
 8004a50:	f00c fa68 	bl	8010f24 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2273      	movs	r2, #115	; 0x73
 8004a58:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2274      	movs	r2, #116	; 0x74
 8004a60:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a09      	ldr	r2, [pc, #36]	; (8004a8c <ethernetif_init+0x54>)
 8004a68:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a08      	ldr	r2, [pc, #32]	; (8004a90 <ethernetif_init+0x58>)
 8004a6e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff fe4b 	bl	800470c <low_level_init>

  return ERR_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	08012068 	.word	0x08012068
 8004a84:	08012084 	.word	0x08012084
 8004a88:	08012094 	.word	0x08012094
 8004a8c:	0800f19d 	.word	0x0800f19d
 8004a90:	0800483d 	.word	0x0800483d

08004a94 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004aa0:	68f9      	ldr	r1, [r7, #12]
 8004aa2:	4807      	ldr	r0, [pc, #28]	; (8004ac0 <pbuf_free_custom+0x2c>)
 8004aa4:	f002 faa8 	bl	8006ff8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004aa8:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <pbuf_free_custom+0x30>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d102      	bne.n	8004ab6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004ab0:	4b04      	ldr	r3, [pc, #16]	; (8004ac4 <pbuf_free_custom+0x30>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	701a      	strb	r2, [r3, #0]
  }
}
 8004ab6:	bf00      	nop
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	08014d80 	.word	0x08014d80
 8004ac4:	20004b10 	.word	0x20004b10

08004ac8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004acc:	f7fc fc3a 	bl	8001344 <HAL_GetTick>
 8004ad0:	4603      	mov	r3, r0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08e      	sub	sp, #56	; 0x38
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	605a      	str	r2, [r3, #4]
 8004aea:	609a      	str	r2, [r3, #8]
 8004aec:	60da      	str	r2, [r3, #12]
 8004aee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a55      	ldr	r2, [pc, #340]	; (8004c4c <HAL_ETH_MspInit+0x174>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	f040 80a4 	bne.w	8004c44 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004afc:	2300      	movs	r3, #0
 8004afe:	623b      	str	r3, [r7, #32]
 8004b00:	4b53      	ldr	r3, [pc, #332]	; (8004c50 <HAL_ETH_MspInit+0x178>)
 8004b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b04:	4a52      	ldr	r2, [pc, #328]	; (8004c50 <HAL_ETH_MspInit+0x178>)
 8004b06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8004b0c:	4b50      	ldr	r3, [pc, #320]	; (8004c50 <HAL_ETH_MspInit+0x178>)
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b14:	623b      	str	r3, [r7, #32]
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	61fb      	str	r3, [r7, #28]
 8004b1c:	4b4c      	ldr	r3, [pc, #304]	; (8004c50 <HAL_ETH_MspInit+0x178>)
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b20:	4a4b      	ldr	r2, [pc, #300]	; (8004c50 <HAL_ETH_MspInit+0x178>)
 8004b22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b26:	6313      	str	r3, [r2, #48]	; 0x30
 8004b28:	4b49      	ldr	r3, [pc, #292]	; (8004c50 <HAL_ETH_MspInit+0x178>)
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b30:	61fb      	str	r3, [r7, #28]
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	2300      	movs	r3, #0
 8004b36:	61bb      	str	r3, [r7, #24]
 8004b38:	4b45      	ldr	r3, [pc, #276]	; (8004c50 <HAL_ETH_MspInit+0x178>)
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3c:	4a44      	ldr	r2, [pc, #272]	; (8004c50 <HAL_ETH_MspInit+0x178>)
 8004b3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b42:	6313      	str	r3, [r2, #48]	; 0x30
 8004b44:	4b42      	ldr	r3, [pc, #264]	; (8004c50 <HAL_ETH_MspInit+0x178>)
 8004b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b4c:	61bb      	str	r3, [r7, #24]
 8004b4e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	4b3e      	ldr	r3, [pc, #248]	; (8004c50 <HAL_ETH_MspInit+0x178>)
 8004b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b58:	4a3d      	ldr	r2, [pc, #244]	; (8004c50 <HAL_ETH_MspInit+0x178>)
 8004b5a:	f043 0304 	orr.w	r3, r3, #4
 8004b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8004b60:	4b3b      	ldr	r3, [pc, #236]	; (8004c50 <HAL_ETH_MspInit+0x178>)
 8004b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	4b37      	ldr	r3, [pc, #220]	; (8004c50 <HAL_ETH_MspInit+0x178>)
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	4a36      	ldr	r2, [pc, #216]	; (8004c50 <HAL_ETH_MspInit+0x178>)
 8004b76:	f043 0301 	orr.w	r3, r3, #1
 8004b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8004b7c:	4b34      	ldr	r3, [pc, #208]	; (8004c50 <HAL_ETH_MspInit+0x178>)
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	613b      	str	r3, [r7, #16]
 8004b86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	4b30      	ldr	r3, [pc, #192]	; (8004c50 <HAL_ETH_MspInit+0x178>)
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	4a2f      	ldr	r2, [pc, #188]	; (8004c50 <HAL_ETH_MspInit+0x178>)
 8004b92:	f043 0302 	orr.w	r3, r3, #2
 8004b96:	6313      	str	r3, [r2, #48]	; 0x30
 8004b98:	4b2d      	ldr	r3, [pc, #180]	; (8004c50 <HAL_ETH_MspInit+0x178>)
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60bb      	str	r3, [r7, #8]
 8004ba8:	4b29      	ldr	r3, [pc, #164]	; (8004c50 <HAL_ETH_MspInit+0x178>)
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	4a28      	ldr	r2, [pc, #160]	; (8004c50 <HAL_ETH_MspInit+0x178>)
 8004bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb4:	4b26      	ldr	r3, [pc, #152]	; (8004c50 <HAL_ETH_MspInit+0x178>)
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbc:	60bb      	str	r3, [r7, #8]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004bc0:	2332      	movs	r3, #50	; 0x32
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004bd0:	230b      	movs	r3, #11
 8004bd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bd8:	4619      	mov	r1, r3
 8004bda:	481e      	ldr	r0, [pc, #120]	; (8004c54 <HAL_ETH_MspInit+0x17c>)
 8004bdc:	f7fd fe7c 	bl	80028d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004be0:	2386      	movs	r3, #134	; 0x86
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be4:	2302      	movs	r3, #2
 8004be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bec:	2303      	movs	r3, #3
 8004bee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004bf0:	230b      	movs	r3, #11
 8004bf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4817      	ldr	r0, [pc, #92]	; (8004c58 <HAL_ETH_MspInit+0x180>)
 8004bfc:	f7fd fe6c 	bl	80028d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004c00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c06:	2302      	movs	r3, #2
 8004c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c12:	230b      	movs	r3, #11
 8004c14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	480f      	ldr	r0, [pc, #60]	; (8004c5c <HAL_ETH_MspInit+0x184>)
 8004c1e:	f7fd fe5b 	bl	80028d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004c22:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c28:	2302      	movs	r3, #2
 8004c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c30:	2303      	movs	r3, #3
 8004c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c34:	230b      	movs	r3, #11
 8004c36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4808      	ldr	r0, [pc, #32]	; (8004c60 <HAL_ETH_MspInit+0x188>)
 8004c40:	f7fd fe4a 	bl	80028d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004c44:	bf00      	nop
 8004c46:	3738      	adds	r7, #56	; 0x38
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40028000 	.word	0x40028000
 8004c50:	40023800 	.word	0x40023800
 8004c54:	40020800 	.word	0x40020800
 8004c58:	40020000 	.word	0x40020000
 8004c5c:	40020400 	.word	0x40020400
 8004c60:	40021800 	.word	0x40021800

08004c64 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004c68:	4802      	ldr	r0, [pc, #8]	; (8004c74 <ETH_PHY_IO_Init+0x10>)
 8004c6a:	f7fd f9d9 	bl	8002020 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	20004c54 	.word	0x20004c54

08004c78 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  return 0;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	68f9      	ldr	r1, [r7, #12]
 8004c9a:	4807      	ldr	r0, [pc, #28]	; (8004cb8 <ETH_PHY_IO_ReadReg+0x30>)
 8004c9c:	f7fd f828 	bl	8001cf0 <HAL_ETH_ReadPHYRegister>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8004caa:	e000      	b.n	8004cae <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20004c54 	.word	0x20004c54

08004cbc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	68f9      	ldr	r1, [r7, #12]
 8004cce:	4807      	ldr	r0, [pc, #28]	; (8004cec <ETH_PHY_IO_WriteReg+0x30>)
 8004cd0:	f7fd f859 	bl	8001d86 <HAL_ETH_WritePHYRegister>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004cda:	f04f 33ff 	mov.w	r3, #4294967295
 8004cde:	e000      	b.n	8004ce2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20004c54 	.word	0x20004c54

08004cf0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004cf4:	f7fc fb26 	bl	8001344 <HAL_GetTick>
 8004cf8:	4603      	mov	r3, r0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	bd80      	pop	{r7, pc}
	...

08004d00 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b0a0      	sub	sp, #128	; 0x80
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004d08:	f107 030c 	add.w	r3, r7, #12
 8004d0c:	2264      	movs	r2, #100	; 0x64
 8004d0e:	2100      	movs	r1, #0
 8004d10:	4618      	mov	r0, r3
 8004d12:	f00c f8ff 	bl	8010f14 <memset>
  int32_t PHYLinkState = 0;
 8004d16:	2300      	movs	r3, #0
 8004d18:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d1e:	2300      	movs	r3, #0
 8004d20:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d22:	2300      	movs	r3, #0
 8004d24:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004d26:	483a      	ldr	r0, [pc, #232]	; (8004e10 <ethernet_link_check_state+0x110>)
 8004d28:	f7fc fa1f 	bl	800116a <LAN8742_GetLinkState>
 8004d2c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d34:	089b      	lsrs	r3, r3, #2
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00c      	beq.n	8004d5a <ethernet_link_check_state+0x5a>
 8004d40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	dc09      	bgt.n	8004d5a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8004d46:	4833      	ldr	r0, [pc, #204]	; (8004e14 <ethernet_link_check_state+0x114>)
 8004d48:	f7fc fdad 	bl	80018a6 <HAL_ETH_Stop>
    netif_set_down(netif);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f002 fbd7 	bl	8007500 <netif_set_down>
    netif_set_link_down(netif);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f002 fc3a 	bl	80075cc <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004d58:	e055      	b.n	8004e06 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d14e      	bne.n	8004e06 <ethernet_link_check_state+0x106>
 8004d68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	dd4b      	ble.n	8004e06 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d70:	3b02      	subs	r3, #2
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d82a      	bhi.n	8004dcc <ethernet_link_check_state+0xcc>
 8004d76:	a201      	add	r2, pc, #4	; (adr r2, 8004d7c <ethernet_link_check_state+0x7c>)
 8004d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7c:	08004d8d 	.word	0x08004d8d
 8004d80:	08004d9f 	.word	0x08004d9f
 8004d84:	08004daf 	.word	0x08004daf
 8004d88:	08004dbf 	.word	0x08004dbf
      duplex = ETH_FULLDUPLEX_MODE;
 8004d8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d90:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004d92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d96:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004d9c:	e017      	b.n	8004dce <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004da2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004da6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004da8:	2301      	movs	r3, #1
 8004daa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004dac:	e00f      	b.n	8004dce <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004dae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004db2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004db4:	2300      	movs	r3, #0
 8004db6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004db8:	2301      	movs	r3, #1
 8004dba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004dbc:	e007      	b.n	8004dce <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004dca:	e000      	b.n	8004dce <ethernet_link_check_state+0xce>
      break;
 8004dcc:	bf00      	nop
    if(linkchanged)
 8004dce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d018      	beq.n	8004e06 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004dd4:	f107 030c 	add.w	r3, r7, #12
 8004dd8:	4619      	mov	r1, r3
 8004dda:	480e      	ldr	r0, [pc, #56]	; (8004e14 <ethernet_link_check_state+0x114>)
 8004ddc:	f7fd f81c 	bl	8001e18 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004de2:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8004de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004de6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004de8:	f107 030c 	add.w	r3, r7, #12
 8004dec:	4619      	mov	r1, r3
 8004dee:	4809      	ldr	r0, [pc, #36]	; (8004e14 <ethernet_link_check_state+0x114>)
 8004df0:	f7fd f8fc 	bl	8001fec <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004df4:	4807      	ldr	r0, [pc, #28]	; (8004e14 <ethernet_link_check_state+0x114>)
 8004df6:	f7fc fcf7 	bl	80017e8 <HAL_ETH_Start>
      netif_set_up(netif);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f002 fb14 	bl	8007428 <netif_set_up>
      netif_set_link_up(netif);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f002 fbaf 	bl	8007564 <netif_set_link_up>
}
 8004e06:	bf00      	nop
 8004e08:	3780      	adds	r7, #128	; 0x80
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	20004d3c 	.word	0x20004d3c
 8004e14:	20004c54 	.word	0x20004c54

08004e18 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004e20:	4812      	ldr	r0, [pc, #72]	; (8004e6c <HAL_ETH_RxAllocateCallback+0x54>)
 8004e22:	f002 f87b 	bl	8006f1c <memp_malloc_pool>
 8004e26:	60f8      	str	r0, [r7, #12]
  if (p)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d014      	beq.n	8004e58 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f103 0220 	add.w	r2, r3, #32
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4a0d      	ldr	r2, [pc, #52]	; (8004e70 <HAL_ETH_RxAllocateCallback+0x58>)
 8004e3c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004e46:	9201      	str	r2, [sp, #4]
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2241      	movs	r2, #65	; 0x41
 8004e4e:	2100      	movs	r1, #0
 8004e50:	2000      	movs	r0, #0
 8004e52:	f002 fdb1 	bl	80079b8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004e56:	e005      	b.n	8004e64 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004e58:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	08014d80 	.word	0x08014d80
 8004e70:	08004a95 	.word	0x08004a95
 8004e74:	20004b10 	.word	0x20004b10

08004e78 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b089      	sub	sp, #36	; 0x24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
 8004e84:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3b20      	subs	r3, #32
 8004e96:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	887a      	ldrh	r2, [r7, #2]
 8004ea8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d103      	bne.n	8004eba <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	69fa      	ldr	r2, [r7, #28]
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	e003      	b.n	8004ec2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69fa      	ldr	r2, [r7, #28]
 8004ec0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	61fb      	str	r3, [r7, #28]
 8004ece:	e009      	b.n	8004ee4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	891a      	ldrh	r2, [r3, #8]
 8004ed4:	887b      	ldrh	r3, [r7, #2]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	61fb      	str	r3, [r7, #28]
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f2      	bne.n	8004ed0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004eea:	bf00      	nop
 8004eec:	bf00      	nop
 8004eee:	3724      	adds	r7, #36	; 0x24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <fs_open+0x16>
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d102      	bne.n	8004f14 <fs_open+0x1c>
    return ERR_ARG;
 8004f0e:	f06f 030f 	mvn.w	r3, #15
 8004f12:	e028      	b.n	8004f66 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8004f14:	4b16      	ldr	r3, [pc, #88]	; (8004f70 <fs_open+0x78>)
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	e020      	b.n	8004f5c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	4619      	mov	r1, r3
 8004f20:	6838      	ldr	r0, [r7, #0]
 8004f22:	f7fb f965 	bl	80001f0 <strcmp>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d114      	bne.n	8004f56 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	7c1a      	ldrb	r2, [r3, #16]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	e007      	b.n	8004f66 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1db      	bne.n	8004f1a <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8004f62:	f06f 0305 	mvn.w	r3, #5
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	080151f4 	.word	0x080151f4

08004f74 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	1ad3      	subs	r3, r2, r3
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b082      	sub	sp, #8
 8004faa:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8004fac:	20e8      	movs	r0, #232	; 0xe8
 8004fae:	f001 fe47 	bl	8006c40 <mem_malloc>
 8004fb2:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d004      	beq.n	8004fc4 <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8004fba:	22e8      	movs	r2, #232	; 0xe8
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f00b ffa8 	bl	8010f14 <memset>
  }
  return ret;
 8004fc4:	687b      	ldr	r3, [r7, #4]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b082      	sub	sp, #8
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f001 fcc9 	bl	8006974 <mem_free>
  }
}
 8004fe2:	bf00      	nop
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b082      	sub	sp, #8
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8004ff2:	22b0      	movs	r2, #176	; 0xb0
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f00b ff8c 	bl	8010f14 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8004ffc:	bf00      	nop
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800500a:	20b0      	movs	r0, #176	; 0xb0
 800500c:	f001 fe18 	bl	8006c40 <mem_malloc>
 8005010:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <http_state_alloc+0x1a>
    http_state_init(ret);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7ff ffe6 	bl	8004fea <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800501e:	687b      	ldr	r3, [r7, #4]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d007      	beq.n	8005048 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff ff99 	bl	8004f74 <fs_close>
    hs->handle = NULL;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504c:	2b00      	cmp	r3, #0
 800504e:	d007      	beq.n	8005060 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff ffba 	bl	8004fce <http_ssi_state_free>
    hs->ssi = NULL;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d007      	beq.n	8005078 <http_state_eof+0x50>
    pbuf_free(hs->req);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	4618      	mov	r0, r3
 800506e:	f002 fe5d 	bl	8007d2c <pbuf_free>
    hs->req = NULL;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8005078:	bf00      	nop
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d005      	beq.n	800509a <http_state_free+0x1a>
    http_state_eof(hs);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7ff ffca 	bl	8005028 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f001 fc6d 	bl	8006974 <mem_free>
  }
}
 800509a:	bf00      	nop
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d106      	bne.n	80050c6 <http_write+0x22>
 80050b8:	4b2c      	ldr	r3, [pc, #176]	; (800516c <http_write+0xc8>)
 80050ba:	f240 2219 	movw	r2, #537	; 0x219
 80050be:	492c      	ldr	r1, [pc, #176]	; (8005170 <http_write+0xcc>)
 80050c0:	482c      	ldr	r0, [pc, #176]	; (8005174 <http_write+0xd0>)
 80050c2:	f00b ff2f 	bl	8010f24 <iprintf>
  len = *length;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 80050cc:	8afb      	ldrh	r3, [r7, #22]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <http_write+0x32>
    return ERR_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	e045      	b.n	8005162 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80050dc:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 80050de:	8aba      	ldrh	r2, [r7, #20]
 80050e0:	8afb      	ldrh	r3, [r7, #22]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d201      	bcs.n	80050ea <http_write+0x46>
    len = max_len;
 80050e6:	8abb      	ldrh	r3, [r7, #20]
 80050e8:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 80050f2:	8afa      	ldrh	r2, [r7, #22]
 80050f4:	8abb      	ldrh	r3, [r7, #20]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d901      	bls.n	80050fe <http_write+0x5a>
    len = max_len;
 80050fa:	8abb      	ldrh	r3, [r7, #20]
 80050fc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 80050fe:	78fb      	ldrb	r3, [r7, #3]
 8005100:	8afa      	ldrh	r2, [r7, #22]
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f007 fb99 	bl	800c83c <tcp_write>
 800510a:	4603      	mov	r3, r0
 800510c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800510e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005116:	d10f      	bne.n	8005138 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800511e:	2b00      	cmp	r3, #0
 8005120:	d004      	beq.n	800512c <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8005128:	2b08      	cmp	r3, #8
 800512a:	d902      	bls.n	8005132 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800512c:	2301      	movs	r3, #1
 800512e:	82fb      	strh	r3, [r7, #22]
 8005130:	e002      	b.n	8005138 <http_write+0x94>
      } else {
        len /= 2;
 8005132:	8afb      	ldrh	r3, [r7, #22]
 8005134:	085b      	lsrs	r3, r3, #1
 8005136:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8005138:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800513c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005140:	d102      	bne.n	8005148 <http_write+0xa4>
 8005142:	8afb      	ldrh	r3, [r7, #22]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d8da      	bhi.n	80050fe <http_write+0x5a>

  if (err == ERR_OK) {
 8005148:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d103      	bne.n	8005158 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	8afa      	ldrh	r2, [r7, #22]
 8005154:	801a      	strh	r2, [r3, #0]
 8005156:	e002      	b.n	800515e <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800515e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	08012138 	.word	0x08012138
 8005170:	08012170 	.word	0x08012170
 8005174:	08012180 	.word	0x08012180

08005178 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	4613      	mov	r3, r2
 8005184:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8005186:	2100      	movs	r1, #0
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f004 fc15 	bl	80099b8 <tcp_arg>
  altcp_recv(pcb, NULL);
 800518e:	2100      	movs	r1, #0
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f004 fc23 	bl	80099dc <tcp_recv>
  altcp_err(pcb, NULL);
 8005196:	2100      	movs	r1, #0
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f004 fc63 	bl	8009a64 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800519e:	2200      	movs	r2, #0
 80051a0:	2100      	movs	r1, #0
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f004 fc98 	bl	8009ad8 <tcp_poll>
  altcp_sent(pcb, NULL);
 80051a8:	2100      	movs	r1, #0
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f004 fc38 	bl	8009a20 <tcp_sent>
  if (hs != NULL) {
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 80051b6:	68b8      	ldr	r0, [r7, #8]
 80051b8:	f7ff ff62 	bl	8005080 <http_state_free>
  }

  if (abort_conn) {
 80051bc:	79fb      	ldrb	r3, [r7, #7]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d004      	beq.n	80051cc <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f003 fb3a 	bl	800883c <tcp_abort>
    return ERR_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	e00f      	b.n	80051ec <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f003 fa4b 	bl	8008668 <tcp_close>
 80051d2:	4603      	mov	r3, r0
 80051d4:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 80051d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d004      	beq.n	80051e8 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80051de:	2204      	movs	r2, #4
 80051e0:	4904      	ldr	r1, [pc, #16]	; (80051f4 <http_close_or_abort_conn+0x7c>)
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f004 fc78 	bl	8009ad8 <tcp_poll>
  }
  return err;
 80051e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	0800626f 	.word	0x0800626f

080051f8 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8005202:	2200      	movs	r2, #0
 8005204:	6839      	ldr	r1, [r7, #0]
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff ffb6 	bl	8005178 <http_close_or_abort_conn>
 800520c:	4603      	mov	r3, r0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b082      	sub	sp, #8
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8005220:	6839      	ldr	r1, [r7, #0]
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff ffe8 	bl	80051f8 <http_close_conn>
  }
}
 8005228:	bf00      	nop
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <extract_uri_parameters+0x18>
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <extract_uri_parameters+0x1c>
    return (0);
 8005248:	2300      	movs	r3, #0
 800524a:	e04b      	b.n	80052e4 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8005250:	2300      	movs	r3, #0
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	e03f      	b.n	80052d6 <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	320c      	adds	r2, #12
 800525c:	6979      	ldr	r1, [r7, #20]
 800525e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8005266:	2126      	movs	r1, #38	; 0x26
 8005268:	6978      	ldr	r0, [r7, #20]
 800526a:	f00b feb1 	bl	8010fd0 <strchr>
 800526e:	6178      	str	r0, [r7, #20]
    if (pair) {
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d006      	beq.n	8005284 <extract_uri_parameters+0x54>
      *pair = '\0';
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2200      	movs	r2, #0
 800527a:	701a      	strb	r2, [r3, #0]
      pair++;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	3301      	adds	r3, #1
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	e00c      	b.n	800529e <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8005284:	2120      	movs	r1, #32
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f00b fea2 	bl	8010fd0 <strchr>
 800528c:	6178      	str	r0, [r7, #20]
      if (pair) {
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <extract_uri_parameters+0x6a>
        *pair = '\0';
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	2200      	movs	r2, #0
 8005298:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 800529a:	2300      	movs	r3, #0
 800529c:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800529e:	213d      	movs	r1, #61	; 0x3d
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f00b fe95 	bl	8010fd0 <strchr>
 80052a6:	60f8      	str	r0, [r7, #12]
    if (equals) {
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <extract_uri_parameters+0x94>
      *equals = '\0';
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	1c59      	adds	r1, r3, #1
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	321c      	adds	r2, #28
 80052be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80052c2:	e005      	b.n	80052d0 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	321c      	adds	r2, #28
 80052ca:	2100      	movs	r1, #0
 80052cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	3301      	adds	r3, #1
 80052d4:	613b      	str	r3, [r7, #16]
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2b0f      	cmp	r3, #15
 80052da:	dc02      	bgt.n	80052e2 <extract_uri_parameters+0xb2>
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1b9      	bne.n	8005256 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 80052e2:	693b      	ldr	r3, [r7, #16]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <get_tag_insert+0x1c>
 80052fa:	4b52      	ldr	r3, [pc, #328]	; (8005444 <get_tag_insert+0x158>)
 80052fc:	f44f 7241 	mov.w	r2, #772	; 0x304
 8005300:	4951      	ldr	r1, [pc, #324]	; (8005448 <get_tag_insert+0x15c>)
 8005302:	4852      	ldr	r0, [pc, #328]	; (800544c <get_tag_insert+0x160>)
 8005304:	f00b fe0e 	bl	8010f24 <iprintf>
  ssi = hs->ssi;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d106      	bne.n	8005322 <get_tag_insert+0x36>
 8005314:	4b4b      	ldr	r3, [pc, #300]	; (8005444 <get_tag_insert+0x158>)
 8005316:	f240 3206 	movw	r2, #774	; 0x306
 800531a:	494d      	ldr	r1, [pc, #308]	; (8005450 <get_tag_insert+0x164>)
 800531c:	484b      	ldr	r0, [pc, #300]	; (800544c <get_tag_insert+0x160>)
 800531e:	f00b fe01 	bl	8010f24 <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 8005322:	4b4c      	ldr	r3, [pc, #304]	; (8005454 <get_tag_insert+0x168>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d02e      	beq.n	8005388 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 800532a:	4b4b      	ldr	r3, [pc, #300]	; (8005458 <get_tag_insert+0x16c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d02a      	beq.n	8005388 <get_tag_insert+0x9c>
 8005332:	4b4a      	ldr	r3, [pc, #296]	; (800545c <get_tag_insert+0x170>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d026      	beq.n	8005388 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800533a:	2300      	movs	r3, #0
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	e01e      	b.n	800537e <get_tag_insert+0x92>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	f103 0012 	add.w	r0, r3, #18
 8005346:	4b44      	ldr	r3, [pc, #272]	; (8005458 <get_tag_insert+0x16c>)
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4619      	mov	r1, r3
 8005354:	f7fa ff4c 	bl	80001f0 <strcmp>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10c      	bne.n	8005378 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 800535e:	4b3d      	ldr	r3, [pc, #244]	; (8005454 <get_tag_insert+0x168>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	f102 0123 	add.w	r1, r2, #35	; 0x23
 8005368:	22c0      	movs	r2, #192	; 0xc0
 800536a:	6978      	ldr	r0, [r7, #20]
 800536c:	4798      	blx	r3
 800536e:	4603      	mov	r3, r0
 8005370:	461a      	mov	r2, r3
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	81da      	strh	r2, [r3, #14]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8005376:	e061      	b.n	800543c <get_tag_insert+0x150>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	3301      	adds	r3, #1
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	4b37      	ldr	r3, [pc, #220]	; (800545c <get_tag_insert+0x170>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	429a      	cmp	r2, r3
 8005386:	dbdb      	blt.n	8005340 <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	3312      	adds	r3, #18
 800538c:	4618      	mov	r0, r3
 800538e:	f7fa ff39 	bl	8000204 <strlen>
 8005392:	4603      	mov	r3, r0
 8005394:	2ba6      	cmp	r3, #166	; 0xa6
 8005396:	d818      	bhi.n	80053ca <get_tag_insert+0xde>
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	3312      	adds	r3, #18
 800539c:	4618      	mov	r0, r3
 800539e:	f7fa ff31 	bl	8000204 <strlen>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b11      	cmp	r3, #17
 80053a6:	d810      	bhi.n	80053ca <get_tag_insert+0xde>
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	3312      	adds	r3, #18
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fa ff29 	bl	8000204 <strlen>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2ba6      	cmp	r3, #166	; 0xa6
 80053b6:	d806      	bhi.n	80053c6 <get_tag_insert+0xda>
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	3312      	adds	r3, #18
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fa ff21 	bl	8000204 <strlen>
 80053c2:	4603      	mov	r3, r0
 80053c4:	e002      	b.n	80053cc <get_tag_insert+0xe0>
 80053c6:	23a7      	movs	r3, #167	; 0xa7
 80053c8:	e000      	b.n	80053cc <get_tag_insert+0xe0>
 80053ca:	2311      	movs	r3, #17
 80053cc:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	3323      	adds	r3, #35	; 0x23
 80053d2:	2212      	movs	r2, #18
 80053d4:	4922      	ldr	r1, [pc, #136]	; (8005460 <get_tag_insert+0x174>)
 80053d6:	4618      	mov	r0, r3
 80053d8:	f00b fd8e 	bl	8010ef8 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	f103 0035 	add.w	r0, r3, #53	; 0x35
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	3312      	adds	r3, #18
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	4619      	mov	r1, r3
 80053ea:	f00b fd85 	bl	8010ef8 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3312      	adds	r3, #18
 80053f2:	3320      	adds	r3, #32
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4413      	add	r3, r2
 80053f8:	3303      	adds	r3, #3
 80053fa:	2207      	movs	r2, #7
 80053fc:	4919      	ldr	r1, [pc, #100]	; (8005464 <get_tag_insert+0x178>)
 80053fe:	4618      	mov	r0, r3
 8005400:	f00b fd7a 	bl	8010ef8 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3319      	adds	r3, #25
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	4413      	add	r3, r2
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  len = strlen(ssi->tag_insert);
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	3323      	adds	r3, #35	; 0x23
 8005416:	4618      	mov	r0, r3
 8005418:	f7fa fef4 	bl	8000204 <strlen>
 800541c:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005424:	d306      	bcc.n	8005434 <get_tag_insert+0x148>
 8005426:	4b07      	ldr	r3, [pc, #28]	; (8005444 <get_tag_insert+0x158>)
 8005428:	f240 323f 	movw	r2, #831	; 0x33f
 800542c:	490e      	ldr	r1, [pc, #56]	; (8005468 <get_tag_insert+0x17c>)
 800542e:	4807      	ldr	r0, [pc, #28]	; (800544c <get_tag_insert+0x160>)
 8005430:	f00b fd78 	bl	8010f24 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	b29a      	uxth	r2, r3
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	81da      	strh	r2, [r3, #14]
}
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	08012138 	.word	0x08012138
 8005448:	080121a8 	.word	0x080121a8
 800544c:	08012180 	.word	0x08012180
 8005450:	080121b4 	.word	0x080121b4
 8005454:	2000519c 	.word	0x2000519c
 8005458:	200051a4 	.word	0x200051a4
 800545c:	200051a0 	.word	0x200051a0
 8005460:	080121c0 	.word	0x080121c0
 8005464:	080121d4 	.word	0x080121d4
 8005468:	080121dc 	.word	0x080121dc

0800546c <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d105      	bne.n	800548a <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800547e:	6839      	ldr	r1, [r7, #0]
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7ff fec8 	bl	8005216 <http_eof>
    return 0;
 8005486:	2300      	movs	r3, #0
 8005488:	e016      	b.n	80054b8 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff fd7a 	bl	8004f88 <fs_bytes_left>
 8005494:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	dc05      	bgt.n	80054a8 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800549c:	6839      	ldr	r1, [r7, #0]
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7ff feb9 	bl	8005216 <http_eof>
    return 0;
 80054a4:	2300      	movs	r3, #0
 80054a6:	e007      	b.n	80054b8 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80054a8:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <http_check_eof+0x54>)
 80054aa:	f240 429d 	movw	r2, #1181	; 0x49d
 80054ae:	4905      	ldr	r1, [pc, #20]	; (80054c4 <http_check_eof+0x58>)
 80054b0:	4805      	ldr	r0, [pc, #20]	; (80054c8 <http_check_eof+0x5c>)
 80054b2:	f00b fd37 	bl	8010f24 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 80054b6:	2301      	movs	r3, #1
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	08012138 	.word	0x08012138
 80054c4:	080121ec 	.word	0x080121ec
 80054c8:	08012180 	.word	0x08012180

080054cc <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 80054d6:	2300      	movs	r3, #0
 80054d8:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d803      	bhi.n	80054ee <http_send_data_nonssi+0x22>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	e001      	b.n	80054f2 <http_send_data_nonssi+0x26>
 80054ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054f2:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	6999      	ldr	r1, [r3, #24]
 80054f8:	f107 020c 	add.w	r2, r7, #12
 80054fc:	2300      	movs	r3, #0
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff fdd0 	bl	80050a4 <http_write>
 8005504:	4603      	mov	r3, r0
 8005506:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8005508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10d      	bne.n	800552c <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8005510:	2301      	movs	r3, #1
 8005512:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	89ba      	ldrh	r2, [r7, #12]
 800551a:	441a      	add	r2, r3
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	89ba      	ldrh	r2, [r7, #12]
 8005526:	1a9a      	subs	r2, r3, r2
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800552c:	7bfb      	ldrb	r3, [r7, #15]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 8005546:	2300      	movs	r3, #0
 8005548:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554e:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <http_send_data_ssi+0x2c>
 8005556:	4b87      	ldr	r3, [pc, #540]	; (8005774 <http_send_data_ssi+0x23c>)
 8005558:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800555c:	4986      	ldr	r1, [pc, #536]	; (8005778 <http_send_data_ssi+0x240>)
 800555e:	4887      	ldr	r0, [pc, #540]	; (800577c <http_send_data_ssi+0x244>)
 8005560:	f00b fce0 	bl	8010f24 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800556a:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	429a      	cmp	r2, r3
 8005576:	f240 826f 	bls.w	8005a58 <http_send_data_ssi+0x520>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005588:	4293      	cmp	r3, r2
 800558a:	dc06      	bgt.n	800559a <http_send_data_ssi+0x62>
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	b29b      	uxth	r3, r3
 8005598:	e001      	b.n	800559e <http_send_data_ssi+0x66>
 800559a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800559e:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	6999      	ldr	r1, [r3, #24]
 80055a4:	f107 020e 	add.w	r2, r7, #14
 80055a8:	2300      	movs	r3, #0
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff fd7a 	bl	80050a4 <http_write>
 80055b0:	4603      	mov	r3, r0
 80055b2:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80055b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10d      	bne.n	80055d8 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 80055bc:	2301      	movs	r3, #1
 80055be:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	89fa      	ldrh	r2, [r7, #14]
 80055c6:	441a      	add	r2, r3
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	89fa      	ldrh	r2, [r7, #14]
 80055d2:	1a9a      	subs	r2, r3, r2
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f040 823a 	bne.w	8005a58 <http_send_data_ssi+0x520>
      return data_to_send;
 80055e4:	7dbb      	ldrb	r3, [r7, #22]
 80055e6:	e280      	b.n	8005aea <http_send_data_ssi+0x5b2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 80055e8:	89fb      	ldrh	r3, [r7, #14]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <http_send_data_ssi+0xba>
      return data_to_send;
 80055ee:	7dbb      	ldrb	r3, [r7, #22]
 80055f0:	e27b      	b.n	8005aea <http_send_data_ssi+0x5b2>
    }
    switch (ssi->tag_state) {
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 80055f8:	2b04      	cmp	r3, #4
 80055fa:	f200 822c 	bhi.w	8005a56 <http_send_data_ssi+0x51e>
 80055fe:	a201      	add	r2, pc, #4	; (adr r2, 8005604 <http_send_data_ssi+0xcc>)
 8005600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005604:	08005619 	.word	0x08005619
 8005608:	0800566b 	.word	0x0800566b
 800560c:	080056dd 	.word	0x080056dd
 8005610:	08005825 	.word	0x08005825
 8005614:	0800596d 	.word	0x0800596d
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8005618:	2300      	movs	r3, #0
 800561a:	757b      	strb	r3, [r7, #21]
 800561c:	e017      	b.n	800564e <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	781a      	ldrb	r2, [r3, #0]
 8005624:	7d7b      	ldrb	r3, [r7, #21]
 8005626:	4956      	ldr	r1, [pc, #344]	; (8005780 <http_send_data_ssi+0x248>)
 8005628:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d10a      	bne.n	8005648 <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	7d7a      	ldrb	r2, [r7, #21]
 8005636:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
            ssi->tag_index = 1;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	2201      	movs	r2, #1
 8005644:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 8005646:	e005      	b.n	8005654 <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8005648:	7d7b      	ldrb	r3, [r7, #21]
 800564a:	3301      	adds	r3, #1
 800564c:	757b      	strb	r3, [r7, #21]
 800564e:	7d7b      	ldrb	r3, [r7, #21]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d9e4      	bls.n	800561e <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	1e5a      	subs	r2, r3, #1
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	601a      	str	r2, [r3, #0]
        break;
 8005668:	e1f6      	b.n	8005a58 <http_send_data_ssi+0x520>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	7c1b      	ldrb	r3, [r3, #16]
 800566e:	461a      	mov	r2, r3
 8005670:	4b43      	ldr	r3, [pc, #268]	; (8005780 <http_send_data_ssi+0x248>)
 8005672:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	8992      	ldrh	r2, [r2, #12]
 800567a:	4413      	add	r3, r2
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d107      	bne.n	8005692 <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2200      	movs	r2, #0
 8005686:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8005690:	e1e2      	b.n	8005a58 <http_send_data_ssi+0x520>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	781a      	ldrb	r2, [r3, #0]
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	7c1b      	ldrb	r3, [r3, #16]
 800569c:	4619      	mov	r1, r3
 800569e:	4b38      	ldr	r3, [pc, #224]	; (8005780 <http_send_data_ssi+0x248>)
 80056a0:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 80056a4:	6939      	ldr	r1, [r7, #16]
 80056a6:	8989      	ldrh	r1, [r1, #12]
 80056a8:	440b      	add	r3, r1
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d106      	bne.n	80056be <http_send_data_ssi+0x186>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	899b      	ldrh	r3, [r3, #12]
 80056b4:	3301      	adds	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	819a      	strh	r2, [r3, #12]
 80056bc:	e003      	b.n	80056c6 <http_send_data_ssi+0x18e>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	1e5a      	subs	r2, r3, #1
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	1c5a      	adds	r2, r3, #1
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	601a      	str	r2, [r3, #0]
        }
        break;
 80056da:	e1bd      	b.n	8005a58 <http_send_data_ssi+0x520>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	899b      	ldrh	r3, [r3, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d11e      	bne.n	8005722 <http_send_data_ssi+0x1ea>
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	d00e      	beq.n	800570c <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80056f4:	2b09      	cmp	r3, #9
 80056f6:	d009      	beq.n	800570c <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b0a      	cmp	r3, #10
 8005700:	d004      	beq.n	800570c <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005708:	2b0d      	cmp	r3, #13
 800570a:	d10a      	bne.n	8005722 <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	1e5a      	subs	r2, r3, #1
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	601a      	str	r2, [r3, #0]
          break;
 8005720:	e19a      	b.n	8005a58 <http_send_data_ssi+0x520>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	781a      	ldrb	r2, [r3, #0]
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	7c1b      	ldrb	r3, [r3, #16]
 800572c:	4914      	ldr	r1, [pc, #80]	; (8005780 <http_send_data_ssi+0x248>)
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	440b      	add	r3, r1
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d013      	beq.n	8005762 <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8005740:	2b20      	cmp	r3, #32
 8005742:	d00e      	beq.n	8005762 <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	2b09      	cmp	r3, #9
 800574c:	d009      	beq.n	8005762 <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8005754:	2b0a      	cmp	r3, #10
 8005756:	d004      	beq.n	8005762 <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b0d      	cmp	r3, #13
 8005760:	d13f      	bne.n	80057e2 <http_send_data_ssi+0x2aa>

          if (ssi->tag_index == 0) {
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	899b      	ldrh	r3, [r3, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10c      	bne.n	8005784 <http_send_data_ssi+0x24c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
          if (ssi->tag_index == 0) {
 8005772:	e04c      	b.n	800580e <http_send_data_ssi+0x2d6>
 8005774:	08012138 	.word	0x08012138
 8005778:	080121b4 	.word	0x080121b4
 800577c:	08012180 	.word	0x08012180
 8005780:	08015244 	.word	0x08015244
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	2203      	movs	r2, #3
 8005788:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	899b      	ldrh	r3, [r3, #12]
 8005790:	2bff      	cmp	r3, #255	; 0xff
 8005792:	d906      	bls.n	80057a2 <http_send_data_ssi+0x26a>
 8005794:	4b93      	ldr	r3, [pc, #588]	; (80059e4 <http_send_data_ssi+0x4ac>)
 8005796:	f240 523a 	movw	r2, #1338	; 0x53a
 800579a:	4993      	ldr	r1, [pc, #588]	; (80059e8 <http_send_data_ssi+0x4b0>)
 800579c:	4893      	ldr	r0, [pc, #588]	; (80059ec <http_send_data_ssi+0x4b4>)
 800579e:	f00b fbc1 	bl	8010f24 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	899b      	ldrh	r3, [r3, #12]
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	899b      	ldrh	r3, [r3, #12]
 80057b0:	461a      	mov	r2, r3
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	4413      	add	r3, r2
 80057b6:	2200      	movs	r2, #0
 80057b8:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	781a      	ldrb	r2, [r3, #0]
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	7c1b      	ldrb	r3, [r3, #16]
 80057c4:	498a      	ldr	r1, [pc, #552]	; (80059f0 <http_send_data_ssi+0x4b8>)
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	440b      	add	r3, r1
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d103      	bne.n	80057da <http_send_data_ssi+0x2a2>
              ssi->tag_index = 1;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	2201      	movs	r2, #1
 80057d6:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 80057d8:	e019      	b.n	800580e <http_send_data_ssi+0x2d6>
            } else {
              ssi->tag_index = 0;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	2200      	movs	r2, #0
 80057de:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 80057e0:	e015      	b.n	800580e <http_send_data_ssi+0x2d6>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	899b      	ldrh	r3, [r3, #12]
 80057e6:	2b0f      	cmp	r3, #15
 80057e8:	d80d      	bhi.n	8005806 <http_send_data_ssi+0x2ce>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	899b      	ldrh	r3, [r3, #12]
 80057f2:	1c59      	adds	r1, r3, #1
 80057f4:	b288      	uxth	r0, r1
 80057f6:	6939      	ldr	r1, [r7, #16]
 80057f8:	8188      	strh	r0, [r1, #12]
 80057fa:	4619      	mov	r1, r3
 80057fc:	7812      	ldrb	r2, [r2, #0]
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	440b      	add	r3, r1
 8005802:	749a      	strb	r2, [r3, #18]
 8005804:	e003      	b.n	800580e <http_send_data_ssi+0x2d6>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	1e5a      	subs	r2, r3, #1
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	601a      	str	r2, [r3, #0]

        break;
 8005822:	e119      	b.n	8005a58 <http_send_data_ssi+0x520>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	899b      	ldrh	r3, [r3, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d11e      	bne.n	800586a <http_send_data_ssi+0x332>
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b20      	cmp	r3, #32
 8005834:	d00e      	beq.n	8005854 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800583c:	2b09      	cmp	r3, #9
 800583e:	d009      	beq.n	8005854 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b0a      	cmp	r3, #10
 8005848:	d004      	beq.n	8005854 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\r'))) {
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005850:	2b0d      	cmp	r3, #13
 8005852:	d10a      	bne.n	800586a <http_send_data_ssi+0x332>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	1e5a      	subs	r2, r3, #1
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	601a      	str	r2, [r3, #0]
          break;
 8005868:	e0f6      	b.n	8005a58 <http_send_data_ssi+0x520>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	781a      	ldrb	r2, [r3, #0]
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	7c1b      	ldrb	r3, [r3, #16]
 8005874:	495e      	ldr	r1, [pc, #376]	; (80059f0 <http_send_data_ssi+0x4b8>)
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	440b      	add	r3, r1
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	6939      	ldr	r1, [r7, #16]
 800587e:	8989      	ldrh	r1, [r1, #12]
 8005880:	440b      	add	r3, r1
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	429a      	cmp	r2, r3
 8005886:	d162      	bne.n	800594e <http_send_data_ssi+0x416>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	1e5a      	subs	r2, r3, #1
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	899b      	ldrh	r3, [r3, #12]
 80058a0:	3301      	adds	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	7c1b      	ldrb	r3, [r3, #16]
 80058ac:	4a50      	ldr	r2, [pc, #320]	; (80059f0 <http_send_data_ssi+0x4b8>)
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	4413      	add	r3, r2
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	8992      	ldrh	r2, [r2, #12]
 80058b8:	4413      	add	r3, r2
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f040 80cb 	bne.w	8005a58 <http_send_data_ssi+0x520>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 80058c2:	6838      	ldr	r0, [r7, #0]
 80058c4:	f7ff fd12 	bl	80052ec <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	2200      	movs	r2, #0
 80058cc:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	2204      	movs	r2, #4
 80058d2:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
            ssi->tag_end = ssi->parsed;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	f240 80b6 	bls.w	8005a58 <http_send_data_ssi+0x520>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80058fa:	4293      	cmp	r3, r2
 80058fc:	dc06      	bgt.n	800590c <http_send_data_ssi+0x3d4>
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	b29b      	uxth	r3, r3
 800590a:	e001      	b.n	8005910 <http_send_data_ssi+0x3d8>
 800590c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005910:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	6999      	ldr	r1, [r3, #24]
 8005916:	f107 020e 	add.w	r2, r7, #14
 800591a:	2300      	movs	r3, #0
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7ff fbc1 	bl	80050a4 <http_write>
 8005922:	4603      	mov	r3, r0
 8005924:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8005926:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800592a:	2b00      	cmp	r3, #0
 800592c:	f040 8094 	bne.w	8005a58 <http_send_data_ssi+0x520>
                data_to_send = 1;
 8005930:	2301      	movs	r3, #1
 8005932:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	89fa      	ldrh	r2, [r7, #14]
 800593a:	441a      	add	r2, r3
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	89fa      	ldrh	r2, [r7, #14]
 8005946:	1a9a      	subs	r2, r3, r2
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	625a      	str	r2, [r3, #36]	; 0x24
 800594c:	e084      	b.n	8005a58 <http_send_data_ssi+0x520>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	1e5a      	subs	r2, r3, #1
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        }
        break;
 800596a:	e075      	b.n	8005a58 <http_send_data_ssi+0x520>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	429a      	cmp	r2, r3
 8005976:	d93d      	bls.n	80059f4 <http_send_data_ssi+0x4bc>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005986:	4293      	cmp	r3, r2
 8005988:	dc06      	bgt.n	8005998 <http_send_data_ssi+0x460>
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	b29b      	uxth	r3, r3
 8005996:	e001      	b.n	800599c <http_send_data_ssi+0x464>
 8005998:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800599c:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800599e:	89fb      	ldrh	r3, [r7, #14]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <http_send_data_ssi+0x482>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	6999      	ldr	r1, [r3, #24]
 80059a8:	f107 020e 	add.w	r2, r7, #14
 80059ac:	2300      	movs	r3, #0
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff fb78 	bl	80050a4 <http_write>
 80059b4:	4603      	mov	r3, r0
 80059b6:	75fb      	strb	r3, [r7, #23]
 80059b8:	e001      	b.n	80059be <http_send_data_ssi+0x486>
          } else {
            err = ERR_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 80059be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d148      	bne.n	8005a58 <http_send_data_ssi+0x520>
            data_to_send = 1;
 80059c6:	2301      	movs	r3, #1
 80059c8:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	89fa      	ldrh	r2, [r7, #14]
 80059d0:	441a      	add	r2, r3
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	89fa      	ldrh	r2, [r7, #14]
 80059dc:	1a9a      	subs	r2, r3, r2
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	625a      	str	r2, [r3, #36]	; 0x24
 80059e2:	e039      	b.n	8005a58 <http_send_data_ssi+0x520>
 80059e4:	08012138 	.word	0x08012138
 80059e8:	08012224 	.word	0x08012224
 80059ec:	08012180 	.word	0x08012180
 80059f0:	08015244 	.word	0x08015244
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	899a      	ldrh	r2, [r3, #12]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	89db      	ldrh	r3, [r3, #14]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d222      	bcs.n	8005a46 <http_send_data_ssi+0x50e>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	89da      	ldrh	r2, [r3, #14]
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	899b      	ldrh	r3, [r3, #12]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	899b      	ldrh	r3, [r3, #12]
 8005a12:	3320      	adds	r3, #32
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	4413      	add	r3, r2
 8005a18:	1cd9      	adds	r1, r3, #3
 8005a1a:	f107 020e 	add.w	r2, r7, #14
 8005a1e:	2301      	movs	r3, #1
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7ff fb3f 	bl	80050a4 <http_write>
 8005a26:	4603      	mov	r3, r0
 8005a28:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8005a2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d112      	bne.n	8005a58 <http_send_data_ssi+0x520>
              data_to_send = 1;
 8005a32:	2301      	movs	r3, #1
 8005a34:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	899a      	ldrh	r2, [r3, #12]
 8005a3a:	89fb      	ldrh	r3, [r7, #14]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	819a      	strh	r2, [r3, #12]
 8005a44:	e008      	b.n	8005a58 <http_send_data_ssi+0x520>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8005a54:	e000      	b.n	8005a58 <http_send_data_ssi+0x520>
        default:
          break;
 8005a56:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d003      	beq.n	8005a6a <http_send_data_ssi+0x532>
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d004      	beq.n	8005a74 <http_send_data_ssi+0x53c>
 8005a6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f43f adba 	beq.w	80055e8 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d034      	beq.n	8005ae8 <http_send_data_ssi+0x5b0>
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d92e      	bls.n	8005ae8 <http_send_data_ssi+0x5b0>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	dc06      	bgt.n	8005aaa <http_send_data_ssi+0x572>
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	e001      	b.n	8005aae <http_send_data_ssi+0x576>
 8005aaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005aae:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	6999      	ldr	r1, [r3, #24]
 8005ab4:	f107 020e 	add.w	r2, r7, #14
 8005ab8:	2300      	movs	r3, #0
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7ff faf2 	bl	80050a4 <http_write>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8005ac4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10d      	bne.n	8005ae8 <http_send_data_ssi+0x5b0>
      data_to_send = 1;
 8005acc:	2301      	movs	r3, #1
 8005ace:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	89fa      	ldrh	r2, [r7, #14]
 8005ad6:	441a      	add	r2, r3
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	89fa      	ldrh	r2, [r7, #14]
 8005ae2:	1a9a      	subs	r2, r3, r2
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 8005ae8:	7dbb      	ldrb	r3, [r7, #22]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop

08005af4 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8005afe:	2300      	movs	r3, #0
 8005b00:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <http_send+0x18>
    return 0;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	e030      	b.n	8005b6e <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d108      	bne.n	8005b26 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8005b14:	6839      	ldr	r1, [r7, #0]
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7ff fca8 	bl	800546c <http_check_eof>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <http_send+0x32>
      return 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	e023      	b.n	8005b6e <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d006      	beq.n	8005b3c <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 8005b2e:	6839      	ldr	r1, [r7, #0]
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7ff fd01 	bl	8005538 <http_send_data_ssi>
 8005b36:	4603      	mov	r3, r0
 8005b38:	73fb      	strb	r3, [r7, #15]
 8005b3a:	e005      	b.n	8005b48 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7ff fcc4 	bl	80054cc <http_send_data_nonssi>
 8005b44:	4603      	mov	r3, r0
 8005b46:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10d      	bne.n	8005b6c <http_send+0x78>
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7ff fa17 	bl	8004f88 <fs_bytes_left>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	dc05      	bgt.n	8005b6c <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8005b60:	6839      	ldr	r1, [r7, #0]
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff fb57 	bl	8005216 <http_eof>
    return 0;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	e000      	b.n	8005b6e <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	4a1c      	ldr	r2, [pc, #112]	; (8005bf8 <http_get_404_file+0x80>)
 8005b86:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4619      	mov	r1, r3
 8005b90:	4610      	mov	r0, r2
 8005b92:	f7ff f9b1 	bl	8004ef8 <fs_open>
 8005b96:	4603      	mov	r3, r0
 8005b98:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8005b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d024      	beq.n	8005bec <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	4a15      	ldr	r2, [pc, #84]	; (8005bfc <http_get_404_file+0x84>)
 8005ba6:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	f7ff f9a1 	bl	8004ef8 <fs_open>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8005bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d014      	beq.n	8005bec <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	4a0e      	ldr	r2, [pc, #56]	; (8005c00 <http_get_404_file+0x88>)
 8005bc6:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	f7ff f991 	bl	8004ef8 <fs_open>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8005bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d004      	beq.n	8005bec <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2200      	movs	r2, #0
 8005be6:	601a      	str	r2, [r3, #0]
        return NULL;
 8005be8:	2300      	movs	r3, #0
 8005bea:	e000      	b.n	8005bee <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8005bec:	687b      	ldr	r3, [r7, #4]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	0801223c 	.word	0x0801223c
 8005bfc:	08012248 	.word	0x08012248
 8005c00:	08012254 	.word	0x08012254

08005c04 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08e      	sub	sp, #56	; 0x38
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d106      	bne.n	8005c28 <http_parse_request+0x24>
 8005c1a:	4b65      	ldr	r3, [pc, #404]	; (8005db0 <http_parse_request+0x1ac>)
 8005c1c:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8005c20:	4964      	ldr	r1, [pc, #400]	; (8005db4 <http_parse_request+0x1b0>)
 8005c22:	4865      	ldr	r0, [pc, #404]	; (8005db8 <http_parse_request+0x1b4>)
 8005c24:	f00b f97e 	bl	8010f24 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d106      	bne.n	8005c3c <http_parse_request+0x38>
 8005c2e:	4b60      	ldr	r3, [pc, #384]	; (8005db0 <http_parse_request+0x1ac>)
 8005c30:	f240 72af 	movw	r2, #1967	; 0x7af
 8005c34:	4961      	ldr	r1, [pc, #388]	; (8005dbc <http_parse_request+0x1b8>)
 8005c36:	4860      	ldr	r0, [pc, #384]	; (8005db8 <http_parse_request+0x1b4>)
 8005c38:	f00b f974 	bl	8010f24 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d103      	bne.n	8005c4c <http_parse_request+0x48>
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d002      	beq.n	8005c52 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8005c4c:	f06f 0307 	mvn.w	r3, #7
 8005c50:	e0a9      	b.n	8005da6 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d103      	bne.n	8005c62 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5e:	621a      	str	r2, [r3, #32]
 8005c60:	e005      	b.n	8005c6e <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f002 f921 	bl	8007eb0 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8005c6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c70:	f002 f8fc 	bl	8007e6c <pbuf_ref>

  if (hs->req->next != NULL) {
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d012      	beq.n	8005ca4 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	891b      	ldrh	r3, [r3, #8]
 8005c84:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	bf28      	it	cs
 8005c8c:	4613      	movcs	r3, r2
 8005c8e:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	6a18      	ldr	r0, [r3, #32]
 8005c94:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8005c96:	2300      	movs	r3, #0
 8005c98:	4949      	ldr	r1, [pc, #292]	; (8005dc0 <http_parse_request+0x1bc>)
 8005c9a:	f002 fa31 	bl	8008100 <pbuf_copy_partial>
    data = httpd_req_buf;
 8005c9e:	4b48      	ldr	r3, [pc, #288]	; (8005dc0 <http_parse_request+0x1bc>)
 8005ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ca2:	e005      	b.n	8005cb0 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	895b      	ldrh	r3, [r3, #10]
 8005cae:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8005cb0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005cb2:	2b06      	cmp	r3, #6
 8005cb4:	d962      	bls.n	8005d7c <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8005cb6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005cb8:	461a      	mov	r2, r3
 8005cba:	4942      	ldr	r1, [pc, #264]	; (8005dc4 <http_parse_request+0x1c0>)
 8005cbc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005cbe:	f000 fc9b 	bl	80065f8 <lwip_strnstr>
 8005cc2:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d058      	beq.n	8005d7c <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8005cce:	2204      	movs	r2, #4
 8005cd0:	493d      	ldr	r1, [pc, #244]	; (8005dc8 <http_parse_request+0x1c4>)
 8005cd2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005cd4:	f00b f989 	bl	8010fea <strncmp>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d116      	bne.n	8005d0c <http_parse_request+0x108>
        sp1 = data + 3;
 8005cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce0:	3303      	adds	r3, #3
 8005ce2:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	8b7a      	ldrh	r2, [r7, #26]
 8005cfa:	4934      	ldr	r1, [pc, #208]	; (8005dcc <http_parse_request+0x1c8>)
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fc7b 	bl	80065f8 <lwip_strnstr>
 8005d02:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8005d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d111      	bne.n	8005d2e <http_parse_request+0x12a>
 8005d0a:	e006      	b.n	8005d1a <http_parse_request+0x116>
        data[4] = 0;
 8005d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0e:	3304      	adds	r3, #4
 8005d10:	2200      	movs	r2, #0
 8005d12:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8005d14:	f06f 030f 	mvn.w	r3, #15
 8005d18:	e045      	b.n	8005da6 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	8b7a      	ldrh	r2, [r7, #26]
 8005d20:	4928      	ldr	r1, [pc, #160]	; (8005dc4 <http_parse_request+0x1c0>)
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fc68 	bl	80065f8 <lwip_strnstr>
 8005d28:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	3301      	adds	r3, #1
 8005d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8005d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d01e      	beq.n	8005d7c <http_parse_request+0x178>
 8005d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d91a      	bls.n	8005d7c <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8005d46:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d48:	461a      	mov	r2, r3
 8005d4a:	4921      	ldr	r1, [pc, #132]	; (8005dd0 <http_parse_request+0x1cc>)
 8005d4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005d4e:	f000 fc53 	bl	80065f8 <lwip_strnstr>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d011      	beq.n	8005d7c <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	2200      	movs	r2, #0
 8005d62:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8005d64:	8b3b      	ldrh	r3, [r7, #24]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	4413      	add	r3, r2
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8005d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d70:	6979      	ldr	r1, [r7, #20]
 8005d72:	68b8      	ldr	r0, [r7, #8]
 8005d74:	f000 f880 	bl	8005e78 <http_find_file>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	e014      	b.n	8005da6 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f002 f85b 	bl	8007e3c <pbuf_clen>
 8005d86:	4603      	mov	r3, r0
 8005d88:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	891b      	ldrh	r3, [r3, #8]
 8005d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d94:	d205      	bcs.n	8005da2 <http_parse_request+0x19e>
 8005d96:	8a7b      	ldrh	r3, [r7, #18]
 8005d98:	2b05      	cmp	r3, #5
 8005d9a:	d802      	bhi.n	8005da2 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8005d9c:	f06f 0304 	mvn.w	r3, #4
 8005da0:	e001      	b.n	8005da6 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8005da2:	f06f 030f 	mvn.w	r3, #15
  }
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3738      	adds	r7, #56	; 0x38
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	08012138 	.word	0x08012138
 8005db4:	08012260 	.word	0x08012260
 8005db8:	08012180 	.word	0x08012180
 8005dbc:	080121a8 	.word	0x080121a8
 8005dc0:	20004d5c 	.word	0x20004d5c
 8005dc4:	0801226c 	.word	0x0801226c
 8005dc8:	08012270 	.word	0x08012270
 8005dcc:	08012278 	.word	0x08012278
 8005dd0:	0801227c 	.word	0x0801227c

08005dd4 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 8005dde:	2300      	movs	r3, #0
 8005de0:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d040      	beq.n	8005e6a <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 8005de8:	2300      	movs	r3, #0
 8005dea:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 8005dec:	213f      	movs	r1, #63	; 0x3f
 8005dee:	6838      	ldr	r0, [r7, #0]
 8005df0:	f00b f8ee 	bl	8010fd0 <strchr>
 8005df4:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	613b      	str	r3, [r7, #16]
    ext = uri;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8005e0a:	212e      	movs	r1, #46	; 0x2e
 8005e0c:	6938      	ldr	r0, [r7, #16]
 8005e0e:	f00b f8df 	bl	8010fd0 <strchr>
 8005e12:	6138      	str	r0, [r7, #16]
 8005e14:	e009      	b.n	8005e2a <http_uri_is_ssi+0x56>
      ext = sub;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	617b      	str	r3, [r7, #20]
      sub++;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8005e20:	212e      	movs	r1, #46	; 0x2e
 8005e22:	6938      	ldr	r0, [r7, #16]
 8005e24:	f00b f8d4 	bl	8010fd0 <strchr>
 8005e28:	6138      	str	r0, [r7, #16]
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1f2      	bne.n	8005e16 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8005e30:	2300      	movs	r3, #0
 8005e32:	61fb      	str	r3, [r7, #28]
 8005e34:	e010      	b.n	8005e58 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8005e36:	4a0f      	ldr	r2, [pc, #60]	; (8005e74 <http_uri_is_ssi+0xa0>)
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e3e:	4619      	mov	r1, r3
 8005e40:	6978      	ldr	r0, [r7, #20]
 8005e42:	f000 fc0f 	bl	8006664 <lwip_stricmp>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d102      	bne.n	8005e52 <http_uri_is_ssi+0x7e>
        tag_check = 1;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	76fb      	strb	r3, [r7, #27]
        break;
 8005e50:	e005      	b.n	8005e5e <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	3301      	adds	r3, #1
 8005e56:	61fb      	str	r3, [r7, #28]
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	d9eb      	bls.n	8005e36 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <http_uri_is_ssi+0x96>
      *param = '?';
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	223f      	movs	r2, #63	; 0x3f
 8005e68:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 8005e6a:	7efb      	ldrb	r3, [r7, #27]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3720      	adds	r7, #32
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	08015208 	.word	0x08015208

08005e78 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8005e78:	b590      	push	{r4, r7, lr}
 8005e7a:	b093      	sub	sp, #76	; 0x4c
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7fa f9b5 	bl	8000204 <strlen>
 8005e9a:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d072      	beq.n	8005f88 <http_find_file+0x110>
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	4413      	add	r3, r2
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	2b2f      	cmp	r3, #47	; 0x2f
 8005eae:	d16b      	bne.n	8005f88 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8005eb0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8005eb2:	4a80      	ldr	r2, [pc, #512]	; (80060b4 <http_find_file+0x23c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d102      	bne.n	8005ebe <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d164      	bne.n	8005f88 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	2b3f      	cmp	r3, #63	; 0x3f
 8005ec4:	bf28      	it	cs
 8005ec6:	233f      	movcs	r3, #63	; 0x3f
 8005ec8:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00a      	beq.n	8005ee6 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	6a3a      	ldr	r2, [r7, #32]
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4877      	ldr	r0, [pc, #476]	; (80060b4 <http_find_file+0x23c>)
 8005ed8:	f00b f80e 	bl	8010ef8 <memcpy>
      http_uri_buf[copy_len] = 0;
 8005edc:	4a75      	ldr	r2, [pc, #468]	; (80060b4 <http_find_file+0x23c>)
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eea:	e04a      	b.n	8005f82 <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d028      	beq.n	8005f44 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8005ef8:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01e      	beq.n	8005f3e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8005f00:	4a6d      	ldr	r2, [pc, #436]	; (80060b8 <http_find_file+0x240>)
 8005f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7fa f97b 	bl	8000204 <strlen>
 8005f0e:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	4293      	cmp	r3, r2
 8005f16:	bf28      	it	cs
 8005f18:	4613      	movcs	r3, r2
 8005f1a:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	4a65      	ldr	r2, [pc, #404]	; (80060b4 <http_find_file+0x23c>)
 8005f20:	1898      	adds	r0, r3, r2
 8005f22:	4a65      	ldr	r2, [pc, #404]	; (80060b8 <http_find_file+0x240>)
 8005f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f26:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	f00a ffe3 	bl	8010ef8 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8005f32:	6a3a      	ldr	r2, [r7, #32]
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	4413      	add	r3, r2
 8005f38:	4a5e      	ldr	r2, [pc, #376]	; (80060b4 <http_find_file+0x23c>)
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8005f3e:	4b5d      	ldr	r3, [pc, #372]	; (80060b4 <http_find_file+0x23c>)
 8005f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f42:	e004      	b.n	8005f4e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8005f44:	4a5c      	ldr	r2, [pc, #368]	; (80060b8 <http_find_file+0x240>)
 8005f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f4c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fe ffd0 	bl	8004ef8 <fs_open>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 8005f5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10b      	bne.n	8005f7c <http_find_file+0x104>
        uri = file_name;
 8005f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f66:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 8005f6c:	4a52      	ldr	r2, [pc, #328]	; (80060b8 <http_find_file+0x240>)
 8005f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f70:	00db      	lsls	r3, r3, #3
 8005f72:	4413      	add	r3, r2
 8005f74:	791b      	ldrb	r3, [r3, #4]
 8005f76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 8005f7a:	e005      	b.n	8005f88 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8005f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7e:	3301      	adds	r3, #1
 8005f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d9b1      	bls.n	8005eec <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8005f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d176      	bne.n	800607c <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	213f      	movs	r1, #63	; 0x3f
 8005f92:	4618      	mov	r0, r3
 8005f94:	f00b f81c 	bl	8010fd0 <strchr>
 8005f98:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8005f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8005fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	701a      	strb	r2, [r3, #0]
      params++;
 8005fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa8:	3301      	adds	r3, #1
 8005faa:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8005fac:	4b43      	ldr	r3, [pc, #268]	; (80060bc <http_find_file+0x244>)
 8005fae:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb2:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 8005fb4:	4b42      	ldr	r3, [pc, #264]	; (80060c0 <http_find_file+0x248>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d034      	beq.n	8006026 <http_find_file+0x1ae>
 8005fbc:	4b41      	ldr	r3, [pc, #260]	; (80060c4 <http_find_file+0x24c>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d030      	beq.n	8006026 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	633b      	str	r3, [r7, #48]	; 0x30
 8005fc8:	e028      	b.n	800601c <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8005fca:	68b8      	ldr	r0, [r7, #8]
 8005fcc:	4b3d      	ldr	r3, [pc, #244]	; (80060c4 <http_find_file+0x24c>)
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	4413      	add	r3, r2
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4619      	mov	r1, r3
 8005fda:	f7fa f909 	bl	80001f0 <strcmp>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d118      	bne.n	8006016 <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 8005fe4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f7ff f922 	bl	8005230 <extract_uri_parameters>
 8005fec:	4603      	mov	r3, r0
 8005fee:	4a33      	ldr	r2, [pc, #204]	; (80060bc <http_find_file+0x244>)
 8005ff0:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8005ff2:	4b34      	ldr	r3, [pc, #208]	; (80060c4 <http_find_file+0x24c>)
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	00db      	lsls	r3, r3, #3
 8005ffa:	4413      	add	r3, r2
 8005ffc:	685c      	ldr	r4, [r3, #4]
 8005ffe:	4b2f      	ldr	r3, [pc, #188]	; (80060bc <http_find_file+0x244>)
 8006000:	6819      	ldr	r1, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800600c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800600e:	47a0      	blx	r4
 8006010:	4603      	mov	r3, r0
 8006012:	60bb      	str	r3, [r7, #8]
          break;
 8006014:	e007      	b.n	8006026 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	3301      	adds	r3, #1
 800601a:	633b      	str	r3, [r7, #48]	; 0x30
 800601c:	4b28      	ldr	r3, [pc, #160]	; (80060c0 <http_find_file+0x248>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006022:	429a      	cmp	r2, r3
 8006024:	dbd1      	blt.n	8005fca <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	4611      	mov	r1, r2
 800602c:	4618      	mov	r0, r3
 800602e:	f7fe ff63 	bl	8004ef8 <fs_open>
 8006032:	4603      	mov	r3, r0
 8006034:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 8006036:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d102      	bne.n	8006044 <http_find_file+0x1cc>
      file = &hs->file_handle;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	63bb      	str	r3, [r7, #56]	; 0x38
 8006042:	e006      	b.n	8006052 <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 8006044:	f107 0308 	add.w	r3, r7, #8
 8006048:	4619      	mov	r1, r3
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f7ff fd94 	bl	8005b78 <http_get_404_file>
 8006050:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 8006052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006054:	2b00      	cmp	r3, #0
 8006056:	d011      	beq.n	800607c <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8006058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605a:	7c1b      	ldrb	r3, [r3, #16]
 800605c:	f003 0308 	and.w	r3, r3, #8
 8006060:	2b00      	cmp	r3, #0
 8006062:	d003      	beq.n	800606c <http_find_file+0x1f4>
        tag_check = 1;
 8006064:	2301      	movs	r3, #1
 8006066:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800606a:	e007      	b.n	800607c <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	4619      	mov	r1, r3
 8006070:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006072:	f7ff feaf 	bl	8005dd4 <http_uri_is_ssi>
 8006076:	4603      	mov	r3, r0
 8006078:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800607c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607e:	2b00      	cmp	r3, #0
 8006080:	d106      	bne.n	8006090 <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8006082:	f107 0308 	add.w	r3, r7, #8
 8006086:	4619      	mov	r1, r3
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f7ff fd75 	bl	8005b78 <http_get_404_file>
 800608e:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006094:	9301      	str	r3, [sp, #4]
 8006096:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	4613      	mov	r3, r2
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 f810 	bl	80060c8 <http_init_file>
 80060a8:	4603      	mov	r3, r0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3744      	adds	r7, #68	; 0x44
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd90      	pop	{r4, r7, pc}
 80060b2:	bf00      	nop
 80060b4:	2000515c 	.word	0x2000515c
 80060b8:	0801521c 	.word	0x0801521c
 80060bc:	200051b0 	.word	0x200051b0
 80060c0:	200051ac 	.word	0x200051ac
 80060c4:	200051a8 	.word	0x200051a8

080060c8 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b088      	sub	sp, #32
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d07d      	beq.n	80061d8 <http_init_file+0x110>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d106      	bne.n	80060f2 <http_init_file+0x2a>
 80060e4:	4b45      	ldr	r3, [pc, #276]	; (80061fc <http_init_file+0x134>)
 80060e6:	f640 120b 	movw	r2, #2315	; 0x90b
 80060ea:	4945      	ldr	r1, [pc, #276]	; (8006200 <http_init_file+0x138>)
 80060ec:	4845      	ldr	r0, [pc, #276]	; (8006204 <http_init_file+0x13c>)
 80060ee:	f00a ff19 	bl	8010f24 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 80060f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d01c      	beq.n	8006134 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 80060fa:	f7fe ff54 	bl	8004fa6 <http_ssi_state_alloc>
 80060fe:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d016      	beq.n	8006134 <http_init_file+0x6c>
        ssi->tag_index = 0;
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	2200      	movs	r2, #0
 800610a:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        ssi->parsed = file->data;
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	461a      	mov	r2, r3
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	69fa      	ldr	r2, [r7, #28]
 8006132:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	da06      	bge.n	8006158 <http_init_file+0x90>
 800614a:	4b2c      	ldr	r3, [pc, #176]	; (80061fc <http_init_file+0x134>)
 800614c:	f640 1234 	movw	r2, #2356	; 0x934
 8006150:	492d      	ldr	r1, [pc, #180]	; (8006208 <http_init_file+0x140>)
 8006152:	482c      	ldr	r0, [pc, #176]	; (8006204 <http_init_file+0x13c>)
 8006154:	f00a fee6 	bl	8010f24 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	461a      	mov	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	7c1b      	ldrb	r3, [r3, #16]
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d106      	bne.n	8006186 <http_init_file+0xbe>
 8006178:	4b20      	ldr	r3, [pc, #128]	; (80061fc <http_init_file+0x134>)
 800617a:	f640 1243 	movw	r2, #2371	; 0x943
 800617e:	4923      	ldr	r1, [pc, #140]	; (800620c <http_init_file+0x144>)
 8006180:	4820      	ldr	r0, [pc, #128]	; (8006204 <http_init_file+0x13c>)
 8006182:	f00a fecf 	bl	8010f24 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d032      	beq.n	80061f2 <http_init_file+0x12a>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	7c1b      	ldrb	r3, [r3, #16]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d02b      	beq.n	80061f2 <http_init_file+0x12a>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6998      	ldr	r0, [r3, #24]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	461a      	mov	r2, r3
 80061a4:	491a      	ldr	r1, [pc, #104]	; (8006210 <http_init_file+0x148>)
 80061a6:	f000 fa27 	bl	80065f8 <lwip_strnstr>
 80061aa:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d01f      	beq.n	80061f2 <http_init_file+0x12a>
        int diff = file_start + 4 - hs->file;
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	1d1a      	adds	r2, r3, #4
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	699a      	ldr	r2, [r3, #24]
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	441a      	add	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	1ad2      	subs	r2, r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	625a      	str	r2, [r3, #36]	; 0x24
 80061d6:	e00c      	b.n	80061f2 <http_init_file+0x12a>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3720      	adds	r7, #32
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	08012138 	.word	0x08012138
 8006200:	08012284 	.word	0x08012284
 8006204:	08012180 	.word	0x08012180
 8006208:	08012298 	.word	0x08012298
 800620c:	080122b8 	.word	0x080122b8
 8006210:	0801227c 	.word	0x0801227c

08006214 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	460b      	mov	r3, r1
 800621e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <http_err+0x1c>
    http_state_free(hs);
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f7fe ff28 	bl	8005080 <http_state_free>
  }
}
 8006230:	bf00      	nop
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	4613      	mov	r3, r2
 8006244:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <http_sent+0x1c>
    return ERR_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	e008      	b.n	8006266 <http_sent+0x2e>
  }

  hs->retries = 0;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800625c:	6979      	ldr	r1, [r7, #20]
 800625e:	68b8      	ldr	r0, [r7, #8]
 8006260:	f7ff fc48 	bl	8005af4 <http_send>

  return ERR_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3718      	adds	r7, #24
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d107      	bne.n	8006292 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8006282:	2100      	movs	r1, #0
 8006284:	6838      	ldr	r0, [r7, #0]
 8006286:	f7fe ffb7 	bl	80051f8 <http_close_conn>
 800628a:	4603      	mov	r3, r0
 800628c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	e021      	b.n	80062d6 <http_poll+0x68>
  } else {
    hs->retries++;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006298:	3301      	adds	r3, #1
 800629a:	b2da      	uxtb	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d105      	bne.n	80062b8 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 80062ac:	68f9      	ldr	r1, [r7, #12]
 80062ae:	6838      	ldr	r0, [r7, #0]
 80062b0:	f7fe ffa2 	bl	80051f8 <http_close_conn>
      return ERR_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	e00e      	b.n	80062d6 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d009      	beq.n	80062d4 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 80062c0:	68f9      	ldr	r1, [r7, #12]
 80062c2:	6838      	ldr	r0, [r7, #0]
 80062c4:	f7ff fc16 	bl	8005af4 <http_send>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 80062ce:	6838      	ldr	r0, [r7, #0]
 80062d0:	f007 f89e 	bl	800d410 <tcp_output>
      }
    }
  }

  return ERR_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
	...

080062e0 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80062f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d105      	bne.n	8006306 <http_recv+0x26>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <http_recv+0x26>
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d111      	bne.n	800632a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d008      	beq.n	800631e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	891b      	ldrh	r3, [r3, #8]
 8006310:	4619      	mov	r1, r3
 8006312:	68b8      	ldr	r0, [r7, #8]
 8006314:	f002 fc6c 	bl	8008bf0 <tcp_recved>
      pbuf_free(p);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f001 fd07 	bl	8007d2c <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800631e:	6979      	ldr	r1, [r7, #20]
 8006320:	68b8      	ldr	r0, [r7, #8]
 8006322:	f7fe ff69 	bl	80051f8 <http_close_conn>
    return ERR_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	e055      	b.n	80063d6 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	891b      	ldrh	r3, [r3, #8]
 800632e:	4619      	mov	r1, r3
 8006330:	68b8      	ldr	r0, [r7, #8]
 8006332:	f002 fc5d 	bl	8008bf0 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d147      	bne.n	80063ce <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	6979      	ldr	r1, [r7, #20]
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7ff fc5e 	bl	8005c04 <http_parse_request>
 8006348:	4603      	mov	r3, r0
 800634a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800634c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d015      	beq.n	8006380 <http_recv+0xa0>
 8006354:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006358:	f113 0f05 	cmn.w	r3, #5
 800635c:	d010      	beq.n	8006380 <http_recv+0xa0>
 800635e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006362:	f113 0f10 	cmn.w	r3, #16
 8006366:	d00b      	beq.n	8006380 <http_recv+0xa0>
 8006368:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800636c:	f113 0f08 	cmn.w	r3, #8
 8006370:	d006      	beq.n	8006380 <http_recv+0xa0>
 8006372:	4b1b      	ldr	r3, [pc, #108]	; (80063e0 <http_recv+0x100>)
 8006374:	f640 2204 	movw	r2, #2564	; 0xa04
 8006378:	491a      	ldr	r1, [pc, #104]	; (80063e4 <http_recv+0x104>)
 800637a:	481b      	ldr	r0, [pc, #108]	; (80063e8 <http_recv+0x108>)
 800637c:	f00a fdd2 	bl	8010f24 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8006380:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006384:	f113 0f05 	cmn.w	r3, #5
 8006388:	d00b      	beq.n	80063a2 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d007      	beq.n	80063a2 <http_recv+0xc2>
          pbuf_free(hs->req);
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	4618      	mov	r0, r3
 8006398:	f001 fcc8 	bl	8007d2c <pbuf_free>
          hs->req = NULL;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	2200      	movs	r2, #0
 80063a0:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f001 fcc2 	bl	8007d2c <pbuf_free>
      if (parsed == ERR_OK) {
 80063a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d104      	bne.n	80063ba <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 80063b0:	6979      	ldr	r1, [r7, #20]
 80063b2:	68b8      	ldr	r0, [r7, #8]
 80063b4:	f7ff fb9e 	bl	8005af4 <http_send>
 80063b8:	e00c      	b.n	80063d4 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 80063ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80063be:	f113 0f10 	cmn.w	r3, #16
 80063c2:	d107      	bne.n	80063d4 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 80063c4:	6979      	ldr	r1, [r7, #20]
 80063c6:	68b8      	ldr	r0, [r7, #8]
 80063c8:	f7fe ff16 	bl	80051f8 <http_close_conn>
 80063cc:	e002      	b.n	80063d4 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f001 fcac 	bl	8007d2c <pbuf_free>
    }
  }
  return ERR_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	08012138 	.word	0x08012138
 80063e4:	080122e4 	.word	0x080122e4
 80063e8:	08012180 	.word	0x08012180

080063ec <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	4613      	mov	r3, r2
 80063f8:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 80063fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d102      	bne.n	8006408 <http_accept+0x1c>
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d102      	bne.n	800640e <http_accept+0x22>
    return ERR_VAL;
 8006408:	f06f 0305 	mvn.w	r3, #5
 800640c:	e025      	b.n	800645a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800640e:	2101      	movs	r1, #1
 8006410:	68b8      	ldr	r0, [r7, #8]
 8006412:	f003 f8d1 	bl	80095b8 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8006416:	f7fe fdf5 	bl	8005004 <http_state_alloc>
 800641a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d102      	bne.n	8006428 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8006422:	f04f 33ff 	mov.w	r3, #4294967295
 8006426:	e018      	b.n	800645a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800642e:	6979      	ldr	r1, [r7, #20]
 8006430:	68b8      	ldr	r0, [r7, #8]
 8006432:	f003 fac1 	bl	80099b8 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8006436:	490b      	ldr	r1, [pc, #44]	; (8006464 <http_accept+0x78>)
 8006438:	68b8      	ldr	r0, [r7, #8]
 800643a:	f003 facf 	bl	80099dc <tcp_recv>
  altcp_err(pcb, http_err);
 800643e:	490a      	ldr	r1, [pc, #40]	; (8006468 <http_accept+0x7c>)
 8006440:	68b8      	ldr	r0, [r7, #8]
 8006442:	f003 fb0f 	bl	8009a64 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8006446:	2204      	movs	r2, #4
 8006448:	4908      	ldr	r1, [pc, #32]	; (800646c <http_accept+0x80>)
 800644a:	68b8      	ldr	r0, [r7, #8]
 800644c:	f003 fb44 	bl	8009ad8 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8006450:	4907      	ldr	r1, [pc, #28]	; (8006470 <http_accept+0x84>)
 8006452:	68b8      	ldr	r0, [r7, #8]
 8006454:	f003 fae4 	bl	8009a20 <tcp_sent>

  return ERR_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3718      	adds	r7, #24
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	080062e1 	.word	0x080062e1
 8006468:	08006215 	.word	0x08006215
 800646c:	0800626f 	.word	0x0800626f
 8006470:	08006239 	.word	0x08006239

08006474 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	460b      	mov	r3, r1
 800647e:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d029      	beq.n	80064da <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8006486:	2101      	movs	r1, #1
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f003 f895 	bl	80095b8 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800648e:	887b      	ldrh	r3, [r7, #2]
 8006490:	461a      	mov	r2, r3
 8006492:	4914      	ldr	r1, [pc, #80]	; (80064e4 <httpd_init_pcb+0x70>)
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f002 f9dd 	bl	8008854 <tcp_bind>
 800649a:	4603      	mov	r3, r0
 800649c:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800649e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d006      	beq.n	80064b4 <httpd_init_pcb+0x40>
 80064a6:	4b10      	ldr	r3, [pc, #64]	; (80064e8 <httpd_init_pcb+0x74>)
 80064a8:	f640 2257 	movw	r2, #2647	; 0xa57
 80064ac:	490f      	ldr	r1, [pc, #60]	; (80064ec <httpd_init_pcb+0x78>)
 80064ae:	4810      	ldr	r0, [pc, #64]	; (80064f0 <httpd_init_pcb+0x7c>)
 80064b0:	f00a fd38 	bl	8010f24 <iprintf>
    pcb = altcp_listen(pcb);
 80064b4:	21ff      	movs	r1, #255	; 0xff
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f002 fa84 	bl	80089c4 <tcp_listen_with_backlog>
 80064bc:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d106      	bne.n	80064d2 <httpd_init_pcb+0x5e>
 80064c4:	4b08      	ldr	r3, [pc, #32]	; (80064e8 <httpd_init_pcb+0x74>)
 80064c6:	f640 2259 	movw	r2, #2649	; 0xa59
 80064ca:	490a      	ldr	r1, [pc, #40]	; (80064f4 <httpd_init_pcb+0x80>)
 80064cc:	4808      	ldr	r0, [pc, #32]	; (80064f0 <httpd_init_pcb+0x7c>)
 80064ce:	f00a fd29 	bl	8010f24 <iprintf>
    altcp_accept(pcb, http_accept);
 80064d2:	4909      	ldr	r1, [pc, #36]	; (80064f8 <httpd_init_pcb+0x84>)
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f003 fae7 	bl	8009aa8 <tcp_accept>
  }
}
 80064da:	bf00      	nop
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	08015324 	.word	0x08015324
 80064e8:	08012138 	.word	0x08012138
 80064ec:	08012310 	.word	0x08012310
 80064f0:	08012180 	.word	0x08012180
 80064f4:	0801232c 	.word	0x0801232c
 80064f8:	080063ed 	.word	0x080063ed

080064fc <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8006502:	202e      	movs	r0, #46	; 0x2e
 8006504:	f003 fa4a 	bl	800999c <tcp_new_ip_type>
 8006508:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d106      	bne.n	800651e <httpd_init+0x22>
 8006510:	4b07      	ldr	r3, [pc, #28]	; (8006530 <httpd_init+0x34>)
 8006512:	f640 2272 	movw	r2, #2674	; 0xa72
 8006516:	4907      	ldr	r1, [pc, #28]	; (8006534 <httpd_init+0x38>)
 8006518:	4807      	ldr	r0, [pc, #28]	; (8006538 <httpd_init+0x3c>)
 800651a:	f00a fd03 	bl	8010f24 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800651e:	2150      	movs	r1, #80	; 0x50
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f7ff ffa7 	bl	8006474 <httpd_init_pcb>
}
 8006526:	bf00      	nop
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	08012138 	.word	0x08012138
 8006534:	0801234c 	.word	0x0801234c
 8006538:	08012180 	.word	0x08012180

0800653c <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d106      	bne.n	800655a <http_set_cgi_handlers+0x1e>
 800654c:	4b0d      	ldr	r3, [pc, #52]	; (8006584 <http_set_cgi_handlers+0x48>)
 800654e:	f640 22b2 	movw	r2, #2738	; 0xab2
 8006552:	490d      	ldr	r1, [pc, #52]	; (8006588 <http_set_cgi_handlers+0x4c>)
 8006554:	480d      	ldr	r0, [pc, #52]	; (800658c <http_set_cgi_handlers+0x50>)
 8006556:	f00a fce5 	bl	8010f24 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	dc06      	bgt.n	800656e <http_set_cgi_handlers+0x32>
 8006560:	4b08      	ldr	r3, [pc, #32]	; (8006584 <http_set_cgi_handlers+0x48>)
 8006562:	f640 22b3 	movw	r2, #2739	; 0xab3
 8006566:	490a      	ldr	r1, [pc, #40]	; (8006590 <http_set_cgi_handlers+0x54>)
 8006568:	4808      	ldr	r0, [pc, #32]	; (800658c <http_set_cgi_handlers+0x50>)
 800656a:	f00a fcdb 	bl	8010f24 <iprintf>

  httpd_cgis = cgis;
 800656e:	4a09      	ldr	r2, [pc, #36]	; (8006594 <http_set_cgi_handlers+0x58>)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 8006574:	4a08      	ldr	r2, [pc, #32]	; (8006598 <http_set_cgi_handlers+0x5c>)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	6013      	str	r3, [r2, #0]
}
 800657a:	bf00      	nop
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	08012138 	.word	0x08012138
 8006588:	080123a8 	.word	0x080123a8
 800658c:	08012180 	.word	0x08012180
 8006590:	080123b8 	.word	0x080123b8
 8006594:	200051a8 	.word	0x200051a8
 8006598:	200051ac 	.word	0x200051ac

0800659c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	4603      	mov	r3, r0
 80065a4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80065a6:	88fb      	ldrh	r3, [r7, #6]
 80065a8:	021b      	lsls	r3, r3, #8
 80065aa:	b21a      	sxth	r2, r3
 80065ac:	88fb      	ldrh	r3, [r7, #6]
 80065ae:	0a1b      	lsrs	r3, r3, #8
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	b21b      	sxth	r3, r3
 80065b4:	4313      	orrs	r3, r2
 80065b6:	b21b      	sxth	r3, r3
 80065b8:	b29b      	uxth	r3, r3
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b083      	sub	sp, #12
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	061a      	lsls	r2, r3, #24
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	021b      	lsls	r3, r3, #8
 80065d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065da:	431a      	orrs	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	0a1b      	lsrs	r3, r3, #8
 80065e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80065e4:	431a      	orrs	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	0e1b      	lsrs	r3, r3, #24
 80065ea:	4313      	orrs	r3, r2
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8006604:	68b8      	ldr	r0, [r7, #8]
 8006606:	f7f9 fdfd 	bl	8000204 <strlen>
 800660a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	e022      	b.n	800665c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	617b      	str	r3, [r7, #20]
 800661a:	e012      	b.n	8006642 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	781a      	ldrb	r2, [r3, #0]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	429a      	cmp	r2, r3
 8006626:	d109      	bne.n	800663c <lwip_strnstr+0x44>
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	68b9      	ldr	r1, [r7, #8]
 800662c:	6978      	ldr	r0, [r7, #20]
 800662e:	f00a fcdc 	bl	8010fea <strncmp>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	e00f      	b.n	800665c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	3301      	adds	r3, #1
 8006640:	617b      	str	r3, [r7, #20]
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d007      	beq.n	800665a <lwip_strnstr+0x62>
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	441a      	add	r2, r3
 8006650:	68f9      	ldr	r1, [r7, #12]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	440b      	add	r3, r1
 8006656:	429a      	cmp	r2, r3
 8006658:	d9e0      	bls.n	800661c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	603a      	str	r2, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 8006682:	7bfa      	ldrb	r2, [r7, #15]
 8006684:	7bbb      	ldrb	r3, [r7, #14]
 8006686:	429a      	cmp	r2, r3
 8006688:	d016      	beq.n	80066b8 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800668a:	7bfb      	ldrb	r3, [r7, #15]
 800668c:	f043 0320 	orr.w	r3, r3, #32
 8006690:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8006692:	7b7b      	ldrb	r3, [r7, #13]
 8006694:	2b60      	cmp	r3, #96	; 0x60
 8006696:	d90c      	bls.n	80066b2 <lwip_stricmp+0x4e>
 8006698:	7b7b      	ldrb	r3, [r7, #13]
 800669a:	2b7a      	cmp	r3, #122	; 0x7a
 800669c:	d809      	bhi.n	80066b2 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800669e:	7bbb      	ldrb	r3, [r7, #14]
 80066a0:	f043 0320 	orr.w	r3, r3, #32
 80066a4:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 80066a6:	7b7a      	ldrb	r2, [r7, #13]
 80066a8:	7b3b      	ldrb	r3, [r7, #12]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d003      	beq.n	80066b6 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e006      	b.n	80066c0 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e004      	b.n	80066c0 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80066b6:	bf00      	nop
      }
    }
  } while (c1 != 0);
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1d7      	bne.n	800666e <lwip_stricmp+0xa>
  return 0;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80066d2:	2300      	movs	r3, #0
 80066d4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80066d6:	f000 f8d5 	bl	8006884 <mem_init>
  memp_init();
 80066da:	f000 fbdb 	bl	8006e94 <memp_init>
  pbuf_init();
  netif_init();
 80066de:	f000 fcd9 	bl	8007094 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80066e2:	f007 ff55 	bl	800e590 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80066e6:	f001 fdaf 	bl	8008248 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80066ea:	f007 fec7 	bl	800e47c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80066ee:	bf00      	nop
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
	...

080066f8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	4603      	mov	r3, r0
 8006700:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006702:	4b05      	ldr	r3, [pc, #20]	; (8006718 <ptr_to_mem+0x20>)
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	88fb      	ldrh	r3, [r7, #6]
 8006708:	4413      	add	r3, r2
}
 800670a:	4618      	mov	r0, r3
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	20005820 	.word	0x20005820

0800671c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006724:	4b05      	ldr	r3, [pc, #20]	; (800673c <mem_to_ptr+0x20>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	b29b      	uxth	r3, r3
}
 800672e:	4618      	mov	r0, r3
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	20005820 	.word	0x20005820

08006740 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006740:	b590      	push	{r4, r7, lr}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006748:	4b45      	ldr	r3, [pc, #276]	; (8006860 <plug_holes+0x120>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	429a      	cmp	r2, r3
 8006750:	d206      	bcs.n	8006760 <plug_holes+0x20>
 8006752:	4b44      	ldr	r3, [pc, #272]	; (8006864 <plug_holes+0x124>)
 8006754:	f240 12df 	movw	r2, #479	; 0x1df
 8006758:	4943      	ldr	r1, [pc, #268]	; (8006868 <plug_holes+0x128>)
 800675a:	4844      	ldr	r0, [pc, #272]	; (800686c <plug_holes+0x12c>)
 800675c:	f00a fbe2 	bl	8010f24 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006760:	4b43      	ldr	r3, [pc, #268]	; (8006870 <plug_holes+0x130>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	429a      	cmp	r2, r3
 8006768:	d306      	bcc.n	8006778 <plug_holes+0x38>
 800676a:	4b3e      	ldr	r3, [pc, #248]	; (8006864 <plug_holes+0x124>)
 800676c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006770:	4940      	ldr	r1, [pc, #256]	; (8006874 <plug_holes+0x134>)
 8006772:	483e      	ldr	r0, [pc, #248]	; (800686c <plug_holes+0x12c>)
 8006774:	f00a fbd6 	bl	8010f24 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	791b      	ldrb	r3, [r3, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d006      	beq.n	800678e <plug_holes+0x4e>
 8006780:	4b38      	ldr	r3, [pc, #224]	; (8006864 <plug_holes+0x124>)
 8006782:	f240 12e1 	movw	r2, #481	; 0x1e1
 8006786:	493c      	ldr	r1, [pc, #240]	; (8006878 <plug_holes+0x138>)
 8006788:	4838      	ldr	r0, [pc, #224]	; (800686c <plug_holes+0x12c>)
 800678a:	f00a fbcb 	bl	8010f24 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006796:	d906      	bls.n	80067a6 <plug_holes+0x66>
 8006798:	4b32      	ldr	r3, [pc, #200]	; (8006864 <plug_holes+0x124>)
 800679a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800679e:	4937      	ldr	r1, [pc, #220]	; (800687c <plug_holes+0x13c>)
 80067a0:	4832      	ldr	r0, [pc, #200]	; (800686c <plug_holes+0x12c>)
 80067a2:	f00a fbbf 	bl	8010f24 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff ffa4 	bl	80066f8 <ptr_to_mem>
 80067b0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d024      	beq.n	8006804 <plug_holes+0xc4>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	791b      	ldrb	r3, [r3, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d120      	bne.n	8006804 <plug_holes+0xc4>
 80067c2:	4b2b      	ldr	r3, [pc, #172]	; (8006870 <plug_holes+0x130>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d01b      	beq.n	8006804 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80067cc:	4b2c      	ldr	r3, [pc, #176]	; (8006880 <plug_holes+0x140>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d102      	bne.n	80067dc <plug_holes+0x9c>
      lfree = mem;
 80067d6:	4a2a      	ldr	r2, [pc, #168]	; (8006880 <plug_holes+0x140>)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	881a      	ldrh	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80067ec:	d00a      	beq.n	8006804 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7ff ff80 	bl	80066f8 <ptr_to_mem>
 80067f8:	4604      	mov	r4, r0
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7ff ff8e 	bl	800671c <mem_to_ptr>
 8006800:	4603      	mov	r3, r0
 8006802:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	885b      	ldrh	r3, [r3, #2]
 8006808:	4618      	mov	r0, r3
 800680a:	f7ff ff75 	bl	80066f8 <ptr_to_mem>
 800680e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	429a      	cmp	r2, r3
 8006816:	d01f      	beq.n	8006858 <plug_holes+0x118>
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	791b      	ldrb	r3, [r3, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d11b      	bne.n	8006858 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006820:	4b17      	ldr	r3, [pc, #92]	; (8006880 <plug_holes+0x140>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	429a      	cmp	r2, r3
 8006828:	d102      	bne.n	8006830 <plug_holes+0xf0>
      lfree = pmem;
 800682a:	4a15      	ldr	r2, [pc, #84]	; (8006880 <plug_holes+0x140>)
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	881a      	ldrh	r2, [r3, #0]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006840:	d00a      	beq.n	8006858 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	4618      	mov	r0, r3
 8006848:	f7ff ff56 	bl	80066f8 <ptr_to_mem>
 800684c:	4604      	mov	r4, r0
 800684e:	68b8      	ldr	r0, [r7, #8]
 8006850:	f7ff ff64 	bl	800671c <mem_to_ptr>
 8006854:	4603      	mov	r3, r0
 8006856:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006858:	bf00      	nop
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	bd90      	pop	{r4, r7, pc}
 8006860:	20005820 	.word	0x20005820
 8006864:	080123d4 	.word	0x080123d4
 8006868:	08012404 	.word	0x08012404
 800686c:	0801241c 	.word	0x0801241c
 8006870:	20005824 	.word	0x20005824
 8006874:	08012444 	.word	0x08012444
 8006878:	08012460 	.word	0x08012460
 800687c:	0801247c 	.word	0x0801247c
 8006880:	20005828 	.word	0x20005828

08006884 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800688a:	4b18      	ldr	r3, [pc, #96]	; (80068ec <mem_init+0x68>)
 800688c:	3303      	adds	r3, #3
 800688e:	f023 0303 	bic.w	r3, r3, #3
 8006892:	461a      	mov	r2, r3
 8006894:	4b16      	ldr	r3, [pc, #88]	; (80068f0 <mem_init+0x6c>)
 8006896:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006898:	4b15      	ldr	r3, [pc, #84]	; (80068f0 <mem_init+0x6c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80068a4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80068b2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80068b6:	f7ff ff1f 	bl	80066f8 <ptr_to_mem>
 80068ba:	4603      	mov	r3, r0
 80068bc:	4a0d      	ldr	r2, [pc, #52]	; (80068f4 <mem_init+0x70>)
 80068be:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80068c0:	4b0c      	ldr	r3, [pc, #48]	; (80068f4 <mem_init+0x70>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2201      	movs	r2, #1
 80068c6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80068c8:	4b0a      	ldr	r3, [pc, #40]	; (80068f4 <mem_init+0x70>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80068d0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80068d2:	4b08      	ldr	r3, [pc, #32]	; (80068f4 <mem_init+0x70>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80068da:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80068dc:	4b04      	ldr	r3, [pc, #16]	; (80068f0 <mem_init+0x6c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a05      	ldr	r2, [pc, #20]	; (80068f8 <mem_init+0x74>)
 80068e2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	200051cc 	.word	0x200051cc
 80068f0:	20005820 	.word	0x20005820
 80068f4:	20005824 	.word	0x20005824
 80068f8:	20005828 	.word	0x20005828

080068fc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7ff ff09 	bl	800671c <mem_to_ptr>
 800690a:	4603      	mov	r3, r0
 800690c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	4618      	mov	r0, r3
 8006914:	f7ff fef0 	bl	80066f8 <ptr_to_mem>
 8006918:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	885b      	ldrh	r3, [r3, #2]
 800691e:	4618      	mov	r0, r3
 8006920:	f7ff feea 	bl	80066f8 <ptr_to_mem>
 8006924:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800692e:	d818      	bhi.n	8006962 <mem_link_valid+0x66>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	885b      	ldrh	r3, [r3, #2]
 8006934:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006938:	d813      	bhi.n	8006962 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800693e:	8afa      	ldrh	r2, [r7, #22]
 8006940:	429a      	cmp	r2, r3
 8006942:	d004      	beq.n	800694e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	8afa      	ldrh	r2, [r7, #22]
 800694a:	429a      	cmp	r2, r3
 800694c:	d109      	bne.n	8006962 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800694e:	4b08      	ldr	r3, [pc, #32]	; (8006970 <mem_link_valid+0x74>)
 8006950:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	429a      	cmp	r2, r3
 8006956:	d006      	beq.n	8006966 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	885b      	ldrh	r3, [r3, #2]
 800695c:	8afa      	ldrh	r2, [r7, #22]
 800695e:	429a      	cmp	r2, r3
 8006960:	d001      	beq.n	8006966 <mem_link_valid+0x6a>
    return 0;
 8006962:	2300      	movs	r3, #0
 8006964:	e000      	b.n	8006968 <mem_link_valid+0x6c>
  }
  return 1;
 8006966:	2301      	movs	r3, #1
}
 8006968:	4618      	mov	r0, r3
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	20005824 	.word	0x20005824

08006974 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d04c      	beq.n	8006a1c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f003 0303 	and.w	r3, r3, #3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d007      	beq.n	800699c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800698c:	4b25      	ldr	r3, [pc, #148]	; (8006a24 <mem_free+0xb0>)
 800698e:	f240 2273 	movw	r2, #627	; 0x273
 8006992:	4925      	ldr	r1, [pc, #148]	; (8006a28 <mem_free+0xb4>)
 8006994:	4825      	ldr	r0, [pc, #148]	; (8006a2c <mem_free+0xb8>)
 8006996:	f00a fac5 	bl	8010f24 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800699a:	e040      	b.n	8006a1e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3b08      	subs	r3, #8
 80069a0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80069a2:	4b23      	ldr	r3, [pc, #140]	; (8006a30 <mem_free+0xbc>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d306      	bcc.n	80069ba <mem_free+0x46>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f103 020c 	add.w	r2, r3, #12
 80069b2:	4b20      	ldr	r3, [pc, #128]	; (8006a34 <mem_free+0xc0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d907      	bls.n	80069ca <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80069ba:	4b1a      	ldr	r3, [pc, #104]	; (8006a24 <mem_free+0xb0>)
 80069bc:	f240 227f 	movw	r2, #639	; 0x27f
 80069c0:	491d      	ldr	r1, [pc, #116]	; (8006a38 <mem_free+0xc4>)
 80069c2:	481a      	ldr	r0, [pc, #104]	; (8006a2c <mem_free+0xb8>)
 80069c4:	f00a faae 	bl	8010f24 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80069c8:	e029      	b.n	8006a1e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	791b      	ldrb	r3, [r3, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d107      	bne.n	80069e2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80069d2:	4b14      	ldr	r3, [pc, #80]	; (8006a24 <mem_free+0xb0>)
 80069d4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80069d8:	4918      	ldr	r1, [pc, #96]	; (8006a3c <mem_free+0xc8>)
 80069da:	4814      	ldr	r0, [pc, #80]	; (8006a2c <mem_free+0xb8>)
 80069dc:	f00a faa2 	bl	8010f24 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80069e0:	e01d      	b.n	8006a1e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f7ff ff8a 	bl	80068fc <mem_link_valid>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d107      	bne.n	80069fe <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80069ee:	4b0d      	ldr	r3, [pc, #52]	; (8006a24 <mem_free+0xb0>)
 80069f0:	f240 2295 	movw	r2, #661	; 0x295
 80069f4:	4912      	ldr	r1, [pc, #72]	; (8006a40 <mem_free+0xcc>)
 80069f6:	480d      	ldr	r0, [pc, #52]	; (8006a2c <mem_free+0xb8>)
 80069f8:	f00a fa94 	bl	8010f24 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80069fc:	e00f      	b.n	8006a1e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006a04:	4b0f      	ldr	r3, [pc, #60]	; (8006a44 <mem_free+0xd0>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d202      	bcs.n	8006a14 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006a0e:	4a0d      	ldr	r2, [pc, #52]	; (8006a44 <mem_free+0xd0>)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f7ff fe93 	bl	8006740 <plug_holes>
 8006a1a:	e000      	b.n	8006a1e <mem_free+0xaa>
    return;
 8006a1c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	080123d4 	.word	0x080123d4
 8006a28:	080124a8 	.word	0x080124a8
 8006a2c:	0801241c 	.word	0x0801241c
 8006a30:	20005820 	.word	0x20005820
 8006a34:	20005824 	.word	0x20005824
 8006a38:	080124cc 	.word	0x080124cc
 8006a3c:	080124e8 	.word	0x080124e8
 8006a40:	08012510 	.word	0x08012510
 8006a44:	20005828 	.word	0x20005828

08006a48 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b088      	sub	sp, #32
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006a54:	887b      	ldrh	r3, [r7, #2]
 8006a56:	3303      	adds	r3, #3
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	f023 0303 	bic.w	r3, r3, #3
 8006a5e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006a60:	8bfb      	ldrh	r3, [r7, #30]
 8006a62:	2b0b      	cmp	r3, #11
 8006a64:	d801      	bhi.n	8006a6a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8006a66:	230c      	movs	r3, #12
 8006a68:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006a6a:	8bfb      	ldrh	r3, [r7, #30]
 8006a6c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006a70:	d803      	bhi.n	8006a7a <mem_trim+0x32>
 8006a72:	8bfa      	ldrh	r2, [r7, #30]
 8006a74:	887b      	ldrh	r3, [r7, #2]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d201      	bcs.n	8006a7e <mem_trim+0x36>
    return NULL;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	e0cc      	b.n	8006c18 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006a7e:	4b68      	ldr	r3, [pc, #416]	; (8006c20 <mem_trim+0x1d8>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d304      	bcc.n	8006a92 <mem_trim+0x4a>
 8006a88:	4b66      	ldr	r3, [pc, #408]	; (8006c24 <mem_trim+0x1dc>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d306      	bcc.n	8006aa0 <mem_trim+0x58>
 8006a92:	4b65      	ldr	r3, [pc, #404]	; (8006c28 <mem_trim+0x1e0>)
 8006a94:	f240 22d1 	movw	r2, #721	; 0x2d1
 8006a98:	4964      	ldr	r1, [pc, #400]	; (8006c2c <mem_trim+0x1e4>)
 8006a9a:	4865      	ldr	r0, [pc, #404]	; (8006c30 <mem_trim+0x1e8>)
 8006a9c:	f00a fa42 	bl	8010f24 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006aa0:	4b5f      	ldr	r3, [pc, #380]	; (8006c20 <mem_trim+0x1d8>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d304      	bcc.n	8006ab4 <mem_trim+0x6c>
 8006aaa:	4b5e      	ldr	r3, [pc, #376]	; (8006c24 <mem_trim+0x1dc>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d301      	bcc.n	8006ab8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	e0af      	b.n	8006c18 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	3b08      	subs	r3, #8
 8006abc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006abe:	69b8      	ldr	r0, [r7, #24]
 8006ac0:	f7ff fe2c 	bl	800671c <mem_to_ptr>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	881a      	ldrh	r2, [r3, #0]
 8006acc:	8afb      	ldrh	r3, [r7, #22]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	3b08      	subs	r3, #8
 8006ad4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006ad6:	8bfa      	ldrh	r2, [r7, #30]
 8006ad8:	8abb      	ldrh	r3, [r7, #20]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d906      	bls.n	8006aec <mem_trim+0xa4>
 8006ade:	4b52      	ldr	r3, [pc, #328]	; (8006c28 <mem_trim+0x1e0>)
 8006ae0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8006ae4:	4953      	ldr	r1, [pc, #332]	; (8006c34 <mem_trim+0x1ec>)
 8006ae6:	4852      	ldr	r0, [pc, #328]	; (8006c30 <mem_trim+0x1e8>)
 8006ae8:	f00a fa1c 	bl	8010f24 <iprintf>
  if (newsize > size) {
 8006aec:	8bfa      	ldrh	r2, [r7, #30]
 8006aee:	8abb      	ldrh	r3, [r7, #20]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d901      	bls.n	8006af8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006af4:	2300      	movs	r3, #0
 8006af6:	e08f      	b.n	8006c18 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006af8:	8bfa      	ldrh	r2, [r7, #30]
 8006afa:	8abb      	ldrh	r3, [r7, #20]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d101      	bne.n	8006b04 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	e089      	b.n	8006c18 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7ff fdf5 	bl	80066f8 <ptr_to_mem>
 8006b0e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	791b      	ldrb	r3, [r3, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d13f      	bne.n	8006b98 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006b20:	d106      	bne.n	8006b30 <mem_trim+0xe8>
 8006b22:	4b41      	ldr	r3, [pc, #260]	; (8006c28 <mem_trim+0x1e0>)
 8006b24:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006b28:	4943      	ldr	r1, [pc, #268]	; (8006c38 <mem_trim+0x1f0>)
 8006b2a:	4841      	ldr	r0, [pc, #260]	; (8006c30 <mem_trim+0x1e8>)
 8006b2c:	f00a f9fa 	bl	8010f24 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	881b      	ldrh	r3, [r3, #0]
 8006b34:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006b36:	8afa      	ldrh	r2, [r7, #22]
 8006b38:	8bfb      	ldrh	r3, [r7, #30]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	3308      	adds	r3, #8
 8006b40:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8006b42:	4b3e      	ldr	r3, [pc, #248]	; (8006c3c <mem_trim+0x1f4>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d106      	bne.n	8006b5a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8006b4c:	89fb      	ldrh	r3, [r7, #14]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7ff fdd2 	bl	80066f8 <ptr_to_mem>
 8006b54:	4603      	mov	r3, r0
 8006b56:	4a39      	ldr	r2, [pc, #228]	; (8006c3c <mem_trim+0x1f4>)
 8006b58:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8006b5a:	89fb      	ldrh	r3, [r7, #14]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7ff fdcb 	bl	80066f8 <ptr_to_mem>
 8006b62:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	2200      	movs	r2, #0
 8006b68:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	89ba      	ldrh	r2, [r7, #12]
 8006b6e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	8afa      	ldrh	r2, [r7, #22]
 8006b74:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	89fa      	ldrh	r2, [r7, #14]
 8006b7a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006b84:	d047      	beq.n	8006c16 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7ff fdb4 	bl	80066f8 <ptr_to_mem>
 8006b90:	4602      	mov	r2, r0
 8006b92:	89fb      	ldrh	r3, [r7, #14]
 8006b94:	8053      	strh	r3, [r2, #2]
 8006b96:	e03e      	b.n	8006c16 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006b98:	8bfb      	ldrh	r3, [r7, #30]
 8006b9a:	f103 0214 	add.w	r2, r3, #20
 8006b9e:	8abb      	ldrh	r3, [r7, #20]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d838      	bhi.n	8006c16 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006ba4:	8afa      	ldrh	r2, [r7, #22]
 8006ba6:	8bfb      	ldrh	r3, [r7, #30]
 8006ba8:	4413      	add	r3, r2
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	3308      	adds	r3, #8
 8006bae:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006bb8:	d106      	bne.n	8006bc8 <mem_trim+0x180>
 8006bba:	4b1b      	ldr	r3, [pc, #108]	; (8006c28 <mem_trim+0x1e0>)
 8006bbc:	f240 3216 	movw	r2, #790	; 0x316
 8006bc0:	491d      	ldr	r1, [pc, #116]	; (8006c38 <mem_trim+0x1f0>)
 8006bc2:	481b      	ldr	r0, [pc, #108]	; (8006c30 <mem_trim+0x1e8>)
 8006bc4:	f00a f9ae 	bl	8010f24 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006bc8:	89fb      	ldrh	r3, [r7, #14]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7ff fd94 	bl	80066f8 <ptr_to_mem>
 8006bd0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8006bd2:	4b1a      	ldr	r3, [pc, #104]	; (8006c3c <mem_trim+0x1f4>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d202      	bcs.n	8006be2 <mem_trim+0x19a>
      lfree = mem2;
 8006bdc:	4a17      	ldr	r2, [pc, #92]	; (8006c3c <mem_trim+0x1f4>)
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	2200      	movs	r2, #0
 8006be6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	881a      	ldrh	r2, [r3, #0]
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	8afa      	ldrh	r2, [r7, #22]
 8006bf4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	89fa      	ldrh	r2, [r7, #14]
 8006bfa:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006c04:	d007      	beq.n	8006c16 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7ff fd74 	bl	80066f8 <ptr_to_mem>
 8006c10:	4602      	mov	r2, r0
 8006c12:	89fb      	ldrh	r3, [r7, #14]
 8006c14:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006c16:	687b      	ldr	r3, [r7, #4]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3720      	adds	r7, #32
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	20005820 	.word	0x20005820
 8006c24:	20005824 	.word	0x20005824
 8006c28:	080123d4 	.word	0x080123d4
 8006c2c:	08012544 	.word	0x08012544
 8006c30:	0801241c 	.word	0x0801241c
 8006c34:	0801255c 	.word	0x0801255c
 8006c38:	0801257c 	.word	0x0801257c
 8006c3c:	20005828 	.word	0x20005828

08006c40 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	4603      	mov	r3, r0
 8006c48:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006c4a:	88fb      	ldrh	r3, [r7, #6]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <mem_malloc+0x14>
    return NULL;
 8006c50:	2300      	movs	r3, #0
 8006c52:	e0d9      	b.n	8006e08 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006c54:	88fb      	ldrh	r3, [r7, #6]
 8006c56:	3303      	adds	r3, #3
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	f023 0303 	bic.w	r3, r3, #3
 8006c5e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006c60:	8bbb      	ldrh	r3, [r7, #28]
 8006c62:	2b0b      	cmp	r3, #11
 8006c64:	d801      	bhi.n	8006c6a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006c66:	230c      	movs	r3, #12
 8006c68:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006c6a:	8bbb      	ldrh	r3, [r7, #28]
 8006c6c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006c70:	d803      	bhi.n	8006c7a <mem_malloc+0x3a>
 8006c72:	8bba      	ldrh	r2, [r7, #28]
 8006c74:	88fb      	ldrh	r3, [r7, #6]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d201      	bcs.n	8006c7e <mem_malloc+0x3e>
    return NULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	e0c4      	b.n	8006e08 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006c7e:	4b64      	ldr	r3, [pc, #400]	; (8006e10 <mem_malloc+0x1d0>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7ff fd4a 	bl	800671c <mem_to_ptr>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	83fb      	strh	r3, [r7, #30]
 8006c8c:	e0b4      	b.n	8006df8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006c8e:	8bfb      	ldrh	r3, [r7, #30]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7ff fd31 	bl	80066f8 <ptr_to_mem>
 8006c96:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	791b      	ldrb	r3, [r3, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f040 80a4 	bne.w	8006dea <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	8bfb      	ldrh	r3, [r7, #30]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	f1a3 0208 	sub.w	r2, r3, #8
 8006cb0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	f0c0 8099 	bcc.w	8006dea <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	8bfb      	ldrh	r3, [r7, #30]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	f1a3 0208 	sub.w	r2, r3, #8
 8006cc6:	8bbb      	ldrh	r3, [r7, #28]
 8006cc8:	3314      	adds	r3, #20
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d333      	bcc.n	8006d36 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006cce:	8bfa      	ldrh	r2, [r7, #30]
 8006cd0:	8bbb      	ldrh	r3, [r7, #28]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	3308      	adds	r3, #8
 8006cd8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006cda:	8a7b      	ldrh	r3, [r7, #18]
 8006cdc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006ce0:	d106      	bne.n	8006cf0 <mem_malloc+0xb0>
 8006ce2:	4b4c      	ldr	r3, [pc, #304]	; (8006e14 <mem_malloc+0x1d4>)
 8006ce4:	f240 3287 	movw	r2, #903	; 0x387
 8006ce8:	494b      	ldr	r1, [pc, #300]	; (8006e18 <mem_malloc+0x1d8>)
 8006cea:	484c      	ldr	r0, [pc, #304]	; (8006e1c <mem_malloc+0x1dc>)
 8006cec:	f00a f91a 	bl	8010f24 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006cf0:	8a7b      	ldrh	r3, [r7, #18]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7ff fd00 	bl	80066f8 <ptr_to_mem>
 8006cf8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	881a      	ldrh	r2, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	8bfa      	ldrh	r2, [r7, #30]
 8006d0c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	8a7a      	ldrh	r2, [r7, #18]
 8006d12:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	2201      	movs	r2, #1
 8006d18:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006d22:	d00b      	beq.n	8006d3c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7ff fce5 	bl	80066f8 <ptr_to_mem>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	8a7b      	ldrh	r3, [r7, #18]
 8006d32:	8053      	strh	r3, [r2, #2]
 8006d34:	e002      	b.n	8006d3c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006d3c:	4b34      	ldr	r3, [pc, #208]	; (8006e10 <mem_malloc+0x1d0>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d127      	bne.n	8006d96 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006d46:	4b32      	ldr	r3, [pc, #200]	; (8006e10 <mem_malloc+0x1d0>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006d4c:	e005      	b.n	8006d5a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7ff fcd0 	bl	80066f8 <ptr_to_mem>
 8006d58:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	791b      	ldrb	r3, [r3, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d004      	beq.n	8006d6c <mem_malloc+0x12c>
 8006d62:	4b2f      	ldr	r3, [pc, #188]	; (8006e20 <mem_malloc+0x1e0>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d1f0      	bne.n	8006d4e <mem_malloc+0x10e>
          }
          lfree = cur;
 8006d6c:	4a28      	ldr	r2, [pc, #160]	; (8006e10 <mem_malloc+0x1d0>)
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006d72:	4b27      	ldr	r3, [pc, #156]	; (8006e10 <mem_malloc+0x1d0>)
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	4b2a      	ldr	r3, [pc, #168]	; (8006e20 <mem_malloc+0x1e0>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d00b      	beq.n	8006d96 <mem_malloc+0x156>
 8006d7e:	4b24      	ldr	r3, [pc, #144]	; (8006e10 <mem_malloc+0x1d0>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	791b      	ldrb	r3, [r3, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d006      	beq.n	8006d96 <mem_malloc+0x156>
 8006d88:	4b22      	ldr	r3, [pc, #136]	; (8006e14 <mem_malloc+0x1d4>)
 8006d8a:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006d8e:	4925      	ldr	r1, [pc, #148]	; (8006e24 <mem_malloc+0x1e4>)
 8006d90:	4822      	ldr	r0, [pc, #136]	; (8006e1c <mem_malloc+0x1dc>)
 8006d92:	f00a f8c7 	bl	8010f24 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006d96:	8bba      	ldrh	r2, [r7, #28]
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	4a20      	ldr	r2, [pc, #128]	; (8006e20 <mem_malloc+0x1e0>)
 8006da0:	6812      	ldr	r2, [r2, #0]
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d906      	bls.n	8006db4 <mem_malloc+0x174>
 8006da6:	4b1b      	ldr	r3, [pc, #108]	; (8006e14 <mem_malloc+0x1d4>)
 8006da8:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006dac:	491e      	ldr	r1, [pc, #120]	; (8006e28 <mem_malloc+0x1e8>)
 8006dae:	481b      	ldr	r0, [pc, #108]	; (8006e1c <mem_malloc+0x1dc>)
 8006db0:	f00a f8b8 	bl	8010f24 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f003 0303 	and.w	r3, r3, #3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d006      	beq.n	8006dcc <mem_malloc+0x18c>
 8006dbe:	4b15      	ldr	r3, [pc, #84]	; (8006e14 <mem_malloc+0x1d4>)
 8006dc0:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006dc4:	4919      	ldr	r1, [pc, #100]	; (8006e2c <mem_malloc+0x1ec>)
 8006dc6:	4815      	ldr	r0, [pc, #84]	; (8006e1c <mem_malloc+0x1dc>)
 8006dc8:	f00a f8ac 	bl	8010f24 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f003 0303 	and.w	r3, r3, #3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d006      	beq.n	8006de4 <mem_malloc+0x1a4>
 8006dd6:	4b0f      	ldr	r3, [pc, #60]	; (8006e14 <mem_malloc+0x1d4>)
 8006dd8:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006ddc:	4914      	ldr	r1, [pc, #80]	; (8006e30 <mem_malloc+0x1f0>)
 8006dde:	480f      	ldr	r0, [pc, #60]	; (8006e1c <mem_malloc+0x1dc>)
 8006de0:	f00a f8a0 	bl	8010f24 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	3308      	adds	r3, #8
 8006de8:	e00e      	b.n	8006e08 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006dea:	8bfb      	ldrh	r3, [r7, #30]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7ff fc83 	bl	80066f8 <ptr_to_mem>
 8006df2:	4603      	mov	r3, r0
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006df8:	8bfa      	ldrh	r2, [r7, #30]
 8006dfa:	8bbb      	ldrh	r3, [r7, #28]
 8006dfc:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006e00:	429a      	cmp	r2, r3
 8006e02:	f4ff af44 	bcc.w	8006c8e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3720      	adds	r7, #32
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	20005828 	.word	0x20005828
 8006e14:	080123d4 	.word	0x080123d4
 8006e18:	0801257c 	.word	0x0801257c
 8006e1c:	0801241c 	.word	0x0801241c
 8006e20:	20005824 	.word	0x20005824
 8006e24:	08012590 	.word	0x08012590
 8006e28:	080125ac 	.word	0x080125ac
 8006e2c:	080125dc 	.word	0x080125dc
 8006e30:	0801260c 	.word	0x0801260c

08006e34 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	2200      	movs	r2, #0
 8006e42:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	3303      	adds	r3, #3
 8006e4a:	f023 0303 	bic.w	r3, r3, #3
 8006e4e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006e50:	2300      	movs	r3, #0
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	e011      	b.n	8006e7a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	881b      	ldrh	r3, [r3, #0]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	4413      	add	r3, r2
 8006e72:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	3301      	adds	r3, #1
 8006e78:	60fb      	str	r3, [r7, #12]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	885b      	ldrh	r3, [r3, #2]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4293      	cmp	r3, r2
 8006e84:	dbe7      	blt.n	8006e56 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006e86:	bf00      	nop
 8006e88:	bf00      	nop
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	80fb      	strh	r3, [r7, #6]
 8006e9e:	e009      	b.n	8006eb4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006ea0:	88fb      	ldrh	r3, [r7, #6]
 8006ea2:	4a08      	ldr	r2, [pc, #32]	; (8006ec4 <memp_init+0x30>)
 8006ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7ff ffc3 	bl	8006e34 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006eae:	88fb      	ldrh	r3, [r7, #6]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	80fb      	strh	r3, [r7, #6]
 8006eb4:	88fb      	ldrh	r3, [r7, #6]
 8006eb6:	2b08      	cmp	r3, #8
 8006eb8:	d9f2      	bls.n	8006ea0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006eba:	bf00      	nop
 8006ebc:	bf00      	nop
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	080152c0 	.word	0x080152c0

08006ec8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d012      	beq.n	8006f04 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	6812      	ldr	r2, [r2, #0]
 8006ee6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f003 0303 	and.w	r3, r3, #3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d006      	beq.n	8006f00 <do_memp_malloc_pool+0x38>
 8006ef2:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <do_memp_malloc_pool+0x48>)
 8006ef4:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006ef8:	4906      	ldr	r1, [pc, #24]	; (8006f14 <do_memp_malloc_pool+0x4c>)
 8006efa:	4807      	ldr	r0, [pc, #28]	; (8006f18 <do_memp_malloc_pool+0x50>)
 8006efc:	f00a f812 	bl	8010f24 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	e000      	b.n	8006f06 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	08012630 	.word	0x08012630
 8006f14:	08012660 	.word	0x08012660
 8006f18:	08012684 	.word	0x08012684

08006f1c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d106      	bne.n	8006f38 <memp_malloc_pool+0x1c>
 8006f2a:	4b0a      	ldr	r3, [pc, #40]	; (8006f54 <memp_malloc_pool+0x38>)
 8006f2c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8006f30:	4909      	ldr	r1, [pc, #36]	; (8006f58 <memp_malloc_pool+0x3c>)
 8006f32:	480a      	ldr	r0, [pc, #40]	; (8006f5c <memp_malloc_pool+0x40>)
 8006f34:	f009 fff6 	bl	8010f24 <iprintf>
  if (desc == NULL) {
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <memp_malloc_pool+0x26>
    return NULL;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	e003      	b.n	8006f4a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7ff ffc0 	bl	8006ec8 <do_memp_malloc_pool>
 8006f48:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	08012630 	.word	0x08012630
 8006f58:	080126ac 	.word	0x080126ac
 8006f5c:	08012684 	.word	0x08012684

08006f60 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	4603      	mov	r3, r0
 8006f68:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006f6a:	79fb      	ldrb	r3, [r7, #7]
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d908      	bls.n	8006f82 <memp_malloc+0x22>
 8006f70:	4b0a      	ldr	r3, [pc, #40]	; (8006f9c <memp_malloc+0x3c>)
 8006f72:	f240 1257 	movw	r2, #343	; 0x157
 8006f76:	490a      	ldr	r1, [pc, #40]	; (8006fa0 <memp_malloc+0x40>)
 8006f78:	480a      	ldr	r0, [pc, #40]	; (8006fa4 <memp_malloc+0x44>)
 8006f7a:	f009 ffd3 	bl	8010f24 <iprintf>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	e008      	b.n	8006f94 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006f82:	79fb      	ldrb	r3, [r7, #7]
 8006f84:	4a08      	ldr	r2, [pc, #32]	; (8006fa8 <memp_malloc+0x48>)
 8006f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7ff ff9c 	bl	8006ec8 <do_memp_malloc_pool>
 8006f90:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006f92:	68fb      	ldr	r3, [r7, #12]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	08012630 	.word	0x08012630
 8006fa0:	080126c0 	.word	0x080126c0
 8006fa4:	08012684 	.word	0x08012684
 8006fa8:	080152c0 	.word	0x080152c0

08006fac <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	f003 0303 	and.w	r3, r3, #3
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d006      	beq.n	8006fce <do_memp_free_pool+0x22>
 8006fc0:	4b0a      	ldr	r3, [pc, #40]	; (8006fec <do_memp_free_pool+0x40>)
 8006fc2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006fc6:	490a      	ldr	r1, [pc, #40]	; (8006ff0 <do_memp_free_pool+0x44>)
 8006fc8:	480a      	ldr	r0, [pc, #40]	; (8006ff4 <do_memp_free_pool+0x48>)
 8006fca:	f009 ffab 	bl	8010f24 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006fe4:	bf00      	nop
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	08012630 	.word	0x08012630
 8006ff0:	080126e0 	.word	0x080126e0
 8006ff4:	08012684 	.word	0x08012684

08006ff8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d106      	bne.n	8007016 <memp_free_pool+0x1e>
 8007008:	4b0a      	ldr	r3, [pc, #40]	; (8007034 <memp_free_pool+0x3c>)
 800700a:	f240 1295 	movw	r2, #405	; 0x195
 800700e:	490a      	ldr	r1, [pc, #40]	; (8007038 <memp_free_pool+0x40>)
 8007010:	480a      	ldr	r0, [pc, #40]	; (800703c <memp_free_pool+0x44>)
 8007012:	f009 ff87 	bl	8010f24 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d007      	beq.n	800702c <memp_free_pool+0x34>
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d004      	beq.n	800702c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8007022:	6839      	ldr	r1, [r7, #0]
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7ff ffc1 	bl	8006fac <do_memp_free_pool>
 800702a:	e000      	b.n	800702e <memp_free_pool+0x36>
    return;
 800702c:	bf00      	nop
}
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	08012630 	.word	0x08012630
 8007038:	080126ac 	.word	0x080126ac
 800703c:	08012684 	.word	0x08012684

08007040 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	4603      	mov	r3, r0
 8007048:	6039      	str	r1, [r7, #0]
 800704a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800704c:	79fb      	ldrb	r3, [r7, #7]
 800704e:	2b08      	cmp	r3, #8
 8007050:	d907      	bls.n	8007062 <memp_free+0x22>
 8007052:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <memp_free+0x44>)
 8007054:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007058:	490b      	ldr	r1, [pc, #44]	; (8007088 <memp_free+0x48>)
 800705a:	480c      	ldr	r0, [pc, #48]	; (800708c <memp_free+0x4c>)
 800705c:	f009 ff62 	bl	8010f24 <iprintf>
 8007060:	e00c      	b.n	800707c <memp_free+0x3c>

  if (mem == NULL) {
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d008      	beq.n	800707a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007068:	79fb      	ldrb	r3, [r7, #7]
 800706a:	4a09      	ldr	r2, [pc, #36]	; (8007090 <memp_free+0x50>)
 800706c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	4618      	mov	r0, r3
 8007074:	f7ff ff9a 	bl	8006fac <do_memp_free_pool>
 8007078:	e000      	b.n	800707c <memp_free+0x3c>
    return;
 800707a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	08012630 	.word	0x08012630
 8007088:	08012700 	.word	0x08012700
 800708c:	08012684 	.word	0x08012684
 8007090:	080152c0 	.word	0x080152c0

08007094 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007094:	b480      	push	{r7}
 8007096:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007098:	bf00      	nop
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
	...

080070a4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b086      	sub	sp, #24
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
 80070b0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d108      	bne.n	80070ca <netif_add+0x26>
 80070b8:	4b57      	ldr	r3, [pc, #348]	; (8007218 <netif_add+0x174>)
 80070ba:	f240 1227 	movw	r2, #295	; 0x127
 80070be:	4957      	ldr	r1, [pc, #348]	; (800721c <netif_add+0x178>)
 80070c0:	4857      	ldr	r0, [pc, #348]	; (8007220 <netif_add+0x17c>)
 80070c2:	f009 ff2f 	bl	8010f24 <iprintf>
 80070c6:	2300      	movs	r3, #0
 80070c8:	e0a2      	b.n	8007210 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d108      	bne.n	80070e2 <netif_add+0x3e>
 80070d0:	4b51      	ldr	r3, [pc, #324]	; (8007218 <netif_add+0x174>)
 80070d2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80070d6:	4953      	ldr	r1, [pc, #332]	; (8007224 <netif_add+0x180>)
 80070d8:	4851      	ldr	r0, [pc, #324]	; (8007220 <netif_add+0x17c>)
 80070da:	f009 ff23 	bl	8010f24 <iprintf>
 80070de:	2300      	movs	r3, #0
 80070e0:	e096      	b.n	8007210 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80070e8:	4b4f      	ldr	r3, [pc, #316]	; (8007228 <netif_add+0x184>)
 80070ea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80070f2:	4b4d      	ldr	r3, [pc, #308]	; (8007228 <netif_add+0x184>)
 80070f4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80070fc:	4b4a      	ldr	r3, [pc, #296]	; (8007228 <netif_add+0x184>)
 80070fe:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	4a45      	ldr	r2, [pc, #276]	; (800722c <netif_add+0x188>)
 8007116:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6a3a      	ldr	r2, [r7, #32]
 8007130:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007132:	4b3f      	ldr	r3, [pc, #252]	; (8007230 <netif_add+0x18c>)
 8007134:	781a      	ldrb	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007140:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	68b9      	ldr	r1, [r7, #8]
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f000 f913 	bl	8007374 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	4798      	blx	r3
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <netif_add+0xba>
    return NULL;
 800715a:	2300      	movs	r3, #0
 800715c:	e058      	b.n	8007210 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007164:	2bff      	cmp	r3, #255	; 0xff
 8007166:	d103      	bne.n	8007170 <netif_add+0xcc>
        netif->num = 0;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8007170:	2300      	movs	r3, #0
 8007172:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007174:	4b2f      	ldr	r3, [pc, #188]	; (8007234 <netif_add+0x190>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	617b      	str	r3, [r7, #20]
 800717a:	e02b      	b.n	80071d4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	429a      	cmp	r2, r3
 8007182:	d106      	bne.n	8007192 <netif_add+0xee>
 8007184:	4b24      	ldr	r3, [pc, #144]	; (8007218 <netif_add+0x174>)
 8007186:	f240 128b 	movw	r2, #395	; 0x18b
 800718a:	492b      	ldr	r1, [pc, #172]	; (8007238 <netif_add+0x194>)
 800718c:	4824      	ldr	r0, [pc, #144]	; (8007220 <netif_add+0x17c>)
 800718e:	f009 fec9 	bl	8010f24 <iprintf>
        num_netifs++;
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	3301      	adds	r3, #1
 8007196:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	2bff      	cmp	r3, #255	; 0xff
 800719c:	dd06      	ble.n	80071ac <netif_add+0x108>
 800719e:	4b1e      	ldr	r3, [pc, #120]	; (8007218 <netif_add+0x174>)
 80071a0:	f240 128d 	movw	r2, #397	; 0x18d
 80071a4:	4925      	ldr	r1, [pc, #148]	; (800723c <netif_add+0x198>)
 80071a6:	481e      	ldr	r0, [pc, #120]	; (8007220 <netif_add+0x17c>)
 80071a8:	f009 febc 	bl	8010f24 <iprintf>
        if (netif2->num == netif->num) {
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d108      	bne.n	80071ce <netif_add+0x12a>
          netif->num++;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071c2:	3301      	adds	r3, #1
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80071cc:	e005      	b.n	80071da <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	617b      	str	r3, [r7, #20]
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1d0      	bne.n	800717c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1be      	bne.n	800715e <netif_add+0xba>
  }
  if (netif->num == 254) {
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071e6:	2bfe      	cmp	r3, #254	; 0xfe
 80071e8:	d103      	bne.n	80071f2 <netif_add+0x14e>
    netif_num = 0;
 80071ea:	4b11      	ldr	r3, [pc, #68]	; (8007230 <netif_add+0x18c>)
 80071ec:	2200      	movs	r2, #0
 80071ee:	701a      	strb	r2, [r3, #0]
 80071f0:	e006      	b.n	8007200 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071f8:	3301      	adds	r3, #1
 80071fa:	b2da      	uxtb	r2, r3
 80071fc:	4b0c      	ldr	r3, [pc, #48]	; (8007230 <netif_add+0x18c>)
 80071fe:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007200:	4b0c      	ldr	r3, [pc, #48]	; (8007234 <netif_add+0x190>)
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007208:	4a0a      	ldr	r2, [pc, #40]	; (8007234 <netif_add+0x190>)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800720e:	68fb      	ldr	r3, [r7, #12]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3718      	adds	r7, #24
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	0801271c 	.word	0x0801271c
 800721c:	080127b0 	.word	0x080127b0
 8007220:	0801276c 	.word	0x0801276c
 8007224:	080127cc 	.word	0x080127cc
 8007228:	08015324 	.word	0x08015324
 800722c:	0800764f 	.word	0x0800764f
 8007230:	20008720 	.word	0x20008720
 8007234:	20008718 	.word	0x20008718
 8007238:	080127f0 	.word	0x080127f0
 800723c:	08012804 	.word	0x08012804

08007240 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f002 fde9 	bl	8009e24 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f007 fb25 	bl	800e8a4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800725a:	bf00      	nop
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
	...

08007264 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d106      	bne.n	8007284 <netif_do_set_ipaddr+0x20>
 8007276:	4b1d      	ldr	r3, [pc, #116]	; (80072ec <netif_do_set_ipaddr+0x88>)
 8007278:	f240 12cb 	movw	r2, #459	; 0x1cb
 800727c:	491c      	ldr	r1, [pc, #112]	; (80072f0 <netif_do_set_ipaddr+0x8c>)
 800727e:	481d      	ldr	r0, [pc, #116]	; (80072f4 <netif_do_set_ipaddr+0x90>)
 8007280:	f009 fe50 	bl	8010f24 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d106      	bne.n	8007298 <netif_do_set_ipaddr+0x34>
 800728a:	4b18      	ldr	r3, [pc, #96]	; (80072ec <netif_do_set_ipaddr+0x88>)
 800728c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8007290:	4917      	ldr	r1, [pc, #92]	; (80072f0 <netif_do_set_ipaddr+0x8c>)
 8007292:	4818      	ldr	r0, [pc, #96]	; (80072f4 <netif_do_set_ipaddr+0x90>)
 8007294:	f009 fe46 	bl	8010f24 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	3304      	adds	r3, #4
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d01c      	beq.n	80072e0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	3304      	adds	r3, #4
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80072b6:	f107 0314 	add.w	r3, r7, #20
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7ff ffbf 	bl	8007240 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d002      	beq.n	80072ce <netif_do_set_ipaddr+0x6a>
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	e000      	b.n	80072d0 <netif_do_set_ipaddr+0x6c>
 80072ce:	2300      	movs	r3, #0
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80072d4:	2101      	movs	r1, #1
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 f8d2 	bl	8007480 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80072dc:	2301      	movs	r3, #1
 80072de:	e000      	b.n	80072e2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3718      	adds	r7, #24
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	0801271c 	.word	0x0801271c
 80072f0:	08012834 	.word	0x08012834
 80072f4:	0801276c 	.word	0x0801276c

080072f8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	3308      	adds	r3, #8
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	429a      	cmp	r2, r3
 8007310:	d00a      	beq.n	8007328 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d002      	beq.n	800731e <netif_do_set_netmask+0x26>
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	e000      	b.n	8007320 <netif_do_set_netmask+0x28>
 800731e:	2300      	movs	r3, #0
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007324:	2301      	movs	r3, #1
 8007326:	e000      	b.n	800732a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007336:	b480      	push	{r7}
 8007338:	b085      	sub	sp, #20
 800733a:	af00      	add	r7, sp, #0
 800733c:	60f8      	str	r0, [r7, #12]
 800733e:	60b9      	str	r1, [r7, #8]
 8007340:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	330c      	adds	r3, #12
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	429a      	cmp	r2, r3
 800734e:	d00a      	beq.n	8007366 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d002      	beq.n	800735c <netif_do_set_gw+0x26>
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	e000      	b.n	800735e <netif_do_set_gw+0x28>
 800735c:	2300      	movs	r3, #0
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007362:	2301      	movs	r3, #1
 8007364:	e000      	b.n	8007368 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3714      	adds	r7, #20
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b088      	sub	sp, #32
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
 8007380:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007382:	2300      	movs	r3, #0
 8007384:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007386:	2300      	movs	r3, #0
 8007388:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007390:	4b1c      	ldr	r3, [pc, #112]	; (8007404 <netif_set_addr+0x90>)
 8007392:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800739a:	4b1a      	ldr	r3, [pc, #104]	; (8007404 <netif_set_addr+0x90>)
 800739c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80073a4:	4b17      	ldr	r3, [pc, #92]	; (8007404 <netif_set_addr+0x90>)
 80073a6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d003      	beq.n	80073b6 <netif_set_addr+0x42>
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <netif_set_addr+0x46>
 80073b6:	2301      	movs	r3, #1
 80073b8:	e000      	b.n	80073bc <netif_set_addr+0x48>
 80073ba:	2300      	movs	r3, #0
 80073bc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d006      	beq.n	80073d2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80073c4:	f107 0310 	add.w	r3, r7, #16
 80073c8:	461a      	mov	r2, r3
 80073ca:	68b9      	ldr	r1, [r7, #8]
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f7ff ff49 	bl	8007264 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80073d2:	69fa      	ldr	r2, [r7, #28]
 80073d4:	6879      	ldr	r1, [r7, #4]
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f7ff ff8e 	bl	80072f8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f7ff ffa8 	bl	8007336 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d106      	bne.n	80073fa <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80073ec:	f107 0310 	add.w	r3, r7, #16
 80073f0:	461a      	mov	r2, r3
 80073f2:	68b9      	ldr	r1, [r7, #8]
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f7ff ff35 	bl	8007264 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80073fa:	bf00      	nop
 80073fc:	3720      	adds	r7, #32
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	08015324 	.word	0x08015324

08007408 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007410:	4a04      	ldr	r2, [pc, #16]	; (8007424 <netif_set_default+0x1c>)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007416:	bf00      	nop
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	2000871c 	.word	0x2000871c

08007428 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d107      	bne.n	8007446 <netif_set_up+0x1e>
 8007436:	4b0f      	ldr	r3, [pc, #60]	; (8007474 <netif_set_up+0x4c>)
 8007438:	f44f 7254 	mov.w	r2, #848	; 0x350
 800743c:	490e      	ldr	r1, [pc, #56]	; (8007478 <netif_set_up+0x50>)
 800743e:	480f      	ldr	r0, [pc, #60]	; (800747c <netif_set_up+0x54>)
 8007440:	f009 fd70 	bl	8010f24 <iprintf>
 8007444:	e013      	b.n	800746e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10c      	bne.n	800746e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800745a:	f043 0301 	orr.w	r3, r3, #1
 800745e:	b2da      	uxtb	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007466:	2103      	movs	r1, #3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f809 	bl	8007480 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	0801271c 	.word	0x0801271c
 8007478:	080128a4 	.word	0x080128a4
 800747c:	0801276c 	.word	0x0801276c

08007480 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	460b      	mov	r3, r1
 800748a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d106      	bne.n	80074a0 <netif_issue_reports+0x20>
 8007492:	4b18      	ldr	r3, [pc, #96]	; (80074f4 <netif_issue_reports+0x74>)
 8007494:	f240 326d 	movw	r2, #877	; 0x36d
 8007498:	4917      	ldr	r1, [pc, #92]	; (80074f8 <netif_issue_reports+0x78>)
 800749a:	4818      	ldr	r0, [pc, #96]	; (80074fc <netif_issue_reports+0x7c>)
 800749c:	f009 fd42 	bl	8010f24 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80074a6:	f003 0304 	and.w	r3, r3, #4
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d01e      	beq.n	80074ec <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80074b4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d017      	beq.n	80074ec <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80074bc:	78fb      	ldrb	r3, [r7, #3]
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d013      	beq.n	80074ee <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	3304      	adds	r3, #4
 80074ca:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00e      	beq.n	80074ee <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80074d6:	f003 0308 	and.w	r3, r3, #8
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d007      	beq.n	80074ee <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	3304      	adds	r3, #4
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f008 f947 	bl	800f778 <etharp_request>
 80074ea:	e000      	b.n	80074ee <netif_issue_reports+0x6e>
    return;
 80074ec:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	0801271c 	.word	0x0801271c
 80074f8:	080128c0 	.word	0x080128c0
 80074fc:	0801276c 	.word	0x0801276c

08007500 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d107      	bne.n	800751e <netif_set_down+0x1e>
 800750e:	4b12      	ldr	r3, [pc, #72]	; (8007558 <netif_set_down+0x58>)
 8007510:	f240 329b 	movw	r2, #923	; 0x39b
 8007514:	4911      	ldr	r1, [pc, #68]	; (800755c <netif_set_down+0x5c>)
 8007516:	4812      	ldr	r0, [pc, #72]	; (8007560 <netif_set_down+0x60>)
 8007518:	f009 fd04 	bl	8010f24 <iprintf>
 800751c:	e019      	b.n	8007552 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b00      	cmp	r3, #0
 800752a:	d012      	beq.n	8007552 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007532:	f023 0301 	bic.w	r3, r3, #1
 8007536:	b2da      	uxtb	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007544:	f003 0308 	and.w	r3, r3, #8
 8007548:	2b00      	cmp	r3, #0
 800754a:	d002      	beq.n	8007552 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f007 fcd1 	bl	800eef4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	0801271c 	.word	0x0801271c
 800755c:	080128e4 	.word	0x080128e4
 8007560:	0801276c 	.word	0x0801276c

08007564 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d107      	bne.n	8007582 <netif_set_link_up+0x1e>
 8007572:	4b13      	ldr	r3, [pc, #76]	; (80075c0 <netif_set_link_up+0x5c>)
 8007574:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8007578:	4912      	ldr	r1, [pc, #72]	; (80075c4 <netif_set_link_up+0x60>)
 800757a:	4813      	ldr	r0, [pc, #76]	; (80075c8 <netif_set_link_up+0x64>)
 800757c:	f009 fcd2 	bl	8010f24 <iprintf>
 8007580:	e01b      	b.n	80075ba <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007588:	f003 0304 	and.w	r3, r3, #4
 800758c:	2b00      	cmp	r3, #0
 800758e:	d114      	bne.n	80075ba <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007596:	f043 0304 	orr.w	r3, r3, #4
 800759a:	b2da      	uxtb	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80075a2:	2103      	movs	r1, #3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f7ff ff6b 	bl	8007480 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <netif_set_link_up+0x56>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	0801271c 	.word	0x0801271c
 80075c4:	08012904 	.word	0x08012904
 80075c8:	0801276c 	.word	0x0801276c

080075cc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d107      	bne.n	80075ea <netif_set_link_down+0x1e>
 80075da:	4b11      	ldr	r3, [pc, #68]	; (8007620 <netif_set_link_down+0x54>)
 80075dc:	f240 4206 	movw	r2, #1030	; 0x406
 80075e0:	4910      	ldr	r1, [pc, #64]	; (8007624 <netif_set_link_down+0x58>)
 80075e2:	4811      	ldr	r0, [pc, #68]	; (8007628 <netif_set_link_down+0x5c>)
 80075e4:	f009 fc9e 	bl	8010f24 <iprintf>
 80075e8:	e017      	b.n	800761a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d010      	beq.n	800761a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80075fe:	f023 0304 	bic.w	r3, r3, #4
 8007602:	b2da      	uxtb	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d003      	beq.n	800761a <netif_set_link_down+0x4e>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	0801271c 	.word	0x0801271c
 8007624:	08012928 	.word	0x08012928
 8007628:	0801276c 	.word	0x0801276c

0800762c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	61da      	str	r2, [r3, #28]
  }
}
 8007642:	bf00      	nop
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800764e:	b480      	push	{r7}
 8007650:	b085      	sub	sp, #20
 8007652:	af00      	add	r7, sp, #0
 8007654:	60f8      	str	r0, [r7, #12]
 8007656:	60b9      	str	r1, [r7, #8]
 8007658:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800765a:	f06f 030b 	mvn.w	r3, #11
}
 800765e:	4618      	mov	r0, r3
 8007660:	3714      	adds	r7, #20
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
	...

0800766c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	4603      	mov	r3, r0
 8007674:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007676:	79fb      	ldrb	r3, [r7, #7]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d013      	beq.n	80076a4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800767c:	4b0d      	ldr	r3, [pc, #52]	; (80076b4 <netif_get_by_index+0x48>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	60fb      	str	r3, [r7, #12]
 8007682:	e00c      	b.n	800769e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800768a:	3301      	adds	r3, #1
 800768c:	b2db      	uxtb	r3, r3
 800768e:	79fa      	ldrb	r2, [r7, #7]
 8007690:	429a      	cmp	r2, r3
 8007692:	d101      	bne.n	8007698 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	e006      	b.n	80076a6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1ef      	bne.n	8007684 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	20008718 	.word	0x20008718

080076b8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80076be:	4b0c      	ldr	r3, [pc, #48]	; (80076f0 <pbuf_free_ooseq+0x38>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80076c4:	4b0b      	ldr	r3, [pc, #44]	; (80076f4 <pbuf_free_ooseq+0x3c>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	607b      	str	r3, [r7, #4]
 80076ca:	e00a      	b.n	80076e2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d003      	beq.n	80076dc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f002 fbe3 	bl	8009ea0 <tcp_free_ooseq>
      return;
 80076da:	e005      	b.n	80076e8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	607b      	str	r3, [r7, #4]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1f1      	bne.n	80076cc <pbuf_free_ooseq+0x14>
    }
  }
}
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	20008721 	.word	0x20008721
 80076f4:	20008730 	.word	0x20008730

080076f8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80076f8:	b480      	push	{r7}
 80076fa:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80076fc:	4b03      	ldr	r3, [pc, #12]	; (800770c <pbuf_pool_is_empty+0x14>)
 80076fe:	2201      	movs	r2, #1
 8007700:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007702:	bf00      	nop
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	20008721 	.word	0x20008721

08007710 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	4611      	mov	r1, r2
 800771c:	461a      	mov	r2, r3
 800771e:	460b      	mov	r3, r1
 8007720:	80fb      	strh	r3, [r7, #6]
 8007722:	4613      	mov	r3, r2
 8007724:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	88fa      	ldrh	r2, [r7, #6]
 8007736:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	88ba      	ldrh	r2, [r7, #4]
 800773c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800773e:	8b3b      	ldrh	r3, [r7, #24]
 8007740:	b2da      	uxtb	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	7f3a      	ldrb	r2, [r7, #28]
 800774a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2201      	movs	r2, #1
 8007750:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	73da      	strb	r2, [r3, #15]
}
 8007758:	bf00      	nop
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b08c      	sub	sp, #48	; 0x30
 8007768:	af02      	add	r7, sp, #8
 800776a:	4603      	mov	r3, r0
 800776c:	71fb      	strb	r3, [r7, #7]
 800776e:	460b      	mov	r3, r1
 8007770:	80bb      	strh	r3, [r7, #4]
 8007772:	4613      	mov	r3, r2
 8007774:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007776:	79fb      	ldrb	r3, [r7, #7]
 8007778:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800777a:	887b      	ldrh	r3, [r7, #2]
 800777c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007780:	d07f      	beq.n	8007882 <pbuf_alloc+0x11e>
 8007782:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007786:	f300 80c8 	bgt.w	800791a <pbuf_alloc+0x1b6>
 800778a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800778e:	d010      	beq.n	80077b2 <pbuf_alloc+0x4e>
 8007790:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007794:	f300 80c1 	bgt.w	800791a <pbuf_alloc+0x1b6>
 8007798:	2b01      	cmp	r3, #1
 800779a:	d002      	beq.n	80077a2 <pbuf_alloc+0x3e>
 800779c:	2b41      	cmp	r3, #65	; 0x41
 800779e:	f040 80bc 	bne.w	800791a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80077a2:	887a      	ldrh	r2, [r7, #2]
 80077a4:	88bb      	ldrh	r3, [r7, #4]
 80077a6:	4619      	mov	r1, r3
 80077a8:	2000      	movs	r0, #0
 80077aa:	f000 f8d1 	bl	8007950 <pbuf_alloc_reference>
 80077ae:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80077b0:	e0bd      	b.n	800792e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80077b2:	2300      	movs	r3, #0
 80077b4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80077ba:	88bb      	ldrh	r3, [r7, #4]
 80077bc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80077be:	2008      	movs	r0, #8
 80077c0:	f7ff fbce 	bl	8006f60 <memp_malloc>
 80077c4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d109      	bne.n	80077e0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80077cc:	f7ff ff94 	bl	80076f8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80077d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <pbuf_alloc+0x78>
            pbuf_free(p);
 80077d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077d8:	f000 faa8 	bl	8007d2c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80077dc:	2300      	movs	r3, #0
 80077de:	e0a7      	b.n	8007930 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80077e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077e2:	3303      	adds	r3, #3
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	f023 0303 	bic.w	r3, r3, #3
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	8b7a      	ldrh	r2, [r7, #26]
 80077f4:	4293      	cmp	r3, r2
 80077f6:	bf28      	it	cs
 80077f8:	4613      	movcs	r3, r2
 80077fa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80077fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077fe:	3310      	adds	r3, #16
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	4413      	add	r3, r2
 8007804:	3303      	adds	r3, #3
 8007806:	f023 0303 	bic.w	r3, r3, #3
 800780a:	4618      	mov	r0, r3
 800780c:	89f9      	ldrh	r1, [r7, #14]
 800780e:	8b7a      	ldrh	r2, [r7, #26]
 8007810:	2300      	movs	r3, #0
 8007812:	9301      	str	r3, [sp, #4]
 8007814:	887b      	ldrh	r3, [r7, #2]
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	460b      	mov	r3, r1
 800781a:	4601      	mov	r1, r0
 800781c:	6938      	ldr	r0, [r7, #16]
 800781e:	f7ff ff77 	bl	8007710 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f003 0303 	and.w	r3, r3, #3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d006      	beq.n	800783c <pbuf_alloc+0xd8>
 800782e:	4b42      	ldr	r3, [pc, #264]	; (8007938 <pbuf_alloc+0x1d4>)
 8007830:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007834:	4941      	ldr	r1, [pc, #260]	; (800793c <pbuf_alloc+0x1d8>)
 8007836:	4842      	ldr	r0, [pc, #264]	; (8007940 <pbuf_alloc+0x1dc>)
 8007838:	f009 fb74 	bl	8010f24 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800783c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800783e:	3303      	adds	r3, #3
 8007840:	f023 0303 	bic.w	r3, r3, #3
 8007844:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8007848:	d106      	bne.n	8007858 <pbuf_alloc+0xf4>
 800784a:	4b3b      	ldr	r3, [pc, #236]	; (8007938 <pbuf_alloc+0x1d4>)
 800784c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007850:	493c      	ldr	r1, [pc, #240]	; (8007944 <pbuf_alloc+0x1e0>)
 8007852:	483b      	ldr	r0, [pc, #236]	; (8007940 <pbuf_alloc+0x1dc>)
 8007854:	f009 fb66 	bl	8010f24 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	2b00      	cmp	r3, #0
 800785c:	d102      	bne.n	8007864 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	627b      	str	r3, [r7, #36]	; 0x24
 8007862:	e002      	b.n	800786a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800786e:	8b7a      	ldrh	r2, [r7, #26]
 8007870:	89fb      	ldrh	r3, [r7, #14]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8007876:	2300      	movs	r3, #0
 8007878:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800787a:	8b7b      	ldrh	r3, [r7, #26]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d19e      	bne.n	80077be <pbuf_alloc+0x5a>
      break;
 8007880:	e055      	b.n	800792e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007882:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007884:	3303      	adds	r3, #3
 8007886:	b29b      	uxth	r3, r3
 8007888:	f023 0303 	bic.w	r3, r3, #3
 800788c:	b29a      	uxth	r2, r3
 800788e:	88bb      	ldrh	r3, [r7, #4]
 8007890:	3303      	adds	r3, #3
 8007892:	b29b      	uxth	r3, r3
 8007894:	f023 0303 	bic.w	r3, r3, #3
 8007898:	b29b      	uxth	r3, r3
 800789a:	4413      	add	r3, r2
 800789c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800789e:	8b3b      	ldrh	r3, [r7, #24]
 80078a0:	3310      	adds	r3, #16
 80078a2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80078a4:	8b3a      	ldrh	r2, [r7, #24]
 80078a6:	88bb      	ldrh	r3, [r7, #4]
 80078a8:	3303      	adds	r3, #3
 80078aa:	f023 0303 	bic.w	r3, r3, #3
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d306      	bcc.n	80078c0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80078b2:	8afa      	ldrh	r2, [r7, #22]
 80078b4:	88bb      	ldrh	r3, [r7, #4]
 80078b6:	3303      	adds	r3, #3
 80078b8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80078bc:	429a      	cmp	r2, r3
 80078be:	d201      	bcs.n	80078c4 <pbuf_alloc+0x160>
        return NULL;
 80078c0:	2300      	movs	r3, #0
 80078c2:	e035      	b.n	8007930 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80078c4:	8afb      	ldrh	r3, [r7, #22]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7ff f9ba 	bl	8006c40 <mem_malloc>
 80078cc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80078ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d101      	bne.n	80078d8 <pbuf_alloc+0x174>
        return NULL;
 80078d4:	2300      	movs	r3, #0
 80078d6:	e02b      	b.n	8007930 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80078d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80078da:	3310      	adds	r3, #16
 80078dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078de:	4413      	add	r3, r2
 80078e0:	3303      	adds	r3, #3
 80078e2:	f023 0303 	bic.w	r3, r3, #3
 80078e6:	4618      	mov	r0, r3
 80078e8:	88b9      	ldrh	r1, [r7, #4]
 80078ea:	88ba      	ldrh	r2, [r7, #4]
 80078ec:	2300      	movs	r3, #0
 80078ee:	9301      	str	r3, [sp, #4]
 80078f0:	887b      	ldrh	r3, [r7, #2]
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	460b      	mov	r3, r1
 80078f6:	4601      	mov	r1, r0
 80078f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078fa:	f7ff ff09 	bl	8007710 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f003 0303 	and.w	r3, r3, #3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d010      	beq.n	800792c <pbuf_alloc+0x1c8>
 800790a:	4b0b      	ldr	r3, [pc, #44]	; (8007938 <pbuf_alloc+0x1d4>)
 800790c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8007910:	490d      	ldr	r1, [pc, #52]	; (8007948 <pbuf_alloc+0x1e4>)
 8007912:	480b      	ldr	r0, [pc, #44]	; (8007940 <pbuf_alloc+0x1dc>)
 8007914:	f009 fb06 	bl	8010f24 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007918:	e008      	b.n	800792c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800791a:	4b07      	ldr	r3, [pc, #28]	; (8007938 <pbuf_alloc+0x1d4>)
 800791c:	f240 1227 	movw	r2, #295	; 0x127
 8007920:	490a      	ldr	r1, [pc, #40]	; (800794c <pbuf_alloc+0x1e8>)
 8007922:	4807      	ldr	r0, [pc, #28]	; (8007940 <pbuf_alloc+0x1dc>)
 8007924:	f009 fafe 	bl	8010f24 <iprintf>
      return NULL;
 8007928:	2300      	movs	r3, #0
 800792a:	e001      	b.n	8007930 <pbuf_alloc+0x1cc>
      break;
 800792c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007930:	4618      	mov	r0, r3
 8007932:	3728      	adds	r7, #40	; 0x28
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	0801294c 	.word	0x0801294c
 800793c:	0801297c 	.word	0x0801297c
 8007940:	080129ac 	.word	0x080129ac
 8007944:	080129d4 	.word	0x080129d4
 8007948:	08012a08 	.word	0x08012a08
 800794c:	08012a34 	.word	0x08012a34

08007950 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af02      	add	r7, sp, #8
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	460b      	mov	r3, r1
 800795a:	807b      	strh	r3, [r7, #2]
 800795c:	4613      	mov	r3, r2
 800795e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007960:	883b      	ldrh	r3, [r7, #0]
 8007962:	2b41      	cmp	r3, #65	; 0x41
 8007964:	d009      	beq.n	800797a <pbuf_alloc_reference+0x2a>
 8007966:	883b      	ldrh	r3, [r7, #0]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d006      	beq.n	800797a <pbuf_alloc_reference+0x2a>
 800796c:	4b0f      	ldr	r3, [pc, #60]	; (80079ac <pbuf_alloc_reference+0x5c>)
 800796e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8007972:	490f      	ldr	r1, [pc, #60]	; (80079b0 <pbuf_alloc_reference+0x60>)
 8007974:	480f      	ldr	r0, [pc, #60]	; (80079b4 <pbuf_alloc_reference+0x64>)
 8007976:	f009 fad5 	bl	8010f24 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800797a:	2007      	movs	r0, #7
 800797c:	f7ff faf0 	bl	8006f60 <memp_malloc>
 8007980:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d101      	bne.n	800798c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8007988:	2300      	movs	r3, #0
 800798a:	e00b      	b.n	80079a4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800798c:	8879      	ldrh	r1, [r7, #2]
 800798e:	887a      	ldrh	r2, [r7, #2]
 8007990:	2300      	movs	r3, #0
 8007992:	9301      	str	r3, [sp, #4]
 8007994:	883b      	ldrh	r3, [r7, #0]
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	460b      	mov	r3, r1
 800799a:	6879      	ldr	r1, [r7, #4]
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f7ff feb7 	bl	8007710 <pbuf_init_alloced_pbuf>
  return p;
 80079a2:	68fb      	ldr	r3, [r7, #12]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	0801294c 	.word	0x0801294c
 80079b0:	08012a50 	.word	0x08012a50
 80079b4:	080129ac 	.word	0x080129ac

080079b8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af02      	add	r7, sp, #8
 80079be:	607b      	str	r3, [r7, #4]
 80079c0:	4603      	mov	r3, r0
 80079c2:	73fb      	strb	r3, [r7, #15]
 80079c4:	460b      	mov	r3, r1
 80079c6:	81bb      	strh	r3, [r7, #12]
 80079c8:	4613      	mov	r3, r2
 80079ca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80079d0:	8a7b      	ldrh	r3, [r7, #18]
 80079d2:	3303      	adds	r3, #3
 80079d4:	f023 0203 	bic.w	r2, r3, #3
 80079d8:	89bb      	ldrh	r3, [r7, #12]
 80079da:	441a      	add	r2, r3
 80079dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079de:	429a      	cmp	r2, r3
 80079e0:	d901      	bls.n	80079e6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80079e2:	2300      	movs	r3, #0
 80079e4:	e018      	b.n	8007a18 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d007      	beq.n	80079fc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80079ec:	8a7b      	ldrh	r3, [r7, #18]
 80079ee:	3303      	adds	r3, #3
 80079f0:	f023 0303 	bic.w	r3, r3, #3
 80079f4:	6a3a      	ldr	r2, [r7, #32]
 80079f6:	4413      	add	r3, r2
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	e001      	b.n	8007a00 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80079fc:	2300      	movs	r3, #0
 80079fe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	89b9      	ldrh	r1, [r7, #12]
 8007a04:	89ba      	ldrh	r2, [r7, #12]
 8007a06:	2302      	movs	r3, #2
 8007a08:	9301      	str	r3, [sp, #4]
 8007a0a:	897b      	ldrh	r3, [r7, #10]
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	460b      	mov	r3, r1
 8007a10:	6979      	ldr	r1, [r7, #20]
 8007a12:	f7ff fe7d 	bl	8007710 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8007a16:	687b      	ldr	r3, [r7, #4]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3718      	adds	r7, #24
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d106      	bne.n	8007a40 <pbuf_realloc+0x20>
 8007a32:	4b3a      	ldr	r3, [pc, #232]	; (8007b1c <pbuf_realloc+0xfc>)
 8007a34:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007a38:	4939      	ldr	r1, [pc, #228]	; (8007b20 <pbuf_realloc+0x100>)
 8007a3a:	483a      	ldr	r0, [pc, #232]	; (8007b24 <pbuf_realloc+0x104>)
 8007a3c:	f009 fa72 	bl	8010f24 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	891b      	ldrh	r3, [r3, #8]
 8007a44:	887a      	ldrh	r2, [r7, #2]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d263      	bcs.n	8007b12 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	891a      	ldrh	r2, [r3, #8]
 8007a4e:	887b      	ldrh	r3, [r7, #2]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007a54:	887b      	ldrh	r3, [r7, #2]
 8007a56:	817b      	strh	r3, [r7, #10]
  q = p;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007a5c:	e018      	b.n	8007a90 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	895b      	ldrh	r3, [r3, #10]
 8007a62:	897a      	ldrh	r2, [r7, #10]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	891a      	ldrh	r2, [r3, #8]
 8007a6c:	893b      	ldrh	r3, [r7, #8]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d106      	bne.n	8007a90 <pbuf_realloc+0x70>
 8007a82:	4b26      	ldr	r3, [pc, #152]	; (8007b1c <pbuf_realloc+0xfc>)
 8007a84:	f240 12af 	movw	r2, #431	; 0x1af
 8007a88:	4927      	ldr	r1, [pc, #156]	; (8007b28 <pbuf_realloc+0x108>)
 8007a8a:	4826      	ldr	r0, [pc, #152]	; (8007b24 <pbuf_realloc+0x104>)
 8007a8c:	f009 fa4a 	bl	8010f24 <iprintf>
  while (rem_len > q->len) {
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	895b      	ldrh	r3, [r3, #10]
 8007a94:	897a      	ldrh	r2, [r7, #10]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d8e1      	bhi.n	8007a5e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	7b1b      	ldrb	r3, [r3, #12]
 8007a9e:	f003 030f 	and.w	r3, r3, #15
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d121      	bne.n	8007aea <pbuf_realloc+0xca>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	895b      	ldrh	r3, [r3, #10]
 8007aaa:	897a      	ldrh	r2, [r7, #10]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d01c      	beq.n	8007aea <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	7b5b      	ldrb	r3, [r3, #13]
 8007ab4:	f003 0302 	and.w	r3, r3, #2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d116      	bne.n	8007aea <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	897b      	ldrh	r3, [r7, #10]
 8007ac8:	4413      	add	r3, r2
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	4619      	mov	r1, r3
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f7fe ffba 	bl	8006a48 <mem_trim>
 8007ad4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d106      	bne.n	8007aea <pbuf_realloc+0xca>
 8007adc:	4b0f      	ldr	r3, [pc, #60]	; (8007b1c <pbuf_realloc+0xfc>)
 8007ade:	f240 12bd 	movw	r2, #445	; 0x1bd
 8007ae2:	4912      	ldr	r1, [pc, #72]	; (8007b2c <pbuf_realloc+0x10c>)
 8007ae4:	480f      	ldr	r0, [pc, #60]	; (8007b24 <pbuf_realloc+0x104>)
 8007ae6:	f009 fa1d 	bl	8010f24 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	897a      	ldrh	r2, [r7, #10]
 8007aee:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	895a      	ldrh	r2, [r3, #10]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d004      	beq.n	8007b0a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 f911 	bl	8007d2c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	601a      	str	r2, [r3, #0]
 8007b10:	e000      	b.n	8007b14 <pbuf_realloc+0xf4>
    return;
 8007b12:	bf00      	nop

}
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	0801294c 	.word	0x0801294c
 8007b20:	08012a64 	.word	0x08012a64
 8007b24:	080129ac 	.word	0x080129ac
 8007b28:	08012a7c 	.word	0x08012a7c
 8007b2c:	08012a94 	.word	0x08012a94

08007b30 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d106      	bne.n	8007b52 <pbuf_add_header_impl+0x22>
 8007b44:	4b2b      	ldr	r3, [pc, #172]	; (8007bf4 <pbuf_add_header_impl+0xc4>)
 8007b46:	f240 12df 	movw	r2, #479	; 0x1df
 8007b4a:	492b      	ldr	r1, [pc, #172]	; (8007bf8 <pbuf_add_header_impl+0xc8>)
 8007b4c:	482b      	ldr	r0, [pc, #172]	; (8007bfc <pbuf_add_header_impl+0xcc>)
 8007b4e:	f009 f9e9 	bl	8010f24 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d003      	beq.n	8007b60 <pbuf_add_header_impl+0x30>
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b5e:	d301      	bcc.n	8007b64 <pbuf_add_header_impl+0x34>
    return 1;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e043      	b.n	8007bec <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <pbuf_add_header_impl+0x3e>
    return 0;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	e03e      	b.n	8007bec <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	891a      	ldrh	r2, [r3, #8]
 8007b76:	8a7b      	ldrh	r3, [r7, #18]
 8007b78:	4413      	add	r3, r2
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	8a7a      	ldrh	r2, [r7, #18]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d901      	bls.n	8007b86 <pbuf_add_header_impl+0x56>
    return 1;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e032      	b.n	8007bec <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	7b1b      	ldrb	r3, [r3, #12]
 8007b8a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007b8c:	8a3b      	ldrh	r3, [r7, #16]
 8007b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00c      	beq.n	8007bb0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	685a      	ldr	r2, [r3, #4]
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	425b      	negs	r3, r3
 8007b9e:	4413      	add	r3, r2
 8007ba0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	3310      	adds	r3, #16
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d20d      	bcs.n	8007bc8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e01d      	b.n	8007bec <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007bb0:	79fb      	ldrb	r3, [r7, #7]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d006      	beq.n	8007bc4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	685a      	ldr	r2, [r3, #4]
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	425b      	negs	r3, r3
 8007bbe:	4413      	add	r3, r2
 8007bc0:	617b      	str	r3, [r7, #20]
 8007bc2:	e001      	b.n	8007bc8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e011      	b.n	8007bec <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	895a      	ldrh	r2, [r3, #10]
 8007bd2:	8a7b      	ldrh	r3, [r7, #18]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	891a      	ldrh	r2, [r3, #8]
 8007be0:	8a7b      	ldrh	r3, [r7, #18]
 8007be2:	4413      	add	r3, r2
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	811a      	strh	r2, [r3, #8]


  return 0;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3718      	adds	r7, #24
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	0801294c 	.word	0x0801294c
 8007bf8:	08012ab0 	.word	0x08012ab0
 8007bfc:	080129ac 	.word	0x080129ac

08007c00 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7ff ff8e 	bl	8007b30 <pbuf_add_header_impl>
 8007c14:	4603      	mov	r3, r0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
	...

08007c20 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d106      	bne.n	8007c3e <pbuf_remove_header+0x1e>
 8007c30:	4b20      	ldr	r3, [pc, #128]	; (8007cb4 <pbuf_remove_header+0x94>)
 8007c32:	f240 224b 	movw	r2, #587	; 0x24b
 8007c36:	4920      	ldr	r1, [pc, #128]	; (8007cb8 <pbuf_remove_header+0x98>)
 8007c38:	4820      	ldr	r0, [pc, #128]	; (8007cbc <pbuf_remove_header+0x9c>)
 8007c3a:	f009 f973 	bl	8010f24 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d003      	beq.n	8007c4c <pbuf_remove_header+0x2c>
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c4a:	d301      	bcc.n	8007c50 <pbuf_remove_header+0x30>
    return 1;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e02c      	b.n	8007caa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <pbuf_remove_header+0x3a>
    return 0;
 8007c56:	2300      	movs	r3, #0
 8007c58:	e027      	b.n	8007caa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	895b      	ldrh	r3, [r3, #10]
 8007c62:	89fa      	ldrh	r2, [r7, #14]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d908      	bls.n	8007c7a <pbuf_remove_header+0x5a>
 8007c68:	4b12      	ldr	r3, [pc, #72]	; (8007cb4 <pbuf_remove_header+0x94>)
 8007c6a:	f240 2255 	movw	r2, #597	; 0x255
 8007c6e:	4914      	ldr	r1, [pc, #80]	; (8007cc0 <pbuf_remove_header+0xa0>)
 8007c70:	4812      	ldr	r0, [pc, #72]	; (8007cbc <pbuf_remove_header+0x9c>)
 8007c72:	f009 f957 	bl	8010f24 <iprintf>
 8007c76:	2301      	movs	r3, #1
 8007c78:	e017      	b.n	8007caa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	441a      	add	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	895a      	ldrh	r2, [r3, #10]
 8007c90:	89fb      	ldrh	r3, [r7, #14]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	891a      	ldrh	r2, [r3, #8]
 8007c9e:	89fb      	ldrh	r3, [r7, #14]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	0801294c 	.word	0x0801294c
 8007cb8:	08012ab0 	.word	0x08012ab0
 8007cbc:	080129ac 	.word	0x080129ac
 8007cc0:	08012abc 	.word	0x08012abc

08007cc4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	807b      	strh	r3, [r7, #2]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007cd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	da08      	bge.n	8007cee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007cdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007ce0:	425b      	negs	r3, r3
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f7ff ff9b 	bl	8007c20 <pbuf_remove_header>
 8007cea:	4603      	mov	r3, r0
 8007cec:	e007      	b.n	8007cfe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007cee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007cf2:	787a      	ldrb	r2, [r7, #1]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7ff ff1a 	bl	8007b30 <pbuf_add_header_impl>
 8007cfc:	4603      	mov	r3, r0
  }
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b082      	sub	sp, #8
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	460b      	mov	r3, r1
 8007d10:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007d12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007d16:	2201      	movs	r2, #1
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7ff ffd2 	bl	8007cc4 <pbuf_header_impl>
 8007d20:	4603      	mov	r3, r0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
	...

08007d2c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10b      	bne.n	8007d52 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d106      	bne.n	8007d4e <pbuf_free+0x22>
 8007d40:	4b38      	ldr	r3, [pc, #224]	; (8007e24 <pbuf_free+0xf8>)
 8007d42:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007d46:	4938      	ldr	r1, [pc, #224]	; (8007e28 <pbuf_free+0xfc>)
 8007d48:	4838      	ldr	r0, [pc, #224]	; (8007e2c <pbuf_free+0x100>)
 8007d4a:	f009 f8eb 	bl	8010f24 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	e063      	b.n	8007e1a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007d56:	e05c      	b.n	8007e12 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	7b9b      	ldrb	r3, [r3, #14]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d106      	bne.n	8007d6e <pbuf_free+0x42>
 8007d60:	4b30      	ldr	r3, [pc, #192]	; (8007e24 <pbuf_free+0xf8>)
 8007d62:	f240 22f1 	movw	r2, #753	; 0x2f1
 8007d66:	4932      	ldr	r1, [pc, #200]	; (8007e30 <pbuf_free+0x104>)
 8007d68:	4830      	ldr	r0, [pc, #192]	; (8007e2c <pbuf_free+0x100>)
 8007d6a:	f009 f8db 	bl	8010f24 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	7b9b      	ldrb	r3, [r3, #14]
 8007d72:	3b01      	subs	r3, #1
 8007d74:	b2da      	uxtb	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	739a      	strb	r2, [r3, #14]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	7b9b      	ldrb	r3, [r3, #14]
 8007d7e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007d80:	7dbb      	ldrb	r3, [r7, #22]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d143      	bne.n	8007e0e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	7b1b      	ldrb	r3, [r3, #12]
 8007d90:	f003 030f 	and.w	r3, r3, #15
 8007d94:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	7b5b      	ldrb	r3, [r3, #13]
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d011      	beq.n	8007dc6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d106      	bne.n	8007dbc <pbuf_free+0x90>
 8007dae:	4b1d      	ldr	r3, [pc, #116]	; (8007e24 <pbuf_free+0xf8>)
 8007db0:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007db4:	491f      	ldr	r1, [pc, #124]	; (8007e34 <pbuf_free+0x108>)
 8007db6:	481d      	ldr	r0, [pc, #116]	; (8007e2c <pbuf_free+0x100>)
 8007db8:	f009 f8b4 	bl	8010f24 <iprintf>
        pc->custom_free_function(p);
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	4798      	blx	r3
 8007dc4:	e01d      	b.n	8007e02 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d104      	bne.n	8007dd6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007dcc:	6879      	ldr	r1, [r7, #4]
 8007dce:	2008      	movs	r0, #8
 8007dd0:	f7ff f936 	bl	8007040 <memp_free>
 8007dd4:	e015      	b.n	8007e02 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007dd6:	7bfb      	ldrb	r3, [r7, #15]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d104      	bne.n	8007de6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007ddc:	6879      	ldr	r1, [r7, #4]
 8007dde:	2007      	movs	r0, #7
 8007de0:	f7ff f92e 	bl	8007040 <memp_free>
 8007de4:	e00d      	b.n	8007e02 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d103      	bne.n	8007df4 <pbuf_free+0xc8>
          mem_free(p);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7fe fdc1 	bl	8006974 <mem_free>
 8007df2:	e006      	b.n	8007e02 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007df4:	4b0b      	ldr	r3, [pc, #44]	; (8007e24 <pbuf_free+0xf8>)
 8007df6:	f240 320f 	movw	r2, #783	; 0x30f
 8007dfa:	490f      	ldr	r1, [pc, #60]	; (8007e38 <pbuf_free+0x10c>)
 8007dfc:	480b      	ldr	r0, [pc, #44]	; (8007e2c <pbuf_free+0x100>)
 8007dfe:	f009 f891 	bl	8010f24 <iprintf>
        }
      }
      count++;
 8007e02:	7dfb      	ldrb	r3, [r7, #23]
 8007e04:	3301      	adds	r3, #1
 8007e06:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	607b      	str	r3, [r7, #4]
 8007e0c:	e001      	b.n	8007e12 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d19f      	bne.n	8007d58 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3718      	adds	r7, #24
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	0801294c 	.word	0x0801294c
 8007e28:	08012ab0 	.word	0x08012ab0
 8007e2c:	080129ac 	.word	0x080129ac
 8007e30:	08012adc 	.word	0x08012adc
 8007e34:	08012af4 	.word	0x08012af4
 8007e38:	08012b18 	.word	0x08012b18

08007e3c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007e44:	2300      	movs	r3, #0
 8007e46:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007e48:	e005      	b.n	8007e56 <pbuf_clen+0x1a>
    ++len;
 8007e4a:	89fb      	ldrh	r3, [r7, #14]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1f6      	bne.n	8007e4a <pbuf_clen+0xe>
  }
  return len;
 8007e5c:	89fb      	ldrh	r3, [r7, #14]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
	...

08007e6c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d010      	beq.n	8007e9c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	7b9b      	ldrb	r3, [r3, #14]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	7b9b      	ldrb	r3, [r3, #14]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d106      	bne.n	8007e9c <pbuf_ref+0x30>
 8007e8e:	4b05      	ldr	r3, [pc, #20]	; (8007ea4 <pbuf_ref+0x38>)
 8007e90:	f240 3242 	movw	r2, #834	; 0x342
 8007e94:	4904      	ldr	r1, [pc, #16]	; (8007ea8 <pbuf_ref+0x3c>)
 8007e96:	4805      	ldr	r0, [pc, #20]	; (8007eac <pbuf_ref+0x40>)
 8007e98:	f009 f844 	bl	8010f24 <iprintf>
  }
}
 8007e9c:	bf00      	nop
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	0801294c 	.word	0x0801294c
 8007ea8:	08012b2c 	.word	0x08012b2c
 8007eac:	080129ac 	.word	0x080129ac

08007eb0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d002      	beq.n	8007ec6 <pbuf_cat+0x16>
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d107      	bne.n	8007ed6 <pbuf_cat+0x26>
 8007ec6:	4b20      	ldr	r3, [pc, #128]	; (8007f48 <pbuf_cat+0x98>)
 8007ec8:	f240 3259 	movw	r2, #857	; 0x359
 8007ecc:	491f      	ldr	r1, [pc, #124]	; (8007f4c <pbuf_cat+0x9c>)
 8007ece:	4820      	ldr	r0, [pc, #128]	; (8007f50 <pbuf_cat+0xa0>)
 8007ed0:	f009 f828 	bl	8010f24 <iprintf>
 8007ed4:	e034      	b.n	8007f40 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	60fb      	str	r3, [r7, #12]
 8007eda:	e00a      	b.n	8007ef2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	891a      	ldrh	r2, [r3, #8]
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	891b      	ldrh	r3, [r3, #8]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	60fb      	str	r3, [r7, #12]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1f0      	bne.n	8007edc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	891a      	ldrh	r2, [r3, #8]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	895b      	ldrh	r3, [r3, #10]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d006      	beq.n	8007f14 <pbuf_cat+0x64>
 8007f06:	4b10      	ldr	r3, [pc, #64]	; (8007f48 <pbuf_cat+0x98>)
 8007f08:	f240 3262 	movw	r2, #866	; 0x362
 8007f0c:	4911      	ldr	r1, [pc, #68]	; (8007f54 <pbuf_cat+0xa4>)
 8007f0e:	4810      	ldr	r0, [pc, #64]	; (8007f50 <pbuf_cat+0xa0>)
 8007f10:	f009 f808 	bl	8010f24 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d006      	beq.n	8007f2a <pbuf_cat+0x7a>
 8007f1c:	4b0a      	ldr	r3, [pc, #40]	; (8007f48 <pbuf_cat+0x98>)
 8007f1e:	f240 3263 	movw	r2, #867	; 0x363
 8007f22:	490d      	ldr	r1, [pc, #52]	; (8007f58 <pbuf_cat+0xa8>)
 8007f24:	480a      	ldr	r0, [pc, #40]	; (8007f50 <pbuf_cat+0xa0>)
 8007f26:	f008 fffd 	bl	8010f24 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	891a      	ldrh	r2, [r3, #8]
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	891b      	ldrh	r3, [r3, #8]
 8007f32:	4413      	add	r3, r2
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	0801294c 	.word	0x0801294c
 8007f4c:	08012b40 	.word	0x08012b40
 8007f50:	080129ac 	.word	0x080129ac
 8007f54:	08012b78 	.word	0x08012b78
 8007f58:	08012ba8 	.word	0x08012ba8

08007f5c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007f66:	2300      	movs	r3, #0
 8007f68:	617b      	str	r3, [r7, #20]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d008      	beq.n	8007f86 <pbuf_copy+0x2a>
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d005      	beq.n	8007f86 <pbuf_copy+0x2a>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	891a      	ldrh	r2, [r3, #8]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	891b      	ldrh	r3, [r3, #8]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d209      	bcs.n	8007f9a <pbuf_copy+0x3e>
 8007f86:	4b57      	ldr	r3, [pc, #348]	; (80080e4 <pbuf_copy+0x188>)
 8007f88:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007f8c:	4956      	ldr	r1, [pc, #344]	; (80080e8 <pbuf_copy+0x18c>)
 8007f8e:	4857      	ldr	r0, [pc, #348]	; (80080ec <pbuf_copy+0x190>)
 8007f90:	f008 ffc8 	bl	8010f24 <iprintf>
 8007f94:	f06f 030f 	mvn.w	r3, #15
 8007f98:	e09f      	b.n	80080da <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	895b      	ldrh	r3, [r3, #10]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	1ad2      	subs	r2, r2, r3
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	895b      	ldrh	r3, [r3, #10]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	1acb      	subs	r3, r1, r3
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d306      	bcc.n	8007fc0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	895b      	ldrh	r3, [r3, #10]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	e005      	b.n	8007fcc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	895b      	ldrh	r3, [r3, #10]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	18d0      	adds	r0, r2, r3
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	685a      	ldr	r2, [r3, #4]
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	4413      	add	r3, r2
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	f008 ff8a 	bl	8010ef8 <memcpy>
    offset_to += len;
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	4413      	add	r3, r2
 8007fea:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	895b      	ldrh	r3, [r3, #10]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d906      	bls.n	800800e <pbuf_copy+0xb2>
 8008000:	4b38      	ldr	r3, [pc, #224]	; (80080e4 <pbuf_copy+0x188>)
 8008002:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008006:	493a      	ldr	r1, [pc, #232]	; (80080f0 <pbuf_copy+0x194>)
 8008008:	4838      	ldr	r0, [pc, #224]	; (80080ec <pbuf_copy+0x190>)
 800800a:	f008 ff8b 	bl	8010f24 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	895b      	ldrh	r3, [r3, #10]
 8008012:	461a      	mov	r2, r3
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	4293      	cmp	r3, r2
 8008018:	d906      	bls.n	8008028 <pbuf_copy+0xcc>
 800801a:	4b32      	ldr	r3, [pc, #200]	; (80080e4 <pbuf_copy+0x188>)
 800801c:	f240 32da 	movw	r2, #986	; 0x3da
 8008020:	4934      	ldr	r1, [pc, #208]	; (80080f4 <pbuf_copy+0x198>)
 8008022:	4832      	ldr	r0, [pc, #200]	; (80080ec <pbuf_copy+0x190>)
 8008024:	f008 ff7e 	bl	8010f24 <iprintf>
    if (offset_from >= p_from->len) {
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	895b      	ldrh	r3, [r3, #10]
 800802c:	461a      	mov	r2, r3
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	4293      	cmp	r3, r2
 8008032:	d304      	bcc.n	800803e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008034:	2300      	movs	r3, #0
 8008036:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	895b      	ldrh	r3, [r3, #10]
 8008042:	461a      	mov	r2, r3
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	4293      	cmp	r3, r2
 8008048:	d114      	bne.n	8008074 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800804a:	2300      	movs	r3, #0
 800804c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10c      	bne.n	8008074 <pbuf_copy+0x118>
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d009      	beq.n	8008074 <pbuf_copy+0x118>
 8008060:	4b20      	ldr	r3, [pc, #128]	; (80080e4 <pbuf_copy+0x188>)
 8008062:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008066:	4924      	ldr	r1, [pc, #144]	; (80080f8 <pbuf_copy+0x19c>)
 8008068:	4820      	ldr	r0, [pc, #128]	; (80080ec <pbuf_copy+0x190>)
 800806a:	f008 ff5b 	bl	8010f24 <iprintf>
 800806e:	f06f 030f 	mvn.w	r3, #15
 8008072:	e032      	b.n	80080da <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d013      	beq.n	80080a2 <pbuf_copy+0x146>
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	895a      	ldrh	r2, [r3, #10]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	891b      	ldrh	r3, [r3, #8]
 8008082:	429a      	cmp	r2, r3
 8008084:	d10d      	bne.n	80080a2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d009      	beq.n	80080a2 <pbuf_copy+0x146>
 800808e:	4b15      	ldr	r3, [pc, #84]	; (80080e4 <pbuf_copy+0x188>)
 8008090:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008094:	4919      	ldr	r1, [pc, #100]	; (80080fc <pbuf_copy+0x1a0>)
 8008096:	4815      	ldr	r0, [pc, #84]	; (80080ec <pbuf_copy+0x190>)
 8008098:	f008 ff44 	bl	8010f24 <iprintf>
 800809c:	f06f 0305 	mvn.w	r3, #5
 80080a0:	e01b      	b.n	80080da <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d013      	beq.n	80080d0 <pbuf_copy+0x174>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	895a      	ldrh	r2, [r3, #10]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	891b      	ldrh	r3, [r3, #8]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d10d      	bne.n	80080d0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d009      	beq.n	80080d0 <pbuf_copy+0x174>
 80080bc:	4b09      	ldr	r3, [pc, #36]	; (80080e4 <pbuf_copy+0x188>)
 80080be:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80080c2:	490e      	ldr	r1, [pc, #56]	; (80080fc <pbuf_copy+0x1a0>)
 80080c4:	4809      	ldr	r0, [pc, #36]	; (80080ec <pbuf_copy+0x190>)
 80080c6:	f008 ff2d 	bl	8010f24 <iprintf>
 80080ca:	f06f 0305 	mvn.w	r3, #5
 80080ce:	e004      	b.n	80080da <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f47f af61 	bne.w	8007f9a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3718      	adds	r7, #24
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	0801294c 	.word	0x0801294c
 80080e8:	08012bf4 	.word	0x08012bf4
 80080ec:	080129ac 	.word	0x080129ac
 80080f0:	08012c24 	.word	0x08012c24
 80080f4:	08012c3c 	.word	0x08012c3c
 80080f8:	08012c58 	.word	0x08012c58
 80080fc:	08012c68 	.word	0x08012c68

08008100 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b088      	sub	sp, #32
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	4611      	mov	r1, r2
 800810c:	461a      	mov	r2, r3
 800810e:	460b      	mov	r3, r1
 8008110:	80fb      	strh	r3, [r7, #6]
 8008112:	4613      	mov	r3, r2
 8008114:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008116:	2300      	movs	r3, #0
 8008118:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800811a:	2300      	movs	r3, #0
 800811c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d108      	bne.n	8008136 <pbuf_copy_partial+0x36>
 8008124:	4b2b      	ldr	r3, [pc, #172]	; (80081d4 <pbuf_copy_partial+0xd4>)
 8008126:	f240 420a 	movw	r2, #1034	; 0x40a
 800812a:	492b      	ldr	r1, [pc, #172]	; (80081d8 <pbuf_copy_partial+0xd8>)
 800812c:	482b      	ldr	r0, [pc, #172]	; (80081dc <pbuf_copy_partial+0xdc>)
 800812e:	f008 fef9 	bl	8010f24 <iprintf>
 8008132:	2300      	movs	r3, #0
 8008134:	e04a      	b.n	80081cc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d108      	bne.n	800814e <pbuf_copy_partial+0x4e>
 800813c:	4b25      	ldr	r3, [pc, #148]	; (80081d4 <pbuf_copy_partial+0xd4>)
 800813e:	f240 420b 	movw	r2, #1035	; 0x40b
 8008142:	4927      	ldr	r1, [pc, #156]	; (80081e0 <pbuf_copy_partial+0xe0>)
 8008144:	4825      	ldr	r0, [pc, #148]	; (80081dc <pbuf_copy_partial+0xdc>)
 8008146:	f008 feed 	bl	8010f24 <iprintf>
 800814a:	2300      	movs	r3, #0
 800814c:	e03e      	b.n	80081cc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	61fb      	str	r3, [r7, #28]
 8008152:	e034      	b.n	80081be <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008154:	88bb      	ldrh	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00a      	beq.n	8008170 <pbuf_copy_partial+0x70>
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	895b      	ldrh	r3, [r3, #10]
 800815e:	88ba      	ldrh	r2, [r7, #4]
 8008160:	429a      	cmp	r2, r3
 8008162:	d305      	bcc.n	8008170 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	895b      	ldrh	r3, [r3, #10]
 8008168:	88ba      	ldrh	r2, [r7, #4]
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	80bb      	strh	r3, [r7, #4]
 800816e:	e023      	b.n	80081b8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	895a      	ldrh	r2, [r3, #10]
 8008174:	88bb      	ldrh	r3, [r7, #4]
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800817a:	8b3a      	ldrh	r2, [r7, #24]
 800817c:	88fb      	ldrh	r3, [r7, #6]
 800817e:	429a      	cmp	r2, r3
 8008180:	d901      	bls.n	8008186 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008182:	88fb      	ldrh	r3, [r7, #6]
 8008184:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008186:	8b7b      	ldrh	r3, [r7, #26]
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	18d0      	adds	r0, r2, r3
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	88bb      	ldrh	r3, [r7, #4]
 8008192:	4413      	add	r3, r2
 8008194:	8b3a      	ldrh	r2, [r7, #24]
 8008196:	4619      	mov	r1, r3
 8008198:	f008 feae 	bl	8010ef8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800819c:	8afa      	ldrh	r2, [r7, #22]
 800819e:	8b3b      	ldrh	r3, [r7, #24]
 80081a0:	4413      	add	r3, r2
 80081a2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80081a4:	8b7a      	ldrh	r2, [r7, #26]
 80081a6:	8b3b      	ldrh	r3, [r7, #24]
 80081a8:	4413      	add	r3, r2
 80081aa:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80081ac:	88fa      	ldrh	r2, [r7, #6]
 80081ae:	8b3b      	ldrh	r3, [r7, #24]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80081b4:	2300      	movs	r3, #0
 80081b6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	61fb      	str	r3, [r7, #28]
 80081be:	88fb      	ldrh	r3, [r7, #6]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <pbuf_copy_partial+0xca>
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1c4      	bne.n	8008154 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80081ca:	8afb      	ldrh	r3, [r7, #22]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3720      	adds	r7, #32
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	0801294c 	.word	0x0801294c
 80081d8:	08012c94 	.word	0x08012c94
 80081dc:	080129ac 	.word	0x080129ac
 80081e0:	08012cb4 	.word	0x08012cb4

080081e4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	4603      	mov	r3, r0
 80081ec:	603a      	str	r2, [r7, #0]
 80081ee:	71fb      	strb	r3, [r7, #7]
 80081f0:	460b      	mov	r3, r1
 80081f2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	8919      	ldrh	r1, [r3, #8]
 80081f8:	88ba      	ldrh	r2, [r7, #4]
 80081fa:	79fb      	ldrb	r3, [r7, #7]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7ff fab1 	bl	8007764 <pbuf_alloc>
 8008202:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <pbuf_clone+0x2a>
    return NULL;
 800820a:	2300      	movs	r3, #0
 800820c:	e011      	b.n	8008232 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800820e:	6839      	ldr	r1, [r7, #0]
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f7ff fea3 	bl	8007f5c <pbuf_copy>
 8008216:	4603      	mov	r3, r0
 8008218:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800821a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d006      	beq.n	8008230 <pbuf_clone+0x4c>
 8008222:	4b06      	ldr	r3, [pc, #24]	; (800823c <pbuf_clone+0x58>)
 8008224:	f240 5224 	movw	r2, #1316	; 0x524
 8008228:	4905      	ldr	r1, [pc, #20]	; (8008240 <pbuf_clone+0x5c>)
 800822a:	4806      	ldr	r0, [pc, #24]	; (8008244 <pbuf_clone+0x60>)
 800822c:	f008 fe7a 	bl	8010f24 <iprintf>
  return q;
 8008230:	68fb      	ldr	r3, [r7, #12]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	0801294c 	.word	0x0801294c
 8008240:	08012dc0 	.word	0x08012dc0
 8008244:	080129ac 	.word	0x080129ac

08008248 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800824c:	f008 fe82 	bl	8010f54 <rand>
 8008250:	4603      	mov	r3, r0
 8008252:	b29b      	uxth	r3, r3
 8008254:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008258:	b29b      	uxth	r3, r3
 800825a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800825e:	b29a      	uxth	r2, r3
 8008260:	4b01      	ldr	r3, [pc, #4]	; (8008268 <tcp_init+0x20>)
 8008262:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008264:	bf00      	nop
 8008266:	bd80      	pop	{r7, pc}
 8008268:	20000050 	.word	0x20000050

0800826c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	7d1b      	ldrb	r3, [r3, #20]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d105      	bne.n	8008288 <tcp_free+0x1c>
 800827c:	4b06      	ldr	r3, [pc, #24]	; (8008298 <tcp_free+0x2c>)
 800827e:	22d4      	movs	r2, #212	; 0xd4
 8008280:	4906      	ldr	r1, [pc, #24]	; (800829c <tcp_free+0x30>)
 8008282:	4807      	ldr	r0, [pc, #28]	; (80082a0 <tcp_free+0x34>)
 8008284:	f008 fe4e 	bl	8010f24 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008288:	6879      	ldr	r1, [r7, #4]
 800828a:	2001      	movs	r0, #1
 800828c:	f7fe fed8 	bl	8007040 <memp_free>
}
 8008290:	bf00      	nop
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	08012e4c 	.word	0x08012e4c
 800829c:	08012e7c 	.word	0x08012e7c
 80082a0:	08012e90 	.word	0x08012e90

080082a4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	7d1b      	ldrb	r3, [r3, #20]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d105      	bne.n	80082c0 <tcp_free_listen+0x1c>
 80082b4:	4b06      	ldr	r3, [pc, #24]	; (80082d0 <tcp_free_listen+0x2c>)
 80082b6:	22df      	movs	r2, #223	; 0xdf
 80082b8:	4906      	ldr	r1, [pc, #24]	; (80082d4 <tcp_free_listen+0x30>)
 80082ba:	4807      	ldr	r0, [pc, #28]	; (80082d8 <tcp_free_listen+0x34>)
 80082bc:	f008 fe32 	bl	8010f24 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80082c0:	6879      	ldr	r1, [r7, #4]
 80082c2:	2002      	movs	r0, #2
 80082c4:	f7fe febc 	bl	8007040 <memp_free>
}
 80082c8:	bf00      	nop
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	08012e4c 	.word	0x08012e4c
 80082d4:	08012eb8 	.word	0x08012eb8
 80082d8:	08012e90 	.word	0x08012e90

080082dc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80082e0:	f001 f85c 	bl	800939c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80082e4:	4b07      	ldr	r3, [pc, #28]	; (8008304 <tcp_tmr+0x28>)
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	3301      	adds	r3, #1
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	4b05      	ldr	r3, [pc, #20]	; (8008304 <tcp_tmr+0x28>)
 80082ee:	701a      	strb	r2, [r3, #0]
 80082f0:	4b04      	ldr	r3, [pc, #16]	; (8008304 <tcp_tmr+0x28>)
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	f003 0301 	and.w	r3, r3, #1
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d001      	beq.n	8008300 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80082fc:	f000 fd0e 	bl	8008d1c <tcp_slowtmr>
  }
}
 8008300:	bf00      	nop
 8008302:	bd80      	pop	{r7, pc}
 8008304:	20008739 	.word	0x20008739

08008308 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d105      	bne.n	8008324 <tcp_remove_listener+0x1c>
 8008318:	4b0d      	ldr	r3, [pc, #52]	; (8008350 <tcp_remove_listener+0x48>)
 800831a:	22ff      	movs	r2, #255	; 0xff
 800831c:	490d      	ldr	r1, [pc, #52]	; (8008354 <tcp_remove_listener+0x4c>)
 800831e:	480e      	ldr	r0, [pc, #56]	; (8008358 <tcp_remove_listener+0x50>)
 8008320:	f008 fe00 	bl	8010f24 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	60fb      	str	r3, [r7, #12]
 8008328:	e00a      	b.n	8008340 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800832e:	683a      	ldr	r2, [r7, #0]
 8008330:	429a      	cmp	r2, r3
 8008332:	d102      	bne.n	800833a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	60fb      	str	r3, [r7, #12]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1f1      	bne.n	800832a <tcp_remove_listener+0x22>
    }
  }
}
 8008346:	bf00      	nop
 8008348:	bf00      	nop
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	08012e4c 	.word	0x08012e4c
 8008354:	08012ed4 	.word	0x08012ed4
 8008358:	08012e90 	.word	0x08012e90

0800835c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d106      	bne.n	8008378 <tcp_listen_closed+0x1c>
 800836a:	4b14      	ldr	r3, [pc, #80]	; (80083bc <tcp_listen_closed+0x60>)
 800836c:	f240 1211 	movw	r2, #273	; 0x111
 8008370:	4913      	ldr	r1, [pc, #76]	; (80083c0 <tcp_listen_closed+0x64>)
 8008372:	4814      	ldr	r0, [pc, #80]	; (80083c4 <tcp_listen_closed+0x68>)
 8008374:	f008 fdd6 	bl	8010f24 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	7d1b      	ldrb	r3, [r3, #20]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d006      	beq.n	800838e <tcp_listen_closed+0x32>
 8008380:	4b0e      	ldr	r3, [pc, #56]	; (80083bc <tcp_listen_closed+0x60>)
 8008382:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008386:	4910      	ldr	r1, [pc, #64]	; (80083c8 <tcp_listen_closed+0x6c>)
 8008388:	480e      	ldr	r0, [pc, #56]	; (80083c4 <tcp_listen_closed+0x68>)
 800838a:	f008 fdcb 	bl	8010f24 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800838e:	2301      	movs	r3, #1
 8008390:	60fb      	str	r3, [r7, #12]
 8008392:	e00b      	b.n	80083ac <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008394:	4a0d      	ldr	r2, [pc, #52]	; (80083cc <tcp_listen_closed+0x70>)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7ff ffb1 	bl	8008308 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	3301      	adds	r3, #1
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	d9f0      	bls.n	8008394 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80083b2:	bf00      	nop
 80083b4:	bf00      	nop
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	08012e4c 	.word	0x08012e4c
 80083c0:	08012efc 	.word	0x08012efc
 80083c4:	08012e90 	.word	0x08012e90
 80083c8:	08012f08 	.word	0x08012f08
 80083cc:	080152fc 	.word	0x080152fc

080083d0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80083d0:	b5b0      	push	{r4, r5, r7, lr}
 80083d2:	b088      	sub	sp, #32
 80083d4:	af04      	add	r7, sp, #16
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d106      	bne.n	80083f0 <tcp_close_shutdown+0x20>
 80083e2:	4b63      	ldr	r3, [pc, #396]	; (8008570 <tcp_close_shutdown+0x1a0>)
 80083e4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80083e8:	4962      	ldr	r1, [pc, #392]	; (8008574 <tcp_close_shutdown+0x1a4>)
 80083ea:	4863      	ldr	r0, [pc, #396]	; (8008578 <tcp_close_shutdown+0x1a8>)
 80083ec:	f008 fd9a 	bl	8010f24 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80083f0:	78fb      	ldrb	r3, [r7, #3]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d066      	beq.n	80084c4 <tcp_close_shutdown+0xf4>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	7d1b      	ldrb	r3, [r3, #20]
 80083fa:	2b04      	cmp	r3, #4
 80083fc:	d003      	beq.n	8008406 <tcp_close_shutdown+0x36>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	7d1b      	ldrb	r3, [r3, #20]
 8008402:	2b07      	cmp	r3, #7
 8008404:	d15e      	bne.n	80084c4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800840a:	2b00      	cmp	r3, #0
 800840c:	d104      	bne.n	8008418 <tcp_close_shutdown+0x48>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008412:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008416:	d055      	beq.n	80084c4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	8b5b      	ldrh	r3, [r3, #26]
 800841c:	f003 0310 	and.w	r3, r3, #16
 8008420:	2b00      	cmp	r3, #0
 8008422:	d106      	bne.n	8008432 <tcp_close_shutdown+0x62>
 8008424:	4b52      	ldr	r3, [pc, #328]	; (8008570 <tcp_close_shutdown+0x1a0>)
 8008426:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800842a:	4954      	ldr	r1, [pc, #336]	; (800857c <tcp_close_shutdown+0x1ac>)
 800842c:	4852      	ldr	r0, [pc, #328]	; (8008578 <tcp_close_shutdown+0x1a8>)
 800842e:	f008 fd79 	bl	8010f24 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800843a:	687d      	ldr	r5, [r7, #4]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	3304      	adds	r3, #4
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	8ad2      	ldrh	r2, [r2, #22]
 8008444:	6879      	ldr	r1, [r7, #4]
 8008446:	8b09      	ldrh	r1, [r1, #24]
 8008448:	9102      	str	r1, [sp, #8]
 800844a:	9201      	str	r2, [sp, #4]
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	462b      	mov	r3, r5
 8008450:	4622      	mov	r2, r4
 8008452:	4601      	mov	r1, r0
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f005 fd8f 	bl	800df78 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f001 fb6c 	bl	8009b38 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008460:	4b47      	ldr	r3, [pc, #284]	; (8008580 <tcp_close_shutdown+0x1b0>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	429a      	cmp	r2, r3
 8008468:	d105      	bne.n	8008476 <tcp_close_shutdown+0xa6>
 800846a:	4b45      	ldr	r3, [pc, #276]	; (8008580 <tcp_close_shutdown+0x1b0>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	4a43      	ldr	r2, [pc, #268]	; (8008580 <tcp_close_shutdown+0x1b0>)
 8008472:	6013      	str	r3, [r2, #0]
 8008474:	e013      	b.n	800849e <tcp_close_shutdown+0xce>
 8008476:	4b42      	ldr	r3, [pc, #264]	; (8008580 <tcp_close_shutdown+0x1b0>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	60fb      	str	r3, [r7, #12]
 800847c:	e00c      	b.n	8008498 <tcp_close_shutdown+0xc8>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	429a      	cmp	r2, r3
 8008486:	d104      	bne.n	8008492 <tcp_close_shutdown+0xc2>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	68da      	ldr	r2, [r3, #12]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	60da      	str	r2, [r3, #12]
 8008490:	e005      	b.n	800849e <tcp_close_shutdown+0xce>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	60fb      	str	r3, [r7, #12]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1ef      	bne.n	800847e <tcp_close_shutdown+0xae>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	60da      	str	r2, [r3, #12]
 80084a4:	4b37      	ldr	r3, [pc, #220]	; (8008584 <tcp_close_shutdown+0x1b4>)
 80084a6:	2201      	movs	r2, #1
 80084a8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80084aa:	4b37      	ldr	r3, [pc, #220]	; (8008588 <tcp_close_shutdown+0x1b8>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d102      	bne.n	80084ba <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80084b4:	f004 f804 	bl	800c4c0 <tcp_trigger_input_pcb_close>
 80084b8:	e002      	b.n	80084c0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7ff fed6 	bl	800826c <tcp_free>
      }
      return ERR_OK;
 80084c0:	2300      	movs	r3, #0
 80084c2:	e050      	b.n	8008566 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	7d1b      	ldrb	r3, [r3, #20]
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d03b      	beq.n	8008544 <tcp_close_shutdown+0x174>
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	dc44      	bgt.n	800855a <tcp_close_shutdown+0x18a>
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d002      	beq.n	80084da <tcp_close_shutdown+0x10a>
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d02a      	beq.n	800852e <tcp_close_shutdown+0x15e>
 80084d8:	e03f      	b.n	800855a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	8adb      	ldrh	r3, [r3, #22]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d021      	beq.n	8008526 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80084e2:	4b2a      	ldr	r3, [pc, #168]	; (800858c <tcp_close_shutdown+0x1bc>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d105      	bne.n	80084f8 <tcp_close_shutdown+0x128>
 80084ec:	4b27      	ldr	r3, [pc, #156]	; (800858c <tcp_close_shutdown+0x1bc>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	4a26      	ldr	r2, [pc, #152]	; (800858c <tcp_close_shutdown+0x1bc>)
 80084f4:	6013      	str	r3, [r2, #0]
 80084f6:	e013      	b.n	8008520 <tcp_close_shutdown+0x150>
 80084f8:	4b24      	ldr	r3, [pc, #144]	; (800858c <tcp_close_shutdown+0x1bc>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	60bb      	str	r3, [r7, #8]
 80084fe:	e00c      	b.n	800851a <tcp_close_shutdown+0x14a>
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	429a      	cmp	r2, r3
 8008508:	d104      	bne.n	8008514 <tcp_close_shutdown+0x144>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68da      	ldr	r2, [r3, #12]
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	60da      	str	r2, [r3, #12]
 8008512:	e005      	b.n	8008520 <tcp_close_shutdown+0x150>
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	60bb      	str	r3, [r7, #8]
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1ef      	bne.n	8008500 <tcp_close_shutdown+0x130>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7ff fea0 	bl	800826c <tcp_free>
      break;
 800852c:	e01a      	b.n	8008564 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f7ff ff14 	bl	800835c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008534:	6879      	ldr	r1, [r7, #4]
 8008536:	4816      	ldr	r0, [pc, #88]	; (8008590 <tcp_close_shutdown+0x1c0>)
 8008538:	f001 fb4e 	bl	8009bd8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f7ff feb1 	bl	80082a4 <tcp_free_listen>
      break;
 8008542:	e00f      	b.n	8008564 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008544:	6879      	ldr	r1, [r7, #4]
 8008546:	480e      	ldr	r0, [pc, #56]	; (8008580 <tcp_close_shutdown+0x1b0>)
 8008548:	f001 fb46 	bl	8009bd8 <tcp_pcb_remove>
 800854c:	4b0d      	ldr	r3, [pc, #52]	; (8008584 <tcp_close_shutdown+0x1b4>)
 800854e:	2201      	movs	r2, #1
 8008550:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7ff fe8a 	bl	800826c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008558:	e004      	b.n	8008564 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f81a 	bl	8008594 <tcp_close_shutdown_fin>
 8008560:	4603      	mov	r3, r0
 8008562:	e000      	b.n	8008566 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bdb0      	pop	{r4, r5, r7, pc}
 800856e:	bf00      	nop
 8008570:	08012e4c 	.word	0x08012e4c
 8008574:	08012f20 	.word	0x08012f20
 8008578:	08012e90 	.word	0x08012e90
 800857c:	08012f40 	.word	0x08012f40
 8008580:	20008730 	.word	0x20008730
 8008584:	20008738 	.word	0x20008738
 8008588:	20008770 	.word	0x20008770
 800858c:	20008728 	.word	0x20008728
 8008590:	2000872c 	.word	0x2000872c

08008594 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d106      	bne.n	80085b0 <tcp_close_shutdown_fin+0x1c>
 80085a2:	4b2e      	ldr	r3, [pc, #184]	; (800865c <tcp_close_shutdown_fin+0xc8>)
 80085a4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80085a8:	492d      	ldr	r1, [pc, #180]	; (8008660 <tcp_close_shutdown_fin+0xcc>)
 80085aa:	482e      	ldr	r0, [pc, #184]	; (8008664 <tcp_close_shutdown_fin+0xd0>)
 80085ac:	f008 fcba 	bl	8010f24 <iprintf>

  switch (pcb->state) {
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	7d1b      	ldrb	r3, [r3, #20]
 80085b4:	2b07      	cmp	r3, #7
 80085b6:	d020      	beq.n	80085fa <tcp_close_shutdown_fin+0x66>
 80085b8:	2b07      	cmp	r3, #7
 80085ba:	dc2b      	bgt.n	8008614 <tcp_close_shutdown_fin+0x80>
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d002      	beq.n	80085c6 <tcp_close_shutdown_fin+0x32>
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	d00d      	beq.n	80085e0 <tcp_close_shutdown_fin+0x4c>
 80085c4:	e026      	b.n	8008614 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f004 fde4 	bl	800d194 <tcp_send_fin>
 80085cc:	4603      	mov	r3, r0
 80085ce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80085d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d11f      	bne.n	8008618 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2205      	movs	r2, #5
 80085dc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80085de:	e01b      	b.n	8008618 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f004 fdd7 	bl	800d194 <tcp_send_fin>
 80085e6:	4603      	mov	r3, r0
 80085e8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80085ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d114      	bne.n	800861c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2205      	movs	r2, #5
 80085f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80085f8:	e010      	b.n	800861c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f004 fdca 	bl	800d194 <tcp_send_fin>
 8008600:	4603      	mov	r3, r0
 8008602:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d109      	bne.n	8008620 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2209      	movs	r2, #9
 8008610:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008612:	e005      	b.n	8008620 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	e01c      	b.n	8008652 <tcp_close_shutdown_fin+0xbe>
      break;
 8008618:	bf00      	nop
 800861a:	e002      	b.n	8008622 <tcp_close_shutdown_fin+0x8e>
      break;
 800861c:	bf00      	nop
 800861e:	e000      	b.n	8008622 <tcp_close_shutdown_fin+0x8e>
      break;
 8008620:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d103      	bne.n	8008632 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f004 fef0 	bl	800d410 <tcp_output>
 8008630:	e00d      	b.n	800864e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800863a:	d108      	bne.n	800864e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	8b5b      	ldrh	r3, [r3, #26]
 8008640:	f043 0308 	orr.w	r3, r3, #8
 8008644:	b29a      	uxth	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800864a:	2300      	movs	r3, #0
 800864c:	e001      	b.n	8008652 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800864e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	08012e4c 	.word	0x08012e4c
 8008660:	08012efc 	.word	0x08012efc
 8008664:	08012e90 	.word	0x08012e90

08008668 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d109      	bne.n	800868a <tcp_close+0x22>
 8008676:	4b0f      	ldr	r3, [pc, #60]	; (80086b4 <tcp_close+0x4c>)
 8008678:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800867c:	490e      	ldr	r1, [pc, #56]	; (80086b8 <tcp_close+0x50>)
 800867e:	480f      	ldr	r0, [pc, #60]	; (80086bc <tcp_close+0x54>)
 8008680:	f008 fc50 	bl	8010f24 <iprintf>
 8008684:	f06f 030f 	mvn.w	r3, #15
 8008688:	e00f      	b.n	80086aa <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	7d1b      	ldrb	r3, [r3, #20]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d006      	beq.n	80086a0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	8b5b      	ldrh	r3, [r3, #26]
 8008696:	f043 0310 	orr.w	r3, r3, #16
 800869a:	b29a      	uxth	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80086a0:	2101      	movs	r1, #1
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7ff fe94 	bl	80083d0 <tcp_close_shutdown>
 80086a8:	4603      	mov	r3, r0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	08012e4c 	.word	0x08012e4c
 80086b8:	08012f5c 	.word	0x08012f5c
 80086bc:	08012e90 	.word	0x08012e90

080086c0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b08e      	sub	sp, #56	; 0x38
 80086c4:	af04      	add	r7, sp, #16
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d107      	bne.n	80086e0 <tcp_abandon+0x20>
 80086d0:	4b52      	ldr	r3, [pc, #328]	; (800881c <tcp_abandon+0x15c>)
 80086d2:	f240 223d 	movw	r2, #573	; 0x23d
 80086d6:	4952      	ldr	r1, [pc, #328]	; (8008820 <tcp_abandon+0x160>)
 80086d8:	4852      	ldr	r0, [pc, #328]	; (8008824 <tcp_abandon+0x164>)
 80086da:	f008 fc23 	bl	8010f24 <iprintf>
 80086de:	e099      	b.n	8008814 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	7d1b      	ldrb	r3, [r3, #20]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d106      	bne.n	80086f6 <tcp_abandon+0x36>
 80086e8:	4b4c      	ldr	r3, [pc, #304]	; (800881c <tcp_abandon+0x15c>)
 80086ea:	f44f 7210 	mov.w	r2, #576	; 0x240
 80086ee:	494e      	ldr	r1, [pc, #312]	; (8008828 <tcp_abandon+0x168>)
 80086f0:	484c      	ldr	r0, [pc, #304]	; (8008824 <tcp_abandon+0x164>)
 80086f2:	f008 fc17 	bl	8010f24 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	7d1b      	ldrb	r3, [r3, #20]
 80086fa:	2b0a      	cmp	r3, #10
 80086fc:	d107      	bne.n	800870e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80086fe:	6879      	ldr	r1, [r7, #4]
 8008700:	484a      	ldr	r0, [pc, #296]	; (800882c <tcp_abandon+0x16c>)
 8008702:	f001 fa69 	bl	8009bd8 <tcp_pcb_remove>
    tcp_free(pcb);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7ff fdb0 	bl	800826c <tcp_free>
 800870c:	e082      	b.n	8008814 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800870e:	2300      	movs	r3, #0
 8008710:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8008712:	2300      	movs	r3, #0
 8008714:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800871a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008720:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008728:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	7d1b      	ldrb	r3, [r3, #20]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d126      	bne.n	8008786 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	8adb      	ldrh	r3, [r3, #22]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d02e      	beq.n	800879e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008740:	4b3b      	ldr	r3, [pc, #236]	; (8008830 <tcp_abandon+0x170>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	429a      	cmp	r2, r3
 8008748:	d105      	bne.n	8008756 <tcp_abandon+0x96>
 800874a:	4b39      	ldr	r3, [pc, #228]	; (8008830 <tcp_abandon+0x170>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	4a37      	ldr	r2, [pc, #220]	; (8008830 <tcp_abandon+0x170>)
 8008752:	6013      	str	r3, [r2, #0]
 8008754:	e013      	b.n	800877e <tcp_abandon+0xbe>
 8008756:	4b36      	ldr	r3, [pc, #216]	; (8008830 <tcp_abandon+0x170>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	61fb      	str	r3, [r7, #28]
 800875c:	e00c      	b.n	8008778 <tcp_abandon+0xb8>
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	429a      	cmp	r2, r3
 8008766:	d104      	bne.n	8008772 <tcp_abandon+0xb2>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	68da      	ldr	r2, [r3, #12]
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	60da      	str	r2, [r3, #12]
 8008770:	e005      	b.n	800877e <tcp_abandon+0xbe>
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	61fb      	str	r3, [r7, #28]
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1ef      	bne.n	800875e <tcp_abandon+0x9e>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	60da      	str	r2, [r3, #12]
 8008784:	e00b      	b.n	800879e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	8adb      	ldrh	r3, [r3, #22]
 800878e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008790:	6879      	ldr	r1, [r7, #4]
 8008792:	4828      	ldr	r0, [pc, #160]	; (8008834 <tcp_abandon+0x174>)
 8008794:	f001 fa20 	bl	8009bd8 <tcp_pcb_remove>
 8008798:	4b27      	ldr	r3, [pc, #156]	; (8008838 <tcp_abandon+0x178>)
 800879a:	2201      	movs	r2, #1
 800879c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d004      	beq.n	80087b0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 fed6 	bl	800955c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d004      	beq.n	80087c2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087bc:	4618      	mov	r0, r3
 80087be:	f000 fecd 	bl	800955c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d004      	beq.n	80087d4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087ce:	4618      	mov	r0, r3
 80087d0:	f000 fec4 	bl	800955c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80087d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00e      	beq.n	80087f8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80087da:	6879      	ldr	r1, [r7, #4]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3304      	adds	r3, #4
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	8b12      	ldrh	r2, [r2, #24]
 80087e4:	9202      	str	r2, [sp, #8]
 80087e6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80087e8:	9201      	str	r2, [sp, #4]
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	460b      	mov	r3, r1
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	69b9      	ldr	r1, [r7, #24]
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f005 fbc0 	bl	800df78 <tcp_rst>
    }
    last_state = pcb->state;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	7d1b      	ldrb	r3, [r3, #20]
 80087fc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7ff fd34 	bl	800826c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d004      	beq.n	8008814 <tcp_abandon+0x154>
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	f06f 010c 	mvn.w	r1, #12
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	4798      	blx	r3
  }
}
 8008814:	3728      	adds	r7, #40	; 0x28
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	08012e4c 	.word	0x08012e4c
 8008820:	08012f90 	.word	0x08012f90
 8008824:	08012e90 	.word	0x08012e90
 8008828:	08012fac 	.word	0x08012fac
 800882c:	20008734 	.word	0x20008734
 8008830:	20008728 	.word	0x20008728
 8008834:	20008730 	.word	0x20008730
 8008838:	20008738 	.word	0x20008738

0800883c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008844:	2101      	movs	r1, #1
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f7ff ff3a 	bl	80086c0 <tcp_abandon>
}
 800884c:	bf00      	nop
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b088      	sub	sp, #32
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	4613      	mov	r3, r2
 8008860:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8008862:	2304      	movs	r3, #4
 8008864:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d101      	bne.n	8008870 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800886c:	4b3e      	ldr	r3, [pc, #248]	; (8008968 <tcp_bind+0x114>)
 800886e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d109      	bne.n	800888a <tcp_bind+0x36>
 8008876:	4b3d      	ldr	r3, [pc, #244]	; (800896c <tcp_bind+0x118>)
 8008878:	f240 22a9 	movw	r2, #681	; 0x2a9
 800887c:	493c      	ldr	r1, [pc, #240]	; (8008970 <tcp_bind+0x11c>)
 800887e:	483d      	ldr	r0, [pc, #244]	; (8008974 <tcp_bind+0x120>)
 8008880:	f008 fb50 	bl	8010f24 <iprintf>
 8008884:	f06f 030f 	mvn.w	r3, #15
 8008888:	e06a      	b.n	8008960 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	7d1b      	ldrb	r3, [r3, #20]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d009      	beq.n	80088a6 <tcp_bind+0x52>
 8008892:	4b36      	ldr	r3, [pc, #216]	; (800896c <tcp_bind+0x118>)
 8008894:	f240 22ab 	movw	r2, #683	; 0x2ab
 8008898:	4937      	ldr	r1, [pc, #220]	; (8008978 <tcp_bind+0x124>)
 800889a:	4836      	ldr	r0, [pc, #216]	; (8008974 <tcp_bind+0x120>)
 800889c:	f008 fb42 	bl	8010f24 <iprintf>
 80088a0:	f06f 0305 	mvn.w	r3, #5
 80088a4:	e05c      	b.n	8008960 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80088a6:	88fb      	ldrh	r3, [r7, #6]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d109      	bne.n	80088c0 <tcp_bind+0x6c>
    port = tcp_new_port();
 80088ac:	f000 f9f0 	bl	8008c90 <tcp_new_port>
 80088b0:	4603      	mov	r3, r0
 80088b2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80088b4:	88fb      	ldrh	r3, [r7, #6]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d135      	bne.n	8008926 <tcp_bind+0xd2>
      return ERR_BUF;
 80088ba:	f06f 0301 	mvn.w	r3, #1
 80088be:	e04f      	b.n	8008960 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80088c0:	2300      	movs	r3, #0
 80088c2:	61fb      	str	r3, [r7, #28]
 80088c4:	e02b      	b.n	800891e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80088c6:	4a2d      	ldr	r2, [pc, #180]	; (800897c <tcp_bind+0x128>)
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	61bb      	str	r3, [r7, #24]
 80088d2:	e01e      	b.n	8008912 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	8adb      	ldrh	r3, [r3, #22]
 80088d8:	88fa      	ldrh	r2, [r7, #6]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d116      	bne.n	800890c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80088de:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d010      	beq.n	8008906 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00c      	beq.n	8008906 <tcp_bind+0xb2>
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d009      	beq.n	8008906 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d005      	beq.n	8008906 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008902:	429a      	cmp	r2, r3
 8008904:	d102      	bne.n	800890c <tcp_bind+0xb8>
              return ERR_USE;
 8008906:	f06f 0307 	mvn.w	r3, #7
 800890a:	e029      	b.n	8008960 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	61bb      	str	r3, [r7, #24]
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1dd      	bne.n	80088d4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	3301      	adds	r3, #1
 800891c:	61fb      	str	r3, [r7, #28]
 800891e:	69fa      	ldr	r2, [r7, #28]
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	429a      	cmp	r2, r3
 8008924:	dbcf      	blt.n	80088c6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00c      	beq.n	8008946 <tcp_bind+0xf2>
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d008      	beq.n	8008946 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d002      	beq.n	8008940 <tcp_bind+0xec>
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	e000      	b.n	8008942 <tcp_bind+0xee>
 8008940:	2300      	movs	r3, #0
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	88fa      	ldrh	r2, [r7, #6]
 800894a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800894c:	4b0c      	ldr	r3, [pc, #48]	; (8008980 <tcp_bind+0x12c>)
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	60da      	str	r2, [r3, #12]
 8008954:	4a0a      	ldr	r2, [pc, #40]	; (8008980 <tcp_bind+0x12c>)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6013      	str	r3, [r2, #0]
 800895a:	f005 fccf 	bl	800e2fc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3720      	adds	r7, #32
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	08015324 	.word	0x08015324
 800896c:	08012e4c 	.word	0x08012e4c
 8008970:	08012fe0 	.word	0x08012fe0
 8008974:	08012e90 	.word	0x08012e90
 8008978:	08012ff8 	.word	0x08012ff8
 800897c:	080152fc 	.word	0x080152fc
 8008980:	20008728 	.word	0x20008728

08008984 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	4613      	mov	r3, r2
 8008990:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d106      	bne.n	80089a6 <tcp_accept_null+0x22>
 8008998:	4b07      	ldr	r3, [pc, #28]	; (80089b8 <tcp_accept_null+0x34>)
 800899a:	f240 320f 	movw	r2, #783	; 0x30f
 800899e:	4907      	ldr	r1, [pc, #28]	; (80089bc <tcp_accept_null+0x38>)
 80089a0:	4807      	ldr	r0, [pc, #28]	; (80089c0 <tcp_accept_null+0x3c>)
 80089a2:	f008 fabf 	bl	8010f24 <iprintf>

  tcp_abort(pcb);
 80089a6:	68b8      	ldr	r0, [r7, #8]
 80089a8:	f7ff ff48 	bl	800883c <tcp_abort>

  return ERR_ABRT;
 80089ac:	f06f 030c 	mvn.w	r3, #12
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	08012e4c 	.word	0x08012e4c
 80089bc:	08013020 	.word	0x08013020
 80089c0:	08012e90 	.word	0x08012e90

080089c4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	460b      	mov	r3, r1
 80089ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80089d0:	78fb      	ldrb	r3, [r7, #3]
 80089d2:	2200      	movs	r2, #0
 80089d4:	4619      	mov	r1, r3
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f806 	bl	80089e8 <tcp_listen_with_backlog_and_err>
 80089dc:	4603      	mov	r3, r0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
	...

080089e8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b088      	sub	sp, #32
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	460b      	mov	r3, r1
 80089f2:	607a      	str	r2, [r7, #4]
 80089f4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80089f6:	2300      	movs	r3, #0
 80089f8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d109      	bne.n	8008a14 <tcp_listen_with_backlog_and_err+0x2c>
 8008a00:	4b47      	ldr	r3, [pc, #284]	; (8008b20 <tcp_listen_with_backlog_and_err+0x138>)
 8008a02:	f240 3259 	movw	r2, #857	; 0x359
 8008a06:	4947      	ldr	r1, [pc, #284]	; (8008b24 <tcp_listen_with_backlog_and_err+0x13c>)
 8008a08:	4847      	ldr	r0, [pc, #284]	; (8008b28 <tcp_listen_with_backlog_and_err+0x140>)
 8008a0a:	f008 fa8b 	bl	8010f24 <iprintf>
 8008a0e:	23f0      	movs	r3, #240	; 0xf0
 8008a10:	76fb      	strb	r3, [r7, #27]
 8008a12:	e079      	b.n	8008b08 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	7d1b      	ldrb	r3, [r3, #20]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d009      	beq.n	8008a30 <tcp_listen_with_backlog_and_err+0x48>
 8008a1c:	4b40      	ldr	r3, [pc, #256]	; (8008b20 <tcp_listen_with_backlog_and_err+0x138>)
 8008a1e:	f240 325a 	movw	r2, #858	; 0x35a
 8008a22:	4942      	ldr	r1, [pc, #264]	; (8008b2c <tcp_listen_with_backlog_and_err+0x144>)
 8008a24:	4840      	ldr	r0, [pc, #256]	; (8008b28 <tcp_listen_with_backlog_and_err+0x140>)
 8008a26:	f008 fa7d 	bl	8010f24 <iprintf>
 8008a2a:	23f1      	movs	r3, #241	; 0xf1
 8008a2c:	76fb      	strb	r3, [r7, #27]
 8008a2e:	e06b      	b.n	8008b08 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	7d1b      	ldrb	r3, [r3, #20]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d104      	bne.n	8008a42 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8008a3c:	23f7      	movs	r3, #247	; 0xf7
 8008a3e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008a40:	e062      	b.n	8008b08 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008a42:	2002      	movs	r0, #2
 8008a44:	f7fe fa8c 	bl	8006f60 <memp_malloc>
 8008a48:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d102      	bne.n	8008a56 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8008a50:	23ff      	movs	r3, #255	; 0xff
 8008a52:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008a54:	e058      	b.n	8008b08 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	691a      	ldr	r2, [r3, #16]
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	8ada      	ldrh	r2, [r3, #22]
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	7d5a      	ldrb	r2, [r3, #21]
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	7a5a      	ldrb	r2, [r3, #9]
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	7ada      	ldrb	r2, [r3, #11]
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	7a9a      	ldrb	r2, [r3, #10]
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	8adb      	ldrh	r3, [r3, #22]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d021      	beq.n	8008ae6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008aa2:	4b23      	ldr	r3, [pc, #140]	; (8008b30 <tcp_listen_with_backlog_and_err+0x148>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d105      	bne.n	8008ab8 <tcp_listen_with_backlog_and_err+0xd0>
 8008aac:	4b20      	ldr	r3, [pc, #128]	; (8008b30 <tcp_listen_with_backlog_and_err+0x148>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	4a1f      	ldr	r2, [pc, #124]	; (8008b30 <tcp_listen_with_backlog_and_err+0x148>)
 8008ab4:	6013      	str	r3, [r2, #0]
 8008ab6:	e013      	b.n	8008ae0 <tcp_listen_with_backlog_and_err+0xf8>
 8008ab8:	4b1d      	ldr	r3, [pc, #116]	; (8008b30 <tcp_listen_with_backlog_and_err+0x148>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	617b      	str	r3, [r7, #20]
 8008abe:	e00c      	b.n	8008ada <tcp_listen_with_backlog_and_err+0xf2>
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d104      	bne.n	8008ad4 <tcp_listen_with_backlog_and_err+0xec>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	68da      	ldr	r2, [r3, #12]
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	60da      	str	r2, [r3, #12]
 8008ad2:	e005      	b.n	8008ae0 <tcp_listen_with_backlog_and_err+0xf8>
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	617b      	str	r3, [r7, #20]
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1ef      	bne.n	8008ac0 <tcp_listen_with_backlog_and_err+0xd8>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f7ff fbc0 	bl	800826c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	4a11      	ldr	r2, [pc, #68]	; (8008b34 <tcp_listen_with_backlog_and_err+0x14c>)
 8008af0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008af2:	4b11      	ldr	r3, [pc, #68]	; (8008b38 <tcp_listen_with_backlog_and_err+0x150>)
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	60da      	str	r2, [r3, #12]
 8008afa:	4a0f      	ldr	r2, [pc, #60]	; (8008b38 <tcp_listen_with_backlog_and_err+0x150>)
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	6013      	str	r3, [r2, #0]
 8008b00:	f005 fbfc 	bl	800e2fc <tcp_timer_needed>
  res = ERR_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d002      	beq.n	8008b14 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	7efa      	ldrb	r2, [r7, #27]
 8008b12:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8008b14:	69fb      	ldr	r3, [r7, #28]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3720      	adds	r7, #32
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	08012e4c 	.word	0x08012e4c
 8008b24:	08013040 	.word	0x08013040
 8008b28:	08012e90 	.word	0x08012e90
 8008b2c:	08013070 	.word	0x08013070
 8008b30:	20008728 	.word	0x20008728
 8008b34:	08008985 	.word	0x08008985
 8008b38:	2000872c 	.word	0x2000872c

08008b3c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d106      	bne.n	8008b58 <tcp_update_rcv_ann_wnd+0x1c>
 8008b4a:	4b25      	ldr	r3, [pc, #148]	; (8008be0 <tcp_update_rcv_ann_wnd+0xa4>)
 8008b4c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008b50:	4924      	ldr	r1, [pc, #144]	; (8008be4 <tcp_update_rcv_ann_wnd+0xa8>)
 8008b52:	4825      	ldr	r0, [pc, #148]	; (8008be8 <tcp_update_rcv_ann_wnd+0xac>)
 8008b54:	f008 f9e6 	bl	8010f24 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008b60:	4413      	add	r3, r2
 8008b62:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008b6c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8008b70:	bf28      	it	cs
 8008b72:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8008b76:	b292      	uxth	r2, r2
 8008b78:	4413      	add	r3, r2
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	db08      	blt.n	8008b94 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	e020      	b.n	8008bd6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	dd03      	ble.n	8008baa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008ba8:	e014      	b.n	8008bd4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bbc:	d306      	bcc.n	8008bcc <tcp_update_rcv_ann_wnd+0x90>
 8008bbe:	4b08      	ldr	r3, [pc, #32]	; (8008be0 <tcp_update_rcv_ann_wnd+0xa4>)
 8008bc0:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008bc4:	4909      	ldr	r1, [pc, #36]	; (8008bec <tcp_update_rcv_ann_wnd+0xb0>)
 8008bc6:	4808      	ldr	r0, [pc, #32]	; (8008be8 <tcp_update_rcv_ann_wnd+0xac>)
 8008bc8:	f008 f9ac 	bl	8010f24 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8008bd4:	2300      	movs	r3, #0
  }
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	08012e4c 	.word	0x08012e4c
 8008be4:	080130a8 	.word	0x080130a8
 8008be8:	08012e90 	.word	0x08012e90
 8008bec:	080130cc 	.word	0x080130cc

08008bf0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d107      	bne.n	8008c12 <tcp_recved+0x22>
 8008c02:	4b1f      	ldr	r3, [pc, #124]	; (8008c80 <tcp_recved+0x90>)
 8008c04:	f240 32cf 	movw	r2, #975	; 0x3cf
 8008c08:	491e      	ldr	r1, [pc, #120]	; (8008c84 <tcp_recved+0x94>)
 8008c0a:	481f      	ldr	r0, [pc, #124]	; (8008c88 <tcp_recved+0x98>)
 8008c0c:	f008 f98a 	bl	8010f24 <iprintf>
 8008c10:	e032      	b.n	8008c78 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	7d1b      	ldrb	r3, [r3, #20]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d106      	bne.n	8008c28 <tcp_recved+0x38>
 8008c1a:	4b19      	ldr	r3, [pc, #100]	; (8008c80 <tcp_recved+0x90>)
 8008c1c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8008c20:	491a      	ldr	r1, [pc, #104]	; (8008c8c <tcp_recved+0x9c>)
 8008c22:	4819      	ldr	r0, [pc, #100]	; (8008c88 <tcp_recved+0x98>)
 8008c24:	f008 f97e 	bl	8010f24 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008c2c:	887b      	ldrh	r3, [r7, #2]
 8008c2e:	4413      	add	r3, r2
 8008c30:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008c32:	89fb      	ldrh	r3, [r7, #14]
 8008c34:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008c38:	d804      	bhi.n	8008c44 <tcp_recved+0x54>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c3e:	89fa      	ldrh	r2, [r7, #14]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d204      	bcs.n	8008c4e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008c4a:	851a      	strh	r2, [r3, #40]	; 0x28
 8008c4c:	e002      	b.n	8008c54 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	89fa      	ldrh	r2, [r7, #14]
 8008c52:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7ff ff71 	bl	8008b3c <tcp_update_rcv_ann_wnd>
 8008c5a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008c62:	d309      	bcc.n	8008c78 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	8b5b      	ldrh	r3, [r3, #26]
 8008c68:	f043 0302 	orr.w	r3, r3, #2
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f004 fbcc 	bl	800d410 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	08012e4c 	.word	0x08012e4c
 8008c84:	080130e8 	.word	0x080130e8
 8008c88:	08012e90 	.word	0x08012e90
 8008c8c:	08013100 	.word	0x08013100

08008c90 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8008c96:	2300      	movs	r3, #0
 8008c98:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8008c9a:	4b1e      	ldr	r3, [pc, #120]	; (8008d14 <tcp_new_port+0x84>)
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	4b1c      	ldr	r3, [pc, #112]	; (8008d14 <tcp_new_port+0x84>)
 8008ca4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8008ca6:	4b1b      	ldr	r3, [pc, #108]	; (8008d14 <tcp_new_port+0x84>)
 8008ca8:	881b      	ldrh	r3, [r3, #0]
 8008caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d103      	bne.n	8008cba <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008cb2:	4b18      	ldr	r3, [pc, #96]	; (8008d14 <tcp_new_port+0x84>)
 8008cb4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8008cb8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008cba:	2300      	movs	r3, #0
 8008cbc:	71fb      	strb	r3, [r7, #7]
 8008cbe:	e01e      	b.n	8008cfe <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008cc0:	79fb      	ldrb	r3, [r7, #7]
 8008cc2:	4a15      	ldr	r2, [pc, #84]	; (8008d18 <tcp_new_port+0x88>)
 8008cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	603b      	str	r3, [r7, #0]
 8008ccc:	e011      	b.n	8008cf2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	8ada      	ldrh	r2, [r3, #22]
 8008cd2:	4b10      	ldr	r3, [pc, #64]	; (8008d14 <tcp_new_port+0x84>)
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d108      	bne.n	8008cec <tcp_new_port+0x5c>
        n++;
 8008cda:	88bb      	ldrh	r3, [r7, #4]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008ce0:	88bb      	ldrh	r3, [r7, #4]
 8008ce2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ce6:	d3d8      	bcc.n	8008c9a <tcp_new_port+0xa>
          return 0;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	e00d      	b.n	8008d08 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	603b      	str	r3, [r7, #0]
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1ea      	bne.n	8008cce <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008cf8:	79fb      	ldrb	r3, [r7, #7]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	71fb      	strb	r3, [r7, #7]
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d9dd      	bls.n	8008cc0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008d04:	4b03      	ldr	r3, [pc, #12]	; (8008d14 <tcp_new_port+0x84>)
 8008d06:	881b      	ldrh	r3, [r3, #0]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr
 8008d14:	20000050 	.word	0x20000050
 8008d18:	080152fc 	.word	0x080152fc

08008d1c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008d1c:	b5b0      	push	{r4, r5, r7, lr}
 8008d1e:	b090      	sub	sp, #64	; 0x40
 8008d20:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008d22:	2300      	movs	r3, #0
 8008d24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8008d28:	4b94      	ldr	r3, [pc, #592]	; (8008f7c <tcp_slowtmr+0x260>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	4a93      	ldr	r2, [pc, #588]	; (8008f7c <tcp_slowtmr+0x260>)
 8008d30:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008d32:	4b93      	ldr	r3, [pc, #588]	; (8008f80 <tcp_slowtmr+0x264>)
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	3301      	adds	r3, #1
 8008d38:	b2da      	uxtb	r2, r3
 8008d3a:	4b91      	ldr	r3, [pc, #580]	; (8008f80 <tcp_slowtmr+0x264>)
 8008d3c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8008d42:	4b90      	ldr	r3, [pc, #576]	; (8008f84 <tcp_slowtmr+0x268>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8008d48:	e29f      	b.n	800928a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4c:	7d1b      	ldrb	r3, [r3, #20]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d106      	bne.n	8008d60 <tcp_slowtmr+0x44>
 8008d52:	4b8d      	ldr	r3, [pc, #564]	; (8008f88 <tcp_slowtmr+0x26c>)
 8008d54:	f240 42be 	movw	r2, #1214	; 0x4be
 8008d58:	498c      	ldr	r1, [pc, #560]	; (8008f8c <tcp_slowtmr+0x270>)
 8008d5a:	488d      	ldr	r0, [pc, #564]	; (8008f90 <tcp_slowtmr+0x274>)
 8008d5c:	f008 f8e2 	bl	8010f24 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d62:	7d1b      	ldrb	r3, [r3, #20]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d106      	bne.n	8008d76 <tcp_slowtmr+0x5a>
 8008d68:	4b87      	ldr	r3, [pc, #540]	; (8008f88 <tcp_slowtmr+0x26c>)
 8008d6a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8008d6e:	4989      	ldr	r1, [pc, #548]	; (8008f94 <tcp_slowtmr+0x278>)
 8008d70:	4887      	ldr	r0, [pc, #540]	; (8008f90 <tcp_slowtmr+0x274>)
 8008d72:	f008 f8d7 	bl	8010f24 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d78:	7d1b      	ldrb	r3, [r3, #20]
 8008d7a:	2b0a      	cmp	r3, #10
 8008d7c:	d106      	bne.n	8008d8c <tcp_slowtmr+0x70>
 8008d7e:	4b82      	ldr	r3, [pc, #520]	; (8008f88 <tcp_slowtmr+0x26c>)
 8008d80:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8008d84:	4984      	ldr	r1, [pc, #528]	; (8008f98 <tcp_slowtmr+0x27c>)
 8008d86:	4882      	ldr	r0, [pc, #520]	; (8008f90 <tcp_slowtmr+0x274>)
 8008d88:	f008 f8cc 	bl	8010f24 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8e:	7f9a      	ldrb	r2, [r3, #30]
 8008d90:	4b7b      	ldr	r3, [pc, #492]	; (8008f80 <tcp_slowtmr+0x264>)
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d105      	bne.n	8008da4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8008d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8008da2:	e272      	b.n	800928a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008da4:	4b76      	ldr	r3, [pc, #472]	; (8008f80 <tcp_slowtmr+0x264>)
 8008da6:	781a      	ldrb	r2, [r3, #0]
 8008da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008daa:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8008dac:	2300      	movs	r3, #0
 8008dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8008db2:	2300      	movs	r3, #0
 8008db4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dba:	7d1b      	ldrb	r3, [r3, #20]
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d10a      	bne.n	8008dd6 <tcp_slowtmr+0xba>
 8008dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008dc6:	2b05      	cmp	r3, #5
 8008dc8:	d905      	bls.n	8008dd6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8008dca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dce:	3301      	adds	r3, #1
 8008dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008dd4:	e11e      	b.n	8009014 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ddc:	2b0b      	cmp	r3, #11
 8008dde:	d905      	bls.n	8008dec <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8008de0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008de4:	3301      	adds	r3, #1
 8008de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008dea:	e113      	b.n	8009014 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8008dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d075      	beq.n	8008ee2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d006      	beq.n	8008e0c <tcp_slowtmr+0xf0>
 8008dfe:	4b62      	ldr	r3, [pc, #392]	; (8008f88 <tcp_slowtmr+0x26c>)
 8008e00:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008e04:	4965      	ldr	r1, [pc, #404]	; (8008f9c <tcp_slowtmr+0x280>)
 8008e06:	4862      	ldr	r0, [pc, #392]	; (8008f90 <tcp_slowtmr+0x274>)
 8008e08:	f008 f88c 	bl	8010f24 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d106      	bne.n	8008e22 <tcp_slowtmr+0x106>
 8008e14:	4b5c      	ldr	r3, [pc, #368]	; (8008f88 <tcp_slowtmr+0x26c>)
 8008e16:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008e1a:	4961      	ldr	r1, [pc, #388]	; (8008fa0 <tcp_slowtmr+0x284>)
 8008e1c:	485c      	ldr	r0, [pc, #368]	; (8008f90 <tcp_slowtmr+0x274>)
 8008e1e:	f008 f881 	bl	8010f24 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e24:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8008e28:	2b0b      	cmp	r3, #11
 8008e2a:	d905      	bls.n	8008e38 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8008e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e30:	3301      	adds	r3, #1
 8008e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e36:	e0ed      	b.n	8009014 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	4a58      	ldr	r2, [pc, #352]	; (8008fa4 <tcp_slowtmr+0x288>)
 8008e42:	5cd3      	ldrb	r3, [r2, r3]
 8008e44:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8008e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e48:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008e4c:	7c7a      	ldrb	r2, [r7, #17]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d907      	bls.n	8008e62 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8008e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e54:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008e58:	3301      	adds	r3, #1
 8008e5a:	b2da      	uxtb	r2, r3
 8008e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8008e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008e68:	7c7a      	ldrb	r2, [r7, #17]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	f200 80d2 	bhi.w	8009014 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8008e70:	2301      	movs	r3, #1
 8008e72:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8008e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d108      	bne.n	8008e90 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008e7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e80:	f005 f96e 	bl	800e160 <tcp_zero_window_probe>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d014      	beq.n	8008eb4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	623b      	str	r3, [r7, #32]
 8008e8e:	e011      	b.n	8008eb4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e96:	4619      	mov	r1, r3
 8008e98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e9a:	f004 f833 	bl	800cf04 <tcp_split_unsent_seg>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d107      	bne.n	8008eb4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8008ea4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ea6:	f004 fab3 	bl	800d410 <tcp_output>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d101      	bne.n	8008eb4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8008eb4:	6a3b      	ldr	r3, [r7, #32]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f000 80ac 	beq.w	8009014 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8008ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008eca:	2b06      	cmp	r3, #6
 8008ecc:	f200 80a2 	bhi.w	8009014 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8008ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	b2da      	uxtb	r2, r3
 8008eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008edc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8008ee0:	e098      	b.n	8009014 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	db0f      	blt.n	8008f0c <tcp_slowtmr+0x1f0>
 8008eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008ef2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d008      	beq.n	8008f0c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8008efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	3301      	adds	r3, #1
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	b21a      	sxth	r2, r3
 8008f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8008f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f14:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	db7b      	blt.n	8009014 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008f1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f1e:	f004 fd69 	bl	800d9f4 <tcp_rexmit_rto_prepare>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d007      	beq.n	8008f38 <tcp_slowtmr+0x21c>
 8008f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d171      	bne.n	8009014 <tcp_slowtmr+0x2f8>
 8008f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d06d      	beq.n	8009014 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3a:	7d1b      	ldrb	r3, [r3, #20]
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d03a      	beq.n	8008fb6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f46:	2b0c      	cmp	r3, #12
 8008f48:	bf28      	it	cs
 8008f4a:	230c      	movcs	r3, #12
 8008f4c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008f54:	10db      	asrs	r3, r3, #3
 8008f56:	b21b      	sxth	r3, r3
 8008f58:	461a      	mov	r2, r3
 8008f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008f60:	4413      	add	r3, r2
 8008f62:	7efa      	ldrb	r2, [r7, #27]
 8008f64:	4910      	ldr	r1, [pc, #64]	; (8008fa8 <tcp_slowtmr+0x28c>)
 8008f66:	5c8a      	ldrb	r2, [r1, r2]
 8008f68:	4093      	lsls	r3, r2
 8008f6a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008f72:	4293      	cmp	r3, r2
 8008f74:	dc1a      	bgt.n	8008fac <tcp_slowtmr+0x290>
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	b21a      	sxth	r2, r3
 8008f7a:	e019      	b.n	8008fb0 <tcp_slowtmr+0x294>
 8008f7c:	20008724 	.word	0x20008724
 8008f80:	2000873a 	.word	0x2000873a
 8008f84:	20008730 	.word	0x20008730
 8008f88:	08012e4c 	.word	0x08012e4c
 8008f8c:	08013190 	.word	0x08013190
 8008f90:	08012e90 	.word	0x08012e90
 8008f94:	080131bc 	.word	0x080131bc
 8008f98:	080131e8 	.word	0x080131e8
 8008f9c:	08013218 	.word	0x08013218
 8008fa0:	0801324c 	.word	0x0801324c
 8008fa4:	080152f4 	.word	0x080152f4
 8008fa8:	080152e4 	.word	0x080152e4
 8008fac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb8:	2200      	movs	r2, #0
 8008fba:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fbe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	bf28      	it	cs
 8008fcc:	4613      	movcs	r3, r2
 8008fce:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008fd0:	8a7b      	ldrh	r3, [r7, #18]
 8008fd2:	085b      	lsrs	r3, r3, #1
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fde:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008fe6:	005b      	lsls	r3, r3, #1
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d206      	bcs.n	8008ffc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ff2:	005b      	lsls	r3, r3, #1
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8008ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ffe:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009002:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8009006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009008:	2200      	movs	r2, #0
 800900a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800900e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009010:	f004 fd60 	bl	800dad4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009016:	7d1b      	ldrb	r3, [r3, #20]
 8009018:	2b06      	cmp	r3, #6
 800901a:	d111      	bne.n	8009040 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800901c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901e:	8b5b      	ldrh	r3, [r3, #26]
 8009020:	f003 0310 	and.w	r3, r3, #16
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00b      	beq.n	8009040 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009028:	4b9d      	ldr	r3, [pc, #628]	; (80092a0 <tcp_slowtmr+0x584>)
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902e:	6a1b      	ldr	r3, [r3, #32]
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	2b28      	cmp	r3, #40	; 0x28
 8009034:	d904      	bls.n	8009040 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8009036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800903a:	3301      	adds	r3, #1
 800903c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009042:	7a5b      	ldrb	r3, [r3, #9]
 8009044:	f003 0308 	and.w	r3, r3, #8
 8009048:	2b00      	cmp	r3, #0
 800904a:	d04c      	beq.n	80090e6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800904c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009050:	2b04      	cmp	r3, #4
 8009052:	d003      	beq.n	800905c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8009054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009056:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009058:	2b07      	cmp	r3, #7
 800905a:	d144      	bne.n	80090e6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800905c:	4b90      	ldr	r3, [pc, #576]	; (80092a0 <tcp_slowtmr+0x584>)
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009062:	6a1b      	ldr	r3, [r3, #32]
 8009064:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800906c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8009070:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8009074:	498b      	ldr	r1, [pc, #556]	; (80092a4 <tcp_slowtmr+0x588>)
 8009076:	fba1 1303 	umull	r1, r3, r1, r3
 800907a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800907c:	429a      	cmp	r2, r3
 800907e:	d90a      	bls.n	8009096 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009084:	3301      	adds	r3, #1
 8009086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800908a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800908e:	3301      	adds	r3, #1
 8009090:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009094:	e027      	b.n	80090e6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009096:	4b82      	ldr	r3, [pc, #520]	; (80092a0 <tcp_slowtmr+0x584>)
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909c:	6a1b      	ldr	r3, [r3, #32]
 800909e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80090a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80090a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80090ac:	4618      	mov	r0, r3
 80090ae:	4b7e      	ldr	r3, [pc, #504]	; (80092a8 <tcp_slowtmr+0x58c>)
 80090b0:	fb00 f303 	mul.w	r3, r0, r3
 80090b4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80090b6:	497b      	ldr	r1, [pc, #492]	; (80092a4 <tcp_slowtmr+0x588>)
 80090b8:	fba1 1303 	umull	r1, r3, r1, r3
 80090bc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80090be:	429a      	cmp	r2, r3
 80090c0:	d911      	bls.n	80090e6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80090c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090c4:	f005 f80c 	bl	800e0e0 <tcp_keepalive>
 80090c8:	4603      	mov	r3, r0
 80090ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80090ce:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d107      	bne.n	80090e6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80090d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80090dc:	3301      	adds	r3, #1
 80090de:	b2da      	uxtb	r2, r3
 80090e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80090e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d011      	beq.n	8009112 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80090ee:	4b6c      	ldr	r3, [pc, #432]	; (80092a0 <tcp_slowtmr+0x584>)
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f4:	6a1b      	ldr	r3, [r3, #32]
 80090f6:	1ad2      	subs	r2, r2, r3
 80090f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80090fe:	4619      	mov	r1, r3
 8009100:	460b      	mov	r3, r1
 8009102:	005b      	lsls	r3, r3, #1
 8009104:	440b      	add	r3, r1
 8009106:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009108:	429a      	cmp	r2, r3
 800910a:	d302      	bcc.n	8009112 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800910c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800910e:	f000 fec7 	bl	8009ea0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8009112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009114:	7d1b      	ldrb	r3, [r3, #20]
 8009116:	2b03      	cmp	r3, #3
 8009118:	d10b      	bne.n	8009132 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800911a:	4b61      	ldr	r3, [pc, #388]	; (80092a0 <tcp_slowtmr+0x584>)
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009120:	6a1b      	ldr	r3, [r3, #32]
 8009122:	1ad3      	subs	r3, r2, r3
 8009124:	2b28      	cmp	r3, #40	; 0x28
 8009126:	d904      	bls.n	8009132 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8009128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800912c:	3301      	adds	r3, #1
 800912e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009134:	7d1b      	ldrb	r3, [r3, #20]
 8009136:	2b09      	cmp	r3, #9
 8009138:	d10b      	bne.n	8009152 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800913a:	4b59      	ldr	r3, [pc, #356]	; (80092a0 <tcp_slowtmr+0x584>)
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009140:	6a1b      	ldr	r3, [r3, #32]
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	2bf0      	cmp	r3, #240	; 0xf0
 8009146:	d904      	bls.n	8009152 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8009148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800914c:	3301      	adds	r3, #1
 800914e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009156:	2b00      	cmp	r3, #0
 8009158:	d060      	beq.n	800921c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800915a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009160:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8009162:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009164:	f000 fce8 	bl	8009b38 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8009168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916a:	2b00      	cmp	r3, #0
 800916c:	d010      	beq.n	8009190 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800916e:	4b4f      	ldr	r3, [pc, #316]	; (80092ac <tcp_slowtmr+0x590>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009174:	429a      	cmp	r2, r3
 8009176:	d106      	bne.n	8009186 <tcp_slowtmr+0x46a>
 8009178:	4b4d      	ldr	r3, [pc, #308]	; (80092b0 <tcp_slowtmr+0x594>)
 800917a:	f240 526d 	movw	r2, #1389	; 0x56d
 800917e:	494d      	ldr	r1, [pc, #308]	; (80092b4 <tcp_slowtmr+0x598>)
 8009180:	484d      	ldr	r0, [pc, #308]	; (80092b8 <tcp_slowtmr+0x59c>)
 8009182:	f007 fecf 	bl	8010f24 <iprintf>
        prev->next = pcb->next;
 8009186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009188:	68da      	ldr	r2, [r3, #12]
 800918a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918c:	60da      	str	r2, [r3, #12]
 800918e:	e00f      	b.n	80091b0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009190:	4b46      	ldr	r3, [pc, #280]	; (80092ac <tcp_slowtmr+0x590>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009196:	429a      	cmp	r2, r3
 8009198:	d006      	beq.n	80091a8 <tcp_slowtmr+0x48c>
 800919a:	4b45      	ldr	r3, [pc, #276]	; (80092b0 <tcp_slowtmr+0x594>)
 800919c:	f240 5271 	movw	r2, #1393	; 0x571
 80091a0:	4946      	ldr	r1, [pc, #280]	; (80092bc <tcp_slowtmr+0x5a0>)
 80091a2:	4845      	ldr	r0, [pc, #276]	; (80092b8 <tcp_slowtmr+0x59c>)
 80091a4:	f007 febe 	bl	8010f24 <iprintf>
        tcp_active_pcbs = pcb->next;
 80091a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	4a3f      	ldr	r2, [pc, #252]	; (80092ac <tcp_slowtmr+0x590>)
 80091ae:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80091b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d013      	beq.n	80091e0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80091b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80091bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091be:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80091c0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80091c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c4:	3304      	adds	r3, #4
 80091c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091c8:	8ad2      	ldrh	r2, [r2, #22]
 80091ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091cc:	8b09      	ldrh	r1, [r1, #24]
 80091ce:	9102      	str	r1, [sp, #8]
 80091d0:	9201      	str	r2, [sp, #4]
 80091d2:	9300      	str	r3, [sp, #0]
 80091d4:	462b      	mov	r3, r5
 80091d6:	4622      	mov	r2, r4
 80091d8:	4601      	mov	r1, r0
 80091da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091dc:	f004 fecc 	bl	800df78 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80091e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80091e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e8:	7d1b      	ldrb	r3, [r3, #20]
 80091ea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80091ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80091f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80091f6:	6838      	ldr	r0, [r7, #0]
 80091f8:	f7ff f838 	bl	800826c <tcp_free>

      tcp_active_pcbs_changed = 0;
 80091fc:	4b30      	ldr	r3, [pc, #192]	; (80092c0 <tcp_slowtmr+0x5a4>)
 80091fe:	2200      	movs	r2, #0
 8009200:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d004      	beq.n	8009212 <tcp_slowtmr+0x4f6>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f06f 010c 	mvn.w	r1, #12
 800920e:	68b8      	ldr	r0, [r7, #8]
 8009210:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009212:	4b2b      	ldr	r3, [pc, #172]	; (80092c0 <tcp_slowtmr+0x5a4>)
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d037      	beq.n	800928a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800921a:	e590      	b.n	8008d3e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800921c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8009226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009228:	7f1b      	ldrb	r3, [r3, #28]
 800922a:	3301      	adds	r3, #1
 800922c:	b2da      	uxtb	r2, r3
 800922e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009230:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009234:	7f1a      	ldrb	r2, [r3, #28]
 8009236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009238:	7f5b      	ldrb	r3, [r3, #29]
 800923a:	429a      	cmp	r2, r3
 800923c:	d325      	bcc.n	800928a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800923e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009240:	2200      	movs	r2, #0
 8009242:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8009244:	4b1e      	ldr	r3, [pc, #120]	; (80092c0 <tcp_slowtmr+0x5a4>)
 8009246:	2200      	movs	r2, #0
 8009248:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800924a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00b      	beq.n	800926c <tcp_slowtmr+0x550>
 8009254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009256:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800925a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800925c:	6912      	ldr	r2, [r2, #16]
 800925e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009260:	4610      	mov	r0, r2
 8009262:	4798      	blx	r3
 8009264:	4603      	mov	r3, r0
 8009266:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800926a:	e002      	b.n	8009272 <tcp_slowtmr+0x556>
 800926c:	2300      	movs	r3, #0
 800926e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8009272:	4b13      	ldr	r3, [pc, #76]	; (80092c0 <tcp_slowtmr+0x5a4>)
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d000      	beq.n	800927c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800927a:	e560      	b.n	8008d3e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800927c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009280:	2b00      	cmp	r3, #0
 8009282:	d102      	bne.n	800928a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8009284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009286:	f004 f8c3 	bl	800d410 <tcp_output>
  while (pcb != NULL) {
 800928a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928c:	2b00      	cmp	r3, #0
 800928e:	f47f ad5c 	bne.w	8008d4a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009292:	2300      	movs	r3, #0
 8009294:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8009296:	4b0b      	ldr	r3, [pc, #44]	; (80092c4 <tcp_slowtmr+0x5a8>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800929c:	e067      	b.n	800936e <tcp_slowtmr+0x652>
 800929e:	bf00      	nop
 80092a0:	20008724 	.word	0x20008724
 80092a4:	10624dd3 	.word	0x10624dd3
 80092a8:	000124f8 	.word	0x000124f8
 80092ac:	20008730 	.word	0x20008730
 80092b0:	08012e4c 	.word	0x08012e4c
 80092b4:	08013284 	.word	0x08013284
 80092b8:	08012e90 	.word	0x08012e90
 80092bc:	080132b0 	.word	0x080132b0
 80092c0:	20008738 	.word	0x20008738
 80092c4:	20008734 	.word	0x20008734
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80092c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ca:	7d1b      	ldrb	r3, [r3, #20]
 80092cc:	2b0a      	cmp	r3, #10
 80092ce:	d006      	beq.n	80092de <tcp_slowtmr+0x5c2>
 80092d0:	4b2b      	ldr	r3, [pc, #172]	; (8009380 <tcp_slowtmr+0x664>)
 80092d2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80092d6:	492b      	ldr	r1, [pc, #172]	; (8009384 <tcp_slowtmr+0x668>)
 80092d8:	482b      	ldr	r0, [pc, #172]	; (8009388 <tcp_slowtmr+0x66c>)
 80092da:	f007 fe23 	bl	8010f24 <iprintf>
    pcb_remove = 0;
 80092de:	2300      	movs	r3, #0
 80092e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80092e4:	4b29      	ldr	r3, [pc, #164]	; (800938c <tcp_slowtmr+0x670>)
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ea:	6a1b      	ldr	r3, [r3, #32]
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	2bf0      	cmp	r3, #240	; 0xf0
 80092f0:	d904      	bls.n	80092fc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80092f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092f6:	3301      	adds	r3, #1
 80092f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80092fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009300:	2b00      	cmp	r3, #0
 8009302:	d02f      	beq.n	8009364 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009304:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009306:	f000 fc17 	bl	8009b38 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800930a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930c:	2b00      	cmp	r3, #0
 800930e:	d010      	beq.n	8009332 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009310:	4b1f      	ldr	r3, [pc, #124]	; (8009390 <tcp_slowtmr+0x674>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009316:	429a      	cmp	r2, r3
 8009318:	d106      	bne.n	8009328 <tcp_slowtmr+0x60c>
 800931a:	4b19      	ldr	r3, [pc, #100]	; (8009380 <tcp_slowtmr+0x664>)
 800931c:	f240 52af 	movw	r2, #1455	; 0x5af
 8009320:	491c      	ldr	r1, [pc, #112]	; (8009394 <tcp_slowtmr+0x678>)
 8009322:	4819      	ldr	r0, [pc, #100]	; (8009388 <tcp_slowtmr+0x66c>)
 8009324:	f007 fdfe 	bl	8010f24 <iprintf>
        prev->next = pcb->next;
 8009328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932a:	68da      	ldr	r2, [r3, #12]
 800932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932e:	60da      	str	r2, [r3, #12]
 8009330:	e00f      	b.n	8009352 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009332:	4b17      	ldr	r3, [pc, #92]	; (8009390 <tcp_slowtmr+0x674>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009338:	429a      	cmp	r2, r3
 800933a:	d006      	beq.n	800934a <tcp_slowtmr+0x62e>
 800933c:	4b10      	ldr	r3, [pc, #64]	; (8009380 <tcp_slowtmr+0x664>)
 800933e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009342:	4915      	ldr	r1, [pc, #84]	; (8009398 <tcp_slowtmr+0x67c>)
 8009344:	4810      	ldr	r0, [pc, #64]	; (8009388 <tcp_slowtmr+0x66c>)
 8009346:	f007 fded 	bl	8010f24 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800934a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	4a10      	ldr	r2, [pc, #64]	; (8009390 <tcp_slowtmr+0x674>)
 8009350:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009354:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800935c:	69f8      	ldr	r0, [r7, #28]
 800935e:	f7fe ff85 	bl	800826c <tcp_free>
 8009362:	e004      	b.n	800936e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8009364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009366:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800936e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1a9      	bne.n	80092c8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8009374:	bf00      	nop
 8009376:	bf00      	nop
 8009378:	3730      	adds	r7, #48	; 0x30
 800937a:	46bd      	mov	sp, r7
 800937c:	bdb0      	pop	{r4, r5, r7, pc}
 800937e:	bf00      	nop
 8009380:	08012e4c 	.word	0x08012e4c
 8009384:	080132dc 	.word	0x080132dc
 8009388:	08012e90 	.word	0x08012e90
 800938c:	20008724 	.word	0x20008724
 8009390:	20008734 	.word	0x20008734
 8009394:	0801330c 	.word	0x0801330c
 8009398:	08013334 	.word	0x08013334

0800939c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80093a2:	4b2d      	ldr	r3, [pc, #180]	; (8009458 <tcp_fasttmr+0xbc>)
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	3301      	adds	r3, #1
 80093a8:	b2da      	uxtb	r2, r3
 80093aa:	4b2b      	ldr	r3, [pc, #172]	; (8009458 <tcp_fasttmr+0xbc>)
 80093ac:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80093ae:	4b2b      	ldr	r3, [pc, #172]	; (800945c <tcp_fasttmr+0xc0>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80093b4:	e048      	b.n	8009448 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	7f9a      	ldrb	r2, [r3, #30]
 80093ba:	4b27      	ldr	r3, [pc, #156]	; (8009458 <tcp_fasttmr+0xbc>)
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d03f      	beq.n	8009442 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80093c2:	4b25      	ldr	r3, [pc, #148]	; (8009458 <tcp_fasttmr+0xbc>)
 80093c4:	781a      	ldrb	r2, [r3, #0]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	8b5b      	ldrh	r3, [r3, #26]
 80093ce:	f003 0301 	and.w	r3, r3, #1
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d010      	beq.n	80093f8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	8b5b      	ldrh	r3, [r3, #26]
 80093da:	f043 0302 	orr.w	r3, r3, #2
 80093de:	b29a      	uxth	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f004 f813 	bl	800d410 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	8b5b      	ldrh	r3, [r3, #26]
 80093ee:	f023 0303 	bic.w	r3, r3, #3
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	8b5b      	ldrh	r3, [r3, #26]
 80093fc:	f003 0308 	and.w	r3, r3, #8
 8009400:	2b00      	cmp	r3, #0
 8009402:	d009      	beq.n	8009418 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	8b5b      	ldrh	r3, [r3, #26]
 8009408:	f023 0308 	bic.w	r3, r3, #8
 800940c:	b29a      	uxth	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f7ff f8be 	bl	8008594 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00a      	beq.n	800943c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009426:	4b0e      	ldr	r3, [pc, #56]	; (8009460 <tcp_fasttmr+0xc4>)
 8009428:	2200      	movs	r2, #0
 800942a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 f819 	bl	8009464 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009432:	4b0b      	ldr	r3, [pc, #44]	; (8009460 <tcp_fasttmr+0xc4>)
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d000      	beq.n	800943c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800943a:	e7b8      	b.n	80093ae <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	607b      	str	r3, [r7, #4]
 8009440:	e002      	b.n	8009448 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1b3      	bne.n	80093b6 <tcp_fasttmr+0x1a>
    }
  }
}
 800944e:	bf00      	nop
 8009450:	bf00      	nop
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	2000873a 	.word	0x2000873a
 800945c:	20008730 	.word	0x20008730
 8009460:	20008738 	.word	0x20008738

08009464 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009464:	b590      	push	{r4, r7, lr}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d109      	bne.n	8009486 <tcp_process_refused_data+0x22>
 8009472:	4b37      	ldr	r3, [pc, #220]	; (8009550 <tcp_process_refused_data+0xec>)
 8009474:	f240 6209 	movw	r2, #1545	; 0x609
 8009478:	4936      	ldr	r1, [pc, #216]	; (8009554 <tcp_process_refused_data+0xf0>)
 800947a:	4837      	ldr	r0, [pc, #220]	; (8009558 <tcp_process_refused_data+0xf4>)
 800947c:	f007 fd52 	bl	8010f24 <iprintf>
 8009480:	f06f 030f 	mvn.w	r3, #15
 8009484:	e060      	b.n	8009548 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800948a:	7b5b      	ldrb	r3, [r3, #13]
 800948c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009492:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00b      	beq.n	80094bc <tcp_process_refused_data+0x58>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6918      	ldr	r0, [r3, #16]
 80094ae:	2300      	movs	r3, #0
 80094b0:	68ba      	ldr	r2, [r7, #8]
 80094b2:	6879      	ldr	r1, [r7, #4]
 80094b4:	47a0      	blx	r4
 80094b6:	4603      	mov	r3, r0
 80094b8:	73fb      	strb	r3, [r7, #15]
 80094ba:	e007      	b.n	80094cc <tcp_process_refused_data+0x68>
 80094bc:	2300      	movs	r3, #0
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	6879      	ldr	r1, [r7, #4]
 80094c2:	2000      	movs	r0, #0
 80094c4:	f000 f8c2 	bl	800964c <tcp_recv_null>
 80094c8:	4603      	mov	r3, r0
 80094ca:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80094cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d12a      	bne.n	800952a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80094d4:	7bbb      	ldrb	r3, [r7, #14]
 80094d6:	f003 0320 	and.w	r3, r3, #32
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d033      	beq.n	8009546 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80094e6:	d005      	beq.n	80094f4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ec:	3301      	adds	r3, #1
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00b      	beq.n	8009516 <tcp_process_refused_data+0xb2>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6918      	ldr	r0, [r3, #16]
 8009508:	2300      	movs	r3, #0
 800950a:	2200      	movs	r2, #0
 800950c:	6879      	ldr	r1, [r7, #4]
 800950e:	47a0      	blx	r4
 8009510:	4603      	mov	r3, r0
 8009512:	73fb      	strb	r3, [r7, #15]
 8009514:	e001      	b.n	800951a <tcp_process_refused_data+0xb6>
 8009516:	2300      	movs	r3, #0
 8009518:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800951a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800951e:	f113 0f0d 	cmn.w	r3, #13
 8009522:	d110      	bne.n	8009546 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009524:	f06f 030c 	mvn.w	r3, #12
 8009528:	e00e      	b.n	8009548 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800952a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800952e:	f113 0f0d 	cmn.w	r3, #13
 8009532:	d102      	bne.n	800953a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009534:	f06f 030c 	mvn.w	r3, #12
 8009538:	e006      	b.n	8009548 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009540:	f06f 0304 	mvn.w	r3, #4
 8009544:	e000      	b.n	8009548 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3714      	adds	r7, #20
 800954c:	46bd      	mov	sp, r7
 800954e:	bd90      	pop	{r4, r7, pc}
 8009550:	08012e4c 	.word	0x08012e4c
 8009554:	0801335c 	.word	0x0801335c
 8009558:	08012e90 	.word	0x08012e90

0800955c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009564:	e007      	b.n	8009576 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f80a 	bl	8009586 <tcp_seg_free>
    seg = next;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d1f4      	bne.n	8009566 <tcp_segs_free+0xa>
  }
}
 800957c:	bf00      	nop
 800957e:	bf00      	nop
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b082      	sub	sp, #8
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00c      	beq.n	80095ae <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d004      	beq.n	80095a6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7fe fbc3 	bl	8007d2c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80095a6:	6879      	ldr	r1, [r7, #4]
 80095a8:	2003      	movs	r0, #3
 80095aa:	f7fd fd49 	bl	8007040 <memp_free>
  }
}
 80095ae:	bf00      	nop
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
	...

080095b8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	460b      	mov	r3, r1
 80095c2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d107      	bne.n	80095da <tcp_setprio+0x22>
 80095ca:	4b07      	ldr	r3, [pc, #28]	; (80095e8 <tcp_setprio+0x30>)
 80095cc:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 80095d0:	4906      	ldr	r1, [pc, #24]	; (80095ec <tcp_setprio+0x34>)
 80095d2:	4807      	ldr	r0, [pc, #28]	; (80095f0 <tcp_setprio+0x38>)
 80095d4:	f007 fca6 	bl	8010f24 <iprintf>
 80095d8:	e002      	b.n	80095e0 <tcp_setprio+0x28>

  pcb->prio = prio;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	78fa      	ldrb	r2, [r7, #3]
 80095de:	755a      	strb	r2, [r3, #21]
}
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	08012e4c 	.word	0x08012e4c
 80095ec:	08013384 	.word	0x08013384
 80095f0:	08012e90 	.word	0x08012e90

080095f4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d106      	bne.n	8009610 <tcp_seg_copy+0x1c>
 8009602:	4b0f      	ldr	r3, [pc, #60]	; (8009640 <tcp_seg_copy+0x4c>)
 8009604:	f240 6282 	movw	r2, #1666	; 0x682
 8009608:	490e      	ldr	r1, [pc, #56]	; (8009644 <tcp_seg_copy+0x50>)
 800960a:	480f      	ldr	r0, [pc, #60]	; (8009648 <tcp_seg_copy+0x54>)
 800960c:	f007 fc8a 	bl	8010f24 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009610:	2003      	movs	r0, #3
 8009612:	f7fd fca5 	bl	8006f60 <memp_malloc>
 8009616:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d101      	bne.n	8009622 <tcp_seg_copy+0x2e>
    return NULL;
 800961e:	2300      	movs	r3, #0
 8009620:	e00a      	b.n	8009638 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009622:	2210      	movs	r2, #16
 8009624:	6879      	ldr	r1, [r7, #4]
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f007 fc66 	bl	8010ef8 <memcpy>
  pbuf_ref(cseg->p);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	4618      	mov	r0, r3
 8009632:	f7fe fc1b 	bl	8007e6c <pbuf_ref>
  return cseg;
 8009636:	68fb      	ldr	r3, [r7, #12]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	08012e4c 	.word	0x08012e4c
 8009644:	080133a0 	.word	0x080133a0
 8009648:	08012e90 	.word	0x08012e90

0800964c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
 8009658:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d109      	bne.n	8009674 <tcp_recv_null+0x28>
 8009660:	4b12      	ldr	r3, [pc, #72]	; (80096ac <tcp_recv_null+0x60>)
 8009662:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009666:	4912      	ldr	r1, [pc, #72]	; (80096b0 <tcp_recv_null+0x64>)
 8009668:	4812      	ldr	r0, [pc, #72]	; (80096b4 <tcp_recv_null+0x68>)
 800966a:	f007 fc5b 	bl	8010f24 <iprintf>
 800966e:	f06f 030f 	mvn.w	r3, #15
 8009672:	e016      	b.n	80096a2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d009      	beq.n	800968e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	891b      	ldrh	r3, [r3, #8]
 800967e:	4619      	mov	r1, r3
 8009680:	68b8      	ldr	r0, [r7, #8]
 8009682:	f7ff fab5 	bl	8008bf0 <tcp_recved>
    pbuf_free(p);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7fe fb50 	bl	8007d2c <pbuf_free>
 800968c:	e008      	b.n	80096a0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800968e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d104      	bne.n	80096a0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009696:	68b8      	ldr	r0, [r7, #8]
 8009698:	f7fe ffe6 	bl	8008668 <tcp_close>
 800969c:	4603      	mov	r3, r0
 800969e:	e000      	b.n	80096a2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	08012e4c 	.word	0x08012e4c
 80096b0:	080133bc 	.word	0x080133bc
 80096b4:	08012e90 	.word	0x08012e90

080096b8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b086      	sub	sp, #24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	4603      	mov	r3, r0
 80096c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80096c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	db01      	blt.n	80096ce <tcp_kill_prio+0x16>
 80096ca:	79fb      	ldrb	r3, [r7, #7]
 80096cc:	e000      	b.n	80096d0 <tcp_kill_prio+0x18>
 80096ce:	237f      	movs	r3, #127	; 0x7f
 80096d0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80096d2:	7afb      	ldrb	r3, [r7, #11]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d034      	beq.n	8009742 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80096d8:	7afb      	ldrb	r3, [r7, #11]
 80096da:	3b01      	subs	r3, #1
 80096dc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80096de:	2300      	movs	r3, #0
 80096e0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80096e2:	2300      	movs	r3, #0
 80096e4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80096e6:	4b19      	ldr	r3, [pc, #100]	; (800974c <tcp_kill_prio+0x94>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	617b      	str	r3, [r7, #20]
 80096ec:	e01f      	b.n	800972e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	7d5b      	ldrb	r3, [r3, #21]
 80096f2:	7afa      	ldrb	r2, [r7, #11]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d80c      	bhi.n	8009712 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80096fc:	7afa      	ldrb	r2, [r7, #11]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d112      	bne.n	8009728 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009702:	4b13      	ldr	r3, [pc, #76]	; (8009750 <tcp_kill_prio+0x98>)
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	6a1b      	ldr	r3, [r3, #32]
 800970a:	1ad3      	subs	r3, r2, r3
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	429a      	cmp	r2, r3
 8009710:	d80a      	bhi.n	8009728 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009712:	4b0f      	ldr	r3, [pc, #60]	; (8009750 <tcp_kill_prio+0x98>)
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	6a1b      	ldr	r3, [r3, #32]
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	7d5b      	ldrb	r3, [r3, #21]
 8009726:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	617b      	str	r3, [r7, #20]
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1dc      	bne.n	80096ee <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d004      	beq.n	8009744 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800973a:	6938      	ldr	r0, [r7, #16]
 800973c:	f7ff f87e 	bl	800883c <tcp_abort>
 8009740:	e000      	b.n	8009744 <tcp_kill_prio+0x8c>
    return;
 8009742:	bf00      	nop
  }
}
 8009744:	3718      	adds	r7, #24
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	20008730 	.word	0x20008730
 8009750:	20008724 	.word	0x20008724

08009754 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
 800975a:	4603      	mov	r3, r0
 800975c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800975e:	79fb      	ldrb	r3, [r7, #7]
 8009760:	2b08      	cmp	r3, #8
 8009762:	d009      	beq.n	8009778 <tcp_kill_state+0x24>
 8009764:	79fb      	ldrb	r3, [r7, #7]
 8009766:	2b09      	cmp	r3, #9
 8009768:	d006      	beq.n	8009778 <tcp_kill_state+0x24>
 800976a:	4b1a      	ldr	r3, [pc, #104]	; (80097d4 <tcp_kill_state+0x80>)
 800976c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009770:	4919      	ldr	r1, [pc, #100]	; (80097d8 <tcp_kill_state+0x84>)
 8009772:	481a      	ldr	r0, [pc, #104]	; (80097dc <tcp_kill_state+0x88>)
 8009774:	f007 fbd6 	bl	8010f24 <iprintf>

  inactivity = 0;
 8009778:	2300      	movs	r3, #0
 800977a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800977c:	2300      	movs	r3, #0
 800977e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009780:	4b17      	ldr	r3, [pc, #92]	; (80097e0 <tcp_kill_state+0x8c>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	617b      	str	r3, [r7, #20]
 8009786:	e017      	b.n	80097b8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	7d1b      	ldrb	r3, [r3, #20]
 800978c:	79fa      	ldrb	r2, [r7, #7]
 800978e:	429a      	cmp	r2, r3
 8009790:	d10f      	bne.n	80097b2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009792:	4b14      	ldr	r3, [pc, #80]	; (80097e4 <tcp_kill_state+0x90>)
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	429a      	cmp	r2, r3
 80097a0:	d807      	bhi.n	80097b2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80097a2:	4b10      	ldr	r3, [pc, #64]	; (80097e4 <tcp_kill_state+0x90>)
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	6a1b      	ldr	r3, [r3, #32]
 80097aa:	1ad3      	subs	r3, r2, r3
 80097ac:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	617b      	str	r3, [r7, #20]
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1e4      	bne.n	8009788 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d003      	beq.n	80097cc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80097c4:	2100      	movs	r1, #0
 80097c6:	6938      	ldr	r0, [r7, #16]
 80097c8:	f7fe ff7a 	bl	80086c0 <tcp_abandon>
  }
}
 80097cc:	bf00      	nop
 80097ce:	3718      	adds	r7, #24
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	08012e4c 	.word	0x08012e4c
 80097d8:	080133d8 	.word	0x080133d8
 80097dc:	08012e90 	.word	0x08012e90
 80097e0:	20008730 	.word	0x20008730
 80097e4:	20008724 	.word	0x20008724

080097e8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80097ee:	2300      	movs	r3, #0
 80097f0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80097f2:	2300      	movs	r3, #0
 80097f4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80097f6:	4b12      	ldr	r3, [pc, #72]	; (8009840 <tcp_kill_timewait+0x58>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	e012      	b.n	8009824 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80097fe:	4b11      	ldr	r3, [pc, #68]	; (8009844 <tcp_kill_timewait+0x5c>)
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	429a      	cmp	r2, r3
 800980c:	d807      	bhi.n	800981e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800980e:	4b0d      	ldr	r3, [pc, #52]	; (8009844 <tcp_kill_timewait+0x5c>)
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	60fb      	str	r3, [r7, #12]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1e9      	bne.n	80097fe <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d002      	beq.n	8009836 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009830:	68b8      	ldr	r0, [r7, #8]
 8009832:	f7ff f803 	bl	800883c <tcp_abort>
  }
}
 8009836:	bf00      	nop
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	20008734 	.word	0x20008734
 8009844:	20008724 	.word	0x20008724

08009848 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800984e:	4b10      	ldr	r3, [pc, #64]	; (8009890 <tcp_handle_closepend+0x48>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009854:	e014      	b.n	8009880 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	8b5b      	ldrh	r3, [r3, #26]
 8009860:	f003 0308 	and.w	r3, r3, #8
 8009864:	2b00      	cmp	r3, #0
 8009866:	d009      	beq.n	800987c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	8b5b      	ldrh	r3, [r3, #26]
 800986c:	f023 0308 	bic.w	r3, r3, #8
 8009870:	b29a      	uxth	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f7fe fe8c 	bl	8008594 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1e7      	bne.n	8009856 <tcp_handle_closepend+0xe>
  }
}
 8009886:	bf00      	nop
 8009888:	bf00      	nop
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	20008730 	.word	0x20008730

08009894 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	4603      	mov	r3, r0
 800989c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800989e:	2001      	movs	r0, #1
 80098a0:	f7fd fb5e 	bl	8006f60 <memp_malloc>
 80098a4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d126      	bne.n	80098fa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80098ac:	f7ff ffcc 	bl	8009848 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80098b0:	f7ff ff9a 	bl	80097e8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80098b4:	2001      	movs	r0, #1
 80098b6:	f7fd fb53 	bl	8006f60 <memp_malloc>
 80098ba:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d11b      	bne.n	80098fa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80098c2:	2009      	movs	r0, #9
 80098c4:	f7ff ff46 	bl	8009754 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80098c8:	2001      	movs	r0, #1
 80098ca:	f7fd fb49 	bl	8006f60 <memp_malloc>
 80098ce:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d111      	bne.n	80098fa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80098d6:	2008      	movs	r0, #8
 80098d8:	f7ff ff3c 	bl	8009754 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80098dc:	2001      	movs	r0, #1
 80098de:	f7fd fb3f 	bl	8006f60 <memp_malloc>
 80098e2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d107      	bne.n	80098fa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80098ea:	79fb      	ldrb	r3, [r7, #7]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7ff fee3 	bl	80096b8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80098f2:	2001      	movs	r0, #1
 80098f4:	f7fd fb34 	bl	8006f60 <memp_malloc>
 80098f8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d03f      	beq.n	8009980 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009900:	229c      	movs	r2, #156	; 0x9c
 8009902:	2100      	movs	r1, #0
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f007 fb05 	bl	8010f14 <memset>
    pcb->prio = prio;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	79fa      	ldrb	r2, [r7, #7]
 800990e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009916:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009920:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	22ff      	movs	r2, #255	; 0xff
 800992e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009936:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2206      	movs	r2, #6
 800993c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2206      	movs	r2, #6
 8009944:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800994c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2201      	movs	r2, #1
 8009952:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009956:	4b0d      	ldr	r3, [pc, #52]	; (800998c <tcp_alloc+0xf8>)
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800995e:	4b0c      	ldr	r3, [pc, #48]	; (8009990 <tcp_alloc+0xfc>)
 8009960:	781a      	ldrb	r2, [r3, #0]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800996c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	4a08      	ldr	r2, [pc, #32]	; (8009994 <tcp_alloc+0x100>)
 8009974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	4a07      	ldr	r2, [pc, #28]	; (8009998 <tcp_alloc+0x104>)
 800997c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009980:	68fb      	ldr	r3, [r7, #12]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	20008724 	.word	0x20008724
 8009990:	2000873a 	.word	0x2000873a
 8009994:	0800964d 	.word	0x0800964d
 8009998:	006ddd00 	.word	0x006ddd00

0800999c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	4603      	mov	r3, r0
 80099a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80099a6:	2040      	movs	r0, #64	; 0x40
 80099a8:	f7ff ff74 	bl	8009894 <tcp_alloc>
 80099ac:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80099ae:	68fb      	ldr	r3, [r7, #12]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d002      	beq.n	80099ce <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	611a      	str	r2, [r3, #16]
  }
}
 80099ce:	bf00      	nop
 80099d0:	370c      	adds	r7, #12
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
	...

080099dc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00e      	beq.n	8009a0a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	7d1b      	ldrb	r3, [r3, #20]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d106      	bne.n	8009a02 <tcp_recv+0x26>
 80099f4:	4b07      	ldr	r3, [pc, #28]	; (8009a14 <tcp_recv+0x38>)
 80099f6:	f240 72df 	movw	r2, #2015	; 0x7df
 80099fa:	4907      	ldr	r1, [pc, #28]	; (8009a18 <tcp_recv+0x3c>)
 80099fc:	4807      	ldr	r0, [pc, #28]	; (8009a1c <tcp_recv+0x40>)
 80099fe:	f007 fa91 	bl	8010f24 <iprintf>
    pcb->recv = recv;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	683a      	ldr	r2, [r7, #0]
 8009a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8009a0a:	bf00      	nop
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	08012e4c 	.word	0x08012e4c
 8009a18:	080133e8 	.word	0x080133e8
 8009a1c:	08012e90 	.word	0x08012e90

08009a20 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00e      	beq.n	8009a4e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	7d1b      	ldrb	r3, [r3, #20]
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d106      	bne.n	8009a46 <tcp_sent+0x26>
 8009a38:	4b07      	ldr	r3, [pc, #28]	; (8009a58 <tcp_sent+0x38>)
 8009a3a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8009a3e:	4907      	ldr	r1, [pc, #28]	; (8009a5c <tcp_sent+0x3c>)
 8009a40:	4807      	ldr	r0, [pc, #28]	; (8009a60 <tcp_sent+0x40>)
 8009a42:	f007 fa6f 	bl	8010f24 <iprintf>
    pcb->sent = sent;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	683a      	ldr	r2, [r7, #0]
 8009a4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8009a4e:	bf00      	nop
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	08012e4c 	.word	0x08012e4c
 8009a5c:	08013410 	.word	0x08013410
 8009a60:	08012e90 	.word	0x08012e90

08009a64 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00e      	beq.n	8009a92 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	7d1b      	ldrb	r3, [r3, #20]
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d106      	bne.n	8009a8a <tcp_err+0x26>
 8009a7c:	4b07      	ldr	r3, [pc, #28]	; (8009a9c <tcp_err+0x38>)
 8009a7e:	f640 020d 	movw	r2, #2061	; 0x80d
 8009a82:	4907      	ldr	r1, [pc, #28]	; (8009aa0 <tcp_err+0x3c>)
 8009a84:	4807      	ldr	r0, [pc, #28]	; (8009aa4 <tcp_err+0x40>)
 8009a86:	f007 fa4d 	bl	8010f24 <iprintf>
    pcb->errf = err;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	683a      	ldr	r2, [r7, #0]
 8009a8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8009a92:	bf00      	nop
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	08012e4c 	.word	0x08012e4c
 8009aa0:	08013438 	.word	0x08013438
 8009aa4:	08012e90 	.word	0x08012e90

08009aa8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d008      	beq.n	8009aca <tcp_accept+0x22>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	7d1b      	ldrb	r3, [r3, #20]
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d104      	bne.n	8009aca <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	619a      	str	r2, [r3, #24]
  }
}
 8009aca:	bf00      	nop
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr
	...

08009ad8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d107      	bne.n	8009afc <tcp_poll+0x24>
 8009aec:	4b0e      	ldr	r3, [pc, #56]	; (8009b28 <tcp_poll+0x50>)
 8009aee:	f640 023d 	movw	r2, #2109	; 0x83d
 8009af2:	490e      	ldr	r1, [pc, #56]	; (8009b2c <tcp_poll+0x54>)
 8009af4:	480e      	ldr	r0, [pc, #56]	; (8009b30 <tcp_poll+0x58>)
 8009af6:	f007 fa15 	bl	8010f24 <iprintf>
 8009afa:	e011      	b.n	8009b20 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	7d1b      	ldrb	r3, [r3, #20]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d106      	bne.n	8009b12 <tcp_poll+0x3a>
 8009b04:	4b08      	ldr	r3, [pc, #32]	; (8009b28 <tcp_poll+0x50>)
 8009b06:	f640 023e 	movw	r2, #2110	; 0x83e
 8009b0a:	490a      	ldr	r1, [pc, #40]	; (8009b34 <tcp_poll+0x5c>)
 8009b0c:	4808      	ldr	r0, [pc, #32]	; (8009b30 <tcp_poll+0x58>)
 8009b0e:	f007 fa09 	bl	8010f24 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	79fa      	ldrb	r2, [r7, #7]
 8009b1e:	775a      	strb	r2, [r3, #29]
}
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	08012e4c 	.word	0x08012e4c
 8009b2c:	08013460 	.word	0x08013460
 8009b30:	08012e90 	.word	0x08012e90
 8009b34:	08013478 	.word	0x08013478

08009b38 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d107      	bne.n	8009b56 <tcp_pcb_purge+0x1e>
 8009b46:	4b21      	ldr	r3, [pc, #132]	; (8009bcc <tcp_pcb_purge+0x94>)
 8009b48:	f640 0251 	movw	r2, #2129	; 0x851
 8009b4c:	4920      	ldr	r1, [pc, #128]	; (8009bd0 <tcp_pcb_purge+0x98>)
 8009b4e:	4821      	ldr	r0, [pc, #132]	; (8009bd4 <tcp_pcb_purge+0x9c>)
 8009b50:	f007 f9e8 	bl	8010f24 <iprintf>
 8009b54:	e037      	b.n	8009bc6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	7d1b      	ldrb	r3, [r3, #20]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d033      	beq.n	8009bc6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009b62:	2b0a      	cmp	r3, #10
 8009b64:	d02f      	beq.n	8009bc6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d02b      	beq.n	8009bc6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d007      	beq.n	8009b86 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fe f8d6 	bl	8007d2c <pbuf_free>
      pcb->refused_data = NULL;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d002      	beq.n	8009b94 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f986 	bl	8009ea0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b9a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7ff fcdb 	bl	800955c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7ff fcd6 	bl	800955c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	66da      	str	r2, [r3, #108]	; 0x6c
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	08012e4c 	.word	0x08012e4c
 8009bd0:	08013498 	.word	0x08013498
 8009bd4:	08012e90 	.word	0x08012e90

08009bd8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d106      	bne.n	8009bf6 <tcp_pcb_remove+0x1e>
 8009be8:	4b3e      	ldr	r3, [pc, #248]	; (8009ce4 <tcp_pcb_remove+0x10c>)
 8009bea:	f640 0283 	movw	r2, #2179	; 0x883
 8009bee:	493e      	ldr	r1, [pc, #248]	; (8009ce8 <tcp_pcb_remove+0x110>)
 8009bf0:	483e      	ldr	r0, [pc, #248]	; (8009cec <tcp_pcb_remove+0x114>)
 8009bf2:	f007 f997 	bl	8010f24 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d106      	bne.n	8009c0a <tcp_pcb_remove+0x32>
 8009bfc:	4b39      	ldr	r3, [pc, #228]	; (8009ce4 <tcp_pcb_remove+0x10c>)
 8009bfe:	f640 0284 	movw	r2, #2180	; 0x884
 8009c02:	493b      	ldr	r1, [pc, #236]	; (8009cf0 <tcp_pcb_remove+0x118>)
 8009c04:	4839      	ldr	r0, [pc, #228]	; (8009cec <tcp_pcb_remove+0x114>)
 8009c06:	f007 f98d 	bl	8010f24 <iprintf>

  TCP_RMV(pcblist, pcb);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d105      	bne.n	8009c20 <tcp_pcb_remove+0x48>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68da      	ldr	r2, [r3, #12]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	601a      	str	r2, [r3, #0]
 8009c1e:	e013      	b.n	8009c48 <tcp_pcb_remove+0x70>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	60fb      	str	r3, [r7, #12]
 8009c26:	e00c      	b.n	8009c42 <tcp_pcb_remove+0x6a>
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d104      	bne.n	8009c3c <tcp_pcb_remove+0x64>
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	68da      	ldr	r2, [r3, #12]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	60da      	str	r2, [r3, #12]
 8009c3a:	e005      	b.n	8009c48 <tcp_pcb_remove+0x70>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	60fb      	str	r3, [r7, #12]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d1ef      	bne.n	8009c28 <tcp_pcb_remove+0x50>
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009c4e:	6838      	ldr	r0, [r7, #0]
 8009c50:	f7ff ff72 	bl	8009b38 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	7d1b      	ldrb	r3, [r3, #20]
 8009c58:	2b0a      	cmp	r3, #10
 8009c5a:	d013      	beq.n	8009c84 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d00f      	beq.n	8009c84 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	8b5b      	ldrh	r3, [r3, #26]
 8009c68:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d009      	beq.n	8009c84 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	8b5b      	ldrh	r3, [r3, #26]
 8009c74:	f043 0302 	orr.w	r3, r3, #2
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009c7e:	6838      	ldr	r0, [r7, #0]
 8009c80:	f003 fbc6 	bl	800d410 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	7d1b      	ldrb	r3, [r3, #20]
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d020      	beq.n	8009cce <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d006      	beq.n	8009ca2 <tcp_pcb_remove+0xca>
 8009c94:	4b13      	ldr	r3, [pc, #76]	; (8009ce4 <tcp_pcb_remove+0x10c>)
 8009c96:	f640 0293 	movw	r2, #2195	; 0x893
 8009c9a:	4916      	ldr	r1, [pc, #88]	; (8009cf4 <tcp_pcb_remove+0x11c>)
 8009c9c:	4813      	ldr	r0, [pc, #76]	; (8009cec <tcp_pcb_remove+0x114>)
 8009c9e:	f007 f941 	bl	8010f24 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d006      	beq.n	8009cb8 <tcp_pcb_remove+0xe0>
 8009caa:	4b0e      	ldr	r3, [pc, #56]	; (8009ce4 <tcp_pcb_remove+0x10c>)
 8009cac:	f640 0294 	movw	r2, #2196	; 0x894
 8009cb0:	4911      	ldr	r1, [pc, #68]	; (8009cf8 <tcp_pcb_remove+0x120>)
 8009cb2:	480e      	ldr	r0, [pc, #56]	; (8009cec <tcp_pcb_remove+0x114>)
 8009cb4:	f007 f936 	bl	8010f24 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d006      	beq.n	8009cce <tcp_pcb_remove+0xf6>
 8009cc0:	4b08      	ldr	r3, [pc, #32]	; (8009ce4 <tcp_pcb_remove+0x10c>)
 8009cc2:	f640 0296 	movw	r2, #2198	; 0x896
 8009cc6:	490d      	ldr	r1, [pc, #52]	; (8009cfc <tcp_pcb_remove+0x124>)
 8009cc8:	4808      	ldr	r0, [pc, #32]	; (8009cec <tcp_pcb_remove+0x114>)
 8009cca:	f007 f92b 	bl	8010f24 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009cda:	bf00      	nop
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	08012e4c 	.word	0x08012e4c
 8009ce8:	080134b4 	.word	0x080134b4
 8009cec:	08012e90 	.word	0x08012e90
 8009cf0:	080134d0 	.word	0x080134d0
 8009cf4:	080134f0 	.word	0x080134f0
 8009cf8:	08013508 	.word	0x08013508
 8009cfc:	08013524 	.word	0x08013524

08009d00 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d106      	bne.n	8009d1c <tcp_next_iss+0x1c>
 8009d0e:	4b0a      	ldr	r3, [pc, #40]	; (8009d38 <tcp_next_iss+0x38>)
 8009d10:	f640 02af 	movw	r2, #2223	; 0x8af
 8009d14:	4909      	ldr	r1, [pc, #36]	; (8009d3c <tcp_next_iss+0x3c>)
 8009d16:	480a      	ldr	r0, [pc, #40]	; (8009d40 <tcp_next_iss+0x40>)
 8009d18:	f007 f904 	bl	8010f24 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009d1c:	4b09      	ldr	r3, [pc, #36]	; (8009d44 <tcp_next_iss+0x44>)
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	4b09      	ldr	r3, [pc, #36]	; (8009d48 <tcp_next_iss+0x48>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4413      	add	r3, r2
 8009d26:	4a07      	ldr	r2, [pc, #28]	; (8009d44 <tcp_next_iss+0x44>)
 8009d28:	6013      	str	r3, [r2, #0]
  return iss;
 8009d2a:	4b06      	ldr	r3, [pc, #24]	; (8009d44 <tcp_next_iss+0x44>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	08012e4c 	.word	0x08012e4c
 8009d3c:	0801353c 	.word	0x0801353c
 8009d40:	08012e90 	.word	0x08012e90
 8009d44:	20000054 	.word	0x20000054
 8009d48:	20008724 	.word	0x20008724

08009d4c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	4603      	mov	r3, r0
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
 8009d58:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d106      	bne.n	8009d6e <tcp_eff_send_mss_netif+0x22>
 8009d60:	4b14      	ldr	r3, [pc, #80]	; (8009db4 <tcp_eff_send_mss_netif+0x68>)
 8009d62:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009d66:	4914      	ldr	r1, [pc, #80]	; (8009db8 <tcp_eff_send_mss_netif+0x6c>)
 8009d68:	4814      	ldr	r0, [pc, #80]	; (8009dbc <tcp_eff_send_mss_netif+0x70>)
 8009d6a:	f007 f8db 	bl	8010f24 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d101      	bne.n	8009d78 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009d74:	89fb      	ldrh	r3, [r7, #14]
 8009d76:	e019      	b.n	8009dac <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009d7c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009d7e:	8afb      	ldrh	r3, [r7, #22]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d012      	beq.n	8009daa <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009d84:	2328      	movs	r3, #40	; 0x28
 8009d86:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009d88:	8afa      	ldrh	r2, [r7, #22]
 8009d8a:	8abb      	ldrh	r3, [r7, #20]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d904      	bls.n	8009d9a <tcp_eff_send_mss_netif+0x4e>
 8009d90:	8afa      	ldrh	r2, [r7, #22]
 8009d92:	8abb      	ldrh	r3, [r7, #20]
 8009d94:	1ad3      	subs	r3, r2, r3
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	e000      	b.n	8009d9c <tcp_eff_send_mss_netif+0x50>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009d9e:	8a7a      	ldrh	r2, [r7, #18]
 8009da0:	89fb      	ldrh	r3, [r7, #14]
 8009da2:	4293      	cmp	r3, r2
 8009da4:	bf28      	it	cs
 8009da6:	4613      	movcs	r3, r2
 8009da8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009daa:	89fb      	ldrh	r3, [r7, #14]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3718      	adds	r7, #24
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	08012e4c 	.word	0x08012e4c
 8009db8:	08013558 	.word	0x08013558
 8009dbc:	08012e90 	.word	0x08012e90

08009dc0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d119      	bne.n	8009e08 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009dd4:	4b10      	ldr	r3, [pc, #64]	; (8009e18 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8009dd6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009dda:	4910      	ldr	r1, [pc, #64]	; (8009e1c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009ddc:	4810      	ldr	r0, [pc, #64]	; (8009e20 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8009dde:	f007 f8a1 	bl	8010f24 <iprintf>

  while (pcb != NULL) {
 8009de2:	e011      	b.n	8009e08 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d108      	bne.n	8009e02 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f7fe fd20 	bl	800883c <tcp_abort>
      pcb = next;
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	60fb      	str	r3, [r7, #12]
 8009e00:	e002      	b.n	8009e08 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1ea      	bne.n	8009de4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8009e0e:	bf00      	nop
 8009e10:	bf00      	nop
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	08012e4c 	.word	0x08012e4c
 8009e1c:	08013580 	.word	0x08013580
 8009e20:	08012e90 	.word	0x08012e90

08009e24 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d02a      	beq.n	8009e8a <tcp_netif_ip_addr_changed+0x66>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d026      	beq.n	8009e8a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009e3c:	4b15      	ldr	r3, [pc, #84]	; (8009e94 <tcp_netif_ip_addr_changed+0x70>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4619      	mov	r1, r3
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f7ff ffbc 	bl	8009dc0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009e48:	4b13      	ldr	r3, [pc, #76]	; (8009e98 <tcp_netif_ip_addr_changed+0x74>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7ff ffb6 	bl	8009dc0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d017      	beq.n	8009e8a <tcp_netif_ip_addr_changed+0x66>
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d013      	beq.n	8009e8a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009e62:	4b0e      	ldr	r3, [pc, #56]	; (8009e9c <tcp_netif_ip_addr_changed+0x78>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	60fb      	str	r3, [r7, #12]
 8009e68:	e00c      	b.n	8009e84 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d103      	bne.n	8009e7e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	60fb      	str	r3, [r7, #12]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1ef      	bne.n	8009e6a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009e8a:	bf00      	nop
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	20008730 	.word	0x20008730
 8009e98:	20008728 	.word	0x20008728
 8009e9c:	2000872c 	.word	0x2000872c

08009ea0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d007      	beq.n	8009ec0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7ff fb51 	bl	800955c <tcp_segs_free>
    pcb->ooseq = NULL;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009ec0:	bf00      	nop
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009ec8:	b590      	push	{r4, r7, lr}
 8009eca:	b08d      	sub	sp, #52	; 0x34
 8009ecc:	af04      	add	r7, sp, #16
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d105      	bne.n	8009ee4 <tcp_input+0x1c>
 8009ed8:	4b9b      	ldr	r3, [pc, #620]	; (800a148 <tcp_input+0x280>)
 8009eda:	2283      	movs	r2, #131	; 0x83
 8009edc:	499b      	ldr	r1, [pc, #620]	; (800a14c <tcp_input+0x284>)
 8009ede:	489c      	ldr	r0, [pc, #624]	; (800a150 <tcp_input+0x288>)
 8009ee0:	f007 f820 	bl	8010f24 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	4a9a      	ldr	r2, [pc, #616]	; (800a154 <tcp_input+0x28c>)
 8009eea:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	895b      	ldrh	r3, [r3, #10]
 8009ef0:	2b13      	cmp	r3, #19
 8009ef2:	f240 83d1 	bls.w	800a698 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009ef6:	4b98      	ldr	r3, [pc, #608]	; (800a158 <tcp_input+0x290>)
 8009ef8:	695b      	ldr	r3, [r3, #20]
 8009efa:	4a97      	ldr	r2, [pc, #604]	; (800a158 <tcp_input+0x290>)
 8009efc:	6812      	ldr	r2, [r2, #0]
 8009efe:	4611      	mov	r1, r2
 8009f00:	4618      	mov	r0, r3
 8009f02:	f006 f86f 	bl	800ffe4 <ip4_addr_isbroadcast_u32>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f040 83c7 	bne.w	800a69c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009f0e:	4b92      	ldr	r3, [pc, #584]	; (800a158 <tcp_input+0x290>)
 8009f10:	695b      	ldr	r3, [r3, #20]
 8009f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009f16:	2be0      	cmp	r3, #224	; 0xe0
 8009f18:	f000 83c0 	beq.w	800a69c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009f1c:	4b8d      	ldr	r3, [pc, #564]	; (800a154 <tcp_input+0x28c>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	899b      	ldrh	r3, [r3, #12]
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7fc fb39 	bl	800659c <lwip_htons>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	0b1b      	lsrs	r3, r3, #12
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009f36:	7cbb      	ldrb	r3, [r7, #18]
 8009f38:	2b13      	cmp	r3, #19
 8009f3a:	f240 83b1 	bls.w	800a6a0 <tcp_input+0x7d8>
 8009f3e:	7cbb      	ldrb	r3, [r7, #18]
 8009f40:	b29a      	uxth	r2, r3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	891b      	ldrh	r3, [r3, #8]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	f200 83aa 	bhi.w	800a6a0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009f4c:	7cbb      	ldrb	r3, [r7, #18]
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	3b14      	subs	r3, #20
 8009f52:	b29a      	uxth	r2, r3
 8009f54:	4b81      	ldr	r3, [pc, #516]	; (800a15c <tcp_input+0x294>)
 8009f56:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009f58:	4b81      	ldr	r3, [pc, #516]	; (800a160 <tcp_input+0x298>)
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	895a      	ldrh	r2, [r3, #10]
 8009f62:	7cbb      	ldrb	r3, [r7, #18]
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d309      	bcc.n	8009f7e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009f6a:	4b7c      	ldr	r3, [pc, #496]	; (800a15c <tcp_input+0x294>)
 8009f6c:	881a      	ldrh	r2, [r3, #0]
 8009f6e:	4b7d      	ldr	r3, [pc, #500]	; (800a164 <tcp_input+0x29c>)
 8009f70:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009f72:	7cbb      	ldrb	r3, [r7, #18]
 8009f74:	4619      	mov	r1, r3
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f7fd fe52 	bl	8007c20 <pbuf_remove_header>
 8009f7c:	e04e      	b.n	800a01c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d105      	bne.n	8009f92 <tcp_input+0xca>
 8009f86:	4b70      	ldr	r3, [pc, #448]	; (800a148 <tcp_input+0x280>)
 8009f88:	22c2      	movs	r2, #194	; 0xc2
 8009f8a:	4977      	ldr	r1, [pc, #476]	; (800a168 <tcp_input+0x2a0>)
 8009f8c:	4870      	ldr	r0, [pc, #448]	; (800a150 <tcp_input+0x288>)
 8009f8e:	f006 ffc9 	bl	8010f24 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009f92:	2114      	movs	r1, #20
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7fd fe43 	bl	8007c20 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	895a      	ldrh	r2, [r3, #10]
 8009f9e:	4b71      	ldr	r3, [pc, #452]	; (800a164 <tcp_input+0x29c>)
 8009fa0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009fa2:	4b6e      	ldr	r3, [pc, #440]	; (800a15c <tcp_input+0x294>)
 8009fa4:	881a      	ldrh	r2, [r3, #0]
 8009fa6:	4b6f      	ldr	r3, [pc, #444]	; (800a164 <tcp_input+0x29c>)
 8009fa8:	881b      	ldrh	r3, [r3, #0]
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009fae:	4b6d      	ldr	r3, [pc, #436]	; (800a164 <tcp_input+0x29c>)
 8009fb0:	881b      	ldrh	r3, [r3, #0]
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f7fd fe33 	bl	8007c20 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	895b      	ldrh	r3, [r3, #10]
 8009fc0:	8a3a      	ldrh	r2, [r7, #16]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	f200 836e 	bhi.w	800a6a4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	4a64      	ldr	r2, [pc, #400]	; (800a160 <tcp_input+0x298>)
 8009fd0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	8a3a      	ldrh	r2, [r7, #16]
 8009fd8:	4611      	mov	r1, r2
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7fd fe20 	bl	8007c20 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	891a      	ldrh	r2, [r3, #8]
 8009fe4:	8a3b      	ldrh	r3, [r7, #16]
 8009fe6:	1ad3      	subs	r3, r2, r3
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	895b      	ldrh	r3, [r3, #10]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d005      	beq.n	800a002 <tcp_input+0x13a>
 8009ff6:	4b54      	ldr	r3, [pc, #336]	; (800a148 <tcp_input+0x280>)
 8009ff8:	22df      	movs	r2, #223	; 0xdf
 8009ffa:	495c      	ldr	r1, [pc, #368]	; (800a16c <tcp_input+0x2a4>)
 8009ffc:	4854      	ldr	r0, [pc, #336]	; (800a150 <tcp_input+0x288>)
 8009ffe:	f006 ff91 	bl	8010f24 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	891a      	ldrh	r2, [r3, #8]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	891b      	ldrh	r3, [r3, #8]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d005      	beq.n	800a01c <tcp_input+0x154>
 800a010:	4b4d      	ldr	r3, [pc, #308]	; (800a148 <tcp_input+0x280>)
 800a012:	22e0      	movs	r2, #224	; 0xe0
 800a014:	4956      	ldr	r1, [pc, #344]	; (800a170 <tcp_input+0x2a8>)
 800a016:	484e      	ldr	r0, [pc, #312]	; (800a150 <tcp_input+0x288>)
 800a018:	f006 ff84 	bl	8010f24 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a01c:	4b4d      	ldr	r3, [pc, #308]	; (800a154 <tcp_input+0x28c>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	881b      	ldrh	r3, [r3, #0]
 800a022:	b29b      	uxth	r3, r3
 800a024:	4a4b      	ldr	r2, [pc, #300]	; (800a154 <tcp_input+0x28c>)
 800a026:	6814      	ldr	r4, [r2, #0]
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fc fab7 	bl	800659c <lwip_htons>
 800a02e:	4603      	mov	r3, r0
 800a030:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a032:	4b48      	ldr	r3, [pc, #288]	; (800a154 <tcp_input+0x28c>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	885b      	ldrh	r3, [r3, #2]
 800a038:	b29b      	uxth	r3, r3
 800a03a:	4a46      	ldr	r2, [pc, #280]	; (800a154 <tcp_input+0x28c>)
 800a03c:	6814      	ldr	r4, [r2, #0]
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fc faac 	bl	800659c <lwip_htons>
 800a044:	4603      	mov	r3, r0
 800a046:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a048:	4b42      	ldr	r3, [pc, #264]	; (800a154 <tcp_input+0x28c>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	4a41      	ldr	r2, [pc, #260]	; (800a154 <tcp_input+0x28c>)
 800a050:	6814      	ldr	r4, [r2, #0]
 800a052:	4618      	mov	r0, r3
 800a054:	f7fc fab7 	bl	80065c6 <lwip_htonl>
 800a058:	4603      	mov	r3, r0
 800a05a:	6063      	str	r3, [r4, #4]
 800a05c:	6863      	ldr	r3, [r4, #4]
 800a05e:	4a45      	ldr	r2, [pc, #276]	; (800a174 <tcp_input+0x2ac>)
 800a060:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a062:	4b3c      	ldr	r3, [pc, #240]	; (800a154 <tcp_input+0x28c>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	4a3a      	ldr	r2, [pc, #232]	; (800a154 <tcp_input+0x28c>)
 800a06a:	6814      	ldr	r4, [r2, #0]
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7fc faaa 	bl	80065c6 <lwip_htonl>
 800a072:	4603      	mov	r3, r0
 800a074:	60a3      	str	r3, [r4, #8]
 800a076:	68a3      	ldr	r3, [r4, #8]
 800a078:	4a3f      	ldr	r2, [pc, #252]	; (800a178 <tcp_input+0x2b0>)
 800a07a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a07c:	4b35      	ldr	r3, [pc, #212]	; (800a154 <tcp_input+0x28c>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	89db      	ldrh	r3, [r3, #14]
 800a082:	b29b      	uxth	r3, r3
 800a084:	4a33      	ldr	r2, [pc, #204]	; (800a154 <tcp_input+0x28c>)
 800a086:	6814      	ldr	r4, [r2, #0]
 800a088:	4618      	mov	r0, r3
 800a08a:	f7fc fa87 	bl	800659c <lwip_htons>
 800a08e:	4603      	mov	r3, r0
 800a090:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a092:	4b30      	ldr	r3, [pc, #192]	; (800a154 <tcp_input+0x28c>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	899b      	ldrh	r3, [r3, #12]
 800a098:	b29b      	uxth	r3, r3
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fc fa7e 	bl	800659c <lwip_htons>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0a8:	b2da      	uxtb	r2, r3
 800a0aa:	4b34      	ldr	r3, [pc, #208]	; (800a17c <tcp_input+0x2b4>)
 800a0ac:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	891a      	ldrh	r2, [r3, #8]
 800a0b2:	4b33      	ldr	r3, [pc, #204]	; (800a180 <tcp_input+0x2b8>)
 800a0b4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a0b6:	4b31      	ldr	r3, [pc, #196]	; (800a17c <tcp_input+0x2b4>)
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	f003 0303 	and.w	r3, r3, #3
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00c      	beq.n	800a0dc <tcp_input+0x214>
    tcplen++;
 800a0c2:	4b2f      	ldr	r3, [pc, #188]	; (800a180 <tcp_input+0x2b8>)
 800a0c4:	881b      	ldrh	r3, [r3, #0]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	b29a      	uxth	r2, r3
 800a0ca:	4b2d      	ldr	r3, [pc, #180]	; (800a180 <tcp_input+0x2b8>)
 800a0cc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	891a      	ldrh	r2, [r3, #8]
 800a0d2:	4b2b      	ldr	r3, [pc, #172]	; (800a180 <tcp_input+0x2b8>)
 800a0d4:	881b      	ldrh	r3, [r3, #0]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	f200 82e6 	bhi.w	800a6a8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0e0:	4b28      	ldr	r3, [pc, #160]	; (800a184 <tcp_input+0x2bc>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	61fb      	str	r3, [r7, #28]
 800a0e6:	e09d      	b.n	800a224 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	7d1b      	ldrb	r3, [r3, #20]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d105      	bne.n	800a0fc <tcp_input+0x234>
 800a0f0:	4b15      	ldr	r3, [pc, #84]	; (800a148 <tcp_input+0x280>)
 800a0f2:	22fb      	movs	r2, #251	; 0xfb
 800a0f4:	4924      	ldr	r1, [pc, #144]	; (800a188 <tcp_input+0x2c0>)
 800a0f6:	4816      	ldr	r0, [pc, #88]	; (800a150 <tcp_input+0x288>)
 800a0f8:	f006 ff14 	bl	8010f24 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	7d1b      	ldrb	r3, [r3, #20]
 800a100:	2b0a      	cmp	r3, #10
 800a102:	d105      	bne.n	800a110 <tcp_input+0x248>
 800a104:	4b10      	ldr	r3, [pc, #64]	; (800a148 <tcp_input+0x280>)
 800a106:	22fc      	movs	r2, #252	; 0xfc
 800a108:	4920      	ldr	r1, [pc, #128]	; (800a18c <tcp_input+0x2c4>)
 800a10a:	4811      	ldr	r0, [pc, #68]	; (800a150 <tcp_input+0x288>)
 800a10c:	f006 ff0a 	bl	8010f24 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a110:	69fb      	ldr	r3, [r7, #28]
 800a112:	7d1b      	ldrb	r3, [r3, #20]
 800a114:	2b01      	cmp	r3, #1
 800a116:	d105      	bne.n	800a124 <tcp_input+0x25c>
 800a118:	4b0b      	ldr	r3, [pc, #44]	; (800a148 <tcp_input+0x280>)
 800a11a:	22fd      	movs	r2, #253	; 0xfd
 800a11c:	491c      	ldr	r1, [pc, #112]	; (800a190 <tcp_input+0x2c8>)
 800a11e:	480c      	ldr	r0, [pc, #48]	; (800a150 <tcp_input+0x288>)
 800a120:	f006 ff00 	bl	8010f24 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	7a1b      	ldrb	r3, [r3, #8]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d033      	beq.n	800a194 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a12c:	69fb      	ldr	r3, [r7, #28]
 800a12e:	7a1a      	ldrb	r2, [r3, #8]
 800a130:	4b09      	ldr	r3, [pc, #36]	; (800a158 <tcp_input+0x290>)
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a138:	3301      	adds	r3, #1
 800a13a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d029      	beq.n	800a194 <tcp_input+0x2cc>
      prev = pcb;
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	61bb      	str	r3, [r7, #24]
      continue;
 800a144:	e06b      	b.n	800a21e <tcp_input+0x356>
 800a146:	bf00      	nop
 800a148:	080135b4 	.word	0x080135b4
 800a14c:	080135e8 	.word	0x080135e8
 800a150:	08013600 	.word	0x08013600
 800a154:	2000874c 	.word	0x2000874c
 800a158:	200051b4 	.word	0x200051b4
 800a15c:	20008750 	.word	0x20008750
 800a160:	20008754 	.word	0x20008754
 800a164:	20008752 	.word	0x20008752
 800a168:	08013628 	.word	0x08013628
 800a16c:	08013638 	.word	0x08013638
 800a170:	08013644 	.word	0x08013644
 800a174:	2000875c 	.word	0x2000875c
 800a178:	20008760 	.word	0x20008760
 800a17c:	20008768 	.word	0x20008768
 800a180:	20008766 	.word	0x20008766
 800a184:	20008730 	.word	0x20008730
 800a188:	08013664 	.word	0x08013664
 800a18c:	0801368c 	.word	0x0801368c
 800a190:	080136b8 	.word	0x080136b8
    }

    if (pcb->remote_port == tcphdr->src &&
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	8b1a      	ldrh	r2, [r3, #24]
 800a198:	4b72      	ldr	r3, [pc, #456]	; (800a364 <tcp_input+0x49c>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	881b      	ldrh	r3, [r3, #0]
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d13a      	bne.n	800a21a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	8ada      	ldrh	r2, [r3, #22]
 800a1a8:	4b6e      	ldr	r3, [pc, #440]	; (800a364 <tcp_input+0x49c>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	885b      	ldrh	r3, [r3, #2]
 800a1ae:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d132      	bne.n	800a21a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	685a      	ldr	r2, [r3, #4]
 800a1b8:	4b6b      	ldr	r3, [pc, #428]	; (800a368 <tcp_input+0x4a0>)
 800a1ba:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d12c      	bne.n	800a21a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	4b68      	ldr	r3, [pc, #416]	; (800a368 <tcp_input+0x4a0>)
 800a1c6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d126      	bne.n	800a21a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	69fa      	ldr	r2, [r7, #28]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d106      	bne.n	800a1e4 <tcp_input+0x31c>
 800a1d6:	4b65      	ldr	r3, [pc, #404]	; (800a36c <tcp_input+0x4a4>)
 800a1d8:	f240 120d 	movw	r2, #269	; 0x10d
 800a1dc:	4964      	ldr	r1, [pc, #400]	; (800a370 <tcp_input+0x4a8>)
 800a1de:	4865      	ldr	r0, [pc, #404]	; (800a374 <tcp_input+0x4ac>)
 800a1e0:	f006 fea0 	bl	8010f24 <iprintf>
      if (prev != NULL) {
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00a      	beq.n	800a200 <tcp_input+0x338>
        prev->next = pcb->next;
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	68da      	ldr	r2, [r3, #12]
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a1f2:	4b61      	ldr	r3, [pc, #388]	; (800a378 <tcp_input+0x4b0>)
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a1fa:	4a5f      	ldr	r2, [pc, #380]	; (800a378 <tcp_input+0x4b0>)
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	69fa      	ldr	r2, [r7, #28]
 800a206:	429a      	cmp	r2, r3
 800a208:	d111      	bne.n	800a22e <tcp_input+0x366>
 800a20a:	4b58      	ldr	r3, [pc, #352]	; (800a36c <tcp_input+0x4a4>)
 800a20c:	f240 1215 	movw	r2, #277	; 0x115
 800a210:	495a      	ldr	r1, [pc, #360]	; (800a37c <tcp_input+0x4b4>)
 800a212:	4858      	ldr	r0, [pc, #352]	; (800a374 <tcp_input+0x4ac>)
 800a214:	f006 fe86 	bl	8010f24 <iprintf>
      break;
 800a218:	e009      	b.n	800a22e <tcp_input+0x366>
    }
    prev = pcb;
 800a21a:	69fb      	ldr	r3, [r7, #28]
 800a21c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	61fb      	str	r3, [r7, #28]
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	2b00      	cmp	r3, #0
 800a228:	f47f af5e 	bne.w	800a0e8 <tcp_input+0x220>
 800a22c:	e000      	b.n	800a230 <tcp_input+0x368>
      break;
 800a22e:	bf00      	nop
  }

  if (pcb == NULL) {
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	2b00      	cmp	r3, #0
 800a234:	f040 80aa 	bne.w	800a38c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a238:	4b51      	ldr	r3, [pc, #324]	; (800a380 <tcp_input+0x4b8>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	61fb      	str	r3, [r7, #28]
 800a23e:	e03f      	b.n	800a2c0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	7d1b      	ldrb	r3, [r3, #20]
 800a244:	2b0a      	cmp	r3, #10
 800a246:	d006      	beq.n	800a256 <tcp_input+0x38e>
 800a248:	4b48      	ldr	r3, [pc, #288]	; (800a36c <tcp_input+0x4a4>)
 800a24a:	f240 121f 	movw	r2, #287	; 0x11f
 800a24e:	494d      	ldr	r1, [pc, #308]	; (800a384 <tcp_input+0x4bc>)
 800a250:	4848      	ldr	r0, [pc, #288]	; (800a374 <tcp_input+0x4ac>)
 800a252:	f006 fe67 	bl	8010f24 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	7a1b      	ldrb	r3, [r3, #8]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d009      	beq.n	800a272 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	7a1a      	ldrb	r2, [r3, #8]
 800a262:	4b41      	ldr	r3, [pc, #260]	; (800a368 <tcp_input+0x4a0>)
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a26a:	3301      	adds	r3, #1
 800a26c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a26e:	429a      	cmp	r2, r3
 800a270:	d122      	bne.n	800a2b8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	8b1a      	ldrh	r2, [r3, #24]
 800a276:	4b3b      	ldr	r3, [pc, #236]	; (800a364 <tcp_input+0x49c>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	881b      	ldrh	r3, [r3, #0]
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	429a      	cmp	r2, r3
 800a280:	d11b      	bne.n	800a2ba <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	8ada      	ldrh	r2, [r3, #22]
 800a286:	4b37      	ldr	r3, [pc, #220]	; (800a364 <tcp_input+0x49c>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	885b      	ldrh	r3, [r3, #2]
 800a28c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a28e:	429a      	cmp	r2, r3
 800a290:	d113      	bne.n	800a2ba <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	685a      	ldr	r2, [r3, #4]
 800a296:	4b34      	ldr	r3, [pc, #208]	; (800a368 <tcp_input+0x4a0>)
 800a298:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d10d      	bne.n	800a2ba <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	4b31      	ldr	r3, [pc, #196]	; (800a368 <tcp_input+0x4a0>)
 800a2a4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d107      	bne.n	800a2ba <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a2aa:	69f8      	ldr	r0, [r7, #28]
 800a2ac:	f000 fb56 	bl	800a95c <tcp_timewait_input>
        }
        pbuf_free(p);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f7fd fd3b 	bl	8007d2c <pbuf_free>
        return;
 800a2b6:	e1fd      	b.n	800a6b4 <tcp_input+0x7ec>
        continue;
 800a2b8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	61fb      	str	r3, [r7, #28]
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1bc      	bne.n	800a240 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a2ca:	4b2f      	ldr	r3, [pc, #188]	; (800a388 <tcp_input+0x4c0>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	617b      	str	r3, [r7, #20]
 800a2d0:	e02a      	b.n	800a328 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	7a1b      	ldrb	r3, [r3, #8]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00c      	beq.n	800a2f4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	7a1a      	ldrb	r2, [r3, #8]
 800a2de:	4b22      	ldr	r3, [pc, #136]	; (800a368 <tcp_input+0x4a0>)
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d002      	beq.n	800a2f4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	61bb      	str	r3, [r7, #24]
        continue;
 800a2f2:	e016      	b.n	800a322 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	8ada      	ldrh	r2, [r3, #22]
 800a2f8:	4b1a      	ldr	r3, [pc, #104]	; (800a364 <tcp_input+0x49c>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	885b      	ldrh	r3, [r3, #2]
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	429a      	cmp	r2, r3
 800a302:	d10c      	bne.n	800a31e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	4b17      	ldr	r3, [pc, #92]	; (800a368 <tcp_input+0x4a0>)
 800a30a:	695b      	ldr	r3, [r3, #20]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d00f      	beq.n	800a330 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00d      	beq.n	800a332 <tcp_input+0x46a>
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d009      	beq.n	800a332 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	617b      	str	r3, [r7, #20]
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d1d1      	bne.n	800a2d2 <tcp_input+0x40a>
 800a32e:	e000      	b.n	800a332 <tcp_input+0x46a>
            break;
 800a330:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d029      	beq.n	800a38c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00a      	beq.n	800a354 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	68da      	ldr	r2, [r3, #12]
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a346:	4b10      	ldr	r3, [pc, #64]	; (800a388 <tcp_input+0x4c0>)
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a34e:	4a0e      	ldr	r2, [pc, #56]	; (800a388 <tcp_input+0x4c0>)
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a354:	6978      	ldr	r0, [r7, #20]
 800a356:	f000 fa03 	bl	800a760 <tcp_listen_input>
      }
      pbuf_free(p);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f7fd fce6 	bl	8007d2c <pbuf_free>
      return;
 800a360:	e1a8      	b.n	800a6b4 <tcp_input+0x7ec>
 800a362:	bf00      	nop
 800a364:	2000874c 	.word	0x2000874c
 800a368:	200051b4 	.word	0x200051b4
 800a36c:	080135b4 	.word	0x080135b4
 800a370:	080136e0 	.word	0x080136e0
 800a374:	08013600 	.word	0x08013600
 800a378:	20008730 	.word	0x20008730
 800a37c:	0801370c 	.word	0x0801370c
 800a380:	20008734 	.word	0x20008734
 800a384:	08013738 	.word	0x08013738
 800a388:	2000872c 	.word	0x2000872c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f000 8158 	beq.w	800a644 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a394:	4b95      	ldr	r3, [pc, #596]	; (800a5ec <tcp_input+0x724>)
 800a396:	2200      	movs	r2, #0
 800a398:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	891a      	ldrh	r2, [r3, #8]
 800a39e:	4b93      	ldr	r3, [pc, #588]	; (800a5ec <tcp_input+0x724>)
 800a3a0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a3a2:	4a92      	ldr	r2, [pc, #584]	; (800a5ec <tcp_input+0x724>)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a3a8:	4b91      	ldr	r3, [pc, #580]	; (800a5f0 <tcp_input+0x728>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a8f      	ldr	r2, [pc, #572]	; (800a5ec <tcp_input+0x724>)
 800a3ae:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a3b0:	4b90      	ldr	r3, [pc, #576]	; (800a5f4 <tcp_input+0x72c>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a3b6:	4b90      	ldr	r3, [pc, #576]	; (800a5f8 <tcp_input+0x730>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a3bc:	4b8f      	ldr	r3, [pc, #572]	; (800a5fc <tcp_input+0x734>)
 800a3be:	2200      	movs	r2, #0
 800a3c0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a3c2:	4b8f      	ldr	r3, [pc, #572]	; (800a600 <tcp_input+0x738>)
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	f003 0308 	and.w	r3, r3, #8
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d006      	beq.n	800a3dc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	7b5b      	ldrb	r3, [r3, #13]
 800a3d2:	f043 0301 	orr.w	r3, r3, #1
 800a3d6:	b2da      	uxtb	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d017      	beq.n	800a414 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a3e4:	69f8      	ldr	r0, [r7, #28]
 800a3e6:	f7ff f83d 	bl	8009464 <tcp_process_refused_data>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	f113 0f0d 	cmn.w	r3, #13
 800a3f0:	d007      	beq.n	800a402 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a3f2:	69fb      	ldr	r3, [r7, #28]
 800a3f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00c      	beq.n	800a414 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a3fa:	4b82      	ldr	r3, [pc, #520]	; (800a604 <tcp_input+0x73c>)
 800a3fc:	881b      	ldrh	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d008      	beq.n	800a414 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a406:	2b00      	cmp	r3, #0
 800a408:	f040 80e3 	bne.w	800a5d2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a40c:	69f8      	ldr	r0, [r7, #28]
 800a40e:	f003 fe05 	bl	800e01c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a412:	e0de      	b.n	800a5d2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800a414:	4a7c      	ldr	r2, [pc, #496]	; (800a608 <tcp_input+0x740>)
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a41a:	69f8      	ldr	r0, [r7, #28]
 800a41c:	f000 fb18 	bl	800aa50 <tcp_process>
 800a420:	4603      	mov	r3, r0
 800a422:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a424:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a428:	f113 0f0d 	cmn.w	r3, #13
 800a42c:	f000 80d3 	beq.w	800a5d6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800a430:	4b71      	ldr	r3, [pc, #452]	; (800a5f8 <tcp_input+0x730>)
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	f003 0308 	and.w	r3, r3, #8
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d015      	beq.n	800a468 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a442:	2b00      	cmp	r3, #0
 800a444:	d008      	beq.n	800a458 <tcp_input+0x590>
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a44c:	69fa      	ldr	r2, [r7, #28]
 800a44e:	6912      	ldr	r2, [r2, #16]
 800a450:	f06f 010d 	mvn.w	r1, #13
 800a454:	4610      	mov	r0, r2
 800a456:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a458:	69f9      	ldr	r1, [r7, #28]
 800a45a:	486c      	ldr	r0, [pc, #432]	; (800a60c <tcp_input+0x744>)
 800a45c:	f7ff fbbc 	bl	8009bd8 <tcp_pcb_remove>
        tcp_free(pcb);
 800a460:	69f8      	ldr	r0, [r7, #28]
 800a462:	f7fd ff03 	bl	800826c <tcp_free>
 800a466:	e0da      	b.n	800a61e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800a468:	2300      	movs	r3, #0
 800a46a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a46c:	4b63      	ldr	r3, [pc, #396]	; (800a5fc <tcp_input+0x734>)
 800a46e:	881b      	ldrh	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d01d      	beq.n	800a4b0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a474:	4b61      	ldr	r3, [pc, #388]	; (800a5fc <tcp_input+0x734>)
 800a476:	881b      	ldrh	r3, [r3, #0]
 800a478:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a480:	2b00      	cmp	r3, #0
 800a482:	d00a      	beq.n	800a49a <tcp_input+0x5d2>
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a48a:	69fa      	ldr	r2, [r7, #28]
 800a48c:	6910      	ldr	r0, [r2, #16]
 800a48e:	89fa      	ldrh	r2, [r7, #14]
 800a490:	69f9      	ldr	r1, [r7, #28]
 800a492:	4798      	blx	r3
 800a494:	4603      	mov	r3, r0
 800a496:	74fb      	strb	r3, [r7, #19]
 800a498:	e001      	b.n	800a49e <tcp_input+0x5d6>
 800a49a:	2300      	movs	r3, #0
 800a49c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a49e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a4a2:	f113 0f0d 	cmn.w	r3, #13
 800a4a6:	f000 8098 	beq.w	800a5da <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a4aa:	4b54      	ldr	r3, [pc, #336]	; (800a5fc <tcp_input+0x734>)
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a4b0:	69f8      	ldr	r0, [r7, #28]
 800a4b2:	f000 f915 	bl	800a6e0 <tcp_input_delayed_close>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f040 8090 	bne.w	800a5de <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a4be:	4b4d      	ldr	r3, [pc, #308]	; (800a5f4 <tcp_input+0x72c>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d041      	beq.n	800a54a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d006      	beq.n	800a4dc <tcp_input+0x614>
 800a4ce:	4b50      	ldr	r3, [pc, #320]	; (800a610 <tcp_input+0x748>)
 800a4d0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a4d4:	494f      	ldr	r1, [pc, #316]	; (800a614 <tcp_input+0x74c>)
 800a4d6:	4850      	ldr	r0, [pc, #320]	; (800a618 <tcp_input+0x750>)
 800a4d8:	f006 fd24 	bl	8010f24 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	8b5b      	ldrh	r3, [r3, #26]
 800a4e0:	f003 0310 	and.w	r3, r3, #16
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d008      	beq.n	800a4fa <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a4e8:	4b42      	ldr	r3, [pc, #264]	; (800a5f4 <tcp_input+0x72c>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7fd fc1d 	bl	8007d2c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a4f2:	69f8      	ldr	r0, [r7, #28]
 800a4f4:	f7fe f9a2 	bl	800883c <tcp_abort>
            goto aborted;
 800a4f8:	e091      	b.n	800a61e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a4fa:	69fb      	ldr	r3, [r7, #28]
 800a4fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a500:	2b00      	cmp	r3, #0
 800a502:	d00c      	beq.n	800a51e <tcp_input+0x656>
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	6918      	ldr	r0, [r3, #16]
 800a50e:	4b39      	ldr	r3, [pc, #228]	; (800a5f4 <tcp_input+0x72c>)
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	2300      	movs	r3, #0
 800a514:	69f9      	ldr	r1, [r7, #28]
 800a516:	47a0      	blx	r4
 800a518:	4603      	mov	r3, r0
 800a51a:	74fb      	strb	r3, [r7, #19]
 800a51c:	e008      	b.n	800a530 <tcp_input+0x668>
 800a51e:	4b35      	ldr	r3, [pc, #212]	; (800a5f4 <tcp_input+0x72c>)
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	2300      	movs	r3, #0
 800a524:	69f9      	ldr	r1, [r7, #28]
 800a526:	2000      	movs	r0, #0
 800a528:	f7ff f890 	bl	800964c <tcp_recv_null>
 800a52c:	4603      	mov	r3, r0
 800a52e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a530:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a534:	f113 0f0d 	cmn.w	r3, #13
 800a538:	d053      	beq.n	800a5e2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a53a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d003      	beq.n	800a54a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a542:	4b2c      	ldr	r3, [pc, #176]	; (800a5f4 <tcp_input+0x72c>)
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a54a:	4b2b      	ldr	r3, [pc, #172]	; (800a5f8 <tcp_input+0x730>)
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	f003 0320 	and.w	r3, r3, #32
 800a552:	2b00      	cmp	r3, #0
 800a554:	d030      	beq.n	800a5b8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d009      	beq.n	800a572 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a562:	7b5a      	ldrb	r2, [r3, #13]
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a568:	f042 0220 	orr.w	r2, r2, #32
 800a56c:	b2d2      	uxtb	r2, r2
 800a56e:	735a      	strb	r2, [r3, #13]
 800a570:	e022      	b.n	800a5b8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a576:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a57a:	d005      	beq.n	800a588 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a580:	3301      	adds	r3, #1
 800a582:	b29a      	uxth	r2, r3
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00b      	beq.n	800a5aa <tcp_input+0x6e2>
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	6918      	ldr	r0, [r3, #16]
 800a59c:	2300      	movs	r3, #0
 800a59e:	2200      	movs	r2, #0
 800a5a0:	69f9      	ldr	r1, [r7, #28]
 800a5a2:	47a0      	blx	r4
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	74fb      	strb	r3, [r7, #19]
 800a5a8:	e001      	b.n	800a5ae <tcp_input+0x6e6>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a5ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a5b2:	f113 0f0d 	cmn.w	r3, #13
 800a5b6:	d016      	beq.n	800a5e6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a5b8:	4b13      	ldr	r3, [pc, #76]	; (800a608 <tcp_input+0x740>)
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a5be:	69f8      	ldr	r0, [r7, #28]
 800a5c0:	f000 f88e 	bl	800a6e0 <tcp_input_delayed_close>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d128      	bne.n	800a61c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a5ca:	69f8      	ldr	r0, [r7, #28]
 800a5cc:	f002 ff20 	bl	800d410 <tcp_output>
 800a5d0:	e025      	b.n	800a61e <tcp_input+0x756>
        goto aborted;
 800a5d2:	bf00      	nop
 800a5d4:	e023      	b.n	800a61e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a5d6:	bf00      	nop
 800a5d8:	e021      	b.n	800a61e <tcp_input+0x756>
              goto aborted;
 800a5da:	bf00      	nop
 800a5dc:	e01f      	b.n	800a61e <tcp_input+0x756>
          goto aborted;
 800a5de:	bf00      	nop
 800a5e0:	e01d      	b.n	800a61e <tcp_input+0x756>
            goto aborted;
 800a5e2:	bf00      	nop
 800a5e4:	e01b      	b.n	800a61e <tcp_input+0x756>
              goto aborted;
 800a5e6:	bf00      	nop
 800a5e8:	e019      	b.n	800a61e <tcp_input+0x756>
 800a5ea:	bf00      	nop
 800a5ec:	2000873c 	.word	0x2000873c
 800a5f0:	2000874c 	.word	0x2000874c
 800a5f4:	2000876c 	.word	0x2000876c
 800a5f8:	20008769 	.word	0x20008769
 800a5fc:	20008764 	.word	0x20008764
 800a600:	20008768 	.word	0x20008768
 800a604:	20008766 	.word	0x20008766
 800a608:	20008770 	.word	0x20008770
 800a60c:	20008730 	.word	0x20008730
 800a610:	080135b4 	.word	0x080135b4
 800a614:	08013768 	.word	0x08013768
 800a618:	08013600 	.word	0x08013600
          goto aborted;
 800a61c:	bf00      	nop
    tcp_input_pcb = NULL;
 800a61e:	4b27      	ldr	r3, [pc, #156]	; (800a6bc <tcp_input+0x7f4>)
 800a620:	2200      	movs	r2, #0
 800a622:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a624:	4b26      	ldr	r3, [pc, #152]	; (800a6c0 <tcp_input+0x7f8>)
 800a626:	2200      	movs	r2, #0
 800a628:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a62a:	4b26      	ldr	r3, [pc, #152]	; (800a6c4 <tcp_input+0x7fc>)
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d03f      	beq.n	800a6b2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800a632:	4b24      	ldr	r3, [pc, #144]	; (800a6c4 <tcp_input+0x7fc>)
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	4618      	mov	r0, r3
 800a638:	f7fd fb78 	bl	8007d2c <pbuf_free>
      inseg.p = NULL;
 800a63c:	4b21      	ldr	r3, [pc, #132]	; (800a6c4 <tcp_input+0x7fc>)
 800a63e:	2200      	movs	r2, #0
 800a640:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a642:	e036      	b.n	800a6b2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a644:	4b20      	ldr	r3, [pc, #128]	; (800a6c8 <tcp_input+0x800>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	899b      	ldrh	r3, [r3, #12]
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7fb ffa5 	bl	800659c <lwip_htons>
 800a652:	4603      	mov	r3, r0
 800a654:	b2db      	uxtb	r3, r3
 800a656:	f003 0304 	and.w	r3, r3, #4
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d118      	bne.n	800a690 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a65e:	4b1b      	ldr	r3, [pc, #108]	; (800a6cc <tcp_input+0x804>)
 800a660:	6819      	ldr	r1, [r3, #0]
 800a662:	4b1b      	ldr	r3, [pc, #108]	; (800a6d0 <tcp_input+0x808>)
 800a664:	881b      	ldrh	r3, [r3, #0]
 800a666:	461a      	mov	r2, r3
 800a668:	4b1a      	ldr	r3, [pc, #104]	; (800a6d4 <tcp_input+0x80c>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a66e:	4b16      	ldr	r3, [pc, #88]	; (800a6c8 <tcp_input+0x800>)
 800a670:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a672:	885b      	ldrh	r3, [r3, #2]
 800a674:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a676:	4a14      	ldr	r2, [pc, #80]	; (800a6c8 <tcp_input+0x800>)
 800a678:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a67a:	8812      	ldrh	r2, [r2, #0]
 800a67c:	b292      	uxth	r2, r2
 800a67e:	9202      	str	r2, [sp, #8]
 800a680:	9301      	str	r3, [sp, #4]
 800a682:	4b15      	ldr	r3, [pc, #84]	; (800a6d8 <tcp_input+0x810>)
 800a684:	9300      	str	r3, [sp, #0]
 800a686:	4b15      	ldr	r3, [pc, #84]	; (800a6dc <tcp_input+0x814>)
 800a688:	4602      	mov	r2, r0
 800a68a:	2000      	movs	r0, #0
 800a68c:	f003 fc74 	bl	800df78 <tcp_rst>
    pbuf_free(p);
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f7fd fb4b 	bl	8007d2c <pbuf_free>
  return;
 800a696:	e00c      	b.n	800a6b2 <tcp_input+0x7ea>
    goto dropped;
 800a698:	bf00      	nop
 800a69a:	e006      	b.n	800a6aa <tcp_input+0x7e2>
    goto dropped;
 800a69c:	bf00      	nop
 800a69e:	e004      	b.n	800a6aa <tcp_input+0x7e2>
    goto dropped;
 800a6a0:	bf00      	nop
 800a6a2:	e002      	b.n	800a6aa <tcp_input+0x7e2>
      goto dropped;
 800a6a4:	bf00      	nop
 800a6a6:	e000      	b.n	800a6aa <tcp_input+0x7e2>
      goto dropped;
 800a6a8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f7fd fb3e 	bl	8007d2c <pbuf_free>
 800a6b0:	e000      	b.n	800a6b4 <tcp_input+0x7ec>
  return;
 800a6b2:	bf00      	nop
}
 800a6b4:	3724      	adds	r7, #36	; 0x24
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd90      	pop	{r4, r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	20008770 	.word	0x20008770
 800a6c0:	2000876c 	.word	0x2000876c
 800a6c4:	2000873c 	.word	0x2000873c
 800a6c8:	2000874c 	.word	0x2000874c
 800a6cc:	20008760 	.word	0x20008760
 800a6d0:	20008766 	.word	0x20008766
 800a6d4:	2000875c 	.word	0x2000875c
 800a6d8:	200051c4 	.word	0x200051c4
 800a6dc:	200051c8 	.word	0x200051c8

0800a6e0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d106      	bne.n	800a6fc <tcp_input_delayed_close+0x1c>
 800a6ee:	4b17      	ldr	r3, [pc, #92]	; (800a74c <tcp_input_delayed_close+0x6c>)
 800a6f0:	f240 225a 	movw	r2, #602	; 0x25a
 800a6f4:	4916      	ldr	r1, [pc, #88]	; (800a750 <tcp_input_delayed_close+0x70>)
 800a6f6:	4817      	ldr	r0, [pc, #92]	; (800a754 <tcp_input_delayed_close+0x74>)
 800a6f8:	f006 fc14 	bl	8010f24 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a6fc:	4b16      	ldr	r3, [pc, #88]	; (800a758 <tcp_input_delayed_close+0x78>)
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	f003 0310 	and.w	r3, r3, #16
 800a704:	2b00      	cmp	r3, #0
 800a706:	d01c      	beq.n	800a742 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	8b5b      	ldrh	r3, [r3, #26]
 800a70c:	f003 0310 	and.w	r3, r3, #16
 800a710:	2b00      	cmp	r3, #0
 800a712:	d10d      	bne.n	800a730 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d008      	beq.n	800a730 <tcp_input_delayed_close+0x50>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	6912      	ldr	r2, [r2, #16]
 800a728:	f06f 010e 	mvn.w	r1, #14
 800a72c:	4610      	mov	r0, r2
 800a72e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a730:	6879      	ldr	r1, [r7, #4]
 800a732:	480a      	ldr	r0, [pc, #40]	; (800a75c <tcp_input_delayed_close+0x7c>)
 800a734:	f7ff fa50 	bl	8009bd8 <tcp_pcb_remove>
    tcp_free(pcb);
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f7fd fd97 	bl	800826c <tcp_free>
    return 1;
 800a73e:	2301      	movs	r3, #1
 800a740:	e000      	b.n	800a744 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	080135b4 	.word	0x080135b4
 800a750:	08013784 	.word	0x08013784
 800a754:	08013600 	.word	0x08013600
 800a758:	20008769 	.word	0x20008769
 800a75c:	20008730 	.word	0x20008730

0800a760 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a760:	b590      	push	{r4, r7, lr}
 800a762:	b08b      	sub	sp, #44	; 0x2c
 800a764:	af04      	add	r7, sp, #16
 800a766:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a768:	4b6f      	ldr	r3, [pc, #444]	; (800a928 <tcp_listen_input+0x1c8>)
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	f003 0304 	and.w	r3, r3, #4
 800a770:	2b00      	cmp	r3, #0
 800a772:	f040 80d2 	bne.w	800a91a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d106      	bne.n	800a78a <tcp_listen_input+0x2a>
 800a77c:	4b6b      	ldr	r3, [pc, #428]	; (800a92c <tcp_listen_input+0x1cc>)
 800a77e:	f240 2281 	movw	r2, #641	; 0x281
 800a782:	496b      	ldr	r1, [pc, #428]	; (800a930 <tcp_listen_input+0x1d0>)
 800a784:	486b      	ldr	r0, [pc, #428]	; (800a934 <tcp_listen_input+0x1d4>)
 800a786:	f006 fbcd 	bl	8010f24 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a78a:	4b67      	ldr	r3, [pc, #412]	; (800a928 <tcp_listen_input+0x1c8>)
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	f003 0310 	and.w	r3, r3, #16
 800a792:	2b00      	cmp	r3, #0
 800a794:	d019      	beq.n	800a7ca <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a796:	4b68      	ldr	r3, [pc, #416]	; (800a938 <tcp_listen_input+0x1d8>)
 800a798:	6819      	ldr	r1, [r3, #0]
 800a79a:	4b68      	ldr	r3, [pc, #416]	; (800a93c <tcp_listen_input+0x1dc>)
 800a79c:	881b      	ldrh	r3, [r3, #0]
 800a79e:	461a      	mov	r2, r3
 800a7a0:	4b67      	ldr	r3, [pc, #412]	; (800a940 <tcp_listen_input+0x1e0>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a7a6:	4b67      	ldr	r3, [pc, #412]	; (800a944 <tcp_listen_input+0x1e4>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a7aa:	885b      	ldrh	r3, [r3, #2]
 800a7ac:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a7ae:	4a65      	ldr	r2, [pc, #404]	; (800a944 <tcp_listen_input+0x1e4>)
 800a7b0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a7b2:	8812      	ldrh	r2, [r2, #0]
 800a7b4:	b292      	uxth	r2, r2
 800a7b6:	9202      	str	r2, [sp, #8]
 800a7b8:	9301      	str	r3, [sp, #4]
 800a7ba:	4b63      	ldr	r3, [pc, #396]	; (800a948 <tcp_listen_input+0x1e8>)
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	4b63      	ldr	r3, [pc, #396]	; (800a94c <tcp_listen_input+0x1ec>)
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f003 fbd8 	bl	800df78 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a7c8:	e0a9      	b.n	800a91e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a7ca:	4b57      	ldr	r3, [pc, #348]	; (800a928 <tcp_listen_input+0x1c8>)
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	f003 0302 	and.w	r3, r3, #2
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f000 80a3 	beq.w	800a91e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	7d5b      	ldrb	r3, [r3, #21]
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7ff f859 	bl	8009894 <tcp_alloc>
 800a7e2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d111      	bne.n	800a80e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	699b      	ldr	r3, [r3, #24]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d00a      	beq.n	800a808 <tcp_listen_input+0xa8>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	699b      	ldr	r3, [r3, #24]
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	6910      	ldr	r0, [r2, #16]
 800a7fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a7fe:	2100      	movs	r1, #0
 800a800:	4798      	blx	r3
 800a802:	4603      	mov	r3, r0
 800a804:	73bb      	strb	r3, [r7, #14]
      return;
 800a806:	e08b      	b.n	800a920 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a808:	23f0      	movs	r3, #240	; 0xf0
 800a80a:	73bb      	strb	r3, [r7, #14]
      return;
 800a80c:	e088      	b.n	800a920 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a80e:	4b50      	ldr	r3, [pc, #320]	; (800a950 <tcp_listen_input+0x1f0>)
 800a810:	695a      	ldr	r2, [r3, #20]
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a816:	4b4e      	ldr	r3, [pc, #312]	; (800a950 <tcp_listen_input+0x1f0>)
 800a818:	691a      	ldr	r2, [r3, #16]
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	8ada      	ldrh	r2, [r3, #22]
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a826:	4b47      	ldr	r3, [pc, #284]	; (800a944 <tcp_listen_input+0x1e4>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	881b      	ldrh	r3, [r3, #0]
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	2203      	movs	r2, #3
 800a836:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a838:	4b41      	ldr	r3, [pc, #260]	; (800a940 <tcp_listen_input+0x1e0>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	1c5a      	adds	r2, r3, #1
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a84a:	6978      	ldr	r0, [r7, #20]
 800a84c:	f7ff fa58 	bl	8009d00 <tcp_next_iss>
 800a850:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	693a      	ldr	r2, [r7, #16]
 800a856:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	693a      	ldr	r2, [r7, #16]
 800a85c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	693a      	ldr	r2, [r7, #16]
 800a862:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	693a      	ldr	r2, [r7, #16]
 800a868:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a86a:	4b35      	ldr	r3, [pc, #212]	; (800a940 <tcp_listen_input+0x1e0>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	1e5a      	subs	r2, r3, #1
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	691a      	ldr	r2, [r3, #16]
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	7a5b      	ldrb	r3, [r3, #9]
 800a886:	f003 030c 	and.w	r3, r3, #12
 800a88a:	b2da      	uxtb	r2, r3
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	7a1a      	ldrb	r2, [r3, #8]
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a898:	4b2e      	ldr	r3, [pc, #184]	; (800a954 <tcp_listen_input+0x1f4>)
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	60da      	str	r2, [r3, #12]
 800a8a0:	4a2c      	ldr	r2, [pc, #176]	; (800a954 <tcp_listen_input+0x1f4>)
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	6013      	str	r3, [r2, #0]
 800a8a6:	f003 fd29 	bl	800e2fc <tcp_timer_needed>
 800a8aa:	4b2b      	ldr	r3, [pc, #172]	; (800a958 <tcp_listen_input+0x1f8>)
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a8b0:	6978      	ldr	r0, [r7, #20]
 800a8b2:	f001 fd8f 	bl	800c3d4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a8b6:	4b23      	ldr	r3, [pc, #140]	; (800a944 <tcp_listen_input+0x1e4>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	89db      	ldrh	r3, [r3, #14]
 800a8bc:	b29a      	uxth	r2, r3
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	3304      	adds	r3, #4
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f005 f8ed 	bl	800fab8 <ip4_route>
 800a8de:	4601      	mov	r1, r0
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	3304      	adds	r3, #4
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	f7ff fa30 	bl	8009d4c <tcp_eff_send_mss_netif>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a8f4:	2112      	movs	r1, #18
 800a8f6:	6978      	ldr	r0, [r7, #20]
 800a8f8:	f002 fc9c 	bl	800d234 <tcp_enqueue_flags>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d004      	beq.n	800a912 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a908:	2100      	movs	r1, #0
 800a90a:	6978      	ldr	r0, [r7, #20]
 800a90c:	f7fd fed8 	bl	80086c0 <tcp_abandon>
      return;
 800a910:	e006      	b.n	800a920 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a912:	6978      	ldr	r0, [r7, #20]
 800a914:	f002 fd7c 	bl	800d410 <tcp_output>
  return;
 800a918:	e001      	b.n	800a91e <tcp_listen_input+0x1be>
    return;
 800a91a:	bf00      	nop
 800a91c:	e000      	b.n	800a920 <tcp_listen_input+0x1c0>
  return;
 800a91e:	bf00      	nop
}
 800a920:	371c      	adds	r7, #28
 800a922:	46bd      	mov	sp, r7
 800a924:	bd90      	pop	{r4, r7, pc}
 800a926:	bf00      	nop
 800a928:	20008768 	.word	0x20008768
 800a92c:	080135b4 	.word	0x080135b4
 800a930:	080137ac 	.word	0x080137ac
 800a934:	08013600 	.word	0x08013600
 800a938:	20008760 	.word	0x20008760
 800a93c:	20008766 	.word	0x20008766
 800a940:	2000875c 	.word	0x2000875c
 800a944:	2000874c 	.word	0x2000874c
 800a948:	200051c4 	.word	0x200051c4
 800a94c:	200051c8 	.word	0x200051c8
 800a950:	200051b4 	.word	0x200051b4
 800a954:	20008730 	.word	0x20008730
 800a958:	20008738 	.word	0x20008738

0800a95c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b086      	sub	sp, #24
 800a960:	af04      	add	r7, sp, #16
 800a962:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a964:	4b2f      	ldr	r3, [pc, #188]	; (800aa24 <tcp_timewait_input+0xc8>)
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	f003 0304 	and.w	r3, r3, #4
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d153      	bne.n	800aa18 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d106      	bne.n	800a984 <tcp_timewait_input+0x28>
 800a976:	4b2c      	ldr	r3, [pc, #176]	; (800aa28 <tcp_timewait_input+0xcc>)
 800a978:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a97c:	492b      	ldr	r1, [pc, #172]	; (800aa2c <tcp_timewait_input+0xd0>)
 800a97e:	482c      	ldr	r0, [pc, #176]	; (800aa30 <tcp_timewait_input+0xd4>)
 800a980:	f006 fad0 	bl	8010f24 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a984:	4b27      	ldr	r3, [pc, #156]	; (800aa24 <tcp_timewait_input+0xc8>)
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	f003 0302 	and.w	r3, r3, #2
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d02a      	beq.n	800a9e6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a990:	4b28      	ldr	r3, [pc, #160]	; (800aa34 <tcp_timewait_input+0xd8>)
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	db2d      	blt.n	800a9fa <tcp_timewait_input+0x9e>
 800a99e:	4b25      	ldr	r3, [pc, #148]	; (800aa34 <tcp_timewait_input+0xd8>)
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a6:	6879      	ldr	r1, [r7, #4]
 800a9a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a9aa:	440b      	add	r3, r1
 800a9ac:	1ad3      	subs	r3, r2, r3
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	dc23      	bgt.n	800a9fa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9b2:	4b21      	ldr	r3, [pc, #132]	; (800aa38 <tcp_timewait_input+0xdc>)
 800a9b4:	6819      	ldr	r1, [r3, #0]
 800a9b6:	4b21      	ldr	r3, [pc, #132]	; (800aa3c <tcp_timewait_input+0xe0>)
 800a9b8:	881b      	ldrh	r3, [r3, #0]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	4b1d      	ldr	r3, [pc, #116]	; (800aa34 <tcp_timewait_input+0xd8>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9c2:	4b1f      	ldr	r3, [pc, #124]	; (800aa40 <tcp_timewait_input+0xe4>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9c6:	885b      	ldrh	r3, [r3, #2]
 800a9c8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9ca:	4a1d      	ldr	r2, [pc, #116]	; (800aa40 <tcp_timewait_input+0xe4>)
 800a9cc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9ce:	8812      	ldrh	r2, [r2, #0]
 800a9d0:	b292      	uxth	r2, r2
 800a9d2:	9202      	str	r2, [sp, #8]
 800a9d4:	9301      	str	r3, [sp, #4]
 800a9d6:	4b1b      	ldr	r3, [pc, #108]	; (800aa44 <tcp_timewait_input+0xe8>)
 800a9d8:	9300      	str	r3, [sp, #0]
 800a9da:	4b1b      	ldr	r3, [pc, #108]	; (800aa48 <tcp_timewait_input+0xec>)
 800a9dc:	4602      	mov	r2, r0
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f003 faca 	bl	800df78 <tcp_rst>
      return;
 800a9e4:	e01b      	b.n	800aa1e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a9e6:	4b0f      	ldr	r3, [pc, #60]	; (800aa24 <tcp_timewait_input+0xc8>)
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	f003 0301 	and.w	r3, r3, #1
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d003      	beq.n	800a9fa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a9f2:	4b16      	ldr	r3, [pc, #88]	; (800aa4c <tcp_timewait_input+0xf0>)
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a9fa:	4b10      	ldr	r3, [pc, #64]	; (800aa3c <tcp_timewait_input+0xe0>)
 800a9fc:	881b      	ldrh	r3, [r3, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00c      	beq.n	800aa1c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	8b5b      	ldrh	r3, [r3, #26]
 800aa06:	f043 0302 	orr.w	r3, r3, #2
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f002 fcfd 	bl	800d410 <tcp_output>
  }
  return;
 800aa16:	e001      	b.n	800aa1c <tcp_timewait_input+0xc0>
    return;
 800aa18:	bf00      	nop
 800aa1a:	e000      	b.n	800aa1e <tcp_timewait_input+0xc2>
  return;
 800aa1c:	bf00      	nop
}
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	20008768 	.word	0x20008768
 800aa28:	080135b4 	.word	0x080135b4
 800aa2c:	080137cc 	.word	0x080137cc
 800aa30:	08013600 	.word	0x08013600
 800aa34:	2000875c 	.word	0x2000875c
 800aa38:	20008760 	.word	0x20008760
 800aa3c:	20008766 	.word	0x20008766
 800aa40:	2000874c 	.word	0x2000874c
 800aa44:	200051c4 	.word	0x200051c4
 800aa48:	200051c8 	.word	0x200051c8
 800aa4c:	20008724 	.word	0x20008724

0800aa50 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800aa50:	b590      	push	{r4, r7, lr}
 800aa52:	b08d      	sub	sp, #52	; 0x34
 800aa54:	af04      	add	r7, sp, #16
 800aa56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d106      	bne.n	800aa74 <tcp_process+0x24>
 800aa66:	4b9d      	ldr	r3, [pc, #628]	; (800acdc <tcp_process+0x28c>)
 800aa68:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800aa6c:	499c      	ldr	r1, [pc, #624]	; (800ace0 <tcp_process+0x290>)
 800aa6e:	489d      	ldr	r0, [pc, #628]	; (800ace4 <tcp_process+0x294>)
 800aa70:	f006 fa58 	bl	8010f24 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800aa74:	4b9c      	ldr	r3, [pc, #624]	; (800ace8 <tcp_process+0x298>)
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	f003 0304 	and.w	r3, r3, #4
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d04e      	beq.n	800ab1e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	7d1b      	ldrb	r3, [r3, #20]
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d108      	bne.n	800aa9a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa8c:	4b97      	ldr	r3, [pc, #604]	; (800acec <tcp_process+0x29c>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d123      	bne.n	800aadc <tcp_process+0x8c>
        acceptable = 1;
 800aa94:	2301      	movs	r3, #1
 800aa96:	76fb      	strb	r3, [r7, #27]
 800aa98:	e020      	b.n	800aadc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa9e:	4b94      	ldr	r3, [pc, #592]	; (800acf0 <tcp_process+0x2a0>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d102      	bne.n	800aaac <tcp_process+0x5c>
        acceptable = 1;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	76fb      	strb	r3, [r7, #27]
 800aaaa:	e017      	b.n	800aadc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800aaac:	4b90      	ldr	r3, [pc, #576]	; (800acf0 <tcp_process+0x2a0>)
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab4:	1ad3      	subs	r3, r2, r3
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	db10      	blt.n	800aadc <tcp_process+0x8c>
 800aaba:	4b8d      	ldr	r3, [pc, #564]	; (800acf0 <tcp_process+0x2a0>)
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac2:	6879      	ldr	r1, [r7, #4]
 800aac4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800aac6:	440b      	add	r3, r1
 800aac8:	1ad3      	subs	r3, r2, r3
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	dc06      	bgt.n	800aadc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	8b5b      	ldrh	r3, [r3, #26]
 800aad2:	f043 0302 	orr.w	r3, r3, #2
 800aad6:	b29a      	uxth	r2, r3
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800aadc:	7efb      	ldrb	r3, [r7, #27]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d01b      	beq.n	800ab1a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	7d1b      	ldrb	r3, [r3, #20]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d106      	bne.n	800aaf8 <tcp_process+0xa8>
 800aaea:	4b7c      	ldr	r3, [pc, #496]	; (800acdc <tcp_process+0x28c>)
 800aaec:	f44f 724e 	mov.w	r2, #824	; 0x338
 800aaf0:	4980      	ldr	r1, [pc, #512]	; (800acf4 <tcp_process+0x2a4>)
 800aaf2:	487c      	ldr	r0, [pc, #496]	; (800ace4 <tcp_process+0x294>)
 800aaf4:	f006 fa16 	bl	8010f24 <iprintf>
      recv_flags |= TF_RESET;
 800aaf8:	4b7f      	ldr	r3, [pc, #508]	; (800acf8 <tcp_process+0x2a8>)
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	f043 0308 	orr.w	r3, r3, #8
 800ab00:	b2da      	uxtb	r2, r3
 800ab02:	4b7d      	ldr	r3, [pc, #500]	; (800acf8 <tcp_process+0x2a8>)
 800ab04:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	8b5b      	ldrh	r3, [r3, #26]
 800ab0a:	f023 0301 	bic.w	r3, r3, #1
 800ab0e:	b29a      	uxth	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ab14:	f06f 030d 	mvn.w	r3, #13
 800ab18:	e37a      	b.n	800b210 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	e378      	b.n	800b210 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ab1e:	4b72      	ldr	r3, [pc, #456]	; (800ace8 <tcp_process+0x298>)
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	f003 0302 	and.w	r3, r3, #2
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d010      	beq.n	800ab4c <tcp_process+0xfc>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	7d1b      	ldrb	r3, [r3, #20]
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	d00c      	beq.n	800ab4c <tcp_process+0xfc>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	7d1b      	ldrb	r3, [r3, #20]
 800ab36:	2b03      	cmp	r3, #3
 800ab38:	d008      	beq.n	800ab4c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	8b5b      	ldrh	r3, [r3, #26]
 800ab3e:	f043 0302 	orr.w	r3, r3, #2
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	e361      	b.n	800b210 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	8b5b      	ldrh	r3, [r3, #26]
 800ab50:	f003 0310 	and.w	r3, r3, #16
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d103      	bne.n	800ab60 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ab58:	4b68      	ldr	r3, [pc, #416]	; (800acfc <tcp_process+0x2ac>)
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f001 fc2f 	bl	800c3d4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	7d1b      	ldrb	r3, [r3, #20]
 800ab7a:	3b02      	subs	r3, #2
 800ab7c:	2b07      	cmp	r3, #7
 800ab7e:	f200 8337 	bhi.w	800b1f0 <tcp_process+0x7a0>
 800ab82:	a201      	add	r2, pc, #4	; (adr r2, 800ab88 <tcp_process+0x138>)
 800ab84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab88:	0800aba9 	.word	0x0800aba9
 800ab8c:	0800add9 	.word	0x0800add9
 800ab90:	0800af51 	.word	0x0800af51
 800ab94:	0800af7b 	.word	0x0800af7b
 800ab98:	0800b09f 	.word	0x0800b09f
 800ab9c:	0800af51 	.word	0x0800af51
 800aba0:	0800b12b 	.word	0x0800b12b
 800aba4:	0800b1bb 	.word	0x0800b1bb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800aba8:	4b4f      	ldr	r3, [pc, #316]	; (800ace8 <tcp_process+0x298>)
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	f003 0310 	and.w	r3, r3, #16
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f000 80e4 	beq.w	800ad7e <tcp_process+0x32e>
 800abb6:	4b4c      	ldr	r3, [pc, #304]	; (800ace8 <tcp_process+0x298>)
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	f003 0302 	and.w	r3, r3, #2
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	f000 80dd 	beq.w	800ad7e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abc8:	1c5a      	adds	r2, r3, #1
 800abca:	4b48      	ldr	r3, [pc, #288]	; (800acec <tcp_process+0x29c>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	429a      	cmp	r2, r3
 800abd0:	f040 80d5 	bne.w	800ad7e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800abd4:	4b46      	ldr	r3, [pc, #280]	; (800acf0 <tcp_process+0x2a0>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	1c5a      	adds	r2, r3, #1
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800abe6:	4b41      	ldr	r3, [pc, #260]	; (800acec <tcp_process+0x29c>)
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800abee:	4b44      	ldr	r3, [pc, #272]	; (800ad00 <tcp_process+0x2b0>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	89db      	ldrh	r3, [r3, #14]
 800abf4:	b29a      	uxth	r2, r3
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ac08:	4b39      	ldr	r3, [pc, #228]	; (800acf0 <tcp_process+0x2a0>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	1e5a      	subs	r2, r3, #1
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2204      	movs	r2, #4
 800ac16:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	3304      	adds	r3, #4
 800ac20:	4618      	mov	r0, r3
 800ac22:	f004 ff49 	bl	800fab8 <ip4_route>
 800ac26:	4601      	mov	r1, r0
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	3304      	adds	r3, #4
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	4620      	mov	r0, r4
 800ac30:	f7ff f88c 	bl	8009d4c <tcp_eff_send_mss_netif>
 800ac34:	4603      	mov	r3, r0
 800ac36:	461a      	mov	r2, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac40:	009a      	lsls	r2, r3, #2
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac46:	005b      	lsls	r3, r3, #1
 800ac48:	f241 111c 	movw	r1, #4380	; 0x111c
 800ac4c:	428b      	cmp	r3, r1
 800ac4e:	bf38      	it	cc
 800ac50:	460b      	movcc	r3, r1
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d204      	bcs.n	800ac60 <tcp_process+0x210>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	e00d      	b.n	800ac7c <tcp_process+0x22c>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac64:	005b      	lsls	r3, r3, #1
 800ac66:	f241 121c 	movw	r2, #4380	; 0x111c
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d904      	bls.n	800ac78 <tcp_process+0x228>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac72:	005b      	lsls	r3, r3, #1
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	e001      	b.n	800ac7c <tcp_process+0x22c>
 800ac78:	f241 131c 	movw	r3, #4380	; 0x111c
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d106      	bne.n	800ac9a <tcp_process+0x24a>
 800ac8c:	4b13      	ldr	r3, [pc, #76]	; (800acdc <tcp_process+0x28c>)
 800ac8e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ac92:	491c      	ldr	r1, [pc, #112]	; (800ad04 <tcp_process+0x2b4>)
 800ac94:	4813      	ldr	r0, [pc, #76]	; (800ace4 <tcp_process+0x294>)
 800ac96:	f006 f945 	bl	8010f24 <iprintf>
        --pcb->snd_queuelen;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aca0:	3b01      	subs	r3, #1
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acae:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d12a      	bne.n	800ad0c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acba:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d106      	bne.n	800acd0 <tcp_process+0x280>
 800acc2:	4b06      	ldr	r3, [pc, #24]	; (800acdc <tcp_process+0x28c>)
 800acc4:	f44f 725d 	mov.w	r2, #884	; 0x374
 800acc8:	490f      	ldr	r1, [pc, #60]	; (800ad08 <tcp_process+0x2b8>)
 800acca:	4806      	ldr	r0, [pc, #24]	; (800ace4 <tcp_process+0x294>)
 800accc:	f006 f92a 	bl	8010f24 <iprintf>
          pcb->unsent = rseg->next;
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	66da      	str	r2, [r3, #108]	; 0x6c
 800acd8:	e01c      	b.n	800ad14 <tcp_process+0x2c4>
 800acda:	bf00      	nop
 800acdc:	080135b4 	.word	0x080135b4
 800ace0:	080137ec 	.word	0x080137ec
 800ace4:	08013600 	.word	0x08013600
 800ace8:	20008768 	.word	0x20008768
 800acec:	20008760 	.word	0x20008760
 800acf0:	2000875c 	.word	0x2000875c
 800acf4:	08013808 	.word	0x08013808
 800acf8:	20008769 	.word	0x20008769
 800acfc:	20008724 	.word	0x20008724
 800ad00:	2000874c 	.word	0x2000874c
 800ad04:	08013828 	.word	0x08013828
 800ad08:	08013840 	.word	0x08013840
        } else {
          pcb->unacked = rseg->next;
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800ad14:	69f8      	ldr	r0, [r7, #28]
 800ad16:	f7fe fc36 	bl	8009586 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d104      	bne.n	800ad2c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad28:	861a      	strh	r2, [r3, #48]	; 0x30
 800ad2a:	e006      	b.n	800ad3a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2200      	movs	r2, #0
 800ad36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00a      	beq.n	800ad5a <tcp_process+0x30a>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	6910      	ldr	r0, [r2, #16]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	6879      	ldr	r1, [r7, #4]
 800ad52:	4798      	blx	r3
 800ad54:	4603      	mov	r3, r0
 800ad56:	76bb      	strb	r3, [r7, #26]
 800ad58:	e001      	b.n	800ad5e <tcp_process+0x30e>
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ad5e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ad62:	f113 0f0d 	cmn.w	r3, #13
 800ad66:	d102      	bne.n	800ad6e <tcp_process+0x31e>
          return ERR_ABRT;
 800ad68:	f06f 030c 	mvn.w	r3, #12
 800ad6c:	e250      	b.n	800b210 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	8b5b      	ldrh	r3, [r3, #26]
 800ad72:	f043 0302 	orr.w	r3, r3, #2
 800ad76:	b29a      	uxth	r2, r3
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ad7c:	e23a      	b.n	800b1f4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ad7e:	4b98      	ldr	r3, [pc, #608]	; (800afe0 <tcp_process+0x590>)
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	f003 0310 	and.w	r3, r3, #16
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	f000 8234 	beq.w	800b1f4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad8c:	4b95      	ldr	r3, [pc, #596]	; (800afe4 <tcp_process+0x594>)
 800ad8e:	6819      	ldr	r1, [r3, #0]
 800ad90:	4b95      	ldr	r3, [pc, #596]	; (800afe8 <tcp_process+0x598>)
 800ad92:	881b      	ldrh	r3, [r3, #0]
 800ad94:	461a      	mov	r2, r3
 800ad96:	4b95      	ldr	r3, [pc, #596]	; (800afec <tcp_process+0x59c>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad9c:	4b94      	ldr	r3, [pc, #592]	; (800aff0 <tcp_process+0x5a0>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ada0:	885b      	ldrh	r3, [r3, #2]
 800ada2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ada4:	4a92      	ldr	r2, [pc, #584]	; (800aff0 <tcp_process+0x5a0>)
 800ada6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ada8:	8812      	ldrh	r2, [r2, #0]
 800adaa:	b292      	uxth	r2, r2
 800adac:	9202      	str	r2, [sp, #8]
 800adae:	9301      	str	r3, [sp, #4]
 800adb0:	4b90      	ldr	r3, [pc, #576]	; (800aff4 <tcp_process+0x5a4>)
 800adb2:	9300      	str	r3, [sp, #0]
 800adb4:	4b90      	ldr	r3, [pc, #576]	; (800aff8 <tcp_process+0x5a8>)
 800adb6:	4602      	mov	r2, r0
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f003 f8dd 	bl	800df78 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800adc4:	2b05      	cmp	r3, #5
 800adc6:	f200 8215 	bhi.w	800b1f4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f002 fea7 	bl	800db24 <tcp_rexmit_rto>
      break;
 800add6:	e20d      	b.n	800b1f4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800add8:	4b81      	ldr	r3, [pc, #516]	; (800afe0 <tcp_process+0x590>)
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	f003 0310 	and.w	r3, r3, #16
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f000 80a1 	beq.w	800af28 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ade6:	4b7f      	ldr	r3, [pc, #508]	; (800afe4 <tcp_process+0x594>)
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adee:	1ad3      	subs	r3, r2, r3
 800adf0:	3b01      	subs	r3, #1
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	db7e      	blt.n	800aef4 <tcp_process+0x4a4>
 800adf6:	4b7b      	ldr	r3, [pc, #492]	; (800afe4 <tcp_process+0x594>)
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adfe:	1ad3      	subs	r3, r2, r3
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	dc77      	bgt.n	800aef4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2204      	movs	r2, #4
 800ae08:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d102      	bne.n	800ae18 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ae12:	23fa      	movs	r3, #250	; 0xfa
 800ae14:	76bb      	strb	r3, [r7, #26]
 800ae16:	e01d      	b.n	800ae54 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d106      	bne.n	800ae30 <tcp_process+0x3e0>
 800ae22:	4b76      	ldr	r3, [pc, #472]	; (800affc <tcp_process+0x5ac>)
 800ae24:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ae28:	4975      	ldr	r1, [pc, #468]	; (800b000 <tcp_process+0x5b0>)
 800ae2a:	4876      	ldr	r0, [pc, #472]	; (800b004 <tcp_process+0x5b4>)
 800ae2c:	f006 f87a 	bl	8010f24 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae34:	699b      	ldr	r3, [r3, #24]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00a      	beq.n	800ae50 <tcp_process+0x400>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae3e:	699b      	ldr	r3, [r3, #24]
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	6910      	ldr	r0, [r2, #16]
 800ae44:	2200      	movs	r2, #0
 800ae46:	6879      	ldr	r1, [r7, #4]
 800ae48:	4798      	blx	r3
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	76bb      	strb	r3, [r7, #26]
 800ae4e:	e001      	b.n	800ae54 <tcp_process+0x404>
 800ae50:	23f0      	movs	r3, #240	; 0xf0
 800ae52:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ae54:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d00a      	beq.n	800ae72 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ae5c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ae60:	f113 0f0d 	cmn.w	r3, #13
 800ae64:	d002      	beq.n	800ae6c <tcp_process+0x41c>
              tcp_abort(pcb);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f7fd fce8 	bl	800883c <tcp_abort>
            }
            return ERR_ABRT;
 800ae6c:	f06f 030c 	mvn.w	r3, #12
 800ae70:	e1ce      	b.n	800b210 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 fae0 	bl	800b438 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ae78:	4b63      	ldr	r3, [pc, #396]	; (800b008 <tcp_process+0x5b8>)
 800ae7a:	881b      	ldrh	r3, [r3, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d005      	beq.n	800ae8c <tcp_process+0x43c>
            recv_acked--;
 800ae80:	4b61      	ldr	r3, [pc, #388]	; (800b008 <tcp_process+0x5b8>)
 800ae82:	881b      	ldrh	r3, [r3, #0]
 800ae84:	3b01      	subs	r3, #1
 800ae86:	b29a      	uxth	r2, r3
 800ae88:	4b5f      	ldr	r3, [pc, #380]	; (800b008 <tcp_process+0x5b8>)
 800ae8a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae90:	009a      	lsls	r2, r3, #2
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae96:	005b      	lsls	r3, r3, #1
 800ae98:	f241 111c 	movw	r1, #4380	; 0x111c
 800ae9c:	428b      	cmp	r3, r1
 800ae9e:	bf38      	it	cc
 800aea0:	460b      	movcc	r3, r1
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d204      	bcs.n	800aeb0 <tcp_process+0x460>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	e00d      	b.n	800aecc <tcp_process+0x47c>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aeb4:	005b      	lsls	r3, r3, #1
 800aeb6:	f241 121c 	movw	r2, #4380	; 0x111c
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d904      	bls.n	800aec8 <tcp_process+0x478>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aec2:	005b      	lsls	r3, r3, #1
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	e001      	b.n	800aecc <tcp_process+0x47c>
 800aec8:	f241 131c 	movw	r3, #4380	; 0x111c
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800aed2:	4b4e      	ldr	r3, [pc, #312]	; (800b00c <tcp_process+0x5bc>)
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	f003 0320 	and.w	r3, r3, #32
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d037      	beq.n	800af4e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	8b5b      	ldrh	r3, [r3, #26]
 800aee2:	f043 0302 	orr.w	r3, r3, #2
 800aee6:	b29a      	uxth	r2, r3
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2207      	movs	r2, #7
 800aef0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800aef2:	e02c      	b.n	800af4e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aef4:	4b3b      	ldr	r3, [pc, #236]	; (800afe4 <tcp_process+0x594>)
 800aef6:	6819      	ldr	r1, [r3, #0]
 800aef8:	4b3b      	ldr	r3, [pc, #236]	; (800afe8 <tcp_process+0x598>)
 800aefa:	881b      	ldrh	r3, [r3, #0]
 800aefc:	461a      	mov	r2, r3
 800aefe:	4b3b      	ldr	r3, [pc, #236]	; (800afec <tcp_process+0x59c>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800af04:	4b3a      	ldr	r3, [pc, #232]	; (800aff0 <tcp_process+0x5a0>)
 800af06:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af08:	885b      	ldrh	r3, [r3, #2]
 800af0a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800af0c:	4a38      	ldr	r2, [pc, #224]	; (800aff0 <tcp_process+0x5a0>)
 800af0e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af10:	8812      	ldrh	r2, [r2, #0]
 800af12:	b292      	uxth	r2, r2
 800af14:	9202      	str	r2, [sp, #8]
 800af16:	9301      	str	r3, [sp, #4]
 800af18:	4b36      	ldr	r3, [pc, #216]	; (800aff4 <tcp_process+0x5a4>)
 800af1a:	9300      	str	r3, [sp, #0]
 800af1c:	4b36      	ldr	r3, [pc, #216]	; (800aff8 <tcp_process+0x5a8>)
 800af1e:	4602      	mov	r2, r0
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f003 f829 	bl	800df78 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800af26:	e167      	b.n	800b1f8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800af28:	4b2d      	ldr	r3, [pc, #180]	; (800afe0 <tcp_process+0x590>)
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	f003 0302 	and.w	r3, r3, #2
 800af30:	2b00      	cmp	r3, #0
 800af32:	f000 8161 	beq.w	800b1f8 <tcp_process+0x7a8>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3a:	1e5a      	subs	r2, r3, #1
 800af3c:	4b2b      	ldr	r3, [pc, #172]	; (800afec <tcp_process+0x59c>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	429a      	cmp	r2, r3
 800af42:	f040 8159 	bne.w	800b1f8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f002 fe0e 	bl	800db68 <tcp_rexmit>
      break;
 800af4c:	e154      	b.n	800b1f8 <tcp_process+0x7a8>
 800af4e:	e153      	b.n	800b1f8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 fa71 	bl	800b438 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800af56:	4b2d      	ldr	r3, [pc, #180]	; (800b00c <tcp_process+0x5bc>)
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	f003 0320 	and.w	r3, r3, #32
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f000 814c 	beq.w	800b1fc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	8b5b      	ldrh	r3, [r3, #26]
 800af68:	f043 0302 	orr.w	r3, r3, #2
 800af6c:	b29a      	uxth	r2, r3
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2207      	movs	r2, #7
 800af76:	751a      	strb	r2, [r3, #20]
      }
      break;
 800af78:	e140      	b.n	800b1fc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 fa5c 	bl	800b438 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800af80:	4b22      	ldr	r3, [pc, #136]	; (800b00c <tcp_process+0x5bc>)
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	f003 0320 	and.w	r3, r3, #32
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d071      	beq.n	800b070 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800af8c:	4b14      	ldr	r3, [pc, #80]	; (800afe0 <tcp_process+0x590>)
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	f003 0310 	and.w	r3, r3, #16
 800af94:	2b00      	cmp	r3, #0
 800af96:	d060      	beq.n	800b05a <tcp_process+0x60a>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800af9c:	4b11      	ldr	r3, [pc, #68]	; (800afe4 <tcp_process+0x594>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d15a      	bne.n	800b05a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d156      	bne.n	800b05a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	8b5b      	ldrh	r3, [r3, #26]
 800afb0:	f043 0302 	orr.w	r3, r3, #2
 800afb4:	b29a      	uxth	r2, r3
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f7fe fdbc 	bl	8009b38 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800afc0:	4b13      	ldr	r3, [pc, #76]	; (800b010 <tcp_process+0x5c0>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d105      	bne.n	800afd6 <tcp_process+0x586>
 800afca:	4b11      	ldr	r3, [pc, #68]	; (800b010 <tcp_process+0x5c0>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	4a0f      	ldr	r2, [pc, #60]	; (800b010 <tcp_process+0x5c0>)
 800afd2:	6013      	str	r3, [r2, #0]
 800afd4:	e02e      	b.n	800b034 <tcp_process+0x5e4>
 800afd6:	4b0e      	ldr	r3, [pc, #56]	; (800b010 <tcp_process+0x5c0>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	617b      	str	r3, [r7, #20]
 800afdc:	e027      	b.n	800b02e <tcp_process+0x5de>
 800afde:	bf00      	nop
 800afe0:	20008768 	.word	0x20008768
 800afe4:	20008760 	.word	0x20008760
 800afe8:	20008766 	.word	0x20008766
 800afec:	2000875c 	.word	0x2000875c
 800aff0:	2000874c 	.word	0x2000874c
 800aff4:	200051c4 	.word	0x200051c4
 800aff8:	200051c8 	.word	0x200051c8
 800affc:	080135b4 	.word	0x080135b4
 800b000:	08013854 	.word	0x08013854
 800b004:	08013600 	.word	0x08013600
 800b008:	20008764 	.word	0x20008764
 800b00c:	20008769 	.word	0x20008769
 800b010:	20008730 	.word	0x20008730
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	68db      	ldr	r3, [r3, #12]
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d104      	bne.n	800b028 <tcp_process+0x5d8>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	68da      	ldr	r2, [r3, #12]
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	60da      	str	r2, [r3, #12]
 800b026:	e005      	b.n	800b034 <tcp_process+0x5e4>
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	617b      	str	r3, [r7, #20]
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d1ef      	bne.n	800b014 <tcp_process+0x5c4>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	60da      	str	r2, [r3, #12]
 800b03a:	4b77      	ldr	r3, [pc, #476]	; (800b218 <tcp_process+0x7c8>)
 800b03c:	2201      	movs	r2, #1
 800b03e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	220a      	movs	r2, #10
 800b044:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b046:	4b75      	ldr	r3, [pc, #468]	; (800b21c <tcp_process+0x7cc>)
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	60da      	str	r2, [r3, #12]
 800b04e:	4a73      	ldr	r2, [pc, #460]	; (800b21c <tcp_process+0x7cc>)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6013      	str	r3, [r2, #0]
 800b054:	f003 f952 	bl	800e2fc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b058:	e0d2      	b.n	800b200 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	8b5b      	ldrh	r3, [r3, #26]
 800b05e:	f043 0302 	orr.w	r3, r3, #2
 800b062:	b29a      	uxth	r2, r3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2208      	movs	r2, #8
 800b06c:	751a      	strb	r2, [r3, #20]
      break;
 800b06e:	e0c7      	b.n	800b200 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b070:	4b6b      	ldr	r3, [pc, #428]	; (800b220 <tcp_process+0x7d0>)
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	f003 0310 	and.w	r3, r3, #16
 800b078:	2b00      	cmp	r3, #0
 800b07a:	f000 80c1 	beq.w	800b200 <tcp_process+0x7b0>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b082:	4b68      	ldr	r3, [pc, #416]	; (800b224 <tcp_process+0x7d4>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	429a      	cmp	r2, r3
 800b088:	f040 80ba 	bne.w	800b200 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b090:	2b00      	cmp	r3, #0
 800b092:	f040 80b5 	bne.w	800b200 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2206      	movs	r2, #6
 800b09a:	751a      	strb	r2, [r3, #20]
      break;
 800b09c:	e0b0      	b.n	800b200 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 f9ca 	bl	800b438 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b0a4:	4b60      	ldr	r3, [pc, #384]	; (800b228 <tcp_process+0x7d8>)
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	f003 0320 	and.w	r3, r3, #32
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	f000 80a9 	beq.w	800b204 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	8b5b      	ldrh	r3, [r3, #26]
 800b0b6:	f043 0302 	orr.w	r3, r3, #2
 800b0ba:	b29a      	uxth	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f7fe fd39 	bl	8009b38 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b0c6:	4b59      	ldr	r3, [pc, #356]	; (800b22c <tcp_process+0x7dc>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d105      	bne.n	800b0dc <tcp_process+0x68c>
 800b0d0:	4b56      	ldr	r3, [pc, #344]	; (800b22c <tcp_process+0x7dc>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	68db      	ldr	r3, [r3, #12]
 800b0d6:	4a55      	ldr	r2, [pc, #340]	; (800b22c <tcp_process+0x7dc>)
 800b0d8:	6013      	str	r3, [r2, #0]
 800b0da:	e013      	b.n	800b104 <tcp_process+0x6b4>
 800b0dc:	4b53      	ldr	r3, [pc, #332]	; (800b22c <tcp_process+0x7dc>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	613b      	str	r3, [r7, #16]
 800b0e2:	e00c      	b.n	800b0fe <tcp_process+0x6ae>
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d104      	bne.n	800b0f8 <tcp_process+0x6a8>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	68da      	ldr	r2, [r3, #12]
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	60da      	str	r2, [r3, #12]
 800b0f6:	e005      	b.n	800b104 <tcp_process+0x6b4>
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	613b      	str	r3, [r7, #16]
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d1ef      	bne.n	800b0e4 <tcp_process+0x694>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	60da      	str	r2, [r3, #12]
 800b10a:	4b43      	ldr	r3, [pc, #268]	; (800b218 <tcp_process+0x7c8>)
 800b10c:	2201      	movs	r2, #1
 800b10e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	220a      	movs	r2, #10
 800b114:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b116:	4b41      	ldr	r3, [pc, #260]	; (800b21c <tcp_process+0x7cc>)
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	60da      	str	r2, [r3, #12]
 800b11e:	4a3f      	ldr	r2, [pc, #252]	; (800b21c <tcp_process+0x7cc>)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6013      	str	r3, [r2, #0]
 800b124:	f003 f8ea 	bl	800e2fc <tcp_timer_needed>
      }
      break;
 800b128:	e06c      	b.n	800b204 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 f984 	bl	800b438 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b130:	4b3b      	ldr	r3, [pc, #236]	; (800b220 <tcp_process+0x7d0>)
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	f003 0310 	and.w	r3, r3, #16
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d065      	beq.n	800b208 <tcp_process+0x7b8>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b140:	4b38      	ldr	r3, [pc, #224]	; (800b224 <tcp_process+0x7d4>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	429a      	cmp	r2, r3
 800b146:	d15f      	bne.n	800b208 <tcp_process+0x7b8>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d15b      	bne.n	800b208 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f7fe fcf1 	bl	8009b38 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b156:	4b35      	ldr	r3, [pc, #212]	; (800b22c <tcp_process+0x7dc>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d105      	bne.n	800b16c <tcp_process+0x71c>
 800b160:	4b32      	ldr	r3, [pc, #200]	; (800b22c <tcp_process+0x7dc>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	68db      	ldr	r3, [r3, #12]
 800b166:	4a31      	ldr	r2, [pc, #196]	; (800b22c <tcp_process+0x7dc>)
 800b168:	6013      	str	r3, [r2, #0]
 800b16a:	e013      	b.n	800b194 <tcp_process+0x744>
 800b16c:	4b2f      	ldr	r3, [pc, #188]	; (800b22c <tcp_process+0x7dc>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	60fb      	str	r3, [r7, #12]
 800b172:	e00c      	b.n	800b18e <tcp_process+0x73e>
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d104      	bne.n	800b188 <tcp_process+0x738>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	68da      	ldr	r2, [r3, #12]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	60da      	str	r2, [r3, #12]
 800b186:	e005      	b.n	800b194 <tcp_process+0x744>
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	60fb      	str	r3, [r7, #12]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d1ef      	bne.n	800b174 <tcp_process+0x724>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	60da      	str	r2, [r3, #12]
 800b19a:	4b1f      	ldr	r3, [pc, #124]	; (800b218 <tcp_process+0x7c8>)
 800b19c:	2201      	movs	r2, #1
 800b19e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	220a      	movs	r2, #10
 800b1a4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b1a6:	4b1d      	ldr	r3, [pc, #116]	; (800b21c <tcp_process+0x7cc>)
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	60da      	str	r2, [r3, #12]
 800b1ae:	4a1b      	ldr	r2, [pc, #108]	; (800b21c <tcp_process+0x7cc>)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6013      	str	r3, [r2, #0]
 800b1b4:	f003 f8a2 	bl	800e2fc <tcp_timer_needed>
      }
      break;
 800b1b8:	e026      	b.n	800b208 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 f93c 	bl	800b438 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b1c0:	4b17      	ldr	r3, [pc, #92]	; (800b220 <tcp_process+0x7d0>)
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	f003 0310 	and.w	r3, r3, #16
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d01f      	beq.n	800b20c <tcp_process+0x7bc>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1d0:	4b14      	ldr	r3, [pc, #80]	; (800b224 <tcp_process+0x7d4>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d119      	bne.n	800b20c <tcp_process+0x7bc>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d115      	bne.n	800b20c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b1e0:	4b11      	ldr	r3, [pc, #68]	; (800b228 <tcp_process+0x7d8>)
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	f043 0310 	orr.w	r3, r3, #16
 800b1e8:	b2da      	uxtb	r2, r3
 800b1ea:	4b0f      	ldr	r3, [pc, #60]	; (800b228 <tcp_process+0x7d8>)
 800b1ec:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b1ee:	e00d      	b.n	800b20c <tcp_process+0x7bc>
    default:
      break;
 800b1f0:	bf00      	nop
 800b1f2:	e00c      	b.n	800b20e <tcp_process+0x7be>
      break;
 800b1f4:	bf00      	nop
 800b1f6:	e00a      	b.n	800b20e <tcp_process+0x7be>
      break;
 800b1f8:	bf00      	nop
 800b1fa:	e008      	b.n	800b20e <tcp_process+0x7be>
      break;
 800b1fc:	bf00      	nop
 800b1fe:	e006      	b.n	800b20e <tcp_process+0x7be>
      break;
 800b200:	bf00      	nop
 800b202:	e004      	b.n	800b20e <tcp_process+0x7be>
      break;
 800b204:	bf00      	nop
 800b206:	e002      	b.n	800b20e <tcp_process+0x7be>
      break;
 800b208:	bf00      	nop
 800b20a:	e000      	b.n	800b20e <tcp_process+0x7be>
      break;
 800b20c:	bf00      	nop
  }
  return ERR_OK;
 800b20e:	2300      	movs	r3, #0
}
 800b210:	4618      	mov	r0, r3
 800b212:	3724      	adds	r7, #36	; 0x24
 800b214:	46bd      	mov	sp, r7
 800b216:	bd90      	pop	{r4, r7, pc}
 800b218:	20008738 	.word	0x20008738
 800b21c:	20008734 	.word	0x20008734
 800b220:	20008768 	.word	0x20008768
 800b224:	20008760 	.word	0x20008760
 800b228:	20008769 	.word	0x20008769
 800b22c:	20008730 	.word	0x20008730

0800b230 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b230:	b590      	push	{r4, r7, lr}
 800b232:	b085      	sub	sp, #20
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d106      	bne.n	800b24e <tcp_oos_insert_segment+0x1e>
 800b240:	4b3b      	ldr	r3, [pc, #236]	; (800b330 <tcp_oos_insert_segment+0x100>)
 800b242:	f240 421f 	movw	r2, #1055	; 0x41f
 800b246:	493b      	ldr	r1, [pc, #236]	; (800b334 <tcp_oos_insert_segment+0x104>)
 800b248:	483b      	ldr	r0, [pc, #236]	; (800b338 <tcp_oos_insert_segment+0x108>)
 800b24a:	f005 fe6b 	bl	8010f24 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	899b      	ldrh	r3, [r3, #12]
 800b254:	b29b      	uxth	r3, r3
 800b256:	4618      	mov	r0, r3
 800b258:	f7fb f9a0 	bl	800659c <lwip_htons>
 800b25c:	4603      	mov	r3, r0
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	f003 0301 	and.w	r3, r3, #1
 800b264:	2b00      	cmp	r3, #0
 800b266:	d028      	beq.n	800b2ba <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b268:	6838      	ldr	r0, [r7, #0]
 800b26a:	f7fe f977 	bl	800955c <tcp_segs_free>
    next = NULL;
 800b26e:	2300      	movs	r3, #0
 800b270:	603b      	str	r3, [r7, #0]
 800b272:	e056      	b.n	800b322 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	899b      	ldrh	r3, [r3, #12]
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7fb f98d 	bl	800659c <lwip_htons>
 800b282:	4603      	mov	r3, r0
 800b284:	b2db      	uxtb	r3, r3
 800b286:	f003 0301 	and.w	r3, r3, #1
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00d      	beq.n	800b2aa <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	899b      	ldrh	r3, [r3, #12]
 800b294:	b29c      	uxth	r4, r3
 800b296:	2001      	movs	r0, #1
 800b298:	f7fb f980 	bl	800659c <lwip_htons>
 800b29c:	4603      	mov	r3, r0
 800b29e:	461a      	mov	r2, r3
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	4322      	orrs	r2, r4
 800b2a6:	b292      	uxth	r2, r2
 800b2a8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b2b4:	68f8      	ldr	r0, [r7, #12]
 800b2b6:	f7fe f966 	bl	8009586 <tcp_seg_free>
    while (next &&
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00e      	beq.n	800b2de <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	891b      	ldrh	r3, [r3, #8]
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	4b1d      	ldr	r3, [pc, #116]	; (800b33c <tcp_oos_insert_segment+0x10c>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	441a      	add	r2, r3
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	6839      	ldr	r1, [r7, #0]
 800b2d4:	8909      	ldrh	r1, [r1, #8]
 800b2d6:	440b      	add	r3, r1
 800b2d8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	daca      	bge.n	800b274 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d01e      	beq.n	800b322 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	891b      	ldrh	r3, [r3, #8]
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	4b14      	ldr	r3, [pc, #80]	; (800b33c <tcp_oos_insert_segment+0x10c>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	441a      	add	r2, r3
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	dd12      	ble.n	800b322 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	b29a      	uxth	r2, r3
 800b304:	4b0d      	ldr	r3, [pc, #52]	; (800b33c <tcp_oos_insert_segment+0x10c>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	b29b      	uxth	r3, r3
 800b30a:	1ad3      	subs	r3, r2, r3
 800b30c:	b29a      	uxth	r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	685a      	ldr	r2, [r3, #4]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	891b      	ldrh	r3, [r3, #8]
 800b31a:	4619      	mov	r1, r3
 800b31c:	4610      	mov	r0, r2
 800b31e:	f7fc fb7f 	bl	8007a20 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	683a      	ldr	r2, [r7, #0]
 800b326:	601a      	str	r2, [r3, #0]
}
 800b328:	bf00      	nop
 800b32a:	3714      	adds	r7, #20
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd90      	pop	{r4, r7, pc}
 800b330:	080135b4 	.word	0x080135b4
 800b334:	08013874 	.word	0x08013874
 800b338:	08013600 	.word	0x08013600
 800b33c:	2000875c 	.word	0x2000875c

0800b340 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b340:	b5b0      	push	{r4, r5, r7, lr}
 800b342:	b086      	sub	sp, #24
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	607a      	str	r2, [r7, #4]
 800b34c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b34e:	e03e      	b.n	800b3ce <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fc fd6c 	bl	8007e3c <pbuf_clen>
 800b364:	4603      	mov	r3, r0
 800b366:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b36e:	8a7a      	ldrh	r2, [r7, #18]
 800b370:	429a      	cmp	r2, r3
 800b372:	d906      	bls.n	800b382 <tcp_free_acked_segments+0x42>
 800b374:	4b2a      	ldr	r3, [pc, #168]	; (800b420 <tcp_free_acked_segments+0xe0>)
 800b376:	f240 4257 	movw	r2, #1111	; 0x457
 800b37a:	492a      	ldr	r1, [pc, #168]	; (800b424 <tcp_free_acked_segments+0xe4>)
 800b37c:	482a      	ldr	r0, [pc, #168]	; (800b428 <tcp_free_acked_segments+0xe8>)
 800b37e:	f005 fdd1 	bl	8010f24 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b388:	8a7b      	ldrh	r3, [r7, #18]
 800b38a:	1ad3      	subs	r3, r2, r3
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	891a      	ldrh	r2, [r3, #8]
 800b398:	4b24      	ldr	r3, [pc, #144]	; (800b42c <tcp_free_acked_segments+0xec>)
 800b39a:	881b      	ldrh	r3, [r3, #0]
 800b39c:	4413      	add	r3, r2
 800b39e:	b29a      	uxth	r2, r3
 800b3a0:	4b22      	ldr	r3, [pc, #136]	; (800b42c <tcp_free_acked_segments+0xec>)
 800b3a2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b3a4:	6978      	ldr	r0, [r7, #20]
 800b3a6:	f7fe f8ee 	bl	8009586 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d00c      	beq.n	800b3ce <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d109      	bne.n	800b3ce <tcp_free_acked_segments+0x8e>
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d106      	bne.n	800b3ce <tcp_free_acked_segments+0x8e>
 800b3c0:	4b17      	ldr	r3, [pc, #92]	; (800b420 <tcp_free_acked_segments+0xe0>)
 800b3c2:	f240 4261 	movw	r2, #1121	; 0x461
 800b3c6:	491a      	ldr	r1, [pc, #104]	; (800b430 <tcp_free_acked_segments+0xf0>)
 800b3c8:	4817      	ldr	r0, [pc, #92]	; (800b428 <tcp_free_acked_segments+0xe8>)
 800b3ca:	f005 fdab 	bl	8010f24 <iprintf>
  while (seg_list != NULL &&
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d020      	beq.n	800b416 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	68db      	ldr	r3, [r3, #12]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7fb f8f3 	bl	80065c6 <lwip_htonl>
 800b3e0:	4604      	mov	r4, r0
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	891b      	ldrh	r3, [r3, #8]
 800b3e6:	461d      	mov	r5, r3
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	899b      	ldrh	r3, [r3, #12]
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7fb f8d3 	bl	800659c <lwip_htons>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	b2db      	uxtb	r3, r3
 800b3fa:	f003 0303 	and.w	r3, r3, #3
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d001      	beq.n	800b406 <tcp_free_acked_segments+0xc6>
 800b402:	2301      	movs	r3, #1
 800b404:	e000      	b.n	800b408 <tcp_free_acked_segments+0xc8>
 800b406:	2300      	movs	r3, #0
 800b408:	442b      	add	r3, r5
 800b40a:	18e2      	adds	r2, r4, r3
 800b40c:	4b09      	ldr	r3, [pc, #36]	; (800b434 <tcp_free_acked_segments+0xf4>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b412:	2b00      	cmp	r3, #0
 800b414:	dd9c      	ble.n	800b350 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b416:	68bb      	ldr	r3, [r7, #8]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3718      	adds	r7, #24
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bdb0      	pop	{r4, r5, r7, pc}
 800b420:	080135b4 	.word	0x080135b4
 800b424:	0801389c 	.word	0x0801389c
 800b428:	08013600 	.word	0x08013600
 800b42c:	20008764 	.word	0x20008764
 800b430:	080138c4 	.word	0x080138c4
 800b434:	20008760 	.word	0x20008760

0800b438 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b438:	b5b0      	push	{r4, r5, r7, lr}
 800b43a:	b094      	sub	sp, #80	; 0x50
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b440:	2300      	movs	r3, #0
 800b442:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d106      	bne.n	800b458 <tcp_receive+0x20>
 800b44a:	4b91      	ldr	r3, [pc, #580]	; (800b690 <tcp_receive+0x258>)
 800b44c:	f240 427b 	movw	r2, #1147	; 0x47b
 800b450:	4990      	ldr	r1, [pc, #576]	; (800b694 <tcp_receive+0x25c>)
 800b452:	4891      	ldr	r0, [pc, #580]	; (800b698 <tcp_receive+0x260>)
 800b454:	f005 fd66 	bl	8010f24 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	7d1b      	ldrb	r3, [r3, #20]
 800b45c:	2b03      	cmp	r3, #3
 800b45e:	d806      	bhi.n	800b46e <tcp_receive+0x36>
 800b460:	4b8b      	ldr	r3, [pc, #556]	; (800b690 <tcp_receive+0x258>)
 800b462:	f240 427c 	movw	r2, #1148	; 0x47c
 800b466:	498d      	ldr	r1, [pc, #564]	; (800b69c <tcp_receive+0x264>)
 800b468:	488b      	ldr	r0, [pc, #556]	; (800b698 <tcp_receive+0x260>)
 800b46a:	f005 fd5b 	bl	8010f24 <iprintf>

  if (flags & TCP_ACK) {
 800b46e:	4b8c      	ldr	r3, [pc, #560]	; (800b6a0 <tcp_receive+0x268>)
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	f003 0310 	and.w	r3, r3, #16
 800b476:	2b00      	cmp	r3, #0
 800b478:	f000 8264 	beq.w	800b944 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b482:	461a      	mov	r2, r3
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b488:	4413      	add	r3, r2
 800b48a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b490:	4b84      	ldr	r3, [pc, #528]	; (800b6a4 <tcp_receive+0x26c>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	1ad3      	subs	r3, r2, r3
 800b496:	2b00      	cmp	r3, #0
 800b498:	db1b      	blt.n	800b4d2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b49e:	4b81      	ldr	r3, [pc, #516]	; (800b6a4 <tcp_receive+0x26c>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d106      	bne.n	800b4b4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b4aa:	4b7f      	ldr	r3, [pc, #508]	; (800b6a8 <tcp_receive+0x270>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	1ad3      	subs	r3, r2, r3
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	db0e      	blt.n	800b4d2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b4b8:	4b7b      	ldr	r3, [pc, #492]	; (800b6a8 <tcp_receive+0x270>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d125      	bne.n	800b50c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b4c0:	4b7a      	ldr	r3, [pc, #488]	; (800b6ac <tcp_receive+0x274>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	89db      	ldrh	r3, [r3, #14]
 800b4c6:	b29a      	uxth	r2, r3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d91c      	bls.n	800b50c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b4d2:	4b76      	ldr	r3, [pc, #472]	; (800b6ac <tcp_receive+0x274>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	89db      	ldrh	r3, [r3, #14]
 800b4d8:	b29a      	uxth	r2, r3
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d205      	bcs.n	800b4fc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800b4fc:	4b69      	ldr	r3, [pc, #420]	; (800b6a4 <tcp_receive+0x26c>)
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800b504:	4b68      	ldr	r3, [pc, #416]	; (800b6a8 <tcp_receive+0x270>)
 800b506:	681a      	ldr	r2, [r3, #0]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b50c:	4b66      	ldr	r3, [pc, #408]	; (800b6a8 <tcp_receive+0x270>)
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b514:	1ad3      	subs	r3, r2, r3
 800b516:	2b00      	cmp	r3, #0
 800b518:	dc58      	bgt.n	800b5cc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b51a:	4b65      	ldr	r3, [pc, #404]	; (800b6b0 <tcp_receive+0x278>)
 800b51c:	881b      	ldrh	r3, [r3, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d14b      	bne.n	800b5ba <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800b52c:	4413      	add	r3, r2
 800b52e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b530:	429a      	cmp	r2, r3
 800b532:	d142      	bne.n	800b5ba <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	db3d      	blt.n	800b5ba <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b542:	4b59      	ldr	r3, [pc, #356]	; (800b6a8 <tcp_receive+0x270>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	429a      	cmp	r2, r3
 800b548:	d137      	bne.n	800b5ba <tcp_receive+0x182>
              found_dupack = 1;
 800b54a:	2301      	movs	r3, #1
 800b54c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b554:	2bff      	cmp	r3, #255	; 0xff
 800b556:	d007      	beq.n	800b568 <tcp_receive+0x130>
                ++pcb->dupacks;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b55e:	3301      	adds	r3, #1
 800b560:	b2da      	uxtb	r2, r3
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b56e:	2b03      	cmp	r3, #3
 800b570:	d91b      	bls.n	800b5aa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b57c:	4413      	add	r3, r2
 800b57e:	b29a      	uxth	r2, r3
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b586:	429a      	cmp	r2, r3
 800b588:	d30a      	bcc.n	800b5a0 <tcp_receive+0x168>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b594:	4413      	add	r3, r2
 800b596:	b29a      	uxth	r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b59e:	e004      	b.n	800b5aa <tcp_receive+0x172>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b5b0:	2b02      	cmp	r3, #2
 800b5b2:	d902      	bls.n	800b5ba <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f002 fb43 	bl	800dc40 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b5ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f040 8161 	bne.w	800b884 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b5ca:	e15b      	b.n	800b884 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b5cc:	4b36      	ldr	r3, [pc, #216]	; (800b6a8 <tcp_receive+0x270>)
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5d4:	1ad3      	subs	r3, r2, r3
 800b5d6:	3b01      	subs	r3, #1
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f2c0 814e 	blt.w	800b87a <tcp_receive+0x442>
 800b5de:	4b32      	ldr	r3, [pc, #200]	; (800b6a8 <tcp_receive+0x270>)
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5e6:	1ad3      	subs	r3, r2, r3
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	f300 8146 	bgt.w	800b87a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	8b5b      	ldrh	r3, [r3, #26]
 800b5f2:	f003 0304 	and.w	r3, r3, #4
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d010      	beq.n	800b61c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	8b5b      	ldrh	r3, [r3, #26]
 800b5fe:	f023 0304 	bic.w	r3, r3, #4
 800b602:	b29a      	uxth	r2, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2200      	movs	r2, #0
 800b618:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b62a:	10db      	asrs	r3, r3, #3
 800b62c:	b21b      	sxth	r3, r3
 800b62e:	b29a      	uxth	r2, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b636:	b29b      	uxth	r3, r3
 800b638:	4413      	add	r3, r2
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	b21a      	sxth	r2, r3
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b644:	4b18      	ldr	r3, [pc, #96]	; (800b6a8 <tcp_receive+0x270>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	b29a      	uxth	r2, r3
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b64e:	b29b      	uxth	r3, r3
 800b650:	1ad3      	subs	r3, r2, r3
 800b652:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b65c:	4b12      	ldr	r3, [pc, #72]	; (800b6a8 <tcp_receive+0x270>)
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	7d1b      	ldrb	r3, [r3, #20]
 800b668:	2b03      	cmp	r3, #3
 800b66a:	f240 8097 	bls.w	800b79c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d245      	bcs.n	800b70a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	8b5b      	ldrh	r3, [r3, #26]
 800b682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b686:	2b00      	cmp	r3, #0
 800b688:	d014      	beq.n	800b6b4 <tcp_receive+0x27c>
 800b68a:	2301      	movs	r3, #1
 800b68c:	e013      	b.n	800b6b6 <tcp_receive+0x27e>
 800b68e:	bf00      	nop
 800b690:	080135b4 	.word	0x080135b4
 800b694:	080138e4 	.word	0x080138e4
 800b698:	08013600 	.word	0x08013600
 800b69c:	08013900 	.word	0x08013900
 800b6a0:	20008768 	.word	0x20008768
 800b6a4:	2000875c 	.word	0x2000875c
 800b6a8:	20008760 	.word	0x20008760
 800b6ac:	2000874c 	.word	0x2000874c
 800b6b0:	20008766 	.word	0x20008766
 800b6b4:	2302      	movs	r3, #2
 800b6b6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b6ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b6be:	b29a      	uxth	r2, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b6c4:	fb12 f303 	smulbb	r3, r2, r3
 800b6c8:	b29b      	uxth	r3, r3
 800b6ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	bf28      	it	cs
 800b6d0:	4613      	movcs	r3, r2
 800b6d2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b6da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b6dc:	4413      	add	r3, r2
 800b6de:	b29a      	uxth	r2, r3
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d309      	bcc.n	800b6fe <tcp_receive+0x2c6>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b6f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b6f2:	4413      	add	r3, r2
 800b6f4:	b29a      	uxth	r2, r3
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b6fc:	e04e      	b.n	800b79c <tcp_receive+0x364>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b704:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b708:	e048      	b.n	800b79c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b710:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b712:	4413      	add	r3, r2
 800b714:	b29a      	uxth	r2, r3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d309      	bcc.n	800b734 <tcp_receive+0x2fc>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b726:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b728:	4413      	add	r3, r2
 800b72a:	b29a      	uxth	r2, r3
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b732:	e004      	b.n	800b73e <tcp_receive+0x306>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b73a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d326      	bcc.n	800b79c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b75a:	1ad3      	subs	r3, r2, r3
 800b75c:	b29a      	uxth	r2, r3
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b76e:	4413      	add	r3, r2
 800b770:	b29a      	uxth	r2, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b778:	429a      	cmp	r2, r3
 800b77a:	d30a      	bcc.n	800b792 <tcp_receive+0x35a>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b786:	4413      	add	r3, r2
 800b788:	b29a      	uxth	r2, r3
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b790:	e004      	b.n	800b79c <tcp_receive+0x364>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b798:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7a4:	4a98      	ldr	r2, [pc, #608]	; (800ba08 <tcp_receive+0x5d0>)
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f7ff fdca 	bl	800b340 <tcp_free_acked_segments>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ba:	4a94      	ldr	r2, [pc, #592]	; (800ba0c <tcp_receive+0x5d4>)
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f7ff fdbf 	bl	800b340 <tcp_free_acked_segments>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d104      	bne.n	800b7da <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7d6:	861a      	strh	r2, [r3, #48]	; 0x30
 800b7d8:	e002      	b.n	800b7e0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d103      	bne.n	800b7f6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b7fc:	4b84      	ldr	r3, [pc, #528]	; (800ba10 <tcp_receive+0x5d8>)
 800b7fe:	881b      	ldrh	r3, [r3, #0]
 800b800:	4413      	add	r3, r2
 800b802:	b29a      	uxth	r2, r3
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	8b5b      	ldrh	r3, [r3, #26]
 800b80e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b812:	2b00      	cmp	r3, #0
 800b814:	d035      	beq.n	800b882 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d118      	bne.n	800b850 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00c      	beq.n	800b840 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	4618      	mov	r0, r3
 800b834:	f7fa fec7 	bl	80065c6 <lwip_htonl>
 800b838:	4603      	mov	r3, r0
 800b83a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	dc20      	bgt.n	800b882 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	8b5b      	ldrh	r3, [r3, #26]
 800b844:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b848:	b29a      	uxth	r2, r3
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b84e:	e018      	b.n	800b882 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b858:	68db      	ldr	r3, [r3, #12]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	4618      	mov	r0, r3
 800b85e:	f7fa feb2 	bl	80065c6 <lwip_htonl>
 800b862:	4603      	mov	r3, r0
 800b864:	1ae3      	subs	r3, r4, r3
 800b866:	2b00      	cmp	r3, #0
 800b868:	dc0b      	bgt.n	800b882 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	8b5b      	ldrh	r3, [r3, #26]
 800b86e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b872:	b29a      	uxth	r2, r3
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b878:	e003      	b.n	800b882 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f002 fbce 	bl	800e01c <tcp_send_empty_ack>
 800b880:	e000      	b.n	800b884 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b882:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d05b      	beq.n	800b944 <tcp_receive+0x50c>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b890:	4b60      	ldr	r3, [pc, #384]	; (800ba14 <tcp_receive+0x5dc>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	1ad3      	subs	r3, r2, r3
 800b896:	2b00      	cmp	r3, #0
 800b898:	da54      	bge.n	800b944 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b89a:	4b5f      	ldr	r3, [pc, #380]	; (800ba18 <tcp_receive+0x5e0>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	b29a      	uxth	r2, r3
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	1ad3      	subs	r3, r2, r3
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b8ae:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b8b8:	10db      	asrs	r3, r3, #3
 800b8ba:	b21b      	sxth	r3, r3
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	1ad3      	subs	r3, r2, r3
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b8cc:	b29a      	uxth	r2, r3
 800b8ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b8d2:	4413      	add	r3, r2
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	b21a      	sxth	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800b8dc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	da05      	bge.n	800b8f0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800b8e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b8e8:	425b      	negs	r3, r3
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b8f0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b8fa:	109b      	asrs	r3, r3, #2
 800b8fc:	b21b      	sxth	r3, r3
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	1ad3      	subs	r3, r2, r3
 800b902:	b29b      	uxth	r3, r3
 800b904:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b90e:	b29a      	uxth	r2, r3
 800b910:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b914:	4413      	add	r3, r2
 800b916:	b29b      	uxth	r3, r3
 800b918:	b21a      	sxth	r2, r3
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b924:	10db      	asrs	r3, r3, #3
 800b926:	b21b      	sxth	r3, r3
 800b928:	b29a      	uxth	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b930:	b29b      	uxth	r3, r3
 800b932:	4413      	add	r3, r2
 800b934:	b29b      	uxth	r3, r3
 800b936:	b21a      	sxth	r2, r3
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2200      	movs	r2, #0
 800b942:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b944:	4b35      	ldr	r3, [pc, #212]	; (800ba1c <tcp_receive+0x5e4>)
 800b946:	881b      	ldrh	r3, [r3, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f000 84e2 	beq.w	800c312 <tcp_receive+0xeda>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	7d1b      	ldrb	r3, [r3, #20]
 800b952:	2b06      	cmp	r3, #6
 800b954:	f200 84dd 	bhi.w	800c312 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b95c:	4b30      	ldr	r3, [pc, #192]	; (800ba20 <tcp_receive+0x5e8>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	1ad3      	subs	r3, r2, r3
 800b962:	3b01      	subs	r3, #1
 800b964:	2b00      	cmp	r3, #0
 800b966:	f2c0 808f 	blt.w	800ba88 <tcp_receive+0x650>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b96e:	4b2b      	ldr	r3, [pc, #172]	; (800ba1c <tcp_receive+0x5e4>)
 800b970:	881b      	ldrh	r3, [r3, #0]
 800b972:	4619      	mov	r1, r3
 800b974:	4b2a      	ldr	r3, [pc, #168]	; (800ba20 <tcp_receive+0x5e8>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	440b      	add	r3, r1
 800b97a:	1ad3      	subs	r3, r2, r3
 800b97c:	3301      	adds	r3, #1
 800b97e:	2b00      	cmp	r3, #0
 800b980:	f300 8082 	bgt.w	800ba88 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b984:	4b27      	ldr	r3, [pc, #156]	; (800ba24 <tcp_receive+0x5ec>)
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b98e:	4b24      	ldr	r3, [pc, #144]	; (800ba20 <tcp_receive+0x5e8>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	1ad3      	subs	r3, r2, r3
 800b994:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b996:	4b23      	ldr	r3, [pc, #140]	; (800ba24 <tcp_receive+0x5ec>)
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d106      	bne.n	800b9ac <tcp_receive+0x574>
 800b99e:	4b22      	ldr	r3, [pc, #136]	; (800ba28 <tcp_receive+0x5f0>)
 800b9a0:	f240 5294 	movw	r2, #1428	; 0x594
 800b9a4:	4921      	ldr	r1, [pc, #132]	; (800ba2c <tcp_receive+0x5f4>)
 800b9a6:	4822      	ldr	r0, [pc, #136]	; (800ba30 <tcp_receive+0x5f8>)
 800b9a8:	f005 fabc 	bl	8010f24 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d906      	bls.n	800b9c4 <tcp_receive+0x58c>
 800b9b6:	4b1c      	ldr	r3, [pc, #112]	; (800ba28 <tcp_receive+0x5f0>)
 800b9b8:	f240 5295 	movw	r2, #1429	; 0x595
 800b9bc:	491d      	ldr	r1, [pc, #116]	; (800ba34 <tcp_receive+0x5fc>)
 800b9be:	481c      	ldr	r0, [pc, #112]	; (800ba30 <tcp_receive+0x5f8>)
 800b9c0:	f005 fab0 	bl	8010f24 <iprintf>
      off = (u16_t)off32;
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b9ca:	4b16      	ldr	r3, [pc, #88]	; (800ba24 <tcp_receive+0x5ec>)
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	891b      	ldrh	r3, [r3, #8]
 800b9d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d906      	bls.n	800b9e6 <tcp_receive+0x5ae>
 800b9d8:	4b13      	ldr	r3, [pc, #76]	; (800ba28 <tcp_receive+0x5f0>)
 800b9da:	f240 5297 	movw	r2, #1431	; 0x597
 800b9de:	4916      	ldr	r1, [pc, #88]	; (800ba38 <tcp_receive+0x600>)
 800b9e0:	4813      	ldr	r0, [pc, #76]	; (800ba30 <tcp_receive+0x5f8>)
 800b9e2:	f005 fa9f 	bl	8010f24 <iprintf>
      inseg.len -= off;
 800b9e6:	4b0f      	ldr	r3, [pc, #60]	; (800ba24 <tcp_receive+0x5ec>)
 800b9e8:	891a      	ldrh	r2, [r3, #8]
 800b9ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b9ee:	1ad3      	subs	r3, r2, r3
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	4b0c      	ldr	r3, [pc, #48]	; (800ba24 <tcp_receive+0x5ec>)
 800b9f4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b9f6:	4b0b      	ldr	r3, [pc, #44]	; (800ba24 <tcp_receive+0x5ec>)
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	891a      	ldrh	r2, [r3, #8]
 800b9fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ba00:	1ad3      	subs	r3, r2, r3
 800ba02:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ba04:	e02a      	b.n	800ba5c <tcp_receive+0x624>
 800ba06:	bf00      	nop
 800ba08:	0801391c 	.word	0x0801391c
 800ba0c:	08013924 	.word	0x08013924
 800ba10:	20008764 	.word	0x20008764
 800ba14:	20008760 	.word	0x20008760
 800ba18:	20008724 	.word	0x20008724
 800ba1c:	20008766 	.word	0x20008766
 800ba20:	2000875c 	.word	0x2000875c
 800ba24:	2000873c 	.word	0x2000873c
 800ba28:	080135b4 	.word	0x080135b4
 800ba2c:	0801392c 	.word	0x0801392c
 800ba30:	08013600 	.word	0x08013600
 800ba34:	0801393c 	.word	0x0801393c
 800ba38:	0801394c 	.word	0x0801394c
        off -= p->len;
 800ba3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba3e:	895b      	ldrh	r3, [r3, #10]
 800ba40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ba44:	1ad3      	subs	r3, r2, r3
 800ba46:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ba4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba4c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ba4e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ba50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba52:	2200      	movs	r2, #0
 800ba54:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ba56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ba5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba5e:	895b      	ldrh	r3, [r3, #10]
 800ba60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d8e9      	bhi.n	800ba3c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ba68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ba70:	f7fc f8d6 	bl	8007c20 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba78:	4a91      	ldr	r2, [pc, #580]	; (800bcc0 <tcp_receive+0x888>)
 800ba7a:	6013      	str	r3, [r2, #0]
 800ba7c:	4b91      	ldr	r3, [pc, #580]	; (800bcc4 <tcp_receive+0x88c>)
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	4a8f      	ldr	r2, [pc, #572]	; (800bcc0 <tcp_receive+0x888>)
 800ba82:	6812      	ldr	r2, [r2, #0]
 800ba84:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ba86:	e00d      	b.n	800baa4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ba88:	4b8d      	ldr	r3, [pc, #564]	; (800bcc0 <tcp_receive+0x888>)
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba90:	1ad3      	subs	r3, r2, r3
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	da06      	bge.n	800baa4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	8b5b      	ldrh	r3, [r3, #26]
 800ba9a:	f043 0302 	orr.w	r3, r3, #2
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800baa4:	4b86      	ldr	r3, [pc, #536]	; (800bcc0 <tcp_receive+0x888>)
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baac:	1ad3      	subs	r3, r2, r3
 800baae:	2b00      	cmp	r3, #0
 800bab0:	f2c0 842a 	blt.w	800c308 <tcp_receive+0xed0>
 800bab4:	4b82      	ldr	r3, [pc, #520]	; (800bcc0 <tcp_receive+0x888>)
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800babc:	6879      	ldr	r1, [r7, #4]
 800babe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bac0:	440b      	add	r3, r1
 800bac2:	1ad3      	subs	r3, r2, r3
 800bac4:	3301      	adds	r3, #1
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	f300 841e 	bgt.w	800c308 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bad0:	4b7b      	ldr	r3, [pc, #492]	; (800bcc0 <tcp_receive+0x888>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	f040 829a 	bne.w	800c00e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800bada:	4b7a      	ldr	r3, [pc, #488]	; (800bcc4 <tcp_receive+0x88c>)
 800badc:	891c      	ldrh	r4, [r3, #8]
 800bade:	4b79      	ldr	r3, [pc, #484]	; (800bcc4 <tcp_receive+0x88c>)
 800bae0:	68db      	ldr	r3, [r3, #12]
 800bae2:	899b      	ldrh	r3, [r3, #12]
 800bae4:	b29b      	uxth	r3, r3
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7fa fd58 	bl	800659c <lwip_htons>
 800baec:	4603      	mov	r3, r0
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	f003 0303 	and.w	r3, r3, #3
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d001      	beq.n	800bafc <tcp_receive+0x6c4>
 800baf8:	2301      	movs	r3, #1
 800bafa:	e000      	b.n	800bafe <tcp_receive+0x6c6>
 800bafc:	2300      	movs	r3, #0
 800bafe:	4423      	add	r3, r4
 800bb00:	b29a      	uxth	r2, r3
 800bb02:	4b71      	ldr	r3, [pc, #452]	; (800bcc8 <tcp_receive+0x890>)
 800bb04:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bb0a:	4b6f      	ldr	r3, [pc, #444]	; (800bcc8 <tcp_receive+0x890>)
 800bb0c:	881b      	ldrh	r3, [r3, #0]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d275      	bcs.n	800bbfe <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bb12:	4b6c      	ldr	r3, [pc, #432]	; (800bcc4 <tcp_receive+0x88c>)
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	899b      	ldrh	r3, [r3, #12]
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7fa fd3e 	bl	800659c <lwip_htons>
 800bb20:	4603      	mov	r3, r0
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	f003 0301 	and.w	r3, r3, #1
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d01f      	beq.n	800bb6c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800bb2c:	4b65      	ldr	r3, [pc, #404]	; (800bcc4 <tcp_receive+0x88c>)
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	899b      	ldrh	r3, [r3, #12]
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	b21b      	sxth	r3, r3
 800bb36:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bb3a:	b21c      	sxth	r4, r3
 800bb3c:	4b61      	ldr	r3, [pc, #388]	; (800bcc4 <tcp_receive+0x88c>)
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	899b      	ldrh	r3, [r3, #12]
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7fa fd29 	bl	800659c <lwip_htons>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7fa fd20 	bl	800659c <lwip_htons>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	b21b      	sxth	r3, r3
 800bb60:	4323      	orrs	r3, r4
 800bb62:	b21a      	sxth	r2, r3
 800bb64:	4b57      	ldr	r3, [pc, #348]	; (800bcc4 <tcp_receive+0x88c>)
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	b292      	uxth	r2, r2
 800bb6a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bb70:	4b54      	ldr	r3, [pc, #336]	; (800bcc4 <tcp_receive+0x88c>)
 800bb72:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bb74:	4b53      	ldr	r3, [pc, #332]	; (800bcc4 <tcp_receive+0x88c>)
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	899b      	ldrh	r3, [r3, #12]
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7fa fd0d 	bl	800659c <lwip_htons>
 800bb82:	4603      	mov	r3, r0
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	f003 0302 	and.w	r3, r3, #2
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d005      	beq.n	800bb9a <tcp_receive+0x762>
            inseg.len -= 1;
 800bb8e:	4b4d      	ldr	r3, [pc, #308]	; (800bcc4 <tcp_receive+0x88c>)
 800bb90:	891b      	ldrh	r3, [r3, #8]
 800bb92:	3b01      	subs	r3, #1
 800bb94:	b29a      	uxth	r2, r3
 800bb96:	4b4b      	ldr	r3, [pc, #300]	; (800bcc4 <tcp_receive+0x88c>)
 800bb98:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800bb9a:	4b4a      	ldr	r3, [pc, #296]	; (800bcc4 <tcp_receive+0x88c>)
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	4a49      	ldr	r2, [pc, #292]	; (800bcc4 <tcp_receive+0x88c>)
 800bba0:	8912      	ldrh	r2, [r2, #8]
 800bba2:	4611      	mov	r1, r2
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7fb ff3b 	bl	8007a20 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800bbaa:	4b46      	ldr	r3, [pc, #280]	; (800bcc4 <tcp_receive+0x88c>)
 800bbac:	891c      	ldrh	r4, [r3, #8]
 800bbae:	4b45      	ldr	r3, [pc, #276]	; (800bcc4 <tcp_receive+0x88c>)
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	899b      	ldrh	r3, [r3, #12]
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7fa fcf0 	bl	800659c <lwip_htons>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	b2db      	uxtb	r3, r3
 800bbc0:	f003 0303 	and.w	r3, r3, #3
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d001      	beq.n	800bbcc <tcp_receive+0x794>
 800bbc8:	2301      	movs	r3, #1
 800bbca:	e000      	b.n	800bbce <tcp_receive+0x796>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	4423      	add	r3, r4
 800bbd0:	b29a      	uxth	r2, r3
 800bbd2:	4b3d      	ldr	r3, [pc, #244]	; (800bcc8 <tcp_receive+0x890>)
 800bbd4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bbd6:	4b3c      	ldr	r3, [pc, #240]	; (800bcc8 <tcp_receive+0x890>)
 800bbd8:	881b      	ldrh	r3, [r3, #0]
 800bbda:	461a      	mov	r2, r3
 800bbdc:	4b38      	ldr	r3, [pc, #224]	; (800bcc0 <tcp_receive+0x888>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	441a      	add	r2, r3
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe6:	6879      	ldr	r1, [r7, #4]
 800bbe8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bbea:	440b      	add	r3, r1
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d006      	beq.n	800bbfe <tcp_receive+0x7c6>
 800bbf0:	4b36      	ldr	r3, [pc, #216]	; (800bccc <tcp_receive+0x894>)
 800bbf2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800bbf6:	4936      	ldr	r1, [pc, #216]	; (800bcd0 <tcp_receive+0x898>)
 800bbf8:	4836      	ldr	r0, [pc, #216]	; (800bcd4 <tcp_receive+0x89c>)
 800bbfa:	f005 f993 	bl	8010f24 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	f000 80e7 	beq.w	800bdd6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bc08:	4b2e      	ldr	r3, [pc, #184]	; (800bcc4 <tcp_receive+0x88c>)
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	899b      	ldrh	r3, [r3, #12]
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	4618      	mov	r0, r3
 800bc12:	f7fa fcc3 	bl	800659c <lwip_htons>
 800bc16:	4603      	mov	r3, r0
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	f003 0301 	and.w	r3, r3, #1
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d010      	beq.n	800bc44 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800bc22:	e00a      	b.n	800bc3a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc28:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800bc34:	68f8      	ldr	r0, [r7, #12]
 800bc36:	f7fd fca6 	bl	8009586 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d1f0      	bne.n	800bc24 <tcp_receive+0x7ec>
 800bc42:	e0c8      	b.n	800bdd6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc48:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800bc4a:	e052      	b.n	800bcf2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bc4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc4e:	68db      	ldr	r3, [r3, #12]
 800bc50:	899b      	ldrh	r3, [r3, #12]
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	4618      	mov	r0, r3
 800bc56:	f7fa fca1 	bl	800659c <lwip_htons>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	b2db      	uxtb	r3, r3
 800bc5e:	f003 0301 	and.w	r3, r3, #1
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d03d      	beq.n	800bce2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800bc66:	4b17      	ldr	r3, [pc, #92]	; (800bcc4 <tcp_receive+0x88c>)
 800bc68:	68db      	ldr	r3, [r3, #12]
 800bc6a:	899b      	ldrh	r3, [r3, #12]
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7fa fc94 	bl	800659c <lwip_htons>
 800bc74:	4603      	mov	r3, r0
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d130      	bne.n	800bce2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800bc80:	4b10      	ldr	r3, [pc, #64]	; (800bcc4 <tcp_receive+0x88c>)
 800bc82:	68db      	ldr	r3, [r3, #12]
 800bc84:	899b      	ldrh	r3, [r3, #12]
 800bc86:	b29c      	uxth	r4, r3
 800bc88:	2001      	movs	r0, #1
 800bc8a:	f7fa fc87 	bl	800659c <lwip_htons>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	461a      	mov	r2, r3
 800bc92:	4b0c      	ldr	r3, [pc, #48]	; (800bcc4 <tcp_receive+0x88c>)
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	4322      	orrs	r2, r4
 800bc98:	b292      	uxth	r2, r2
 800bc9a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800bc9c:	4b09      	ldr	r3, [pc, #36]	; (800bcc4 <tcp_receive+0x88c>)
 800bc9e:	891c      	ldrh	r4, [r3, #8]
 800bca0:	4b08      	ldr	r3, [pc, #32]	; (800bcc4 <tcp_receive+0x88c>)
 800bca2:	68db      	ldr	r3, [r3, #12]
 800bca4:	899b      	ldrh	r3, [r3, #12]
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f7fa fc77 	bl	800659c <lwip_htons>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	f003 0303 	and.w	r3, r3, #3
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00e      	beq.n	800bcd8 <tcp_receive+0x8a0>
 800bcba:	2301      	movs	r3, #1
 800bcbc:	e00d      	b.n	800bcda <tcp_receive+0x8a2>
 800bcbe:	bf00      	nop
 800bcc0:	2000875c 	.word	0x2000875c
 800bcc4:	2000873c 	.word	0x2000873c
 800bcc8:	20008766 	.word	0x20008766
 800bccc:	080135b4 	.word	0x080135b4
 800bcd0:	0801395c 	.word	0x0801395c
 800bcd4:	08013600 	.word	0x08013600
 800bcd8:	2300      	movs	r3, #0
 800bcda:	4423      	add	r3, r4
 800bcdc:	b29a      	uxth	r2, r3
 800bcde:	4b98      	ldr	r3, [pc, #608]	; (800bf40 <tcp_receive+0xb08>)
 800bce0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800bce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bce4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800bce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800bcec:	6938      	ldr	r0, [r7, #16]
 800bcee:	f7fd fc4a 	bl	8009586 <tcp_seg_free>
            while (next &&
 800bcf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00e      	beq.n	800bd16 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800bcf8:	4b91      	ldr	r3, [pc, #580]	; (800bf40 <tcp_receive+0xb08>)
 800bcfa:	881b      	ldrh	r3, [r3, #0]
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	4b91      	ldr	r3, [pc, #580]	; (800bf44 <tcp_receive+0xb0c>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	441a      	add	r2, r3
 800bd04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd0c:	8909      	ldrh	r1, [r1, #8]
 800bd0e:	440b      	add	r3, r1
 800bd10:	1ad3      	subs	r3, r2, r3
            while (next &&
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	da9a      	bge.n	800bc4c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800bd16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d059      	beq.n	800bdd0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800bd1c:	4b88      	ldr	r3, [pc, #544]	; (800bf40 <tcp_receive+0xb08>)
 800bd1e:	881b      	ldrh	r3, [r3, #0]
 800bd20:	461a      	mov	r2, r3
 800bd22:	4b88      	ldr	r3, [pc, #544]	; (800bf44 <tcp_receive+0xb0c>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	441a      	add	r2, r3
 800bd28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	dd4d      	ble.n	800bdd0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800bd34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd36:	68db      	ldr	r3, [r3, #12]
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	b29a      	uxth	r2, r3
 800bd3c:	4b81      	ldr	r3, [pc, #516]	; (800bf44 <tcp_receive+0xb0c>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	1ad3      	subs	r3, r2, r3
 800bd44:	b29a      	uxth	r2, r3
 800bd46:	4b80      	ldr	r3, [pc, #512]	; (800bf48 <tcp_receive+0xb10>)
 800bd48:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bd4a:	4b7f      	ldr	r3, [pc, #508]	; (800bf48 <tcp_receive+0xb10>)
 800bd4c:	68db      	ldr	r3, [r3, #12]
 800bd4e:	899b      	ldrh	r3, [r3, #12]
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7fa fc22 	bl	800659c <lwip_htons>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	b2db      	uxtb	r3, r3
 800bd5c:	f003 0302 	and.w	r3, r3, #2
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d005      	beq.n	800bd70 <tcp_receive+0x938>
                inseg.len -= 1;
 800bd64:	4b78      	ldr	r3, [pc, #480]	; (800bf48 <tcp_receive+0xb10>)
 800bd66:	891b      	ldrh	r3, [r3, #8]
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	b29a      	uxth	r2, r3
 800bd6c:	4b76      	ldr	r3, [pc, #472]	; (800bf48 <tcp_receive+0xb10>)
 800bd6e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800bd70:	4b75      	ldr	r3, [pc, #468]	; (800bf48 <tcp_receive+0xb10>)
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	4a74      	ldr	r2, [pc, #464]	; (800bf48 <tcp_receive+0xb10>)
 800bd76:	8912      	ldrh	r2, [r2, #8]
 800bd78:	4611      	mov	r1, r2
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7fb fe50 	bl	8007a20 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800bd80:	4b71      	ldr	r3, [pc, #452]	; (800bf48 <tcp_receive+0xb10>)
 800bd82:	891c      	ldrh	r4, [r3, #8]
 800bd84:	4b70      	ldr	r3, [pc, #448]	; (800bf48 <tcp_receive+0xb10>)
 800bd86:	68db      	ldr	r3, [r3, #12]
 800bd88:	899b      	ldrh	r3, [r3, #12]
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7fa fc05 	bl	800659c <lwip_htons>
 800bd92:	4603      	mov	r3, r0
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	f003 0303 	and.w	r3, r3, #3
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d001      	beq.n	800bda2 <tcp_receive+0x96a>
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e000      	b.n	800bda4 <tcp_receive+0x96c>
 800bda2:	2300      	movs	r3, #0
 800bda4:	4423      	add	r3, r4
 800bda6:	b29a      	uxth	r2, r3
 800bda8:	4b65      	ldr	r3, [pc, #404]	; (800bf40 <tcp_receive+0xb08>)
 800bdaa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800bdac:	4b64      	ldr	r3, [pc, #400]	; (800bf40 <tcp_receive+0xb08>)
 800bdae:	881b      	ldrh	r3, [r3, #0]
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	4b64      	ldr	r3, [pc, #400]	; (800bf44 <tcp_receive+0xb0c>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	441a      	add	r2, r3
 800bdb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d006      	beq.n	800bdd0 <tcp_receive+0x998>
 800bdc2:	4b62      	ldr	r3, [pc, #392]	; (800bf4c <tcp_receive+0xb14>)
 800bdc4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800bdc8:	4961      	ldr	r1, [pc, #388]	; (800bf50 <tcp_receive+0xb18>)
 800bdca:	4862      	ldr	r0, [pc, #392]	; (800bf54 <tcp_receive+0xb1c>)
 800bdcc:	f005 f8aa 	bl	8010f24 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bdd4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800bdd6:	4b5a      	ldr	r3, [pc, #360]	; (800bf40 <tcp_receive+0xb08>)
 800bdd8:	881b      	ldrh	r3, [r3, #0]
 800bdda:	461a      	mov	r2, r3
 800bddc:	4b59      	ldr	r3, [pc, #356]	; (800bf44 <tcp_receive+0xb0c>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	441a      	add	r2, r3
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bdea:	4b55      	ldr	r3, [pc, #340]	; (800bf40 <tcp_receive+0xb08>)
 800bdec:	881b      	ldrh	r3, [r3, #0]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d206      	bcs.n	800be00 <tcp_receive+0x9c8>
 800bdf2:	4b56      	ldr	r3, [pc, #344]	; (800bf4c <tcp_receive+0xb14>)
 800bdf4:	f240 6207 	movw	r2, #1543	; 0x607
 800bdf8:	4957      	ldr	r1, [pc, #348]	; (800bf58 <tcp_receive+0xb20>)
 800bdfa:	4856      	ldr	r0, [pc, #344]	; (800bf54 <tcp_receive+0xb1c>)
 800bdfc:	f005 f892 	bl	8010f24 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800be04:	4b4e      	ldr	r3, [pc, #312]	; (800bf40 <tcp_receive+0xb08>)
 800be06:	881b      	ldrh	r3, [r3, #0]
 800be08:	1ad3      	subs	r3, r2, r3
 800be0a:	b29a      	uxth	r2, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f7fc fe93 	bl	8008b3c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800be16:	4b4c      	ldr	r3, [pc, #304]	; (800bf48 <tcp_receive+0xb10>)
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	891b      	ldrh	r3, [r3, #8]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d006      	beq.n	800be2e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800be20:	4b49      	ldr	r3, [pc, #292]	; (800bf48 <tcp_receive+0xb10>)
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	4a4d      	ldr	r2, [pc, #308]	; (800bf5c <tcp_receive+0xb24>)
 800be26:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800be28:	4b47      	ldr	r3, [pc, #284]	; (800bf48 <tcp_receive+0xb10>)
 800be2a:	2200      	movs	r2, #0
 800be2c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800be2e:	4b46      	ldr	r3, [pc, #280]	; (800bf48 <tcp_receive+0xb10>)
 800be30:	68db      	ldr	r3, [r3, #12]
 800be32:	899b      	ldrh	r3, [r3, #12]
 800be34:	b29b      	uxth	r3, r3
 800be36:	4618      	mov	r0, r3
 800be38:	f7fa fbb0 	bl	800659c <lwip_htons>
 800be3c:	4603      	mov	r3, r0
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	f003 0301 	and.w	r3, r3, #1
 800be44:	2b00      	cmp	r3, #0
 800be46:	f000 80b8 	beq.w	800bfba <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800be4a:	4b45      	ldr	r3, [pc, #276]	; (800bf60 <tcp_receive+0xb28>)
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	f043 0320 	orr.w	r3, r3, #32
 800be52:	b2da      	uxtb	r2, r3
 800be54:	4b42      	ldr	r3, [pc, #264]	; (800bf60 <tcp_receive+0xb28>)
 800be56:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800be58:	e0af      	b.n	800bfba <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be5e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	4a36      	ldr	r2, [pc, #216]	; (800bf44 <tcp_receive+0xb0c>)
 800be6a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	891b      	ldrh	r3, [r3, #8]
 800be70:	461c      	mov	r4, r3
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	899b      	ldrh	r3, [r3, #12]
 800be78:	b29b      	uxth	r3, r3
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7fa fb8e 	bl	800659c <lwip_htons>
 800be80:	4603      	mov	r3, r0
 800be82:	b2db      	uxtb	r3, r3
 800be84:	f003 0303 	and.w	r3, r3, #3
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d001      	beq.n	800be90 <tcp_receive+0xa58>
 800be8c:	2301      	movs	r3, #1
 800be8e:	e000      	b.n	800be92 <tcp_receive+0xa5a>
 800be90:	2300      	movs	r3, #0
 800be92:	191a      	adds	r2, r3, r4
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be98:	441a      	add	r2, r3
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bea2:	461c      	mov	r4, r3
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	891b      	ldrh	r3, [r3, #8]
 800bea8:	461d      	mov	r5, r3
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	68db      	ldr	r3, [r3, #12]
 800beae:	899b      	ldrh	r3, [r3, #12]
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7fa fb72 	bl	800659c <lwip_htons>
 800beb8:	4603      	mov	r3, r0
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	f003 0303 	and.w	r3, r3, #3
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d001      	beq.n	800bec8 <tcp_receive+0xa90>
 800bec4:	2301      	movs	r3, #1
 800bec6:	e000      	b.n	800beca <tcp_receive+0xa92>
 800bec8:	2300      	movs	r3, #0
 800beca:	442b      	add	r3, r5
 800becc:	429c      	cmp	r4, r3
 800bece:	d206      	bcs.n	800bede <tcp_receive+0xaa6>
 800bed0:	4b1e      	ldr	r3, [pc, #120]	; (800bf4c <tcp_receive+0xb14>)
 800bed2:	f240 622b 	movw	r2, #1579	; 0x62b
 800bed6:	4923      	ldr	r1, [pc, #140]	; (800bf64 <tcp_receive+0xb2c>)
 800bed8:	481e      	ldr	r0, [pc, #120]	; (800bf54 <tcp_receive+0xb1c>)
 800beda:	f005 f823 	bl	8010f24 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	891b      	ldrh	r3, [r3, #8]
 800bee2:	461c      	mov	r4, r3
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	68db      	ldr	r3, [r3, #12]
 800bee8:	899b      	ldrh	r3, [r3, #12]
 800beea:	b29b      	uxth	r3, r3
 800beec:	4618      	mov	r0, r3
 800beee:	f7fa fb55 	bl	800659c <lwip_htons>
 800bef2:	4603      	mov	r3, r0
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	f003 0303 	and.w	r3, r3, #3
 800befa:	2b00      	cmp	r3, #0
 800befc:	d001      	beq.n	800bf02 <tcp_receive+0xaca>
 800befe:	2301      	movs	r3, #1
 800bf00:	e000      	b.n	800bf04 <tcp_receive+0xacc>
 800bf02:	2300      	movs	r3, #0
 800bf04:	1919      	adds	r1, r3, r4
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bf0a:	b28b      	uxth	r3, r1
 800bf0c:	1ad3      	subs	r3, r2, r3
 800bf0e:	b29a      	uxth	r2, r3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f7fc fe11 	bl	8008b3c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	891b      	ldrh	r3, [r3, #8]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d028      	beq.n	800bf76 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800bf24:	4b0d      	ldr	r3, [pc, #52]	; (800bf5c <tcp_receive+0xb24>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d01d      	beq.n	800bf68 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800bf2c:	4b0b      	ldr	r3, [pc, #44]	; (800bf5c <tcp_receive+0xb24>)
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	4619      	mov	r1, r3
 800bf36:	4610      	mov	r0, r2
 800bf38:	f7fb ffba 	bl	8007eb0 <pbuf_cat>
 800bf3c:	e018      	b.n	800bf70 <tcp_receive+0xb38>
 800bf3e:	bf00      	nop
 800bf40:	20008766 	.word	0x20008766
 800bf44:	2000875c 	.word	0x2000875c
 800bf48:	2000873c 	.word	0x2000873c
 800bf4c:	080135b4 	.word	0x080135b4
 800bf50:	08013994 	.word	0x08013994
 800bf54:	08013600 	.word	0x08013600
 800bf58:	080139d0 	.word	0x080139d0
 800bf5c:	2000876c 	.word	0x2000876c
 800bf60:	20008769 	.word	0x20008769
 800bf64:	080139f0 	.word	0x080139f0
            } else {
              recv_data = cseg->p;
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	4a70      	ldr	r2, [pc, #448]	; (800c130 <tcp_receive+0xcf8>)
 800bf6e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	2200      	movs	r2, #0
 800bf74:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	68db      	ldr	r3, [r3, #12]
 800bf7a:	899b      	ldrh	r3, [r3, #12]
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7fa fb0c 	bl	800659c <lwip_htons>
 800bf84:	4603      	mov	r3, r0
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	f003 0301 	and.w	r3, r3, #1
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d00d      	beq.n	800bfac <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800bf90:	4b68      	ldr	r3, [pc, #416]	; (800c134 <tcp_receive+0xcfc>)
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	f043 0320 	orr.w	r3, r3, #32
 800bf98:	b2da      	uxtb	r2, r3
 800bf9a:	4b66      	ldr	r3, [pc, #408]	; (800c134 <tcp_receive+0xcfc>)
 800bf9c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	7d1b      	ldrb	r3, [r3, #20]
 800bfa2:	2b04      	cmp	r3, #4
 800bfa4:	d102      	bne.n	800bfac <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2207      	movs	r2, #7
 800bfaa:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	681a      	ldr	r2, [r3, #0]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800bfb4:	68b8      	ldr	r0, [r7, #8]
 800bfb6:	f7fd fae6 	bl	8009586 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d008      	beq.n	800bfd4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	685a      	ldr	r2, [r3, #4]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	f43f af43 	beq.w	800be5a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	8b5b      	ldrh	r3, [r3, #26]
 800bfd8:	f003 0301 	and.w	r3, r3, #1
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d00e      	beq.n	800bffe <tcp_receive+0xbc6>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	8b5b      	ldrh	r3, [r3, #26]
 800bfe4:	f023 0301 	bic.w	r3, r3, #1
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	835a      	strh	r2, [r3, #26]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	8b5b      	ldrh	r3, [r3, #26]
 800bff2:	f043 0302 	orr.w	r3, r3, #2
 800bff6:	b29a      	uxth	r2, r3
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bffc:	e188      	b.n	800c310 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	8b5b      	ldrh	r3, [r3, #26]
 800c002:	f043 0301 	orr.w	r3, r3, #1
 800c006:	b29a      	uxth	r2, r3
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c00c:	e180      	b.n	800c310 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c012:	2b00      	cmp	r3, #0
 800c014:	d106      	bne.n	800c024 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c016:	4848      	ldr	r0, [pc, #288]	; (800c138 <tcp_receive+0xd00>)
 800c018:	f7fd faec 	bl	80095f4 <tcp_seg_copy>
 800c01c:	4602      	mov	r2, r0
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	675a      	str	r2, [r3, #116]	; 0x74
 800c022:	e16d      	b.n	800c300 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c024:	2300      	movs	r3, #0
 800c026:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c02c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c02e:	e157      	b.n	800c2e0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800c030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c032:	68db      	ldr	r3, [r3, #12]
 800c034:	685a      	ldr	r2, [r3, #4]
 800c036:	4b41      	ldr	r3, [pc, #260]	; (800c13c <tcp_receive+0xd04>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d11d      	bne.n	800c07a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c03e:	4b3e      	ldr	r3, [pc, #248]	; (800c138 <tcp_receive+0xd00>)
 800c040:	891a      	ldrh	r2, [r3, #8]
 800c042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c044:	891b      	ldrh	r3, [r3, #8]
 800c046:	429a      	cmp	r2, r3
 800c048:	f240 814f 	bls.w	800c2ea <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c04c:	483a      	ldr	r0, [pc, #232]	; (800c138 <tcp_receive+0xd00>)
 800c04e:	f7fd fad1 	bl	80095f4 <tcp_seg_copy>
 800c052:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	2b00      	cmp	r3, #0
 800c058:	f000 8149 	beq.w	800c2ee <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800c05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d003      	beq.n	800c06a <tcp_receive+0xc32>
                    prev->next = cseg;
 800c062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c064:	697a      	ldr	r2, [r7, #20]
 800c066:	601a      	str	r2, [r3, #0]
 800c068:	e002      	b.n	800c070 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	697a      	ldr	r2, [r7, #20]
 800c06e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c070:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c072:	6978      	ldr	r0, [r7, #20]
 800c074:	f7ff f8dc 	bl	800b230 <tcp_oos_insert_segment>
                }
                break;
 800c078:	e139      	b.n	800c2ee <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d117      	bne.n	800c0b0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c080:	4b2e      	ldr	r3, [pc, #184]	; (800c13c <tcp_receive+0xd04>)
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	1ad3      	subs	r3, r2, r3
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	da57      	bge.n	800c140 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c090:	4829      	ldr	r0, [pc, #164]	; (800c138 <tcp_receive+0xd00>)
 800c092:	f7fd faaf 	bl	80095f4 <tcp_seg_copy>
 800c096:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	f000 8129 	beq.w	800c2f2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	69ba      	ldr	r2, [r7, #24]
 800c0a4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c0a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c0a8:	69b8      	ldr	r0, [r7, #24]
 800c0aa:	f7ff f8c1 	bl	800b230 <tcp_oos_insert_segment>
                  }
                  break;
 800c0ae:	e120      	b.n	800c2f2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c0b0:	4b22      	ldr	r3, [pc, #136]	; (800c13c <tcp_receive+0xd04>)
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0b6:	68db      	ldr	r3, [r3, #12]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	1ad3      	subs	r3, r2, r3
 800c0bc:	3b01      	subs	r3, #1
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	db3e      	blt.n	800c140 <tcp_receive+0xd08>
 800c0c2:	4b1e      	ldr	r3, [pc, #120]	; (800c13c <tcp_receive+0xd04>)
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	1ad3      	subs	r3, r2, r3
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	dc35      	bgt.n	800c140 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c0d4:	4818      	ldr	r0, [pc, #96]	; (800c138 <tcp_receive+0xd00>)
 800c0d6:	f7fd fa8d 	bl	80095f4 <tcp_seg_copy>
 800c0da:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c0dc:	69fb      	ldr	r3, [r7, #28]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	f000 8109 	beq.w	800c2f6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0e6:	68db      	ldr	r3, [r3, #12]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0ec:	8912      	ldrh	r2, [r2, #8]
 800c0ee:	441a      	add	r2, r3
 800c0f0:	4b12      	ldr	r3, [pc, #72]	; (800c13c <tcp_receive+0xd04>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	1ad3      	subs	r3, r2, r3
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	dd12      	ble.n	800c120 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c0fa:	4b10      	ldr	r3, [pc, #64]	; (800c13c <tcp_receive+0xd04>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	b29a      	uxth	r2, r3
 800c100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	685b      	ldr	r3, [r3, #4]
 800c106:	b29b      	uxth	r3, r3
 800c108:	1ad3      	subs	r3, r2, r3
 800c10a:	b29a      	uxth	r2, r3
 800c10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c10e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c112:	685a      	ldr	r2, [r3, #4]
 800c114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c116:	891b      	ldrh	r3, [r3, #8]
 800c118:	4619      	mov	r1, r3
 800c11a:	4610      	mov	r0, r2
 800c11c:	f7fb fc80 	bl	8007a20 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c122:	69fa      	ldr	r2, [r7, #28]
 800c124:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c126:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c128:	69f8      	ldr	r0, [r7, #28]
 800c12a:	f7ff f881 	bl	800b230 <tcp_oos_insert_segment>
                  }
                  break;
 800c12e:	e0e2      	b.n	800c2f6 <tcp_receive+0xebe>
 800c130:	2000876c 	.word	0x2000876c
 800c134:	20008769 	.word	0x20008769
 800c138:	2000873c 	.word	0x2000873c
 800c13c:	2000875c 	.word	0x2000875c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c142:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	f040 80c6 	bne.w	800c2da <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c14e:	4b80      	ldr	r3, [pc, #512]	; (800c350 <tcp_receive+0xf18>)
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	f340 80bd 	ble.w	800c2da <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	899b      	ldrh	r3, [r3, #12]
 800c166:	b29b      	uxth	r3, r3
 800c168:	4618      	mov	r0, r3
 800c16a:	f7fa fa17 	bl	800659c <lwip_htons>
 800c16e:	4603      	mov	r3, r0
 800c170:	b2db      	uxtb	r3, r3
 800c172:	f003 0301 	and.w	r3, r3, #1
 800c176:	2b00      	cmp	r3, #0
 800c178:	f040 80bf 	bne.w	800c2fa <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c17c:	4875      	ldr	r0, [pc, #468]	; (800c354 <tcp_receive+0xf1c>)
 800c17e:	f7fd fa39 	bl	80095f4 <tcp_seg_copy>
 800c182:	4602      	mov	r2, r0
 800c184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c186:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	f000 80b6 	beq.w	800c2fe <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c194:	68db      	ldr	r3, [r3, #12]
 800c196:	685b      	ldr	r3, [r3, #4]
 800c198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c19a:	8912      	ldrh	r2, [r2, #8]
 800c19c:	441a      	add	r2, r3
 800c19e:	4b6c      	ldr	r3, [pc, #432]	; (800c350 <tcp_receive+0xf18>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	1ad3      	subs	r3, r2, r3
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	dd12      	ble.n	800c1ce <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c1a8:	4b69      	ldr	r3, [pc, #420]	; (800c350 <tcp_receive+0xf18>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	b29a      	uxth	r2, r3
 800c1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b0:	68db      	ldr	r3, [r3, #12]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	1ad3      	subs	r3, r2, r3
 800c1b8:	b29a      	uxth	r2, r3
 800c1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1bc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c0:	685a      	ldr	r2, [r3, #4]
 800c1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c4:	891b      	ldrh	r3, [r3, #8]
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	4610      	mov	r0, r2
 800c1ca:	f7fb fc29 	bl	8007a20 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c1ce:	4b62      	ldr	r3, [pc, #392]	; (800c358 <tcp_receive+0xf20>)
 800c1d0:	881b      	ldrh	r3, [r3, #0]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	4b5e      	ldr	r3, [pc, #376]	; (800c350 <tcp_receive+0xf18>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	441a      	add	r2, r3
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1de:	6879      	ldr	r1, [r7, #4]
 800c1e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c1e2:	440b      	add	r3, r1
 800c1e4:	1ad3      	subs	r3, r2, r3
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	f340 8089 	ble.w	800c2fe <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	899b      	ldrh	r3, [r3, #12]
 800c1f4:	b29b      	uxth	r3, r3
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fa f9d0 	bl	800659c <lwip_htons>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	f003 0301 	and.w	r3, r3, #1
 800c204:	2b00      	cmp	r3, #0
 800c206:	d022      	beq.n	800c24e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	899b      	ldrh	r3, [r3, #12]
 800c210:	b29b      	uxth	r3, r3
 800c212:	b21b      	sxth	r3, r3
 800c214:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c218:	b21c      	sxth	r4, r3
 800c21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	68db      	ldr	r3, [r3, #12]
 800c220:	899b      	ldrh	r3, [r3, #12]
 800c222:	b29b      	uxth	r3, r3
 800c224:	4618      	mov	r0, r3
 800c226:	f7fa f9b9 	bl	800659c <lwip_htons>
 800c22a:	4603      	mov	r3, r0
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	b29b      	uxth	r3, r3
 800c230:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c234:	b29b      	uxth	r3, r3
 800c236:	4618      	mov	r0, r3
 800c238:	f7fa f9b0 	bl	800659c <lwip_htons>
 800c23c:	4603      	mov	r3, r0
 800c23e:	b21b      	sxth	r3, r3
 800c240:	4323      	orrs	r3, r4
 800c242:	b21a      	sxth	r2, r3
 800c244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	b292      	uxth	r2, r2
 800c24c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c252:	b29a      	uxth	r2, r3
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c258:	4413      	add	r3, r2
 800c25a:	b299      	uxth	r1, r3
 800c25c:	4b3c      	ldr	r3, [pc, #240]	; (800c350 <tcp_receive+0xf18>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	b29a      	uxth	r2, r3
 800c262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	1a8a      	subs	r2, r1, r2
 800c268:	b292      	uxth	r2, r2
 800c26a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	685a      	ldr	r2, [r3, #4]
 800c272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	891b      	ldrh	r3, [r3, #8]
 800c278:	4619      	mov	r1, r3
 800c27a:	4610      	mov	r0, r2
 800c27c:	f7fb fbd0 	bl	8007a20 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	891c      	ldrh	r4, [r3, #8]
 800c286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	68db      	ldr	r3, [r3, #12]
 800c28c:	899b      	ldrh	r3, [r3, #12]
 800c28e:	b29b      	uxth	r3, r3
 800c290:	4618      	mov	r0, r3
 800c292:	f7fa f983 	bl	800659c <lwip_htons>
 800c296:	4603      	mov	r3, r0
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	f003 0303 	and.w	r3, r3, #3
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d001      	beq.n	800c2a6 <tcp_receive+0xe6e>
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	e000      	b.n	800c2a8 <tcp_receive+0xe70>
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	4423      	add	r3, r4
 800c2aa:	b29a      	uxth	r2, r3
 800c2ac:	4b2a      	ldr	r3, [pc, #168]	; (800c358 <tcp_receive+0xf20>)
 800c2ae:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c2b0:	4b29      	ldr	r3, [pc, #164]	; (800c358 <tcp_receive+0xf20>)
 800c2b2:	881b      	ldrh	r3, [r3, #0]
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	4b26      	ldr	r3, [pc, #152]	; (800c350 <tcp_receive+0xf18>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	441a      	add	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c0:	6879      	ldr	r1, [r7, #4]
 800c2c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c2c4:	440b      	add	r3, r1
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d019      	beq.n	800c2fe <tcp_receive+0xec6>
 800c2ca:	4b24      	ldr	r3, [pc, #144]	; (800c35c <tcp_receive+0xf24>)
 800c2cc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c2d0:	4923      	ldr	r1, [pc, #140]	; (800c360 <tcp_receive+0xf28>)
 800c2d2:	4824      	ldr	r0, [pc, #144]	; (800c364 <tcp_receive+0xf2c>)
 800c2d4:	f004 fe26 	bl	8010f24 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c2d8:	e011      	b.n	800c2fe <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	63bb      	str	r3, [r7, #56]	; 0x38
 800c2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	f47f aea4 	bne.w	800c030 <tcp_receive+0xbf8>
 800c2e8:	e00a      	b.n	800c300 <tcp_receive+0xec8>
                break;
 800c2ea:	bf00      	nop
 800c2ec:	e008      	b.n	800c300 <tcp_receive+0xec8>
                break;
 800c2ee:	bf00      	nop
 800c2f0:	e006      	b.n	800c300 <tcp_receive+0xec8>
                  break;
 800c2f2:	bf00      	nop
 800c2f4:	e004      	b.n	800c300 <tcp_receive+0xec8>
                  break;
 800c2f6:	bf00      	nop
 800c2f8:	e002      	b.n	800c300 <tcp_receive+0xec8>
                  break;
 800c2fa:	bf00      	nop
 800c2fc:	e000      	b.n	800c300 <tcp_receive+0xec8>
                break;
 800c2fe:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f001 fe8b 	bl	800e01c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c306:	e003      	b.n	800c310 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f001 fe87 	bl	800e01c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c30e:	e01a      	b.n	800c346 <tcp_receive+0xf0e>
 800c310:	e019      	b.n	800c346 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c312:	4b0f      	ldr	r3, [pc, #60]	; (800c350 <tcp_receive+0xf18>)
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c31a:	1ad3      	subs	r3, r2, r3
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	db0a      	blt.n	800c336 <tcp_receive+0xefe>
 800c320:	4b0b      	ldr	r3, [pc, #44]	; (800c350 <tcp_receive+0xf18>)
 800c322:	681a      	ldr	r2, [r3, #0]
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c328:	6879      	ldr	r1, [r7, #4]
 800c32a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c32c:	440b      	add	r3, r1
 800c32e:	1ad3      	subs	r3, r2, r3
 800c330:	3301      	adds	r3, #1
 800c332:	2b00      	cmp	r3, #0
 800c334:	dd07      	ble.n	800c346 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	8b5b      	ldrh	r3, [r3, #26]
 800c33a:	f043 0302 	orr.w	r3, r3, #2
 800c33e:	b29a      	uxth	r2, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c344:	e7ff      	b.n	800c346 <tcp_receive+0xf0e>
 800c346:	bf00      	nop
 800c348:	3750      	adds	r7, #80	; 0x50
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bdb0      	pop	{r4, r5, r7, pc}
 800c34e:	bf00      	nop
 800c350:	2000875c 	.word	0x2000875c
 800c354:	2000873c 	.word	0x2000873c
 800c358:	20008766 	.word	0x20008766
 800c35c:	080135b4 	.word	0x080135b4
 800c360:	0801395c 	.word	0x0801395c
 800c364:	08013600 	.word	0x08013600

0800c368 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c368:	b480      	push	{r7}
 800c36a:	b083      	sub	sp, #12
 800c36c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c36e:	4b15      	ldr	r3, [pc, #84]	; (800c3c4 <tcp_get_next_optbyte+0x5c>)
 800c370:	881b      	ldrh	r3, [r3, #0]
 800c372:	1c5a      	adds	r2, r3, #1
 800c374:	b291      	uxth	r1, r2
 800c376:	4a13      	ldr	r2, [pc, #76]	; (800c3c4 <tcp_get_next_optbyte+0x5c>)
 800c378:	8011      	strh	r1, [r2, #0]
 800c37a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c37c:	4b12      	ldr	r3, [pc, #72]	; (800c3c8 <tcp_get_next_optbyte+0x60>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d004      	beq.n	800c38e <tcp_get_next_optbyte+0x26>
 800c384:	4b11      	ldr	r3, [pc, #68]	; (800c3cc <tcp_get_next_optbyte+0x64>)
 800c386:	881b      	ldrh	r3, [r3, #0]
 800c388:	88fa      	ldrh	r2, [r7, #6]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d208      	bcs.n	800c3a0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c38e:	4b10      	ldr	r3, [pc, #64]	; (800c3d0 <tcp_get_next_optbyte+0x68>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	3314      	adds	r3, #20
 800c394:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c396:	88fb      	ldrh	r3, [r7, #6]
 800c398:	683a      	ldr	r2, [r7, #0]
 800c39a:	4413      	add	r3, r2
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	e00b      	b.n	800c3b8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c3a0:	88fb      	ldrh	r3, [r7, #6]
 800c3a2:	b2da      	uxtb	r2, r3
 800c3a4:	4b09      	ldr	r3, [pc, #36]	; (800c3cc <tcp_get_next_optbyte+0x64>)
 800c3a6:	881b      	ldrh	r3, [r3, #0]
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	1ad3      	subs	r3, r2, r3
 800c3ac:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c3ae:	4b06      	ldr	r3, [pc, #24]	; (800c3c8 <tcp_get_next_optbyte+0x60>)
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	797b      	ldrb	r3, [r7, #5]
 800c3b4:	4413      	add	r3, r2
 800c3b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	370c      	adds	r7, #12
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr
 800c3c4:	20008758 	.word	0x20008758
 800c3c8:	20008754 	.word	0x20008754
 800c3cc:	20008752 	.word	0x20008752
 800c3d0:	2000874c 	.word	0x2000874c

0800c3d4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d106      	bne.n	800c3f0 <tcp_parseopt+0x1c>
 800c3e2:	4b32      	ldr	r3, [pc, #200]	; (800c4ac <tcp_parseopt+0xd8>)
 800c3e4:	f240 727d 	movw	r2, #1917	; 0x77d
 800c3e8:	4931      	ldr	r1, [pc, #196]	; (800c4b0 <tcp_parseopt+0xdc>)
 800c3ea:	4832      	ldr	r0, [pc, #200]	; (800c4b4 <tcp_parseopt+0xe0>)
 800c3ec:	f004 fd9a 	bl	8010f24 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c3f0:	4b31      	ldr	r3, [pc, #196]	; (800c4b8 <tcp_parseopt+0xe4>)
 800c3f2:	881b      	ldrh	r3, [r3, #0]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d055      	beq.n	800c4a4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c3f8:	4b30      	ldr	r3, [pc, #192]	; (800c4bc <tcp_parseopt+0xe8>)
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	801a      	strh	r2, [r3, #0]
 800c3fe:	e045      	b.n	800c48c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800c400:	f7ff ffb2 	bl	800c368 <tcp_get_next_optbyte>
 800c404:	4603      	mov	r3, r0
 800c406:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c408:	7bfb      	ldrb	r3, [r7, #15]
 800c40a:	2b02      	cmp	r3, #2
 800c40c:	d006      	beq.n	800c41c <tcp_parseopt+0x48>
 800c40e:	2b02      	cmp	r3, #2
 800c410:	dc2b      	bgt.n	800c46a <tcp_parseopt+0x96>
 800c412:	2b00      	cmp	r3, #0
 800c414:	d041      	beq.n	800c49a <tcp_parseopt+0xc6>
 800c416:	2b01      	cmp	r3, #1
 800c418:	d127      	bne.n	800c46a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800c41a:	e037      	b.n	800c48c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c41c:	f7ff ffa4 	bl	800c368 <tcp_get_next_optbyte>
 800c420:	4603      	mov	r3, r0
 800c422:	2b04      	cmp	r3, #4
 800c424:	d13b      	bne.n	800c49e <tcp_parseopt+0xca>
 800c426:	4b25      	ldr	r3, [pc, #148]	; (800c4bc <tcp_parseopt+0xe8>)
 800c428:	881b      	ldrh	r3, [r3, #0]
 800c42a:	3301      	adds	r3, #1
 800c42c:	4a22      	ldr	r2, [pc, #136]	; (800c4b8 <tcp_parseopt+0xe4>)
 800c42e:	8812      	ldrh	r2, [r2, #0]
 800c430:	4293      	cmp	r3, r2
 800c432:	da34      	bge.n	800c49e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c434:	f7ff ff98 	bl	800c368 <tcp_get_next_optbyte>
 800c438:	4603      	mov	r3, r0
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	021b      	lsls	r3, r3, #8
 800c43e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c440:	f7ff ff92 	bl	800c368 <tcp_get_next_optbyte>
 800c444:	4603      	mov	r3, r0
 800c446:	b29a      	uxth	r2, r3
 800c448:	89bb      	ldrh	r3, [r7, #12]
 800c44a:	4313      	orrs	r3, r2
 800c44c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c44e:	89bb      	ldrh	r3, [r7, #12]
 800c450:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c454:	d804      	bhi.n	800c460 <tcp_parseopt+0x8c>
 800c456:	89bb      	ldrh	r3, [r7, #12]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d001      	beq.n	800c460 <tcp_parseopt+0x8c>
 800c45c:	89ba      	ldrh	r2, [r7, #12]
 800c45e:	e001      	b.n	800c464 <tcp_parseopt+0x90>
 800c460:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800c468:	e010      	b.n	800c48c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c46a:	f7ff ff7d 	bl	800c368 <tcp_get_next_optbyte>
 800c46e:	4603      	mov	r3, r0
 800c470:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c472:	7afb      	ldrb	r3, [r7, #11]
 800c474:	2b01      	cmp	r3, #1
 800c476:	d914      	bls.n	800c4a2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c478:	7afb      	ldrb	r3, [r7, #11]
 800c47a:	b29a      	uxth	r2, r3
 800c47c:	4b0f      	ldr	r3, [pc, #60]	; (800c4bc <tcp_parseopt+0xe8>)
 800c47e:	881b      	ldrh	r3, [r3, #0]
 800c480:	4413      	add	r3, r2
 800c482:	b29b      	uxth	r3, r3
 800c484:	3b02      	subs	r3, #2
 800c486:	b29a      	uxth	r2, r3
 800c488:	4b0c      	ldr	r3, [pc, #48]	; (800c4bc <tcp_parseopt+0xe8>)
 800c48a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c48c:	4b0b      	ldr	r3, [pc, #44]	; (800c4bc <tcp_parseopt+0xe8>)
 800c48e:	881a      	ldrh	r2, [r3, #0]
 800c490:	4b09      	ldr	r3, [pc, #36]	; (800c4b8 <tcp_parseopt+0xe4>)
 800c492:	881b      	ldrh	r3, [r3, #0]
 800c494:	429a      	cmp	r2, r3
 800c496:	d3b3      	bcc.n	800c400 <tcp_parseopt+0x2c>
 800c498:	e004      	b.n	800c4a4 <tcp_parseopt+0xd0>
          return;
 800c49a:	bf00      	nop
 800c49c:	e002      	b.n	800c4a4 <tcp_parseopt+0xd0>
            return;
 800c49e:	bf00      	nop
 800c4a0:	e000      	b.n	800c4a4 <tcp_parseopt+0xd0>
            return;
 800c4a2:	bf00      	nop
      }
    }
  }
}
 800c4a4:	3710      	adds	r7, #16
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	080135b4 	.word	0x080135b4
 800c4b0:	08013a18 	.word	0x08013a18
 800c4b4:	08013600 	.word	0x08013600
 800c4b8:	20008750 	.word	0x20008750
 800c4bc:	20008758 	.word	0x20008758

0800c4c0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c4c4:	4b05      	ldr	r3, [pc, #20]	; (800c4dc <tcp_trigger_input_pcb_close+0x1c>)
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	f043 0310 	orr.w	r3, r3, #16
 800c4cc:	b2da      	uxtb	r2, r3
 800c4ce:	4b03      	ldr	r3, [pc, #12]	; (800c4dc <tcp_trigger_input_pcb_close+0x1c>)
 800c4d0:	701a      	strb	r2, [r3, #0]
}
 800c4d2:	bf00      	nop
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr
 800c4dc:	20008769 	.word	0x20008769

0800c4e0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d00a      	beq.n	800c508 <tcp_route+0x28>
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	7a1b      	ldrb	r3, [r3, #8]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d006      	beq.n	800c508 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	7a1b      	ldrb	r3, [r3, #8]
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7fb f8b4 	bl	800766c <netif_get_by_index>
 800c504:	4603      	mov	r3, r0
 800c506:	e003      	b.n	800c510 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f003 fad5 	bl	800fab8 <ip4_route>
 800c50e:	4603      	mov	r3, r0
  }
}
 800c510:	4618      	mov	r0, r3
 800c512:	3710      	adds	r7, #16
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c518:	b590      	push	{r4, r7, lr}
 800c51a:	b087      	sub	sp, #28
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	603b      	str	r3, [r7, #0]
 800c524:	4613      	mov	r3, r2
 800c526:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d105      	bne.n	800c53a <tcp_create_segment+0x22>
 800c52e:	4b44      	ldr	r3, [pc, #272]	; (800c640 <tcp_create_segment+0x128>)
 800c530:	22a3      	movs	r2, #163	; 0xa3
 800c532:	4944      	ldr	r1, [pc, #272]	; (800c644 <tcp_create_segment+0x12c>)
 800c534:	4844      	ldr	r0, [pc, #272]	; (800c648 <tcp_create_segment+0x130>)
 800c536:	f004 fcf5 	bl	8010f24 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d105      	bne.n	800c54c <tcp_create_segment+0x34>
 800c540:	4b3f      	ldr	r3, [pc, #252]	; (800c640 <tcp_create_segment+0x128>)
 800c542:	22a4      	movs	r2, #164	; 0xa4
 800c544:	4941      	ldr	r1, [pc, #260]	; (800c64c <tcp_create_segment+0x134>)
 800c546:	4840      	ldr	r0, [pc, #256]	; (800c648 <tcp_create_segment+0x130>)
 800c548:	f004 fcec 	bl	8010f24 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c54c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c550:	009b      	lsls	r3, r3, #2
 800c552:	b2db      	uxtb	r3, r3
 800c554:	f003 0304 	and.w	r3, r3, #4
 800c558:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c55a:	2003      	movs	r0, #3
 800c55c:	f7fa fd00 	bl	8006f60 <memp_malloc>
 800c560:	6138      	str	r0, [r7, #16]
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d104      	bne.n	800c572 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c568:	68b8      	ldr	r0, [r7, #8]
 800c56a:	f7fb fbdf 	bl	8007d2c <pbuf_free>
    return NULL;
 800c56e:	2300      	movs	r3, #0
 800c570:	e061      	b.n	800c636 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c578:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	2200      	movs	r2, #0
 800c57e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	68ba      	ldr	r2, [r7, #8]
 800c584:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	891a      	ldrh	r2, [r3, #8]
 800c58a:	7dfb      	ldrb	r3, [r7, #23]
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	429a      	cmp	r2, r3
 800c590:	d205      	bcs.n	800c59e <tcp_create_segment+0x86>
 800c592:	4b2b      	ldr	r3, [pc, #172]	; (800c640 <tcp_create_segment+0x128>)
 800c594:	22b0      	movs	r2, #176	; 0xb0
 800c596:	492e      	ldr	r1, [pc, #184]	; (800c650 <tcp_create_segment+0x138>)
 800c598:	482b      	ldr	r0, [pc, #172]	; (800c648 <tcp_create_segment+0x130>)
 800c59a:	f004 fcc3 	bl	8010f24 <iprintf>
  seg->len = p->tot_len - optlen;
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	891a      	ldrh	r2, [r3, #8]
 800c5a2:	7dfb      	ldrb	r3, [r7, #23]
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	1ad3      	subs	r3, r2, r3
 800c5a8:	b29a      	uxth	r2, r3
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c5ae:	2114      	movs	r1, #20
 800c5b0:	68b8      	ldr	r0, [r7, #8]
 800c5b2:	f7fb fb25 	bl	8007c00 <pbuf_add_header>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d004      	beq.n	800c5c6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c5bc:	6938      	ldr	r0, [r7, #16]
 800c5be:	f7fc ffe2 	bl	8009586 <tcp_seg_free>
    return NULL;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	e037      	b.n	800c636 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	685a      	ldr	r2, [r3, #4]
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	8ada      	ldrh	r2, [r3, #22]
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	68dc      	ldr	r4, [r3, #12]
 800c5d8:	4610      	mov	r0, r2
 800c5da:	f7f9 ffdf 	bl	800659c <lwip_htons>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	8b1a      	ldrh	r2, [r3, #24]
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	68dc      	ldr	r4, [r3, #12]
 800c5ea:	4610      	mov	r0, r2
 800c5ec:	f7f9 ffd6 	bl	800659c <lwip_htons>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	68dc      	ldr	r4, [r3, #12]
 800c5f8:	6838      	ldr	r0, [r7, #0]
 800c5fa:	f7f9 ffe4 	bl	80065c6 <lwip_htonl>
 800c5fe:	4603      	mov	r3, r0
 800c600:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c602:	7dfb      	ldrb	r3, [r7, #23]
 800c604:	089b      	lsrs	r3, r3, #2
 800c606:	b2db      	uxtb	r3, r3
 800c608:	b29b      	uxth	r3, r3
 800c60a:	3305      	adds	r3, #5
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	031b      	lsls	r3, r3, #12
 800c610:	b29a      	uxth	r2, r3
 800c612:	79fb      	ldrb	r3, [r7, #7]
 800c614:	b29b      	uxth	r3, r3
 800c616:	4313      	orrs	r3, r2
 800c618:	b29a      	uxth	r2, r3
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	68dc      	ldr	r4, [r3, #12]
 800c61e:	4610      	mov	r0, r2
 800c620:	f7f9 ffbc 	bl	800659c <lwip_htons>
 800c624:	4603      	mov	r3, r0
 800c626:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	2200      	movs	r2, #0
 800c62e:	749a      	strb	r2, [r3, #18]
 800c630:	2200      	movs	r2, #0
 800c632:	74da      	strb	r2, [r3, #19]
  return seg;
 800c634:	693b      	ldr	r3, [r7, #16]
}
 800c636:	4618      	mov	r0, r3
 800c638:	371c      	adds	r7, #28
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd90      	pop	{r4, r7, pc}
 800c63e:	bf00      	nop
 800c640:	08013a34 	.word	0x08013a34
 800c644:	08013a68 	.word	0x08013a68
 800c648:	08013a88 	.word	0x08013a88
 800c64c:	08013ab0 	.word	0x08013ab0
 800c650:	08013ad4 	.word	0x08013ad4

0800c654 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b086      	sub	sp, #24
 800c658:	af00      	add	r7, sp, #0
 800c65a:	607b      	str	r3, [r7, #4]
 800c65c:	4603      	mov	r3, r0
 800c65e:	73fb      	strb	r3, [r7, #15]
 800c660:	460b      	mov	r3, r1
 800c662:	81bb      	strh	r3, [r7, #12]
 800c664:	4613      	mov	r3, r2
 800c666:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800c668:	89bb      	ldrh	r3, [r7, #12]
 800c66a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d105      	bne.n	800c67e <tcp_pbuf_prealloc+0x2a>
 800c672:	4b30      	ldr	r3, [pc, #192]	; (800c734 <tcp_pbuf_prealloc+0xe0>)
 800c674:	22e8      	movs	r2, #232	; 0xe8
 800c676:	4930      	ldr	r1, [pc, #192]	; (800c738 <tcp_pbuf_prealloc+0xe4>)
 800c678:	4830      	ldr	r0, [pc, #192]	; (800c73c <tcp_pbuf_prealloc+0xe8>)
 800c67a:	f004 fc53 	bl	8010f24 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c67e:	6a3b      	ldr	r3, [r7, #32]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d105      	bne.n	800c690 <tcp_pbuf_prealloc+0x3c>
 800c684:	4b2b      	ldr	r3, [pc, #172]	; (800c734 <tcp_pbuf_prealloc+0xe0>)
 800c686:	22e9      	movs	r2, #233	; 0xe9
 800c688:	492d      	ldr	r1, [pc, #180]	; (800c740 <tcp_pbuf_prealloc+0xec>)
 800c68a:	482c      	ldr	r0, [pc, #176]	; (800c73c <tcp_pbuf_prealloc+0xe8>)
 800c68c:	f004 fc4a 	bl	8010f24 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800c690:	89ba      	ldrh	r2, [r7, #12]
 800c692:	897b      	ldrh	r3, [r7, #10]
 800c694:	429a      	cmp	r2, r3
 800c696:	d221      	bcs.n	800c6dc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c698:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c69c:	f003 0302 	and.w	r3, r3, #2
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d111      	bne.n	800c6c8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800c6a4:	6a3b      	ldr	r3, [r7, #32]
 800c6a6:	8b5b      	ldrh	r3, [r3, #26]
 800c6a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d115      	bne.n	800c6dc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800c6b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d007      	beq.n	800c6c8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800c6b8:	6a3b      	ldr	r3, [r7, #32]
 800c6ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d103      	bne.n	800c6c8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800c6c0:	6a3b      	ldr	r3, [r7, #32]
 800c6c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d009      	beq.n	800c6dc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c6c8:	89bb      	ldrh	r3, [r7, #12]
 800c6ca:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800c6ce:	f023 0203 	bic.w	r2, r3, #3
 800c6d2:	897b      	ldrh	r3, [r7, #10]
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	bf28      	it	cs
 800c6d8:	4613      	movcs	r3, r2
 800c6da:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c6dc:	8af9      	ldrh	r1, [r7, #22]
 800c6de:	7bfb      	ldrb	r3, [r7, #15]
 800c6e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f7fb f83d 	bl	8007764 <pbuf_alloc>
 800c6ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d101      	bne.n	800c6f6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	e019      	b.n	800c72a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d006      	beq.n	800c70c <tcp_pbuf_prealloc+0xb8>
 800c6fe:	4b0d      	ldr	r3, [pc, #52]	; (800c734 <tcp_pbuf_prealloc+0xe0>)
 800c700:	f240 120b 	movw	r2, #267	; 0x10b
 800c704:	490f      	ldr	r1, [pc, #60]	; (800c744 <tcp_pbuf_prealloc+0xf0>)
 800c706:	480d      	ldr	r0, [pc, #52]	; (800c73c <tcp_pbuf_prealloc+0xe8>)
 800c708:	f004 fc0c 	bl	8010f24 <iprintf>
  *oversize = p->len - length;
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	895a      	ldrh	r2, [r3, #10]
 800c710:	89bb      	ldrh	r3, [r7, #12]
 800c712:	1ad3      	subs	r3, r2, r3
 800c714:	b29a      	uxth	r2, r3
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	89ba      	ldrh	r2, [r7, #12]
 800c71e:	811a      	strh	r2, [r3, #8]
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	891a      	ldrh	r2, [r3, #8]
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	815a      	strh	r2, [r3, #10]
  return p;
 800c728:	693b      	ldr	r3, [r7, #16]
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3718      	adds	r7, #24
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	08013a34 	.word	0x08013a34
 800c738:	08013aec 	.word	0x08013aec
 800c73c:	08013a88 	.word	0x08013a88
 800c740:	08013b10 	.word	0x08013b10
 800c744:	08013b30 	.word	0x08013b30

0800c748 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	460b      	mov	r3, r1
 800c752:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d106      	bne.n	800c768 <tcp_write_checks+0x20>
 800c75a:	4b33      	ldr	r3, [pc, #204]	; (800c828 <tcp_write_checks+0xe0>)
 800c75c:	f240 1233 	movw	r2, #307	; 0x133
 800c760:	4932      	ldr	r1, [pc, #200]	; (800c82c <tcp_write_checks+0xe4>)
 800c762:	4833      	ldr	r0, [pc, #204]	; (800c830 <tcp_write_checks+0xe8>)
 800c764:	f004 fbde 	bl	8010f24 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	7d1b      	ldrb	r3, [r3, #20]
 800c76c:	2b04      	cmp	r3, #4
 800c76e:	d00e      	beq.n	800c78e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800c774:	2b07      	cmp	r3, #7
 800c776:	d00a      	beq.n	800c78e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800c77c:	2b02      	cmp	r3, #2
 800c77e:	d006      	beq.n	800c78e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800c784:	2b03      	cmp	r3, #3
 800c786:	d002      	beq.n	800c78e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800c788:	f06f 030a 	mvn.w	r3, #10
 800c78c:	e048      	b.n	800c820 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800c78e:	887b      	ldrh	r3, [r7, #2]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d101      	bne.n	800c798 <tcp_write_checks+0x50>
    return ERR_OK;
 800c794:	2300      	movs	r3, #0
 800c796:	e043      	b.n	800c820 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c79e:	887a      	ldrh	r2, [r7, #2]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d909      	bls.n	800c7b8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	8b5b      	ldrh	r3, [r3, #26]
 800c7a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7ac:	b29a      	uxth	r2, r3
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c7b2:	f04f 33ff 	mov.w	r3, #4294967295
 800c7b6:	e033      	b.n	800c820 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c7be:	2b08      	cmp	r3, #8
 800c7c0:	d909      	bls.n	800c7d6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	8b5b      	ldrh	r3, [r3, #26]
 800c7c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7ca:	b29a      	uxth	r2, r3
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c7d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c7d4:	e024      	b.n	800c820 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d00f      	beq.n	800c800 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d11a      	bne.n	800c81e <tcp_write_checks+0xd6>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d116      	bne.n	800c81e <tcp_write_checks+0xd6>
 800c7f0:	4b0d      	ldr	r3, [pc, #52]	; (800c828 <tcp_write_checks+0xe0>)
 800c7f2:	f240 1255 	movw	r2, #341	; 0x155
 800c7f6:	490f      	ldr	r1, [pc, #60]	; (800c834 <tcp_write_checks+0xec>)
 800c7f8:	480d      	ldr	r0, [pc, #52]	; (800c830 <tcp_write_checks+0xe8>)
 800c7fa:	f004 fb93 	bl	8010f24 <iprintf>
 800c7fe:	e00e      	b.n	800c81e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c804:	2b00      	cmp	r3, #0
 800c806:	d103      	bne.n	800c810 <tcp_write_checks+0xc8>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d006      	beq.n	800c81e <tcp_write_checks+0xd6>
 800c810:	4b05      	ldr	r3, [pc, #20]	; (800c828 <tcp_write_checks+0xe0>)
 800c812:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800c816:	4908      	ldr	r1, [pc, #32]	; (800c838 <tcp_write_checks+0xf0>)
 800c818:	4805      	ldr	r0, [pc, #20]	; (800c830 <tcp_write_checks+0xe8>)
 800c81a:	f004 fb83 	bl	8010f24 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800c81e:	2300      	movs	r3, #0
}
 800c820:	4618      	mov	r0, r3
 800c822:	3708      	adds	r7, #8
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}
 800c828:	08013a34 	.word	0x08013a34
 800c82c:	08013b44 	.word	0x08013b44
 800c830:	08013a88 	.word	0x08013a88
 800c834:	08013b64 	.word	0x08013b64
 800c838:	08013ba0 	.word	0x08013ba0

0800c83c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800c83c:	b590      	push	{r4, r7, lr}
 800c83e:	b09b      	sub	sp, #108	; 0x6c
 800c840:	af04      	add	r7, sp, #16
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	4611      	mov	r1, r2
 800c848:	461a      	mov	r2, r3
 800c84a:	460b      	mov	r3, r1
 800c84c:	80fb      	strh	r3, [r7, #6]
 800c84e:	4613      	mov	r3, r2
 800c850:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800c852:	2300      	movs	r3, #0
 800c854:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c856:	2300      	movs	r3, #0
 800c858:	653b      	str	r3, [r7, #80]	; 0x50
 800c85a:	2300      	movs	r3, #0
 800c85c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c85e:	2300      	movs	r3, #0
 800c860:	64bb      	str	r3, [r7, #72]	; 0x48
 800c862:	2300      	movs	r3, #0
 800c864:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800c866:	2300      	movs	r3, #0
 800c868:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800c86c:	2300      	movs	r3, #0
 800c86e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800c872:	2300      	movs	r3, #0
 800c874:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800c876:	2300      	movs	r3, #0
 800c878:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800c87a:	2300      	movs	r3, #0
 800c87c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d109      	bne.n	800c898 <tcp_write+0x5c>
 800c884:	4ba4      	ldr	r3, [pc, #656]	; (800cb18 <tcp_write+0x2dc>)
 800c886:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800c88a:	49a4      	ldr	r1, [pc, #656]	; (800cb1c <tcp_write+0x2e0>)
 800c88c:	48a4      	ldr	r0, [pc, #656]	; (800cb20 <tcp_write+0x2e4>)
 800c88e:	f004 fb49 	bl	8010f24 <iprintf>
 800c892:	f06f 030f 	mvn.w	r3, #15
 800c896:	e32a      	b.n	800ceee <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c89e:	085b      	lsrs	r3, r3, #1
 800c8a0:	b29a      	uxth	r2, r3
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	bf28      	it	cs
 800c8aa:	4613      	movcs	r3, r2
 800c8ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800c8ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d102      	bne.n	800c8ba <tcp_write+0x7e>
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8b8:	e000      	b.n	800c8bc <tcp_write+0x80>
 800c8ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c8bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d109      	bne.n	800c8d8 <tcp_write+0x9c>
 800c8c4:	4b94      	ldr	r3, [pc, #592]	; (800cb18 <tcp_write+0x2dc>)
 800c8c6:	f240 12ad 	movw	r2, #429	; 0x1ad
 800c8ca:	4996      	ldr	r1, [pc, #600]	; (800cb24 <tcp_write+0x2e8>)
 800c8cc:	4894      	ldr	r0, [pc, #592]	; (800cb20 <tcp_write+0x2e4>)
 800c8ce:	f004 fb29 	bl	8010f24 <iprintf>
 800c8d2:	f06f 030f 	mvn.w	r3, #15
 800c8d6:	e30a      	b.n	800ceee <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800c8d8:	88fb      	ldrh	r3, [r7, #6]
 800c8da:	4619      	mov	r1, r3
 800c8dc:	68f8      	ldr	r0, [r7, #12]
 800c8de:	f7ff ff33 	bl	800c748 <tcp_write_checks>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800c8e8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d002      	beq.n	800c8f6 <tcp_write+0xba>
    return err;
 800c8f0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c8f4:	e2fb      	b.n	800ceee <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c8fc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c900:	2300      	movs	r3, #0
 800c902:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	f000 80f6 	beq.w	800cafc <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c914:	653b      	str	r3, [r7, #80]	; 0x50
 800c916:	e002      	b.n	800c91e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800c918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c91e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d1f8      	bne.n	800c918 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c928:	7a9b      	ldrb	r3, [r3, #10]
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	f003 0304 	and.w	r3, r3, #4
 800c932:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c934:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c938:	891b      	ldrh	r3, [r3, #8]
 800c93a:	4619      	mov	r1, r3
 800c93c:	8c3b      	ldrh	r3, [r7, #32]
 800c93e:	440b      	add	r3, r1
 800c940:	429a      	cmp	r2, r3
 800c942:	da06      	bge.n	800c952 <tcp_write+0x116>
 800c944:	4b74      	ldr	r3, [pc, #464]	; (800cb18 <tcp_write+0x2dc>)
 800c946:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c94a:	4977      	ldr	r1, [pc, #476]	; (800cb28 <tcp_write+0x2ec>)
 800c94c:	4874      	ldr	r0, [pc, #464]	; (800cb20 <tcp_write+0x2e4>)
 800c94e:	f004 fae9 	bl	8010f24 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c954:	891a      	ldrh	r2, [r3, #8]
 800c956:	8c3b      	ldrh	r3, [r7, #32]
 800c958:	4413      	add	r3, r2
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c95e:	1ad3      	subs	r3, r2, r3
 800c960:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c968:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800c96a:	8a7b      	ldrh	r3, [r7, #18]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d026      	beq.n	800c9be <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c970:	8a7b      	ldrh	r3, [r7, #18]
 800c972:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c974:	429a      	cmp	r2, r3
 800c976:	d206      	bcs.n	800c986 <tcp_write+0x14a>
 800c978:	4b67      	ldr	r3, [pc, #412]	; (800cb18 <tcp_write+0x2dc>)
 800c97a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800c97e:	496b      	ldr	r1, [pc, #428]	; (800cb2c <tcp_write+0x2f0>)
 800c980:	4867      	ldr	r0, [pc, #412]	; (800cb20 <tcp_write+0x2e4>)
 800c982:	f004 facf 	bl	8010f24 <iprintf>
      seg = last_unsent;
 800c986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c988:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c98a:	8a7b      	ldrh	r3, [r7, #18]
 800c98c:	88fa      	ldrh	r2, [r7, #6]
 800c98e:	4293      	cmp	r3, r2
 800c990:	bf28      	it	cs
 800c992:	4613      	movcs	r3, r2
 800c994:	b29b      	uxth	r3, r3
 800c996:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c998:	4293      	cmp	r3, r2
 800c99a:	bf28      	it	cs
 800c99c:	4613      	movcs	r3, r2
 800c99e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800c9a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c9a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c9a6:	4413      	add	r3, r2
 800c9a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800c9ac:	8a7a      	ldrh	r2, [r7, #18]
 800c9ae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c9b0:	1ad3      	subs	r3, r2, r3
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800c9b6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c9b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c9ba:	1ad3      	subs	r3, r2, r3
 800c9bc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c9be:	8a7b      	ldrh	r3, [r7, #18]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d00b      	beq.n	800c9dc <tcp_write+0x1a0>
 800c9c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c9c8:	88fb      	ldrh	r3, [r7, #6]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d006      	beq.n	800c9dc <tcp_write+0x1a0>
 800c9ce:	4b52      	ldr	r3, [pc, #328]	; (800cb18 <tcp_write+0x2dc>)
 800c9d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9d4:	4956      	ldr	r1, [pc, #344]	; (800cb30 <tcp_write+0x2f4>)
 800c9d6:	4852      	ldr	r0, [pc, #328]	; (800cb20 <tcp_write+0x2e4>)
 800c9d8:	f004 faa4 	bl	8010f24 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c9dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c9e0:	88fb      	ldrh	r3, [r7, #6]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	f080 8167 	bcs.w	800ccb6 <tcp_write+0x47a>
 800c9e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	f000 8163 	beq.w	800ccb6 <tcp_write+0x47a>
 800c9f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9f2:	891b      	ldrh	r3, [r3, #8]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	f000 815e 	beq.w	800ccb6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c9fa:	88fa      	ldrh	r2, [r7, #6]
 800c9fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ca00:	1ad2      	subs	r2, r2, r3
 800ca02:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ca04:	4293      	cmp	r3, r2
 800ca06:	bfa8      	it	ge
 800ca08:	4613      	movge	r3, r2
 800ca0a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800ca0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca0e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ca10:	797b      	ldrb	r3, [r7, #5]
 800ca12:	f003 0301 	and.w	r3, r3, #1
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d027      	beq.n	800ca6a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800ca1a:	f107 0012 	add.w	r0, r7, #18
 800ca1e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ca20:	8bf9      	ldrh	r1, [r7, #30]
 800ca22:	2301      	movs	r3, #1
 800ca24:	9302      	str	r3, [sp, #8]
 800ca26:	797b      	ldrb	r3, [r7, #5]
 800ca28:	9301      	str	r3, [sp, #4]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	9300      	str	r3, [sp, #0]
 800ca2e:	4603      	mov	r3, r0
 800ca30:	2000      	movs	r0, #0
 800ca32:	f7ff fe0f 	bl	800c654 <tcp_pbuf_prealloc>
 800ca36:	6578      	str	r0, [r7, #84]	; 0x54
 800ca38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	f000 8225 	beq.w	800ce8a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800ca40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca42:	6858      	ldr	r0, [r3, #4]
 800ca44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ca48:	68ba      	ldr	r2, [r7, #8]
 800ca4a:	4413      	add	r3, r2
 800ca4c:	8bfa      	ldrh	r2, [r7, #30]
 800ca4e:	4619      	mov	r1, r3
 800ca50:	f004 fa52 	bl	8010ef8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800ca54:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ca56:	f7fb f9f1 	bl	8007e3c <pbuf_clen>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ca62:	4413      	add	r3, r2
 800ca64:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ca68:	e041      	b.n	800caee <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800ca6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	637b      	str	r3, [r7, #52]	; 0x34
 800ca70:	e002      	b.n	800ca78 <tcp_write+0x23c>
 800ca72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	637b      	str	r3, [r7, #52]	; 0x34
 800ca78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d1f8      	bne.n	800ca72 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ca80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca82:	7b1b      	ldrb	r3, [r3, #12]
 800ca84:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d115      	bne.n	800cab8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800ca8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca92:	8952      	ldrh	r2, [r2, #10]
 800ca94:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ca96:	68ba      	ldr	r2, [r7, #8]
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d10d      	bne.n	800cab8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800ca9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d006      	beq.n	800cab2 <tcp_write+0x276>
 800caa4:	4b1c      	ldr	r3, [pc, #112]	; (800cb18 <tcp_write+0x2dc>)
 800caa6:	f240 2231 	movw	r2, #561	; 0x231
 800caaa:	4922      	ldr	r1, [pc, #136]	; (800cb34 <tcp_write+0x2f8>)
 800caac:	481c      	ldr	r0, [pc, #112]	; (800cb20 <tcp_write+0x2e4>)
 800caae:	f004 fa39 	bl	8010f24 <iprintf>
          extendlen = seglen;
 800cab2:	8bfb      	ldrh	r3, [r7, #30]
 800cab4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800cab6:	e01a      	b.n	800caee <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800cab8:	8bfb      	ldrh	r3, [r7, #30]
 800caba:	2201      	movs	r2, #1
 800cabc:	4619      	mov	r1, r3
 800cabe:	2000      	movs	r0, #0
 800cac0:	f7fa fe50 	bl	8007764 <pbuf_alloc>
 800cac4:	6578      	str	r0, [r7, #84]	; 0x54
 800cac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cac8:	2b00      	cmp	r3, #0
 800caca:	f000 81e0 	beq.w	800ce8e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800cace:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cad2:	68ba      	ldr	r2, [r7, #8]
 800cad4:	441a      	add	r2, r3
 800cad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cad8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800cada:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cadc:	f7fb f9ae 	bl	8007e3c <pbuf_clen>
 800cae0:	4603      	mov	r3, r0
 800cae2:	461a      	mov	r2, r3
 800cae4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cae8:	4413      	add	r3, r2
 800caea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800caee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800caf2:	8bfb      	ldrh	r3, [r7, #30]
 800caf4:	4413      	add	r3, r2
 800caf6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800cafa:	e0dc      	b.n	800ccb6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	f000 80d7 	beq.w	800ccb6 <tcp_write+0x47a>
 800cb08:	4b03      	ldr	r3, [pc, #12]	; (800cb18 <tcp_write+0x2dc>)
 800cb0a:	f240 224a 	movw	r2, #586	; 0x24a
 800cb0e:	490a      	ldr	r1, [pc, #40]	; (800cb38 <tcp_write+0x2fc>)
 800cb10:	4803      	ldr	r0, [pc, #12]	; (800cb20 <tcp_write+0x2e4>)
 800cb12:	f004 fa07 	bl	8010f24 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800cb16:	e0ce      	b.n	800ccb6 <tcp_write+0x47a>
 800cb18:	08013a34 	.word	0x08013a34
 800cb1c:	08013bd4 	.word	0x08013bd4
 800cb20:	08013a88 	.word	0x08013a88
 800cb24:	08013bec 	.word	0x08013bec
 800cb28:	08013c20 	.word	0x08013c20
 800cb2c:	08013c38 	.word	0x08013c38
 800cb30:	08013c58 	.word	0x08013c58
 800cb34:	08013c78 	.word	0x08013c78
 800cb38:	08013ca4 	.word	0x08013ca4
    struct pbuf *p;
    u16_t left = len - pos;
 800cb3c:	88fa      	ldrh	r2, [r7, #6]
 800cb3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cb42:	1ad3      	subs	r3, r2, r3
 800cb44:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800cb46:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cb4e:	1ad3      	subs	r3, r2, r3
 800cb50:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800cb52:	8b7a      	ldrh	r2, [r7, #26]
 800cb54:	8bbb      	ldrh	r3, [r7, #28]
 800cb56:	4293      	cmp	r3, r2
 800cb58:	bf28      	it	cs
 800cb5a:	4613      	movcs	r3, r2
 800cb5c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cb5e:	797b      	ldrb	r3, [r7, #5]
 800cb60:	f003 0301 	and.w	r3, r3, #1
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d036      	beq.n	800cbd6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800cb68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cb6c:	b29a      	uxth	r2, r3
 800cb6e:	8b3b      	ldrh	r3, [r7, #24]
 800cb70:	4413      	add	r3, r2
 800cb72:	b299      	uxth	r1, r3
 800cb74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	bf0c      	ite	eq
 800cb7a:	2301      	moveq	r3, #1
 800cb7c:	2300      	movne	r3, #0
 800cb7e:	b2db      	uxtb	r3, r3
 800cb80:	f107 0012 	add.w	r0, r7, #18
 800cb84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cb86:	9302      	str	r3, [sp, #8]
 800cb88:	797b      	ldrb	r3, [r7, #5]
 800cb8a:	9301      	str	r3, [sp, #4]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	4603      	mov	r3, r0
 800cb92:	2036      	movs	r0, #54	; 0x36
 800cb94:	f7ff fd5e 	bl	800c654 <tcp_pbuf_prealloc>
 800cb98:	6338      	str	r0, [r7, #48]	; 0x30
 800cb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f000 8178 	beq.w	800ce92 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800cba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba4:	895b      	ldrh	r3, [r3, #10]
 800cba6:	8b3a      	ldrh	r2, [r7, #24]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d906      	bls.n	800cbba <tcp_write+0x37e>
 800cbac:	4b8c      	ldr	r3, [pc, #560]	; (800cde0 <tcp_write+0x5a4>)
 800cbae:	f240 2266 	movw	r2, #614	; 0x266
 800cbb2:	498c      	ldr	r1, [pc, #560]	; (800cde4 <tcp_write+0x5a8>)
 800cbb4:	488c      	ldr	r0, [pc, #560]	; (800cde8 <tcp_write+0x5ac>)
 800cbb6:	f004 f9b5 	bl	8010f24 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800cbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbbc:	685a      	ldr	r2, [r3, #4]
 800cbbe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cbc2:	18d0      	adds	r0, r2, r3
 800cbc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cbc8:	68ba      	ldr	r2, [r7, #8]
 800cbca:	4413      	add	r3, r2
 800cbcc:	8b3a      	ldrh	r2, [r7, #24]
 800cbce:	4619      	mov	r1, r3
 800cbd0:	f004 f992 	bl	8010ef8 <memcpy>
 800cbd4:	e02f      	b.n	800cc36 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800cbd6:	8a7b      	ldrh	r3, [r7, #18]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d006      	beq.n	800cbea <tcp_write+0x3ae>
 800cbdc:	4b80      	ldr	r3, [pc, #512]	; (800cde0 <tcp_write+0x5a4>)
 800cbde:	f240 2271 	movw	r2, #625	; 0x271
 800cbe2:	4982      	ldr	r1, [pc, #520]	; (800cdec <tcp_write+0x5b0>)
 800cbe4:	4880      	ldr	r0, [pc, #512]	; (800cde8 <tcp_write+0x5ac>)
 800cbe6:	f004 f99d 	bl	8010f24 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800cbea:	8b3b      	ldrh	r3, [r7, #24]
 800cbec:	2201      	movs	r2, #1
 800cbee:	4619      	mov	r1, r3
 800cbf0:	2036      	movs	r0, #54	; 0x36
 800cbf2:	f7fa fdb7 	bl	8007764 <pbuf_alloc>
 800cbf6:	6178      	str	r0, [r7, #20]
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	f000 814b 	beq.w	800ce96 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800cc00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cc04:	68ba      	ldr	r2, [r7, #8]
 800cc06:	441a      	add	r2, r3
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cc0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cc16:	4619      	mov	r1, r3
 800cc18:	2036      	movs	r0, #54	; 0x36
 800cc1a:	f7fa fda3 	bl	8007764 <pbuf_alloc>
 800cc1e:	6338      	str	r0, [r7, #48]	; 0x30
 800cc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d103      	bne.n	800cc2e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800cc26:	6978      	ldr	r0, [r7, #20]
 800cc28:	f7fb f880 	bl	8007d2c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800cc2c:	e136      	b.n	800ce9c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800cc2e:	6979      	ldr	r1, [r7, #20]
 800cc30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc32:	f7fb f93d 	bl	8007eb0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800cc36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc38:	f7fb f900 	bl	8007e3c <pbuf_clen>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	461a      	mov	r2, r3
 800cc40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cc44:	4413      	add	r3, r2
 800cc46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800cc4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cc4e:	2b09      	cmp	r3, #9
 800cc50:	d903      	bls.n	800cc5a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800cc52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc54:	f7fb f86a 	bl	8007d2c <pbuf_free>
      goto memerr;
 800cc58:	e120      	b.n	800ce9c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cc5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cc62:	441a      	add	r2, r3
 800cc64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc68:	9300      	str	r3, [sp, #0]
 800cc6a:	4613      	mov	r3, r2
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cc70:	68f8      	ldr	r0, [r7, #12]
 800cc72:	f7ff fc51 	bl	800c518 <tcp_create_segment>
 800cc76:	64f8      	str	r0, [r7, #76]	; 0x4c
 800cc78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	f000 810d 	beq.w	800ce9a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800cc80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d102      	bne.n	800cc8c <tcp_write+0x450>
      queue = seg;
 800cc86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc88:	647b      	str	r3, [r7, #68]	; 0x44
 800cc8a:	e00c      	b.n	800cca6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800cc8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d106      	bne.n	800cca0 <tcp_write+0x464>
 800cc92:	4b53      	ldr	r3, [pc, #332]	; (800cde0 <tcp_write+0x5a4>)
 800cc94:	f240 22ab 	movw	r2, #683	; 0x2ab
 800cc98:	4955      	ldr	r1, [pc, #340]	; (800cdf0 <tcp_write+0x5b4>)
 800cc9a:	4853      	ldr	r0, [pc, #332]	; (800cde8 <tcp_write+0x5ac>)
 800cc9c:	f004 f942 	bl	8010f24 <iprintf>
      prev_seg->next = seg;
 800cca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cca2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cca4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800cca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cca8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800ccaa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ccae:	8b3b      	ldrh	r3, [r7, #24]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800ccb6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ccba:	88fb      	ldrh	r3, [r7, #6]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	f4ff af3d 	bcc.w	800cb3c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800ccc2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d02c      	beq.n	800cd22 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800ccc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccca:	685b      	ldr	r3, [r3, #4]
 800cccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccce:	e01e      	b.n	800cd0e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800ccd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd2:	891a      	ldrh	r2, [r3, #8]
 800ccd4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ccd6:	4413      	add	r3, r2
 800ccd8:	b29a      	uxth	r2, r3
 800ccda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccdc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800ccde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d110      	bne.n	800cd08 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800cce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccec:	8952      	ldrh	r2, [r2, #10]
 800ccee:	4413      	add	r3, r2
 800ccf0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ccf2:	68b9      	ldr	r1, [r7, #8]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f004 f8ff 	bl	8010ef8 <memcpy>
        p->len += oversize_used;
 800ccfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfc:	895a      	ldrh	r2, [r3, #10]
 800ccfe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cd00:	4413      	add	r3, r2
 800cd02:	b29a      	uxth	r2, r3
 800cd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd06:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800cd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d1dd      	bne.n	800ccd0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800cd14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd16:	891a      	ldrh	r2, [r3, #8]
 800cd18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cd1a:	4413      	add	r3, r2
 800cd1c:	b29a      	uxth	r2, r3
 800cd1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd20:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800cd22:	8a7a      	ldrh	r2, [r7, #18]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800cd2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d018      	beq.n	800cd62 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800cd30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d106      	bne.n	800cd44 <tcp_write+0x508>
 800cd36:	4b2a      	ldr	r3, [pc, #168]	; (800cde0 <tcp_write+0x5a4>)
 800cd38:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800cd3c:	492d      	ldr	r1, [pc, #180]	; (800cdf4 <tcp_write+0x5b8>)
 800cd3e:	482a      	ldr	r0, [pc, #168]	; (800cde8 <tcp_write+0x5ac>)
 800cd40:	f004 f8f0 	bl	8010f24 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800cd44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7fb f8b0 	bl	8007eb0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800cd50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd52:	891a      	ldrh	r2, [r3, #8]
 800cd54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd56:	891b      	ldrh	r3, [r3, #8]
 800cd58:	4413      	add	r3, r2
 800cd5a:	b29a      	uxth	r2, r3
 800cd5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd5e:	811a      	strh	r2, [r3, #8]
 800cd60:	e037      	b.n	800cdd2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800cd62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d034      	beq.n	800cdd2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800cd68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d003      	beq.n	800cd76 <tcp_write+0x53a>
 800cd6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d106      	bne.n	800cd84 <tcp_write+0x548>
 800cd76:	4b1a      	ldr	r3, [pc, #104]	; (800cde0 <tcp_write+0x5a4>)
 800cd78:	f240 22e6 	movw	r2, #742	; 0x2e6
 800cd7c:	491e      	ldr	r1, [pc, #120]	; (800cdf8 <tcp_write+0x5bc>)
 800cd7e:	481a      	ldr	r0, [pc, #104]	; (800cde8 <tcp_write+0x5ac>)
 800cd80:	f004 f8d0 	bl	8010f24 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cd84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd8a:	e009      	b.n	800cda0 <tcp_write+0x564>
      p->tot_len += extendlen;
 800cd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd8e:	891a      	ldrh	r2, [r3, #8]
 800cd90:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cd92:	4413      	add	r3, r2
 800cd94:	b29a      	uxth	r2, r3
 800cd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd98:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d1f1      	bne.n	800cd8c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800cda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdaa:	891a      	ldrh	r2, [r3, #8]
 800cdac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cdae:	4413      	add	r3, r2
 800cdb0:	b29a      	uxth	r2, r3
 800cdb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800cdb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb8:	895a      	ldrh	r2, [r3, #10]
 800cdba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cdbc:	4413      	add	r3, r2
 800cdbe:	b29a      	uxth	r2, r3
 800cdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800cdc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdc6:	891a      	ldrh	r2, [r3, #8]
 800cdc8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cdca:	4413      	add	r3, r2
 800cdcc:	b29a      	uxth	r2, r3
 800cdce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdd0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800cdd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d111      	bne.n	800cdfc <tcp_write+0x5c0>
    pcb->unsent = queue;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cddc:	66da      	str	r2, [r3, #108]	; 0x6c
 800cdde:	e010      	b.n	800ce02 <tcp_write+0x5c6>
 800cde0:	08013a34 	.word	0x08013a34
 800cde4:	08013cd4 	.word	0x08013cd4
 800cde8:	08013a88 	.word	0x08013a88
 800cdec:	08013d14 	.word	0x08013d14
 800cdf0:	08013d24 	.word	0x08013d24
 800cdf4:	08013d38 	.word	0x08013d38
 800cdf8:	08013d70 	.word	0x08013d70
  } else {
    last_unsent->next = queue;
 800cdfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce00:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ce06:	88fb      	ldrh	r3, [r7, #6]
 800ce08:	441a      	add	r2, r3
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ce14:	88fb      	ldrh	r3, [r7, #6]
 800ce16:	1ad3      	subs	r3, r2, r3
 800ce18:	b29a      	uxth	r2, r3
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ce26:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d00e      	beq.n	800ce52 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d10a      	bne.n	800ce52 <tcp_write+0x616>
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d106      	bne.n	800ce52 <tcp_write+0x616>
 800ce44:	4b2c      	ldr	r3, [pc, #176]	; (800cef8 <tcp_write+0x6bc>)
 800ce46:	f240 3212 	movw	r2, #786	; 0x312
 800ce4a:	492c      	ldr	r1, [pc, #176]	; (800cefc <tcp_write+0x6c0>)
 800ce4c:	482c      	ldr	r0, [pc, #176]	; (800cf00 <tcp_write+0x6c4>)
 800ce4e:	f004 f869 	bl	8010f24 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800ce52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d016      	beq.n	800ce86 <tcp_write+0x64a>
 800ce58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce5a:	68db      	ldr	r3, [r3, #12]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d012      	beq.n	800ce86 <tcp_write+0x64a>
 800ce60:	797b      	ldrb	r3, [r7, #5]
 800ce62:	f003 0302 	and.w	r3, r3, #2
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d10d      	bne.n	800ce86 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800ce6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce6c:	68db      	ldr	r3, [r3, #12]
 800ce6e:	899b      	ldrh	r3, [r3, #12]
 800ce70:	b29c      	uxth	r4, r3
 800ce72:	2008      	movs	r0, #8
 800ce74:	f7f9 fb92 	bl	800659c <lwip_htons>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce7e:	68db      	ldr	r3, [r3, #12]
 800ce80:	4322      	orrs	r2, r4
 800ce82:	b292      	uxth	r2, r2
 800ce84:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800ce86:	2300      	movs	r3, #0
 800ce88:	e031      	b.n	800ceee <tcp_write+0x6b2>
          goto memerr;
 800ce8a:	bf00      	nop
 800ce8c:	e006      	b.n	800ce9c <tcp_write+0x660>
            goto memerr;
 800ce8e:	bf00      	nop
 800ce90:	e004      	b.n	800ce9c <tcp_write+0x660>
        goto memerr;
 800ce92:	bf00      	nop
 800ce94:	e002      	b.n	800ce9c <tcp_write+0x660>
        goto memerr;
 800ce96:	bf00      	nop
 800ce98:	e000      	b.n	800ce9c <tcp_write+0x660>
      goto memerr;
 800ce9a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	8b5b      	ldrh	r3, [r3, #26]
 800cea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cea4:	b29a      	uxth	r2, r3
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800ceaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d002      	beq.n	800ceb6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800ceb0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ceb2:	f7fa ff3b 	bl	8007d2c <pbuf_free>
  }
  if (queue != NULL) {
 800ceb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d002      	beq.n	800cec2 <tcp_write+0x686>
    tcp_segs_free(queue);
 800cebc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cebe:	f7fc fb4d 	bl	800955c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d00e      	beq.n	800ceea <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d10a      	bne.n	800ceea <tcp_write+0x6ae>
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d106      	bne.n	800ceea <tcp_write+0x6ae>
 800cedc:	4b06      	ldr	r3, [pc, #24]	; (800cef8 <tcp_write+0x6bc>)
 800cede:	f240 3227 	movw	r2, #807	; 0x327
 800cee2:	4906      	ldr	r1, [pc, #24]	; (800cefc <tcp_write+0x6c0>)
 800cee4:	4806      	ldr	r0, [pc, #24]	; (800cf00 <tcp_write+0x6c4>)
 800cee6:	f004 f81d 	bl	8010f24 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800ceea:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	375c      	adds	r7, #92	; 0x5c
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd90      	pop	{r4, r7, pc}
 800cef6:	bf00      	nop
 800cef8:	08013a34 	.word	0x08013a34
 800cefc:	08013da8 	.word	0x08013da8
 800cf00:	08013a88 	.word	0x08013a88

0800cf04 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800cf04:	b590      	push	{r4, r7, lr}
 800cf06:	b08b      	sub	sp, #44	; 0x2c
 800cf08:	af02      	add	r7, sp, #8
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800cf10:	2300      	movs	r3, #0
 800cf12:	61fb      	str	r3, [r7, #28]
 800cf14:	2300      	movs	r3, #0
 800cf16:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d106      	bne.n	800cf30 <tcp_split_unsent_seg+0x2c>
 800cf22:	4b95      	ldr	r3, [pc, #596]	; (800d178 <tcp_split_unsent_seg+0x274>)
 800cf24:	f240 324b 	movw	r2, #843	; 0x34b
 800cf28:	4994      	ldr	r1, [pc, #592]	; (800d17c <tcp_split_unsent_seg+0x278>)
 800cf2a:	4895      	ldr	r0, [pc, #596]	; (800d180 <tcp_split_unsent_seg+0x27c>)
 800cf2c:	f003 fffa 	bl	8010f24 <iprintf>

  useg = pcb->unsent;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf34:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d102      	bne.n	800cf42 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800cf3c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf40:	e116      	b.n	800d170 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800cf42:	887b      	ldrh	r3, [r7, #2]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d109      	bne.n	800cf5c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800cf48:	4b8b      	ldr	r3, [pc, #556]	; (800d178 <tcp_split_unsent_seg+0x274>)
 800cf4a:	f240 3253 	movw	r2, #851	; 0x353
 800cf4e:	498d      	ldr	r1, [pc, #564]	; (800d184 <tcp_split_unsent_seg+0x280>)
 800cf50:	488b      	ldr	r0, [pc, #556]	; (800d180 <tcp_split_unsent_seg+0x27c>)
 800cf52:	f003 ffe7 	bl	8010f24 <iprintf>
    return ERR_VAL;
 800cf56:	f06f 0305 	mvn.w	r3, #5
 800cf5a:	e109      	b.n	800d170 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	891b      	ldrh	r3, [r3, #8]
 800cf60:	887a      	ldrh	r2, [r7, #2]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d301      	bcc.n	800cf6a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800cf66:	2300      	movs	r3, #0
 800cf68:	e102      	b.n	800d170 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf6e:	887a      	ldrh	r2, [r7, #2]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d906      	bls.n	800cf82 <tcp_split_unsent_seg+0x7e>
 800cf74:	4b80      	ldr	r3, [pc, #512]	; (800d178 <tcp_split_unsent_seg+0x274>)
 800cf76:	f240 325b 	movw	r2, #859	; 0x35b
 800cf7a:	4983      	ldr	r1, [pc, #524]	; (800d188 <tcp_split_unsent_seg+0x284>)
 800cf7c:	4880      	ldr	r0, [pc, #512]	; (800d180 <tcp_split_unsent_seg+0x27c>)
 800cf7e:	f003 ffd1 	bl	8010f24 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	891b      	ldrh	r3, [r3, #8]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d106      	bne.n	800cf98 <tcp_split_unsent_seg+0x94>
 800cf8a:	4b7b      	ldr	r3, [pc, #492]	; (800d178 <tcp_split_unsent_seg+0x274>)
 800cf8c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800cf90:	497e      	ldr	r1, [pc, #504]	; (800d18c <tcp_split_unsent_seg+0x288>)
 800cf92:	487b      	ldr	r0, [pc, #492]	; (800d180 <tcp_split_unsent_seg+0x27c>)
 800cf94:	f003 ffc6 	bl	8010f24 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	7a9b      	ldrb	r3, [r3, #10]
 800cf9c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cf9e:	7bfb      	ldrb	r3, [r7, #15]
 800cfa0:	009b      	lsls	r3, r3, #2
 800cfa2:	b2db      	uxtb	r3, r3
 800cfa4:	f003 0304 	and.w	r3, r3, #4
 800cfa8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	891a      	ldrh	r2, [r3, #8]
 800cfae:	887b      	ldrh	r3, [r7, #2]
 800cfb0:	1ad3      	subs	r3, r2, r3
 800cfb2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800cfb4:	7bbb      	ldrb	r3, [r7, #14]
 800cfb6:	b29a      	uxth	r2, r3
 800cfb8:	89bb      	ldrh	r3, [r7, #12]
 800cfba:	4413      	add	r3, r2
 800cfbc:	b29b      	uxth	r3, r3
 800cfbe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	2036      	movs	r0, #54	; 0x36
 800cfc6:	f7fa fbcd 	bl	8007764 <pbuf_alloc>
 800cfca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	f000 80b7 	beq.w	800d142 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	891a      	ldrh	r2, [r3, #8]
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	891b      	ldrh	r3, [r3, #8]
 800cfde:	1ad3      	subs	r3, r2, r3
 800cfe0:	b29a      	uxth	r2, r3
 800cfe2:	887b      	ldrh	r3, [r7, #2]
 800cfe4:	4413      	add	r3, r2
 800cfe6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	6858      	ldr	r0, [r3, #4]
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	685a      	ldr	r2, [r3, #4]
 800cff0:	7bbb      	ldrb	r3, [r7, #14]
 800cff2:	18d1      	adds	r1, r2, r3
 800cff4:	897b      	ldrh	r3, [r7, #10]
 800cff6:	89ba      	ldrh	r2, [r7, #12]
 800cff8:	f7fb f882 	bl	8008100 <pbuf_copy_partial>
 800cffc:	4603      	mov	r3, r0
 800cffe:	461a      	mov	r2, r3
 800d000:	89bb      	ldrh	r3, [r7, #12]
 800d002:	4293      	cmp	r3, r2
 800d004:	f040 809f 	bne.w	800d146 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	68db      	ldr	r3, [r3, #12]
 800d00c:	899b      	ldrh	r3, [r3, #12]
 800d00e:	b29b      	uxth	r3, r3
 800d010:	4618      	mov	r0, r3
 800d012:	f7f9 fac3 	bl	800659c <lwip_htons>
 800d016:	4603      	mov	r3, r0
 800d018:	b2db      	uxtb	r3, r3
 800d01a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d01e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d020:	2300      	movs	r3, #0
 800d022:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d024:	7efb      	ldrb	r3, [r7, #27]
 800d026:	f003 0308 	and.w	r3, r3, #8
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d007      	beq.n	800d03e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800d02e:	7efb      	ldrb	r3, [r7, #27]
 800d030:	f023 0308 	bic.w	r3, r3, #8
 800d034:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d036:	7ebb      	ldrb	r3, [r7, #26]
 800d038:	f043 0308 	orr.w	r3, r3, #8
 800d03c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d03e:	7efb      	ldrb	r3, [r7, #27]
 800d040:	f003 0301 	and.w	r3, r3, #1
 800d044:	2b00      	cmp	r3, #0
 800d046:	d007      	beq.n	800d058 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800d048:	7efb      	ldrb	r3, [r7, #27]
 800d04a:	f023 0301 	bic.w	r3, r3, #1
 800d04e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d050:	7ebb      	ldrb	r3, [r7, #26]
 800d052:	f043 0301 	orr.w	r3, r3, #1
 800d056:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	68db      	ldr	r3, [r3, #12]
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	4618      	mov	r0, r3
 800d060:	f7f9 fab1 	bl	80065c6 <lwip_htonl>
 800d064:	4602      	mov	r2, r0
 800d066:	887b      	ldrh	r3, [r7, #2]
 800d068:	18d1      	adds	r1, r2, r3
 800d06a:	7eba      	ldrb	r2, [r7, #26]
 800d06c:	7bfb      	ldrb	r3, [r7, #15]
 800d06e:	9300      	str	r3, [sp, #0]
 800d070:	460b      	mov	r3, r1
 800d072:	6939      	ldr	r1, [r7, #16]
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f7ff fa4f 	bl	800c518 <tcp_create_segment>
 800d07a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d07c:	69fb      	ldr	r3, [r7, #28]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d063      	beq.n	800d14a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	685b      	ldr	r3, [r3, #4]
 800d086:	4618      	mov	r0, r3
 800d088:	f7fa fed8 	bl	8007e3c <pbuf_clen>
 800d08c:	4603      	mov	r3, r0
 800d08e:	461a      	mov	r2, r3
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d096:	1a9b      	subs	r3, r3, r2
 800d098:	b29a      	uxth	r2, r3
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	6858      	ldr	r0, [r3, #4]
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	891a      	ldrh	r2, [r3, #8]
 800d0aa:	89bb      	ldrh	r3, [r7, #12]
 800d0ac:	1ad3      	subs	r3, r2, r3
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	f7fa fcb5 	bl	8007a20 <pbuf_realloc>
  useg->len -= remainder;
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	891a      	ldrh	r2, [r3, #8]
 800d0ba:	89bb      	ldrh	r3, [r7, #12]
 800d0bc:	1ad3      	subs	r3, r2, r3
 800d0be:	b29a      	uxth	r2, r3
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	899b      	ldrh	r3, [r3, #12]
 800d0ca:	b29c      	uxth	r4, r3
 800d0cc:	7efb      	ldrb	r3, [r7, #27]
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f7f9 fa63 	bl	800659c <lwip_htons>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	461a      	mov	r2, r3
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	68db      	ldr	r3, [r3, #12]
 800d0de:	4322      	orrs	r2, r4
 800d0e0:	b292      	uxth	r2, r2
 800d0e2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	685b      	ldr	r3, [r3, #4]
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7fa fea7 	bl	8007e3c <pbuf_clen>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	461a      	mov	r2, r3
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d0f8:	4413      	add	r3, r2
 800d0fa:	b29a      	uxth	r2, r3
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d102:	69fb      	ldr	r3, [r7, #28]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	4618      	mov	r0, r3
 800d108:	f7fa fe98 	bl	8007e3c <pbuf_clen>
 800d10c:	4603      	mov	r3, r0
 800d10e:	461a      	mov	r2, r3
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d116:	4413      	add	r3, r2
 800d118:	b29a      	uxth	r2, r3
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	681a      	ldr	r2, [r3, #0]
 800d124:	69fb      	ldr	r3, [r7, #28]
 800d126:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	69fa      	ldr	r2, [r7, #28]
 800d12c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d12e:	69fb      	ldr	r3, [r7, #28]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d103      	bne.n	800d13e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d13e:	2300      	movs	r3, #0
 800d140:	e016      	b.n	800d170 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800d142:	bf00      	nop
 800d144:	e002      	b.n	800d14c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d146:	bf00      	nop
 800d148:	e000      	b.n	800d14c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d14a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d14c:	69fb      	ldr	r3, [r7, #28]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d006      	beq.n	800d160 <tcp_split_unsent_seg+0x25c>
 800d152:	4b09      	ldr	r3, [pc, #36]	; (800d178 <tcp_split_unsent_seg+0x274>)
 800d154:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d158:	490d      	ldr	r1, [pc, #52]	; (800d190 <tcp_split_unsent_seg+0x28c>)
 800d15a:	4809      	ldr	r0, [pc, #36]	; (800d180 <tcp_split_unsent_seg+0x27c>)
 800d15c:	f003 fee2 	bl	8010f24 <iprintf>
  if (p != NULL) {
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d002      	beq.n	800d16c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800d166:	6938      	ldr	r0, [r7, #16]
 800d168:	f7fa fde0 	bl	8007d2c <pbuf_free>
  }

  return ERR_MEM;
 800d16c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d170:	4618      	mov	r0, r3
 800d172:	3724      	adds	r7, #36	; 0x24
 800d174:	46bd      	mov	sp, r7
 800d176:	bd90      	pop	{r4, r7, pc}
 800d178:	08013a34 	.word	0x08013a34
 800d17c:	08013dc8 	.word	0x08013dc8
 800d180:	08013a88 	.word	0x08013a88
 800d184:	08013dec 	.word	0x08013dec
 800d188:	08013e10 	.word	0x08013e10
 800d18c:	08013e20 	.word	0x08013e20
 800d190:	08013e30 	.word	0x08013e30

0800d194 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d194:	b590      	push	{r4, r7, lr}
 800d196:	b085      	sub	sp, #20
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d106      	bne.n	800d1b0 <tcp_send_fin+0x1c>
 800d1a2:	4b21      	ldr	r3, [pc, #132]	; (800d228 <tcp_send_fin+0x94>)
 800d1a4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d1a8:	4920      	ldr	r1, [pc, #128]	; (800d22c <tcp_send_fin+0x98>)
 800d1aa:	4821      	ldr	r0, [pc, #132]	; (800d230 <tcp_send_fin+0x9c>)
 800d1ac:	f003 feba 	bl	8010f24 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d02e      	beq.n	800d216 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1bc:	60fb      	str	r3, [r7, #12]
 800d1be:	e002      	b.n	800d1c6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d1f8      	bne.n	800d1c0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	899b      	ldrh	r3, [r3, #12]
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f7f9 f9e0 	bl	800659c <lwip_htons>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	b2db      	uxtb	r3, r3
 800d1e0:	f003 0307 	and.w	r3, r3, #7
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d116      	bne.n	800d216 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	68db      	ldr	r3, [r3, #12]
 800d1ec:	899b      	ldrh	r3, [r3, #12]
 800d1ee:	b29c      	uxth	r4, r3
 800d1f0:	2001      	movs	r0, #1
 800d1f2:	f7f9 f9d3 	bl	800659c <lwip_htons>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	461a      	mov	r2, r3
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	68db      	ldr	r3, [r3, #12]
 800d1fe:	4322      	orrs	r2, r4
 800d200:	b292      	uxth	r2, r2
 800d202:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	8b5b      	ldrh	r3, [r3, #26]
 800d208:	f043 0320 	orr.w	r3, r3, #32
 800d20c:	b29a      	uxth	r2, r3
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800d212:	2300      	movs	r3, #0
 800d214:	e004      	b.n	800d220 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d216:	2101      	movs	r1, #1
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f000 f80b 	bl	800d234 <tcp_enqueue_flags>
 800d21e:	4603      	mov	r3, r0
}
 800d220:	4618      	mov	r0, r3
 800d222:	3714      	adds	r7, #20
 800d224:	46bd      	mov	sp, r7
 800d226:	bd90      	pop	{r4, r7, pc}
 800d228:	08013a34 	.word	0x08013a34
 800d22c:	08013e3c 	.word	0x08013e3c
 800d230:	08013a88 	.word	0x08013a88

0800d234 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b08a      	sub	sp, #40	; 0x28
 800d238:	af02      	add	r7, sp, #8
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	460b      	mov	r3, r1
 800d23e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d240:	2300      	movs	r3, #0
 800d242:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d244:	2300      	movs	r3, #0
 800d246:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d248:	78fb      	ldrb	r3, [r7, #3]
 800d24a:	f003 0303 	and.w	r3, r3, #3
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d106      	bne.n	800d260 <tcp_enqueue_flags+0x2c>
 800d252:	4b67      	ldr	r3, [pc, #412]	; (800d3f0 <tcp_enqueue_flags+0x1bc>)
 800d254:	f240 4211 	movw	r2, #1041	; 0x411
 800d258:	4966      	ldr	r1, [pc, #408]	; (800d3f4 <tcp_enqueue_flags+0x1c0>)
 800d25a:	4867      	ldr	r0, [pc, #412]	; (800d3f8 <tcp_enqueue_flags+0x1c4>)
 800d25c:	f003 fe62 	bl	8010f24 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d106      	bne.n	800d274 <tcp_enqueue_flags+0x40>
 800d266:	4b62      	ldr	r3, [pc, #392]	; (800d3f0 <tcp_enqueue_flags+0x1bc>)
 800d268:	f240 4213 	movw	r2, #1043	; 0x413
 800d26c:	4963      	ldr	r1, [pc, #396]	; (800d3fc <tcp_enqueue_flags+0x1c8>)
 800d26e:	4862      	ldr	r0, [pc, #392]	; (800d3f8 <tcp_enqueue_flags+0x1c4>)
 800d270:	f003 fe58 	bl	8010f24 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d274:	78fb      	ldrb	r3, [r7, #3]
 800d276:	f003 0302 	and.w	r3, r3, #2
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d001      	beq.n	800d282 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d27e:	2301      	movs	r3, #1
 800d280:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d282:	7ffb      	ldrb	r3, [r7, #31]
 800d284:	009b      	lsls	r3, r3, #2
 800d286:	b2db      	uxtb	r3, r3
 800d288:	f003 0304 	and.w	r3, r3, #4
 800d28c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d28e:	7dfb      	ldrb	r3, [r7, #23]
 800d290:	b29b      	uxth	r3, r3
 800d292:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d296:	4619      	mov	r1, r3
 800d298:	2036      	movs	r0, #54	; 0x36
 800d29a:	f7fa fa63 	bl	8007764 <pbuf_alloc>
 800d29e:	6138      	str	r0, [r7, #16]
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d109      	bne.n	800d2ba <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	8b5b      	ldrh	r3, [r3, #26]
 800d2aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2ae:	b29a      	uxth	r2, r3
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d2b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d2b8:	e095      	b.n	800d3e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	895a      	ldrh	r2, [r3, #10]
 800d2be:	7dfb      	ldrb	r3, [r7, #23]
 800d2c0:	b29b      	uxth	r3, r3
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d206      	bcs.n	800d2d4 <tcp_enqueue_flags+0xa0>
 800d2c6:	4b4a      	ldr	r3, [pc, #296]	; (800d3f0 <tcp_enqueue_flags+0x1bc>)
 800d2c8:	f240 4239 	movw	r2, #1081	; 0x439
 800d2cc:	494c      	ldr	r1, [pc, #304]	; (800d400 <tcp_enqueue_flags+0x1cc>)
 800d2ce:	484a      	ldr	r0, [pc, #296]	; (800d3f8 <tcp_enqueue_flags+0x1c4>)
 800d2d0:	f003 fe28 	bl	8010f24 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d2d8:	78fa      	ldrb	r2, [r7, #3]
 800d2da:	7ffb      	ldrb	r3, [r7, #31]
 800d2dc:	9300      	str	r3, [sp, #0]
 800d2de:	460b      	mov	r3, r1
 800d2e0:	6939      	ldr	r1, [r7, #16]
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f7ff f918 	bl	800c518 <tcp_create_segment>
 800d2e8:	60f8      	str	r0, [r7, #12]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d109      	bne.n	800d304 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	8b5b      	ldrh	r3, [r3, #26]
 800d2f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d2fe:	f04f 33ff 	mov.w	r3, #4294967295
 800d302:	e070      	b.n	800d3e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	68db      	ldr	r3, [r3, #12]
 800d308:	f003 0303 	and.w	r3, r3, #3
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d006      	beq.n	800d31e <tcp_enqueue_flags+0xea>
 800d310:	4b37      	ldr	r3, [pc, #220]	; (800d3f0 <tcp_enqueue_flags+0x1bc>)
 800d312:	f240 4242 	movw	r2, #1090	; 0x442
 800d316:	493b      	ldr	r1, [pc, #236]	; (800d404 <tcp_enqueue_flags+0x1d0>)
 800d318:	4837      	ldr	r0, [pc, #220]	; (800d3f8 <tcp_enqueue_flags+0x1c4>)
 800d31a:	f003 fe03 	bl	8010f24 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	891b      	ldrh	r3, [r3, #8]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d006      	beq.n	800d334 <tcp_enqueue_flags+0x100>
 800d326:	4b32      	ldr	r3, [pc, #200]	; (800d3f0 <tcp_enqueue_flags+0x1bc>)
 800d328:	f240 4243 	movw	r2, #1091	; 0x443
 800d32c:	4936      	ldr	r1, [pc, #216]	; (800d408 <tcp_enqueue_flags+0x1d4>)
 800d32e:	4832      	ldr	r0, [pc, #200]	; (800d3f8 <tcp_enqueue_flags+0x1c4>)
 800d330:	f003 fdf8 	bl	8010f24 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d103      	bne.n	800d344 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	68fa      	ldr	r2, [r7, #12]
 800d340:	66da      	str	r2, [r3, #108]	; 0x6c
 800d342:	e00d      	b.n	800d360 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d348:	61bb      	str	r3, [r7, #24]
 800d34a:	e002      	b.n	800d352 <tcp_enqueue_flags+0x11e>
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	61bb      	str	r3, [r7, #24]
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d1f8      	bne.n	800d34c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	68fa      	ldr	r2, [r7, #12]
 800d35e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2200      	movs	r2, #0
 800d364:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d368:	78fb      	ldrb	r3, [r7, #3]
 800d36a:	f003 0302 	and.w	r3, r3, #2
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d104      	bne.n	800d37c <tcp_enqueue_flags+0x148>
 800d372:	78fb      	ldrb	r3, [r7, #3]
 800d374:	f003 0301 	and.w	r3, r3, #1
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d004      	beq.n	800d386 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d380:	1c5a      	adds	r2, r3, #1
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d386:	78fb      	ldrb	r3, [r7, #3]
 800d388:	f003 0301 	and.w	r3, r3, #1
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d006      	beq.n	800d39e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	8b5b      	ldrh	r3, [r3, #26]
 800d394:	f043 0320 	orr.w	r3, r3, #32
 800d398:	b29a      	uxth	r2, r3
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7fa fd4a 	bl	8007e3c <pbuf_clen>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	461a      	mov	r2, r3
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d3b2:	4413      	add	r3, r2
 800d3b4:	b29a      	uxth	r2, r3
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d00e      	beq.n	800d3e4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d10a      	bne.n	800d3e4 <tcp_enqueue_flags+0x1b0>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d106      	bne.n	800d3e4 <tcp_enqueue_flags+0x1b0>
 800d3d6:	4b06      	ldr	r3, [pc, #24]	; (800d3f0 <tcp_enqueue_flags+0x1bc>)
 800d3d8:	f240 4265 	movw	r2, #1125	; 0x465
 800d3dc:	490b      	ldr	r1, [pc, #44]	; (800d40c <tcp_enqueue_flags+0x1d8>)
 800d3de:	4806      	ldr	r0, [pc, #24]	; (800d3f8 <tcp_enqueue_flags+0x1c4>)
 800d3e0:	f003 fda0 	bl	8010f24 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d3e4:	2300      	movs	r3, #0
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3720      	adds	r7, #32
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	08013a34 	.word	0x08013a34
 800d3f4:	08013e58 	.word	0x08013e58
 800d3f8:	08013a88 	.word	0x08013a88
 800d3fc:	08013eb0 	.word	0x08013eb0
 800d400:	08013ed0 	.word	0x08013ed0
 800d404:	08013f0c 	.word	0x08013f0c
 800d408:	08013f24 	.word	0x08013f24
 800d40c:	08013f50 	.word	0x08013f50

0800d410 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d410:	b5b0      	push	{r4, r5, r7, lr}
 800d412:	b08a      	sub	sp, #40	; 0x28
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d106      	bne.n	800d42c <tcp_output+0x1c>
 800d41e:	4b8a      	ldr	r3, [pc, #552]	; (800d648 <tcp_output+0x238>)
 800d420:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d424:	4989      	ldr	r1, [pc, #548]	; (800d64c <tcp_output+0x23c>)
 800d426:	488a      	ldr	r0, [pc, #552]	; (800d650 <tcp_output+0x240>)
 800d428:	f003 fd7c 	bl	8010f24 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	7d1b      	ldrb	r3, [r3, #20]
 800d430:	2b01      	cmp	r3, #1
 800d432:	d106      	bne.n	800d442 <tcp_output+0x32>
 800d434:	4b84      	ldr	r3, [pc, #528]	; (800d648 <tcp_output+0x238>)
 800d436:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d43a:	4986      	ldr	r1, [pc, #536]	; (800d654 <tcp_output+0x244>)
 800d43c:	4884      	ldr	r0, [pc, #528]	; (800d650 <tcp_output+0x240>)
 800d43e:	f003 fd71 	bl	8010f24 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d442:	4b85      	ldr	r3, [pc, #532]	; (800d658 <tcp_output+0x248>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	429a      	cmp	r2, r3
 800d44a:	d101      	bne.n	800d450 <tcp_output+0x40>
    return ERR_OK;
 800d44c:	2300      	movs	r3, #0
 800d44e:	e1ce      	b.n	800d7ee <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d45c:	4293      	cmp	r3, r2
 800d45e:	bf28      	it	cs
 800d460:	4613      	movcs	r3, r2
 800d462:	b29b      	uxth	r3, r3
 800d464:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d46a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800d46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d10b      	bne.n	800d48a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	8b5b      	ldrh	r3, [r3, #26]
 800d476:	f003 0302 	and.w	r3, r3, #2
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	f000 81aa 	beq.w	800d7d4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 fdcb 	bl	800e01c <tcp_send_empty_ack>
 800d486:	4603      	mov	r3, r0
 800d488:	e1b1      	b.n	800d7ee <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d48a:	6879      	ldr	r1, [r7, #4]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	3304      	adds	r3, #4
 800d490:	461a      	mov	r2, r3
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f7ff f824 	bl	800c4e0 <tcp_route>
 800d498:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d102      	bne.n	800d4a6 <tcp_output+0x96>
    return ERR_RTE;
 800d4a0:	f06f 0303 	mvn.w	r3, #3
 800d4a4:	e1a3      	b.n	800d7ee <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d003      	beq.n	800d4b4 <tcp_output+0xa4>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d111      	bne.n	800d4d8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d002      	beq.n	800d4c0 <tcp_output+0xb0>
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	3304      	adds	r3, #4
 800d4be:	e000      	b.n	800d4c2 <tcp_output+0xb2>
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d102      	bne.n	800d4d0 <tcp_output+0xc0>
      return ERR_RTE;
 800d4ca:	f06f 0303 	mvn.w	r3, #3
 800d4ce:	e18e      	b.n	800d7ee <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	681a      	ldr	r2, [r3, #0]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4da:	68db      	ldr	r3, [r3, #12]
 800d4dc:	685b      	ldr	r3, [r3, #4]
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7f9 f871 	bl	80065c6 <lwip_htonl>
 800d4e4:	4602      	mov	r2, r0
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4ea:	1ad3      	subs	r3, r2, r3
 800d4ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4ee:	8912      	ldrh	r2, [r2, #8]
 800d4f0:	4413      	add	r3, r2
 800d4f2:	69ba      	ldr	r2, [r7, #24]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d227      	bcs.n	800d548 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d4fe:	461a      	mov	r2, r3
 800d500:	69bb      	ldr	r3, [r7, #24]
 800d502:	4293      	cmp	r3, r2
 800d504:	d114      	bne.n	800d530 <tcp_output+0x120>
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d110      	bne.n	800d530 <tcp_output+0x120>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d514:	2b00      	cmp	r3, #0
 800d516:	d10b      	bne.n	800d530 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2200      	movs	r2, #0
 800d51c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2201      	movs	r2, #1
 800d524:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2200      	movs	r2, #0
 800d52c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	8b5b      	ldrh	r3, [r3, #26]
 800d534:	f003 0302 	and.w	r3, r3, #2
 800d538:	2b00      	cmp	r3, #0
 800d53a:	f000 814d 	beq.w	800d7d8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 fd6c 	bl	800e01c <tcp_send_empty_ack>
 800d544:	4603      	mov	r3, r0
 800d546:	e152      	b.n	800d7ee <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2200      	movs	r2, #0
 800d54c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d554:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d556:	6a3b      	ldr	r3, [r7, #32]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	f000 811c 	beq.w	800d796 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d55e:	e002      	b.n	800d566 <tcp_output+0x156>
 800d560:	6a3b      	ldr	r3, [r7, #32]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	623b      	str	r3, [r7, #32]
 800d566:	6a3b      	ldr	r3, [r7, #32]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d1f8      	bne.n	800d560 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d56e:	e112      	b.n	800d796 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d572:	68db      	ldr	r3, [r3, #12]
 800d574:	899b      	ldrh	r3, [r3, #12]
 800d576:	b29b      	uxth	r3, r3
 800d578:	4618      	mov	r0, r3
 800d57a:	f7f9 f80f 	bl	800659c <lwip_htons>
 800d57e:	4603      	mov	r3, r0
 800d580:	b2db      	uxtb	r3, r3
 800d582:	f003 0304 	and.w	r3, r3, #4
 800d586:	2b00      	cmp	r3, #0
 800d588:	d006      	beq.n	800d598 <tcp_output+0x188>
 800d58a:	4b2f      	ldr	r3, [pc, #188]	; (800d648 <tcp_output+0x238>)
 800d58c:	f240 5236 	movw	r2, #1334	; 0x536
 800d590:	4932      	ldr	r1, [pc, #200]	; (800d65c <tcp_output+0x24c>)
 800d592:	482f      	ldr	r0, [pc, #188]	; (800d650 <tcp_output+0x240>)
 800d594:	f003 fcc6 	bl	8010f24 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d01f      	beq.n	800d5e0 <tcp_output+0x1d0>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	8b5b      	ldrh	r3, [r3, #26]
 800d5a4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d119      	bne.n	800d5e0 <tcp_output+0x1d0>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d00b      	beq.n	800d5cc <tcp_output+0x1bc>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d110      	bne.n	800d5e0 <tcp_output+0x1d0>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5c2:	891a      	ldrh	r2, [r3, #8]
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d209      	bcs.n	800d5e0 <tcp_output+0x1d0>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d004      	beq.n	800d5e0 <tcp_output+0x1d0>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d5dc:	2b08      	cmp	r3, #8
 800d5de:	d901      	bls.n	800d5e4 <tcp_output+0x1d4>
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	e000      	b.n	800d5e6 <tcp_output+0x1d6>
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d106      	bne.n	800d5f8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	8b5b      	ldrh	r3, [r3, #26]
 800d5ee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	f000 80e4 	beq.w	800d7c0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	7d1b      	ldrb	r3, [r3, #20]
 800d5fc:	2b02      	cmp	r3, #2
 800d5fe:	d00d      	beq.n	800d61c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	899b      	ldrh	r3, [r3, #12]
 800d606:	b29c      	uxth	r4, r3
 800d608:	2010      	movs	r0, #16
 800d60a:	f7f8 ffc7 	bl	800659c <lwip_htons>
 800d60e:	4603      	mov	r3, r0
 800d610:	461a      	mov	r2, r3
 800d612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d614:	68db      	ldr	r3, [r3, #12]
 800d616:	4322      	orrs	r2, r4
 800d618:	b292      	uxth	r2, r2
 800d61a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d61c:	697a      	ldr	r2, [r7, #20]
 800d61e:	6879      	ldr	r1, [r7, #4]
 800d620:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d622:	f000 f909 	bl	800d838 <tcp_output_segment>
 800d626:	4603      	mov	r3, r0
 800d628:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d62a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d016      	beq.n	800d660 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	8b5b      	ldrh	r3, [r3, #26]
 800d636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d63a:	b29a      	uxth	r2, r3
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	835a      	strh	r2, [r3, #26]
      return err;
 800d640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d644:	e0d3      	b.n	800d7ee <tcp_output+0x3de>
 800d646:	bf00      	nop
 800d648:	08013a34 	.word	0x08013a34
 800d64c:	08013f78 	.word	0x08013f78
 800d650:	08013a88 	.word	0x08013a88
 800d654:	08013f90 	.word	0x08013f90
 800d658:	20008770 	.word	0x20008770
 800d65c:	08013fb8 	.word	0x08013fb8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d662:	681a      	ldr	r2, [r3, #0]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	7d1b      	ldrb	r3, [r3, #20]
 800d66c:	2b02      	cmp	r3, #2
 800d66e:	d006      	beq.n	800d67e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	8b5b      	ldrh	r3, [r3, #26]
 800d674:	f023 0303 	bic.w	r3, r3, #3
 800d678:	b29a      	uxth	r2, r3
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d680:	68db      	ldr	r3, [r3, #12]
 800d682:	685b      	ldr	r3, [r3, #4]
 800d684:	4618      	mov	r0, r3
 800d686:	f7f8 ff9e 	bl	80065c6 <lwip_htonl>
 800d68a:	4604      	mov	r4, r0
 800d68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68e:	891b      	ldrh	r3, [r3, #8]
 800d690:	461d      	mov	r5, r3
 800d692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d694:	68db      	ldr	r3, [r3, #12]
 800d696:	899b      	ldrh	r3, [r3, #12]
 800d698:	b29b      	uxth	r3, r3
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7f8 ff7e 	bl	800659c <lwip_htons>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	b2db      	uxtb	r3, r3
 800d6a4:	f003 0303 	and.w	r3, r3, #3
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d001      	beq.n	800d6b0 <tcp_output+0x2a0>
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	e000      	b.n	800d6b2 <tcp_output+0x2a2>
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	442b      	add	r3, r5
 800d6b4:	4423      	add	r3, r4
 800d6b6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	1ad3      	subs	r3, r2, r3
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	da02      	bge.n	800d6ca <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	68ba      	ldr	r2, [r7, #8]
 800d6c8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6cc:	891b      	ldrh	r3, [r3, #8]
 800d6ce:	461c      	mov	r4, r3
 800d6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d2:	68db      	ldr	r3, [r3, #12]
 800d6d4:	899b      	ldrh	r3, [r3, #12]
 800d6d6:	b29b      	uxth	r3, r3
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7f8 ff5f 	bl	800659c <lwip_htons>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	b2db      	uxtb	r3, r3
 800d6e2:	f003 0303 	and.w	r3, r3, #3
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d001      	beq.n	800d6ee <tcp_output+0x2de>
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	e000      	b.n	800d6f0 <tcp_output+0x2e0>
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	4423      	add	r3, r4
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d049      	beq.n	800d78a <tcp_output+0x37a>
      seg->next = NULL;
 800d6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d700:	2b00      	cmp	r3, #0
 800d702:	d105      	bne.n	800d710 <tcp_output+0x300>
        pcb->unacked = seg;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d708:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70c:	623b      	str	r3, [r7, #32]
 800d70e:	e03f      	b.n	800d790 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d712:	68db      	ldr	r3, [r3, #12]
 800d714:	685b      	ldr	r3, [r3, #4]
 800d716:	4618      	mov	r0, r3
 800d718:	f7f8 ff55 	bl	80065c6 <lwip_htonl>
 800d71c:	4604      	mov	r4, r0
 800d71e:	6a3b      	ldr	r3, [r7, #32]
 800d720:	68db      	ldr	r3, [r3, #12]
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	4618      	mov	r0, r3
 800d726:	f7f8 ff4e 	bl	80065c6 <lwip_htonl>
 800d72a:	4603      	mov	r3, r0
 800d72c:	1ae3      	subs	r3, r4, r3
 800d72e:	2b00      	cmp	r3, #0
 800d730:	da24      	bge.n	800d77c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	3370      	adds	r3, #112	; 0x70
 800d736:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d738:	e002      	b.n	800d740 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d73a:	69fb      	ldr	r3, [r7, #28]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d740:	69fb      	ldr	r3, [r7, #28]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d011      	beq.n	800d76c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d748:	69fb      	ldr	r3, [r7, #28]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	68db      	ldr	r3, [r3, #12]
 800d74e:	685b      	ldr	r3, [r3, #4]
 800d750:	4618      	mov	r0, r3
 800d752:	f7f8 ff38 	bl	80065c6 <lwip_htonl>
 800d756:	4604      	mov	r4, r0
 800d758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	4618      	mov	r0, r3
 800d760:	f7f8 ff31 	bl	80065c6 <lwip_htonl>
 800d764:	4603      	mov	r3, r0
 800d766:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d768:	2b00      	cmp	r3, #0
 800d76a:	dbe6      	blt.n	800d73a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d76c:	69fb      	ldr	r3, [r7, #28]
 800d76e:	681a      	ldr	r2, [r3, #0]
 800d770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d772:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d778:	601a      	str	r2, [r3, #0]
 800d77a:	e009      	b.n	800d790 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d77c:	6a3b      	ldr	r3, [r7, #32]
 800d77e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d780:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d782:	6a3b      	ldr	r3, [r7, #32]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	623b      	str	r3, [r7, #32]
 800d788:	e002      	b.n	800d790 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d78a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d78c:	f7fb fefb 	bl	8009586 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d794:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d012      	beq.n	800d7c2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79e:	68db      	ldr	r3, [r3, #12]
 800d7a0:	685b      	ldr	r3, [r3, #4]
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7f8 ff0f 	bl	80065c6 <lwip_htonl>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7ae:	1ad3      	subs	r3, r2, r3
 800d7b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7b2:	8912      	ldrh	r2, [r2, #8]
 800d7b4:	4413      	add	r3, r2
  while (seg != NULL &&
 800d7b6:	69ba      	ldr	r2, [r7, #24]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	f4bf aed9 	bcs.w	800d570 <tcp_output+0x160>
 800d7be:	e000      	b.n	800d7c2 <tcp_output+0x3b2>
      break;
 800d7c0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d108      	bne.n	800d7dc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d7d2:	e004      	b.n	800d7de <tcp_output+0x3ce>
    goto output_done;
 800d7d4:	bf00      	nop
 800d7d6:	e002      	b.n	800d7de <tcp_output+0x3ce>
    goto output_done;
 800d7d8:	bf00      	nop
 800d7da:	e000      	b.n	800d7de <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d7dc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	8b5b      	ldrh	r3, [r3, #26]
 800d7e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d7e6:	b29a      	uxth	r2, r3
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d7ec:	2300      	movs	r3, #0
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3728      	adds	r7, #40	; 0x28
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bdb0      	pop	{r4, r5, r7, pc}
 800d7f6:	bf00      	nop

0800d7f8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d106      	bne.n	800d814 <tcp_output_segment_busy+0x1c>
 800d806:	4b09      	ldr	r3, [pc, #36]	; (800d82c <tcp_output_segment_busy+0x34>)
 800d808:	f240 529a 	movw	r2, #1434	; 0x59a
 800d80c:	4908      	ldr	r1, [pc, #32]	; (800d830 <tcp_output_segment_busy+0x38>)
 800d80e:	4809      	ldr	r0, [pc, #36]	; (800d834 <tcp_output_segment_busy+0x3c>)
 800d810:	f003 fb88 	bl	8010f24 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	685b      	ldr	r3, [r3, #4]
 800d818:	7b9b      	ldrb	r3, [r3, #14]
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d001      	beq.n	800d822 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d81e:	2301      	movs	r3, #1
 800d820:	e000      	b.n	800d824 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d822:	2300      	movs	r3, #0
}
 800d824:	4618      	mov	r0, r3
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	08013a34 	.word	0x08013a34
 800d830:	08013fd0 	.word	0x08013fd0
 800d834:	08013a88 	.word	0x08013a88

0800d838 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d838:	b5b0      	push	{r4, r5, r7, lr}
 800d83a:	b08c      	sub	sp, #48	; 0x30
 800d83c:	af04      	add	r7, sp, #16
 800d83e:	60f8      	str	r0, [r7, #12]
 800d840:	60b9      	str	r1, [r7, #8]
 800d842:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d106      	bne.n	800d858 <tcp_output_segment+0x20>
 800d84a:	4b63      	ldr	r3, [pc, #396]	; (800d9d8 <tcp_output_segment+0x1a0>)
 800d84c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d850:	4962      	ldr	r1, [pc, #392]	; (800d9dc <tcp_output_segment+0x1a4>)
 800d852:	4863      	ldr	r0, [pc, #396]	; (800d9e0 <tcp_output_segment+0x1a8>)
 800d854:	f003 fb66 	bl	8010f24 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d106      	bne.n	800d86c <tcp_output_segment+0x34>
 800d85e:	4b5e      	ldr	r3, [pc, #376]	; (800d9d8 <tcp_output_segment+0x1a0>)
 800d860:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d864:	495f      	ldr	r1, [pc, #380]	; (800d9e4 <tcp_output_segment+0x1ac>)
 800d866:	485e      	ldr	r0, [pc, #376]	; (800d9e0 <tcp_output_segment+0x1a8>)
 800d868:	f003 fb5c 	bl	8010f24 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d106      	bne.n	800d880 <tcp_output_segment+0x48>
 800d872:	4b59      	ldr	r3, [pc, #356]	; (800d9d8 <tcp_output_segment+0x1a0>)
 800d874:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d878:	495b      	ldr	r1, [pc, #364]	; (800d9e8 <tcp_output_segment+0x1b0>)
 800d87a:	4859      	ldr	r0, [pc, #356]	; (800d9e0 <tcp_output_segment+0x1a8>)
 800d87c:	f003 fb52 	bl	8010f24 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d880:	68f8      	ldr	r0, [r7, #12]
 800d882:	f7ff ffb9 	bl	800d7f8 <tcp_output_segment_busy>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d001      	beq.n	800d890 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d88c:	2300      	movs	r3, #0
 800d88e:	e09f      	b.n	800d9d0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	68dc      	ldr	r4, [r3, #12]
 800d898:	4610      	mov	r0, r2
 800d89a:	f7f8 fe94 	bl	80065c6 <lwip_htonl>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	68dc      	ldr	r4, [r3, #12]
 800d8aa:	4610      	mov	r0, r2
 800d8ac:	f7f8 fe76 	bl	800659c <lwip_htons>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8b8:	68ba      	ldr	r2, [r7, #8]
 800d8ba:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d8bc:	441a      	add	r2, r3
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	68db      	ldr	r3, [r3, #12]
 800d8c6:	3314      	adds	r3, #20
 800d8c8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	7a9b      	ldrb	r3, [r3, #10]
 800d8ce:	f003 0301 	and.w	r3, r3, #1
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d015      	beq.n	800d902 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	3304      	adds	r3, #4
 800d8da:	461a      	mov	r2, r3
 800d8dc:	6879      	ldr	r1, [r7, #4]
 800d8de:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d8e2:	f7fc fa33 	bl	8009d4c <tcp_eff_send_mss_netif>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d8ea:	8b7b      	ldrh	r3, [r7, #26]
 800d8ec:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7f8 fe68 	bl	80065c6 <lwip_htonl>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	69fb      	ldr	r3, [r7, #28]
 800d8fa:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d8fc:	69fb      	ldr	r3, [r7, #28]
 800d8fe:	3304      	adds	r3, #4
 800d900:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d908:	2b00      	cmp	r3, #0
 800d90a:	da02      	bge.n	800d912 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	2200      	movs	r2, #0
 800d910:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d916:	2b00      	cmp	r3, #0
 800d918:	d10c      	bne.n	800d934 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d91a:	4b34      	ldr	r3, [pc, #208]	; (800d9ec <tcp_output_segment+0x1b4>)
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	68db      	ldr	r3, [r3, #12]
 800d926:	685b      	ldr	r3, [r3, #4]
 800d928:	4618      	mov	r0, r3
 800d92a:	f7f8 fe4c 	bl	80065c6 <lwip_htonl>
 800d92e:	4602      	mov	r2, r0
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	68da      	ldr	r2, [r3, #12]
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	685b      	ldr	r3, [r3, #4]
 800d93c:	685b      	ldr	r3, [r3, #4]
 800d93e:	1ad3      	subs	r3, r2, r3
 800d940:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	8959      	ldrh	r1, [r3, #10]
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	8b3a      	ldrh	r2, [r7, #24]
 800d94e:	1a8a      	subs	r2, r1, r2
 800d950:	b292      	uxth	r2, r2
 800d952:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	8919      	ldrh	r1, [r3, #8]
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	8b3a      	ldrh	r2, [r7, #24]
 800d960:	1a8a      	subs	r2, r1, r2
 800d962:	b292      	uxth	r2, r2
 800d964:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	685b      	ldr	r3, [r3, #4]
 800d96a:	68fa      	ldr	r2, [r7, #12]
 800d96c:	68d2      	ldr	r2, [r2, #12]
 800d96e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	2200      	movs	r2, #0
 800d976:	741a      	strb	r2, [r3, #16]
 800d978:	2200      	movs	r2, #0
 800d97a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	68db      	ldr	r3, [r3, #12]
 800d980:	f103 0214 	add.w	r2, r3, #20
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	7a9b      	ldrb	r3, [r3, #10]
 800d988:	009b      	lsls	r3, r3, #2
 800d98a:	f003 0304 	and.w	r3, r3, #4
 800d98e:	4413      	add	r3, r2
 800d990:	69fa      	ldr	r2, [r7, #28]
 800d992:	429a      	cmp	r2, r3
 800d994:	d006      	beq.n	800d9a4 <tcp_output_segment+0x16c>
 800d996:	4b10      	ldr	r3, [pc, #64]	; (800d9d8 <tcp_output_segment+0x1a0>)
 800d998:	f240 621c 	movw	r2, #1564	; 0x61c
 800d99c:	4914      	ldr	r1, [pc, #80]	; (800d9f0 <tcp_output_segment+0x1b8>)
 800d99e:	4810      	ldr	r0, [pc, #64]	; (800d9e0 <tcp_output_segment+0x1a8>)
 800d9a0:	f003 fac0 	bl	8010f24 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	6858      	ldr	r0, [r3, #4]
 800d9a8:	68b9      	ldr	r1, [r7, #8]
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	1d1c      	adds	r4, r3, #4
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	7add      	ldrb	r5, [r3, #11]
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	7a9b      	ldrb	r3, [r3, #10]
 800d9b6:	687a      	ldr	r2, [r7, #4]
 800d9b8:	9202      	str	r2, [sp, #8]
 800d9ba:	2206      	movs	r2, #6
 800d9bc:	9201      	str	r2, [sp, #4]
 800d9be:	9300      	str	r3, [sp, #0]
 800d9c0:	462b      	mov	r3, r5
 800d9c2:	4622      	mov	r2, r4
 800d9c4:	f002 fa36 	bl	800fe34 <ip4_output_if>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d9cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3720      	adds	r7, #32
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bdb0      	pop	{r4, r5, r7, pc}
 800d9d8:	08013a34 	.word	0x08013a34
 800d9dc:	08013ff8 	.word	0x08013ff8
 800d9e0:	08013a88 	.word	0x08013a88
 800d9e4:	08014018 	.word	0x08014018
 800d9e8:	08014038 	.word	0x08014038
 800d9ec:	20008724 	.word	0x20008724
 800d9f0:	0801405c 	.word	0x0801405c

0800d9f4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d9f4:	b5b0      	push	{r4, r5, r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d106      	bne.n	800da10 <tcp_rexmit_rto_prepare+0x1c>
 800da02:	4b31      	ldr	r3, [pc, #196]	; (800dac8 <tcp_rexmit_rto_prepare+0xd4>)
 800da04:	f240 6263 	movw	r2, #1635	; 0x663
 800da08:	4930      	ldr	r1, [pc, #192]	; (800dacc <tcp_rexmit_rto_prepare+0xd8>)
 800da0a:	4831      	ldr	r0, [pc, #196]	; (800dad0 <tcp_rexmit_rto_prepare+0xdc>)
 800da0c:	f003 fa8a 	bl	8010f24 <iprintf>

  if (pcb->unacked == NULL) {
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da14:	2b00      	cmp	r3, #0
 800da16:	d102      	bne.n	800da1e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800da18:	f06f 0305 	mvn.w	r3, #5
 800da1c:	e050      	b.n	800dac0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da22:	60fb      	str	r3, [r7, #12]
 800da24:	e00b      	b.n	800da3e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800da26:	68f8      	ldr	r0, [r7, #12]
 800da28:	f7ff fee6 	bl	800d7f8 <tcp_output_segment_busy>
 800da2c:	4603      	mov	r3, r0
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d002      	beq.n	800da38 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800da32:	f06f 0305 	mvn.w	r3, #5
 800da36:	e043      	b.n	800dac0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	60fb      	str	r3, [r7, #12]
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d1ef      	bne.n	800da26 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800da46:	68f8      	ldr	r0, [r7, #12]
 800da48:	f7ff fed6 	bl	800d7f8 <tcp_output_segment_busy>
 800da4c:	4603      	mov	r3, r0
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d002      	beq.n	800da58 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800da52:	f06f 0305 	mvn.w	r3, #5
 800da56:	e033      	b.n	800dac0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2200      	movs	r2, #0
 800da6c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	8b5b      	ldrh	r3, [r3, #26]
 800da72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800da76:	b29a      	uxth	r2, r3
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	4618      	mov	r0, r3
 800da84:	f7f8 fd9f 	bl	80065c6 <lwip_htonl>
 800da88:	4604      	mov	r4, r0
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	891b      	ldrh	r3, [r3, #8]
 800da8e:	461d      	mov	r5, r3
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	68db      	ldr	r3, [r3, #12]
 800da94:	899b      	ldrh	r3, [r3, #12]
 800da96:	b29b      	uxth	r3, r3
 800da98:	4618      	mov	r0, r3
 800da9a:	f7f8 fd7f 	bl	800659c <lwip_htons>
 800da9e:	4603      	mov	r3, r0
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	f003 0303 	and.w	r3, r3, #3
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d001      	beq.n	800daae <tcp_rexmit_rto_prepare+0xba>
 800daaa:	2301      	movs	r3, #1
 800daac:	e000      	b.n	800dab0 <tcp_rexmit_rto_prepare+0xbc>
 800daae:	2300      	movs	r3, #0
 800dab0:	442b      	add	r3, r5
 800dab2:	18e2      	adds	r2, r4, r3
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2200      	movs	r2, #0
 800dabc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800dabe:	2300      	movs	r3, #0
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3710      	adds	r7, #16
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bdb0      	pop	{r4, r5, r7, pc}
 800dac8:	08013a34 	.word	0x08013a34
 800dacc:	08014070 	.word	0x08014070
 800dad0:	08013a88 	.word	0x08013a88

0800dad4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b082      	sub	sp, #8
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d106      	bne.n	800daf0 <tcp_rexmit_rto_commit+0x1c>
 800dae2:	4b0d      	ldr	r3, [pc, #52]	; (800db18 <tcp_rexmit_rto_commit+0x44>)
 800dae4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800dae8:	490c      	ldr	r1, [pc, #48]	; (800db1c <tcp_rexmit_rto_commit+0x48>)
 800daea:	480d      	ldr	r0, [pc, #52]	; (800db20 <tcp_rexmit_rto_commit+0x4c>)
 800daec:	f003 fa1a 	bl	8010f24 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800daf6:	2bff      	cmp	r3, #255	; 0xff
 800daf8:	d007      	beq.n	800db0a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800db00:	3301      	adds	r3, #1
 800db02:	b2da      	uxtb	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f7ff fc80 	bl	800d410 <tcp_output>
}
 800db10:	bf00      	nop
 800db12:	3708      	adds	r7, #8
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	08013a34 	.word	0x08013a34
 800db1c:	08014094 	.word	0x08014094
 800db20:	08013a88 	.word	0x08013a88

0800db24 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d106      	bne.n	800db40 <tcp_rexmit_rto+0x1c>
 800db32:	4b0a      	ldr	r3, [pc, #40]	; (800db5c <tcp_rexmit_rto+0x38>)
 800db34:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800db38:	4909      	ldr	r1, [pc, #36]	; (800db60 <tcp_rexmit_rto+0x3c>)
 800db3a:	480a      	ldr	r0, [pc, #40]	; (800db64 <tcp_rexmit_rto+0x40>)
 800db3c:	f003 f9f2 	bl	8010f24 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f7ff ff57 	bl	800d9f4 <tcp_rexmit_rto_prepare>
 800db46:	4603      	mov	r3, r0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d102      	bne.n	800db52 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f7ff ffc1 	bl	800dad4 <tcp_rexmit_rto_commit>
  }
}
 800db52:	bf00      	nop
 800db54:	3708      	adds	r7, #8
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}
 800db5a:	bf00      	nop
 800db5c:	08013a34 	.word	0x08013a34
 800db60:	080140b8 	.word	0x080140b8
 800db64:	08013a88 	.word	0x08013a88

0800db68 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800db68:	b590      	push	{r4, r7, lr}
 800db6a:	b085      	sub	sp, #20
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d106      	bne.n	800db84 <tcp_rexmit+0x1c>
 800db76:	4b2f      	ldr	r3, [pc, #188]	; (800dc34 <tcp_rexmit+0xcc>)
 800db78:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800db7c:	492e      	ldr	r1, [pc, #184]	; (800dc38 <tcp_rexmit+0xd0>)
 800db7e:	482f      	ldr	r0, [pc, #188]	; (800dc3c <tcp_rexmit+0xd4>)
 800db80:	f003 f9d0 	bl	8010f24 <iprintf>

  if (pcb->unacked == NULL) {
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d102      	bne.n	800db92 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800db8c:	f06f 0305 	mvn.w	r3, #5
 800db90:	e04c      	b.n	800dc2c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db96:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800db98:	68b8      	ldr	r0, [r7, #8]
 800db9a:	f7ff fe2d 	bl	800d7f8 <tcp_output_segment_busy>
 800db9e:	4603      	mov	r3, r0
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d002      	beq.n	800dbaa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800dba4:	f06f 0305 	mvn.w	r3, #5
 800dba8:	e040      	b.n	800dc2c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	336c      	adds	r3, #108	; 0x6c
 800dbb6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800dbb8:	e002      	b.n	800dbc0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d011      	beq.n	800dbec <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	68db      	ldr	r3, [r3, #12]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7f8 fcf8 	bl	80065c6 <lwip_htonl>
 800dbd6:	4604      	mov	r4, r0
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	68db      	ldr	r3, [r3, #12]
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7f8 fcf1 	bl	80065c6 <lwip_htonl>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	dbe6      	blt.n	800dbba <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681a      	ldr	r2, [r3, #0]
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	68ba      	ldr	r2, [r7, #8]
 800dbf8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d103      	bne.n	800dc0a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2200      	movs	r2, #0
 800dc06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dc10:	2bff      	cmp	r3, #255	; 0xff
 800dc12:	d007      	beq.n	800dc24 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	b2da      	uxtb	r2, r3
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2200      	movs	r2, #0
 800dc28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800dc2a:	2300      	movs	r3, #0
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3714      	adds	r7, #20
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd90      	pop	{r4, r7, pc}
 800dc34:	08013a34 	.word	0x08013a34
 800dc38:	080140d4 	.word	0x080140d4
 800dc3c:	08013a88 	.word	0x08013a88

0800dc40 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b082      	sub	sp, #8
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d106      	bne.n	800dc5c <tcp_rexmit_fast+0x1c>
 800dc4e:	4b2a      	ldr	r3, [pc, #168]	; (800dcf8 <tcp_rexmit_fast+0xb8>)
 800dc50:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800dc54:	4929      	ldr	r1, [pc, #164]	; (800dcfc <tcp_rexmit_fast+0xbc>)
 800dc56:	482a      	ldr	r0, [pc, #168]	; (800dd00 <tcp_rexmit_fast+0xc0>)
 800dc58:	f003 f964 	bl	8010f24 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d044      	beq.n	800dcee <tcp_rexmit_fast+0xae>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	8b5b      	ldrh	r3, [r3, #26]
 800dc68:	f003 0304 	and.w	r3, r3, #4
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d13e      	bne.n	800dcee <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f7ff ff79 	bl	800db68 <tcp_rexmit>
 800dc76:	4603      	mov	r3, r0
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d138      	bne.n	800dcee <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	bf28      	it	cs
 800dc8c:	4613      	movcs	r3, r2
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	0fda      	lsrs	r2, r3, #31
 800dc92:	4413      	add	r3, r2
 800dc94:	105b      	asrs	r3, r3, #1
 800dc96:	b29a      	uxth	r2, r3
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dca4:	461a      	mov	r2, r3
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcaa:	005b      	lsls	r3, r3, #1
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d206      	bcs.n	800dcbe <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcb4:	005b      	lsls	r3, r3, #1
 800dcb6:	b29a      	uxth	r2, r3
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcc8:	4619      	mov	r1, r3
 800dcca:	0049      	lsls	r1, r1, #1
 800dccc:	440b      	add	r3, r1
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	4413      	add	r3, r2
 800dcd2:	b29a      	uxth	r2, r3
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	8b5b      	ldrh	r3, [r3, #26]
 800dcde:	f043 0304 	orr.w	r3, r3, #4
 800dce2:	b29a      	uxth	r2, r3
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2200      	movs	r2, #0
 800dcec:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800dcee:	bf00      	nop
 800dcf0:	3708      	adds	r7, #8
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
 800dcf6:	bf00      	nop
 800dcf8:	08013a34 	.word	0x08013a34
 800dcfc:	080140ec 	.word	0x080140ec
 800dd00:	08013a88 	.word	0x08013a88

0800dd04 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b086      	sub	sp, #24
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	60f8      	str	r0, [r7, #12]
 800dd0c:	607b      	str	r3, [r7, #4]
 800dd0e:	460b      	mov	r3, r1
 800dd10:	817b      	strh	r3, [r7, #10]
 800dd12:	4613      	mov	r3, r2
 800dd14:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800dd16:	897a      	ldrh	r2, [r7, #10]
 800dd18:	893b      	ldrh	r3, [r7, #8]
 800dd1a:	4413      	add	r3, r2
 800dd1c:	b29b      	uxth	r3, r3
 800dd1e:	3314      	adds	r3, #20
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dd26:	4619      	mov	r1, r3
 800dd28:	2022      	movs	r0, #34	; 0x22
 800dd2a:	f7f9 fd1b 	bl	8007764 <pbuf_alloc>
 800dd2e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d04d      	beq.n	800ddd2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800dd36:	897b      	ldrh	r3, [r7, #10]
 800dd38:	3313      	adds	r3, #19
 800dd3a:	697a      	ldr	r2, [r7, #20]
 800dd3c:	8952      	ldrh	r2, [r2, #10]
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	db06      	blt.n	800dd50 <tcp_output_alloc_header_common+0x4c>
 800dd42:	4b26      	ldr	r3, [pc, #152]	; (800dddc <tcp_output_alloc_header_common+0xd8>)
 800dd44:	f240 7223 	movw	r2, #1827	; 0x723
 800dd48:	4925      	ldr	r1, [pc, #148]	; (800dde0 <tcp_output_alloc_header_common+0xdc>)
 800dd4a:	4826      	ldr	r0, [pc, #152]	; (800dde4 <tcp_output_alloc_header_common+0xe0>)
 800dd4c:	f003 f8ea 	bl	8010f24 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	685b      	ldr	r3, [r3, #4]
 800dd54:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800dd56:	8c3b      	ldrh	r3, [r7, #32]
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f7f8 fc1f 	bl	800659c <lwip_htons>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	461a      	mov	r2, r3
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800dd66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7f8 fc17 	bl	800659c <lwip_htons>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	461a      	mov	r2, r3
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	687a      	ldr	r2, [r7, #4]
 800dd7a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800dd7c:	68f8      	ldr	r0, [r7, #12]
 800dd7e:	f7f8 fc22 	bl	80065c6 <lwip_htonl>
 800dd82:	4602      	mov	r2, r0
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800dd88:	897b      	ldrh	r3, [r7, #10]
 800dd8a:	089b      	lsrs	r3, r3, #2
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	3305      	adds	r3, #5
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	031b      	lsls	r3, r3, #12
 800dd94:	b29a      	uxth	r2, r3
 800dd96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	4313      	orrs	r3, r2
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7f8 fbfb 	bl	800659c <lwip_htons>
 800dda6:	4603      	mov	r3, r0
 800dda8:	461a      	mov	r2, r3
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ddae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7f8 fbf3 	bl	800659c <lwip_htons>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	461a      	mov	r2, r3
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	741a      	strb	r2, [r3, #16]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	749a      	strb	r2, [r3, #18]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ddd2:	697b      	ldr	r3, [r7, #20]
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3718      	adds	r7, #24
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	08013a34 	.word	0x08013a34
 800dde0:	0801410c 	.word	0x0801410c
 800dde4:	08013a88 	.word	0x08013a88

0800dde8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800dde8:	b5b0      	push	{r4, r5, r7, lr}
 800ddea:	b08a      	sub	sp, #40	; 0x28
 800ddec:	af04      	add	r7, sp, #16
 800ddee:	60f8      	str	r0, [r7, #12]
 800ddf0:	607b      	str	r3, [r7, #4]
 800ddf2:	460b      	mov	r3, r1
 800ddf4:	817b      	strh	r3, [r7, #10]
 800ddf6:	4613      	mov	r3, r2
 800ddf8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d106      	bne.n	800de0e <tcp_output_alloc_header+0x26>
 800de00:	4b15      	ldr	r3, [pc, #84]	; (800de58 <tcp_output_alloc_header+0x70>)
 800de02:	f240 7242 	movw	r2, #1858	; 0x742
 800de06:	4915      	ldr	r1, [pc, #84]	; (800de5c <tcp_output_alloc_header+0x74>)
 800de08:	4815      	ldr	r0, [pc, #84]	; (800de60 <tcp_output_alloc_header+0x78>)
 800de0a:	f003 f88b 	bl	8010f24 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	8adb      	ldrh	r3, [r3, #22]
 800de16:	68fa      	ldr	r2, [r7, #12]
 800de18:	8b12      	ldrh	r2, [r2, #24]
 800de1a:	68f9      	ldr	r1, [r7, #12]
 800de1c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800de1e:	893d      	ldrh	r5, [r7, #8]
 800de20:	897c      	ldrh	r4, [r7, #10]
 800de22:	9103      	str	r1, [sp, #12]
 800de24:	2110      	movs	r1, #16
 800de26:	9102      	str	r1, [sp, #8]
 800de28:	9201      	str	r2, [sp, #4]
 800de2a:	9300      	str	r3, [sp, #0]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	462a      	mov	r2, r5
 800de30:	4621      	mov	r1, r4
 800de32:	f7ff ff67 	bl	800dd04 <tcp_output_alloc_header_common>
 800de36:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d006      	beq.n	800de4c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de42:	68fa      	ldr	r2, [r7, #12]
 800de44:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800de46:	441a      	add	r2, r3
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800de4c:	697b      	ldr	r3, [r7, #20]
}
 800de4e:	4618      	mov	r0, r3
 800de50:	3718      	adds	r7, #24
 800de52:	46bd      	mov	sp, r7
 800de54:	bdb0      	pop	{r4, r5, r7, pc}
 800de56:	bf00      	nop
 800de58:	08013a34 	.word	0x08013a34
 800de5c:	0801413c 	.word	0x0801413c
 800de60:	08013a88 	.word	0x08013a88

0800de64 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b088      	sub	sp, #32
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	4611      	mov	r1, r2
 800de70:	461a      	mov	r2, r3
 800de72:	460b      	mov	r3, r1
 800de74:	71fb      	strb	r3, [r7, #7]
 800de76:	4613      	mov	r3, r2
 800de78:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800de7a:	2300      	movs	r3, #0
 800de7c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d106      	bne.n	800de92 <tcp_output_fill_options+0x2e>
 800de84:	4b13      	ldr	r3, [pc, #76]	; (800ded4 <tcp_output_fill_options+0x70>)
 800de86:	f240 7256 	movw	r2, #1878	; 0x756
 800de8a:	4913      	ldr	r1, [pc, #76]	; (800ded8 <tcp_output_fill_options+0x74>)
 800de8c:	4813      	ldr	r0, [pc, #76]	; (800dedc <tcp_output_fill_options+0x78>)
 800de8e:	f003 f849 	bl	8010f24 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800de98:	69bb      	ldr	r3, [r7, #24]
 800de9a:	3314      	adds	r3, #20
 800de9c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800de9e:	69bb      	ldr	r3, [r7, #24]
 800dea0:	f103 0214 	add.w	r2, r3, #20
 800dea4:	8bfb      	ldrh	r3, [r7, #30]
 800dea6:	009b      	lsls	r3, r3, #2
 800dea8:	4619      	mov	r1, r3
 800deaa:	79fb      	ldrb	r3, [r7, #7]
 800deac:	009b      	lsls	r3, r3, #2
 800deae:	f003 0304 	and.w	r3, r3, #4
 800deb2:	440b      	add	r3, r1
 800deb4:	4413      	add	r3, r2
 800deb6:	697a      	ldr	r2, [r7, #20]
 800deb8:	429a      	cmp	r2, r3
 800deba:	d006      	beq.n	800deca <tcp_output_fill_options+0x66>
 800debc:	4b05      	ldr	r3, [pc, #20]	; (800ded4 <tcp_output_fill_options+0x70>)
 800debe:	f240 7275 	movw	r2, #1909	; 0x775
 800dec2:	4907      	ldr	r1, [pc, #28]	; (800dee0 <tcp_output_fill_options+0x7c>)
 800dec4:	4805      	ldr	r0, [pc, #20]	; (800dedc <tcp_output_fill_options+0x78>)
 800dec6:	f003 f82d 	bl	8010f24 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800deca:	bf00      	nop
 800decc:	3720      	adds	r7, #32
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	08013a34 	.word	0x08013a34
 800ded8:	08014164 	.word	0x08014164
 800dedc:	08013a88 	.word	0x08013a88
 800dee0:	0801405c 	.word	0x0801405c

0800dee4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b08a      	sub	sp, #40	; 0x28
 800dee8:	af04      	add	r7, sp, #16
 800deea:	60f8      	str	r0, [r7, #12]
 800deec:	60b9      	str	r1, [r7, #8]
 800deee:	607a      	str	r2, [r7, #4]
 800def0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d106      	bne.n	800df06 <tcp_output_control_segment+0x22>
 800def8:	4b1c      	ldr	r3, [pc, #112]	; (800df6c <tcp_output_control_segment+0x88>)
 800defa:	f240 7287 	movw	r2, #1927	; 0x787
 800defe:	491c      	ldr	r1, [pc, #112]	; (800df70 <tcp_output_control_segment+0x8c>)
 800df00:	481c      	ldr	r0, [pc, #112]	; (800df74 <tcp_output_control_segment+0x90>)
 800df02:	f003 f80f 	bl	8010f24 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800df06:	683a      	ldr	r2, [r7, #0]
 800df08:	6879      	ldr	r1, [r7, #4]
 800df0a:	68f8      	ldr	r0, [r7, #12]
 800df0c:	f7fe fae8 	bl	800c4e0 <tcp_route>
 800df10:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d102      	bne.n	800df1e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800df18:	23fc      	movs	r3, #252	; 0xfc
 800df1a:	75fb      	strb	r3, [r7, #23]
 800df1c:	e01c      	b.n	800df58 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d006      	beq.n	800df32 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	7adb      	ldrb	r3, [r3, #11]
 800df28:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	7a9b      	ldrb	r3, [r3, #10]
 800df2e:	757b      	strb	r3, [r7, #21]
 800df30:	e003      	b.n	800df3a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800df32:	23ff      	movs	r3, #255	; 0xff
 800df34:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800df36:	2300      	movs	r3, #0
 800df38:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800df3a:	7dba      	ldrb	r2, [r7, #22]
 800df3c:	693b      	ldr	r3, [r7, #16]
 800df3e:	9302      	str	r3, [sp, #8]
 800df40:	2306      	movs	r3, #6
 800df42:	9301      	str	r3, [sp, #4]
 800df44:	7d7b      	ldrb	r3, [r7, #21]
 800df46:	9300      	str	r3, [sp, #0]
 800df48:	4613      	mov	r3, r2
 800df4a:	683a      	ldr	r2, [r7, #0]
 800df4c:	6879      	ldr	r1, [r7, #4]
 800df4e:	68b8      	ldr	r0, [r7, #8]
 800df50:	f001 ff70 	bl	800fe34 <ip4_output_if>
 800df54:	4603      	mov	r3, r0
 800df56:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800df58:	68b8      	ldr	r0, [r7, #8]
 800df5a:	f7f9 fee7 	bl	8007d2c <pbuf_free>
  return err;
 800df5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df62:	4618      	mov	r0, r3
 800df64:	3718      	adds	r7, #24
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop
 800df6c:	08013a34 	.word	0x08013a34
 800df70:	0801418c 	.word	0x0801418c
 800df74:	08013a88 	.word	0x08013a88

0800df78 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800df78:	b590      	push	{r4, r7, lr}
 800df7a:	b08b      	sub	sp, #44	; 0x2c
 800df7c:	af04      	add	r7, sp, #16
 800df7e:	60f8      	str	r0, [r7, #12]
 800df80:	60b9      	str	r1, [r7, #8]
 800df82:	607a      	str	r2, [r7, #4]
 800df84:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d106      	bne.n	800df9a <tcp_rst+0x22>
 800df8c:	4b1f      	ldr	r3, [pc, #124]	; (800e00c <tcp_rst+0x94>)
 800df8e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800df92:	491f      	ldr	r1, [pc, #124]	; (800e010 <tcp_rst+0x98>)
 800df94:	481f      	ldr	r0, [pc, #124]	; (800e014 <tcp_rst+0x9c>)
 800df96:	f002 ffc5 	bl	8010f24 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800df9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d106      	bne.n	800dfae <tcp_rst+0x36>
 800dfa0:	4b1a      	ldr	r3, [pc, #104]	; (800e00c <tcp_rst+0x94>)
 800dfa2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800dfa6:	491c      	ldr	r1, [pc, #112]	; (800e018 <tcp_rst+0xa0>)
 800dfa8:	481a      	ldr	r0, [pc, #104]	; (800e014 <tcp_rst+0x9c>)
 800dfaa:	f002 ffbb 	bl	8010f24 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dfae:	2300      	movs	r3, #0
 800dfb0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800dfb2:	f246 0308 	movw	r3, #24584	; 0x6008
 800dfb6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800dfb8:	7dfb      	ldrb	r3, [r7, #23]
 800dfba:	b29c      	uxth	r4, r3
 800dfbc:	68b8      	ldr	r0, [r7, #8]
 800dfbe:	f7f8 fb02 	bl	80065c6 <lwip_htonl>
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	8abb      	ldrh	r3, [r7, #20]
 800dfc6:	9303      	str	r3, [sp, #12]
 800dfc8:	2314      	movs	r3, #20
 800dfca:	9302      	str	r3, [sp, #8]
 800dfcc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dfce:	9301      	str	r3, [sp, #4]
 800dfd0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dfd2:	9300      	str	r3, [sp, #0]
 800dfd4:	4613      	mov	r3, r2
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	4621      	mov	r1, r4
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f7ff fe92 	bl	800dd04 <tcp_output_alloc_header_common>
 800dfe0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d00c      	beq.n	800e002 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dfe8:	7dfb      	ldrb	r3, [r7, #23]
 800dfea:	2200      	movs	r2, #0
 800dfec:	6939      	ldr	r1, [r7, #16]
 800dfee:	68f8      	ldr	r0, [r7, #12]
 800dff0:	f7ff ff38 	bl	800de64 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800dff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff6:	683a      	ldr	r2, [r7, #0]
 800dff8:	6939      	ldr	r1, [r7, #16]
 800dffa:	68f8      	ldr	r0, [r7, #12]
 800dffc:	f7ff ff72 	bl	800dee4 <tcp_output_control_segment>
 800e000:	e000      	b.n	800e004 <tcp_rst+0x8c>
    return;
 800e002:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e004:	371c      	adds	r7, #28
 800e006:	46bd      	mov	sp, r7
 800e008:	bd90      	pop	{r4, r7, pc}
 800e00a:	bf00      	nop
 800e00c:	08013a34 	.word	0x08013a34
 800e010:	080141b8 	.word	0x080141b8
 800e014:	08013a88 	.word	0x08013a88
 800e018:	080141d4 	.word	0x080141d4

0800e01c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e01c:	b590      	push	{r4, r7, lr}
 800e01e:	b087      	sub	sp, #28
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e024:	2300      	movs	r3, #0
 800e026:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e028:	2300      	movs	r3, #0
 800e02a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d106      	bne.n	800e040 <tcp_send_empty_ack+0x24>
 800e032:	4b28      	ldr	r3, [pc, #160]	; (800e0d4 <tcp_send_empty_ack+0xb8>)
 800e034:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e038:	4927      	ldr	r1, [pc, #156]	; (800e0d8 <tcp_send_empty_ack+0xbc>)
 800e03a:	4828      	ldr	r0, [pc, #160]	; (800e0dc <tcp_send_empty_ack+0xc0>)
 800e03c:	f002 ff72 	bl	8010f24 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e040:	7dfb      	ldrb	r3, [r7, #23]
 800e042:	009b      	lsls	r3, r3, #2
 800e044:	b2db      	uxtb	r3, r3
 800e046:	f003 0304 	and.w	r3, r3, #4
 800e04a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e04c:	7d7b      	ldrb	r3, [r7, #21]
 800e04e:	b29c      	uxth	r4, r3
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e054:	4618      	mov	r0, r3
 800e056:	f7f8 fab6 	bl	80065c6 <lwip_htonl>
 800e05a:	4603      	mov	r3, r0
 800e05c:	2200      	movs	r2, #0
 800e05e:	4621      	mov	r1, r4
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f7ff fec1 	bl	800dde8 <tcp_output_alloc_header>
 800e066:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d109      	bne.n	800e082 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	8b5b      	ldrh	r3, [r3, #26]
 800e072:	f043 0303 	orr.w	r3, r3, #3
 800e076:	b29a      	uxth	r2, r3
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e07c:	f06f 0301 	mvn.w	r3, #1
 800e080:	e023      	b.n	800e0ca <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e082:	7dbb      	ldrb	r3, [r7, #22]
 800e084:	7dfa      	ldrb	r2, [r7, #23]
 800e086:	6939      	ldr	r1, [r7, #16]
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f7ff feeb 	bl	800de64 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e08e:	687a      	ldr	r2, [r7, #4]
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	3304      	adds	r3, #4
 800e094:	6939      	ldr	r1, [r7, #16]
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f7ff ff24 	bl	800dee4 <tcp_output_control_segment>
 800e09c:	4603      	mov	r3, r0
 800e09e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e0a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d007      	beq.n	800e0b8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	8b5b      	ldrh	r3, [r3, #26]
 800e0ac:	f043 0303 	orr.w	r3, r3, #3
 800e0b0:	b29a      	uxth	r2, r3
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	835a      	strh	r2, [r3, #26]
 800e0b6:	e006      	b.n	800e0c6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	8b5b      	ldrh	r3, [r3, #26]
 800e0bc:	f023 0303 	bic.w	r3, r3, #3
 800e0c0:	b29a      	uxth	r2, r3
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e0c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	371c      	adds	r7, #28
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd90      	pop	{r4, r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	08013a34 	.word	0x08013a34
 800e0d8:	080141f0 	.word	0x080141f0
 800e0dc:	08013a88 	.word	0x08013a88

0800e0e0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e0e0:	b590      	push	{r4, r7, lr}
 800e0e2:	b087      	sub	sp, #28
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d106      	bne.n	800e100 <tcp_keepalive+0x20>
 800e0f2:	4b18      	ldr	r3, [pc, #96]	; (800e154 <tcp_keepalive+0x74>)
 800e0f4:	f640 0224 	movw	r2, #2084	; 0x824
 800e0f8:	4917      	ldr	r1, [pc, #92]	; (800e158 <tcp_keepalive+0x78>)
 800e0fa:	4818      	ldr	r0, [pc, #96]	; (800e15c <tcp_keepalive+0x7c>)
 800e0fc:	f002 ff12 	bl	8010f24 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e100:	7dfb      	ldrb	r3, [r7, #23]
 800e102:	b29c      	uxth	r4, r3
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e108:	3b01      	subs	r3, #1
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7f8 fa5b 	bl	80065c6 <lwip_htonl>
 800e110:	4603      	mov	r3, r0
 800e112:	2200      	movs	r2, #0
 800e114:	4621      	mov	r1, r4
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f7ff fe66 	bl	800dde8 <tcp_output_alloc_header>
 800e11c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d102      	bne.n	800e12a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e124:	f04f 33ff 	mov.w	r3, #4294967295
 800e128:	e010      	b.n	800e14c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e12a:	7dfb      	ldrb	r3, [r7, #23]
 800e12c:	2200      	movs	r2, #0
 800e12e:	6939      	ldr	r1, [r7, #16]
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f7ff fe97 	bl	800de64 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e136:	687a      	ldr	r2, [r7, #4]
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	3304      	adds	r3, #4
 800e13c:	6939      	ldr	r1, [r7, #16]
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f7ff fed0 	bl	800dee4 <tcp_output_control_segment>
 800e144:	4603      	mov	r3, r0
 800e146:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e148:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	371c      	adds	r7, #28
 800e150:	46bd      	mov	sp, r7
 800e152:	bd90      	pop	{r4, r7, pc}
 800e154:	08013a34 	.word	0x08013a34
 800e158:	08014210 	.word	0x08014210
 800e15c:	08013a88 	.word	0x08013a88

0800e160 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e160:	b590      	push	{r4, r7, lr}
 800e162:	b08b      	sub	sp, #44	; 0x2c
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e168:	2300      	movs	r3, #0
 800e16a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d106      	bne.n	800e182 <tcp_zero_window_probe+0x22>
 800e174:	4b4c      	ldr	r3, [pc, #304]	; (800e2a8 <tcp_zero_window_probe+0x148>)
 800e176:	f640 024f 	movw	r2, #2127	; 0x84f
 800e17a:	494c      	ldr	r1, [pc, #304]	; (800e2ac <tcp_zero_window_probe+0x14c>)
 800e17c:	484c      	ldr	r0, [pc, #304]	; (800e2b0 <tcp_zero_window_probe+0x150>)
 800e17e:	f002 fed1 	bl	8010f24 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e186:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800e188:	6a3b      	ldr	r3, [r7, #32]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d101      	bne.n	800e192 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800e18e:	2300      	movs	r3, #0
 800e190:	e086      	b.n	800e2a0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e198:	2bff      	cmp	r3, #255	; 0xff
 800e19a:	d007      	beq.n	800e1ac <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	b2da      	uxtb	r2, r3
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e1ac:	6a3b      	ldr	r3, [r7, #32]
 800e1ae:	68db      	ldr	r3, [r3, #12]
 800e1b0:	899b      	ldrh	r3, [r3, #12]
 800e1b2:	b29b      	uxth	r3, r3
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7f8 f9f1 	bl	800659c <lwip_htons>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	f003 0301 	and.w	r3, r3, #1
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d005      	beq.n	800e1d2 <tcp_zero_window_probe+0x72>
 800e1c6:	6a3b      	ldr	r3, [r7, #32]
 800e1c8:	891b      	ldrh	r3, [r3, #8]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d101      	bne.n	800e1d2 <tcp_zero_window_probe+0x72>
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	e000      	b.n	800e1d4 <tcp_zero_window_probe+0x74>
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e1d6:	7ffb      	ldrb	r3, [r7, #31]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	bf0c      	ite	eq
 800e1dc:	2301      	moveq	r3, #1
 800e1de:	2300      	movne	r3, #0
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e1e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1e8:	b299      	uxth	r1, r3
 800e1ea:	6a3b      	ldr	r3, [r7, #32]
 800e1ec:	68db      	ldr	r3, [r3, #12]
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	8bba      	ldrh	r2, [r7, #28]
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f7ff fdf8 	bl	800dde8 <tcp_output_alloc_header>
 800e1f8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e1fa:	69bb      	ldr	r3, [r7, #24]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d102      	bne.n	800e206 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e200:	f04f 33ff 	mov.w	r3, #4294967295
 800e204:	e04c      	b.n	800e2a0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e206:	69bb      	ldr	r3, [r7, #24]
 800e208:	685b      	ldr	r3, [r3, #4]
 800e20a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e20c:	7ffb      	ldrb	r3, [r7, #31]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d011      	beq.n	800e236 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	899b      	ldrh	r3, [r3, #12]
 800e216:	b29b      	uxth	r3, r3
 800e218:	b21b      	sxth	r3, r3
 800e21a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e21e:	b21c      	sxth	r4, r3
 800e220:	2011      	movs	r0, #17
 800e222:	f7f8 f9bb 	bl	800659c <lwip_htons>
 800e226:	4603      	mov	r3, r0
 800e228:	b21b      	sxth	r3, r3
 800e22a:	4323      	orrs	r3, r4
 800e22c:	b21b      	sxth	r3, r3
 800e22e:	b29a      	uxth	r2, r3
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	819a      	strh	r2, [r3, #12]
 800e234:	e010      	b.n	800e258 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e236:	69bb      	ldr	r3, [r7, #24]
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	3314      	adds	r3, #20
 800e23c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e23e:	6a3b      	ldr	r3, [r7, #32]
 800e240:	6858      	ldr	r0, [r3, #4]
 800e242:	6a3b      	ldr	r3, [r7, #32]
 800e244:	685b      	ldr	r3, [r3, #4]
 800e246:	891a      	ldrh	r2, [r3, #8]
 800e248:	6a3b      	ldr	r3, [r7, #32]
 800e24a:	891b      	ldrh	r3, [r3, #8]
 800e24c:	1ad3      	subs	r3, r2, r3
 800e24e:	b29b      	uxth	r3, r3
 800e250:	2201      	movs	r2, #1
 800e252:	6939      	ldr	r1, [r7, #16]
 800e254:	f7f9 ff54 	bl	8008100 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e258:	6a3b      	ldr	r3, [r7, #32]
 800e25a:	68db      	ldr	r3, [r3, #12]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	4618      	mov	r0, r3
 800e260:	f7f8 f9b1 	bl	80065c6 <lwip_htonl>
 800e264:	4603      	mov	r3, r0
 800e266:	3301      	adds	r3, #1
 800e268:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	1ad3      	subs	r3, r2, r3
 800e272:	2b00      	cmp	r3, #0
 800e274:	da02      	bge.n	800e27c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	68fa      	ldr	r2, [r7, #12]
 800e27a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e27c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e280:	2200      	movs	r2, #0
 800e282:	69b9      	ldr	r1, [r7, #24]
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f7ff fded 	bl	800de64 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	3304      	adds	r3, #4
 800e290:	69b9      	ldr	r1, [r7, #24]
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f7ff fe26 	bl	800dee4 <tcp_output_control_segment>
 800e298:	4603      	mov	r3, r0
 800e29a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e29c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	372c      	adds	r7, #44	; 0x2c
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd90      	pop	{r4, r7, pc}
 800e2a8:	08013a34 	.word	0x08013a34
 800e2ac:	0801422c 	.word	0x0801422c
 800e2b0:	08013a88 	.word	0x08013a88

0800e2b4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b082      	sub	sp, #8
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e2bc:	f7fa f80e 	bl	80082dc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e2c0:	4b0a      	ldr	r3, [pc, #40]	; (800e2ec <tcpip_tcp_timer+0x38>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d103      	bne.n	800e2d0 <tcpip_tcp_timer+0x1c>
 800e2c8:	4b09      	ldr	r3, [pc, #36]	; (800e2f0 <tcpip_tcp_timer+0x3c>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d005      	beq.n	800e2dc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	4908      	ldr	r1, [pc, #32]	; (800e2f4 <tcpip_tcp_timer+0x40>)
 800e2d4:	20fa      	movs	r0, #250	; 0xfa
 800e2d6:	f000 f8f3 	bl	800e4c0 <sys_timeout>
 800e2da:	e003      	b.n	800e2e4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e2dc:	4b06      	ldr	r3, [pc, #24]	; (800e2f8 <tcpip_tcp_timer+0x44>)
 800e2de:	2200      	movs	r2, #0
 800e2e0:	601a      	str	r2, [r3, #0]
  }
}
 800e2e2:	bf00      	nop
 800e2e4:	bf00      	nop
 800e2e6:	3708      	adds	r7, #8
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}
 800e2ec:	20008730 	.word	0x20008730
 800e2f0:	20008734 	.word	0x20008734
 800e2f4:	0800e2b5 	.word	0x0800e2b5
 800e2f8:	2000877c 	.word	0x2000877c

0800e2fc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e300:	4b0a      	ldr	r3, [pc, #40]	; (800e32c <tcp_timer_needed+0x30>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d10f      	bne.n	800e328 <tcp_timer_needed+0x2c>
 800e308:	4b09      	ldr	r3, [pc, #36]	; (800e330 <tcp_timer_needed+0x34>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d103      	bne.n	800e318 <tcp_timer_needed+0x1c>
 800e310:	4b08      	ldr	r3, [pc, #32]	; (800e334 <tcp_timer_needed+0x38>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d007      	beq.n	800e328 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e318:	4b04      	ldr	r3, [pc, #16]	; (800e32c <tcp_timer_needed+0x30>)
 800e31a:	2201      	movs	r2, #1
 800e31c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e31e:	2200      	movs	r2, #0
 800e320:	4905      	ldr	r1, [pc, #20]	; (800e338 <tcp_timer_needed+0x3c>)
 800e322:	20fa      	movs	r0, #250	; 0xfa
 800e324:	f000 f8cc 	bl	800e4c0 <sys_timeout>
  }
}
 800e328:	bf00      	nop
 800e32a:	bd80      	pop	{r7, pc}
 800e32c:	2000877c 	.word	0x2000877c
 800e330:	20008730 	.word	0x20008730
 800e334:	20008734 	.word	0x20008734
 800e338:	0800e2b5 	.word	0x0800e2b5

0800e33c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b086      	sub	sp, #24
 800e340:	af00      	add	r7, sp, #0
 800e342:	60f8      	str	r0, [r7, #12]
 800e344:	60b9      	str	r1, [r7, #8]
 800e346:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e348:	2006      	movs	r0, #6
 800e34a:	f7f8 fe09 	bl	8006f60 <memp_malloc>
 800e34e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d109      	bne.n	800e36a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e356:	693b      	ldr	r3, [r7, #16]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d151      	bne.n	800e400 <sys_timeout_abs+0xc4>
 800e35c:	4b2a      	ldr	r3, [pc, #168]	; (800e408 <sys_timeout_abs+0xcc>)
 800e35e:	22be      	movs	r2, #190	; 0xbe
 800e360:	492a      	ldr	r1, [pc, #168]	; (800e40c <sys_timeout_abs+0xd0>)
 800e362:	482b      	ldr	r0, [pc, #172]	; (800e410 <sys_timeout_abs+0xd4>)
 800e364:	f002 fdde 	bl	8010f24 <iprintf>
    return;
 800e368:	e04a      	b.n	800e400 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	2200      	movs	r2, #0
 800e36e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	68ba      	ldr	r2, [r7, #8]
 800e374:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	68fa      	ldr	r2, [r7, #12]
 800e380:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e382:	4b24      	ldr	r3, [pc, #144]	; (800e414 <sys_timeout_abs+0xd8>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d103      	bne.n	800e392 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e38a:	4a22      	ldr	r2, [pc, #136]	; (800e414 <sys_timeout_abs+0xd8>)
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	6013      	str	r3, [r2, #0]
    return;
 800e390:	e037      	b.n	800e402 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	685a      	ldr	r2, [r3, #4]
 800e396:	4b1f      	ldr	r3, [pc, #124]	; (800e414 <sys_timeout_abs+0xd8>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	1ad3      	subs	r3, r2, r3
 800e39e:	0fdb      	lsrs	r3, r3, #31
 800e3a0:	f003 0301 	and.w	r3, r3, #1
 800e3a4:	b2db      	uxtb	r3, r3
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d007      	beq.n	800e3ba <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e3aa:	4b1a      	ldr	r3, [pc, #104]	; (800e414 <sys_timeout_abs+0xd8>)
 800e3ac:	681a      	ldr	r2, [r3, #0]
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e3b2:	4a18      	ldr	r2, [pc, #96]	; (800e414 <sys_timeout_abs+0xd8>)
 800e3b4:	693b      	ldr	r3, [r7, #16]
 800e3b6:	6013      	str	r3, [r2, #0]
 800e3b8:	e023      	b.n	800e402 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e3ba:	4b16      	ldr	r3, [pc, #88]	; (800e414 <sys_timeout_abs+0xd8>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	617b      	str	r3, [r7, #20]
 800e3c0:	e01a      	b.n	800e3f8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d00b      	beq.n	800e3e2 <sys_timeout_abs+0xa6>
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	685a      	ldr	r2, [r3, #4]
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	685b      	ldr	r3, [r3, #4]
 800e3d4:	1ad3      	subs	r3, r2, r3
 800e3d6:	0fdb      	lsrs	r3, r3, #31
 800e3d8:	f003 0301 	and.w	r3, r3, #1
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d007      	beq.n	800e3f2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	681a      	ldr	r2, [r3, #0]
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	693a      	ldr	r2, [r7, #16]
 800e3ee:	601a      	str	r2, [r3, #0]
        break;
 800e3f0:	e007      	b.n	800e402 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	617b      	str	r3, [r7, #20]
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d1e1      	bne.n	800e3c2 <sys_timeout_abs+0x86>
 800e3fe:	e000      	b.n	800e402 <sys_timeout_abs+0xc6>
    return;
 800e400:	bf00      	nop
      }
    }
  }
}
 800e402:	3718      	adds	r7, #24
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}
 800e408:	08014250 	.word	0x08014250
 800e40c:	08014284 	.word	0x08014284
 800e410:	080142c4 	.word	0x080142c4
 800e414:	20008774 	.word	0x20008774

0800e418 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b086      	sub	sp, #24
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e424:	697b      	ldr	r3, [r7, #20]
 800e426:	685b      	ldr	r3, [r3, #4]
 800e428:	4798      	blx	r3

  now = sys_now();
 800e42a:	f7f6 fb4d 	bl	8004ac8 <sys_now>
 800e42e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	681a      	ldr	r2, [r3, #0]
 800e434:	4b0f      	ldr	r3, [pc, #60]	; (800e474 <lwip_cyclic_timer+0x5c>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	4413      	add	r3, r2
 800e43a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e43c:	68fa      	ldr	r2, [r7, #12]
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	1ad3      	subs	r3, r2, r3
 800e442:	0fdb      	lsrs	r3, r3, #31
 800e444:	f003 0301 	and.w	r3, r3, #1
 800e448:	b2db      	uxtb	r3, r3
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d009      	beq.n	800e462 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e44e:	697b      	ldr	r3, [r7, #20]
 800e450:	681a      	ldr	r2, [r3, #0]
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	4413      	add	r3, r2
 800e456:	687a      	ldr	r2, [r7, #4]
 800e458:	4907      	ldr	r1, [pc, #28]	; (800e478 <lwip_cyclic_timer+0x60>)
 800e45a:	4618      	mov	r0, r3
 800e45c:	f7ff ff6e 	bl	800e33c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e460:	e004      	b.n	800e46c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	4904      	ldr	r1, [pc, #16]	; (800e478 <lwip_cyclic_timer+0x60>)
 800e466:	68f8      	ldr	r0, [r7, #12]
 800e468:	f7ff ff68 	bl	800e33c <sys_timeout_abs>
}
 800e46c:	bf00      	nop
 800e46e:	3718      	adds	r7, #24
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}
 800e474:	20008778 	.word	0x20008778
 800e478:	0800e419 	.word	0x0800e419

0800e47c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b082      	sub	sp, #8
 800e480:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e482:	2301      	movs	r3, #1
 800e484:	607b      	str	r3, [r7, #4]
 800e486:	e00e      	b.n	800e4a6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e488:	4a0b      	ldr	r2, [pc, #44]	; (800e4b8 <sys_timeouts_init+0x3c>)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	00db      	lsls	r3, r3, #3
 800e494:	4a08      	ldr	r2, [pc, #32]	; (800e4b8 <sys_timeouts_init+0x3c>)
 800e496:	4413      	add	r3, r2
 800e498:	461a      	mov	r2, r3
 800e49a:	4908      	ldr	r1, [pc, #32]	; (800e4bc <sys_timeouts_init+0x40>)
 800e49c:	f000 f810 	bl	800e4c0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	607b      	str	r3, [r7, #4]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2b02      	cmp	r3, #2
 800e4aa:	d9ed      	bls.n	800e488 <sys_timeouts_init+0xc>
  }
}
 800e4ac:	bf00      	nop
 800e4ae:	bf00      	nop
 800e4b0:	3708      	adds	r7, #8
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	0801530c 	.word	0x0801530c
 800e4bc:	0800e419 	.word	0x0800e419

0800e4c0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b086      	sub	sp, #24
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	60f8      	str	r0, [r7, #12]
 800e4c8:	60b9      	str	r1, [r7, #8]
 800e4ca:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4d2:	d306      	bcc.n	800e4e2 <sys_timeout+0x22>
 800e4d4:	4b0a      	ldr	r3, [pc, #40]	; (800e500 <sys_timeout+0x40>)
 800e4d6:	f240 1229 	movw	r2, #297	; 0x129
 800e4da:	490a      	ldr	r1, [pc, #40]	; (800e504 <sys_timeout+0x44>)
 800e4dc:	480a      	ldr	r0, [pc, #40]	; (800e508 <sys_timeout+0x48>)
 800e4de:	f002 fd21 	bl	8010f24 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e4e2:	f7f6 faf1 	bl	8004ac8 <sys_now>
 800e4e6:	4602      	mov	r2, r0
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	4413      	add	r3, r2
 800e4ec:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e4ee:	687a      	ldr	r2, [r7, #4]
 800e4f0:	68b9      	ldr	r1, [r7, #8]
 800e4f2:	6978      	ldr	r0, [r7, #20]
 800e4f4:	f7ff ff22 	bl	800e33c <sys_timeout_abs>
#endif
}
 800e4f8:	bf00      	nop
 800e4fa:	3718      	adds	r7, #24
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	08014250 	.word	0x08014250
 800e504:	080142ec 	.word	0x080142ec
 800e508:	080142c4 	.word	0x080142c4

0800e50c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b084      	sub	sp, #16
 800e510:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e512:	f7f6 fad9 	bl	8004ac8 <sys_now>
 800e516:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800e518:	4b1a      	ldr	r3, [pc, #104]	; (800e584 <sys_check_timeouts+0x78>)
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	b2db      	uxtb	r3, r3
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d001      	beq.n	800e526 <sys_check_timeouts+0x1a>
 800e522:	f7f9 f8c9 	bl	80076b8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800e526:	4b18      	ldr	r3, [pc, #96]	; (800e588 <sys_check_timeouts+0x7c>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d022      	beq.n	800e578 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	685b      	ldr	r3, [r3, #4]
 800e536:	68fa      	ldr	r2, [r7, #12]
 800e538:	1ad3      	subs	r3, r2, r3
 800e53a:	0fdb      	lsrs	r3, r3, #31
 800e53c:	f003 0301 	and.w	r3, r3, #1
 800e540:	b2db      	uxtb	r3, r3
 800e542:	2b00      	cmp	r3, #0
 800e544:	d11a      	bne.n	800e57c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	4a0f      	ldr	r2, [pc, #60]	; (800e588 <sys_check_timeouts+0x7c>)
 800e54c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	689b      	ldr	r3, [r3, #8]
 800e552:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	68db      	ldr	r3, [r3, #12]
 800e558:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	685b      	ldr	r3, [r3, #4]
 800e55e:	4a0b      	ldr	r2, [pc, #44]	; (800e58c <sys_check_timeouts+0x80>)
 800e560:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e562:	68b9      	ldr	r1, [r7, #8]
 800e564:	2006      	movs	r0, #6
 800e566:	f7f8 fd6b 	bl	8007040 <memp_free>
    if (handler != NULL) {
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d0d3      	beq.n	800e518 <sys_check_timeouts+0xc>
      handler(arg);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6838      	ldr	r0, [r7, #0]
 800e574:	4798      	blx	r3
  do {
 800e576:	e7cf      	b.n	800e518 <sys_check_timeouts+0xc>
      return;
 800e578:	bf00      	nop
 800e57a:	e000      	b.n	800e57e <sys_check_timeouts+0x72>
      return;
 800e57c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e57e:	3710      	adds	r7, #16
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}
 800e584:	20008721 	.word	0x20008721
 800e588:	20008774 	.word	0x20008774
 800e58c:	20008778 	.word	0x20008778

0800e590 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e594:	f002 fcde 	bl	8010f54 <rand>
 800e598:	4603      	mov	r3, r0
 800e59a:	b29b      	uxth	r3, r3
 800e59c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e5a0:	b29b      	uxth	r3, r3
 800e5a2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e5a6:	b29a      	uxth	r2, r3
 800e5a8:	4b01      	ldr	r3, [pc, #4]	; (800e5b0 <udp_init+0x20>)
 800e5aa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e5ac:	bf00      	nop
 800e5ae:	bd80      	pop	{r7, pc}
 800e5b0:	20000058 	.word	0x20000058

0800e5b4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	60f8      	str	r0, [r7, #12]
 800e5bc:	60b9      	str	r1, [r7, #8]
 800e5be:	4613      	mov	r3, r2
 800e5c0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d105      	bne.n	800e5d4 <udp_input_local_match+0x20>
 800e5c8:	4b27      	ldr	r3, [pc, #156]	; (800e668 <udp_input_local_match+0xb4>)
 800e5ca:	2287      	movs	r2, #135	; 0x87
 800e5cc:	4927      	ldr	r1, [pc, #156]	; (800e66c <udp_input_local_match+0xb8>)
 800e5ce:	4828      	ldr	r0, [pc, #160]	; (800e670 <udp_input_local_match+0xbc>)
 800e5d0:	f002 fca8 	bl	8010f24 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d105      	bne.n	800e5e6 <udp_input_local_match+0x32>
 800e5da:	4b23      	ldr	r3, [pc, #140]	; (800e668 <udp_input_local_match+0xb4>)
 800e5dc:	2288      	movs	r2, #136	; 0x88
 800e5de:	4925      	ldr	r1, [pc, #148]	; (800e674 <udp_input_local_match+0xc0>)
 800e5e0:	4823      	ldr	r0, [pc, #140]	; (800e670 <udp_input_local_match+0xbc>)
 800e5e2:	f002 fc9f 	bl	8010f24 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	7a1b      	ldrb	r3, [r3, #8]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d00b      	beq.n	800e606 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	7a1a      	ldrb	r2, [r3, #8]
 800e5f2:	4b21      	ldr	r3, [pc, #132]	; (800e678 <udp_input_local_match+0xc4>)
 800e5f4:	685b      	ldr	r3, [r3, #4]
 800e5f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d001      	beq.n	800e606 <udp_input_local_match+0x52>
    return 0;
 800e602:	2300      	movs	r3, #0
 800e604:	e02b      	b.n	800e65e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e606:	79fb      	ldrb	r3, [r7, #7]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d018      	beq.n	800e63e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d013      	beq.n	800e63a <udp_input_local_match+0x86>
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d00f      	beq.n	800e63a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e61a:	4b17      	ldr	r3, [pc, #92]	; (800e678 <udp_input_local_match+0xc4>)
 800e61c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e61e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e622:	d00a      	beq.n	800e63a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681a      	ldr	r2, [r3, #0]
 800e628:	4b13      	ldr	r3, [pc, #76]	; (800e678 <udp_input_local_match+0xc4>)
 800e62a:	695b      	ldr	r3, [r3, #20]
 800e62c:	405a      	eors	r2, r3
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	3308      	adds	r3, #8
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e636:	2b00      	cmp	r3, #0
 800e638:	d110      	bne.n	800e65c <udp_input_local_match+0xa8>
          return 1;
 800e63a:	2301      	movs	r3, #1
 800e63c:	e00f      	b.n	800e65e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d009      	beq.n	800e658 <udp_input_local_match+0xa4>
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d005      	beq.n	800e658 <udp_input_local_match+0xa4>
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681a      	ldr	r2, [r3, #0]
 800e650:	4b09      	ldr	r3, [pc, #36]	; (800e678 <udp_input_local_match+0xc4>)
 800e652:	695b      	ldr	r3, [r3, #20]
 800e654:	429a      	cmp	r2, r3
 800e656:	d101      	bne.n	800e65c <udp_input_local_match+0xa8>
        return 1;
 800e658:	2301      	movs	r3, #1
 800e65a:	e000      	b.n	800e65e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e65c:	2300      	movs	r3, #0
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3710      	adds	r7, #16
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}
 800e666:	bf00      	nop
 800e668:	08014338 	.word	0x08014338
 800e66c:	08014368 	.word	0x08014368
 800e670:	0801438c 	.word	0x0801438c
 800e674:	080143b4 	.word	0x080143b4
 800e678:	200051b4 	.word	0x200051b4

0800e67c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e67c:	b590      	push	{r4, r7, lr}
 800e67e:	b08d      	sub	sp, #52	; 0x34
 800e680:	af02      	add	r7, sp, #8
 800e682:	6078      	str	r0, [r7, #4]
 800e684:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e686:	2300      	movs	r3, #0
 800e688:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d105      	bne.n	800e69c <udp_input+0x20>
 800e690:	4b7c      	ldr	r3, [pc, #496]	; (800e884 <udp_input+0x208>)
 800e692:	22cf      	movs	r2, #207	; 0xcf
 800e694:	497c      	ldr	r1, [pc, #496]	; (800e888 <udp_input+0x20c>)
 800e696:	487d      	ldr	r0, [pc, #500]	; (800e88c <udp_input+0x210>)
 800e698:	f002 fc44 	bl	8010f24 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d105      	bne.n	800e6ae <udp_input+0x32>
 800e6a2:	4b78      	ldr	r3, [pc, #480]	; (800e884 <udp_input+0x208>)
 800e6a4:	22d0      	movs	r2, #208	; 0xd0
 800e6a6:	497a      	ldr	r1, [pc, #488]	; (800e890 <udp_input+0x214>)
 800e6a8:	4878      	ldr	r0, [pc, #480]	; (800e88c <udp_input+0x210>)
 800e6aa:	f002 fc3b 	bl	8010f24 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	895b      	ldrh	r3, [r3, #10]
 800e6b2:	2b07      	cmp	r3, #7
 800e6b4:	d803      	bhi.n	800e6be <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f7f9 fb38 	bl	8007d2c <pbuf_free>
    goto end;
 800e6bc:	e0de      	b.n	800e87c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	685b      	ldr	r3, [r3, #4]
 800e6c2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e6c4:	4b73      	ldr	r3, [pc, #460]	; (800e894 <udp_input+0x218>)
 800e6c6:	695b      	ldr	r3, [r3, #20]
 800e6c8:	4a72      	ldr	r2, [pc, #456]	; (800e894 <udp_input+0x218>)
 800e6ca:	6812      	ldr	r2, [r2, #0]
 800e6cc:	4611      	mov	r1, r2
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f001 fc88 	bl	800ffe4 <ip4_addr_isbroadcast_u32>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	881b      	ldrh	r3, [r3, #0]
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f7f7 ff5c 	bl	800659c <lwip_htons>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	885b      	ldrh	r3, [r3, #2]
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f7f7 ff54 	bl	800659c <lwip_htons>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e700:	2300      	movs	r3, #0
 800e702:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e704:	4b64      	ldr	r3, [pc, #400]	; (800e898 <udp_input+0x21c>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	627b      	str	r3, [r7, #36]	; 0x24
 800e70a:	e054      	b.n	800e7b6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70e:	8a5b      	ldrh	r3, [r3, #18]
 800e710:	89fa      	ldrh	r2, [r7, #14]
 800e712:	429a      	cmp	r2, r3
 800e714:	d14a      	bne.n	800e7ac <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e716:	7cfb      	ldrb	r3, [r7, #19]
 800e718:	461a      	mov	r2, r3
 800e71a:	6839      	ldr	r1, [r7, #0]
 800e71c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e71e:	f7ff ff49 	bl	800e5b4 <udp_input_local_match>
 800e722:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e724:	2b00      	cmp	r3, #0
 800e726:	d041      	beq.n	800e7ac <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72a:	7c1b      	ldrb	r3, [r3, #16]
 800e72c:	f003 0304 	and.w	r3, r3, #4
 800e730:	2b00      	cmp	r3, #0
 800e732:	d11d      	bne.n	800e770 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e734:	69fb      	ldr	r3, [r7, #28]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d102      	bne.n	800e740 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73c:	61fb      	str	r3, [r7, #28]
 800e73e:	e017      	b.n	800e770 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e740:	7cfb      	ldrb	r3, [r7, #19]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d014      	beq.n	800e770 <udp_input+0xf4>
 800e746:	4b53      	ldr	r3, [pc, #332]	; (800e894 <udp_input+0x218>)
 800e748:	695b      	ldr	r3, [r3, #20]
 800e74a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e74e:	d10f      	bne.n	800e770 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e750:	69fb      	ldr	r3, [r7, #28]
 800e752:	681a      	ldr	r2, [r3, #0]
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	3304      	adds	r3, #4
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	429a      	cmp	r2, r3
 800e75c:	d008      	beq.n	800e770 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e760:	681a      	ldr	r2, [r3, #0]
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	3304      	adds	r3, #4
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d101      	bne.n	800e770 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e772:	8a9b      	ldrh	r3, [r3, #20]
 800e774:	8a3a      	ldrh	r2, [r7, #16]
 800e776:	429a      	cmp	r2, r3
 800e778:	d118      	bne.n	800e7ac <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d005      	beq.n	800e78e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e784:	685a      	ldr	r2, [r3, #4]
 800e786:	4b43      	ldr	r3, [pc, #268]	; (800e894 <udp_input+0x218>)
 800e788:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d10e      	bne.n	800e7ac <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e78e:	6a3b      	ldr	r3, [r7, #32]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d014      	beq.n	800e7be <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e796:	68da      	ldr	r2, [r3, #12]
 800e798:	6a3b      	ldr	r3, [r7, #32]
 800e79a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e79c:	4b3e      	ldr	r3, [pc, #248]	; (800e898 <udp_input+0x21c>)
 800e79e:	681a      	ldr	r2, [r3, #0]
 800e7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e7a4:	4a3c      	ldr	r2, [pc, #240]	; (800e898 <udp_input+0x21c>)
 800e7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e7aa:	e008      	b.n	800e7be <udp_input+0x142>
      }
    }

    prev = pcb;
 800e7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ae:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b2:	68db      	ldr	r3, [r3, #12]
 800e7b4:	627b      	str	r3, [r7, #36]	; 0x24
 800e7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d1a7      	bne.n	800e70c <udp_input+0x90>
 800e7bc:	e000      	b.n	800e7c0 <udp_input+0x144>
        break;
 800e7be:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d101      	bne.n	800e7ca <udp_input+0x14e>
    pcb = uncon_pcb;
 800e7c6:	69fb      	ldr	r3, [r7, #28]
 800e7c8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d002      	beq.n	800e7d6 <udp_input+0x15a>
    for_us = 1;
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	76fb      	strb	r3, [r7, #27]
 800e7d4:	e00a      	b.n	800e7ec <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	3304      	adds	r3, #4
 800e7da:	681a      	ldr	r2, [r3, #0]
 800e7dc:	4b2d      	ldr	r3, [pc, #180]	; (800e894 <udp_input+0x218>)
 800e7de:	695b      	ldr	r3, [r3, #20]
 800e7e0:	429a      	cmp	r2, r3
 800e7e2:	bf0c      	ite	eq
 800e7e4:	2301      	moveq	r3, #1
 800e7e6:	2300      	movne	r3, #0
 800e7e8:	b2db      	uxtb	r3, r3
 800e7ea:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e7ec:	7efb      	ldrb	r3, [r7, #27]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d041      	beq.n	800e876 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e7f2:	2108      	movs	r1, #8
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f7f9 fa13 	bl	8007c20 <pbuf_remove_header>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d00a      	beq.n	800e816 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e800:	4b20      	ldr	r3, [pc, #128]	; (800e884 <udp_input+0x208>)
 800e802:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e806:	4925      	ldr	r1, [pc, #148]	; (800e89c <udp_input+0x220>)
 800e808:	4820      	ldr	r0, [pc, #128]	; (800e88c <udp_input+0x210>)
 800e80a:	f002 fb8b 	bl	8010f24 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f7f9 fa8c 	bl	8007d2c <pbuf_free>
      goto end;
 800e814:	e032      	b.n	800e87c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d012      	beq.n	800e842 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81e:	699b      	ldr	r3, [r3, #24]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d00a      	beq.n	800e83a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e826:	699c      	ldr	r4, [r3, #24]
 800e828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82a:	69d8      	ldr	r0, [r3, #28]
 800e82c:	8a3b      	ldrh	r3, [r7, #16]
 800e82e:	9300      	str	r3, [sp, #0]
 800e830:	4b1b      	ldr	r3, [pc, #108]	; (800e8a0 <udp_input+0x224>)
 800e832:	687a      	ldr	r2, [r7, #4]
 800e834:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e836:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e838:	e021      	b.n	800e87e <udp_input+0x202>
        pbuf_free(p);
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f7f9 fa76 	bl	8007d2c <pbuf_free>
        goto end;
 800e840:	e01c      	b.n	800e87c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e842:	7cfb      	ldrb	r3, [r7, #19]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d112      	bne.n	800e86e <udp_input+0x1f2>
 800e848:	4b12      	ldr	r3, [pc, #72]	; (800e894 <udp_input+0x218>)
 800e84a:	695b      	ldr	r3, [r3, #20]
 800e84c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e850:	2be0      	cmp	r3, #224	; 0xe0
 800e852:	d00c      	beq.n	800e86e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e854:	4b0f      	ldr	r3, [pc, #60]	; (800e894 <udp_input+0x218>)
 800e856:	899b      	ldrh	r3, [r3, #12]
 800e858:	3308      	adds	r3, #8
 800e85a:	b29b      	uxth	r3, r3
 800e85c:	b21b      	sxth	r3, r3
 800e85e:	4619      	mov	r1, r3
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f7f9 fa50 	bl	8007d06 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e866:	2103      	movs	r1, #3
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f001 f89b 	bl	800f9a4 <icmp_dest_unreach>
      pbuf_free(p);
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f7f9 fa5c 	bl	8007d2c <pbuf_free>
  return;
 800e874:	e003      	b.n	800e87e <udp_input+0x202>
    pbuf_free(p);
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f7f9 fa58 	bl	8007d2c <pbuf_free>
  return;
 800e87c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e87e:	372c      	adds	r7, #44	; 0x2c
 800e880:	46bd      	mov	sp, r7
 800e882:	bd90      	pop	{r4, r7, pc}
 800e884:	08014338 	.word	0x08014338
 800e888:	080143dc 	.word	0x080143dc
 800e88c:	0801438c 	.word	0x0801438c
 800e890:	080143f4 	.word	0x080143f4
 800e894:	200051b4 	.word	0x200051b4
 800e898:	20008780 	.word	0x20008780
 800e89c:	08014410 	.word	0x08014410
 800e8a0:	200051c4 	.word	0x200051c4

0800e8a4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b085      	sub	sp, #20
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d01e      	beq.n	800e8f2 <udp_netif_ip_addr_changed+0x4e>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d01a      	beq.n	800e8f2 <udp_netif_ip_addr_changed+0x4e>
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d017      	beq.n	800e8f2 <udp_netif_ip_addr_changed+0x4e>
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d013      	beq.n	800e8f2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e8ca:	4b0d      	ldr	r3, [pc, #52]	; (800e900 <udp_netif_ip_addr_changed+0x5c>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	60fb      	str	r3, [r7, #12]
 800e8d0:	e00c      	b.n	800e8ec <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	681a      	ldr	r2, [r3, #0]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d103      	bne.n	800e8e6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	681a      	ldr	r2, [r3, #0]
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	68db      	ldr	r3, [r3, #12]
 800e8ea:	60fb      	str	r3, [r7, #12]
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d1ef      	bne.n	800e8d2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e8f2:	bf00      	nop
 800e8f4:	3714      	adds	r7, #20
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr
 800e8fe:	bf00      	nop
 800e900:	20008780 	.word	0x20008780

0800e904 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b082      	sub	sp, #8
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e90c:	4915      	ldr	r1, [pc, #84]	; (800e964 <etharp_free_entry+0x60>)
 800e90e:	687a      	ldr	r2, [r7, #4]
 800e910:	4613      	mov	r3, r2
 800e912:	005b      	lsls	r3, r3, #1
 800e914:	4413      	add	r3, r2
 800e916:	00db      	lsls	r3, r3, #3
 800e918:	440b      	add	r3, r1
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d013      	beq.n	800e948 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e920:	4910      	ldr	r1, [pc, #64]	; (800e964 <etharp_free_entry+0x60>)
 800e922:	687a      	ldr	r2, [r7, #4]
 800e924:	4613      	mov	r3, r2
 800e926:	005b      	lsls	r3, r3, #1
 800e928:	4413      	add	r3, r2
 800e92a:	00db      	lsls	r3, r3, #3
 800e92c:	440b      	add	r3, r1
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	4618      	mov	r0, r3
 800e932:	f7f9 f9fb 	bl	8007d2c <pbuf_free>
    arp_table[i].q = NULL;
 800e936:	490b      	ldr	r1, [pc, #44]	; (800e964 <etharp_free_entry+0x60>)
 800e938:	687a      	ldr	r2, [r7, #4]
 800e93a:	4613      	mov	r3, r2
 800e93c:	005b      	lsls	r3, r3, #1
 800e93e:	4413      	add	r3, r2
 800e940:	00db      	lsls	r3, r3, #3
 800e942:	440b      	add	r3, r1
 800e944:	2200      	movs	r2, #0
 800e946:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e948:	4906      	ldr	r1, [pc, #24]	; (800e964 <etharp_free_entry+0x60>)
 800e94a:	687a      	ldr	r2, [r7, #4]
 800e94c:	4613      	mov	r3, r2
 800e94e:	005b      	lsls	r3, r3, #1
 800e950:	4413      	add	r3, r2
 800e952:	00db      	lsls	r3, r3, #3
 800e954:	440b      	add	r3, r1
 800e956:	3314      	adds	r3, #20
 800e958:	2200      	movs	r2, #0
 800e95a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e95c:	bf00      	nop
 800e95e:	3708      	adds	r7, #8
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}
 800e964:	20008784 	.word	0x20008784

0800e968 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e96e:	2300      	movs	r3, #0
 800e970:	607b      	str	r3, [r7, #4]
 800e972:	e096      	b.n	800eaa2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e974:	494f      	ldr	r1, [pc, #316]	; (800eab4 <etharp_tmr+0x14c>)
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	4613      	mov	r3, r2
 800e97a:	005b      	lsls	r3, r3, #1
 800e97c:	4413      	add	r3, r2
 800e97e:	00db      	lsls	r3, r3, #3
 800e980:	440b      	add	r3, r1
 800e982:	3314      	adds	r3, #20
 800e984:	781b      	ldrb	r3, [r3, #0]
 800e986:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e988:	78fb      	ldrb	r3, [r7, #3]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	f000 8086 	beq.w	800ea9c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e990:	4948      	ldr	r1, [pc, #288]	; (800eab4 <etharp_tmr+0x14c>)
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	4613      	mov	r3, r2
 800e996:	005b      	lsls	r3, r3, #1
 800e998:	4413      	add	r3, r2
 800e99a:	00db      	lsls	r3, r3, #3
 800e99c:	440b      	add	r3, r1
 800e99e:	3312      	adds	r3, #18
 800e9a0:	881b      	ldrh	r3, [r3, #0]
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	b298      	uxth	r0, r3
 800e9a6:	4943      	ldr	r1, [pc, #268]	; (800eab4 <etharp_tmr+0x14c>)
 800e9a8:	687a      	ldr	r2, [r7, #4]
 800e9aa:	4613      	mov	r3, r2
 800e9ac:	005b      	lsls	r3, r3, #1
 800e9ae:	4413      	add	r3, r2
 800e9b0:	00db      	lsls	r3, r3, #3
 800e9b2:	440b      	add	r3, r1
 800e9b4:	3312      	adds	r3, #18
 800e9b6:	4602      	mov	r2, r0
 800e9b8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e9ba:	493e      	ldr	r1, [pc, #248]	; (800eab4 <etharp_tmr+0x14c>)
 800e9bc:	687a      	ldr	r2, [r7, #4]
 800e9be:	4613      	mov	r3, r2
 800e9c0:	005b      	lsls	r3, r3, #1
 800e9c2:	4413      	add	r3, r2
 800e9c4:	00db      	lsls	r3, r3, #3
 800e9c6:	440b      	add	r3, r1
 800e9c8:	3312      	adds	r3, #18
 800e9ca:	881b      	ldrh	r3, [r3, #0]
 800e9cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e9d0:	d215      	bcs.n	800e9fe <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e9d2:	4938      	ldr	r1, [pc, #224]	; (800eab4 <etharp_tmr+0x14c>)
 800e9d4:	687a      	ldr	r2, [r7, #4]
 800e9d6:	4613      	mov	r3, r2
 800e9d8:	005b      	lsls	r3, r3, #1
 800e9da:	4413      	add	r3, r2
 800e9dc:	00db      	lsls	r3, r3, #3
 800e9de:	440b      	add	r3, r1
 800e9e0:	3314      	adds	r3, #20
 800e9e2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	d10e      	bne.n	800ea06 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e9e8:	4932      	ldr	r1, [pc, #200]	; (800eab4 <etharp_tmr+0x14c>)
 800e9ea:	687a      	ldr	r2, [r7, #4]
 800e9ec:	4613      	mov	r3, r2
 800e9ee:	005b      	lsls	r3, r3, #1
 800e9f0:	4413      	add	r3, r2
 800e9f2:	00db      	lsls	r3, r3, #3
 800e9f4:	440b      	add	r3, r1
 800e9f6:	3312      	adds	r3, #18
 800e9f8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e9fa:	2b04      	cmp	r3, #4
 800e9fc:	d903      	bls.n	800ea06 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f7ff ff80 	bl	800e904 <etharp_free_entry>
 800ea04:	e04a      	b.n	800ea9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ea06:	492b      	ldr	r1, [pc, #172]	; (800eab4 <etharp_tmr+0x14c>)
 800ea08:	687a      	ldr	r2, [r7, #4]
 800ea0a:	4613      	mov	r3, r2
 800ea0c:	005b      	lsls	r3, r3, #1
 800ea0e:	4413      	add	r3, r2
 800ea10:	00db      	lsls	r3, r3, #3
 800ea12:	440b      	add	r3, r1
 800ea14:	3314      	adds	r3, #20
 800ea16:	781b      	ldrb	r3, [r3, #0]
 800ea18:	2b03      	cmp	r3, #3
 800ea1a:	d10a      	bne.n	800ea32 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ea1c:	4925      	ldr	r1, [pc, #148]	; (800eab4 <etharp_tmr+0x14c>)
 800ea1e:	687a      	ldr	r2, [r7, #4]
 800ea20:	4613      	mov	r3, r2
 800ea22:	005b      	lsls	r3, r3, #1
 800ea24:	4413      	add	r3, r2
 800ea26:	00db      	lsls	r3, r3, #3
 800ea28:	440b      	add	r3, r1
 800ea2a:	3314      	adds	r3, #20
 800ea2c:	2204      	movs	r2, #4
 800ea2e:	701a      	strb	r2, [r3, #0]
 800ea30:	e034      	b.n	800ea9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ea32:	4920      	ldr	r1, [pc, #128]	; (800eab4 <etharp_tmr+0x14c>)
 800ea34:	687a      	ldr	r2, [r7, #4]
 800ea36:	4613      	mov	r3, r2
 800ea38:	005b      	lsls	r3, r3, #1
 800ea3a:	4413      	add	r3, r2
 800ea3c:	00db      	lsls	r3, r3, #3
 800ea3e:	440b      	add	r3, r1
 800ea40:	3314      	adds	r3, #20
 800ea42:	781b      	ldrb	r3, [r3, #0]
 800ea44:	2b04      	cmp	r3, #4
 800ea46:	d10a      	bne.n	800ea5e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ea48:	491a      	ldr	r1, [pc, #104]	; (800eab4 <etharp_tmr+0x14c>)
 800ea4a:	687a      	ldr	r2, [r7, #4]
 800ea4c:	4613      	mov	r3, r2
 800ea4e:	005b      	lsls	r3, r3, #1
 800ea50:	4413      	add	r3, r2
 800ea52:	00db      	lsls	r3, r3, #3
 800ea54:	440b      	add	r3, r1
 800ea56:	3314      	adds	r3, #20
 800ea58:	2202      	movs	r2, #2
 800ea5a:	701a      	strb	r2, [r3, #0]
 800ea5c:	e01e      	b.n	800ea9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ea5e:	4915      	ldr	r1, [pc, #84]	; (800eab4 <etharp_tmr+0x14c>)
 800ea60:	687a      	ldr	r2, [r7, #4]
 800ea62:	4613      	mov	r3, r2
 800ea64:	005b      	lsls	r3, r3, #1
 800ea66:	4413      	add	r3, r2
 800ea68:	00db      	lsls	r3, r3, #3
 800ea6a:	440b      	add	r3, r1
 800ea6c:	3314      	adds	r3, #20
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	d113      	bne.n	800ea9c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ea74:	490f      	ldr	r1, [pc, #60]	; (800eab4 <etharp_tmr+0x14c>)
 800ea76:	687a      	ldr	r2, [r7, #4]
 800ea78:	4613      	mov	r3, r2
 800ea7a:	005b      	lsls	r3, r3, #1
 800ea7c:	4413      	add	r3, r2
 800ea7e:	00db      	lsls	r3, r3, #3
 800ea80:	440b      	add	r3, r1
 800ea82:	3308      	adds	r3, #8
 800ea84:	6818      	ldr	r0, [r3, #0]
 800ea86:	687a      	ldr	r2, [r7, #4]
 800ea88:	4613      	mov	r3, r2
 800ea8a:	005b      	lsls	r3, r3, #1
 800ea8c:	4413      	add	r3, r2
 800ea8e:	00db      	lsls	r3, r3, #3
 800ea90:	4a08      	ldr	r2, [pc, #32]	; (800eab4 <etharp_tmr+0x14c>)
 800ea92:	4413      	add	r3, r2
 800ea94:	3304      	adds	r3, #4
 800ea96:	4619      	mov	r1, r3
 800ea98:	f000 fe6e 	bl	800f778 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	3301      	adds	r3, #1
 800eaa0:	607b      	str	r3, [r7, #4]
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2b09      	cmp	r3, #9
 800eaa6:	f77f af65 	ble.w	800e974 <etharp_tmr+0xc>
      }
    }
  }
}
 800eaaa:	bf00      	nop
 800eaac:	bf00      	nop
 800eaae:	3708      	adds	r7, #8
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	20008784 	.word	0x20008784

0800eab8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b08a      	sub	sp, #40	; 0x28
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	60f8      	str	r0, [r7, #12]
 800eac0:	460b      	mov	r3, r1
 800eac2:	607a      	str	r2, [r7, #4]
 800eac4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800eac6:	230a      	movs	r3, #10
 800eac8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800eaca:	230a      	movs	r3, #10
 800eacc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800eace:	230a      	movs	r3, #10
 800ead0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800ead2:	2300      	movs	r3, #0
 800ead4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ead6:	230a      	movs	r3, #10
 800ead8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800eada:	2300      	movs	r3, #0
 800eadc:	83bb      	strh	r3, [r7, #28]
 800eade:	2300      	movs	r3, #0
 800eae0:	837b      	strh	r3, [r7, #26]
 800eae2:	2300      	movs	r3, #0
 800eae4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eae6:	2300      	movs	r3, #0
 800eae8:	843b      	strh	r3, [r7, #32]
 800eaea:	e0ae      	b.n	800ec4a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800eaec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eaf0:	49a6      	ldr	r1, [pc, #664]	; (800ed8c <etharp_find_entry+0x2d4>)
 800eaf2:	4613      	mov	r3, r2
 800eaf4:	005b      	lsls	r3, r3, #1
 800eaf6:	4413      	add	r3, r2
 800eaf8:	00db      	lsls	r3, r3, #3
 800eafa:	440b      	add	r3, r1
 800eafc:	3314      	adds	r3, #20
 800eafe:	781b      	ldrb	r3, [r3, #0]
 800eb00:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800eb02:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800eb06:	2b0a      	cmp	r3, #10
 800eb08:	d105      	bne.n	800eb16 <etharp_find_entry+0x5e>
 800eb0a:	7dfb      	ldrb	r3, [r7, #23]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d102      	bne.n	800eb16 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800eb10:	8c3b      	ldrh	r3, [r7, #32]
 800eb12:	847b      	strh	r3, [r7, #34]	; 0x22
 800eb14:	e095      	b.n	800ec42 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800eb16:	7dfb      	ldrb	r3, [r7, #23]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	f000 8092 	beq.w	800ec42 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800eb1e:	7dfb      	ldrb	r3, [r7, #23]
 800eb20:	2b01      	cmp	r3, #1
 800eb22:	d009      	beq.n	800eb38 <etharp_find_entry+0x80>
 800eb24:	7dfb      	ldrb	r3, [r7, #23]
 800eb26:	2b01      	cmp	r3, #1
 800eb28:	d806      	bhi.n	800eb38 <etharp_find_entry+0x80>
 800eb2a:	4b99      	ldr	r3, [pc, #612]	; (800ed90 <etharp_find_entry+0x2d8>)
 800eb2c:	f240 1223 	movw	r2, #291	; 0x123
 800eb30:	4998      	ldr	r1, [pc, #608]	; (800ed94 <etharp_find_entry+0x2dc>)
 800eb32:	4899      	ldr	r0, [pc, #612]	; (800ed98 <etharp_find_entry+0x2e0>)
 800eb34:	f002 f9f6 	bl	8010f24 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d020      	beq.n	800eb80 <etharp_find_entry+0xc8>
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	6819      	ldr	r1, [r3, #0]
 800eb42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb46:	4891      	ldr	r0, [pc, #580]	; (800ed8c <etharp_find_entry+0x2d4>)
 800eb48:	4613      	mov	r3, r2
 800eb4a:	005b      	lsls	r3, r3, #1
 800eb4c:	4413      	add	r3, r2
 800eb4e:	00db      	lsls	r3, r3, #3
 800eb50:	4403      	add	r3, r0
 800eb52:	3304      	adds	r3, #4
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	4299      	cmp	r1, r3
 800eb58:	d112      	bne.n	800eb80 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d00c      	beq.n	800eb7a <etharp_find_entry+0xc2>
 800eb60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb64:	4989      	ldr	r1, [pc, #548]	; (800ed8c <etharp_find_entry+0x2d4>)
 800eb66:	4613      	mov	r3, r2
 800eb68:	005b      	lsls	r3, r3, #1
 800eb6a:	4413      	add	r3, r2
 800eb6c:	00db      	lsls	r3, r3, #3
 800eb6e:	440b      	add	r3, r1
 800eb70:	3308      	adds	r3, #8
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	687a      	ldr	r2, [r7, #4]
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d102      	bne.n	800eb80 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800eb7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800eb7e:	e100      	b.n	800ed82 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800eb80:	7dfb      	ldrb	r3, [r7, #23]
 800eb82:	2b01      	cmp	r3, #1
 800eb84:	d140      	bne.n	800ec08 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800eb86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb8a:	4980      	ldr	r1, [pc, #512]	; (800ed8c <etharp_find_entry+0x2d4>)
 800eb8c:	4613      	mov	r3, r2
 800eb8e:	005b      	lsls	r3, r3, #1
 800eb90:	4413      	add	r3, r2
 800eb92:	00db      	lsls	r3, r3, #3
 800eb94:	440b      	add	r3, r1
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d01a      	beq.n	800ebd2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800eb9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eba0:	497a      	ldr	r1, [pc, #488]	; (800ed8c <etharp_find_entry+0x2d4>)
 800eba2:	4613      	mov	r3, r2
 800eba4:	005b      	lsls	r3, r3, #1
 800eba6:	4413      	add	r3, r2
 800eba8:	00db      	lsls	r3, r3, #3
 800ebaa:	440b      	add	r3, r1
 800ebac:	3312      	adds	r3, #18
 800ebae:	881b      	ldrh	r3, [r3, #0]
 800ebb0:	8bba      	ldrh	r2, [r7, #28]
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	d845      	bhi.n	800ec42 <etharp_find_entry+0x18a>
            old_queue = i;
 800ebb6:	8c3b      	ldrh	r3, [r7, #32]
 800ebb8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ebba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ebbe:	4973      	ldr	r1, [pc, #460]	; (800ed8c <etharp_find_entry+0x2d4>)
 800ebc0:	4613      	mov	r3, r2
 800ebc2:	005b      	lsls	r3, r3, #1
 800ebc4:	4413      	add	r3, r2
 800ebc6:	00db      	lsls	r3, r3, #3
 800ebc8:	440b      	add	r3, r1
 800ebca:	3312      	adds	r3, #18
 800ebcc:	881b      	ldrh	r3, [r3, #0]
 800ebce:	83bb      	strh	r3, [r7, #28]
 800ebd0:	e037      	b.n	800ec42 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ebd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ebd6:	496d      	ldr	r1, [pc, #436]	; (800ed8c <etharp_find_entry+0x2d4>)
 800ebd8:	4613      	mov	r3, r2
 800ebda:	005b      	lsls	r3, r3, #1
 800ebdc:	4413      	add	r3, r2
 800ebde:	00db      	lsls	r3, r3, #3
 800ebe0:	440b      	add	r3, r1
 800ebe2:	3312      	adds	r3, #18
 800ebe4:	881b      	ldrh	r3, [r3, #0]
 800ebe6:	8b7a      	ldrh	r2, [r7, #26]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d82a      	bhi.n	800ec42 <etharp_find_entry+0x18a>
            old_pending = i;
 800ebec:	8c3b      	ldrh	r3, [r7, #32]
 800ebee:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800ebf0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ebf4:	4965      	ldr	r1, [pc, #404]	; (800ed8c <etharp_find_entry+0x2d4>)
 800ebf6:	4613      	mov	r3, r2
 800ebf8:	005b      	lsls	r3, r3, #1
 800ebfa:	4413      	add	r3, r2
 800ebfc:	00db      	lsls	r3, r3, #3
 800ebfe:	440b      	add	r3, r1
 800ec00:	3312      	adds	r3, #18
 800ec02:	881b      	ldrh	r3, [r3, #0]
 800ec04:	837b      	strh	r3, [r7, #26]
 800ec06:	e01c      	b.n	800ec42 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ec08:	7dfb      	ldrb	r3, [r7, #23]
 800ec0a:	2b01      	cmp	r3, #1
 800ec0c:	d919      	bls.n	800ec42 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ec0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec12:	495e      	ldr	r1, [pc, #376]	; (800ed8c <etharp_find_entry+0x2d4>)
 800ec14:	4613      	mov	r3, r2
 800ec16:	005b      	lsls	r3, r3, #1
 800ec18:	4413      	add	r3, r2
 800ec1a:	00db      	lsls	r3, r3, #3
 800ec1c:	440b      	add	r3, r1
 800ec1e:	3312      	adds	r3, #18
 800ec20:	881b      	ldrh	r3, [r3, #0]
 800ec22:	8b3a      	ldrh	r2, [r7, #24]
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d80c      	bhi.n	800ec42 <etharp_find_entry+0x18a>
            old_stable = i;
 800ec28:	8c3b      	ldrh	r3, [r7, #32]
 800ec2a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ec2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec30:	4956      	ldr	r1, [pc, #344]	; (800ed8c <etharp_find_entry+0x2d4>)
 800ec32:	4613      	mov	r3, r2
 800ec34:	005b      	lsls	r3, r3, #1
 800ec36:	4413      	add	r3, r2
 800ec38:	00db      	lsls	r3, r3, #3
 800ec3a:	440b      	add	r3, r1
 800ec3c:	3312      	adds	r3, #18
 800ec3e:	881b      	ldrh	r3, [r3, #0]
 800ec40:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ec42:	8c3b      	ldrh	r3, [r7, #32]
 800ec44:	3301      	adds	r3, #1
 800ec46:	b29b      	uxth	r3, r3
 800ec48:	843b      	strh	r3, [r7, #32]
 800ec4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ec4e:	2b09      	cmp	r3, #9
 800ec50:	f77f af4c 	ble.w	800eaec <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ec54:	7afb      	ldrb	r3, [r7, #11]
 800ec56:	f003 0302 	and.w	r3, r3, #2
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d108      	bne.n	800ec70 <etharp_find_entry+0x1b8>
 800ec5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ec62:	2b0a      	cmp	r3, #10
 800ec64:	d107      	bne.n	800ec76 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ec66:	7afb      	ldrb	r3, [r7, #11]
 800ec68:	f003 0301 	and.w	r3, r3, #1
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d102      	bne.n	800ec76 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ec70:	f04f 33ff 	mov.w	r3, #4294967295
 800ec74:	e085      	b.n	800ed82 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ec76:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ec7a:	2b09      	cmp	r3, #9
 800ec7c:	dc02      	bgt.n	800ec84 <etharp_find_entry+0x1cc>
    i = empty;
 800ec7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ec80:	843b      	strh	r3, [r7, #32]
 800ec82:	e039      	b.n	800ecf8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ec84:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ec88:	2b09      	cmp	r3, #9
 800ec8a:	dc14      	bgt.n	800ecb6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800ec8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec8e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ec90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec94:	493d      	ldr	r1, [pc, #244]	; (800ed8c <etharp_find_entry+0x2d4>)
 800ec96:	4613      	mov	r3, r2
 800ec98:	005b      	lsls	r3, r3, #1
 800ec9a:	4413      	add	r3, r2
 800ec9c:	00db      	lsls	r3, r3, #3
 800ec9e:	440b      	add	r3, r1
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d018      	beq.n	800ecd8 <etharp_find_entry+0x220>
 800eca6:	4b3a      	ldr	r3, [pc, #232]	; (800ed90 <etharp_find_entry+0x2d8>)
 800eca8:	f240 126d 	movw	r2, #365	; 0x16d
 800ecac:	493b      	ldr	r1, [pc, #236]	; (800ed9c <etharp_find_entry+0x2e4>)
 800ecae:	483a      	ldr	r0, [pc, #232]	; (800ed98 <etharp_find_entry+0x2e0>)
 800ecb0:	f002 f938 	bl	8010f24 <iprintf>
 800ecb4:	e010      	b.n	800ecd8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ecb6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ecba:	2b09      	cmp	r3, #9
 800ecbc:	dc02      	bgt.n	800ecc4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ecbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ecc0:	843b      	strh	r3, [r7, #32]
 800ecc2:	e009      	b.n	800ecd8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ecc4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ecc8:	2b09      	cmp	r3, #9
 800ecca:	dc02      	bgt.n	800ecd2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800eccc:	8bfb      	ldrh	r3, [r7, #30]
 800ecce:	843b      	strh	r3, [r7, #32]
 800ecd0:	e002      	b.n	800ecd8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ecd2:	f04f 33ff 	mov.w	r3, #4294967295
 800ecd6:	e054      	b.n	800ed82 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ecd8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ecdc:	2b09      	cmp	r3, #9
 800ecde:	dd06      	ble.n	800ecee <etharp_find_entry+0x236>
 800ece0:	4b2b      	ldr	r3, [pc, #172]	; (800ed90 <etharp_find_entry+0x2d8>)
 800ece2:	f240 127f 	movw	r2, #383	; 0x17f
 800ece6:	492e      	ldr	r1, [pc, #184]	; (800eda0 <etharp_find_entry+0x2e8>)
 800ece8:	482b      	ldr	r0, [pc, #172]	; (800ed98 <etharp_find_entry+0x2e0>)
 800ecea:	f002 f91b 	bl	8010f24 <iprintf>
    etharp_free_entry(i);
 800ecee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f7ff fe06 	bl	800e904 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ecf8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ecfc:	2b09      	cmp	r3, #9
 800ecfe:	dd06      	ble.n	800ed0e <etharp_find_entry+0x256>
 800ed00:	4b23      	ldr	r3, [pc, #140]	; (800ed90 <etharp_find_entry+0x2d8>)
 800ed02:	f240 1283 	movw	r2, #387	; 0x183
 800ed06:	4926      	ldr	r1, [pc, #152]	; (800eda0 <etharp_find_entry+0x2e8>)
 800ed08:	4823      	ldr	r0, [pc, #140]	; (800ed98 <etharp_find_entry+0x2e0>)
 800ed0a:	f002 f90b 	bl	8010f24 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ed0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed12:	491e      	ldr	r1, [pc, #120]	; (800ed8c <etharp_find_entry+0x2d4>)
 800ed14:	4613      	mov	r3, r2
 800ed16:	005b      	lsls	r3, r3, #1
 800ed18:	4413      	add	r3, r2
 800ed1a:	00db      	lsls	r3, r3, #3
 800ed1c:	440b      	add	r3, r1
 800ed1e:	3314      	adds	r3, #20
 800ed20:	781b      	ldrb	r3, [r3, #0]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d006      	beq.n	800ed34 <etharp_find_entry+0x27c>
 800ed26:	4b1a      	ldr	r3, [pc, #104]	; (800ed90 <etharp_find_entry+0x2d8>)
 800ed28:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800ed2c:	491d      	ldr	r1, [pc, #116]	; (800eda4 <etharp_find_entry+0x2ec>)
 800ed2e:	481a      	ldr	r0, [pc, #104]	; (800ed98 <etharp_find_entry+0x2e0>)
 800ed30:	f002 f8f8 	bl	8010f24 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d00b      	beq.n	800ed52 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ed3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	6819      	ldr	r1, [r3, #0]
 800ed42:	4812      	ldr	r0, [pc, #72]	; (800ed8c <etharp_find_entry+0x2d4>)
 800ed44:	4613      	mov	r3, r2
 800ed46:	005b      	lsls	r3, r3, #1
 800ed48:	4413      	add	r3, r2
 800ed4a:	00db      	lsls	r3, r3, #3
 800ed4c:	4403      	add	r3, r0
 800ed4e:	3304      	adds	r3, #4
 800ed50:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ed52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed56:	490d      	ldr	r1, [pc, #52]	; (800ed8c <etharp_find_entry+0x2d4>)
 800ed58:	4613      	mov	r3, r2
 800ed5a:	005b      	lsls	r3, r3, #1
 800ed5c:	4413      	add	r3, r2
 800ed5e:	00db      	lsls	r3, r3, #3
 800ed60:	440b      	add	r3, r1
 800ed62:	3312      	adds	r3, #18
 800ed64:	2200      	movs	r2, #0
 800ed66:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ed68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed6c:	4907      	ldr	r1, [pc, #28]	; (800ed8c <etharp_find_entry+0x2d4>)
 800ed6e:	4613      	mov	r3, r2
 800ed70:	005b      	lsls	r3, r3, #1
 800ed72:	4413      	add	r3, r2
 800ed74:	00db      	lsls	r3, r3, #3
 800ed76:	440b      	add	r3, r1
 800ed78:	3308      	adds	r3, #8
 800ed7a:	687a      	ldr	r2, [r7, #4]
 800ed7c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ed7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	3728      	adds	r7, #40	; 0x28
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}
 800ed8a:	bf00      	nop
 800ed8c:	20008784 	.word	0x20008784
 800ed90:	0801469c 	.word	0x0801469c
 800ed94:	080146d4 	.word	0x080146d4
 800ed98:	08014714 	.word	0x08014714
 800ed9c:	0801473c 	.word	0x0801473c
 800eda0:	08014754 	.word	0x08014754
 800eda4:	08014768 	.word	0x08014768

0800eda8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b088      	sub	sp, #32
 800edac:	af02      	add	r7, sp, #8
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	607a      	str	r2, [r7, #4]
 800edb4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800edbc:	2b06      	cmp	r3, #6
 800edbe:	d006      	beq.n	800edce <etharp_update_arp_entry+0x26>
 800edc0:	4b48      	ldr	r3, [pc, #288]	; (800eee4 <etharp_update_arp_entry+0x13c>)
 800edc2:	f240 12a9 	movw	r2, #425	; 0x1a9
 800edc6:	4948      	ldr	r1, [pc, #288]	; (800eee8 <etharp_update_arp_entry+0x140>)
 800edc8:	4848      	ldr	r0, [pc, #288]	; (800eeec <etharp_update_arp_entry+0x144>)
 800edca:	f002 f8ab 	bl	8010f24 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d012      	beq.n	800edfa <etharp_update_arp_entry+0x52>
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d00e      	beq.n	800edfa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	68f9      	ldr	r1, [r7, #12]
 800ede2:	4618      	mov	r0, r3
 800ede4:	f001 f8fe 	bl	800ffe4 <ip4_addr_isbroadcast_u32>
 800ede8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800edea:	2b00      	cmp	r3, #0
 800edec:	d105      	bne.n	800edfa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800edf6:	2be0      	cmp	r3, #224	; 0xe0
 800edf8:	d102      	bne.n	800ee00 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800edfa:	f06f 030f 	mvn.w	r3, #15
 800edfe:	e06c      	b.n	800eeda <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ee00:	78fb      	ldrb	r3, [r7, #3]
 800ee02:	68fa      	ldr	r2, [r7, #12]
 800ee04:	4619      	mov	r1, r3
 800ee06:	68b8      	ldr	r0, [r7, #8]
 800ee08:	f7ff fe56 	bl	800eab8 <etharp_find_entry>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800ee10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	da02      	bge.n	800ee1e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ee18:	8afb      	ldrh	r3, [r7, #22]
 800ee1a:	b25b      	sxtb	r3, r3
 800ee1c:	e05d      	b.n	800eeda <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ee1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee22:	4933      	ldr	r1, [pc, #204]	; (800eef0 <etharp_update_arp_entry+0x148>)
 800ee24:	4613      	mov	r3, r2
 800ee26:	005b      	lsls	r3, r3, #1
 800ee28:	4413      	add	r3, r2
 800ee2a:	00db      	lsls	r3, r3, #3
 800ee2c:	440b      	add	r3, r1
 800ee2e:	3314      	adds	r3, #20
 800ee30:	2202      	movs	r2, #2
 800ee32:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ee34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee38:	492d      	ldr	r1, [pc, #180]	; (800eef0 <etharp_update_arp_entry+0x148>)
 800ee3a:	4613      	mov	r3, r2
 800ee3c:	005b      	lsls	r3, r3, #1
 800ee3e:	4413      	add	r3, r2
 800ee40:	00db      	lsls	r3, r3, #3
 800ee42:	440b      	add	r3, r1
 800ee44:	3308      	adds	r3, #8
 800ee46:	68fa      	ldr	r2, [r7, #12]
 800ee48:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ee4a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee4e:	4613      	mov	r3, r2
 800ee50:	005b      	lsls	r3, r3, #1
 800ee52:	4413      	add	r3, r2
 800ee54:	00db      	lsls	r3, r3, #3
 800ee56:	3308      	adds	r3, #8
 800ee58:	4a25      	ldr	r2, [pc, #148]	; (800eef0 <etharp_update_arp_entry+0x148>)
 800ee5a:	4413      	add	r3, r2
 800ee5c:	3304      	adds	r3, #4
 800ee5e:	2206      	movs	r2, #6
 800ee60:	6879      	ldr	r1, [r7, #4]
 800ee62:	4618      	mov	r0, r3
 800ee64:	f002 f848 	bl	8010ef8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ee68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee6c:	4920      	ldr	r1, [pc, #128]	; (800eef0 <etharp_update_arp_entry+0x148>)
 800ee6e:	4613      	mov	r3, r2
 800ee70:	005b      	lsls	r3, r3, #1
 800ee72:	4413      	add	r3, r2
 800ee74:	00db      	lsls	r3, r3, #3
 800ee76:	440b      	add	r3, r1
 800ee78:	3312      	adds	r3, #18
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ee7e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee82:	491b      	ldr	r1, [pc, #108]	; (800eef0 <etharp_update_arp_entry+0x148>)
 800ee84:	4613      	mov	r3, r2
 800ee86:	005b      	lsls	r3, r3, #1
 800ee88:	4413      	add	r3, r2
 800ee8a:	00db      	lsls	r3, r3, #3
 800ee8c:	440b      	add	r3, r1
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d021      	beq.n	800eed8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ee94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee98:	4915      	ldr	r1, [pc, #84]	; (800eef0 <etharp_update_arp_entry+0x148>)
 800ee9a:	4613      	mov	r3, r2
 800ee9c:	005b      	lsls	r3, r3, #1
 800ee9e:	4413      	add	r3, r2
 800eea0:	00db      	lsls	r3, r3, #3
 800eea2:	440b      	add	r3, r1
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800eea8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eeac:	4910      	ldr	r1, [pc, #64]	; (800eef0 <etharp_update_arp_entry+0x148>)
 800eeae:	4613      	mov	r3, r2
 800eeb0:	005b      	lsls	r3, r3, #1
 800eeb2:	4413      	add	r3, r2
 800eeb4:	00db      	lsls	r3, r3, #3
 800eeb6:	440b      	add	r3, r1
 800eeb8:	2200      	movs	r2, #0
 800eeba:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800eec2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eec6:	9300      	str	r3, [sp, #0]
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6939      	ldr	r1, [r7, #16]
 800eecc:	68f8      	ldr	r0, [r7, #12]
 800eece:	f001 ff97 	bl	8010e00 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800eed2:	6938      	ldr	r0, [r7, #16]
 800eed4:	f7f8 ff2a 	bl	8007d2c <pbuf_free>
  }
  return ERR_OK;
 800eed8:	2300      	movs	r3, #0
}
 800eeda:	4618      	mov	r0, r3
 800eedc:	3718      	adds	r7, #24
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}
 800eee2:	bf00      	nop
 800eee4:	0801469c 	.word	0x0801469c
 800eee8:	08014794 	.word	0x08014794
 800eeec:	08014714 	.word	0x08014714
 800eef0:	20008784 	.word	0x20008784

0800eef4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b084      	sub	sp, #16
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eefc:	2300      	movs	r3, #0
 800eefe:	60fb      	str	r3, [r7, #12]
 800ef00:	e01e      	b.n	800ef40 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800ef02:	4913      	ldr	r1, [pc, #76]	; (800ef50 <etharp_cleanup_netif+0x5c>)
 800ef04:	68fa      	ldr	r2, [r7, #12]
 800ef06:	4613      	mov	r3, r2
 800ef08:	005b      	lsls	r3, r3, #1
 800ef0a:	4413      	add	r3, r2
 800ef0c:	00db      	lsls	r3, r3, #3
 800ef0e:	440b      	add	r3, r1
 800ef10:	3314      	adds	r3, #20
 800ef12:	781b      	ldrb	r3, [r3, #0]
 800ef14:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ef16:	7afb      	ldrb	r3, [r7, #11]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d00e      	beq.n	800ef3a <etharp_cleanup_netif+0x46>
 800ef1c:	490c      	ldr	r1, [pc, #48]	; (800ef50 <etharp_cleanup_netif+0x5c>)
 800ef1e:	68fa      	ldr	r2, [r7, #12]
 800ef20:	4613      	mov	r3, r2
 800ef22:	005b      	lsls	r3, r3, #1
 800ef24:	4413      	add	r3, r2
 800ef26:	00db      	lsls	r3, r3, #3
 800ef28:	440b      	add	r3, r1
 800ef2a:	3308      	adds	r3, #8
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	687a      	ldr	r2, [r7, #4]
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d102      	bne.n	800ef3a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ef34:	68f8      	ldr	r0, [r7, #12]
 800ef36:	f7ff fce5 	bl	800e904 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	60fb      	str	r3, [r7, #12]
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2b09      	cmp	r3, #9
 800ef44:	dddd      	ble.n	800ef02 <etharp_cleanup_netif+0xe>
    }
  }
}
 800ef46:	bf00      	nop
 800ef48:	bf00      	nop
 800ef4a:	3710      	adds	r7, #16
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}
 800ef50:	20008784 	.word	0x20008784

0800ef54 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ef54:	b5b0      	push	{r4, r5, r7, lr}
 800ef56:	b08a      	sub	sp, #40	; 0x28
 800ef58:	af04      	add	r7, sp, #16
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d107      	bne.n	800ef74 <etharp_input+0x20>
 800ef64:	4b3d      	ldr	r3, [pc, #244]	; (800f05c <etharp_input+0x108>)
 800ef66:	f240 228a 	movw	r2, #650	; 0x28a
 800ef6a:	493d      	ldr	r1, [pc, #244]	; (800f060 <etharp_input+0x10c>)
 800ef6c:	483d      	ldr	r0, [pc, #244]	; (800f064 <etharp_input+0x110>)
 800ef6e:	f001 ffd9 	bl	8010f24 <iprintf>
 800ef72:	e06f      	b.n	800f054 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	685b      	ldr	r3, [r3, #4]
 800ef78:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ef7a:	693b      	ldr	r3, [r7, #16]
 800ef7c:	881b      	ldrh	r3, [r3, #0]
 800ef7e:	b29b      	uxth	r3, r3
 800ef80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef84:	d10c      	bne.n	800efa0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ef8a:	2b06      	cmp	r3, #6
 800ef8c:	d108      	bne.n	800efa0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ef92:	2b04      	cmp	r3, #4
 800ef94:	d104      	bne.n	800efa0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ef96:	693b      	ldr	r3, [r7, #16]
 800ef98:	885b      	ldrh	r3, [r3, #2]
 800ef9a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ef9c:	2b08      	cmp	r3, #8
 800ef9e:	d003      	beq.n	800efa8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f7f8 fec3 	bl	8007d2c <pbuf_free>
    return;
 800efa6:	e055      	b.n	800f054 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800efa8:	693b      	ldr	r3, [r7, #16]
 800efaa:	330e      	adds	r3, #14
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	3318      	adds	r3, #24
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	3304      	adds	r3, #4
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d102      	bne.n	800efc8 <etharp_input+0x74>
    for_us = 0;
 800efc2:	2300      	movs	r3, #0
 800efc4:	75fb      	strb	r3, [r7, #23]
 800efc6:	e009      	b.n	800efdc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800efc8:	68ba      	ldr	r2, [r7, #8]
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	3304      	adds	r3, #4
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	bf0c      	ite	eq
 800efd4:	2301      	moveq	r3, #1
 800efd6:	2300      	movne	r3, #0
 800efd8:	b2db      	uxtb	r3, r3
 800efda:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800efdc:	693b      	ldr	r3, [r7, #16]
 800efde:	f103 0208 	add.w	r2, r3, #8
 800efe2:	7dfb      	ldrb	r3, [r7, #23]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d001      	beq.n	800efec <etharp_input+0x98>
 800efe8:	2301      	movs	r3, #1
 800efea:	e000      	b.n	800efee <etharp_input+0x9a>
 800efec:	2302      	movs	r3, #2
 800efee:	f107 010c 	add.w	r1, r7, #12
 800eff2:	6838      	ldr	r0, [r7, #0]
 800eff4:	f7ff fed8 	bl	800eda8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	88db      	ldrh	r3, [r3, #6]
 800effc:	b29b      	uxth	r3, r3
 800effe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f002:	d003      	beq.n	800f00c <etharp_input+0xb8>
 800f004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f008:	d01e      	beq.n	800f048 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f00a:	e020      	b.n	800f04e <etharp_input+0xfa>
      if (for_us) {
 800f00c:	7dfb      	ldrb	r3, [r7, #23]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d01c      	beq.n	800f04c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f028:	693a      	ldr	r2, [r7, #16]
 800f02a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f02c:	2102      	movs	r1, #2
 800f02e:	9103      	str	r1, [sp, #12]
 800f030:	f107 010c 	add.w	r1, r7, #12
 800f034:	9102      	str	r1, [sp, #8]
 800f036:	9201      	str	r2, [sp, #4]
 800f038:	9300      	str	r3, [sp, #0]
 800f03a:	462b      	mov	r3, r5
 800f03c:	4622      	mov	r2, r4
 800f03e:	4601      	mov	r1, r0
 800f040:	6838      	ldr	r0, [r7, #0]
 800f042:	f000 faeb 	bl	800f61c <etharp_raw>
      break;
 800f046:	e001      	b.n	800f04c <etharp_input+0xf8>
      break;
 800f048:	bf00      	nop
 800f04a:	e000      	b.n	800f04e <etharp_input+0xfa>
      break;
 800f04c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f7f8 fe6c 	bl	8007d2c <pbuf_free>
}
 800f054:	3718      	adds	r7, #24
 800f056:	46bd      	mov	sp, r7
 800f058:	bdb0      	pop	{r4, r5, r7, pc}
 800f05a:	bf00      	nop
 800f05c:	0801469c 	.word	0x0801469c
 800f060:	080147ec 	.word	0x080147ec
 800f064:	08014714 	.word	0x08014714

0800f068 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b086      	sub	sp, #24
 800f06c:	af02      	add	r7, sp, #8
 800f06e:	60f8      	str	r0, [r7, #12]
 800f070:	60b9      	str	r1, [r7, #8]
 800f072:	4613      	mov	r3, r2
 800f074:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f076:	79fa      	ldrb	r2, [r7, #7]
 800f078:	4944      	ldr	r1, [pc, #272]	; (800f18c <etharp_output_to_arp_index+0x124>)
 800f07a:	4613      	mov	r3, r2
 800f07c:	005b      	lsls	r3, r3, #1
 800f07e:	4413      	add	r3, r2
 800f080:	00db      	lsls	r3, r3, #3
 800f082:	440b      	add	r3, r1
 800f084:	3314      	adds	r3, #20
 800f086:	781b      	ldrb	r3, [r3, #0]
 800f088:	2b01      	cmp	r3, #1
 800f08a:	d806      	bhi.n	800f09a <etharp_output_to_arp_index+0x32>
 800f08c:	4b40      	ldr	r3, [pc, #256]	; (800f190 <etharp_output_to_arp_index+0x128>)
 800f08e:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f092:	4940      	ldr	r1, [pc, #256]	; (800f194 <etharp_output_to_arp_index+0x12c>)
 800f094:	4840      	ldr	r0, [pc, #256]	; (800f198 <etharp_output_to_arp_index+0x130>)
 800f096:	f001 ff45 	bl	8010f24 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f09a:	79fa      	ldrb	r2, [r7, #7]
 800f09c:	493b      	ldr	r1, [pc, #236]	; (800f18c <etharp_output_to_arp_index+0x124>)
 800f09e:	4613      	mov	r3, r2
 800f0a0:	005b      	lsls	r3, r3, #1
 800f0a2:	4413      	add	r3, r2
 800f0a4:	00db      	lsls	r3, r3, #3
 800f0a6:	440b      	add	r3, r1
 800f0a8:	3314      	adds	r3, #20
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	2b02      	cmp	r3, #2
 800f0ae:	d153      	bne.n	800f158 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f0b0:	79fa      	ldrb	r2, [r7, #7]
 800f0b2:	4936      	ldr	r1, [pc, #216]	; (800f18c <etharp_output_to_arp_index+0x124>)
 800f0b4:	4613      	mov	r3, r2
 800f0b6:	005b      	lsls	r3, r3, #1
 800f0b8:	4413      	add	r3, r2
 800f0ba:	00db      	lsls	r3, r3, #3
 800f0bc:	440b      	add	r3, r1
 800f0be:	3312      	adds	r3, #18
 800f0c0:	881b      	ldrh	r3, [r3, #0]
 800f0c2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f0c6:	d919      	bls.n	800f0fc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f0c8:	79fa      	ldrb	r2, [r7, #7]
 800f0ca:	4613      	mov	r3, r2
 800f0cc:	005b      	lsls	r3, r3, #1
 800f0ce:	4413      	add	r3, r2
 800f0d0:	00db      	lsls	r3, r3, #3
 800f0d2:	4a2e      	ldr	r2, [pc, #184]	; (800f18c <etharp_output_to_arp_index+0x124>)
 800f0d4:	4413      	add	r3, r2
 800f0d6:	3304      	adds	r3, #4
 800f0d8:	4619      	mov	r1, r3
 800f0da:	68f8      	ldr	r0, [r7, #12]
 800f0dc:	f000 fb4c 	bl	800f778 <etharp_request>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d138      	bne.n	800f158 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f0e6:	79fa      	ldrb	r2, [r7, #7]
 800f0e8:	4928      	ldr	r1, [pc, #160]	; (800f18c <etharp_output_to_arp_index+0x124>)
 800f0ea:	4613      	mov	r3, r2
 800f0ec:	005b      	lsls	r3, r3, #1
 800f0ee:	4413      	add	r3, r2
 800f0f0:	00db      	lsls	r3, r3, #3
 800f0f2:	440b      	add	r3, r1
 800f0f4:	3314      	adds	r3, #20
 800f0f6:	2203      	movs	r2, #3
 800f0f8:	701a      	strb	r2, [r3, #0]
 800f0fa:	e02d      	b.n	800f158 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f0fc:	79fa      	ldrb	r2, [r7, #7]
 800f0fe:	4923      	ldr	r1, [pc, #140]	; (800f18c <etharp_output_to_arp_index+0x124>)
 800f100:	4613      	mov	r3, r2
 800f102:	005b      	lsls	r3, r3, #1
 800f104:	4413      	add	r3, r2
 800f106:	00db      	lsls	r3, r3, #3
 800f108:	440b      	add	r3, r1
 800f10a:	3312      	adds	r3, #18
 800f10c:	881b      	ldrh	r3, [r3, #0]
 800f10e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f112:	d321      	bcc.n	800f158 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f114:	79fa      	ldrb	r2, [r7, #7]
 800f116:	4613      	mov	r3, r2
 800f118:	005b      	lsls	r3, r3, #1
 800f11a:	4413      	add	r3, r2
 800f11c:	00db      	lsls	r3, r3, #3
 800f11e:	4a1b      	ldr	r2, [pc, #108]	; (800f18c <etharp_output_to_arp_index+0x124>)
 800f120:	4413      	add	r3, r2
 800f122:	1d19      	adds	r1, r3, #4
 800f124:	79fa      	ldrb	r2, [r7, #7]
 800f126:	4613      	mov	r3, r2
 800f128:	005b      	lsls	r3, r3, #1
 800f12a:	4413      	add	r3, r2
 800f12c:	00db      	lsls	r3, r3, #3
 800f12e:	3308      	adds	r3, #8
 800f130:	4a16      	ldr	r2, [pc, #88]	; (800f18c <etharp_output_to_arp_index+0x124>)
 800f132:	4413      	add	r3, r2
 800f134:	3304      	adds	r3, #4
 800f136:	461a      	mov	r2, r3
 800f138:	68f8      	ldr	r0, [r7, #12]
 800f13a:	f000 fafb 	bl	800f734 <etharp_request_dst>
 800f13e:	4603      	mov	r3, r0
 800f140:	2b00      	cmp	r3, #0
 800f142:	d109      	bne.n	800f158 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f144:	79fa      	ldrb	r2, [r7, #7]
 800f146:	4911      	ldr	r1, [pc, #68]	; (800f18c <etharp_output_to_arp_index+0x124>)
 800f148:	4613      	mov	r3, r2
 800f14a:	005b      	lsls	r3, r3, #1
 800f14c:	4413      	add	r3, r2
 800f14e:	00db      	lsls	r3, r3, #3
 800f150:	440b      	add	r3, r1
 800f152:	3314      	adds	r3, #20
 800f154:	2203      	movs	r2, #3
 800f156:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f15e:	79fa      	ldrb	r2, [r7, #7]
 800f160:	4613      	mov	r3, r2
 800f162:	005b      	lsls	r3, r3, #1
 800f164:	4413      	add	r3, r2
 800f166:	00db      	lsls	r3, r3, #3
 800f168:	3308      	adds	r3, #8
 800f16a:	4a08      	ldr	r2, [pc, #32]	; (800f18c <etharp_output_to_arp_index+0x124>)
 800f16c:	4413      	add	r3, r2
 800f16e:	3304      	adds	r3, #4
 800f170:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f174:	9200      	str	r2, [sp, #0]
 800f176:	460a      	mov	r2, r1
 800f178:	68b9      	ldr	r1, [r7, #8]
 800f17a:	68f8      	ldr	r0, [r7, #12]
 800f17c:	f001 fe40 	bl	8010e00 <ethernet_output>
 800f180:	4603      	mov	r3, r0
}
 800f182:	4618      	mov	r0, r3
 800f184:	3710      	adds	r7, #16
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}
 800f18a:	bf00      	nop
 800f18c:	20008784 	.word	0x20008784
 800f190:	0801469c 	.word	0x0801469c
 800f194:	0801480c 	.word	0x0801480c
 800f198:	08014714 	.word	0x08014714

0800f19c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b08a      	sub	sp, #40	; 0x28
 800f1a0:	af02      	add	r7, sp, #8
 800f1a2:	60f8      	str	r0, [r7, #12]
 800f1a4:	60b9      	str	r1, [r7, #8]
 800f1a6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d106      	bne.n	800f1c0 <etharp_output+0x24>
 800f1b2:	4b73      	ldr	r3, [pc, #460]	; (800f380 <etharp_output+0x1e4>)
 800f1b4:	f240 321e 	movw	r2, #798	; 0x31e
 800f1b8:	4972      	ldr	r1, [pc, #456]	; (800f384 <etharp_output+0x1e8>)
 800f1ba:	4873      	ldr	r0, [pc, #460]	; (800f388 <etharp_output+0x1ec>)
 800f1bc:	f001 feb2 	bl	8010f24 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d106      	bne.n	800f1d4 <etharp_output+0x38>
 800f1c6:	4b6e      	ldr	r3, [pc, #440]	; (800f380 <etharp_output+0x1e4>)
 800f1c8:	f240 321f 	movw	r2, #799	; 0x31f
 800f1cc:	496f      	ldr	r1, [pc, #444]	; (800f38c <etharp_output+0x1f0>)
 800f1ce:	486e      	ldr	r0, [pc, #440]	; (800f388 <etharp_output+0x1ec>)
 800f1d0:	f001 fea8 	bl	8010f24 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d106      	bne.n	800f1e8 <etharp_output+0x4c>
 800f1da:	4b69      	ldr	r3, [pc, #420]	; (800f380 <etharp_output+0x1e4>)
 800f1dc:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f1e0:	496b      	ldr	r1, [pc, #428]	; (800f390 <etharp_output+0x1f4>)
 800f1e2:	4869      	ldr	r0, [pc, #420]	; (800f388 <etharp_output+0x1ec>)
 800f1e4:	f001 fe9e 	bl	8010f24 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	68f9      	ldr	r1, [r7, #12]
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f000 fef8 	bl	800ffe4 <ip4_addr_isbroadcast_u32>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d002      	beq.n	800f200 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f1fa:	4b66      	ldr	r3, [pc, #408]	; (800f394 <etharp_output+0x1f8>)
 800f1fc:	61fb      	str	r3, [r7, #28]
 800f1fe:	e0af      	b.n	800f360 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f208:	2be0      	cmp	r3, #224	; 0xe0
 800f20a:	d118      	bne.n	800f23e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f20c:	2301      	movs	r3, #1
 800f20e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f210:	2300      	movs	r3, #0
 800f212:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f214:	235e      	movs	r3, #94	; 0x5e
 800f216:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	3301      	adds	r3, #1
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f222:	b2db      	uxtb	r3, r3
 800f224:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	3302      	adds	r3, #2
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	3303      	adds	r3, #3
 800f232:	781b      	ldrb	r3, [r3, #0]
 800f234:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f236:	f107 0310 	add.w	r3, r7, #16
 800f23a:	61fb      	str	r3, [r7, #28]
 800f23c:	e090      	b.n	800f360 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681a      	ldr	r2, [r3, #0]
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	3304      	adds	r3, #4
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	405a      	eors	r2, r3
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	3308      	adds	r3, #8
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	4013      	ands	r3, r2
 800f252:	2b00      	cmp	r3, #0
 800f254:	d012      	beq.n	800f27c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f25c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f260:	4293      	cmp	r3, r2
 800f262:	d00b      	beq.n	800f27c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	330c      	adds	r3, #12
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d003      	beq.n	800f276 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	330c      	adds	r3, #12
 800f272:	61bb      	str	r3, [r7, #24]
 800f274:	e002      	b.n	800f27c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f276:	f06f 0303 	mvn.w	r3, #3
 800f27a:	e07d      	b.n	800f378 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f27c:	4b46      	ldr	r3, [pc, #280]	; (800f398 <etharp_output+0x1fc>)
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	4619      	mov	r1, r3
 800f282:	4a46      	ldr	r2, [pc, #280]	; (800f39c <etharp_output+0x200>)
 800f284:	460b      	mov	r3, r1
 800f286:	005b      	lsls	r3, r3, #1
 800f288:	440b      	add	r3, r1
 800f28a:	00db      	lsls	r3, r3, #3
 800f28c:	4413      	add	r3, r2
 800f28e:	3314      	adds	r3, #20
 800f290:	781b      	ldrb	r3, [r3, #0]
 800f292:	2b01      	cmp	r3, #1
 800f294:	d925      	bls.n	800f2e2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f296:	4b40      	ldr	r3, [pc, #256]	; (800f398 <etharp_output+0x1fc>)
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	4619      	mov	r1, r3
 800f29c:	4a3f      	ldr	r2, [pc, #252]	; (800f39c <etharp_output+0x200>)
 800f29e:	460b      	mov	r3, r1
 800f2a0:	005b      	lsls	r3, r3, #1
 800f2a2:	440b      	add	r3, r1
 800f2a4:	00db      	lsls	r3, r3, #3
 800f2a6:	4413      	add	r3, r2
 800f2a8:	3308      	adds	r3, #8
 800f2aa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f2ac:	68fa      	ldr	r2, [r7, #12]
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	d117      	bne.n	800f2e2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f2b2:	69bb      	ldr	r3, [r7, #24]
 800f2b4:	681a      	ldr	r2, [r3, #0]
 800f2b6:	4b38      	ldr	r3, [pc, #224]	; (800f398 <etharp_output+0x1fc>)
 800f2b8:	781b      	ldrb	r3, [r3, #0]
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	4937      	ldr	r1, [pc, #220]	; (800f39c <etharp_output+0x200>)
 800f2be:	4603      	mov	r3, r0
 800f2c0:	005b      	lsls	r3, r3, #1
 800f2c2:	4403      	add	r3, r0
 800f2c4:	00db      	lsls	r3, r3, #3
 800f2c6:	440b      	add	r3, r1
 800f2c8:	3304      	adds	r3, #4
 800f2ca:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	d108      	bne.n	800f2e2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f2d0:	4b31      	ldr	r3, [pc, #196]	; (800f398 <etharp_output+0x1fc>)
 800f2d2:	781b      	ldrb	r3, [r3, #0]
 800f2d4:	461a      	mov	r2, r3
 800f2d6:	68b9      	ldr	r1, [r7, #8]
 800f2d8:	68f8      	ldr	r0, [r7, #12]
 800f2da:	f7ff fec5 	bl	800f068 <etharp_output_to_arp_index>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	e04a      	b.n	800f378 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	75fb      	strb	r3, [r7, #23]
 800f2e6:	e031      	b.n	800f34c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f2e8:	7dfa      	ldrb	r2, [r7, #23]
 800f2ea:	492c      	ldr	r1, [pc, #176]	; (800f39c <etharp_output+0x200>)
 800f2ec:	4613      	mov	r3, r2
 800f2ee:	005b      	lsls	r3, r3, #1
 800f2f0:	4413      	add	r3, r2
 800f2f2:	00db      	lsls	r3, r3, #3
 800f2f4:	440b      	add	r3, r1
 800f2f6:	3314      	adds	r3, #20
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	2b01      	cmp	r3, #1
 800f2fc:	d923      	bls.n	800f346 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f2fe:	7dfa      	ldrb	r2, [r7, #23]
 800f300:	4926      	ldr	r1, [pc, #152]	; (800f39c <etharp_output+0x200>)
 800f302:	4613      	mov	r3, r2
 800f304:	005b      	lsls	r3, r3, #1
 800f306:	4413      	add	r3, r2
 800f308:	00db      	lsls	r3, r3, #3
 800f30a:	440b      	add	r3, r1
 800f30c:	3308      	adds	r3, #8
 800f30e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f310:	68fa      	ldr	r2, [r7, #12]
 800f312:	429a      	cmp	r2, r3
 800f314:	d117      	bne.n	800f346 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f316:	69bb      	ldr	r3, [r7, #24]
 800f318:	6819      	ldr	r1, [r3, #0]
 800f31a:	7dfa      	ldrb	r2, [r7, #23]
 800f31c:	481f      	ldr	r0, [pc, #124]	; (800f39c <etharp_output+0x200>)
 800f31e:	4613      	mov	r3, r2
 800f320:	005b      	lsls	r3, r3, #1
 800f322:	4413      	add	r3, r2
 800f324:	00db      	lsls	r3, r3, #3
 800f326:	4403      	add	r3, r0
 800f328:	3304      	adds	r3, #4
 800f32a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f32c:	4299      	cmp	r1, r3
 800f32e:	d10a      	bne.n	800f346 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f330:	4a19      	ldr	r2, [pc, #100]	; (800f398 <etharp_output+0x1fc>)
 800f332:	7dfb      	ldrb	r3, [r7, #23]
 800f334:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f336:	7dfb      	ldrb	r3, [r7, #23]
 800f338:	461a      	mov	r2, r3
 800f33a:	68b9      	ldr	r1, [r7, #8]
 800f33c:	68f8      	ldr	r0, [r7, #12]
 800f33e:	f7ff fe93 	bl	800f068 <etharp_output_to_arp_index>
 800f342:	4603      	mov	r3, r0
 800f344:	e018      	b.n	800f378 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f346:	7dfb      	ldrb	r3, [r7, #23]
 800f348:	3301      	adds	r3, #1
 800f34a:	75fb      	strb	r3, [r7, #23]
 800f34c:	7dfb      	ldrb	r3, [r7, #23]
 800f34e:	2b09      	cmp	r3, #9
 800f350:	d9ca      	bls.n	800f2e8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f352:	68ba      	ldr	r2, [r7, #8]
 800f354:	69b9      	ldr	r1, [r7, #24]
 800f356:	68f8      	ldr	r0, [r7, #12]
 800f358:	f000 f822 	bl	800f3a0 <etharp_query>
 800f35c:	4603      	mov	r3, r0
 800f35e:	e00b      	b.n	800f378 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f366:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f36a:	9300      	str	r3, [sp, #0]
 800f36c:	69fb      	ldr	r3, [r7, #28]
 800f36e:	68b9      	ldr	r1, [r7, #8]
 800f370:	68f8      	ldr	r0, [r7, #12]
 800f372:	f001 fd45 	bl	8010e00 <ethernet_output>
 800f376:	4603      	mov	r3, r0
}
 800f378:	4618      	mov	r0, r3
 800f37a:	3720      	adds	r7, #32
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}
 800f380:	0801469c 	.word	0x0801469c
 800f384:	080147ec 	.word	0x080147ec
 800f388:	08014714 	.word	0x08014714
 800f38c:	0801483c 	.word	0x0801483c
 800f390:	080147dc 	.word	0x080147dc
 800f394:	08015328 	.word	0x08015328
 800f398:	20008874 	.word	0x20008874
 800f39c:	20008784 	.word	0x20008784

0800f3a0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b08c      	sub	sp, #48	; 0x30
 800f3a4:	af02      	add	r7, sp, #8
 800f3a6:	60f8      	str	r0, [r7, #12]
 800f3a8:	60b9      	str	r1, [r7, #8]
 800f3aa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	3326      	adds	r3, #38	; 0x26
 800f3b0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f3b2:	23ff      	movs	r3, #255	; 0xff
 800f3b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	68f9      	ldr	r1, [r7, #12]
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f000 fe0e 	bl	800ffe4 <ip4_addr_isbroadcast_u32>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d10c      	bne.n	800f3e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f3d6:	2be0      	cmp	r3, #224	; 0xe0
 800f3d8:	d006      	beq.n	800f3e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d003      	beq.n	800f3e8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d102      	bne.n	800f3ee <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f3e8:	f06f 030f 	mvn.w	r3, #15
 800f3ec:	e101      	b.n	800f5f2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f3ee:	68fa      	ldr	r2, [r7, #12]
 800f3f0:	2101      	movs	r1, #1
 800f3f2:	68b8      	ldr	r0, [r7, #8]
 800f3f4:	f7ff fb60 	bl	800eab8 <etharp_find_entry>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f3fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f400:	2b00      	cmp	r3, #0
 800f402:	da02      	bge.n	800f40a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f404:	8a7b      	ldrh	r3, [r7, #18]
 800f406:	b25b      	sxtb	r3, r3
 800f408:	e0f3      	b.n	800f5f2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f40a:	8a7b      	ldrh	r3, [r7, #18]
 800f40c:	2b7e      	cmp	r3, #126	; 0x7e
 800f40e:	d906      	bls.n	800f41e <etharp_query+0x7e>
 800f410:	4b7a      	ldr	r3, [pc, #488]	; (800f5fc <etharp_query+0x25c>)
 800f412:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f416:	497a      	ldr	r1, [pc, #488]	; (800f600 <etharp_query+0x260>)
 800f418:	487a      	ldr	r0, [pc, #488]	; (800f604 <etharp_query+0x264>)
 800f41a:	f001 fd83 	bl	8010f24 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f41e:	8a7b      	ldrh	r3, [r7, #18]
 800f420:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f422:	7c7a      	ldrb	r2, [r7, #17]
 800f424:	4978      	ldr	r1, [pc, #480]	; (800f608 <etharp_query+0x268>)
 800f426:	4613      	mov	r3, r2
 800f428:	005b      	lsls	r3, r3, #1
 800f42a:	4413      	add	r3, r2
 800f42c:	00db      	lsls	r3, r3, #3
 800f42e:	440b      	add	r3, r1
 800f430:	3314      	adds	r3, #20
 800f432:	781b      	ldrb	r3, [r3, #0]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d115      	bne.n	800f464 <etharp_query+0xc4>
    is_new_entry = 1;
 800f438:	2301      	movs	r3, #1
 800f43a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f43c:	7c7a      	ldrb	r2, [r7, #17]
 800f43e:	4972      	ldr	r1, [pc, #456]	; (800f608 <etharp_query+0x268>)
 800f440:	4613      	mov	r3, r2
 800f442:	005b      	lsls	r3, r3, #1
 800f444:	4413      	add	r3, r2
 800f446:	00db      	lsls	r3, r3, #3
 800f448:	440b      	add	r3, r1
 800f44a:	3314      	adds	r3, #20
 800f44c:	2201      	movs	r2, #1
 800f44e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f450:	7c7a      	ldrb	r2, [r7, #17]
 800f452:	496d      	ldr	r1, [pc, #436]	; (800f608 <etharp_query+0x268>)
 800f454:	4613      	mov	r3, r2
 800f456:	005b      	lsls	r3, r3, #1
 800f458:	4413      	add	r3, r2
 800f45a:	00db      	lsls	r3, r3, #3
 800f45c:	440b      	add	r3, r1
 800f45e:	3308      	adds	r3, #8
 800f460:	68fa      	ldr	r2, [r7, #12]
 800f462:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f464:	7c7a      	ldrb	r2, [r7, #17]
 800f466:	4968      	ldr	r1, [pc, #416]	; (800f608 <etharp_query+0x268>)
 800f468:	4613      	mov	r3, r2
 800f46a:	005b      	lsls	r3, r3, #1
 800f46c:	4413      	add	r3, r2
 800f46e:	00db      	lsls	r3, r3, #3
 800f470:	440b      	add	r3, r1
 800f472:	3314      	adds	r3, #20
 800f474:	781b      	ldrb	r3, [r3, #0]
 800f476:	2b01      	cmp	r3, #1
 800f478:	d011      	beq.n	800f49e <etharp_query+0xfe>
 800f47a:	7c7a      	ldrb	r2, [r7, #17]
 800f47c:	4962      	ldr	r1, [pc, #392]	; (800f608 <etharp_query+0x268>)
 800f47e:	4613      	mov	r3, r2
 800f480:	005b      	lsls	r3, r3, #1
 800f482:	4413      	add	r3, r2
 800f484:	00db      	lsls	r3, r3, #3
 800f486:	440b      	add	r3, r1
 800f488:	3314      	adds	r3, #20
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d806      	bhi.n	800f49e <etharp_query+0xfe>
 800f490:	4b5a      	ldr	r3, [pc, #360]	; (800f5fc <etharp_query+0x25c>)
 800f492:	f240 32cd 	movw	r2, #973	; 0x3cd
 800f496:	495d      	ldr	r1, [pc, #372]	; (800f60c <etharp_query+0x26c>)
 800f498:	485a      	ldr	r0, [pc, #360]	; (800f604 <etharp_query+0x264>)
 800f49a:	f001 fd43 	bl	8010f24 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f49e:	6a3b      	ldr	r3, [r7, #32]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d102      	bne.n	800f4aa <etharp_query+0x10a>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d10c      	bne.n	800f4c4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f4aa:	68b9      	ldr	r1, [r7, #8]
 800f4ac:	68f8      	ldr	r0, [r7, #12]
 800f4ae:	f000 f963 	bl	800f778 <etharp_request>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d102      	bne.n	800f4c4 <etharp_query+0x124>
      return result;
 800f4be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f4c2:	e096      	b.n	800f5f2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d106      	bne.n	800f4d8 <etharp_query+0x138>
 800f4ca:	4b4c      	ldr	r3, [pc, #304]	; (800f5fc <etharp_query+0x25c>)
 800f4cc:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f4d0:	494f      	ldr	r1, [pc, #316]	; (800f610 <etharp_query+0x270>)
 800f4d2:	484c      	ldr	r0, [pc, #304]	; (800f604 <etharp_query+0x264>)
 800f4d4:	f001 fd26 	bl	8010f24 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f4d8:	7c7a      	ldrb	r2, [r7, #17]
 800f4da:	494b      	ldr	r1, [pc, #300]	; (800f608 <etharp_query+0x268>)
 800f4dc:	4613      	mov	r3, r2
 800f4de:	005b      	lsls	r3, r3, #1
 800f4e0:	4413      	add	r3, r2
 800f4e2:	00db      	lsls	r3, r3, #3
 800f4e4:	440b      	add	r3, r1
 800f4e6:	3314      	adds	r3, #20
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	2b01      	cmp	r3, #1
 800f4ec:	d917      	bls.n	800f51e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f4ee:	4a49      	ldr	r2, [pc, #292]	; (800f614 <etharp_query+0x274>)
 800f4f0:	7c7b      	ldrb	r3, [r7, #17]
 800f4f2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f4f4:	7c7a      	ldrb	r2, [r7, #17]
 800f4f6:	4613      	mov	r3, r2
 800f4f8:	005b      	lsls	r3, r3, #1
 800f4fa:	4413      	add	r3, r2
 800f4fc:	00db      	lsls	r3, r3, #3
 800f4fe:	3308      	adds	r3, #8
 800f500:	4a41      	ldr	r2, [pc, #260]	; (800f608 <etharp_query+0x268>)
 800f502:	4413      	add	r3, r2
 800f504:	3304      	adds	r3, #4
 800f506:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f50a:	9200      	str	r2, [sp, #0]
 800f50c:	697a      	ldr	r2, [r7, #20]
 800f50e:	6879      	ldr	r1, [r7, #4]
 800f510:	68f8      	ldr	r0, [r7, #12]
 800f512:	f001 fc75 	bl	8010e00 <ethernet_output>
 800f516:	4603      	mov	r3, r0
 800f518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f51c:	e067      	b.n	800f5ee <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f51e:	7c7a      	ldrb	r2, [r7, #17]
 800f520:	4939      	ldr	r1, [pc, #228]	; (800f608 <etharp_query+0x268>)
 800f522:	4613      	mov	r3, r2
 800f524:	005b      	lsls	r3, r3, #1
 800f526:	4413      	add	r3, r2
 800f528:	00db      	lsls	r3, r3, #3
 800f52a:	440b      	add	r3, r1
 800f52c:	3314      	adds	r3, #20
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	2b01      	cmp	r3, #1
 800f532:	d15c      	bne.n	800f5ee <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f534:	2300      	movs	r3, #0
 800f536:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f53c:	e01c      	b.n	800f578 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f53e:	69fb      	ldr	r3, [r7, #28]
 800f540:	895a      	ldrh	r2, [r3, #10]
 800f542:	69fb      	ldr	r3, [r7, #28]
 800f544:	891b      	ldrh	r3, [r3, #8]
 800f546:	429a      	cmp	r2, r3
 800f548:	d10a      	bne.n	800f560 <etharp_query+0x1c0>
 800f54a:	69fb      	ldr	r3, [r7, #28]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d006      	beq.n	800f560 <etharp_query+0x1c0>
 800f552:	4b2a      	ldr	r3, [pc, #168]	; (800f5fc <etharp_query+0x25c>)
 800f554:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f558:	492f      	ldr	r1, [pc, #188]	; (800f618 <etharp_query+0x278>)
 800f55a:	482a      	ldr	r0, [pc, #168]	; (800f604 <etharp_query+0x264>)
 800f55c:	f001 fce2 	bl	8010f24 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f560:	69fb      	ldr	r3, [r7, #28]
 800f562:	7b1b      	ldrb	r3, [r3, #12]
 800f564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d002      	beq.n	800f572 <etharp_query+0x1d2>
        copy_needed = 1;
 800f56c:	2301      	movs	r3, #1
 800f56e:	61bb      	str	r3, [r7, #24]
        break;
 800f570:	e005      	b.n	800f57e <etharp_query+0x1de>
      }
      p = p->next;
 800f572:	69fb      	ldr	r3, [r7, #28]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f578:	69fb      	ldr	r3, [r7, #28]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d1df      	bne.n	800f53e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f57e:	69bb      	ldr	r3, [r7, #24]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d007      	beq.n	800f594 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f584:	687a      	ldr	r2, [r7, #4]
 800f586:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f58a:	200e      	movs	r0, #14
 800f58c:	f7f8 fe2a 	bl	80081e4 <pbuf_clone>
 800f590:	61f8      	str	r0, [r7, #28]
 800f592:	e004      	b.n	800f59e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f598:	69f8      	ldr	r0, [r7, #28]
 800f59a:	f7f8 fc67 	bl	8007e6c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f59e:	69fb      	ldr	r3, [r7, #28]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d021      	beq.n	800f5e8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f5a4:	7c7a      	ldrb	r2, [r7, #17]
 800f5a6:	4918      	ldr	r1, [pc, #96]	; (800f608 <etharp_query+0x268>)
 800f5a8:	4613      	mov	r3, r2
 800f5aa:	005b      	lsls	r3, r3, #1
 800f5ac:	4413      	add	r3, r2
 800f5ae:	00db      	lsls	r3, r3, #3
 800f5b0:	440b      	add	r3, r1
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d00a      	beq.n	800f5ce <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f5b8:	7c7a      	ldrb	r2, [r7, #17]
 800f5ba:	4913      	ldr	r1, [pc, #76]	; (800f608 <etharp_query+0x268>)
 800f5bc:	4613      	mov	r3, r2
 800f5be:	005b      	lsls	r3, r3, #1
 800f5c0:	4413      	add	r3, r2
 800f5c2:	00db      	lsls	r3, r3, #3
 800f5c4:	440b      	add	r3, r1
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f7f8 fbaf 	bl	8007d2c <pbuf_free>
      }
      arp_table[i].q = p;
 800f5ce:	7c7a      	ldrb	r2, [r7, #17]
 800f5d0:	490d      	ldr	r1, [pc, #52]	; (800f608 <etharp_query+0x268>)
 800f5d2:	4613      	mov	r3, r2
 800f5d4:	005b      	lsls	r3, r3, #1
 800f5d6:	4413      	add	r3, r2
 800f5d8:	00db      	lsls	r3, r3, #3
 800f5da:	440b      	add	r3, r1
 800f5dc:	69fa      	ldr	r2, [r7, #28]
 800f5de:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f5e6:	e002      	b.n	800f5ee <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f5e8:	23ff      	movs	r3, #255	; 0xff
 800f5ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f5ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3728      	adds	r7, #40	; 0x28
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}
 800f5fa:	bf00      	nop
 800f5fc:	0801469c 	.word	0x0801469c
 800f600:	08014848 	.word	0x08014848
 800f604:	08014714 	.word	0x08014714
 800f608:	20008784 	.word	0x20008784
 800f60c:	08014858 	.word	0x08014858
 800f610:	0801483c 	.word	0x0801483c
 800f614:	20008874 	.word	0x20008874
 800f618:	08014880 	.word	0x08014880

0800f61c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b08a      	sub	sp, #40	; 0x28
 800f620:	af02      	add	r7, sp, #8
 800f622:	60f8      	str	r0, [r7, #12]
 800f624:	60b9      	str	r1, [r7, #8]
 800f626:	607a      	str	r2, [r7, #4]
 800f628:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f62a:	2300      	movs	r3, #0
 800f62c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d106      	bne.n	800f642 <etharp_raw+0x26>
 800f634:	4b3a      	ldr	r3, [pc, #232]	; (800f720 <etharp_raw+0x104>)
 800f636:	f240 4257 	movw	r2, #1111	; 0x457
 800f63a:	493a      	ldr	r1, [pc, #232]	; (800f724 <etharp_raw+0x108>)
 800f63c:	483a      	ldr	r0, [pc, #232]	; (800f728 <etharp_raw+0x10c>)
 800f63e:	f001 fc71 	bl	8010f24 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f642:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f646:	211c      	movs	r1, #28
 800f648:	200e      	movs	r0, #14
 800f64a:	f7f8 f88b 	bl	8007764 <pbuf_alloc>
 800f64e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f650:	69bb      	ldr	r3, [r7, #24]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d102      	bne.n	800f65c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f656:	f04f 33ff 	mov.w	r3, #4294967295
 800f65a:	e05d      	b.n	800f718 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f65c:	69bb      	ldr	r3, [r7, #24]
 800f65e:	895b      	ldrh	r3, [r3, #10]
 800f660:	2b1b      	cmp	r3, #27
 800f662:	d806      	bhi.n	800f672 <etharp_raw+0x56>
 800f664:	4b2e      	ldr	r3, [pc, #184]	; (800f720 <etharp_raw+0x104>)
 800f666:	f240 4262 	movw	r2, #1122	; 0x462
 800f66a:	4930      	ldr	r1, [pc, #192]	; (800f72c <etharp_raw+0x110>)
 800f66c:	482e      	ldr	r0, [pc, #184]	; (800f728 <etharp_raw+0x10c>)
 800f66e:	f001 fc59 	bl	8010f24 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f672:	69bb      	ldr	r3, [r7, #24]
 800f674:	685b      	ldr	r3, [r3, #4]
 800f676:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f678:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7f6 ff8e 	bl	800659c <lwip_htons>
 800f680:	4603      	mov	r3, r0
 800f682:	461a      	mov	r2, r3
 800f684:	697b      	ldr	r3, [r7, #20]
 800f686:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f68e:	2b06      	cmp	r3, #6
 800f690:	d006      	beq.n	800f6a0 <etharp_raw+0x84>
 800f692:	4b23      	ldr	r3, [pc, #140]	; (800f720 <etharp_raw+0x104>)
 800f694:	f240 4269 	movw	r2, #1129	; 0x469
 800f698:	4925      	ldr	r1, [pc, #148]	; (800f730 <etharp_raw+0x114>)
 800f69a:	4823      	ldr	r0, [pc, #140]	; (800f728 <etharp_raw+0x10c>)
 800f69c:	f001 fc42 	bl	8010f24 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f6a0:	697b      	ldr	r3, [r7, #20]
 800f6a2:	3308      	adds	r3, #8
 800f6a4:	2206      	movs	r2, #6
 800f6a6:	6839      	ldr	r1, [r7, #0]
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f001 fc25 	bl	8010ef8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	3312      	adds	r3, #18
 800f6b2:	2206      	movs	r2, #6
 800f6b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f001 fc1e 	bl	8010ef8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	330e      	adds	r3, #14
 800f6c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6c2:	6812      	ldr	r2, [r2, #0]
 800f6c4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	3318      	adds	r3, #24
 800f6ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6cc:	6812      	ldr	r2, [r2, #0]
 800f6ce:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f6d0:	697b      	ldr	r3, [r7, #20]
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	701a      	strb	r2, [r3, #0]
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	f042 0201 	orr.w	r2, r2, #1
 800f6dc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f6de:	697b      	ldr	r3, [r7, #20]
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	f042 0208 	orr.w	r2, r2, #8
 800f6e6:	709a      	strb	r2, [r3, #2]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	2206      	movs	r2, #6
 800f6f0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	2204      	movs	r2, #4
 800f6f6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f6f8:	f640 0306 	movw	r3, #2054	; 0x806
 800f6fc:	9300      	str	r3, [sp, #0]
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	68ba      	ldr	r2, [r7, #8]
 800f702:	69b9      	ldr	r1, [r7, #24]
 800f704:	68f8      	ldr	r0, [r7, #12]
 800f706:	f001 fb7b 	bl	8010e00 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f70a:	69b8      	ldr	r0, [r7, #24]
 800f70c:	f7f8 fb0e 	bl	8007d2c <pbuf_free>
  p = NULL;
 800f710:	2300      	movs	r3, #0
 800f712:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f714:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f718:	4618      	mov	r0, r3
 800f71a:	3720      	adds	r7, #32
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}
 800f720:	0801469c 	.word	0x0801469c
 800f724:	080147ec 	.word	0x080147ec
 800f728:	08014714 	.word	0x08014714
 800f72c:	0801489c 	.word	0x0801489c
 800f730:	080148d0 	.word	0x080148d0

0800f734 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b088      	sub	sp, #32
 800f738:	af04      	add	r7, sp, #16
 800f73a:	60f8      	str	r0, [r7, #12]
 800f73c:	60b9      	str	r1, [r7, #8]
 800f73e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f750:	2201      	movs	r2, #1
 800f752:	9203      	str	r2, [sp, #12]
 800f754:	68ba      	ldr	r2, [r7, #8]
 800f756:	9202      	str	r2, [sp, #8]
 800f758:	4a06      	ldr	r2, [pc, #24]	; (800f774 <etharp_request_dst+0x40>)
 800f75a:	9201      	str	r2, [sp, #4]
 800f75c:	9300      	str	r3, [sp, #0]
 800f75e:	4603      	mov	r3, r0
 800f760:	687a      	ldr	r2, [r7, #4]
 800f762:	68f8      	ldr	r0, [r7, #12]
 800f764:	f7ff ff5a 	bl	800f61c <etharp_raw>
 800f768:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	3710      	adds	r7, #16
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}
 800f772:	bf00      	nop
 800f774:	08015330 	.word	0x08015330

0800f778 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b082      	sub	sp, #8
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
 800f780:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f782:	4a05      	ldr	r2, [pc, #20]	; (800f798 <etharp_request+0x20>)
 800f784:	6839      	ldr	r1, [r7, #0]
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f7ff ffd4 	bl	800f734 <etharp_request_dst>
 800f78c:	4603      	mov	r3, r0
}
 800f78e:	4618      	mov	r0, r3
 800f790:	3708      	adds	r7, #8
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}
 800f796:	bf00      	nop
 800f798:	08015328 	.word	0x08015328

0800f79c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b08e      	sub	sp, #56	; 0x38
 800f7a0:	af04      	add	r7, sp, #16
 800f7a2:	6078      	str	r0, [r7, #4]
 800f7a4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f7a6:	4b79      	ldr	r3, [pc, #484]	; (800f98c <icmp_input+0x1f0>)
 800f7a8:	689b      	ldr	r3, [r3, #8]
 800f7aa:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800f7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ae:	781b      	ldrb	r3, [r3, #0]
 800f7b0:	f003 030f 	and.w	r3, r3, #15
 800f7b4:	b2db      	uxtb	r3, r3
 800f7b6:	009b      	lsls	r3, r3, #2
 800f7b8:	b2db      	uxtb	r3, r3
 800f7ba:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800f7bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f7be:	2b13      	cmp	r3, #19
 800f7c0:	f240 80cd 	bls.w	800f95e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	895b      	ldrh	r3, [r3, #10]
 800f7c8:	2b03      	cmp	r3, #3
 800f7ca:	f240 80ca 	bls.w	800f962 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	685b      	ldr	r3, [r3, #4]
 800f7d2:	781b      	ldrb	r3, [r3, #0]
 800f7d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f7d8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	f000 80b7 	beq.w	800f950 <icmp_input+0x1b4>
 800f7e2:	2b08      	cmp	r3, #8
 800f7e4:	f040 80b7 	bne.w	800f956 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f7e8:	4b69      	ldr	r3, [pc, #420]	; (800f990 <icmp_input+0x1f4>)
 800f7ea:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f7ec:	4b67      	ldr	r3, [pc, #412]	; (800f98c <icmp_input+0x1f0>)
 800f7ee:	695b      	ldr	r3, [r3, #20]
 800f7f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f7f4:	2be0      	cmp	r3, #224	; 0xe0
 800f7f6:	f000 80bb 	beq.w	800f970 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f7fa:	4b64      	ldr	r3, [pc, #400]	; (800f98c <icmp_input+0x1f0>)
 800f7fc:	695b      	ldr	r3, [r3, #20]
 800f7fe:	4a63      	ldr	r2, [pc, #396]	; (800f98c <icmp_input+0x1f0>)
 800f800:	6812      	ldr	r2, [r2, #0]
 800f802:	4611      	mov	r1, r2
 800f804:	4618      	mov	r0, r3
 800f806:	f000 fbed 	bl	800ffe4 <ip4_addr_isbroadcast_u32>
 800f80a:	4603      	mov	r3, r0
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	f040 80b1 	bne.w	800f974 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	891b      	ldrh	r3, [r3, #8]
 800f816:	2b07      	cmp	r3, #7
 800f818:	f240 80a5 	bls.w	800f966 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f81c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f81e:	330e      	adds	r3, #14
 800f820:	4619      	mov	r1, r3
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f7f8 f9ec 	bl	8007c00 <pbuf_add_header>
 800f828:	4603      	mov	r3, r0
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d04b      	beq.n	800f8c6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	891a      	ldrh	r2, [r3, #8]
 800f832:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f834:	4413      	add	r3, r2
 800f836:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	891b      	ldrh	r3, [r3, #8]
 800f83c:	8b7a      	ldrh	r2, [r7, #26]
 800f83e:	429a      	cmp	r2, r3
 800f840:	f0c0 809a 	bcc.w	800f978 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f844:	8b7b      	ldrh	r3, [r7, #26]
 800f846:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f84a:	4619      	mov	r1, r3
 800f84c:	200e      	movs	r0, #14
 800f84e:	f7f7 ff89 	bl	8007764 <pbuf_alloc>
 800f852:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f854:	697b      	ldr	r3, [r7, #20]
 800f856:	2b00      	cmp	r3, #0
 800f858:	f000 8090 	beq.w	800f97c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	895b      	ldrh	r3, [r3, #10]
 800f860:	461a      	mov	r2, r3
 800f862:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f864:	3308      	adds	r3, #8
 800f866:	429a      	cmp	r2, r3
 800f868:	d203      	bcs.n	800f872 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800f86a:	6978      	ldr	r0, [r7, #20]
 800f86c:	f7f8 fa5e 	bl	8007d2c <pbuf_free>
          goto icmperr;
 800f870:	e085      	b.n	800f97e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	685b      	ldr	r3, [r3, #4]
 800f876:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f87a:	4618      	mov	r0, r3
 800f87c:	f001 fb3c 	bl	8010ef8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f880:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f882:	4619      	mov	r1, r3
 800f884:	6978      	ldr	r0, [r7, #20]
 800f886:	f7f8 f9cb 	bl	8007c20 <pbuf_remove_header>
 800f88a:	4603      	mov	r3, r0
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d009      	beq.n	800f8a4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f890:	4b40      	ldr	r3, [pc, #256]	; (800f994 <icmp_input+0x1f8>)
 800f892:	22b6      	movs	r2, #182	; 0xb6
 800f894:	4940      	ldr	r1, [pc, #256]	; (800f998 <icmp_input+0x1fc>)
 800f896:	4841      	ldr	r0, [pc, #260]	; (800f99c <icmp_input+0x200>)
 800f898:	f001 fb44 	bl	8010f24 <iprintf>
          pbuf_free(r);
 800f89c:	6978      	ldr	r0, [r7, #20]
 800f89e:	f7f8 fa45 	bl	8007d2c <pbuf_free>
          goto icmperr;
 800f8a2:	e06c      	b.n	800f97e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f8a4:	6879      	ldr	r1, [r7, #4]
 800f8a6:	6978      	ldr	r0, [r7, #20]
 800f8a8:	f7f8 fb58 	bl	8007f5c <pbuf_copy>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d003      	beq.n	800f8ba <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f8b2:	6978      	ldr	r0, [r7, #20]
 800f8b4:	f7f8 fa3a 	bl	8007d2c <pbuf_free>
          goto icmperr;
 800f8b8:	e061      	b.n	800f97e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	f7f8 fa36 	bl	8007d2c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	607b      	str	r3, [r7, #4]
 800f8c4:	e00f      	b.n	800f8e6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f8c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f8c8:	330e      	adds	r3, #14
 800f8ca:	4619      	mov	r1, r3
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f7f8 f9a7 	bl	8007c20 <pbuf_remove_header>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d006      	beq.n	800f8e6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f8d8:	4b2e      	ldr	r3, [pc, #184]	; (800f994 <icmp_input+0x1f8>)
 800f8da:	22c7      	movs	r2, #199	; 0xc7
 800f8dc:	4930      	ldr	r1, [pc, #192]	; (800f9a0 <icmp_input+0x204>)
 800f8de:	482f      	ldr	r0, [pc, #188]	; (800f99c <icmp_input+0x200>)
 800f8e0:	f001 fb20 	bl	8010f24 <iprintf>
          goto icmperr;
 800f8e4:	e04b      	b.n	800f97e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	685b      	ldr	r3, [r3, #4]
 800f8ea:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f8ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f8ee:	4619      	mov	r1, r3
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f7f8 f985 	bl	8007c00 <pbuf_add_header>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d12b      	bne.n	800f954 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	685b      	ldr	r3, [r3, #4]
 800f900:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f902:	69fb      	ldr	r3, [r7, #28]
 800f904:	681a      	ldr	r2, [r3, #0]
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f90a:	4b20      	ldr	r3, [pc, #128]	; (800f98c <icmp_input+0x1f0>)
 800f90c:	691a      	ldr	r2, [r3, #16]
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f912:	693b      	ldr	r3, [r7, #16]
 800f914:	2200      	movs	r2, #0
 800f916:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800f918:	693b      	ldr	r3, [r7, #16]
 800f91a:	2200      	movs	r2, #0
 800f91c:	709a      	strb	r2, [r3, #2]
 800f91e:	2200      	movs	r2, #0
 800f920:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	22ff      	movs	r2, #255	; 0xff
 800f926:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	2200      	movs	r2, #0
 800f92c:	729a      	strb	r2, [r3, #10]
 800f92e:	2200      	movs	r2, #0
 800f930:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	9302      	str	r3, [sp, #8]
 800f936:	2301      	movs	r3, #1
 800f938:	9301      	str	r3, [sp, #4]
 800f93a:	2300      	movs	r3, #0
 800f93c:	9300      	str	r3, [sp, #0]
 800f93e:	23ff      	movs	r3, #255	; 0xff
 800f940:	2200      	movs	r2, #0
 800f942:	69f9      	ldr	r1, [r7, #28]
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f000 fa75 	bl	800fe34 <ip4_output_if>
 800f94a:	4603      	mov	r3, r0
 800f94c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f94e:	e001      	b.n	800f954 <icmp_input+0x1b8>
      break;
 800f950:	bf00      	nop
 800f952:	e000      	b.n	800f956 <icmp_input+0x1ba>
      break;
 800f954:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f7f8 f9e8 	bl	8007d2c <pbuf_free>
  return;
 800f95c:	e013      	b.n	800f986 <icmp_input+0x1ea>
    goto lenerr;
 800f95e:	bf00      	nop
 800f960:	e002      	b.n	800f968 <icmp_input+0x1cc>
    goto lenerr;
 800f962:	bf00      	nop
 800f964:	e000      	b.n	800f968 <icmp_input+0x1cc>
        goto lenerr;
 800f966:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f7f8 f9df 	bl	8007d2c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f96e:	e00a      	b.n	800f986 <icmp_input+0x1ea>
        goto icmperr;
 800f970:	bf00      	nop
 800f972:	e004      	b.n	800f97e <icmp_input+0x1e2>
        goto icmperr;
 800f974:	bf00      	nop
 800f976:	e002      	b.n	800f97e <icmp_input+0x1e2>
          goto icmperr;
 800f978:	bf00      	nop
 800f97a:	e000      	b.n	800f97e <icmp_input+0x1e2>
          goto icmperr;
 800f97c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f97e:	6878      	ldr	r0, [r7, #4]
 800f980:	f7f8 f9d4 	bl	8007d2c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f984:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f986:	3728      	adds	r7, #40	; 0x28
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}
 800f98c:	200051b4 	.word	0x200051b4
 800f990:	200051c8 	.word	0x200051c8
 800f994:	08014914 	.word	0x08014914
 800f998:	0801494c 	.word	0x0801494c
 800f99c:	08014984 	.word	0x08014984
 800f9a0:	080149ac 	.word	0x080149ac

0800f9a4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b082      	sub	sp, #8
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
 800f9ac:	460b      	mov	r3, r1
 800f9ae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f9b0:	78fb      	ldrb	r3, [r7, #3]
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	2103      	movs	r1, #3
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f000 f814 	bl	800f9e4 <icmp_send_response>
}
 800f9bc:	bf00      	nop
 800f9be:	3708      	adds	r7, #8
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}

0800f9c4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b082      	sub	sp, #8
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	460b      	mov	r3, r1
 800f9ce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f9d0:	78fb      	ldrb	r3, [r7, #3]
 800f9d2:	461a      	mov	r2, r3
 800f9d4:	210b      	movs	r1, #11
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f000 f804 	bl	800f9e4 <icmp_send_response>
}
 800f9dc:	bf00      	nop
 800f9de:	3708      	adds	r7, #8
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd80      	pop	{r7, pc}

0800f9e4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b08c      	sub	sp, #48	; 0x30
 800f9e8:	af04      	add	r7, sp, #16
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	460b      	mov	r3, r1
 800f9ee:	70fb      	strb	r3, [r7, #3]
 800f9f0:	4613      	mov	r3, r2
 800f9f2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f9f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f9f8:	2124      	movs	r1, #36	; 0x24
 800f9fa:	2022      	movs	r0, #34	; 0x22
 800f9fc:	f7f7 feb2 	bl	8007764 <pbuf_alloc>
 800fa00:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800fa02:	69fb      	ldr	r3, [r7, #28]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d04c      	beq.n	800faa2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fa08:	69fb      	ldr	r3, [r7, #28]
 800fa0a:	895b      	ldrh	r3, [r3, #10]
 800fa0c:	2b23      	cmp	r3, #35	; 0x23
 800fa0e:	d806      	bhi.n	800fa1e <icmp_send_response+0x3a>
 800fa10:	4b26      	ldr	r3, [pc, #152]	; (800faac <icmp_send_response+0xc8>)
 800fa12:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800fa16:	4926      	ldr	r1, [pc, #152]	; (800fab0 <icmp_send_response+0xcc>)
 800fa18:	4826      	ldr	r0, [pc, #152]	; (800fab4 <icmp_send_response+0xd0>)
 800fa1a:	f001 fa83 	bl	8010f24 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	685b      	ldr	r3, [r3, #4]
 800fa22:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800fa24:	69fb      	ldr	r3, [r7, #28]
 800fa26:	685b      	ldr	r3, [r3, #4]
 800fa28:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	78fa      	ldrb	r2, [r7, #3]
 800fa2e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	78ba      	ldrb	r2, [r7, #2]
 800fa34:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	711a      	strb	r2, [r3, #4]
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	2200      	movs	r2, #0
 800fa44:	719a      	strb	r2, [r3, #6]
 800fa46:	2200      	movs	r2, #0
 800fa48:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fa4a:	69fb      	ldr	r3, [r7, #28]
 800fa4c:	685b      	ldr	r3, [r3, #4]
 800fa4e:	f103 0008 	add.w	r0, r3, #8
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	685b      	ldr	r3, [r3, #4]
 800fa56:	221c      	movs	r2, #28
 800fa58:	4619      	mov	r1, r3
 800fa5a:	f001 fa4d 	bl	8010ef8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800fa5e:	69bb      	ldr	r3, [r7, #24]
 800fa60:	68db      	ldr	r3, [r3, #12]
 800fa62:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800fa64:	f107 030c 	add.w	r3, r7, #12
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f000 f825 	bl	800fab8 <ip4_route>
 800fa6e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800fa70:	693b      	ldr	r3, [r7, #16]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d011      	beq.n	800fa9a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	709a      	strb	r2, [r3, #2]
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800fa80:	f107 020c 	add.w	r2, r7, #12
 800fa84:	693b      	ldr	r3, [r7, #16]
 800fa86:	9302      	str	r3, [sp, #8]
 800fa88:	2301      	movs	r3, #1
 800fa8a:	9301      	str	r3, [sp, #4]
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	9300      	str	r3, [sp, #0]
 800fa90:	23ff      	movs	r3, #255	; 0xff
 800fa92:	2100      	movs	r1, #0
 800fa94:	69f8      	ldr	r0, [r7, #28]
 800fa96:	f000 f9cd 	bl	800fe34 <ip4_output_if>
  }
  pbuf_free(q);
 800fa9a:	69f8      	ldr	r0, [r7, #28]
 800fa9c:	f7f8 f946 	bl	8007d2c <pbuf_free>
 800faa0:	e000      	b.n	800faa4 <icmp_send_response+0xc0>
    return;
 800faa2:	bf00      	nop
}
 800faa4:	3720      	adds	r7, #32
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}
 800faaa:	bf00      	nop
 800faac:	08014914 	.word	0x08014914
 800fab0:	080149e0 	.word	0x080149e0
 800fab4:	08014984 	.word	0x08014984

0800fab8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800fab8:	b480      	push	{r7}
 800faba:	b085      	sub	sp, #20
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800fac0:	4b33      	ldr	r3, [pc, #204]	; (800fb90 <ip4_route+0xd8>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	60fb      	str	r3, [r7, #12]
 800fac6:	e036      	b.n	800fb36 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800face:	f003 0301 	and.w	r3, r3, #1
 800fad2:	b2db      	uxtb	r3, r3
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d02b      	beq.n	800fb30 <ip4_route+0x78>
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fade:	089b      	lsrs	r3, r3, #2
 800fae0:	f003 0301 	and.w	r3, r3, #1
 800fae4:	b2db      	uxtb	r3, r3
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d022      	beq.n	800fb30 <ip4_route+0x78>
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	3304      	adds	r3, #4
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d01d      	beq.n	800fb30 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681a      	ldr	r2, [r3, #0]
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	3304      	adds	r3, #4
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	405a      	eors	r2, r3
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	3308      	adds	r3, #8
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	4013      	ands	r3, r2
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d101      	bne.n	800fb10 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	e038      	b.n	800fb82 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb16:	f003 0302 	and.w	r3, r3, #2
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d108      	bne.n	800fb30 <ip4_route+0x78>
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681a      	ldr	r2, [r3, #0]
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	330c      	adds	r3, #12
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	429a      	cmp	r2, r3
 800fb2a:	d101      	bne.n	800fb30 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	e028      	b.n	800fb82 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	60fb      	str	r3, [r7, #12]
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d1c5      	bne.n	800fac8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fb3c:	4b15      	ldr	r3, [pc, #84]	; (800fb94 <ip4_route+0xdc>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d01a      	beq.n	800fb7a <ip4_route+0xc2>
 800fb44:	4b13      	ldr	r3, [pc, #76]	; (800fb94 <ip4_route+0xdc>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb4c:	f003 0301 	and.w	r3, r3, #1
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d012      	beq.n	800fb7a <ip4_route+0xc2>
 800fb54:	4b0f      	ldr	r3, [pc, #60]	; (800fb94 <ip4_route+0xdc>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb5c:	f003 0304 	and.w	r3, r3, #4
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d00a      	beq.n	800fb7a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fb64:	4b0b      	ldr	r3, [pc, #44]	; (800fb94 <ip4_route+0xdc>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	3304      	adds	r3, #4
 800fb6a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d004      	beq.n	800fb7a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	b2db      	uxtb	r3, r3
 800fb76:	2b7f      	cmp	r3, #127	; 0x7f
 800fb78:	d101      	bne.n	800fb7e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	e001      	b.n	800fb82 <ip4_route+0xca>
  }

  return netif_default;
 800fb7e:	4b05      	ldr	r3, [pc, #20]	; (800fb94 <ip4_route+0xdc>)
 800fb80:	681b      	ldr	r3, [r3, #0]
}
 800fb82:	4618      	mov	r0, r3
 800fb84:	3714      	adds	r7, #20
 800fb86:	46bd      	mov	sp, r7
 800fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8c:	4770      	bx	lr
 800fb8e:	bf00      	nop
 800fb90:	20008718 	.word	0x20008718
 800fb94:	2000871c 	.word	0x2000871c

0800fb98 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fba6:	f003 0301 	and.w	r3, r3, #1
 800fbaa:	b2db      	uxtb	r3, r3
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d016      	beq.n	800fbde <ip4_input_accept+0x46>
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	3304      	adds	r3, #4
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d011      	beq.n	800fbde <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fbba:	4b0b      	ldr	r3, [pc, #44]	; (800fbe8 <ip4_input_accept+0x50>)
 800fbbc:	695a      	ldr	r2, [r3, #20]
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	3304      	adds	r3, #4
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d008      	beq.n	800fbda <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fbc8:	4b07      	ldr	r3, [pc, #28]	; (800fbe8 <ip4_input_accept+0x50>)
 800fbca:	695b      	ldr	r3, [r3, #20]
 800fbcc:	6879      	ldr	r1, [r7, #4]
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f000 fa08 	bl	800ffe4 <ip4_addr_isbroadcast_u32>
 800fbd4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d001      	beq.n	800fbde <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800fbda:	2301      	movs	r3, #1
 800fbdc:	e000      	b.n	800fbe0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800fbde:	2300      	movs	r3, #0
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	3708      	adds	r7, #8
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}
 800fbe8:	200051b4 	.word	0x200051b4

0800fbec <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b086      	sub	sp, #24
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	685b      	ldr	r3, [r3, #4]
 800fbfa:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	781b      	ldrb	r3, [r3, #0]
 800fc00:	091b      	lsrs	r3, r3, #4
 800fc02:	b2db      	uxtb	r3, r3
 800fc04:	2b04      	cmp	r3, #4
 800fc06:	d004      	beq.n	800fc12 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f7f8 f88f 	bl	8007d2c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	e107      	b.n	800fe22 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	781b      	ldrb	r3, [r3, #0]
 800fc16:	f003 030f 	and.w	r3, r3, #15
 800fc1a:	b2db      	uxtb	r3, r3
 800fc1c:	009b      	lsls	r3, r3, #2
 800fc1e:	b2db      	uxtb	r3, r3
 800fc20:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	885b      	ldrh	r3, [r3, #2]
 800fc26:	b29b      	uxth	r3, r3
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7f6 fcb7 	bl	800659c <lwip_htons>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	891b      	ldrh	r3, [r3, #8]
 800fc36:	89ba      	ldrh	r2, [r7, #12]
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	d204      	bcs.n	800fc46 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800fc3c:	89bb      	ldrh	r3, [r7, #12]
 800fc3e:	4619      	mov	r1, r3
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f7f7 feed 	bl	8007a20 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	895b      	ldrh	r3, [r3, #10]
 800fc4a:	89fa      	ldrh	r2, [r7, #14]
 800fc4c:	429a      	cmp	r2, r3
 800fc4e:	d807      	bhi.n	800fc60 <ip4_input+0x74>
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	891b      	ldrh	r3, [r3, #8]
 800fc54:	89ba      	ldrh	r2, [r7, #12]
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d802      	bhi.n	800fc60 <ip4_input+0x74>
 800fc5a:	89fb      	ldrh	r3, [r7, #14]
 800fc5c:	2b13      	cmp	r3, #19
 800fc5e:	d804      	bhi.n	800fc6a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800fc60:	6878      	ldr	r0, [r7, #4]
 800fc62:	f7f8 f863 	bl	8007d2c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800fc66:	2300      	movs	r3, #0
 800fc68:	e0db      	b.n	800fe22 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	691b      	ldr	r3, [r3, #16]
 800fc6e:	4a6f      	ldr	r2, [pc, #444]	; (800fe2c <ip4_input+0x240>)
 800fc70:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	68db      	ldr	r3, [r3, #12]
 800fc76:	4a6d      	ldr	r2, [pc, #436]	; (800fe2c <ip4_input+0x240>)
 800fc78:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fc7a:	4b6c      	ldr	r3, [pc, #432]	; (800fe2c <ip4_input+0x240>)
 800fc7c:	695b      	ldr	r3, [r3, #20]
 800fc7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fc82:	2be0      	cmp	r3, #224	; 0xe0
 800fc84:	d112      	bne.n	800fcac <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc8c:	f003 0301 	and.w	r3, r3, #1
 800fc90:	b2db      	uxtb	r3, r3
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d007      	beq.n	800fca6 <ip4_input+0xba>
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	3304      	adds	r3, #4
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d002      	beq.n	800fca6 <ip4_input+0xba>
      netif = inp;
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	613b      	str	r3, [r7, #16]
 800fca4:	e02a      	b.n	800fcfc <ip4_input+0x110>
    } else {
      netif = NULL;
 800fca6:	2300      	movs	r3, #0
 800fca8:	613b      	str	r3, [r7, #16]
 800fcaa:	e027      	b.n	800fcfc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800fcac:	6838      	ldr	r0, [r7, #0]
 800fcae:	f7ff ff73 	bl	800fb98 <ip4_input_accept>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d002      	beq.n	800fcbe <ip4_input+0xd2>
      netif = inp;
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	613b      	str	r3, [r7, #16]
 800fcbc:	e01e      	b.n	800fcfc <ip4_input+0x110>
    } else {
      netif = NULL;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800fcc2:	4b5a      	ldr	r3, [pc, #360]	; (800fe2c <ip4_input+0x240>)
 800fcc4:	695b      	ldr	r3, [r3, #20]
 800fcc6:	b2db      	uxtb	r3, r3
 800fcc8:	2b7f      	cmp	r3, #127	; 0x7f
 800fcca:	d017      	beq.n	800fcfc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800fccc:	4b58      	ldr	r3, [pc, #352]	; (800fe30 <ip4_input+0x244>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	613b      	str	r3, [r7, #16]
 800fcd2:	e00e      	b.n	800fcf2 <ip4_input+0x106>
          if (netif == inp) {
 800fcd4:	693a      	ldr	r2, [r7, #16]
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	429a      	cmp	r2, r3
 800fcda:	d006      	beq.n	800fcea <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800fcdc:	6938      	ldr	r0, [r7, #16]
 800fcde:	f7ff ff5b 	bl	800fb98 <ip4_input_accept>
 800fce2:	4603      	mov	r3, r0
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d108      	bne.n	800fcfa <ip4_input+0x10e>
 800fce8:	e000      	b.n	800fcec <ip4_input+0x100>
            continue;
 800fcea:	bf00      	nop
        NETIF_FOREACH(netif) {
 800fcec:	693b      	ldr	r3, [r7, #16]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	613b      	str	r3, [r7, #16]
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d1ed      	bne.n	800fcd4 <ip4_input+0xe8>
 800fcf8:	e000      	b.n	800fcfc <ip4_input+0x110>
            break;
 800fcfa:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fcfc:	4b4b      	ldr	r3, [pc, #300]	; (800fe2c <ip4_input+0x240>)
 800fcfe:	691b      	ldr	r3, [r3, #16]
 800fd00:	6839      	ldr	r1, [r7, #0]
 800fd02:	4618      	mov	r0, r3
 800fd04:	f000 f96e 	bl	800ffe4 <ip4_addr_isbroadcast_u32>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d105      	bne.n	800fd1a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800fd0e:	4b47      	ldr	r3, [pc, #284]	; (800fe2c <ip4_input+0x240>)
 800fd10:	691b      	ldr	r3, [r3, #16]
 800fd12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fd16:	2be0      	cmp	r3, #224	; 0xe0
 800fd18:	d104      	bne.n	800fd24 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800fd1a:	6878      	ldr	r0, [r7, #4]
 800fd1c:	f7f8 f806 	bl	8007d2c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800fd20:	2300      	movs	r3, #0
 800fd22:	e07e      	b.n	800fe22 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800fd24:	693b      	ldr	r3, [r7, #16]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d104      	bne.n	800fd34 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f7f7 fffe 	bl	8007d2c <pbuf_free>
    return ERR_OK;
 800fd30:	2300      	movs	r3, #0
 800fd32:	e076      	b.n	800fe22 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	88db      	ldrh	r3, [r3, #6]
 800fd38:	b29b      	uxth	r3, r3
 800fd3a:	461a      	mov	r2, r3
 800fd3c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800fd40:	4013      	ands	r3, r2
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d00b      	beq.n	800fd5e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f000 fc92 	bl	8010670 <ip4_reass>
 800fd4c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d101      	bne.n	800fd58 <ip4_input+0x16c>
      return ERR_OK;
 800fd54:	2300      	movs	r3, #0
 800fd56:	e064      	b.n	800fe22 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	685b      	ldr	r3, [r3, #4]
 800fd5c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800fd5e:	4a33      	ldr	r2, [pc, #204]	; (800fe2c <ip4_input+0x240>)
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800fd64:	4a31      	ldr	r2, [pc, #196]	; (800fe2c <ip4_input+0x240>)
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800fd6a:	4a30      	ldr	r2, [pc, #192]	; (800fe2c <ip4_input+0x240>)
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800fd70:	697b      	ldr	r3, [r7, #20]
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	f003 030f 	and.w	r3, r3, #15
 800fd78:	b2db      	uxtb	r3, r3
 800fd7a:	009b      	lsls	r3, r3, #2
 800fd7c:	b2db      	uxtb	r3, r3
 800fd7e:	b29a      	uxth	r2, r3
 800fd80:	4b2a      	ldr	r3, [pc, #168]	; (800fe2c <ip4_input+0x240>)
 800fd82:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800fd84:	89fb      	ldrh	r3, [r7, #14]
 800fd86:	4619      	mov	r1, r3
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f7f7 ff49 	bl	8007c20 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800fd8e:	697b      	ldr	r3, [r7, #20]
 800fd90:	7a5b      	ldrb	r3, [r3, #9]
 800fd92:	2b11      	cmp	r3, #17
 800fd94:	d006      	beq.n	800fda4 <ip4_input+0x1b8>
 800fd96:	2b11      	cmp	r3, #17
 800fd98:	dc13      	bgt.n	800fdc2 <ip4_input+0x1d6>
 800fd9a:	2b01      	cmp	r3, #1
 800fd9c:	d00c      	beq.n	800fdb8 <ip4_input+0x1cc>
 800fd9e:	2b06      	cmp	r3, #6
 800fda0:	d005      	beq.n	800fdae <ip4_input+0x1c2>
 800fda2:	e00e      	b.n	800fdc2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800fda4:	6839      	ldr	r1, [r7, #0]
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f7fe fc68 	bl	800e67c <udp_input>
        break;
 800fdac:	e026      	b.n	800fdfc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800fdae:	6839      	ldr	r1, [r7, #0]
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f7fa f889 	bl	8009ec8 <tcp_input>
        break;
 800fdb6:	e021      	b.n	800fdfc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800fdb8:	6839      	ldr	r1, [r7, #0]
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f7ff fcee 	bl	800f79c <icmp_input>
        break;
 800fdc0:	e01c      	b.n	800fdfc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fdc2:	4b1a      	ldr	r3, [pc, #104]	; (800fe2c <ip4_input+0x240>)
 800fdc4:	695b      	ldr	r3, [r3, #20]
 800fdc6:	6939      	ldr	r1, [r7, #16]
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f000 f90b 	bl	800ffe4 <ip4_addr_isbroadcast_u32>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d10f      	bne.n	800fdf4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fdd4:	4b15      	ldr	r3, [pc, #84]	; (800fe2c <ip4_input+0x240>)
 800fdd6:	695b      	ldr	r3, [r3, #20]
 800fdd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fddc:	2be0      	cmp	r3, #224	; 0xe0
 800fdde:	d009      	beq.n	800fdf4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800fde0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fde4:	4619      	mov	r1, r3
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f7f7 ff8d 	bl	8007d06 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800fdec:	2102      	movs	r1, #2
 800fdee:	6878      	ldr	r0, [r7, #4]
 800fdf0:	f7ff fdd8 	bl	800f9a4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f7f7 ff99 	bl	8007d2c <pbuf_free>
        break;
 800fdfa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800fdfc:	4b0b      	ldr	r3, [pc, #44]	; (800fe2c <ip4_input+0x240>)
 800fdfe:	2200      	movs	r2, #0
 800fe00:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800fe02:	4b0a      	ldr	r3, [pc, #40]	; (800fe2c <ip4_input+0x240>)
 800fe04:	2200      	movs	r2, #0
 800fe06:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800fe08:	4b08      	ldr	r3, [pc, #32]	; (800fe2c <ip4_input+0x240>)
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800fe0e:	4b07      	ldr	r3, [pc, #28]	; (800fe2c <ip4_input+0x240>)
 800fe10:	2200      	movs	r2, #0
 800fe12:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800fe14:	4b05      	ldr	r3, [pc, #20]	; (800fe2c <ip4_input+0x240>)
 800fe16:	2200      	movs	r2, #0
 800fe18:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800fe1a:	4b04      	ldr	r3, [pc, #16]	; (800fe2c <ip4_input+0x240>)
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800fe20:	2300      	movs	r3, #0
}
 800fe22:	4618      	mov	r0, r3
 800fe24:	3718      	adds	r7, #24
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}
 800fe2a:	bf00      	nop
 800fe2c:	200051b4 	.word	0x200051b4
 800fe30:	20008718 	.word	0x20008718

0800fe34 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b08a      	sub	sp, #40	; 0x28
 800fe38:	af04      	add	r7, sp, #16
 800fe3a:	60f8      	str	r0, [r7, #12]
 800fe3c:	60b9      	str	r1, [r7, #8]
 800fe3e:	607a      	str	r2, [r7, #4]
 800fe40:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d009      	beq.n	800fe60 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d003      	beq.n	800fe5a <ip4_output_if+0x26>
 800fe52:	68bb      	ldr	r3, [r7, #8]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d102      	bne.n	800fe60 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800fe5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe5c:	3304      	adds	r3, #4
 800fe5e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800fe60:	78fa      	ldrb	r2, [r7, #3]
 800fe62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe64:	9302      	str	r3, [sp, #8]
 800fe66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fe6a:	9301      	str	r3, [sp, #4]
 800fe6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fe70:	9300      	str	r3, [sp, #0]
 800fe72:	4613      	mov	r3, r2
 800fe74:	687a      	ldr	r2, [r7, #4]
 800fe76:	6979      	ldr	r1, [r7, #20]
 800fe78:	68f8      	ldr	r0, [r7, #12]
 800fe7a:	f000 f805 	bl	800fe88 <ip4_output_if_src>
 800fe7e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800fe80:	4618      	mov	r0, r3
 800fe82:	3718      	adds	r7, #24
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}

0800fe88 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b088      	sub	sp, #32
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	60f8      	str	r0, [r7, #12]
 800fe90:	60b9      	str	r1, [r7, #8]
 800fe92:	607a      	str	r2, [r7, #4]
 800fe94:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	7b9b      	ldrb	r3, [r3, #14]
 800fe9a:	2b01      	cmp	r3, #1
 800fe9c:	d006      	beq.n	800feac <ip4_output_if_src+0x24>
 800fe9e:	4b4b      	ldr	r3, [pc, #300]	; (800ffcc <ip4_output_if_src+0x144>)
 800fea0:	f44f 7255 	mov.w	r2, #852	; 0x354
 800fea4:	494a      	ldr	r1, [pc, #296]	; (800ffd0 <ip4_output_if_src+0x148>)
 800fea6:	484b      	ldr	r0, [pc, #300]	; (800ffd4 <ip4_output_if_src+0x14c>)
 800fea8:	f001 f83c 	bl	8010f24 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d060      	beq.n	800ff74 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800feb2:	2314      	movs	r3, #20
 800feb4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800feb6:	2114      	movs	r1, #20
 800feb8:	68f8      	ldr	r0, [r7, #12]
 800feba:	f7f7 fea1 	bl	8007c00 <pbuf_add_header>
 800febe:	4603      	mov	r3, r0
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d002      	beq.n	800feca <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fec4:	f06f 0301 	mvn.w	r3, #1
 800fec8:	e07c      	b.n	800ffc4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	685b      	ldr	r3, [r3, #4]
 800fece:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	895b      	ldrh	r3, [r3, #10]
 800fed4:	2b13      	cmp	r3, #19
 800fed6:	d806      	bhi.n	800fee6 <ip4_output_if_src+0x5e>
 800fed8:	4b3c      	ldr	r3, [pc, #240]	; (800ffcc <ip4_output_if_src+0x144>)
 800feda:	f44f 7262 	mov.w	r2, #904	; 0x388
 800fede:	493e      	ldr	r1, [pc, #248]	; (800ffd8 <ip4_output_if_src+0x150>)
 800fee0:	483c      	ldr	r0, [pc, #240]	; (800ffd4 <ip4_output_if_src+0x14c>)
 800fee2:	f001 f81f 	bl	8010f24 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800fee6:	69fb      	ldr	r3, [r7, #28]
 800fee8:	78fa      	ldrb	r2, [r7, #3]
 800feea:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800feec:	69fb      	ldr	r3, [r7, #28]
 800feee:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800fef2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681a      	ldr	r2, [r3, #0]
 800fef8:	69fb      	ldr	r3, [r7, #28]
 800fefa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800fefc:	8b7b      	ldrh	r3, [r7, #26]
 800fefe:	089b      	lsrs	r3, r3, #2
 800ff00:	b29b      	uxth	r3, r3
 800ff02:	b2db      	uxtb	r3, r3
 800ff04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff08:	b2da      	uxtb	r2, r3
 800ff0a:	69fb      	ldr	r3, [r7, #28]
 800ff0c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ff0e:	69fb      	ldr	r3, [r7, #28]
 800ff10:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ff14:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	891b      	ldrh	r3, [r3, #8]
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7f6 fb3e 	bl	800659c <lwip_htons>
 800ff20:	4603      	mov	r3, r0
 800ff22:	461a      	mov	r2, r3
 800ff24:	69fb      	ldr	r3, [r7, #28]
 800ff26:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ff28:	69fb      	ldr	r3, [r7, #28]
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	719a      	strb	r2, [r3, #6]
 800ff2e:	2200      	movs	r2, #0
 800ff30:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ff32:	4b2a      	ldr	r3, [pc, #168]	; (800ffdc <ip4_output_if_src+0x154>)
 800ff34:	881b      	ldrh	r3, [r3, #0]
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7f6 fb30 	bl	800659c <lwip_htons>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	461a      	mov	r2, r3
 800ff40:	69fb      	ldr	r3, [r7, #28]
 800ff42:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ff44:	4b25      	ldr	r3, [pc, #148]	; (800ffdc <ip4_output_if_src+0x154>)
 800ff46:	881b      	ldrh	r3, [r3, #0]
 800ff48:	3301      	adds	r3, #1
 800ff4a:	b29a      	uxth	r2, r3
 800ff4c:	4b23      	ldr	r3, [pc, #140]	; (800ffdc <ip4_output_if_src+0x154>)
 800ff4e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d104      	bne.n	800ff60 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ff56:	4b22      	ldr	r3, [pc, #136]	; (800ffe0 <ip4_output_if_src+0x158>)
 800ff58:	681a      	ldr	r2, [r3, #0]
 800ff5a:	69fb      	ldr	r3, [r7, #28]
 800ff5c:	60da      	str	r2, [r3, #12]
 800ff5e:	e003      	b.n	800ff68 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	681a      	ldr	r2, [r3, #0]
 800ff64:	69fb      	ldr	r3, [r7, #28]
 800ff66:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ff68:	69fb      	ldr	r3, [r7, #28]
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	729a      	strb	r2, [r3, #10]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	72da      	strb	r2, [r3, #11]
 800ff72:	e00f      	b.n	800ff94 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	895b      	ldrh	r3, [r3, #10]
 800ff78:	2b13      	cmp	r3, #19
 800ff7a:	d802      	bhi.n	800ff82 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ff7c:	f06f 0301 	mvn.w	r3, #1
 800ff80:	e020      	b.n	800ffc4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ff88:	69fb      	ldr	r3, [r7, #28]
 800ff8a:	691b      	ldr	r3, [r3, #16]
 800ff8c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ff8e:	f107 0314 	add.w	r3, r7, #20
 800ff92:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ff94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff96:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d00c      	beq.n	800ffb6 <ip4_output_if_src+0x12e>
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	891a      	ldrh	r2, [r3, #8]
 800ffa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d906      	bls.n	800ffb6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800ffa8:	687a      	ldr	r2, [r7, #4]
 800ffaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ffac:	68f8      	ldr	r0, [r7, #12]
 800ffae:	f000 fd53 	bl	8010a58 <ip4_frag>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	e006      	b.n	800ffc4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ffb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb8:	695b      	ldr	r3, [r3, #20]
 800ffba:	687a      	ldr	r2, [r7, #4]
 800ffbc:	68f9      	ldr	r1, [r7, #12]
 800ffbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ffc0:	4798      	blx	r3
 800ffc2:	4603      	mov	r3, r0
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3720      	adds	r7, #32
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}
 800ffcc:	08014a0c 	.word	0x08014a0c
 800ffd0:	08014a40 	.word	0x08014a40
 800ffd4:	08014a4c 	.word	0x08014a4c
 800ffd8:	08014a74 	.word	0x08014a74
 800ffdc:	20008876 	.word	0x20008876
 800ffe0:	08015324 	.word	0x08015324

0800ffe4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ffe4:	b480      	push	{r7}
 800ffe6:	b085      	sub	sp, #20
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fff8:	d002      	beq.n	8010000 <ip4_addr_isbroadcast_u32+0x1c>
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d101      	bne.n	8010004 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010000:	2301      	movs	r3, #1
 8010002:	e02a      	b.n	801005a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801000a:	f003 0302 	and.w	r3, r3, #2
 801000e:	2b00      	cmp	r3, #0
 8010010:	d101      	bne.n	8010016 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010012:	2300      	movs	r3, #0
 8010014:	e021      	b.n	801005a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	3304      	adds	r3, #4
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	687a      	ldr	r2, [r7, #4]
 801001e:	429a      	cmp	r2, r3
 8010020:	d101      	bne.n	8010026 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010022:	2300      	movs	r3, #0
 8010024:	e019      	b.n	801005a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010026:	68fa      	ldr	r2, [r7, #12]
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	3304      	adds	r3, #4
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	405a      	eors	r2, r3
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	3308      	adds	r3, #8
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	4013      	ands	r3, r2
 8010038:	2b00      	cmp	r3, #0
 801003a:	d10d      	bne.n	8010058 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	3308      	adds	r3, #8
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	43da      	mvns	r2, r3
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	3308      	adds	r3, #8
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010050:	429a      	cmp	r2, r3
 8010052:	d101      	bne.n	8010058 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010054:	2301      	movs	r3, #1
 8010056:	e000      	b.n	801005a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010058:	2300      	movs	r3, #0
  }
}
 801005a:	4618      	mov	r0, r3
 801005c:	3714      	adds	r7, #20
 801005e:	46bd      	mov	sp, r7
 8010060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010064:	4770      	bx	lr
	...

08010068 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b084      	sub	sp, #16
 801006c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801006e:	2300      	movs	r3, #0
 8010070:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010072:	4b12      	ldr	r3, [pc, #72]	; (80100bc <ip_reass_tmr+0x54>)
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010078:	e018      	b.n	80100ac <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	7fdb      	ldrb	r3, [r3, #31]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d00b      	beq.n	801009a <ip_reass_tmr+0x32>
      r->timer--;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	7fdb      	ldrb	r3, [r3, #31]
 8010086:	3b01      	subs	r3, #1
 8010088:	b2da      	uxtb	r2, r3
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	60fb      	str	r3, [r7, #12]
 8010098:	e008      	b.n	80100ac <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80100a4:	68b9      	ldr	r1, [r7, #8]
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f000 f80a 	bl	80100c0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d1e3      	bne.n	801007a <ip_reass_tmr+0x12>
    }
  }
}
 80100b2:	bf00      	nop
 80100b4:	bf00      	nop
 80100b6:	3710      	adds	r7, #16
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd80      	pop	{r7, pc}
 80100bc:	20008878 	.word	0x20008878

080100c0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b088      	sub	sp, #32
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80100ca:	2300      	movs	r3, #0
 80100cc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80100ce:	683a      	ldr	r2, [r7, #0]
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	429a      	cmp	r2, r3
 80100d4:	d105      	bne.n	80100e2 <ip_reass_free_complete_datagram+0x22>
 80100d6:	4b45      	ldr	r3, [pc, #276]	; (80101ec <ip_reass_free_complete_datagram+0x12c>)
 80100d8:	22ab      	movs	r2, #171	; 0xab
 80100da:	4945      	ldr	r1, [pc, #276]	; (80101f0 <ip_reass_free_complete_datagram+0x130>)
 80100dc:	4845      	ldr	r0, [pc, #276]	; (80101f4 <ip_reass_free_complete_datagram+0x134>)
 80100de:	f000 ff21 	bl	8010f24 <iprintf>
  if (prev != NULL) {
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d00a      	beq.n	80100fe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	687a      	ldr	r2, [r7, #4]
 80100ee:	429a      	cmp	r2, r3
 80100f0:	d005      	beq.n	80100fe <ip_reass_free_complete_datagram+0x3e>
 80100f2:	4b3e      	ldr	r3, [pc, #248]	; (80101ec <ip_reass_free_complete_datagram+0x12c>)
 80100f4:	22ad      	movs	r2, #173	; 0xad
 80100f6:	4940      	ldr	r1, [pc, #256]	; (80101f8 <ip_reass_free_complete_datagram+0x138>)
 80100f8:	483e      	ldr	r0, [pc, #248]	; (80101f4 <ip_reass_free_complete_datagram+0x134>)
 80100fa:	f000 ff13 	bl	8010f24 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	685b      	ldr	r3, [r3, #4]
 8010102:	685b      	ldr	r3, [r3, #4]
 8010104:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	889b      	ldrh	r3, [r3, #4]
 801010a:	b29b      	uxth	r3, r3
 801010c:	2b00      	cmp	r3, #0
 801010e:	d12a      	bne.n	8010166 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	685b      	ldr	r3, [r3, #4]
 8010114:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	681a      	ldr	r2, [r3, #0]
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801011e:	69bb      	ldr	r3, [r7, #24]
 8010120:	6858      	ldr	r0, [r3, #4]
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	3308      	adds	r3, #8
 8010126:	2214      	movs	r2, #20
 8010128:	4619      	mov	r1, r3
 801012a:	f000 fee5 	bl	8010ef8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801012e:	2101      	movs	r1, #1
 8010130:	69b8      	ldr	r0, [r7, #24]
 8010132:	f7ff fc47 	bl	800f9c4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010136:	69b8      	ldr	r0, [r7, #24]
 8010138:	f7f7 fe80 	bl	8007e3c <pbuf_clen>
 801013c:	4603      	mov	r3, r0
 801013e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010140:	8bfa      	ldrh	r2, [r7, #30]
 8010142:	8a7b      	ldrh	r3, [r7, #18]
 8010144:	4413      	add	r3, r2
 8010146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801014a:	db05      	blt.n	8010158 <ip_reass_free_complete_datagram+0x98>
 801014c:	4b27      	ldr	r3, [pc, #156]	; (80101ec <ip_reass_free_complete_datagram+0x12c>)
 801014e:	22bc      	movs	r2, #188	; 0xbc
 8010150:	492a      	ldr	r1, [pc, #168]	; (80101fc <ip_reass_free_complete_datagram+0x13c>)
 8010152:	4828      	ldr	r0, [pc, #160]	; (80101f4 <ip_reass_free_complete_datagram+0x134>)
 8010154:	f000 fee6 	bl	8010f24 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010158:	8bfa      	ldrh	r2, [r7, #30]
 801015a:	8a7b      	ldrh	r3, [r7, #18]
 801015c:	4413      	add	r3, r2
 801015e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010160:	69b8      	ldr	r0, [r7, #24]
 8010162:	f7f7 fde3 	bl	8007d2c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	685b      	ldr	r3, [r3, #4]
 801016a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801016c:	e01f      	b.n	80101ae <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801016e:	69bb      	ldr	r3, [r7, #24]
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010174:	69bb      	ldr	r3, [r7, #24]
 8010176:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801017e:	68f8      	ldr	r0, [r7, #12]
 8010180:	f7f7 fe5c 	bl	8007e3c <pbuf_clen>
 8010184:	4603      	mov	r3, r0
 8010186:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010188:	8bfa      	ldrh	r2, [r7, #30]
 801018a:	8a7b      	ldrh	r3, [r7, #18]
 801018c:	4413      	add	r3, r2
 801018e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010192:	db05      	blt.n	80101a0 <ip_reass_free_complete_datagram+0xe0>
 8010194:	4b15      	ldr	r3, [pc, #84]	; (80101ec <ip_reass_free_complete_datagram+0x12c>)
 8010196:	22cc      	movs	r2, #204	; 0xcc
 8010198:	4918      	ldr	r1, [pc, #96]	; (80101fc <ip_reass_free_complete_datagram+0x13c>)
 801019a:	4816      	ldr	r0, [pc, #88]	; (80101f4 <ip_reass_free_complete_datagram+0x134>)
 801019c:	f000 fec2 	bl	8010f24 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80101a0:	8bfa      	ldrh	r2, [r7, #30]
 80101a2:	8a7b      	ldrh	r3, [r7, #18]
 80101a4:	4413      	add	r3, r2
 80101a6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80101a8:	68f8      	ldr	r0, [r7, #12]
 80101aa:	f7f7 fdbf 	bl	8007d2c <pbuf_free>
  while (p != NULL) {
 80101ae:	69bb      	ldr	r3, [r7, #24]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d1dc      	bne.n	801016e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80101b4:	6839      	ldr	r1, [r7, #0]
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f000 f8c2 	bl	8010340 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80101bc:	4b10      	ldr	r3, [pc, #64]	; (8010200 <ip_reass_free_complete_datagram+0x140>)
 80101be:	881b      	ldrh	r3, [r3, #0]
 80101c0:	8bfa      	ldrh	r2, [r7, #30]
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d905      	bls.n	80101d2 <ip_reass_free_complete_datagram+0x112>
 80101c6:	4b09      	ldr	r3, [pc, #36]	; (80101ec <ip_reass_free_complete_datagram+0x12c>)
 80101c8:	22d2      	movs	r2, #210	; 0xd2
 80101ca:	490e      	ldr	r1, [pc, #56]	; (8010204 <ip_reass_free_complete_datagram+0x144>)
 80101cc:	4809      	ldr	r0, [pc, #36]	; (80101f4 <ip_reass_free_complete_datagram+0x134>)
 80101ce:	f000 fea9 	bl	8010f24 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80101d2:	4b0b      	ldr	r3, [pc, #44]	; (8010200 <ip_reass_free_complete_datagram+0x140>)
 80101d4:	881a      	ldrh	r2, [r3, #0]
 80101d6:	8bfb      	ldrh	r3, [r7, #30]
 80101d8:	1ad3      	subs	r3, r2, r3
 80101da:	b29a      	uxth	r2, r3
 80101dc:	4b08      	ldr	r3, [pc, #32]	; (8010200 <ip_reass_free_complete_datagram+0x140>)
 80101de:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80101e0:	8bfb      	ldrh	r3, [r7, #30]
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	3720      	adds	r7, #32
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}
 80101ea:	bf00      	nop
 80101ec:	08014aa4 	.word	0x08014aa4
 80101f0:	08014ae0 	.word	0x08014ae0
 80101f4:	08014aec 	.word	0x08014aec
 80101f8:	08014b14 	.word	0x08014b14
 80101fc:	08014b28 	.word	0x08014b28
 8010200:	2000887c 	.word	0x2000887c
 8010204:	08014b48 	.word	0x08014b48

08010208 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b08a      	sub	sp, #40	; 0x28
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
 8010210:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010212:	2300      	movs	r3, #0
 8010214:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010216:	2300      	movs	r3, #0
 8010218:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801021a:	2300      	movs	r3, #0
 801021c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801021e:	2300      	movs	r3, #0
 8010220:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010222:	2300      	movs	r3, #0
 8010224:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010226:	4b28      	ldr	r3, [pc, #160]	; (80102c8 <ip_reass_remove_oldest_datagram+0xc0>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801022c:	e030      	b.n	8010290 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801022e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010230:	695a      	ldr	r2, [r3, #20]
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	68db      	ldr	r3, [r3, #12]
 8010236:	429a      	cmp	r2, r3
 8010238:	d10c      	bne.n	8010254 <ip_reass_remove_oldest_datagram+0x4c>
 801023a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801023c:	699a      	ldr	r2, [r3, #24]
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	691b      	ldr	r3, [r3, #16]
 8010242:	429a      	cmp	r2, r3
 8010244:	d106      	bne.n	8010254 <ip_reass_remove_oldest_datagram+0x4c>
 8010246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010248:	899a      	ldrh	r2, [r3, #12]
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	889b      	ldrh	r3, [r3, #4]
 801024e:	b29b      	uxth	r3, r3
 8010250:	429a      	cmp	r2, r3
 8010252:	d014      	beq.n	801027e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010254:	693b      	ldr	r3, [r7, #16]
 8010256:	3301      	adds	r3, #1
 8010258:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801025a:	6a3b      	ldr	r3, [r7, #32]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d104      	bne.n	801026a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010262:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010264:	69fb      	ldr	r3, [r7, #28]
 8010266:	61bb      	str	r3, [r7, #24]
 8010268:	e009      	b.n	801027e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801026a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801026c:	7fda      	ldrb	r2, [r3, #31]
 801026e:	6a3b      	ldr	r3, [r7, #32]
 8010270:	7fdb      	ldrb	r3, [r3, #31]
 8010272:	429a      	cmp	r2, r3
 8010274:	d803      	bhi.n	801027e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010278:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801027a:	69fb      	ldr	r3, [r7, #28]
 801027c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801027e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d001      	beq.n	801028a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8010286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010288:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801028a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010292:	2b00      	cmp	r3, #0
 8010294:	d1cb      	bne.n	801022e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010296:	6a3b      	ldr	r3, [r7, #32]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d008      	beq.n	80102ae <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801029c:	69b9      	ldr	r1, [r7, #24]
 801029e:	6a38      	ldr	r0, [r7, #32]
 80102a0:	f7ff ff0e 	bl	80100c0 <ip_reass_free_complete_datagram>
 80102a4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80102a6:	697a      	ldr	r2, [r7, #20]
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	4413      	add	r3, r2
 80102ac:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80102ae:	697a      	ldr	r2, [r7, #20]
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	429a      	cmp	r2, r3
 80102b4:	da02      	bge.n	80102bc <ip_reass_remove_oldest_datagram+0xb4>
 80102b6:	693b      	ldr	r3, [r7, #16]
 80102b8:	2b01      	cmp	r3, #1
 80102ba:	dcac      	bgt.n	8010216 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80102bc:	697b      	ldr	r3, [r7, #20]
}
 80102be:	4618      	mov	r0, r3
 80102c0:	3728      	adds	r7, #40	; 0x28
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd80      	pop	{r7, pc}
 80102c6:	bf00      	nop
 80102c8:	20008878 	.word	0x20008878

080102cc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b084      	sub	sp, #16
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80102d6:	2004      	movs	r0, #4
 80102d8:	f7f6 fe42 	bl	8006f60 <memp_malloc>
 80102dc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d110      	bne.n	8010306 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80102e4:	6839      	ldr	r1, [r7, #0]
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f7ff ff8e 	bl	8010208 <ip_reass_remove_oldest_datagram>
 80102ec:	4602      	mov	r2, r0
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	4293      	cmp	r3, r2
 80102f2:	dc03      	bgt.n	80102fc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80102f4:	2004      	movs	r0, #4
 80102f6:	f7f6 fe33 	bl	8006f60 <memp_malloc>
 80102fa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d101      	bne.n	8010306 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010302:	2300      	movs	r3, #0
 8010304:	e016      	b.n	8010334 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010306:	2220      	movs	r2, #32
 8010308:	2100      	movs	r1, #0
 801030a:	68f8      	ldr	r0, [r7, #12]
 801030c:	f000 fe02 	bl	8010f14 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	220f      	movs	r2, #15
 8010314:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010316:	4b09      	ldr	r3, [pc, #36]	; (801033c <ip_reass_enqueue_new_datagram+0x70>)
 8010318:	681a      	ldr	r2, [r3, #0]
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801031e:	4a07      	ldr	r2, [pc, #28]	; (801033c <ip_reass_enqueue_new_datagram+0x70>)
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	3308      	adds	r3, #8
 8010328:	2214      	movs	r2, #20
 801032a:	6879      	ldr	r1, [r7, #4]
 801032c:	4618      	mov	r0, r3
 801032e:	f000 fde3 	bl	8010ef8 <memcpy>
  return ipr;
 8010332:	68fb      	ldr	r3, [r7, #12]
}
 8010334:	4618      	mov	r0, r3
 8010336:	3710      	adds	r7, #16
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}
 801033c:	20008878 	.word	0x20008878

08010340 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b082      	sub	sp, #8
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
 8010348:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801034a:	4b10      	ldr	r3, [pc, #64]	; (801038c <ip_reass_dequeue_datagram+0x4c>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	687a      	ldr	r2, [r7, #4]
 8010350:	429a      	cmp	r2, r3
 8010352:	d104      	bne.n	801035e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	4a0c      	ldr	r2, [pc, #48]	; (801038c <ip_reass_dequeue_datagram+0x4c>)
 801035a:	6013      	str	r3, [r2, #0]
 801035c:	e00d      	b.n	801037a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d106      	bne.n	8010372 <ip_reass_dequeue_datagram+0x32>
 8010364:	4b0a      	ldr	r3, [pc, #40]	; (8010390 <ip_reass_dequeue_datagram+0x50>)
 8010366:	f240 1245 	movw	r2, #325	; 0x145
 801036a:	490a      	ldr	r1, [pc, #40]	; (8010394 <ip_reass_dequeue_datagram+0x54>)
 801036c:	480a      	ldr	r0, [pc, #40]	; (8010398 <ip_reass_dequeue_datagram+0x58>)
 801036e:	f000 fdd9 	bl	8010f24 <iprintf>
    prev->next = ipr->next;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681a      	ldr	r2, [r3, #0]
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801037a:	6879      	ldr	r1, [r7, #4]
 801037c:	2004      	movs	r0, #4
 801037e:	f7f6 fe5f 	bl	8007040 <memp_free>
}
 8010382:	bf00      	nop
 8010384:	3708      	adds	r7, #8
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}
 801038a:	bf00      	nop
 801038c:	20008878 	.word	0x20008878
 8010390:	08014aa4 	.word	0x08014aa4
 8010394:	08014b6c 	.word	0x08014b6c
 8010398:	08014aec 	.word	0x08014aec

0801039c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b08c      	sub	sp, #48	; 0x30
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	60f8      	str	r0, [r7, #12]
 80103a4:	60b9      	str	r1, [r7, #8]
 80103a6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80103a8:	2300      	movs	r3, #0
 80103aa:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80103ac:	2301      	movs	r3, #1
 80103ae:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	685b      	ldr	r3, [r3, #4]
 80103b4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80103b6:	69fb      	ldr	r3, [r7, #28]
 80103b8:	885b      	ldrh	r3, [r3, #2]
 80103ba:	b29b      	uxth	r3, r3
 80103bc:	4618      	mov	r0, r3
 80103be:	f7f6 f8ed 	bl	800659c <lwip_htons>
 80103c2:	4603      	mov	r3, r0
 80103c4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80103c6:	69fb      	ldr	r3, [r7, #28]
 80103c8:	781b      	ldrb	r3, [r3, #0]
 80103ca:	f003 030f 	and.w	r3, r3, #15
 80103ce:	b2db      	uxtb	r3, r3
 80103d0:	009b      	lsls	r3, r3, #2
 80103d2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80103d4:	7e7b      	ldrb	r3, [r7, #25]
 80103d6:	b29b      	uxth	r3, r3
 80103d8:	8b7a      	ldrh	r2, [r7, #26]
 80103da:	429a      	cmp	r2, r3
 80103dc:	d202      	bcs.n	80103e4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80103de:	f04f 33ff 	mov.w	r3, #4294967295
 80103e2:	e135      	b.n	8010650 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80103e4:	7e7b      	ldrb	r3, [r7, #25]
 80103e6:	b29b      	uxth	r3, r3
 80103e8:	8b7a      	ldrh	r2, [r7, #26]
 80103ea:	1ad3      	subs	r3, r2, r3
 80103ec:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80103ee:	69fb      	ldr	r3, [r7, #28]
 80103f0:	88db      	ldrh	r3, [r3, #6]
 80103f2:	b29b      	uxth	r3, r3
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7f6 f8d1 	bl	800659c <lwip_htons>
 80103fa:	4603      	mov	r3, r0
 80103fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010400:	b29b      	uxth	r3, r3
 8010402:	00db      	lsls	r3, r3, #3
 8010404:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	685b      	ldr	r3, [r3, #4]
 801040a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801040c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801040e:	2200      	movs	r2, #0
 8010410:	701a      	strb	r2, [r3, #0]
 8010412:	2200      	movs	r2, #0
 8010414:	705a      	strb	r2, [r3, #1]
 8010416:	2200      	movs	r2, #0
 8010418:	709a      	strb	r2, [r3, #2]
 801041a:	2200      	movs	r2, #0
 801041c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801041e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010420:	8afa      	ldrh	r2, [r7, #22]
 8010422:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010424:	8afa      	ldrh	r2, [r7, #22]
 8010426:	8b7b      	ldrh	r3, [r7, #26]
 8010428:	4413      	add	r3, r2
 801042a:	b29a      	uxth	r2, r3
 801042c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801042e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010432:	88db      	ldrh	r3, [r3, #6]
 8010434:	b29b      	uxth	r3, r3
 8010436:	8afa      	ldrh	r2, [r7, #22]
 8010438:	429a      	cmp	r2, r3
 801043a:	d902      	bls.n	8010442 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801043c:	f04f 33ff 	mov.w	r3, #4294967295
 8010440:	e106      	b.n	8010650 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	685b      	ldr	r3, [r3, #4]
 8010446:	627b      	str	r3, [r7, #36]	; 0x24
 8010448:	e068      	b.n	801051c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801044a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801044c:	685b      	ldr	r3, [r3, #4]
 801044e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010452:	889b      	ldrh	r3, [r3, #4]
 8010454:	b29a      	uxth	r2, r3
 8010456:	693b      	ldr	r3, [r7, #16]
 8010458:	889b      	ldrh	r3, [r3, #4]
 801045a:	b29b      	uxth	r3, r3
 801045c:	429a      	cmp	r2, r3
 801045e:	d235      	bcs.n	80104cc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010464:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010468:	2b00      	cmp	r3, #0
 801046a:	d020      	beq.n	80104ae <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801046c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046e:	889b      	ldrh	r3, [r3, #4]
 8010470:	b29a      	uxth	r2, r3
 8010472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010474:	88db      	ldrh	r3, [r3, #6]
 8010476:	b29b      	uxth	r3, r3
 8010478:	429a      	cmp	r2, r3
 801047a:	d307      	bcc.n	801048c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801047c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047e:	88db      	ldrh	r3, [r3, #6]
 8010480:	b29a      	uxth	r2, r3
 8010482:	693b      	ldr	r3, [r7, #16]
 8010484:	889b      	ldrh	r3, [r3, #4]
 8010486:	b29b      	uxth	r3, r3
 8010488:	429a      	cmp	r2, r3
 801048a:	d902      	bls.n	8010492 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801048c:	f04f 33ff 	mov.w	r3, #4294967295
 8010490:	e0de      	b.n	8010650 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010494:	68ba      	ldr	r2, [r7, #8]
 8010496:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801049a:	88db      	ldrh	r3, [r3, #6]
 801049c:	b29a      	uxth	r2, r3
 801049e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a0:	889b      	ldrh	r3, [r3, #4]
 80104a2:	b29b      	uxth	r3, r3
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d03d      	beq.n	8010524 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80104a8:	2300      	movs	r3, #0
 80104aa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80104ac:	e03a      	b.n	8010524 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80104ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b0:	88db      	ldrh	r3, [r3, #6]
 80104b2:	b29a      	uxth	r2, r3
 80104b4:	693b      	ldr	r3, [r7, #16]
 80104b6:	889b      	ldrh	r3, [r3, #4]
 80104b8:	b29b      	uxth	r3, r3
 80104ba:	429a      	cmp	r2, r3
 80104bc:	d902      	bls.n	80104c4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80104be:	f04f 33ff 	mov.w	r3, #4294967295
 80104c2:	e0c5      	b.n	8010650 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	68ba      	ldr	r2, [r7, #8]
 80104c8:	605a      	str	r2, [r3, #4]
      break;
 80104ca:	e02b      	b.n	8010524 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80104cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ce:	889b      	ldrh	r3, [r3, #4]
 80104d0:	b29a      	uxth	r2, r3
 80104d2:	693b      	ldr	r3, [r7, #16]
 80104d4:	889b      	ldrh	r3, [r3, #4]
 80104d6:	b29b      	uxth	r3, r3
 80104d8:	429a      	cmp	r2, r3
 80104da:	d102      	bne.n	80104e2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80104dc:	f04f 33ff 	mov.w	r3, #4294967295
 80104e0:	e0b6      	b.n	8010650 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80104e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e4:	889b      	ldrh	r3, [r3, #4]
 80104e6:	b29a      	uxth	r2, r3
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	88db      	ldrh	r3, [r3, #6]
 80104ec:	b29b      	uxth	r3, r3
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d202      	bcs.n	80104f8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80104f2:	f04f 33ff 	mov.w	r3, #4294967295
 80104f6:	e0ab      	b.n	8010650 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80104f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d009      	beq.n	8010512 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80104fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010500:	88db      	ldrh	r3, [r3, #6]
 8010502:	b29a      	uxth	r2, r3
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	889b      	ldrh	r3, [r3, #4]
 8010508:	b29b      	uxth	r3, r3
 801050a:	429a      	cmp	r2, r3
 801050c:	d001      	beq.n	8010512 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801050e:	2300      	movs	r3, #0
 8010510:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010512:	693b      	ldr	r3, [r7, #16]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010518:	693b      	ldr	r3, [r7, #16]
 801051a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801051c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801051e:	2b00      	cmp	r3, #0
 8010520:	d193      	bne.n	801044a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010522:	e000      	b.n	8010526 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010524:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010528:	2b00      	cmp	r3, #0
 801052a:	d12d      	bne.n	8010588 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801052c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801052e:	2b00      	cmp	r3, #0
 8010530:	d01c      	beq.n	801056c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010534:	88db      	ldrh	r3, [r3, #6]
 8010536:	b29a      	uxth	r2, r3
 8010538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801053a:	889b      	ldrh	r3, [r3, #4]
 801053c:	b29b      	uxth	r3, r3
 801053e:	429a      	cmp	r2, r3
 8010540:	d906      	bls.n	8010550 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010542:	4b45      	ldr	r3, [pc, #276]	; (8010658 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010544:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8010548:	4944      	ldr	r1, [pc, #272]	; (801065c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801054a:	4845      	ldr	r0, [pc, #276]	; (8010660 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801054c:	f000 fcea 	bl	8010f24 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010552:	68ba      	ldr	r2, [r7, #8]
 8010554:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010558:	88db      	ldrh	r3, [r3, #6]
 801055a:	b29a      	uxth	r2, r3
 801055c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801055e:	889b      	ldrh	r3, [r3, #4]
 8010560:	b29b      	uxth	r3, r3
 8010562:	429a      	cmp	r2, r3
 8010564:	d010      	beq.n	8010588 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010566:	2300      	movs	r3, #0
 8010568:	623b      	str	r3, [r7, #32]
 801056a:	e00d      	b.n	8010588 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	685b      	ldr	r3, [r3, #4]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d006      	beq.n	8010582 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010574:	4b38      	ldr	r3, [pc, #224]	; (8010658 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010576:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801057a:	493a      	ldr	r1, [pc, #232]	; (8010664 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801057c:	4838      	ldr	r0, [pc, #224]	; (8010660 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801057e:	f000 fcd1 	bl	8010f24 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	68ba      	ldr	r2, [r7, #8]
 8010586:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d105      	bne.n	801059a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	7f9b      	ldrb	r3, [r3, #30]
 8010592:	f003 0301 	and.w	r3, r3, #1
 8010596:	2b00      	cmp	r3, #0
 8010598:	d059      	beq.n	801064e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801059a:	6a3b      	ldr	r3, [r7, #32]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d04f      	beq.n	8010640 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	685b      	ldr	r3, [r3, #4]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d006      	beq.n	80105b6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	685b      	ldr	r3, [r3, #4]
 80105ac:	685b      	ldr	r3, [r3, #4]
 80105ae:	889b      	ldrh	r3, [r3, #4]
 80105b0:	b29b      	uxth	r3, r3
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d002      	beq.n	80105bc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80105b6:	2300      	movs	r3, #0
 80105b8:	623b      	str	r3, [r7, #32]
 80105ba:	e041      	b.n	8010640 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80105bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105be:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80105c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80105c6:	e012      	b.n	80105ee <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80105c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ca:	685b      	ldr	r3, [r3, #4]
 80105cc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80105ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d0:	88db      	ldrh	r3, [r3, #6]
 80105d2:	b29a      	uxth	r2, r3
 80105d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105d6:	889b      	ldrh	r3, [r3, #4]
 80105d8:	b29b      	uxth	r3, r3
 80105da:	429a      	cmp	r2, r3
 80105dc:	d002      	beq.n	80105e4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80105de:	2300      	movs	r3, #0
 80105e0:	623b      	str	r3, [r7, #32]
            break;
 80105e2:	e007      	b.n	80105f4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80105e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80105e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80105ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d1e9      	bne.n	80105c8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80105f4:	6a3b      	ldr	r3, [r7, #32]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d022      	beq.n	8010640 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	685b      	ldr	r3, [r3, #4]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d106      	bne.n	8010610 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010602:	4b15      	ldr	r3, [pc, #84]	; (8010658 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010604:	f240 12df 	movw	r2, #479	; 0x1df
 8010608:	4917      	ldr	r1, [pc, #92]	; (8010668 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801060a:	4815      	ldr	r0, [pc, #84]	; (8010660 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801060c:	f000 fc8a 	bl	8010f24 <iprintf>
          LWIP_ASSERT("sanity check",
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	685b      	ldr	r3, [r3, #4]
 8010614:	685b      	ldr	r3, [r3, #4]
 8010616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010618:	429a      	cmp	r2, r3
 801061a:	d106      	bne.n	801062a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801061c:	4b0e      	ldr	r3, [pc, #56]	; (8010658 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801061e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010622:	4911      	ldr	r1, [pc, #68]	; (8010668 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010624:	480e      	ldr	r0, [pc, #56]	; (8010660 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010626:	f000 fc7d 	bl	8010f24 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801062a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d006      	beq.n	8010640 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010632:	4b09      	ldr	r3, [pc, #36]	; (8010658 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010634:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010638:	490c      	ldr	r1, [pc, #48]	; (801066c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801063a:	4809      	ldr	r0, [pc, #36]	; (8010660 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801063c:	f000 fc72 	bl	8010f24 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010640:	6a3b      	ldr	r3, [r7, #32]
 8010642:	2b00      	cmp	r3, #0
 8010644:	bf14      	ite	ne
 8010646:	2301      	movne	r3, #1
 8010648:	2300      	moveq	r3, #0
 801064a:	b2db      	uxtb	r3, r3
 801064c:	e000      	b.n	8010650 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801064e:	2300      	movs	r3, #0
}
 8010650:	4618      	mov	r0, r3
 8010652:	3730      	adds	r7, #48	; 0x30
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}
 8010658:	08014aa4 	.word	0x08014aa4
 801065c:	08014b88 	.word	0x08014b88
 8010660:	08014aec 	.word	0x08014aec
 8010664:	08014ba8 	.word	0x08014ba8
 8010668:	08014be0 	.word	0x08014be0
 801066c:	08014bf0 	.word	0x08014bf0

08010670 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b08e      	sub	sp, #56	; 0x38
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	685b      	ldr	r3, [r3, #4]
 801067c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801067e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010680:	781b      	ldrb	r3, [r3, #0]
 8010682:	f003 030f 	and.w	r3, r3, #15
 8010686:	b2db      	uxtb	r3, r3
 8010688:	009b      	lsls	r3, r3, #2
 801068a:	b2db      	uxtb	r3, r3
 801068c:	2b14      	cmp	r3, #20
 801068e:	f040 8171 	bne.w	8010974 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010694:	88db      	ldrh	r3, [r3, #6]
 8010696:	b29b      	uxth	r3, r3
 8010698:	4618      	mov	r0, r3
 801069a:	f7f5 ff7f 	bl	800659c <lwip_htons>
 801069e:	4603      	mov	r3, r0
 80106a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80106a4:	b29b      	uxth	r3, r3
 80106a6:	00db      	lsls	r3, r3, #3
 80106a8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80106aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ac:	885b      	ldrh	r3, [r3, #2]
 80106ae:	b29b      	uxth	r3, r3
 80106b0:	4618      	mov	r0, r3
 80106b2:	f7f5 ff73 	bl	800659c <lwip_htons>
 80106b6:	4603      	mov	r3, r0
 80106b8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80106ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106bc:	781b      	ldrb	r3, [r3, #0]
 80106be:	f003 030f 	and.w	r3, r3, #15
 80106c2:	b2db      	uxtb	r3, r3
 80106c4:	009b      	lsls	r3, r3, #2
 80106c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80106ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80106ce:	b29b      	uxth	r3, r3
 80106d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80106d2:	429a      	cmp	r2, r3
 80106d4:	f0c0 8150 	bcc.w	8010978 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80106d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80106dc:	b29b      	uxth	r3, r3
 80106de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80106e0:	1ad3      	subs	r3, r2, r3
 80106e2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80106e4:	6878      	ldr	r0, [r7, #4]
 80106e6:	f7f7 fba9 	bl	8007e3c <pbuf_clen>
 80106ea:	4603      	mov	r3, r0
 80106ec:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80106ee:	4b8c      	ldr	r3, [pc, #560]	; (8010920 <ip4_reass+0x2b0>)
 80106f0:	881b      	ldrh	r3, [r3, #0]
 80106f2:	461a      	mov	r2, r3
 80106f4:	8c3b      	ldrh	r3, [r7, #32]
 80106f6:	4413      	add	r3, r2
 80106f8:	2b0a      	cmp	r3, #10
 80106fa:	dd10      	ble.n	801071e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80106fc:	8c3b      	ldrh	r3, [r7, #32]
 80106fe:	4619      	mov	r1, r3
 8010700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010702:	f7ff fd81 	bl	8010208 <ip_reass_remove_oldest_datagram>
 8010706:	4603      	mov	r3, r0
 8010708:	2b00      	cmp	r3, #0
 801070a:	f000 8137 	beq.w	801097c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801070e:	4b84      	ldr	r3, [pc, #528]	; (8010920 <ip4_reass+0x2b0>)
 8010710:	881b      	ldrh	r3, [r3, #0]
 8010712:	461a      	mov	r2, r3
 8010714:	8c3b      	ldrh	r3, [r7, #32]
 8010716:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010718:	2b0a      	cmp	r3, #10
 801071a:	f300 812f 	bgt.w	801097c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801071e:	4b81      	ldr	r3, [pc, #516]	; (8010924 <ip4_reass+0x2b4>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	633b      	str	r3, [r7, #48]	; 0x30
 8010724:	e015      	b.n	8010752 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010728:	695a      	ldr	r2, [r3, #20]
 801072a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801072c:	68db      	ldr	r3, [r3, #12]
 801072e:	429a      	cmp	r2, r3
 8010730:	d10c      	bne.n	801074c <ip4_reass+0xdc>
 8010732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010734:	699a      	ldr	r2, [r3, #24]
 8010736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010738:	691b      	ldr	r3, [r3, #16]
 801073a:	429a      	cmp	r2, r3
 801073c:	d106      	bne.n	801074c <ip4_reass+0xdc>
 801073e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010740:	899a      	ldrh	r2, [r3, #12]
 8010742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010744:	889b      	ldrh	r3, [r3, #4]
 8010746:	b29b      	uxth	r3, r3
 8010748:	429a      	cmp	r2, r3
 801074a:	d006      	beq.n	801075a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801074c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	633b      	str	r3, [r7, #48]	; 0x30
 8010752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010754:	2b00      	cmp	r3, #0
 8010756:	d1e6      	bne.n	8010726 <ip4_reass+0xb6>
 8010758:	e000      	b.n	801075c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801075a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801075c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801075e:	2b00      	cmp	r3, #0
 8010760:	d109      	bne.n	8010776 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010762:	8c3b      	ldrh	r3, [r7, #32]
 8010764:	4619      	mov	r1, r3
 8010766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010768:	f7ff fdb0 	bl	80102cc <ip_reass_enqueue_new_datagram>
 801076c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801076e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010770:	2b00      	cmp	r3, #0
 8010772:	d11c      	bne.n	80107ae <ip4_reass+0x13e>
      goto nullreturn;
 8010774:	e105      	b.n	8010982 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010778:	88db      	ldrh	r3, [r3, #6]
 801077a:	b29b      	uxth	r3, r3
 801077c:	4618      	mov	r0, r3
 801077e:	f7f5 ff0d 	bl	800659c <lwip_htons>
 8010782:	4603      	mov	r3, r0
 8010784:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010788:	2b00      	cmp	r3, #0
 801078a:	d110      	bne.n	80107ae <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801078c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801078e:	89db      	ldrh	r3, [r3, #14]
 8010790:	4618      	mov	r0, r3
 8010792:	f7f5 ff03 	bl	800659c <lwip_htons>
 8010796:	4603      	mov	r3, r0
 8010798:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801079c:	2b00      	cmp	r3, #0
 801079e:	d006      	beq.n	80107ae <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80107a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a2:	3308      	adds	r3, #8
 80107a4:	2214      	movs	r2, #20
 80107a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80107a8:	4618      	mov	r0, r3
 80107aa:	f000 fba5 	bl	8010ef8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80107ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b0:	88db      	ldrh	r3, [r3, #6]
 80107b2:	b29b      	uxth	r3, r3
 80107b4:	f003 0320 	and.w	r3, r3, #32
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	bf0c      	ite	eq
 80107bc:	2301      	moveq	r3, #1
 80107be:	2300      	movne	r3, #0
 80107c0:	b2db      	uxtb	r3, r3
 80107c2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80107c4:	69fb      	ldr	r3, [r7, #28]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d00e      	beq.n	80107e8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80107ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80107cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80107ce:	4413      	add	r3, r2
 80107d0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80107d2:	8b7a      	ldrh	r2, [r7, #26]
 80107d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80107d6:	429a      	cmp	r2, r3
 80107d8:	f0c0 80a0 	bcc.w	801091c <ip4_reass+0x2ac>
 80107dc:	8b7b      	ldrh	r3, [r7, #26]
 80107de:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80107e2:	4293      	cmp	r3, r2
 80107e4:	f200 809a 	bhi.w	801091c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80107e8:	69fa      	ldr	r2, [r7, #28]
 80107ea:	6879      	ldr	r1, [r7, #4]
 80107ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107ee:	f7ff fdd5 	bl	801039c <ip_reass_chain_frag_into_datagram_and_validate>
 80107f2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80107f4:	697b      	ldr	r3, [r7, #20]
 80107f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107fa:	f000 809b 	beq.w	8010934 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80107fe:	4b48      	ldr	r3, [pc, #288]	; (8010920 <ip4_reass+0x2b0>)
 8010800:	881a      	ldrh	r2, [r3, #0]
 8010802:	8c3b      	ldrh	r3, [r7, #32]
 8010804:	4413      	add	r3, r2
 8010806:	b29a      	uxth	r2, r3
 8010808:	4b45      	ldr	r3, [pc, #276]	; (8010920 <ip4_reass+0x2b0>)
 801080a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801080c:	69fb      	ldr	r3, [r7, #28]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d00d      	beq.n	801082e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010812:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010814:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010816:	4413      	add	r3, r2
 8010818:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801081a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801081c:	8a7a      	ldrh	r2, [r7, #18]
 801081e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010822:	7f9b      	ldrb	r3, [r3, #30]
 8010824:	f043 0301 	orr.w	r3, r3, #1
 8010828:	b2da      	uxtb	r2, r3
 801082a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801082c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	2b01      	cmp	r3, #1
 8010832:	d171      	bne.n	8010918 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010836:	8b9b      	ldrh	r3, [r3, #28]
 8010838:	3314      	adds	r3, #20
 801083a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801083c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801083e:	685b      	ldr	r3, [r3, #4]
 8010840:	685b      	ldr	r3, [r3, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010848:	685b      	ldr	r3, [r3, #4]
 801084a:	685b      	ldr	r3, [r3, #4]
 801084c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801084e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010850:	3308      	adds	r3, #8
 8010852:	2214      	movs	r2, #20
 8010854:	4619      	mov	r1, r3
 8010856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010858:	f000 fb4e 	bl	8010ef8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801085c:	8a3b      	ldrh	r3, [r7, #16]
 801085e:	4618      	mov	r0, r3
 8010860:	f7f5 fe9c 	bl	800659c <lwip_htons>
 8010864:	4603      	mov	r3, r0
 8010866:	461a      	mov	r2, r3
 8010868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801086a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801086c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801086e:	2200      	movs	r2, #0
 8010870:	719a      	strb	r2, [r3, #6]
 8010872:	2200      	movs	r2, #0
 8010874:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010878:	2200      	movs	r2, #0
 801087a:	729a      	strb	r2, [r3, #10]
 801087c:	2200      	movs	r2, #0
 801087e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010882:	685b      	ldr	r3, [r3, #4]
 8010884:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010886:	e00d      	b.n	80108a4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801088a:	685b      	ldr	r3, [r3, #4]
 801088c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801088e:	2114      	movs	r1, #20
 8010890:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010892:	f7f7 f9c5 	bl	8007c20 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010896:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f7f7 fb09 	bl	8007eb0 <pbuf_cat>
      r = iprh->next_pbuf;
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80108a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d1ee      	bne.n	8010888 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80108aa:	4b1e      	ldr	r3, [pc, #120]	; (8010924 <ip4_reass+0x2b4>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d102      	bne.n	80108ba <ip4_reass+0x24a>
      ipr_prev = NULL;
 80108b4:	2300      	movs	r3, #0
 80108b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108b8:	e010      	b.n	80108dc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80108ba:	4b1a      	ldr	r3, [pc, #104]	; (8010924 <ip4_reass+0x2b4>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108c0:	e007      	b.n	80108d2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80108c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108c8:	429a      	cmp	r2, r3
 80108ca:	d006      	beq.n	80108da <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80108cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d1f4      	bne.n	80108c2 <ip4_reass+0x252>
 80108d8:	e000      	b.n	80108dc <ip4_reass+0x26c>
          break;
 80108da:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80108dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80108de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108e0:	f7ff fd2e 	bl	8010340 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f7f7 faa9 	bl	8007e3c <pbuf_clen>
 80108ea:	4603      	mov	r3, r0
 80108ec:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80108ee:	4b0c      	ldr	r3, [pc, #48]	; (8010920 <ip4_reass+0x2b0>)
 80108f0:	881b      	ldrh	r3, [r3, #0]
 80108f2:	8c3a      	ldrh	r2, [r7, #32]
 80108f4:	429a      	cmp	r2, r3
 80108f6:	d906      	bls.n	8010906 <ip4_reass+0x296>
 80108f8:	4b0b      	ldr	r3, [pc, #44]	; (8010928 <ip4_reass+0x2b8>)
 80108fa:	f240 229b 	movw	r2, #667	; 0x29b
 80108fe:	490b      	ldr	r1, [pc, #44]	; (801092c <ip4_reass+0x2bc>)
 8010900:	480b      	ldr	r0, [pc, #44]	; (8010930 <ip4_reass+0x2c0>)
 8010902:	f000 fb0f 	bl	8010f24 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010906:	4b06      	ldr	r3, [pc, #24]	; (8010920 <ip4_reass+0x2b0>)
 8010908:	881a      	ldrh	r2, [r3, #0]
 801090a:	8c3b      	ldrh	r3, [r7, #32]
 801090c:	1ad3      	subs	r3, r2, r3
 801090e:	b29a      	uxth	r2, r3
 8010910:	4b03      	ldr	r3, [pc, #12]	; (8010920 <ip4_reass+0x2b0>)
 8010912:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	e038      	b.n	801098a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010918:	2300      	movs	r3, #0
 801091a:	e036      	b.n	801098a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801091c:	bf00      	nop
 801091e:	e00a      	b.n	8010936 <ip4_reass+0x2c6>
 8010920:	2000887c 	.word	0x2000887c
 8010924:	20008878 	.word	0x20008878
 8010928:	08014aa4 	.word	0x08014aa4
 801092c:	08014c14 	.word	0x08014c14
 8010930:	08014aec 	.word	0x08014aec
    goto nullreturn_ipr;
 8010934:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010938:	2b00      	cmp	r3, #0
 801093a:	d106      	bne.n	801094a <ip4_reass+0x2da>
 801093c:	4b15      	ldr	r3, [pc, #84]	; (8010994 <ip4_reass+0x324>)
 801093e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010942:	4915      	ldr	r1, [pc, #84]	; (8010998 <ip4_reass+0x328>)
 8010944:	4815      	ldr	r0, [pc, #84]	; (801099c <ip4_reass+0x32c>)
 8010946:	f000 faed 	bl	8010f24 <iprintf>
  if (ipr->p == NULL) {
 801094a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d116      	bne.n	8010980 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010952:	4b13      	ldr	r3, [pc, #76]	; (80109a0 <ip4_reass+0x330>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010958:	429a      	cmp	r2, r3
 801095a:	d006      	beq.n	801096a <ip4_reass+0x2fa>
 801095c:	4b0d      	ldr	r3, [pc, #52]	; (8010994 <ip4_reass+0x324>)
 801095e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010962:	4910      	ldr	r1, [pc, #64]	; (80109a4 <ip4_reass+0x334>)
 8010964:	480d      	ldr	r0, [pc, #52]	; (801099c <ip4_reass+0x32c>)
 8010966:	f000 fadd 	bl	8010f24 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801096a:	2100      	movs	r1, #0
 801096c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801096e:	f7ff fce7 	bl	8010340 <ip_reass_dequeue_datagram>
 8010972:	e006      	b.n	8010982 <ip4_reass+0x312>
    goto nullreturn;
 8010974:	bf00      	nop
 8010976:	e004      	b.n	8010982 <ip4_reass+0x312>
    goto nullreturn;
 8010978:	bf00      	nop
 801097a:	e002      	b.n	8010982 <ip4_reass+0x312>
      goto nullreturn;
 801097c:	bf00      	nop
 801097e:	e000      	b.n	8010982 <ip4_reass+0x312>
  }

nullreturn:
 8010980:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f7f7 f9d2 	bl	8007d2c <pbuf_free>
  return NULL;
 8010988:	2300      	movs	r3, #0
}
 801098a:	4618      	mov	r0, r3
 801098c:	3738      	adds	r7, #56	; 0x38
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}
 8010992:	bf00      	nop
 8010994:	08014aa4 	.word	0x08014aa4
 8010998:	08014c30 	.word	0x08014c30
 801099c:	08014aec 	.word	0x08014aec
 80109a0:	20008878 	.word	0x20008878
 80109a4:	08014c3c 	.word	0x08014c3c

080109a8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80109ac:	2005      	movs	r0, #5
 80109ae:	f7f6 fad7 	bl	8006f60 <memp_malloc>
 80109b2:	4603      	mov	r3, r0
}
 80109b4:	4618      	mov	r0, r3
 80109b6:	bd80      	pop	{r7, pc}

080109b8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b082      	sub	sp, #8
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d106      	bne.n	80109d4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80109c6:	4b07      	ldr	r3, [pc, #28]	; (80109e4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80109c8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80109cc:	4906      	ldr	r1, [pc, #24]	; (80109e8 <ip_frag_free_pbuf_custom_ref+0x30>)
 80109ce:	4807      	ldr	r0, [pc, #28]	; (80109ec <ip_frag_free_pbuf_custom_ref+0x34>)
 80109d0:	f000 faa8 	bl	8010f24 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80109d4:	6879      	ldr	r1, [r7, #4]
 80109d6:	2005      	movs	r0, #5
 80109d8:	f7f6 fb32 	bl	8007040 <memp_free>
}
 80109dc:	bf00      	nop
 80109de:	3708      	adds	r7, #8
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}
 80109e4:	08014aa4 	.word	0x08014aa4
 80109e8:	08014c5c 	.word	0x08014c5c
 80109ec:	08014aec 	.word	0x08014aec

080109f0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b084      	sub	sp, #16
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d106      	bne.n	8010a10 <ipfrag_free_pbuf_custom+0x20>
 8010a02:	4b11      	ldr	r3, [pc, #68]	; (8010a48 <ipfrag_free_pbuf_custom+0x58>)
 8010a04:	f240 22ce 	movw	r2, #718	; 0x2ce
 8010a08:	4910      	ldr	r1, [pc, #64]	; (8010a4c <ipfrag_free_pbuf_custom+0x5c>)
 8010a0a:	4811      	ldr	r0, [pc, #68]	; (8010a50 <ipfrag_free_pbuf_custom+0x60>)
 8010a0c:	f000 fa8a 	bl	8010f24 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010a10:	68fa      	ldr	r2, [r7, #12]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	429a      	cmp	r2, r3
 8010a16:	d006      	beq.n	8010a26 <ipfrag_free_pbuf_custom+0x36>
 8010a18:	4b0b      	ldr	r3, [pc, #44]	; (8010a48 <ipfrag_free_pbuf_custom+0x58>)
 8010a1a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8010a1e:	490d      	ldr	r1, [pc, #52]	; (8010a54 <ipfrag_free_pbuf_custom+0x64>)
 8010a20:	480b      	ldr	r0, [pc, #44]	; (8010a50 <ipfrag_free_pbuf_custom+0x60>)
 8010a22:	f000 fa7f 	bl	8010f24 <iprintf>
  if (pcr->original != NULL) {
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	695b      	ldr	r3, [r3, #20]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d004      	beq.n	8010a38 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	695b      	ldr	r3, [r3, #20]
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7f7 f97a 	bl	8007d2c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010a38:	68f8      	ldr	r0, [r7, #12]
 8010a3a:	f7ff ffbd 	bl	80109b8 <ip_frag_free_pbuf_custom_ref>
}
 8010a3e:	bf00      	nop
 8010a40:	3710      	adds	r7, #16
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}
 8010a46:	bf00      	nop
 8010a48:	08014aa4 	.word	0x08014aa4
 8010a4c:	08014c68 	.word	0x08014c68
 8010a50:	08014aec 	.word	0x08014aec
 8010a54:	08014c74 	.word	0x08014c74

08010a58 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b094      	sub	sp, #80	; 0x50
 8010a5c:	af02      	add	r7, sp, #8
 8010a5e:	60f8      	str	r0, [r7, #12]
 8010a60:	60b9      	str	r1, [r7, #8]
 8010a62:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010a64:	2300      	movs	r3, #0
 8010a66:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010a6e:	3b14      	subs	r3, #20
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	da00      	bge.n	8010a76 <ip4_frag+0x1e>
 8010a74:	3307      	adds	r3, #7
 8010a76:	10db      	asrs	r3, r3, #3
 8010a78:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010a7a:	2314      	movs	r3, #20
 8010a7c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	685b      	ldr	r3, [r3, #4]
 8010a82:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a86:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a8a:	781b      	ldrb	r3, [r3, #0]
 8010a8c:	f003 030f 	and.w	r3, r3, #15
 8010a90:	b2db      	uxtb	r3, r3
 8010a92:	009b      	lsls	r3, r3, #2
 8010a94:	b2db      	uxtb	r3, r3
 8010a96:	2b14      	cmp	r3, #20
 8010a98:	d002      	beq.n	8010aa0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010a9a:	f06f 0305 	mvn.w	r3, #5
 8010a9e:	e110      	b.n	8010cc2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	895b      	ldrh	r3, [r3, #10]
 8010aa4:	2b13      	cmp	r3, #19
 8010aa6:	d809      	bhi.n	8010abc <ip4_frag+0x64>
 8010aa8:	4b88      	ldr	r3, [pc, #544]	; (8010ccc <ip4_frag+0x274>)
 8010aaa:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8010aae:	4988      	ldr	r1, [pc, #544]	; (8010cd0 <ip4_frag+0x278>)
 8010ab0:	4888      	ldr	r0, [pc, #544]	; (8010cd4 <ip4_frag+0x27c>)
 8010ab2:	f000 fa37 	bl	8010f24 <iprintf>
 8010ab6:	f06f 0305 	mvn.w	r3, #5
 8010aba:	e102      	b.n	8010cc2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010abe:	88db      	ldrh	r3, [r3, #6]
 8010ac0:	b29b      	uxth	r3, r3
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f7f5 fd6a 	bl	800659c <lwip_htons>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010acc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010ace:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010ad2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010ad6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010ad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010adc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	891b      	ldrh	r3, [r3, #8]
 8010ae2:	3b14      	subs	r3, #20
 8010ae4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8010ae8:	e0e1      	b.n	8010cae <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010aea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010aec:	00db      	lsls	r3, r3, #3
 8010aee:	b29b      	uxth	r3, r3
 8010af0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010af4:	4293      	cmp	r3, r2
 8010af6:	bf28      	it	cs
 8010af8:	4613      	movcs	r3, r2
 8010afa:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010afc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010b00:	2114      	movs	r1, #20
 8010b02:	200e      	movs	r0, #14
 8010b04:	f7f6 fe2e 	bl	8007764 <pbuf_alloc>
 8010b08:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8010b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	f000 80d5 	beq.w	8010cbc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b14:	895b      	ldrh	r3, [r3, #10]
 8010b16:	2b13      	cmp	r3, #19
 8010b18:	d806      	bhi.n	8010b28 <ip4_frag+0xd0>
 8010b1a:	4b6c      	ldr	r3, [pc, #432]	; (8010ccc <ip4_frag+0x274>)
 8010b1c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010b20:	496d      	ldr	r1, [pc, #436]	; (8010cd8 <ip4_frag+0x280>)
 8010b22:	486c      	ldr	r0, [pc, #432]	; (8010cd4 <ip4_frag+0x27c>)
 8010b24:	f000 f9fe 	bl	8010f24 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b2a:	685b      	ldr	r3, [r3, #4]
 8010b2c:	2214      	movs	r2, #20
 8010b2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010b30:	4618      	mov	r0, r3
 8010b32:	f000 f9e1 	bl	8010ef8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b38:	685b      	ldr	r3, [r3, #4]
 8010b3a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010b3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010b3e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010b42:	e064      	b.n	8010c0e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	895a      	ldrh	r2, [r3, #10]
 8010b48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b4a:	1ad3      	subs	r3, r2, r3
 8010b4c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	895b      	ldrh	r3, [r3, #10]
 8010b52:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d906      	bls.n	8010b66 <ip4_frag+0x10e>
 8010b58:	4b5c      	ldr	r3, [pc, #368]	; (8010ccc <ip4_frag+0x274>)
 8010b5a:	f240 322d 	movw	r2, #813	; 0x32d
 8010b5e:	495f      	ldr	r1, [pc, #380]	; (8010cdc <ip4_frag+0x284>)
 8010b60:	485c      	ldr	r0, [pc, #368]	; (8010cd4 <ip4_frag+0x27c>)
 8010b62:	f000 f9df 	bl	8010f24 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010b66:	8bfa      	ldrh	r2, [r7, #30]
 8010b68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010b6c:	4293      	cmp	r3, r2
 8010b6e:	bf28      	it	cs
 8010b70:	4613      	movcs	r3, r2
 8010b72:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010b76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d105      	bne.n	8010b8a <ip4_frag+0x132>
        poff = 0;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	60fb      	str	r3, [r7, #12]
        continue;
 8010b88:	e041      	b.n	8010c0e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010b8a:	f7ff ff0d 	bl	80109a8 <ip_frag_alloc_pbuf_custom_ref>
 8010b8e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010b90:	69bb      	ldr	r3, [r7, #24]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d103      	bne.n	8010b9e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010b96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b98:	f7f7 f8c8 	bl	8007d2c <pbuf_free>
        goto memerr;
 8010b9c:	e08f      	b.n	8010cbe <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010b9e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010ba4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010ba6:	4413      	add	r3, r2
 8010ba8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8010bac:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010bb0:	9201      	str	r2, [sp, #4]
 8010bb2:	9300      	str	r3, [sp, #0]
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	2241      	movs	r2, #65	; 0x41
 8010bb8:	2000      	movs	r0, #0
 8010bba:	f7f6 fefd 	bl	80079b8 <pbuf_alloced_custom>
 8010bbe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d106      	bne.n	8010bd4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010bc6:	69b8      	ldr	r0, [r7, #24]
 8010bc8:	f7ff fef6 	bl	80109b8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010bcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010bce:	f7f7 f8ad 	bl	8007d2c <pbuf_free>
        goto memerr;
 8010bd2:	e074      	b.n	8010cbe <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010bd4:	68f8      	ldr	r0, [r7, #12]
 8010bd6:	f7f7 f949 	bl	8007e6c <pbuf_ref>
      pcr->original = p;
 8010bda:	69bb      	ldr	r3, [r7, #24]
 8010bdc:	68fa      	ldr	r2, [r7, #12]
 8010bde:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010be0:	69bb      	ldr	r3, [r7, #24]
 8010be2:	4a3f      	ldr	r2, [pc, #252]	; (8010ce0 <ip4_frag+0x288>)
 8010be4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010be6:	6979      	ldr	r1, [r7, #20]
 8010be8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010bea:	f7f7 f961 	bl	8007eb0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010bee:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010bf2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010bf6:	1ad3      	subs	r3, r2, r3
 8010bf8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8010bfc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d004      	beq.n	8010c0e <ip4_frag+0x1b6>
        poff = 0;
 8010c04:	2300      	movs	r3, #0
 8010c06:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010c0e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d196      	bne.n	8010b44 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010c16:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010c18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010c1c:	4413      	add	r3, r2
 8010c1e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010c20:	68bb      	ldr	r3, [r7, #8]
 8010c22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010c24:	f1a3 0213 	sub.w	r2, r3, #19
 8010c28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	bfcc      	ite	gt
 8010c30:	2301      	movgt	r3, #1
 8010c32:	2300      	movle	r3, #0
 8010c34:	b2db      	uxtb	r3, r3
 8010c36:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010c38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010c3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010c40:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010c42:	6a3b      	ldr	r3, [r7, #32]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d002      	beq.n	8010c4e <ip4_frag+0x1f6>
 8010c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d003      	beq.n	8010c56 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010c4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010c50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010c54:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010c56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010c58:	4618      	mov	r0, r3
 8010c5a:	f7f5 fc9f 	bl	800659c <lwip_htons>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	461a      	mov	r2, r3
 8010c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c64:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010c66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010c68:	3314      	adds	r3, #20
 8010c6a:	b29b      	uxth	r3, r3
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7f5 fc95 	bl	800659c <lwip_htons>
 8010c72:	4603      	mov	r3, r0
 8010c74:	461a      	mov	r2, r3
 8010c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c78:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	729a      	strb	r2, [r3, #10]
 8010c80:	2200      	movs	r2, #0
 8010c82:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	695b      	ldr	r3, [r3, #20]
 8010c88:	687a      	ldr	r2, [r7, #4]
 8010c8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010c8c:	68b8      	ldr	r0, [r7, #8]
 8010c8e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010c90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c92:	f7f7 f84b 	bl	8007d2c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010c96:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010c9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010c9c:	1ad3      	subs	r3, r2, r3
 8010c9e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8010ca2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010ca6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010ca8:	4413      	add	r3, r2
 8010caa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8010cae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	f47f af19 	bne.w	8010aea <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	e002      	b.n	8010cc2 <ip4_frag+0x26a>
      goto memerr;
 8010cbc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010cbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	3748      	adds	r7, #72	; 0x48
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd80      	pop	{r7, pc}
 8010cca:	bf00      	nop
 8010ccc:	08014aa4 	.word	0x08014aa4
 8010cd0:	08014c80 	.word	0x08014c80
 8010cd4:	08014aec 	.word	0x08014aec
 8010cd8:	08014c9c 	.word	0x08014c9c
 8010cdc:	08014cbc 	.word	0x08014cbc
 8010ce0:	080109f1 	.word	0x080109f1

08010ce4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b086      	sub	sp, #24
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010cee:	230e      	movs	r3, #14
 8010cf0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	895b      	ldrh	r3, [r3, #10]
 8010cf6:	2b0e      	cmp	r3, #14
 8010cf8:	d96e      	bls.n	8010dd8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	7bdb      	ldrb	r3, [r3, #15]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d106      	bne.n	8010d10 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d08:	3301      	adds	r3, #1
 8010d0a:	b2da      	uxtb	r2, r3
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	685b      	ldr	r3, [r3, #4]
 8010d14:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010d16:	693b      	ldr	r3, [r7, #16]
 8010d18:	7b1a      	ldrb	r2, [r3, #12]
 8010d1a:	7b5b      	ldrb	r3, [r3, #13]
 8010d1c:	021b      	lsls	r3, r3, #8
 8010d1e:	4313      	orrs	r3, r2
 8010d20:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010d22:	693b      	ldr	r3, [r7, #16]
 8010d24:	781b      	ldrb	r3, [r3, #0]
 8010d26:	f003 0301 	and.w	r3, r3, #1
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d023      	beq.n	8010d76 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010d2e:	693b      	ldr	r3, [r7, #16]
 8010d30:	781b      	ldrb	r3, [r3, #0]
 8010d32:	2b01      	cmp	r3, #1
 8010d34:	d10f      	bne.n	8010d56 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	785b      	ldrb	r3, [r3, #1]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d11b      	bne.n	8010d76 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010d3e:	693b      	ldr	r3, [r7, #16]
 8010d40:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010d42:	2b5e      	cmp	r3, #94	; 0x5e
 8010d44:	d117      	bne.n	8010d76 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	7b5b      	ldrb	r3, [r3, #13]
 8010d4a:	f043 0310 	orr.w	r3, r3, #16
 8010d4e:	b2da      	uxtb	r2, r3
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	735a      	strb	r2, [r3, #13]
 8010d54:	e00f      	b.n	8010d76 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	2206      	movs	r2, #6
 8010d5a:	4928      	ldr	r1, [pc, #160]	; (8010dfc <ethernet_input+0x118>)
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f000 f8bb 	bl	8010ed8 <memcmp>
 8010d62:	4603      	mov	r3, r0
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d106      	bne.n	8010d76 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	7b5b      	ldrb	r3, [r3, #13]
 8010d6c:	f043 0308 	orr.w	r3, r3, #8
 8010d70:	b2da      	uxtb	r2, r3
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010d76:	89fb      	ldrh	r3, [r7, #14]
 8010d78:	2b08      	cmp	r3, #8
 8010d7a:	d003      	beq.n	8010d84 <ethernet_input+0xa0>
 8010d7c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010d80:	d014      	beq.n	8010dac <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010d82:	e032      	b.n	8010dea <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010d84:	683b      	ldr	r3, [r7, #0]
 8010d86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d8a:	f003 0308 	and.w	r3, r3, #8
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d024      	beq.n	8010ddc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010d92:	8afb      	ldrh	r3, [r7, #22]
 8010d94:	4619      	mov	r1, r3
 8010d96:	6878      	ldr	r0, [r7, #4]
 8010d98:	f7f6 ff42 	bl	8007c20 <pbuf_remove_header>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d11e      	bne.n	8010de0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010da2:	6839      	ldr	r1, [r7, #0]
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f7fe ff21 	bl	800fbec <ip4_input>
      break;
 8010daa:	e013      	b.n	8010dd4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010db2:	f003 0308 	and.w	r3, r3, #8
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d014      	beq.n	8010de4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010dba:	8afb      	ldrh	r3, [r7, #22]
 8010dbc:	4619      	mov	r1, r3
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	f7f6 ff2e 	bl	8007c20 <pbuf_remove_header>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d10e      	bne.n	8010de8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010dca:	6839      	ldr	r1, [r7, #0]
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f7fe f8c1 	bl	800ef54 <etharp_input>
      break;
 8010dd2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	e00c      	b.n	8010df2 <ethernet_input+0x10e>
    goto free_and_return;
 8010dd8:	bf00      	nop
 8010dda:	e006      	b.n	8010dea <ethernet_input+0x106>
        goto free_and_return;
 8010ddc:	bf00      	nop
 8010dde:	e004      	b.n	8010dea <ethernet_input+0x106>
        goto free_and_return;
 8010de0:	bf00      	nop
 8010de2:	e002      	b.n	8010dea <ethernet_input+0x106>
        goto free_and_return;
 8010de4:	bf00      	nop
 8010de6:	e000      	b.n	8010dea <ethernet_input+0x106>
        goto free_and_return;
 8010de8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010dea:	6878      	ldr	r0, [r7, #4]
 8010dec:	f7f6 ff9e 	bl	8007d2c <pbuf_free>
  return ERR_OK;
 8010df0:	2300      	movs	r3, #0
}
 8010df2:	4618      	mov	r0, r3
 8010df4:	3718      	adds	r7, #24
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd80      	pop	{r7, pc}
 8010dfa:	bf00      	nop
 8010dfc:	08015328 	.word	0x08015328

08010e00 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b086      	sub	sp, #24
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	60f8      	str	r0, [r7, #12]
 8010e08:	60b9      	str	r1, [r7, #8]
 8010e0a:	607a      	str	r2, [r7, #4]
 8010e0c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010e0e:	8c3b      	ldrh	r3, [r7, #32]
 8010e10:	4618      	mov	r0, r3
 8010e12:	f7f5 fbc3 	bl	800659c <lwip_htons>
 8010e16:	4603      	mov	r3, r0
 8010e18:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010e1a:	210e      	movs	r1, #14
 8010e1c:	68b8      	ldr	r0, [r7, #8]
 8010e1e:	f7f6 feef 	bl	8007c00 <pbuf_add_header>
 8010e22:	4603      	mov	r3, r0
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d125      	bne.n	8010e74 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	685b      	ldr	r3, [r3, #4]
 8010e2c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010e2e:	693b      	ldr	r3, [r7, #16]
 8010e30:	8afa      	ldrh	r2, [r7, #22]
 8010e32:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010e34:	693b      	ldr	r3, [r7, #16]
 8010e36:	2206      	movs	r2, #6
 8010e38:	6839      	ldr	r1, [r7, #0]
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f000 f85c 	bl	8010ef8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010e40:	693b      	ldr	r3, [r7, #16]
 8010e42:	3306      	adds	r3, #6
 8010e44:	2206      	movs	r2, #6
 8010e46:	6879      	ldr	r1, [r7, #4]
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f000 f855 	bl	8010ef8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010e54:	2b06      	cmp	r3, #6
 8010e56:	d006      	beq.n	8010e66 <ethernet_output+0x66>
 8010e58:	4b0a      	ldr	r3, [pc, #40]	; (8010e84 <ethernet_output+0x84>)
 8010e5a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8010e5e:	490a      	ldr	r1, [pc, #40]	; (8010e88 <ethernet_output+0x88>)
 8010e60:	480a      	ldr	r0, [pc, #40]	; (8010e8c <ethernet_output+0x8c>)
 8010e62:	f000 f85f 	bl	8010f24 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	699b      	ldr	r3, [r3, #24]
 8010e6a:	68b9      	ldr	r1, [r7, #8]
 8010e6c:	68f8      	ldr	r0, [r7, #12]
 8010e6e:	4798      	blx	r3
 8010e70:	4603      	mov	r3, r0
 8010e72:	e002      	b.n	8010e7a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010e74:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010e76:	f06f 0301 	mvn.w	r3, #1
}
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	3718      	adds	r7, #24
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bd80      	pop	{r7, pc}
 8010e82:	bf00      	nop
 8010e84:	08014ccc 	.word	0x08014ccc
 8010e88:	08014d04 	.word	0x08014d04
 8010e8c:	08014d38 	.word	0x08014d38

08010e90 <__libc_init_array>:
 8010e90:	b570      	push	{r4, r5, r6, lr}
 8010e92:	4d0d      	ldr	r5, [pc, #52]	; (8010ec8 <__libc_init_array+0x38>)
 8010e94:	4c0d      	ldr	r4, [pc, #52]	; (8010ecc <__libc_init_array+0x3c>)
 8010e96:	1b64      	subs	r4, r4, r5
 8010e98:	10a4      	asrs	r4, r4, #2
 8010e9a:	2600      	movs	r6, #0
 8010e9c:	42a6      	cmp	r6, r4
 8010e9e:	d109      	bne.n	8010eb4 <__libc_init_array+0x24>
 8010ea0:	4d0b      	ldr	r5, [pc, #44]	; (8010ed0 <__libc_init_array+0x40>)
 8010ea2:	4c0c      	ldr	r4, [pc, #48]	; (8010ed4 <__libc_init_array+0x44>)
 8010ea4:	f001 f8b0 	bl	8012008 <_init>
 8010ea8:	1b64      	subs	r4, r4, r5
 8010eaa:	10a4      	asrs	r4, r4, #2
 8010eac:	2600      	movs	r6, #0
 8010eae:	42a6      	cmp	r6, r4
 8010eb0:	d105      	bne.n	8010ebe <__libc_init_array+0x2e>
 8010eb2:	bd70      	pop	{r4, r5, r6, pc}
 8010eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010eb8:	4798      	blx	r3
 8010eba:	3601      	adds	r6, #1
 8010ebc:	e7ee      	b.n	8010e9c <__libc_init_array+0xc>
 8010ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ec2:	4798      	blx	r3
 8010ec4:	3601      	adds	r6, #1
 8010ec6:	e7f2      	b.n	8010eae <__libc_init_array+0x1e>
 8010ec8:	08015488 	.word	0x08015488
 8010ecc:	08015488 	.word	0x08015488
 8010ed0:	08015488 	.word	0x08015488
 8010ed4:	0801548c 	.word	0x0801548c

08010ed8 <memcmp>:
 8010ed8:	b510      	push	{r4, lr}
 8010eda:	3901      	subs	r1, #1
 8010edc:	4402      	add	r2, r0
 8010ede:	4290      	cmp	r0, r2
 8010ee0:	d101      	bne.n	8010ee6 <memcmp+0xe>
 8010ee2:	2000      	movs	r0, #0
 8010ee4:	e005      	b.n	8010ef2 <memcmp+0x1a>
 8010ee6:	7803      	ldrb	r3, [r0, #0]
 8010ee8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010eec:	42a3      	cmp	r3, r4
 8010eee:	d001      	beq.n	8010ef4 <memcmp+0x1c>
 8010ef0:	1b18      	subs	r0, r3, r4
 8010ef2:	bd10      	pop	{r4, pc}
 8010ef4:	3001      	adds	r0, #1
 8010ef6:	e7f2      	b.n	8010ede <memcmp+0x6>

08010ef8 <memcpy>:
 8010ef8:	440a      	add	r2, r1
 8010efa:	4291      	cmp	r1, r2
 8010efc:	f100 33ff 	add.w	r3, r0, #4294967295
 8010f00:	d100      	bne.n	8010f04 <memcpy+0xc>
 8010f02:	4770      	bx	lr
 8010f04:	b510      	push	{r4, lr}
 8010f06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f0e:	4291      	cmp	r1, r2
 8010f10:	d1f9      	bne.n	8010f06 <memcpy+0xe>
 8010f12:	bd10      	pop	{r4, pc}

08010f14 <memset>:
 8010f14:	4402      	add	r2, r0
 8010f16:	4603      	mov	r3, r0
 8010f18:	4293      	cmp	r3, r2
 8010f1a:	d100      	bne.n	8010f1e <memset+0xa>
 8010f1c:	4770      	bx	lr
 8010f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8010f22:	e7f9      	b.n	8010f18 <memset+0x4>

08010f24 <iprintf>:
 8010f24:	b40f      	push	{r0, r1, r2, r3}
 8010f26:	4b0a      	ldr	r3, [pc, #40]	; (8010f50 <iprintf+0x2c>)
 8010f28:	b513      	push	{r0, r1, r4, lr}
 8010f2a:	681c      	ldr	r4, [r3, #0]
 8010f2c:	b124      	cbz	r4, 8010f38 <iprintf+0x14>
 8010f2e:	69a3      	ldr	r3, [r4, #24]
 8010f30:	b913      	cbnz	r3, 8010f38 <iprintf+0x14>
 8010f32:	4620      	mov	r0, r4
 8010f34:	f000 f8e4 	bl	8011100 <__sinit>
 8010f38:	ab05      	add	r3, sp, #20
 8010f3a:	9a04      	ldr	r2, [sp, #16]
 8010f3c:	68a1      	ldr	r1, [r4, #8]
 8010f3e:	9301      	str	r3, [sp, #4]
 8010f40:	4620      	mov	r0, r4
 8010f42:	f000 faa1 	bl	8011488 <_vfiprintf_r>
 8010f46:	b002      	add	sp, #8
 8010f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f4c:	b004      	add	sp, #16
 8010f4e:	4770      	bx	lr
 8010f50:	2000005c 	.word	0x2000005c

08010f54 <rand>:
 8010f54:	4b16      	ldr	r3, [pc, #88]	; (8010fb0 <rand+0x5c>)
 8010f56:	b510      	push	{r4, lr}
 8010f58:	681c      	ldr	r4, [r3, #0]
 8010f5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010f5c:	b9b3      	cbnz	r3, 8010f8c <rand+0x38>
 8010f5e:	2018      	movs	r0, #24
 8010f60:	f000 f980 	bl	8011264 <malloc>
 8010f64:	63a0      	str	r0, [r4, #56]	; 0x38
 8010f66:	b928      	cbnz	r0, 8010f74 <rand+0x20>
 8010f68:	4602      	mov	r2, r0
 8010f6a:	4b12      	ldr	r3, [pc, #72]	; (8010fb4 <rand+0x60>)
 8010f6c:	4812      	ldr	r0, [pc, #72]	; (8010fb8 <rand+0x64>)
 8010f6e:	214e      	movs	r1, #78	; 0x4e
 8010f70:	f000 f850 	bl	8011014 <__assert_func>
 8010f74:	4a11      	ldr	r2, [pc, #68]	; (8010fbc <rand+0x68>)
 8010f76:	4b12      	ldr	r3, [pc, #72]	; (8010fc0 <rand+0x6c>)
 8010f78:	e9c0 2300 	strd	r2, r3, [r0]
 8010f7c:	4b11      	ldr	r3, [pc, #68]	; (8010fc4 <rand+0x70>)
 8010f7e:	6083      	str	r3, [r0, #8]
 8010f80:	230b      	movs	r3, #11
 8010f82:	8183      	strh	r3, [r0, #12]
 8010f84:	2201      	movs	r2, #1
 8010f86:	2300      	movs	r3, #0
 8010f88:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010f8c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8010f8e:	4a0e      	ldr	r2, [pc, #56]	; (8010fc8 <rand+0x74>)
 8010f90:	6920      	ldr	r0, [r4, #16]
 8010f92:	6963      	ldr	r3, [r4, #20]
 8010f94:	490d      	ldr	r1, [pc, #52]	; (8010fcc <rand+0x78>)
 8010f96:	4342      	muls	r2, r0
 8010f98:	fb01 2203 	mla	r2, r1, r3, r2
 8010f9c:	fba0 0101 	umull	r0, r1, r0, r1
 8010fa0:	1c43      	adds	r3, r0, #1
 8010fa2:	eb42 0001 	adc.w	r0, r2, r1
 8010fa6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8010faa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010fae:	bd10      	pop	{r4, pc}
 8010fb0:	2000005c 	.word	0x2000005c
 8010fb4:	0801533c 	.word	0x0801533c
 8010fb8:	08015353 	.word	0x08015353
 8010fbc:	abcd330e 	.word	0xabcd330e
 8010fc0:	e66d1234 	.word	0xe66d1234
 8010fc4:	0005deec 	.word	0x0005deec
 8010fc8:	5851f42d 	.word	0x5851f42d
 8010fcc:	4c957f2d 	.word	0x4c957f2d

08010fd0 <strchr>:
 8010fd0:	b2c9      	uxtb	r1, r1
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010fd8:	b11a      	cbz	r2, 8010fe2 <strchr+0x12>
 8010fda:	428a      	cmp	r2, r1
 8010fdc:	d1f9      	bne.n	8010fd2 <strchr+0x2>
 8010fde:	4618      	mov	r0, r3
 8010fe0:	4770      	bx	lr
 8010fe2:	2900      	cmp	r1, #0
 8010fe4:	bf18      	it	ne
 8010fe6:	2300      	movne	r3, #0
 8010fe8:	e7f9      	b.n	8010fde <strchr+0xe>

08010fea <strncmp>:
 8010fea:	b510      	push	{r4, lr}
 8010fec:	b17a      	cbz	r2, 801100e <strncmp+0x24>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	3901      	subs	r1, #1
 8010ff2:	1884      	adds	r4, r0, r2
 8010ff4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010ff8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010ffc:	4290      	cmp	r0, r2
 8010ffe:	d101      	bne.n	8011004 <strncmp+0x1a>
 8011000:	42a3      	cmp	r3, r4
 8011002:	d101      	bne.n	8011008 <strncmp+0x1e>
 8011004:	1a80      	subs	r0, r0, r2
 8011006:	bd10      	pop	{r4, pc}
 8011008:	2800      	cmp	r0, #0
 801100a:	d1f3      	bne.n	8010ff4 <strncmp+0xa>
 801100c:	e7fa      	b.n	8011004 <strncmp+0x1a>
 801100e:	4610      	mov	r0, r2
 8011010:	e7f9      	b.n	8011006 <strncmp+0x1c>
	...

08011014 <__assert_func>:
 8011014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011016:	4614      	mov	r4, r2
 8011018:	461a      	mov	r2, r3
 801101a:	4b09      	ldr	r3, [pc, #36]	; (8011040 <__assert_func+0x2c>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	4605      	mov	r5, r0
 8011020:	68d8      	ldr	r0, [r3, #12]
 8011022:	b14c      	cbz	r4, 8011038 <__assert_func+0x24>
 8011024:	4b07      	ldr	r3, [pc, #28]	; (8011044 <__assert_func+0x30>)
 8011026:	9100      	str	r1, [sp, #0]
 8011028:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801102c:	4906      	ldr	r1, [pc, #24]	; (8011048 <__assert_func+0x34>)
 801102e:	462b      	mov	r3, r5
 8011030:	f000 f8e4 	bl	80111fc <fiprintf>
 8011034:	f000 fe12 	bl	8011c5c <abort>
 8011038:	4b04      	ldr	r3, [pc, #16]	; (801104c <__assert_func+0x38>)
 801103a:	461c      	mov	r4, r3
 801103c:	e7f3      	b.n	8011026 <__assert_func+0x12>
 801103e:	bf00      	nop
 8011040:	2000005c 	.word	0x2000005c
 8011044:	080153ae 	.word	0x080153ae
 8011048:	080153bb 	.word	0x080153bb
 801104c:	080153e9 	.word	0x080153e9

08011050 <std>:
 8011050:	2300      	movs	r3, #0
 8011052:	b510      	push	{r4, lr}
 8011054:	4604      	mov	r4, r0
 8011056:	e9c0 3300 	strd	r3, r3, [r0]
 801105a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801105e:	6083      	str	r3, [r0, #8]
 8011060:	8181      	strh	r1, [r0, #12]
 8011062:	6643      	str	r3, [r0, #100]	; 0x64
 8011064:	81c2      	strh	r2, [r0, #14]
 8011066:	6183      	str	r3, [r0, #24]
 8011068:	4619      	mov	r1, r3
 801106a:	2208      	movs	r2, #8
 801106c:	305c      	adds	r0, #92	; 0x5c
 801106e:	f7ff ff51 	bl	8010f14 <memset>
 8011072:	4b05      	ldr	r3, [pc, #20]	; (8011088 <std+0x38>)
 8011074:	6263      	str	r3, [r4, #36]	; 0x24
 8011076:	4b05      	ldr	r3, [pc, #20]	; (801108c <std+0x3c>)
 8011078:	62a3      	str	r3, [r4, #40]	; 0x28
 801107a:	4b05      	ldr	r3, [pc, #20]	; (8011090 <std+0x40>)
 801107c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801107e:	4b05      	ldr	r3, [pc, #20]	; (8011094 <std+0x44>)
 8011080:	6224      	str	r4, [r4, #32]
 8011082:	6323      	str	r3, [r4, #48]	; 0x30
 8011084:	bd10      	pop	{r4, pc}
 8011086:	bf00      	nop
 8011088:	08011a31 	.word	0x08011a31
 801108c:	08011a53 	.word	0x08011a53
 8011090:	08011a8b 	.word	0x08011a8b
 8011094:	08011aaf 	.word	0x08011aaf

08011098 <_cleanup_r>:
 8011098:	4901      	ldr	r1, [pc, #4]	; (80110a0 <_cleanup_r+0x8>)
 801109a:	f000 b8c1 	b.w	8011220 <_fwalk_reent>
 801109e:	bf00      	nop
 80110a0:	08011d99 	.word	0x08011d99

080110a4 <__sfmoreglue>:
 80110a4:	b570      	push	{r4, r5, r6, lr}
 80110a6:	2268      	movs	r2, #104	; 0x68
 80110a8:	1e4d      	subs	r5, r1, #1
 80110aa:	4355      	muls	r5, r2
 80110ac:	460e      	mov	r6, r1
 80110ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80110b2:	f000 f94b 	bl	801134c <_malloc_r>
 80110b6:	4604      	mov	r4, r0
 80110b8:	b140      	cbz	r0, 80110cc <__sfmoreglue+0x28>
 80110ba:	2100      	movs	r1, #0
 80110bc:	e9c0 1600 	strd	r1, r6, [r0]
 80110c0:	300c      	adds	r0, #12
 80110c2:	60a0      	str	r0, [r4, #8]
 80110c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80110c8:	f7ff ff24 	bl	8010f14 <memset>
 80110cc:	4620      	mov	r0, r4
 80110ce:	bd70      	pop	{r4, r5, r6, pc}

080110d0 <__sfp_lock_acquire>:
 80110d0:	4801      	ldr	r0, [pc, #4]	; (80110d8 <__sfp_lock_acquire+0x8>)
 80110d2:	f000 b8c5 	b.w	8011260 <__retarget_lock_acquire_recursive>
 80110d6:	bf00      	nop
 80110d8:	20008885 	.word	0x20008885

080110dc <__sfp_lock_release>:
 80110dc:	4801      	ldr	r0, [pc, #4]	; (80110e4 <__sfp_lock_release+0x8>)
 80110de:	f000 b8c0 	b.w	8011262 <__retarget_lock_release_recursive>
 80110e2:	bf00      	nop
 80110e4:	20008885 	.word	0x20008885

080110e8 <__sinit_lock_acquire>:
 80110e8:	4801      	ldr	r0, [pc, #4]	; (80110f0 <__sinit_lock_acquire+0x8>)
 80110ea:	f000 b8b9 	b.w	8011260 <__retarget_lock_acquire_recursive>
 80110ee:	bf00      	nop
 80110f0:	20008886 	.word	0x20008886

080110f4 <__sinit_lock_release>:
 80110f4:	4801      	ldr	r0, [pc, #4]	; (80110fc <__sinit_lock_release+0x8>)
 80110f6:	f000 b8b4 	b.w	8011262 <__retarget_lock_release_recursive>
 80110fa:	bf00      	nop
 80110fc:	20008886 	.word	0x20008886

08011100 <__sinit>:
 8011100:	b510      	push	{r4, lr}
 8011102:	4604      	mov	r4, r0
 8011104:	f7ff fff0 	bl	80110e8 <__sinit_lock_acquire>
 8011108:	69a3      	ldr	r3, [r4, #24]
 801110a:	b11b      	cbz	r3, 8011114 <__sinit+0x14>
 801110c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011110:	f7ff bff0 	b.w	80110f4 <__sinit_lock_release>
 8011114:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011118:	6523      	str	r3, [r4, #80]	; 0x50
 801111a:	4b13      	ldr	r3, [pc, #76]	; (8011168 <__sinit+0x68>)
 801111c:	4a13      	ldr	r2, [pc, #76]	; (801116c <__sinit+0x6c>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	62a2      	str	r2, [r4, #40]	; 0x28
 8011122:	42a3      	cmp	r3, r4
 8011124:	bf04      	itt	eq
 8011126:	2301      	moveq	r3, #1
 8011128:	61a3      	streq	r3, [r4, #24]
 801112a:	4620      	mov	r0, r4
 801112c:	f000 f820 	bl	8011170 <__sfp>
 8011130:	6060      	str	r0, [r4, #4]
 8011132:	4620      	mov	r0, r4
 8011134:	f000 f81c 	bl	8011170 <__sfp>
 8011138:	60a0      	str	r0, [r4, #8]
 801113a:	4620      	mov	r0, r4
 801113c:	f000 f818 	bl	8011170 <__sfp>
 8011140:	2200      	movs	r2, #0
 8011142:	60e0      	str	r0, [r4, #12]
 8011144:	2104      	movs	r1, #4
 8011146:	6860      	ldr	r0, [r4, #4]
 8011148:	f7ff ff82 	bl	8011050 <std>
 801114c:	68a0      	ldr	r0, [r4, #8]
 801114e:	2201      	movs	r2, #1
 8011150:	2109      	movs	r1, #9
 8011152:	f7ff ff7d 	bl	8011050 <std>
 8011156:	68e0      	ldr	r0, [r4, #12]
 8011158:	2202      	movs	r2, #2
 801115a:	2112      	movs	r1, #18
 801115c:	f7ff ff78 	bl	8011050 <std>
 8011160:	2301      	movs	r3, #1
 8011162:	61a3      	str	r3, [r4, #24]
 8011164:	e7d2      	b.n	801110c <__sinit+0xc>
 8011166:	bf00      	nop
 8011168:	08015338 	.word	0x08015338
 801116c:	08011099 	.word	0x08011099

08011170 <__sfp>:
 8011170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011172:	4607      	mov	r7, r0
 8011174:	f7ff ffac 	bl	80110d0 <__sfp_lock_acquire>
 8011178:	4b1e      	ldr	r3, [pc, #120]	; (80111f4 <__sfp+0x84>)
 801117a:	681e      	ldr	r6, [r3, #0]
 801117c:	69b3      	ldr	r3, [r6, #24]
 801117e:	b913      	cbnz	r3, 8011186 <__sfp+0x16>
 8011180:	4630      	mov	r0, r6
 8011182:	f7ff ffbd 	bl	8011100 <__sinit>
 8011186:	3648      	adds	r6, #72	; 0x48
 8011188:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801118c:	3b01      	subs	r3, #1
 801118e:	d503      	bpl.n	8011198 <__sfp+0x28>
 8011190:	6833      	ldr	r3, [r6, #0]
 8011192:	b30b      	cbz	r3, 80111d8 <__sfp+0x68>
 8011194:	6836      	ldr	r6, [r6, #0]
 8011196:	e7f7      	b.n	8011188 <__sfp+0x18>
 8011198:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801119c:	b9d5      	cbnz	r5, 80111d4 <__sfp+0x64>
 801119e:	4b16      	ldr	r3, [pc, #88]	; (80111f8 <__sfp+0x88>)
 80111a0:	60e3      	str	r3, [r4, #12]
 80111a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80111a6:	6665      	str	r5, [r4, #100]	; 0x64
 80111a8:	f000 f859 	bl	801125e <__retarget_lock_init_recursive>
 80111ac:	f7ff ff96 	bl	80110dc <__sfp_lock_release>
 80111b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80111b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80111b8:	6025      	str	r5, [r4, #0]
 80111ba:	61a5      	str	r5, [r4, #24]
 80111bc:	2208      	movs	r2, #8
 80111be:	4629      	mov	r1, r5
 80111c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80111c4:	f7ff fea6 	bl	8010f14 <memset>
 80111c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80111cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80111d0:	4620      	mov	r0, r4
 80111d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111d4:	3468      	adds	r4, #104	; 0x68
 80111d6:	e7d9      	b.n	801118c <__sfp+0x1c>
 80111d8:	2104      	movs	r1, #4
 80111da:	4638      	mov	r0, r7
 80111dc:	f7ff ff62 	bl	80110a4 <__sfmoreglue>
 80111e0:	4604      	mov	r4, r0
 80111e2:	6030      	str	r0, [r6, #0]
 80111e4:	2800      	cmp	r0, #0
 80111e6:	d1d5      	bne.n	8011194 <__sfp+0x24>
 80111e8:	f7ff ff78 	bl	80110dc <__sfp_lock_release>
 80111ec:	230c      	movs	r3, #12
 80111ee:	603b      	str	r3, [r7, #0]
 80111f0:	e7ee      	b.n	80111d0 <__sfp+0x60>
 80111f2:	bf00      	nop
 80111f4:	08015338 	.word	0x08015338
 80111f8:	ffff0001 	.word	0xffff0001

080111fc <fiprintf>:
 80111fc:	b40e      	push	{r1, r2, r3}
 80111fe:	b503      	push	{r0, r1, lr}
 8011200:	4601      	mov	r1, r0
 8011202:	ab03      	add	r3, sp, #12
 8011204:	4805      	ldr	r0, [pc, #20]	; (801121c <fiprintf+0x20>)
 8011206:	f853 2b04 	ldr.w	r2, [r3], #4
 801120a:	6800      	ldr	r0, [r0, #0]
 801120c:	9301      	str	r3, [sp, #4]
 801120e:	f000 f93b 	bl	8011488 <_vfiprintf_r>
 8011212:	b002      	add	sp, #8
 8011214:	f85d eb04 	ldr.w	lr, [sp], #4
 8011218:	b003      	add	sp, #12
 801121a:	4770      	bx	lr
 801121c:	2000005c 	.word	0x2000005c

08011220 <_fwalk_reent>:
 8011220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011224:	4606      	mov	r6, r0
 8011226:	4688      	mov	r8, r1
 8011228:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801122c:	2700      	movs	r7, #0
 801122e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011232:	f1b9 0901 	subs.w	r9, r9, #1
 8011236:	d505      	bpl.n	8011244 <_fwalk_reent+0x24>
 8011238:	6824      	ldr	r4, [r4, #0]
 801123a:	2c00      	cmp	r4, #0
 801123c:	d1f7      	bne.n	801122e <_fwalk_reent+0xe>
 801123e:	4638      	mov	r0, r7
 8011240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011244:	89ab      	ldrh	r3, [r5, #12]
 8011246:	2b01      	cmp	r3, #1
 8011248:	d907      	bls.n	801125a <_fwalk_reent+0x3a>
 801124a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801124e:	3301      	adds	r3, #1
 8011250:	d003      	beq.n	801125a <_fwalk_reent+0x3a>
 8011252:	4629      	mov	r1, r5
 8011254:	4630      	mov	r0, r6
 8011256:	47c0      	blx	r8
 8011258:	4307      	orrs	r7, r0
 801125a:	3568      	adds	r5, #104	; 0x68
 801125c:	e7e9      	b.n	8011232 <_fwalk_reent+0x12>

0801125e <__retarget_lock_init_recursive>:
 801125e:	4770      	bx	lr

08011260 <__retarget_lock_acquire_recursive>:
 8011260:	4770      	bx	lr

08011262 <__retarget_lock_release_recursive>:
 8011262:	4770      	bx	lr

08011264 <malloc>:
 8011264:	4b02      	ldr	r3, [pc, #8]	; (8011270 <malloc+0xc>)
 8011266:	4601      	mov	r1, r0
 8011268:	6818      	ldr	r0, [r3, #0]
 801126a:	f000 b86f 	b.w	801134c <_malloc_r>
 801126e:	bf00      	nop
 8011270:	2000005c 	.word	0x2000005c

08011274 <_free_r>:
 8011274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011276:	2900      	cmp	r1, #0
 8011278:	d044      	beq.n	8011304 <_free_r+0x90>
 801127a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801127e:	9001      	str	r0, [sp, #4]
 8011280:	2b00      	cmp	r3, #0
 8011282:	f1a1 0404 	sub.w	r4, r1, #4
 8011286:	bfb8      	it	lt
 8011288:	18e4      	addlt	r4, r4, r3
 801128a:	f000 fe39 	bl	8011f00 <__malloc_lock>
 801128e:	4a1e      	ldr	r2, [pc, #120]	; (8011308 <_free_r+0x94>)
 8011290:	9801      	ldr	r0, [sp, #4]
 8011292:	6813      	ldr	r3, [r2, #0]
 8011294:	b933      	cbnz	r3, 80112a4 <_free_r+0x30>
 8011296:	6063      	str	r3, [r4, #4]
 8011298:	6014      	str	r4, [r2, #0]
 801129a:	b003      	add	sp, #12
 801129c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80112a0:	f000 be34 	b.w	8011f0c <__malloc_unlock>
 80112a4:	42a3      	cmp	r3, r4
 80112a6:	d908      	bls.n	80112ba <_free_r+0x46>
 80112a8:	6825      	ldr	r5, [r4, #0]
 80112aa:	1961      	adds	r1, r4, r5
 80112ac:	428b      	cmp	r3, r1
 80112ae:	bf01      	itttt	eq
 80112b0:	6819      	ldreq	r1, [r3, #0]
 80112b2:	685b      	ldreq	r3, [r3, #4]
 80112b4:	1949      	addeq	r1, r1, r5
 80112b6:	6021      	streq	r1, [r4, #0]
 80112b8:	e7ed      	b.n	8011296 <_free_r+0x22>
 80112ba:	461a      	mov	r2, r3
 80112bc:	685b      	ldr	r3, [r3, #4]
 80112be:	b10b      	cbz	r3, 80112c4 <_free_r+0x50>
 80112c0:	42a3      	cmp	r3, r4
 80112c2:	d9fa      	bls.n	80112ba <_free_r+0x46>
 80112c4:	6811      	ldr	r1, [r2, #0]
 80112c6:	1855      	adds	r5, r2, r1
 80112c8:	42a5      	cmp	r5, r4
 80112ca:	d10b      	bne.n	80112e4 <_free_r+0x70>
 80112cc:	6824      	ldr	r4, [r4, #0]
 80112ce:	4421      	add	r1, r4
 80112d0:	1854      	adds	r4, r2, r1
 80112d2:	42a3      	cmp	r3, r4
 80112d4:	6011      	str	r1, [r2, #0]
 80112d6:	d1e0      	bne.n	801129a <_free_r+0x26>
 80112d8:	681c      	ldr	r4, [r3, #0]
 80112da:	685b      	ldr	r3, [r3, #4]
 80112dc:	6053      	str	r3, [r2, #4]
 80112de:	4421      	add	r1, r4
 80112e0:	6011      	str	r1, [r2, #0]
 80112e2:	e7da      	b.n	801129a <_free_r+0x26>
 80112e4:	d902      	bls.n	80112ec <_free_r+0x78>
 80112e6:	230c      	movs	r3, #12
 80112e8:	6003      	str	r3, [r0, #0]
 80112ea:	e7d6      	b.n	801129a <_free_r+0x26>
 80112ec:	6825      	ldr	r5, [r4, #0]
 80112ee:	1961      	adds	r1, r4, r5
 80112f0:	428b      	cmp	r3, r1
 80112f2:	bf04      	itt	eq
 80112f4:	6819      	ldreq	r1, [r3, #0]
 80112f6:	685b      	ldreq	r3, [r3, #4]
 80112f8:	6063      	str	r3, [r4, #4]
 80112fa:	bf04      	itt	eq
 80112fc:	1949      	addeq	r1, r1, r5
 80112fe:	6021      	streq	r1, [r4, #0]
 8011300:	6054      	str	r4, [r2, #4]
 8011302:	e7ca      	b.n	801129a <_free_r+0x26>
 8011304:	b003      	add	sp, #12
 8011306:	bd30      	pop	{r4, r5, pc}
 8011308:	20008888 	.word	0x20008888

0801130c <sbrk_aligned>:
 801130c:	b570      	push	{r4, r5, r6, lr}
 801130e:	4e0e      	ldr	r6, [pc, #56]	; (8011348 <sbrk_aligned+0x3c>)
 8011310:	460c      	mov	r4, r1
 8011312:	6831      	ldr	r1, [r6, #0]
 8011314:	4605      	mov	r5, r0
 8011316:	b911      	cbnz	r1, 801131e <sbrk_aligned+0x12>
 8011318:	f000 fb7a 	bl	8011a10 <_sbrk_r>
 801131c:	6030      	str	r0, [r6, #0]
 801131e:	4621      	mov	r1, r4
 8011320:	4628      	mov	r0, r5
 8011322:	f000 fb75 	bl	8011a10 <_sbrk_r>
 8011326:	1c43      	adds	r3, r0, #1
 8011328:	d00a      	beq.n	8011340 <sbrk_aligned+0x34>
 801132a:	1cc4      	adds	r4, r0, #3
 801132c:	f024 0403 	bic.w	r4, r4, #3
 8011330:	42a0      	cmp	r0, r4
 8011332:	d007      	beq.n	8011344 <sbrk_aligned+0x38>
 8011334:	1a21      	subs	r1, r4, r0
 8011336:	4628      	mov	r0, r5
 8011338:	f000 fb6a 	bl	8011a10 <_sbrk_r>
 801133c:	3001      	adds	r0, #1
 801133e:	d101      	bne.n	8011344 <sbrk_aligned+0x38>
 8011340:	f04f 34ff 	mov.w	r4, #4294967295
 8011344:	4620      	mov	r0, r4
 8011346:	bd70      	pop	{r4, r5, r6, pc}
 8011348:	2000888c 	.word	0x2000888c

0801134c <_malloc_r>:
 801134c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011350:	1ccd      	adds	r5, r1, #3
 8011352:	f025 0503 	bic.w	r5, r5, #3
 8011356:	3508      	adds	r5, #8
 8011358:	2d0c      	cmp	r5, #12
 801135a:	bf38      	it	cc
 801135c:	250c      	movcc	r5, #12
 801135e:	2d00      	cmp	r5, #0
 8011360:	4607      	mov	r7, r0
 8011362:	db01      	blt.n	8011368 <_malloc_r+0x1c>
 8011364:	42a9      	cmp	r1, r5
 8011366:	d905      	bls.n	8011374 <_malloc_r+0x28>
 8011368:	230c      	movs	r3, #12
 801136a:	603b      	str	r3, [r7, #0]
 801136c:	2600      	movs	r6, #0
 801136e:	4630      	mov	r0, r6
 8011370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011374:	4e2e      	ldr	r6, [pc, #184]	; (8011430 <_malloc_r+0xe4>)
 8011376:	f000 fdc3 	bl	8011f00 <__malloc_lock>
 801137a:	6833      	ldr	r3, [r6, #0]
 801137c:	461c      	mov	r4, r3
 801137e:	bb34      	cbnz	r4, 80113ce <_malloc_r+0x82>
 8011380:	4629      	mov	r1, r5
 8011382:	4638      	mov	r0, r7
 8011384:	f7ff ffc2 	bl	801130c <sbrk_aligned>
 8011388:	1c43      	adds	r3, r0, #1
 801138a:	4604      	mov	r4, r0
 801138c:	d14d      	bne.n	801142a <_malloc_r+0xde>
 801138e:	6834      	ldr	r4, [r6, #0]
 8011390:	4626      	mov	r6, r4
 8011392:	2e00      	cmp	r6, #0
 8011394:	d140      	bne.n	8011418 <_malloc_r+0xcc>
 8011396:	6823      	ldr	r3, [r4, #0]
 8011398:	4631      	mov	r1, r6
 801139a:	4638      	mov	r0, r7
 801139c:	eb04 0803 	add.w	r8, r4, r3
 80113a0:	f000 fb36 	bl	8011a10 <_sbrk_r>
 80113a4:	4580      	cmp	r8, r0
 80113a6:	d13a      	bne.n	801141e <_malloc_r+0xd2>
 80113a8:	6821      	ldr	r1, [r4, #0]
 80113aa:	3503      	adds	r5, #3
 80113ac:	1a6d      	subs	r5, r5, r1
 80113ae:	f025 0503 	bic.w	r5, r5, #3
 80113b2:	3508      	adds	r5, #8
 80113b4:	2d0c      	cmp	r5, #12
 80113b6:	bf38      	it	cc
 80113b8:	250c      	movcc	r5, #12
 80113ba:	4629      	mov	r1, r5
 80113bc:	4638      	mov	r0, r7
 80113be:	f7ff ffa5 	bl	801130c <sbrk_aligned>
 80113c2:	3001      	adds	r0, #1
 80113c4:	d02b      	beq.n	801141e <_malloc_r+0xd2>
 80113c6:	6823      	ldr	r3, [r4, #0]
 80113c8:	442b      	add	r3, r5
 80113ca:	6023      	str	r3, [r4, #0]
 80113cc:	e00e      	b.n	80113ec <_malloc_r+0xa0>
 80113ce:	6822      	ldr	r2, [r4, #0]
 80113d0:	1b52      	subs	r2, r2, r5
 80113d2:	d41e      	bmi.n	8011412 <_malloc_r+0xc6>
 80113d4:	2a0b      	cmp	r2, #11
 80113d6:	d916      	bls.n	8011406 <_malloc_r+0xba>
 80113d8:	1961      	adds	r1, r4, r5
 80113da:	42a3      	cmp	r3, r4
 80113dc:	6025      	str	r5, [r4, #0]
 80113de:	bf18      	it	ne
 80113e0:	6059      	strne	r1, [r3, #4]
 80113e2:	6863      	ldr	r3, [r4, #4]
 80113e4:	bf08      	it	eq
 80113e6:	6031      	streq	r1, [r6, #0]
 80113e8:	5162      	str	r2, [r4, r5]
 80113ea:	604b      	str	r3, [r1, #4]
 80113ec:	4638      	mov	r0, r7
 80113ee:	f104 060b 	add.w	r6, r4, #11
 80113f2:	f000 fd8b 	bl	8011f0c <__malloc_unlock>
 80113f6:	f026 0607 	bic.w	r6, r6, #7
 80113fa:	1d23      	adds	r3, r4, #4
 80113fc:	1af2      	subs	r2, r6, r3
 80113fe:	d0b6      	beq.n	801136e <_malloc_r+0x22>
 8011400:	1b9b      	subs	r3, r3, r6
 8011402:	50a3      	str	r3, [r4, r2]
 8011404:	e7b3      	b.n	801136e <_malloc_r+0x22>
 8011406:	6862      	ldr	r2, [r4, #4]
 8011408:	42a3      	cmp	r3, r4
 801140a:	bf0c      	ite	eq
 801140c:	6032      	streq	r2, [r6, #0]
 801140e:	605a      	strne	r2, [r3, #4]
 8011410:	e7ec      	b.n	80113ec <_malloc_r+0xa0>
 8011412:	4623      	mov	r3, r4
 8011414:	6864      	ldr	r4, [r4, #4]
 8011416:	e7b2      	b.n	801137e <_malloc_r+0x32>
 8011418:	4634      	mov	r4, r6
 801141a:	6876      	ldr	r6, [r6, #4]
 801141c:	e7b9      	b.n	8011392 <_malloc_r+0x46>
 801141e:	230c      	movs	r3, #12
 8011420:	603b      	str	r3, [r7, #0]
 8011422:	4638      	mov	r0, r7
 8011424:	f000 fd72 	bl	8011f0c <__malloc_unlock>
 8011428:	e7a1      	b.n	801136e <_malloc_r+0x22>
 801142a:	6025      	str	r5, [r4, #0]
 801142c:	e7de      	b.n	80113ec <_malloc_r+0xa0>
 801142e:	bf00      	nop
 8011430:	20008888 	.word	0x20008888

08011434 <__sfputc_r>:
 8011434:	6893      	ldr	r3, [r2, #8]
 8011436:	3b01      	subs	r3, #1
 8011438:	2b00      	cmp	r3, #0
 801143a:	b410      	push	{r4}
 801143c:	6093      	str	r3, [r2, #8]
 801143e:	da08      	bge.n	8011452 <__sfputc_r+0x1e>
 8011440:	6994      	ldr	r4, [r2, #24]
 8011442:	42a3      	cmp	r3, r4
 8011444:	db01      	blt.n	801144a <__sfputc_r+0x16>
 8011446:	290a      	cmp	r1, #10
 8011448:	d103      	bne.n	8011452 <__sfputc_r+0x1e>
 801144a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801144e:	f000 bb33 	b.w	8011ab8 <__swbuf_r>
 8011452:	6813      	ldr	r3, [r2, #0]
 8011454:	1c58      	adds	r0, r3, #1
 8011456:	6010      	str	r0, [r2, #0]
 8011458:	7019      	strb	r1, [r3, #0]
 801145a:	4608      	mov	r0, r1
 801145c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011460:	4770      	bx	lr

08011462 <__sfputs_r>:
 8011462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011464:	4606      	mov	r6, r0
 8011466:	460f      	mov	r7, r1
 8011468:	4614      	mov	r4, r2
 801146a:	18d5      	adds	r5, r2, r3
 801146c:	42ac      	cmp	r4, r5
 801146e:	d101      	bne.n	8011474 <__sfputs_r+0x12>
 8011470:	2000      	movs	r0, #0
 8011472:	e007      	b.n	8011484 <__sfputs_r+0x22>
 8011474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011478:	463a      	mov	r2, r7
 801147a:	4630      	mov	r0, r6
 801147c:	f7ff ffda 	bl	8011434 <__sfputc_r>
 8011480:	1c43      	adds	r3, r0, #1
 8011482:	d1f3      	bne.n	801146c <__sfputs_r+0xa>
 8011484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011488 <_vfiprintf_r>:
 8011488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801148c:	460d      	mov	r5, r1
 801148e:	b09d      	sub	sp, #116	; 0x74
 8011490:	4614      	mov	r4, r2
 8011492:	4698      	mov	r8, r3
 8011494:	4606      	mov	r6, r0
 8011496:	b118      	cbz	r0, 80114a0 <_vfiprintf_r+0x18>
 8011498:	6983      	ldr	r3, [r0, #24]
 801149a:	b90b      	cbnz	r3, 80114a0 <_vfiprintf_r+0x18>
 801149c:	f7ff fe30 	bl	8011100 <__sinit>
 80114a0:	4b89      	ldr	r3, [pc, #548]	; (80116c8 <_vfiprintf_r+0x240>)
 80114a2:	429d      	cmp	r5, r3
 80114a4:	d11b      	bne.n	80114de <_vfiprintf_r+0x56>
 80114a6:	6875      	ldr	r5, [r6, #4]
 80114a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80114aa:	07d9      	lsls	r1, r3, #31
 80114ac:	d405      	bmi.n	80114ba <_vfiprintf_r+0x32>
 80114ae:	89ab      	ldrh	r3, [r5, #12]
 80114b0:	059a      	lsls	r2, r3, #22
 80114b2:	d402      	bmi.n	80114ba <_vfiprintf_r+0x32>
 80114b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114b6:	f7ff fed3 	bl	8011260 <__retarget_lock_acquire_recursive>
 80114ba:	89ab      	ldrh	r3, [r5, #12]
 80114bc:	071b      	lsls	r3, r3, #28
 80114be:	d501      	bpl.n	80114c4 <_vfiprintf_r+0x3c>
 80114c0:	692b      	ldr	r3, [r5, #16]
 80114c2:	b9eb      	cbnz	r3, 8011500 <_vfiprintf_r+0x78>
 80114c4:	4629      	mov	r1, r5
 80114c6:	4630      	mov	r0, r6
 80114c8:	f000 fb5a 	bl	8011b80 <__swsetup_r>
 80114cc:	b1c0      	cbz	r0, 8011500 <_vfiprintf_r+0x78>
 80114ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80114d0:	07dc      	lsls	r4, r3, #31
 80114d2:	d50e      	bpl.n	80114f2 <_vfiprintf_r+0x6a>
 80114d4:	f04f 30ff 	mov.w	r0, #4294967295
 80114d8:	b01d      	add	sp, #116	; 0x74
 80114da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114de:	4b7b      	ldr	r3, [pc, #492]	; (80116cc <_vfiprintf_r+0x244>)
 80114e0:	429d      	cmp	r5, r3
 80114e2:	d101      	bne.n	80114e8 <_vfiprintf_r+0x60>
 80114e4:	68b5      	ldr	r5, [r6, #8]
 80114e6:	e7df      	b.n	80114a8 <_vfiprintf_r+0x20>
 80114e8:	4b79      	ldr	r3, [pc, #484]	; (80116d0 <_vfiprintf_r+0x248>)
 80114ea:	429d      	cmp	r5, r3
 80114ec:	bf08      	it	eq
 80114ee:	68f5      	ldreq	r5, [r6, #12]
 80114f0:	e7da      	b.n	80114a8 <_vfiprintf_r+0x20>
 80114f2:	89ab      	ldrh	r3, [r5, #12]
 80114f4:	0598      	lsls	r0, r3, #22
 80114f6:	d4ed      	bmi.n	80114d4 <_vfiprintf_r+0x4c>
 80114f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114fa:	f7ff feb2 	bl	8011262 <__retarget_lock_release_recursive>
 80114fe:	e7e9      	b.n	80114d4 <_vfiprintf_r+0x4c>
 8011500:	2300      	movs	r3, #0
 8011502:	9309      	str	r3, [sp, #36]	; 0x24
 8011504:	2320      	movs	r3, #32
 8011506:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801150a:	f8cd 800c 	str.w	r8, [sp, #12]
 801150e:	2330      	movs	r3, #48	; 0x30
 8011510:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80116d4 <_vfiprintf_r+0x24c>
 8011514:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011518:	f04f 0901 	mov.w	r9, #1
 801151c:	4623      	mov	r3, r4
 801151e:	469a      	mov	sl, r3
 8011520:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011524:	b10a      	cbz	r2, 801152a <_vfiprintf_r+0xa2>
 8011526:	2a25      	cmp	r2, #37	; 0x25
 8011528:	d1f9      	bne.n	801151e <_vfiprintf_r+0x96>
 801152a:	ebba 0b04 	subs.w	fp, sl, r4
 801152e:	d00b      	beq.n	8011548 <_vfiprintf_r+0xc0>
 8011530:	465b      	mov	r3, fp
 8011532:	4622      	mov	r2, r4
 8011534:	4629      	mov	r1, r5
 8011536:	4630      	mov	r0, r6
 8011538:	f7ff ff93 	bl	8011462 <__sfputs_r>
 801153c:	3001      	adds	r0, #1
 801153e:	f000 80aa 	beq.w	8011696 <_vfiprintf_r+0x20e>
 8011542:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011544:	445a      	add	r2, fp
 8011546:	9209      	str	r2, [sp, #36]	; 0x24
 8011548:	f89a 3000 	ldrb.w	r3, [sl]
 801154c:	2b00      	cmp	r3, #0
 801154e:	f000 80a2 	beq.w	8011696 <_vfiprintf_r+0x20e>
 8011552:	2300      	movs	r3, #0
 8011554:	f04f 32ff 	mov.w	r2, #4294967295
 8011558:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801155c:	f10a 0a01 	add.w	sl, sl, #1
 8011560:	9304      	str	r3, [sp, #16]
 8011562:	9307      	str	r3, [sp, #28]
 8011564:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011568:	931a      	str	r3, [sp, #104]	; 0x68
 801156a:	4654      	mov	r4, sl
 801156c:	2205      	movs	r2, #5
 801156e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011572:	4858      	ldr	r0, [pc, #352]	; (80116d4 <_vfiprintf_r+0x24c>)
 8011574:	f7ee fe54 	bl	8000220 <memchr>
 8011578:	9a04      	ldr	r2, [sp, #16]
 801157a:	b9d8      	cbnz	r0, 80115b4 <_vfiprintf_r+0x12c>
 801157c:	06d1      	lsls	r1, r2, #27
 801157e:	bf44      	itt	mi
 8011580:	2320      	movmi	r3, #32
 8011582:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011586:	0713      	lsls	r3, r2, #28
 8011588:	bf44      	itt	mi
 801158a:	232b      	movmi	r3, #43	; 0x2b
 801158c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011590:	f89a 3000 	ldrb.w	r3, [sl]
 8011594:	2b2a      	cmp	r3, #42	; 0x2a
 8011596:	d015      	beq.n	80115c4 <_vfiprintf_r+0x13c>
 8011598:	9a07      	ldr	r2, [sp, #28]
 801159a:	4654      	mov	r4, sl
 801159c:	2000      	movs	r0, #0
 801159e:	f04f 0c0a 	mov.w	ip, #10
 80115a2:	4621      	mov	r1, r4
 80115a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115a8:	3b30      	subs	r3, #48	; 0x30
 80115aa:	2b09      	cmp	r3, #9
 80115ac:	d94e      	bls.n	801164c <_vfiprintf_r+0x1c4>
 80115ae:	b1b0      	cbz	r0, 80115de <_vfiprintf_r+0x156>
 80115b0:	9207      	str	r2, [sp, #28]
 80115b2:	e014      	b.n	80115de <_vfiprintf_r+0x156>
 80115b4:	eba0 0308 	sub.w	r3, r0, r8
 80115b8:	fa09 f303 	lsl.w	r3, r9, r3
 80115bc:	4313      	orrs	r3, r2
 80115be:	9304      	str	r3, [sp, #16]
 80115c0:	46a2      	mov	sl, r4
 80115c2:	e7d2      	b.n	801156a <_vfiprintf_r+0xe2>
 80115c4:	9b03      	ldr	r3, [sp, #12]
 80115c6:	1d19      	adds	r1, r3, #4
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	9103      	str	r1, [sp, #12]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	bfbb      	ittet	lt
 80115d0:	425b      	neglt	r3, r3
 80115d2:	f042 0202 	orrlt.w	r2, r2, #2
 80115d6:	9307      	strge	r3, [sp, #28]
 80115d8:	9307      	strlt	r3, [sp, #28]
 80115da:	bfb8      	it	lt
 80115dc:	9204      	strlt	r2, [sp, #16]
 80115de:	7823      	ldrb	r3, [r4, #0]
 80115e0:	2b2e      	cmp	r3, #46	; 0x2e
 80115e2:	d10c      	bne.n	80115fe <_vfiprintf_r+0x176>
 80115e4:	7863      	ldrb	r3, [r4, #1]
 80115e6:	2b2a      	cmp	r3, #42	; 0x2a
 80115e8:	d135      	bne.n	8011656 <_vfiprintf_r+0x1ce>
 80115ea:	9b03      	ldr	r3, [sp, #12]
 80115ec:	1d1a      	adds	r2, r3, #4
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	9203      	str	r2, [sp, #12]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	bfb8      	it	lt
 80115f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80115fa:	3402      	adds	r4, #2
 80115fc:	9305      	str	r3, [sp, #20]
 80115fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80116e4 <_vfiprintf_r+0x25c>
 8011602:	7821      	ldrb	r1, [r4, #0]
 8011604:	2203      	movs	r2, #3
 8011606:	4650      	mov	r0, sl
 8011608:	f7ee fe0a 	bl	8000220 <memchr>
 801160c:	b140      	cbz	r0, 8011620 <_vfiprintf_r+0x198>
 801160e:	2340      	movs	r3, #64	; 0x40
 8011610:	eba0 000a 	sub.w	r0, r0, sl
 8011614:	fa03 f000 	lsl.w	r0, r3, r0
 8011618:	9b04      	ldr	r3, [sp, #16]
 801161a:	4303      	orrs	r3, r0
 801161c:	3401      	adds	r4, #1
 801161e:	9304      	str	r3, [sp, #16]
 8011620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011624:	482c      	ldr	r0, [pc, #176]	; (80116d8 <_vfiprintf_r+0x250>)
 8011626:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801162a:	2206      	movs	r2, #6
 801162c:	f7ee fdf8 	bl	8000220 <memchr>
 8011630:	2800      	cmp	r0, #0
 8011632:	d03f      	beq.n	80116b4 <_vfiprintf_r+0x22c>
 8011634:	4b29      	ldr	r3, [pc, #164]	; (80116dc <_vfiprintf_r+0x254>)
 8011636:	bb1b      	cbnz	r3, 8011680 <_vfiprintf_r+0x1f8>
 8011638:	9b03      	ldr	r3, [sp, #12]
 801163a:	3307      	adds	r3, #7
 801163c:	f023 0307 	bic.w	r3, r3, #7
 8011640:	3308      	adds	r3, #8
 8011642:	9303      	str	r3, [sp, #12]
 8011644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011646:	443b      	add	r3, r7
 8011648:	9309      	str	r3, [sp, #36]	; 0x24
 801164a:	e767      	b.n	801151c <_vfiprintf_r+0x94>
 801164c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011650:	460c      	mov	r4, r1
 8011652:	2001      	movs	r0, #1
 8011654:	e7a5      	b.n	80115a2 <_vfiprintf_r+0x11a>
 8011656:	2300      	movs	r3, #0
 8011658:	3401      	adds	r4, #1
 801165a:	9305      	str	r3, [sp, #20]
 801165c:	4619      	mov	r1, r3
 801165e:	f04f 0c0a 	mov.w	ip, #10
 8011662:	4620      	mov	r0, r4
 8011664:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011668:	3a30      	subs	r2, #48	; 0x30
 801166a:	2a09      	cmp	r2, #9
 801166c:	d903      	bls.n	8011676 <_vfiprintf_r+0x1ee>
 801166e:	2b00      	cmp	r3, #0
 8011670:	d0c5      	beq.n	80115fe <_vfiprintf_r+0x176>
 8011672:	9105      	str	r1, [sp, #20]
 8011674:	e7c3      	b.n	80115fe <_vfiprintf_r+0x176>
 8011676:	fb0c 2101 	mla	r1, ip, r1, r2
 801167a:	4604      	mov	r4, r0
 801167c:	2301      	movs	r3, #1
 801167e:	e7f0      	b.n	8011662 <_vfiprintf_r+0x1da>
 8011680:	ab03      	add	r3, sp, #12
 8011682:	9300      	str	r3, [sp, #0]
 8011684:	462a      	mov	r2, r5
 8011686:	4b16      	ldr	r3, [pc, #88]	; (80116e0 <_vfiprintf_r+0x258>)
 8011688:	a904      	add	r1, sp, #16
 801168a:	4630      	mov	r0, r6
 801168c:	f3af 8000 	nop.w
 8011690:	4607      	mov	r7, r0
 8011692:	1c78      	adds	r0, r7, #1
 8011694:	d1d6      	bne.n	8011644 <_vfiprintf_r+0x1bc>
 8011696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011698:	07d9      	lsls	r1, r3, #31
 801169a:	d405      	bmi.n	80116a8 <_vfiprintf_r+0x220>
 801169c:	89ab      	ldrh	r3, [r5, #12]
 801169e:	059a      	lsls	r2, r3, #22
 80116a0:	d402      	bmi.n	80116a8 <_vfiprintf_r+0x220>
 80116a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116a4:	f7ff fddd 	bl	8011262 <__retarget_lock_release_recursive>
 80116a8:	89ab      	ldrh	r3, [r5, #12]
 80116aa:	065b      	lsls	r3, r3, #25
 80116ac:	f53f af12 	bmi.w	80114d4 <_vfiprintf_r+0x4c>
 80116b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80116b2:	e711      	b.n	80114d8 <_vfiprintf_r+0x50>
 80116b4:	ab03      	add	r3, sp, #12
 80116b6:	9300      	str	r3, [sp, #0]
 80116b8:	462a      	mov	r2, r5
 80116ba:	4b09      	ldr	r3, [pc, #36]	; (80116e0 <_vfiprintf_r+0x258>)
 80116bc:	a904      	add	r1, sp, #16
 80116be:	4630      	mov	r0, r6
 80116c0:	f000 f880 	bl	80117c4 <_printf_i>
 80116c4:	e7e4      	b.n	8011690 <_vfiprintf_r+0x208>
 80116c6:	bf00      	nop
 80116c8:	0801540c 	.word	0x0801540c
 80116cc:	0801542c 	.word	0x0801542c
 80116d0:	080153ec 	.word	0x080153ec
 80116d4:	0801544c 	.word	0x0801544c
 80116d8:	08015456 	.word	0x08015456
 80116dc:	00000000 	.word	0x00000000
 80116e0:	08011463 	.word	0x08011463
 80116e4:	08015452 	.word	0x08015452

080116e8 <_printf_common>:
 80116e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116ec:	4616      	mov	r6, r2
 80116ee:	4699      	mov	r9, r3
 80116f0:	688a      	ldr	r2, [r1, #8]
 80116f2:	690b      	ldr	r3, [r1, #16]
 80116f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80116f8:	4293      	cmp	r3, r2
 80116fa:	bfb8      	it	lt
 80116fc:	4613      	movlt	r3, r2
 80116fe:	6033      	str	r3, [r6, #0]
 8011700:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011704:	4607      	mov	r7, r0
 8011706:	460c      	mov	r4, r1
 8011708:	b10a      	cbz	r2, 801170e <_printf_common+0x26>
 801170a:	3301      	adds	r3, #1
 801170c:	6033      	str	r3, [r6, #0]
 801170e:	6823      	ldr	r3, [r4, #0]
 8011710:	0699      	lsls	r1, r3, #26
 8011712:	bf42      	ittt	mi
 8011714:	6833      	ldrmi	r3, [r6, #0]
 8011716:	3302      	addmi	r3, #2
 8011718:	6033      	strmi	r3, [r6, #0]
 801171a:	6825      	ldr	r5, [r4, #0]
 801171c:	f015 0506 	ands.w	r5, r5, #6
 8011720:	d106      	bne.n	8011730 <_printf_common+0x48>
 8011722:	f104 0a19 	add.w	sl, r4, #25
 8011726:	68e3      	ldr	r3, [r4, #12]
 8011728:	6832      	ldr	r2, [r6, #0]
 801172a:	1a9b      	subs	r3, r3, r2
 801172c:	42ab      	cmp	r3, r5
 801172e:	dc26      	bgt.n	801177e <_printf_common+0x96>
 8011730:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011734:	1e13      	subs	r3, r2, #0
 8011736:	6822      	ldr	r2, [r4, #0]
 8011738:	bf18      	it	ne
 801173a:	2301      	movne	r3, #1
 801173c:	0692      	lsls	r2, r2, #26
 801173e:	d42b      	bmi.n	8011798 <_printf_common+0xb0>
 8011740:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011744:	4649      	mov	r1, r9
 8011746:	4638      	mov	r0, r7
 8011748:	47c0      	blx	r8
 801174a:	3001      	adds	r0, #1
 801174c:	d01e      	beq.n	801178c <_printf_common+0xa4>
 801174e:	6823      	ldr	r3, [r4, #0]
 8011750:	68e5      	ldr	r5, [r4, #12]
 8011752:	6832      	ldr	r2, [r6, #0]
 8011754:	f003 0306 	and.w	r3, r3, #6
 8011758:	2b04      	cmp	r3, #4
 801175a:	bf08      	it	eq
 801175c:	1aad      	subeq	r5, r5, r2
 801175e:	68a3      	ldr	r3, [r4, #8]
 8011760:	6922      	ldr	r2, [r4, #16]
 8011762:	bf0c      	ite	eq
 8011764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011768:	2500      	movne	r5, #0
 801176a:	4293      	cmp	r3, r2
 801176c:	bfc4      	itt	gt
 801176e:	1a9b      	subgt	r3, r3, r2
 8011770:	18ed      	addgt	r5, r5, r3
 8011772:	2600      	movs	r6, #0
 8011774:	341a      	adds	r4, #26
 8011776:	42b5      	cmp	r5, r6
 8011778:	d11a      	bne.n	80117b0 <_printf_common+0xc8>
 801177a:	2000      	movs	r0, #0
 801177c:	e008      	b.n	8011790 <_printf_common+0xa8>
 801177e:	2301      	movs	r3, #1
 8011780:	4652      	mov	r2, sl
 8011782:	4649      	mov	r1, r9
 8011784:	4638      	mov	r0, r7
 8011786:	47c0      	blx	r8
 8011788:	3001      	adds	r0, #1
 801178a:	d103      	bne.n	8011794 <_printf_common+0xac>
 801178c:	f04f 30ff 	mov.w	r0, #4294967295
 8011790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011794:	3501      	adds	r5, #1
 8011796:	e7c6      	b.n	8011726 <_printf_common+0x3e>
 8011798:	18e1      	adds	r1, r4, r3
 801179a:	1c5a      	adds	r2, r3, #1
 801179c:	2030      	movs	r0, #48	; 0x30
 801179e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80117a2:	4422      	add	r2, r4
 80117a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80117a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80117ac:	3302      	adds	r3, #2
 80117ae:	e7c7      	b.n	8011740 <_printf_common+0x58>
 80117b0:	2301      	movs	r3, #1
 80117b2:	4622      	mov	r2, r4
 80117b4:	4649      	mov	r1, r9
 80117b6:	4638      	mov	r0, r7
 80117b8:	47c0      	blx	r8
 80117ba:	3001      	adds	r0, #1
 80117bc:	d0e6      	beq.n	801178c <_printf_common+0xa4>
 80117be:	3601      	adds	r6, #1
 80117c0:	e7d9      	b.n	8011776 <_printf_common+0x8e>
	...

080117c4 <_printf_i>:
 80117c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80117c8:	7e0f      	ldrb	r7, [r1, #24]
 80117ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80117cc:	2f78      	cmp	r7, #120	; 0x78
 80117ce:	4691      	mov	r9, r2
 80117d0:	4680      	mov	r8, r0
 80117d2:	460c      	mov	r4, r1
 80117d4:	469a      	mov	sl, r3
 80117d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80117da:	d807      	bhi.n	80117ec <_printf_i+0x28>
 80117dc:	2f62      	cmp	r7, #98	; 0x62
 80117de:	d80a      	bhi.n	80117f6 <_printf_i+0x32>
 80117e0:	2f00      	cmp	r7, #0
 80117e2:	f000 80d8 	beq.w	8011996 <_printf_i+0x1d2>
 80117e6:	2f58      	cmp	r7, #88	; 0x58
 80117e8:	f000 80a3 	beq.w	8011932 <_printf_i+0x16e>
 80117ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80117f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80117f4:	e03a      	b.n	801186c <_printf_i+0xa8>
 80117f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80117fa:	2b15      	cmp	r3, #21
 80117fc:	d8f6      	bhi.n	80117ec <_printf_i+0x28>
 80117fe:	a101      	add	r1, pc, #4	; (adr r1, 8011804 <_printf_i+0x40>)
 8011800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011804:	0801185d 	.word	0x0801185d
 8011808:	08011871 	.word	0x08011871
 801180c:	080117ed 	.word	0x080117ed
 8011810:	080117ed 	.word	0x080117ed
 8011814:	080117ed 	.word	0x080117ed
 8011818:	080117ed 	.word	0x080117ed
 801181c:	08011871 	.word	0x08011871
 8011820:	080117ed 	.word	0x080117ed
 8011824:	080117ed 	.word	0x080117ed
 8011828:	080117ed 	.word	0x080117ed
 801182c:	080117ed 	.word	0x080117ed
 8011830:	0801197d 	.word	0x0801197d
 8011834:	080118a1 	.word	0x080118a1
 8011838:	0801195f 	.word	0x0801195f
 801183c:	080117ed 	.word	0x080117ed
 8011840:	080117ed 	.word	0x080117ed
 8011844:	0801199f 	.word	0x0801199f
 8011848:	080117ed 	.word	0x080117ed
 801184c:	080118a1 	.word	0x080118a1
 8011850:	080117ed 	.word	0x080117ed
 8011854:	080117ed 	.word	0x080117ed
 8011858:	08011967 	.word	0x08011967
 801185c:	682b      	ldr	r3, [r5, #0]
 801185e:	1d1a      	adds	r2, r3, #4
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	602a      	str	r2, [r5, #0]
 8011864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801186c:	2301      	movs	r3, #1
 801186e:	e0a3      	b.n	80119b8 <_printf_i+0x1f4>
 8011870:	6820      	ldr	r0, [r4, #0]
 8011872:	6829      	ldr	r1, [r5, #0]
 8011874:	0606      	lsls	r6, r0, #24
 8011876:	f101 0304 	add.w	r3, r1, #4
 801187a:	d50a      	bpl.n	8011892 <_printf_i+0xce>
 801187c:	680e      	ldr	r6, [r1, #0]
 801187e:	602b      	str	r3, [r5, #0]
 8011880:	2e00      	cmp	r6, #0
 8011882:	da03      	bge.n	801188c <_printf_i+0xc8>
 8011884:	232d      	movs	r3, #45	; 0x2d
 8011886:	4276      	negs	r6, r6
 8011888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801188c:	485e      	ldr	r0, [pc, #376]	; (8011a08 <_printf_i+0x244>)
 801188e:	230a      	movs	r3, #10
 8011890:	e019      	b.n	80118c6 <_printf_i+0x102>
 8011892:	680e      	ldr	r6, [r1, #0]
 8011894:	602b      	str	r3, [r5, #0]
 8011896:	f010 0f40 	tst.w	r0, #64	; 0x40
 801189a:	bf18      	it	ne
 801189c:	b236      	sxthne	r6, r6
 801189e:	e7ef      	b.n	8011880 <_printf_i+0xbc>
 80118a0:	682b      	ldr	r3, [r5, #0]
 80118a2:	6820      	ldr	r0, [r4, #0]
 80118a4:	1d19      	adds	r1, r3, #4
 80118a6:	6029      	str	r1, [r5, #0]
 80118a8:	0601      	lsls	r1, r0, #24
 80118aa:	d501      	bpl.n	80118b0 <_printf_i+0xec>
 80118ac:	681e      	ldr	r6, [r3, #0]
 80118ae:	e002      	b.n	80118b6 <_printf_i+0xf2>
 80118b0:	0646      	lsls	r6, r0, #25
 80118b2:	d5fb      	bpl.n	80118ac <_printf_i+0xe8>
 80118b4:	881e      	ldrh	r6, [r3, #0]
 80118b6:	4854      	ldr	r0, [pc, #336]	; (8011a08 <_printf_i+0x244>)
 80118b8:	2f6f      	cmp	r7, #111	; 0x6f
 80118ba:	bf0c      	ite	eq
 80118bc:	2308      	moveq	r3, #8
 80118be:	230a      	movne	r3, #10
 80118c0:	2100      	movs	r1, #0
 80118c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80118c6:	6865      	ldr	r5, [r4, #4]
 80118c8:	60a5      	str	r5, [r4, #8]
 80118ca:	2d00      	cmp	r5, #0
 80118cc:	bfa2      	ittt	ge
 80118ce:	6821      	ldrge	r1, [r4, #0]
 80118d0:	f021 0104 	bicge.w	r1, r1, #4
 80118d4:	6021      	strge	r1, [r4, #0]
 80118d6:	b90e      	cbnz	r6, 80118dc <_printf_i+0x118>
 80118d8:	2d00      	cmp	r5, #0
 80118da:	d04d      	beq.n	8011978 <_printf_i+0x1b4>
 80118dc:	4615      	mov	r5, r2
 80118de:	fbb6 f1f3 	udiv	r1, r6, r3
 80118e2:	fb03 6711 	mls	r7, r3, r1, r6
 80118e6:	5dc7      	ldrb	r7, [r0, r7]
 80118e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80118ec:	4637      	mov	r7, r6
 80118ee:	42bb      	cmp	r3, r7
 80118f0:	460e      	mov	r6, r1
 80118f2:	d9f4      	bls.n	80118de <_printf_i+0x11a>
 80118f4:	2b08      	cmp	r3, #8
 80118f6:	d10b      	bne.n	8011910 <_printf_i+0x14c>
 80118f8:	6823      	ldr	r3, [r4, #0]
 80118fa:	07de      	lsls	r6, r3, #31
 80118fc:	d508      	bpl.n	8011910 <_printf_i+0x14c>
 80118fe:	6923      	ldr	r3, [r4, #16]
 8011900:	6861      	ldr	r1, [r4, #4]
 8011902:	4299      	cmp	r1, r3
 8011904:	bfde      	ittt	le
 8011906:	2330      	movle	r3, #48	; 0x30
 8011908:	f805 3c01 	strble.w	r3, [r5, #-1]
 801190c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011910:	1b52      	subs	r2, r2, r5
 8011912:	6122      	str	r2, [r4, #16]
 8011914:	f8cd a000 	str.w	sl, [sp]
 8011918:	464b      	mov	r3, r9
 801191a:	aa03      	add	r2, sp, #12
 801191c:	4621      	mov	r1, r4
 801191e:	4640      	mov	r0, r8
 8011920:	f7ff fee2 	bl	80116e8 <_printf_common>
 8011924:	3001      	adds	r0, #1
 8011926:	d14c      	bne.n	80119c2 <_printf_i+0x1fe>
 8011928:	f04f 30ff 	mov.w	r0, #4294967295
 801192c:	b004      	add	sp, #16
 801192e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011932:	4835      	ldr	r0, [pc, #212]	; (8011a08 <_printf_i+0x244>)
 8011934:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011938:	6829      	ldr	r1, [r5, #0]
 801193a:	6823      	ldr	r3, [r4, #0]
 801193c:	f851 6b04 	ldr.w	r6, [r1], #4
 8011940:	6029      	str	r1, [r5, #0]
 8011942:	061d      	lsls	r5, r3, #24
 8011944:	d514      	bpl.n	8011970 <_printf_i+0x1ac>
 8011946:	07df      	lsls	r7, r3, #31
 8011948:	bf44      	itt	mi
 801194a:	f043 0320 	orrmi.w	r3, r3, #32
 801194e:	6023      	strmi	r3, [r4, #0]
 8011950:	b91e      	cbnz	r6, 801195a <_printf_i+0x196>
 8011952:	6823      	ldr	r3, [r4, #0]
 8011954:	f023 0320 	bic.w	r3, r3, #32
 8011958:	6023      	str	r3, [r4, #0]
 801195a:	2310      	movs	r3, #16
 801195c:	e7b0      	b.n	80118c0 <_printf_i+0xfc>
 801195e:	6823      	ldr	r3, [r4, #0]
 8011960:	f043 0320 	orr.w	r3, r3, #32
 8011964:	6023      	str	r3, [r4, #0]
 8011966:	2378      	movs	r3, #120	; 0x78
 8011968:	4828      	ldr	r0, [pc, #160]	; (8011a0c <_printf_i+0x248>)
 801196a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801196e:	e7e3      	b.n	8011938 <_printf_i+0x174>
 8011970:	0659      	lsls	r1, r3, #25
 8011972:	bf48      	it	mi
 8011974:	b2b6      	uxthmi	r6, r6
 8011976:	e7e6      	b.n	8011946 <_printf_i+0x182>
 8011978:	4615      	mov	r5, r2
 801197a:	e7bb      	b.n	80118f4 <_printf_i+0x130>
 801197c:	682b      	ldr	r3, [r5, #0]
 801197e:	6826      	ldr	r6, [r4, #0]
 8011980:	6961      	ldr	r1, [r4, #20]
 8011982:	1d18      	adds	r0, r3, #4
 8011984:	6028      	str	r0, [r5, #0]
 8011986:	0635      	lsls	r5, r6, #24
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	d501      	bpl.n	8011990 <_printf_i+0x1cc>
 801198c:	6019      	str	r1, [r3, #0]
 801198e:	e002      	b.n	8011996 <_printf_i+0x1d2>
 8011990:	0670      	lsls	r0, r6, #25
 8011992:	d5fb      	bpl.n	801198c <_printf_i+0x1c8>
 8011994:	8019      	strh	r1, [r3, #0]
 8011996:	2300      	movs	r3, #0
 8011998:	6123      	str	r3, [r4, #16]
 801199a:	4615      	mov	r5, r2
 801199c:	e7ba      	b.n	8011914 <_printf_i+0x150>
 801199e:	682b      	ldr	r3, [r5, #0]
 80119a0:	1d1a      	adds	r2, r3, #4
 80119a2:	602a      	str	r2, [r5, #0]
 80119a4:	681d      	ldr	r5, [r3, #0]
 80119a6:	6862      	ldr	r2, [r4, #4]
 80119a8:	2100      	movs	r1, #0
 80119aa:	4628      	mov	r0, r5
 80119ac:	f7ee fc38 	bl	8000220 <memchr>
 80119b0:	b108      	cbz	r0, 80119b6 <_printf_i+0x1f2>
 80119b2:	1b40      	subs	r0, r0, r5
 80119b4:	6060      	str	r0, [r4, #4]
 80119b6:	6863      	ldr	r3, [r4, #4]
 80119b8:	6123      	str	r3, [r4, #16]
 80119ba:	2300      	movs	r3, #0
 80119bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119c0:	e7a8      	b.n	8011914 <_printf_i+0x150>
 80119c2:	6923      	ldr	r3, [r4, #16]
 80119c4:	462a      	mov	r2, r5
 80119c6:	4649      	mov	r1, r9
 80119c8:	4640      	mov	r0, r8
 80119ca:	47d0      	blx	sl
 80119cc:	3001      	adds	r0, #1
 80119ce:	d0ab      	beq.n	8011928 <_printf_i+0x164>
 80119d0:	6823      	ldr	r3, [r4, #0]
 80119d2:	079b      	lsls	r3, r3, #30
 80119d4:	d413      	bmi.n	80119fe <_printf_i+0x23a>
 80119d6:	68e0      	ldr	r0, [r4, #12]
 80119d8:	9b03      	ldr	r3, [sp, #12]
 80119da:	4298      	cmp	r0, r3
 80119dc:	bfb8      	it	lt
 80119de:	4618      	movlt	r0, r3
 80119e0:	e7a4      	b.n	801192c <_printf_i+0x168>
 80119e2:	2301      	movs	r3, #1
 80119e4:	4632      	mov	r2, r6
 80119e6:	4649      	mov	r1, r9
 80119e8:	4640      	mov	r0, r8
 80119ea:	47d0      	blx	sl
 80119ec:	3001      	adds	r0, #1
 80119ee:	d09b      	beq.n	8011928 <_printf_i+0x164>
 80119f0:	3501      	adds	r5, #1
 80119f2:	68e3      	ldr	r3, [r4, #12]
 80119f4:	9903      	ldr	r1, [sp, #12]
 80119f6:	1a5b      	subs	r3, r3, r1
 80119f8:	42ab      	cmp	r3, r5
 80119fa:	dcf2      	bgt.n	80119e2 <_printf_i+0x21e>
 80119fc:	e7eb      	b.n	80119d6 <_printf_i+0x212>
 80119fe:	2500      	movs	r5, #0
 8011a00:	f104 0619 	add.w	r6, r4, #25
 8011a04:	e7f5      	b.n	80119f2 <_printf_i+0x22e>
 8011a06:	bf00      	nop
 8011a08:	0801545d 	.word	0x0801545d
 8011a0c:	0801546e 	.word	0x0801546e

08011a10 <_sbrk_r>:
 8011a10:	b538      	push	{r3, r4, r5, lr}
 8011a12:	4d06      	ldr	r5, [pc, #24]	; (8011a2c <_sbrk_r+0x1c>)
 8011a14:	2300      	movs	r3, #0
 8011a16:	4604      	mov	r4, r0
 8011a18:	4608      	mov	r0, r1
 8011a1a:	602b      	str	r3, [r5, #0]
 8011a1c:	f7ef fa58 	bl	8000ed0 <_sbrk>
 8011a20:	1c43      	adds	r3, r0, #1
 8011a22:	d102      	bne.n	8011a2a <_sbrk_r+0x1a>
 8011a24:	682b      	ldr	r3, [r5, #0]
 8011a26:	b103      	cbz	r3, 8011a2a <_sbrk_r+0x1a>
 8011a28:	6023      	str	r3, [r4, #0]
 8011a2a:	bd38      	pop	{r3, r4, r5, pc}
 8011a2c:	20008880 	.word	0x20008880

08011a30 <__sread>:
 8011a30:	b510      	push	{r4, lr}
 8011a32:	460c      	mov	r4, r1
 8011a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a38:	f000 fa6e 	bl	8011f18 <_read_r>
 8011a3c:	2800      	cmp	r0, #0
 8011a3e:	bfab      	itete	ge
 8011a40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011a42:	89a3      	ldrhlt	r3, [r4, #12]
 8011a44:	181b      	addge	r3, r3, r0
 8011a46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011a4a:	bfac      	ite	ge
 8011a4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8011a4e:	81a3      	strhlt	r3, [r4, #12]
 8011a50:	bd10      	pop	{r4, pc}

08011a52 <__swrite>:
 8011a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a56:	461f      	mov	r7, r3
 8011a58:	898b      	ldrh	r3, [r1, #12]
 8011a5a:	05db      	lsls	r3, r3, #23
 8011a5c:	4605      	mov	r5, r0
 8011a5e:	460c      	mov	r4, r1
 8011a60:	4616      	mov	r6, r2
 8011a62:	d505      	bpl.n	8011a70 <__swrite+0x1e>
 8011a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a68:	2302      	movs	r3, #2
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	f000 f9d0 	bl	8011e10 <_lseek_r>
 8011a70:	89a3      	ldrh	r3, [r4, #12]
 8011a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011a7a:	81a3      	strh	r3, [r4, #12]
 8011a7c:	4632      	mov	r2, r6
 8011a7e:	463b      	mov	r3, r7
 8011a80:	4628      	mov	r0, r5
 8011a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a86:	f000 b869 	b.w	8011b5c <_write_r>

08011a8a <__sseek>:
 8011a8a:	b510      	push	{r4, lr}
 8011a8c:	460c      	mov	r4, r1
 8011a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a92:	f000 f9bd 	bl	8011e10 <_lseek_r>
 8011a96:	1c43      	adds	r3, r0, #1
 8011a98:	89a3      	ldrh	r3, [r4, #12]
 8011a9a:	bf15      	itete	ne
 8011a9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8011a9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011aa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011aa6:	81a3      	strheq	r3, [r4, #12]
 8011aa8:	bf18      	it	ne
 8011aaa:	81a3      	strhne	r3, [r4, #12]
 8011aac:	bd10      	pop	{r4, pc}

08011aae <__sclose>:
 8011aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ab2:	f000 b8db 	b.w	8011c6c <_close_r>
	...

08011ab8 <__swbuf_r>:
 8011ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aba:	460e      	mov	r6, r1
 8011abc:	4614      	mov	r4, r2
 8011abe:	4605      	mov	r5, r0
 8011ac0:	b118      	cbz	r0, 8011aca <__swbuf_r+0x12>
 8011ac2:	6983      	ldr	r3, [r0, #24]
 8011ac4:	b90b      	cbnz	r3, 8011aca <__swbuf_r+0x12>
 8011ac6:	f7ff fb1b 	bl	8011100 <__sinit>
 8011aca:	4b21      	ldr	r3, [pc, #132]	; (8011b50 <__swbuf_r+0x98>)
 8011acc:	429c      	cmp	r4, r3
 8011ace:	d12b      	bne.n	8011b28 <__swbuf_r+0x70>
 8011ad0:	686c      	ldr	r4, [r5, #4]
 8011ad2:	69a3      	ldr	r3, [r4, #24]
 8011ad4:	60a3      	str	r3, [r4, #8]
 8011ad6:	89a3      	ldrh	r3, [r4, #12]
 8011ad8:	071a      	lsls	r2, r3, #28
 8011ada:	d52f      	bpl.n	8011b3c <__swbuf_r+0x84>
 8011adc:	6923      	ldr	r3, [r4, #16]
 8011ade:	b36b      	cbz	r3, 8011b3c <__swbuf_r+0x84>
 8011ae0:	6923      	ldr	r3, [r4, #16]
 8011ae2:	6820      	ldr	r0, [r4, #0]
 8011ae4:	1ac0      	subs	r0, r0, r3
 8011ae6:	6963      	ldr	r3, [r4, #20]
 8011ae8:	b2f6      	uxtb	r6, r6
 8011aea:	4283      	cmp	r3, r0
 8011aec:	4637      	mov	r7, r6
 8011aee:	dc04      	bgt.n	8011afa <__swbuf_r+0x42>
 8011af0:	4621      	mov	r1, r4
 8011af2:	4628      	mov	r0, r5
 8011af4:	f000 f950 	bl	8011d98 <_fflush_r>
 8011af8:	bb30      	cbnz	r0, 8011b48 <__swbuf_r+0x90>
 8011afa:	68a3      	ldr	r3, [r4, #8]
 8011afc:	3b01      	subs	r3, #1
 8011afe:	60a3      	str	r3, [r4, #8]
 8011b00:	6823      	ldr	r3, [r4, #0]
 8011b02:	1c5a      	adds	r2, r3, #1
 8011b04:	6022      	str	r2, [r4, #0]
 8011b06:	701e      	strb	r6, [r3, #0]
 8011b08:	6963      	ldr	r3, [r4, #20]
 8011b0a:	3001      	adds	r0, #1
 8011b0c:	4283      	cmp	r3, r0
 8011b0e:	d004      	beq.n	8011b1a <__swbuf_r+0x62>
 8011b10:	89a3      	ldrh	r3, [r4, #12]
 8011b12:	07db      	lsls	r3, r3, #31
 8011b14:	d506      	bpl.n	8011b24 <__swbuf_r+0x6c>
 8011b16:	2e0a      	cmp	r6, #10
 8011b18:	d104      	bne.n	8011b24 <__swbuf_r+0x6c>
 8011b1a:	4621      	mov	r1, r4
 8011b1c:	4628      	mov	r0, r5
 8011b1e:	f000 f93b 	bl	8011d98 <_fflush_r>
 8011b22:	b988      	cbnz	r0, 8011b48 <__swbuf_r+0x90>
 8011b24:	4638      	mov	r0, r7
 8011b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b28:	4b0a      	ldr	r3, [pc, #40]	; (8011b54 <__swbuf_r+0x9c>)
 8011b2a:	429c      	cmp	r4, r3
 8011b2c:	d101      	bne.n	8011b32 <__swbuf_r+0x7a>
 8011b2e:	68ac      	ldr	r4, [r5, #8]
 8011b30:	e7cf      	b.n	8011ad2 <__swbuf_r+0x1a>
 8011b32:	4b09      	ldr	r3, [pc, #36]	; (8011b58 <__swbuf_r+0xa0>)
 8011b34:	429c      	cmp	r4, r3
 8011b36:	bf08      	it	eq
 8011b38:	68ec      	ldreq	r4, [r5, #12]
 8011b3a:	e7ca      	b.n	8011ad2 <__swbuf_r+0x1a>
 8011b3c:	4621      	mov	r1, r4
 8011b3e:	4628      	mov	r0, r5
 8011b40:	f000 f81e 	bl	8011b80 <__swsetup_r>
 8011b44:	2800      	cmp	r0, #0
 8011b46:	d0cb      	beq.n	8011ae0 <__swbuf_r+0x28>
 8011b48:	f04f 37ff 	mov.w	r7, #4294967295
 8011b4c:	e7ea      	b.n	8011b24 <__swbuf_r+0x6c>
 8011b4e:	bf00      	nop
 8011b50:	0801540c 	.word	0x0801540c
 8011b54:	0801542c 	.word	0x0801542c
 8011b58:	080153ec 	.word	0x080153ec

08011b5c <_write_r>:
 8011b5c:	b538      	push	{r3, r4, r5, lr}
 8011b5e:	4d07      	ldr	r5, [pc, #28]	; (8011b7c <_write_r+0x20>)
 8011b60:	4604      	mov	r4, r0
 8011b62:	4608      	mov	r0, r1
 8011b64:	4611      	mov	r1, r2
 8011b66:	2200      	movs	r2, #0
 8011b68:	602a      	str	r2, [r5, #0]
 8011b6a:	461a      	mov	r2, r3
 8011b6c:	f7ef f95f 	bl	8000e2e <_write>
 8011b70:	1c43      	adds	r3, r0, #1
 8011b72:	d102      	bne.n	8011b7a <_write_r+0x1e>
 8011b74:	682b      	ldr	r3, [r5, #0]
 8011b76:	b103      	cbz	r3, 8011b7a <_write_r+0x1e>
 8011b78:	6023      	str	r3, [r4, #0]
 8011b7a:	bd38      	pop	{r3, r4, r5, pc}
 8011b7c:	20008880 	.word	0x20008880

08011b80 <__swsetup_r>:
 8011b80:	4b32      	ldr	r3, [pc, #200]	; (8011c4c <__swsetup_r+0xcc>)
 8011b82:	b570      	push	{r4, r5, r6, lr}
 8011b84:	681d      	ldr	r5, [r3, #0]
 8011b86:	4606      	mov	r6, r0
 8011b88:	460c      	mov	r4, r1
 8011b8a:	b125      	cbz	r5, 8011b96 <__swsetup_r+0x16>
 8011b8c:	69ab      	ldr	r3, [r5, #24]
 8011b8e:	b913      	cbnz	r3, 8011b96 <__swsetup_r+0x16>
 8011b90:	4628      	mov	r0, r5
 8011b92:	f7ff fab5 	bl	8011100 <__sinit>
 8011b96:	4b2e      	ldr	r3, [pc, #184]	; (8011c50 <__swsetup_r+0xd0>)
 8011b98:	429c      	cmp	r4, r3
 8011b9a:	d10f      	bne.n	8011bbc <__swsetup_r+0x3c>
 8011b9c:	686c      	ldr	r4, [r5, #4]
 8011b9e:	89a3      	ldrh	r3, [r4, #12]
 8011ba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011ba4:	0719      	lsls	r1, r3, #28
 8011ba6:	d42c      	bmi.n	8011c02 <__swsetup_r+0x82>
 8011ba8:	06dd      	lsls	r5, r3, #27
 8011baa:	d411      	bmi.n	8011bd0 <__swsetup_r+0x50>
 8011bac:	2309      	movs	r3, #9
 8011bae:	6033      	str	r3, [r6, #0]
 8011bb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011bb4:	81a3      	strh	r3, [r4, #12]
 8011bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8011bba:	e03e      	b.n	8011c3a <__swsetup_r+0xba>
 8011bbc:	4b25      	ldr	r3, [pc, #148]	; (8011c54 <__swsetup_r+0xd4>)
 8011bbe:	429c      	cmp	r4, r3
 8011bc0:	d101      	bne.n	8011bc6 <__swsetup_r+0x46>
 8011bc2:	68ac      	ldr	r4, [r5, #8]
 8011bc4:	e7eb      	b.n	8011b9e <__swsetup_r+0x1e>
 8011bc6:	4b24      	ldr	r3, [pc, #144]	; (8011c58 <__swsetup_r+0xd8>)
 8011bc8:	429c      	cmp	r4, r3
 8011bca:	bf08      	it	eq
 8011bcc:	68ec      	ldreq	r4, [r5, #12]
 8011bce:	e7e6      	b.n	8011b9e <__swsetup_r+0x1e>
 8011bd0:	0758      	lsls	r0, r3, #29
 8011bd2:	d512      	bpl.n	8011bfa <__swsetup_r+0x7a>
 8011bd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011bd6:	b141      	cbz	r1, 8011bea <__swsetup_r+0x6a>
 8011bd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011bdc:	4299      	cmp	r1, r3
 8011bde:	d002      	beq.n	8011be6 <__swsetup_r+0x66>
 8011be0:	4630      	mov	r0, r6
 8011be2:	f7ff fb47 	bl	8011274 <_free_r>
 8011be6:	2300      	movs	r3, #0
 8011be8:	6363      	str	r3, [r4, #52]	; 0x34
 8011bea:	89a3      	ldrh	r3, [r4, #12]
 8011bec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011bf0:	81a3      	strh	r3, [r4, #12]
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	6063      	str	r3, [r4, #4]
 8011bf6:	6923      	ldr	r3, [r4, #16]
 8011bf8:	6023      	str	r3, [r4, #0]
 8011bfa:	89a3      	ldrh	r3, [r4, #12]
 8011bfc:	f043 0308 	orr.w	r3, r3, #8
 8011c00:	81a3      	strh	r3, [r4, #12]
 8011c02:	6923      	ldr	r3, [r4, #16]
 8011c04:	b94b      	cbnz	r3, 8011c1a <__swsetup_r+0x9a>
 8011c06:	89a3      	ldrh	r3, [r4, #12]
 8011c08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c10:	d003      	beq.n	8011c1a <__swsetup_r+0x9a>
 8011c12:	4621      	mov	r1, r4
 8011c14:	4630      	mov	r0, r6
 8011c16:	f000 f933 	bl	8011e80 <__smakebuf_r>
 8011c1a:	89a0      	ldrh	r0, [r4, #12]
 8011c1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011c20:	f010 0301 	ands.w	r3, r0, #1
 8011c24:	d00a      	beq.n	8011c3c <__swsetup_r+0xbc>
 8011c26:	2300      	movs	r3, #0
 8011c28:	60a3      	str	r3, [r4, #8]
 8011c2a:	6963      	ldr	r3, [r4, #20]
 8011c2c:	425b      	negs	r3, r3
 8011c2e:	61a3      	str	r3, [r4, #24]
 8011c30:	6923      	ldr	r3, [r4, #16]
 8011c32:	b943      	cbnz	r3, 8011c46 <__swsetup_r+0xc6>
 8011c34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011c38:	d1ba      	bne.n	8011bb0 <__swsetup_r+0x30>
 8011c3a:	bd70      	pop	{r4, r5, r6, pc}
 8011c3c:	0781      	lsls	r1, r0, #30
 8011c3e:	bf58      	it	pl
 8011c40:	6963      	ldrpl	r3, [r4, #20]
 8011c42:	60a3      	str	r3, [r4, #8]
 8011c44:	e7f4      	b.n	8011c30 <__swsetup_r+0xb0>
 8011c46:	2000      	movs	r0, #0
 8011c48:	e7f7      	b.n	8011c3a <__swsetup_r+0xba>
 8011c4a:	bf00      	nop
 8011c4c:	2000005c 	.word	0x2000005c
 8011c50:	0801540c 	.word	0x0801540c
 8011c54:	0801542c 	.word	0x0801542c
 8011c58:	080153ec 	.word	0x080153ec

08011c5c <abort>:
 8011c5c:	b508      	push	{r3, lr}
 8011c5e:	2006      	movs	r0, #6
 8011c60:	f000 f994 	bl	8011f8c <raise>
 8011c64:	2001      	movs	r0, #1
 8011c66:	f7ef f8bb 	bl	8000de0 <_exit>
	...

08011c6c <_close_r>:
 8011c6c:	b538      	push	{r3, r4, r5, lr}
 8011c6e:	4d06      	ldr	r5, [pc, #24]	; (8011c88 <_close_r+0x1c>)
 8011c70:	2300      	movs	r3, #0
 8011c72:	4604      	mov	r4, r0
 8011c74:	4608      	mov	r0, r1
 8011c76:	602b      	str	r3, [r5, #0]
 8011c78:	f7ef f8f5 	bl	8000e66 <_close>
 8011c7c:	1c43      	adds	r3, r0, #1
 8011c7e:	d102      	bne.n	8011c86 <_close_r+0x1a>
 8011c80:	682b      	ldr	r3, [r5, #0]
 8011c82:	b103      	cbz	r3, 8011c86 <_close_r+0x1a>
 8011c84:	6023      	str	r3, [r4, #0]
 8011c86:	bd38      	pop	{r3, r4, r5, pc}
 8011c88:	20008880 	.word	0x20008880

08011c8c <__sflush_r>:
 8011c8c:	898a      	ldrh	r2, [r1, #12]
 8011c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c92:	4605      	mov	r5, r0
 8011c94:	0710      	lsls	r0, r2, #28
 8011c96:	460c      	mov	r4, r1
 8011c98:	d458      	bmi.n	8011d4c <__sflush_r+0xc0>
 8011c9a:	684b      	ldr	r3, [r1, #4]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	dc05      	bgt.n	8011cac <__sflush_r+0x20>
 8011ca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	dc02      	bgt.n	8011cac <__sflush_r+0x20>
 8011ca6:	2000      	movs	r0, #0
 8011ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011cae:	2e00      	cmp	r6, #0
 8011cb0:	d0f9      	beq.n	8011ca6 <__sflush_r+0x1a>
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011cb8:	682f      	ldr	r7, [r5, #0]
 8011cba:	602b      	str	r3, [r5, #0]
 8011cbc:	d032      	beq.n	8011d24 <__sflush_r+0x98>
 8011cbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011cc0:	89a3      	ldrh	r3, [r4, #12]
 8011cc2:	075a      	lsls	r2, r3, #29
 8011cc4:	d505      	bpl.n	8011cd2 <__sflush_r+0x46>
 8011cc6:	6863      	ldr	r3, [r4, #4]
 8011cc8:	1ac0      	subs	r0, r0, r3
 8011cca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011ccc:	b10b      	cbz	r3, 8011cd2 <__sflush_r+0x46>
 8011cce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011cd0:	1ac0      	subs	r0, r0, r3
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	4602      	mov	r2, r0
 8011cd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011cd8:	6a21      	ldr	r1, [r4, #32]
 8011cda:	4628      	mov	r0, r5
 8011cdc:	47b0      	blx	r6
 8011cde:	1c43      	adds	r3, r0, #1
 8011ce0:	89a3      	ldrh	r3, [r4, #12]
 8011ce2:	d106      	bne.n	8011cf2 <__sflush_r+0x66>
 8011ce4:	6829      	ldr	r1, [r5, #0]
 8011ce6:	291d      	cmp	r1, #29
 8011ce8:	d82c      	bhi.n	8011d44 <__sflush_r+0xb8>
 8011cea:	4a2a      	ldr	r2, [pc, #168]	; (8011d94 <__sflush_r+0x108>)
 8011cec:	40ca      	lsrs	r2, r1
 8011cee:	07d6      	lsls	r6, r2, #31
 8011cf0:	d528      	bpl.n	8011d44 <__sflush_r+0xb8>
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	6062      	str	r2, [r4, #4]
 8011cf6:	04d9      	lsls	r1, r3, #19
 8011cf8:	6922      	ldr	r2, [r4, #16]
 8011cfa:	6022      	str	r2, [r4, #0]
 8011cfc:	d504      	bpl.n	8011d08 <__sflush_r+0x7c>
 8011cfe:	1c42      	adds	r2, r0, #1
 8011d00:	d101      	bne.n	8011d06 <__sflush_r+0x7a>
 8011d02:	682b      	ldr	r3, [r5, #0]
 8011d04:	b903      	cbnz	r3, 8011d08 <__sflush_r+0x7c>
 8011d06:	6560      	str	r0, [r4, #84]	; 0x54
 8011d08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d0a:	602f      	str	r7, [r5, #0]
 8011d0c:	2900      	cmp	r1, #0
 8011d0e:	d0ca      	beq.n	8011ca6 <__sflush_r+0x1a>
 8011d10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d14:	4299      	cmp	r1, r3
 8011d16:	d002      	beq.n	8011d1e <__sflush_r+0x92>
 8011d18:	4628      	mov	r0, r5
 8011d1a:	f7ff faab 	bl	8011274 <_free_r>
 8011d1e:	2000      	movs	r0, #0
 8011d20:	6360      	str	r0, [r4, #52]	; 0x34
 8011d22:	e7c1      	b.n	8011ca8 <__sflush_r+0x1c>
 8011d24:	6a21      	ldr	r1, [r4, #32]
 8011d26:	2301      	movs	r3, #1
 8011d28:	4628      	mov	r0, r5
 8011d2a:	47b0      	blx	r6
 8011d2c:	1c41      	adds	r1, r0, #1
 8011d2e:	d1c7      	bne.n	8011cc0 <__sflush_r+0x34>
 8011d30:	682b      	ldr	r3, [r5, #0]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d0c4      	beq.n	8011cc0 <__sflush_r+0x34>
 8011d36:	2b1d      	cmp	r3, #29
 8011d38:	d001      	beq.n	8011d3e <__sflush_r+0xb2>
 8011d3a:	2b16      	cmp	r3, #22
 8011d3c:	d101      	bne.n	8011d42 <__sflush_r+0xb6>
 8011d3e:	602f      	str	r7, [r5, #0]
 8011d40:	e7b1      	b.n	8011ca6 <__sflush_r+0x1a>
 8011d42:	89a3      	ldrh	r3, [r4, #12]
 8011d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d48:	81a3      	strh	r3, [r4, #12]
 8011d4a:	e7ad      	b.n	8011ca8 <__sflush_r+0x1c>
 8011d4c:	690f      	ldr	r7, [r1, #16]
 8011d4e:	2f00      	cmp	r7, #0
 8011d50:	d0a9      	beq.n	8011ca6 <__sflush_r+0x1a>
 8011d52:	0793      	lsls	r3, r2, #30
 8011d54:	680e      	ldr	r6, [r1, #0]
 8011d56:	bf08      	it	eq
 8011d58:	694b      	ldreq	r3, [r1, #20]
 8011d5a:	600f      	str	r7, [r1, #0]
 8011d5c:	bf18      	it	ne
 8011d5e:	2300      	movne	r3, #0
 8011d60:	eba6 0807 	sub.w	r8, r6, r7
 8011d64:	608b      	str	r3, [r1, #8]
 8011d66:	f1b8 0f00 	cmp.w	r8, #0
 8011d6a:	dd9c      	ble.n	8011ca6 <__sflush_r+0x1a>
 8011d6c:	6a21      	ldr	r1, [r4, #32]
 8011d6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011d70:	4643      	mov	r3, r8
 8011d72:	463a      	mov	r2, r7
 8011d74:	4628      	mov	r0, r5
 8011d76:	47b0      	blx	r6
 8011d78:	2800      	cmp	r0, #0
 8011d7a:	dc06      	bgt.n	8011d8a <__sflush_r+0xfe>
 8011d7c:	89a3      	ldrh	r3, [r4, #12]
 8011d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d82:	81a3      	strh	r3, [r4, #12]
 8011d84:	f04f 30ff 	mov.w	r0, #4294967295
 8011d88:	e78e      	b.n	8011ca8 <__sflush_r+0x1c>
 8011d8a:	4407      	add	r7, r0
 8011d8c:	eba8 0800 	sub.w	r8, r8, r0
 8011d90:	e7e9      	b.n	8011d66 <__sflush_r+0xda>
 8011d92:	bf00      	nop
 8011d94:	20400001 	.word	0x20400001

08011d98 <_fflush_r>:
 8011d98:	b538      	push	{r3, r4, r5, lr}
 8011d9a:	690b      	ldr	r3, [r1, #16]
 8011d9c:	4605      	mov	r5, r0
 8011d9e:	460c      	mov	r4, r1
 8011da0:	b913      	cbnz	r3, 8011da8 <_fflush_r+0x10>
 8011da2:	2500      	movs	r5, #0
 8011da4:	4628      	mov	r0, r5
 8011da6:	bd38      	pop	{r3, r4, r5, pc}
 8011da8:	b118      	cbz	r0, 8011db2 <_fflush_r+0x1a>
 8011daa:	6983      	ldr	r3, [r0, #24]
 8011dac:	b90b      	cbnz	r3, 8011db2 <_fflush_r+0x1a>
 8011dae:	f7ff f9a7 	bl	8011100 <__sinit>
 8011db2:	4b14      	ldr	r3, [pc, #80]	; (8011e04 <_fflush_r+0x6c>)
 8011db4:	429c      	cmp	r4, r3
 8011db6:	d11b      	bne.n	8011df0 <_fflush_r+0x58>
 8011db8:	686c      	ldr	r4, [r5, #4]
 8011dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d0ef      	beq.n	8011da2 <_fflush_r+0xa>
 8011dc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011dc4:	07d0      	lsls	r0, r2, #31
 8011dc6:	d404      	bmi.n	8011dd2 <_fflush_r+0x3a>
 8011dc8:	0599      	lsls	r1, r3, #22
 8011dca:	d402      	bmi.n	8011dd2 <_fflush_r+0x3a>
 8011dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011dce:	f7ff fa47 	bl	8011260 <__retarget_lock_acquire_recursive>
 8011dd2:	4628      	mov	r0, r5
 8011dd4:	4621      	mov	r1, r4
 8011dd6:	f7ff ff59 	bl	8011c8c <__sflush_r>
 8011dda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011ddc:	07da      	lsls	r2, r3, #31
 8011dde:	4605      	mov	r5, r0
 8011de0:	d4e0      	bmi.n	8011da4 <_fflush_r+0xc>
 8011de2:	89a3      	ldrh	r3, [r4, #12]
 8011de4:	059b      	lsls	r3, r3, #22
 8011de6:	d4dd      	bmi.n	8011da4 <_fflush_r+0xc>
 8011de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011dea:	f7ff fa3a 	bl	8011262 <__retarget_lock_release_recursive>
 8011dee:	e7d9      	b.n	8011da4 <_fflush_r+0xc>
 8011df0:	4b05      	ldr	r3, [pc, #20]	; (8011e08 <_fflush_r+0x70>)
 8011df2:	429c      	cmp	r4, r3
 8011df4:	d101      	bne.n	8011dfa <_fflush_r+0x62>
 8011df6:	68ac      	ldr	r4, [r5, #8]
 8011df8:	e7df      	b.n	8011dba <_fflush_r+0x22>
 8011dfa:	4b04      	ldr	r3, [pc, #16]	; (8011e0c <_fflush_r+0x74>)
 8011dfc:	429c      	cmp	r4, r3
 8011dfe:	bf08      	it	eq
 8011e00:	68ec      	ldreq	r4, [r5, #12]
 8011e02:	e7da      	b.n	8011dba <_fflush_r+0x22>
 8011e04:	0801540c 	.word	0x0801540c
 8011e08:	0801542c 	.word	0x0801542c
 8011e0c:	080153ec 	.word	0x080153ec

08011e10 <_lseek_r>:
 8011e10:	b538      	push	{r3, r4, r5, lr}
 8011e12:	4d07      	ldr	r5, [pc, #28]	; (8011e30 <_lseek_r+0x20>)
 8011e14:	4604      	mov	r4, r0
 8011e16:	4608      	mov	r0, r1
 8011e18:	4611      	mov	r1, r2
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	602a      	str	r2, [r5, #0]
 8011e1e:	461a      	mov	r2, r3
 8011e20:	f7ef f848 	bl	8000eb4 <_lseek>
 8011e24:	1c43      	adds	r3, r0, #1
 8011e26:	d102      	bne.n	8011e2e <_lseek_r+0x1e>
 8011e28:	682b      	ldr	r3, [r5, #0]
 8011e2a:	b103      	cbz	r3, 8011e2e <_lseek_r+0x1e>
 8011e2c:	6023      	str	r3, [r4, #0]
 8011e2e:	bd38      	pop	{r3, r4, r5, pc}
 8011e30:	20008880 	.word	0x20008880

08011e34 <__swhatbuf_r>:
 8011e34:	b570      	push	{r4, r5, r6, lr}
 8011e36:	460e      	mov	r6, r1
 8011e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e3c:	2900      	cmp	r1, #0
 8011e3e:	b096      	sub	sp, #88	; 0x58
 8011e40:	4614      	mov	r4, r2
 8011e42:	461d      	mov	r5, r3
 8011e44:	da08      	bge.n	8011e58 <__swhatbuf_r+0x24>
 8011e46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	602a      	str	r2, [r5, #0]
 8011e4e:	061a      	lsls	r2, r3, #24
 8011e50:	d410      	bmi.n	8011e74 <__swhatbuf_r+0x40>
 8011e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e56:	e00e      	b.n	8011e76 <__swhatbuf_r+0x42>
 8011e58:	466a      	mov	r2, sp
 8011e5a:	f000 f8b3 	bl	8011fc4 <_fstat_r>
 8011e5e:	2800      	cmp	r0, #0
 8011e60:	dbf1      	blt.n	8011e46 <__swhatbuf_r+0x12>
 8011e62:	9a01      	ldr	r2, [sp, #4]
 8011e64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011e68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011e6c:	425a      	negs	r2, r3
 8011e6e:	415a      	adcs	r2, r3
 8011e70:	602a      	str	r2, [r5, #0]
 8011e72:	e7ee      	b.n	8011e52 <__swhatbuf_r+0x1e>
 8011e74:	2340      	movs	r3, #64	; 0x40
 8011e76:	2000      	movs	r0, #0
 8011e78:	6023      	str	r3, [r4, #0]
 8011e7a:	b016      	add	sp, #88	; 0x58
 8011e7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011e80 <__smakebuf_r>:
 8011e80:	898b      	ldrh	r3, [r1, #12]
 8011e82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e84:	079d      	lsls	r5, r3, #30
 8011e86:	4606      	mov	r6, r0
 8011e88:	460c      	mov	r4, r1
 8011e8a:	d507      	bpl.n	8011e9c <__smakebuf_r+0x1c>
 8011e8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011e90:	6023      	str	r3, [r4, #0]
 8011e92:	6123      	str	r3, [r4, #16]
 8011e94:	2301      	movs	r3, #1
 8011e96:	6163      	str	r3, [r4, #20]
 8011e98:	b002      	add	sp, #8
 8011e9a:	bd70      	pop	{r4, r5, r6, pc}
 8011e9c:	ab01      	add	r3, sp, #4
 8011e9e:	466a      	mov	r2, sp
 8011ea0:	f7ff ffc8 	bl	8011e34 <__swhatbuf_r>
 8011ea4:	9900      	ldr	r1, [sp, #0]
 8011ea6:	4605      	mov	r5, r0
 8011ea8:	4630      	mov	r0, r6
 8011eaa:	f7ff fa4f 	bl	801134c <_malloc_r>
 8011eae:	b948      	cbnz	r0, 8011ec4 <__smakebuf_r+0x44>
 8011eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011eb4:	059a      	lsls	r2, r3, #22
 8011eb6:	d4ef      	bmi.n	8011e98 <__smakebuf_r+0x18>
 8011eb8:	f023 0303 	bic.w	r3, r3, #3
 8011ebc:	f043 0302 	orr.w	r3, r3, #2
 8011ec0:	81a3      	strh	r3, [r4, #12]
 8011ec2:	e7e3      	b.n	8011e8c <__smakebuf_r+0xc>
 8011ec4:	4b0d      	ldr	r3, [pc, #52]	; (8011efc <__smakebuf_r+0x7c>)
 8011ec6:	62b3      	str	r3, [r6, #40]	; 0x28
 8011ec8:	89a3      	ldrh	r3, [r4, #12]
 8011eca:	6020      	str	r0, [r4, #0]
 8011ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ed0:	81a3      	strh	r3, [r4, #12]
 8011ed2:	9b00      	ldr	r3, [sp, #0]
 8011ed4:	6163      	str	r3, [r4, #20]
 8011ed6:	9b01      	ldr	r3, [sp, #4]
 8011ed8:	6120      	str	r0, [r4, #16]
 8011eda:	b15b      	cbz	r3, 8011ef4 <__smakebuf_r+0x74>
 8011edc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ee0:	4630      	mov	r0, r6
 8011ee2:	f000 f881 	bl	8011fe8 <_isatty_r>
 8011ee6:	b128      	cbz	r0, 8011ef4 <__smakebuf_r+0x74>
 8011ee8:	89a3      	ldrh	r3, [r4, #12]
 8011eea:	f023 0303 	bic.w	r3, r3, #3
 8011eee:	f043 0301 	orr.w	r3, r3, #1
 8011ef2:	81a3      	strh	r3, [r4, #12]
 8011ef4:	89a0      	ldrh	r0, [r4, #12]
 8011ef6:	4305      	orrs	r5, r0
 8011ef8:	81a5      	strh	r5, [r4, #12]
 8011efa:	e7cd      	b.n	8011e98 <__smakebuf_r+0x18>
 8011efc:	08011099 	.word	0x08011099

08011f00 <__malloc_lock>:
 8011f00:	4801      	ldr	r0, [pc, #4]	; (8011f08 <__malloc_lock+0x8>)
 8011f02:	f7ff b9ad 	b.w	8011260 <__retarget_lock_acquire_recursive>
 8011f06:	bf00      	nop
 8011f08:	20008884 	.word	0x20008884

08011f0c <__malloc_unlock>:
 8011f0c:	4801      	ldr	r0, [pc, #4]	; (8011f14 <__malloc_unlock+0x8>)
 8011f0e:	f7ff b9a8 	b.w	8011262 <__retarget_lock_release_recursive>
 8011f12:	bf00      	nop
 8011f14:	20008884 	.word	0x20008884

08011f18 <_read_r>:
 8011f18:	b538      	push	{r3, r4, r5, lr}
 8011f1a:	4d07      	ldr	r5, [pc, #28]	; (8011f38 <_read_r+0x20>)
 8011f1c:	4604      	mov	r4, r0
 8011f1e:	4608      	mov	r0, r1
 8011f20:	4611      	mov	r1, r2
 8011f22:	2200      	movs	r2, #0
 8011f24:	602a      	str	r2, [r5, #0]
 8011f26:	461a      	mov	r2, r3
 8011f28:	f7ee ff64 	bl	8000df4 <_read>
 8011f2c:	1c43      	adds	r3, r0, #1
 8011f2e:	d102      	bne.n	8011f36 <_read_r+0x1e>
 8011f30:	682b      	ldr	r3, [r5, #0]
 8011f32:	b103      	cbz	r3, 8011f36 <_read_r+0x1e>
 8011f34:	6023      	str	r3, [r4, #0]
 8011f36:	bd38      	pop	{r3, r4, r5, pc}
 8011f38:	20008880 	.word	0x20008880

08011f3c <_raise_r>:
 8011f3c:	291f      	cmp	r1, #31
 8011f3e:	b538      	push	{r3, r4, r5, lr}
 8011f40:	4604      	mov	r4, r0
 8011f42:	460d      	mov	r5, r1
 8011f44:	d904      	bls.n	8011f50 <_raise_r+0x14>
 8011f46:	2316      	movs	r3, #22
 8011f48:	6003      	str	r3, [r0, #0]
 8011f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8011f4e:	bd38      	pop	{r3, r4, r5, pc}
 8011f50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011f52:	b112      	cbz	r2, 8011f5a <_raise_r+0x1e>
 8011f54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011f58:	b94b      	cbnz	r3, 8011f6e <_raise_r+0x32>
 8011f5a:	4620      	mov	r0, r4
 8011f5c:	f000 f830 	bl	8011fc0 <_getpid_r>
 8011f60:	462a      	mov	r2, r5
 8011f62:	4601      	mov	r1, r0
 8011f64:	4620      	mov	r0, r4
 8011f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f6a:	f000 b817 	b.w	8011f9c <_kill_r>
 8011f6e:	2b01      	cmp	r3, #1
 8011f70:	d00a      	beq.n	8011f88 <_raise_r+0x4c>
 8011f72:	1c59      	adds	r1, r3, #1
 8011f74:	d103      	bne.n	8011f7e <_raise_r+0x42>
 8011f76:	2316      	movs	r3, #22
 8011f78:	6003      	str	r3, [r0, #0]
 8011f7a:	2001      	movs	r0, #1
 8011f7c:	e7e7      	b.n	8011f4e <_raise_r+0x12>
 8011f7e:	2400      	movs	r4, #0
 8011f80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011f84:	4628      	mov	r0, r5
 8011f86:	4798      	blx	r3
 8011f88:	2000      	movs	r0, #0
 8011f8a:	e7e0      	b.n	8011f4e <_raise_r+0x12>

08011f8c <raise>:
 8011f8c:	4b02      	ldr	r3, [pc, #8]	; (8011f98 <raise+0xc>)
 8011f8e:	4601      	mov	r1, r0
 8011f90:	6818      	ldr	r0, [r3, #0]
 8011f92:	f7ff bfd3 	b.w	8011f3c <_raise_r>
 8011f96:	bf00      	nop
 8011f98:	2000005c 	.word	0x2000005c

08011f9c <_kill_r>:
 8011f9c:	b538      	push	{r3, r4, r5, lr}
 8011f9e:	4d07      	ldr	r5, [pc, #28]	; (8011fbc <_kill_r+0x20>)
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	4604      	mov	r4, r0
 8011fa4:	4608      	mov	r0, r1
 8011fa6:	4611      	mov	r1, r2
 8011fa8:	602b      	str	r3, [r5, #0]
 8011faa:	f7ee ff07 	bl	8000dbc <_kill>
 8011fae:	1c43      	adds	r3, r0, #1
 8011fb0:	d102      	bne.n	8011fb8 <_kill_r+0x1c>
 8011fb2:	682b      	ldr	r3, [r5, #0]
 8011fb4:	b103      	cbz	r3, 8011fb8 <_kill_r+0x1c>
 8011fb6:	6023      	str	r3, [r4, #0]
 8011fb8:	bd38      	pop	{r3, r4, r5, pc}
 8011fba:	bf00      	nop
 8011fbc:	20008880 	.word	0x20008880

08011fc0 <_getpid_r>:
 8011fc0:	f7ee bef4 	b.w	8000dac <_getpid>

08011fc4 <_fstat_r>:
 8011fc4:	b538      	push	{r3, r4, r5, lr}
 8011fc6:	4d07      	ldr	r5, [pc, #28]	; (8011fe4 <_fstat_r+0x20>)
 8011fc8:	2300      	movs	r3, #0
 8011fca:	4604      	mov	r4, r0
 8011fcc:	4608      	mov	r0, r1
 8011fce:	4611      	mov	r1, r2
 8011fd0:	602b      	str	r3, [r5, #0]
 8011fd2:	f7ee ff54 	bl	8000e7e <_fstat>
 8011fd6:	1c43      	adds	r3, r0, #1
 8011fd8:	d102      	bne.n	8011fe0 <_fstat_r+0x1c>
 8011fda:	682b      	ldr	r3, [r5, #0]
 8011fdc:	b103      	cbz	r3, 8011fe0 <_fstat_r+0x1c>
 8011fde:	6023      	str	r3, [r4, #0]
 8011fe0:	bd38      	pop	{r3, r4, r5, pc}
 8011fe2:	bf00      	nop
 8011fe4:	20008880 	.word	0x20008880

08011fe8 <_isatty_r>:
 8011fe8:	b538      	push	{r3, r4, r5, lr}
 8011fea:	4d06      	ldr	r5, [pc, #24]	; (8012004 <_isatty_r+0x1c>)
 8011fec:	2300      	movs	r3, #0
 8011fee:	4604      	mov	r4, r0
 8011ff0:	4608      	mov	r0, r1
 8011ff2:	602b      	str	r3, [r5, #0]
 8011ff4:	f7ee ff53 	bl	8000e9e <_isatty>
 8011ff8:	1c43      	adds	r3, r0, #1
 8011ffa:	d102      	bne.n	8012002 <_isatty_r+0x1a>
 8011ffc:	682b      	ldr	r3, [r5, #0]
 8011ffe:	b103      	cbz	r3, 8012002 <_isatty_r+0x1a>
 8012000:	6023      	str	r3, [r4, #0]
 8012002:	bd38      	pop	{r3, r4, r5, pc}
 8012004:	20008880 	.word	0x20008880

08012008 <_init>:
 8012008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801200a:	bf00      	nop
 801200c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801200e:	bc08      	pop	{r3}
 8012010:	469e      	mov	lr, r3
 8012012:	4770      	bx	lr

08012014 <_fini>:
 8012014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012016:	bf00      	nop
 8012018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801201a:	bc08      	pop	{r3}
 801201c:	469e      	mov	lr, r3
 801201e:	4770      	bx	lr
